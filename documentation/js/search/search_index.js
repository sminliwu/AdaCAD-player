var COMPODOC_SEARCH_INDEX = {
    "index": {"version":"2.3.9","fields":["title","body"],"fieldVectors":[["title/classes/AbstractOpFactory.html",[0,0.174,1,2.3]],["body/classes/AbstractOpFactory.html",[0,0.319,1,3.115,2,0.856,3,0.045,4,0.039,5,0.033,6,1.411,7,0.039,8,0.807,9,2.696,10,2.696,11,3.418,12,3.418,13,3.418,14,2.88,15,4.496,16,0.895,17,2.782,18,0.859,19,0.01,20,0.436,21,0.148,22,1.129,23,3.477,24,1.456,25,3.217,26,3.704,27,4.516,28,2.782,29,2.782,30,3.24,31,2.782,32,2.782,33,3.503,34,2.782,35,3.24,36,2.782,37,2.782,38,3.503,39,2.782,40,3.24,41,2.782,42,2.782,43,3.503,44,2.782,45,3.24,46,2.782,47,2.782,48,3.503,49,2.782,50,0.263,51,0.891,52,0.605,53,1.061,54,1.194,55,3.503,56,1.465,57,1.433,58,1.232,59,3.503,60,2.832,61,2.027,62,1.465,63,1.478,64,1.465,65,1.465,66,1.697,67,1.197,68,1.465,69,1.759,70,1.362,71,2.93,72,2.538,73,1.733,74,0.879,75,2.25,76,2.88,77,1.524,78,1.524,79,2.356,80,1.465,81,1.76,82,0.986,83,0.141,84,2.265,85,0.497,86,1.139,87,1.465,88,2.835,89,2.769,90,2.88,91,1.003,92,1.232,93,1.524,94,0.204,95,2.356,96,0.856,97,1.338,98,3.43,99,2.626,100,2.027,101,3.33,102,3.33,103,3.33,104,4.428,105,3.704,106,0.15,107,3.561,108,1.232,109,2.542,110,4.428,111,2.034,112,2.368,113,3.503,114,1.584,115,2.021,116,2.705,117,2.538,118,1.573,119,1.003,120,1.362,121,2.265,122,1.465,123,1.524,124,4.209,125,1.465,126,1.524,127,3.704,128,1.232,129,1.315,130,1.551,131,2.769,132,3.443,133,3.24,134,2.462,135,3.368,136,3.704,137,3.989,138,3.443,139,3.503,140,2.88,141,2.88,142,2.88,143,1.465,144,4.182,145,2.356,146,2.356,147,1.524,148,1.524,149,1.524,150,1.524,151,1.524,152,3.115,153,2.265,154,0.737,155,1.089,156,1.124,157,1.465,158,1.524,159,2.105,160,1.315,161,1.315,162,1.465,163,0.454,164,0.341,165,0.565,166,1.465,167,2.265,168,3.503,169,2.265,170,3.24,171,2.265,172,2.265,173,2.265,174,1.465,175,3.713,176,2.769,177,0.902,178,0.403,179,1.524,180,1.524,181,1.524,182,1.524,183,0.814,184,1.524,185,1.362,186,2.265,187,0.516,188,3.779,189,2.591,190,1.194,191,0.926,192,1.524,193,1.194,194,1.315,195,1.315,196,0.926,197,1.092,198,1.315,199,1.315,200,1.061,201,0.926,202,0.303,203,2.486,204,1.315,205,1.524,206,1.272,207,0.774,208,2.265,209,1.747,210,2.356,211,1.524,212,1.465,213,0.835,214,1.524,215,1.315,216,1.003,217,1.524,218,1.524,219,1.524,220,0.926,221,1.524,222,0.835,223,1.465,224,1.524,225,3.333,226,1.524,227,1.173,228,1.967,229,1.64,230,0.737,231,1.362,232,1.465,233,2.265,234,1.465,235,1.465,236,2.88,237,2.88,238,2.88,239,1.524,240,0.794,241,1.524,242,1.524,243,1.967,244,1.524,245,2.356,246,1.524,247,2.356,248,1.524,249,2.88,250,1.524,251,2.356,252,3.115,253,2.356,254,2.88,255,1.524,256,1.524,257,1.524,258,0.472,259,1.524,260,1.524,261,1.524,262,1.524,263,1.524,264,3.694,265,0.781,266,1.465,267,1.465,268,1.524,269,1.524,270,0.652,271,1.524,272,2.265,273,1.846,274,1.524,275,1.524,276,1.524,277,1.524,278,1.524,279,1.524,280,1.543,281,1.367,282,3.503,283,1.524,284,1.524,285,1.524,286,1.524,287,1.524,288,1.524,289,1.362,290,1.524,291,1.465,292,1.465,293,1.524,294,1.411,295,1.465,296,1.524,297,4.03,298,1.124,299,1.524,300,1.524,301,1.524,302,1.524,303,1.524,304,1.524,305,2.356,306,2.356,307,3.24,308,2.356,309,1.524,310,1.524,311,1.524,312,1.524,313,1.524,314,1.465,315,1.003,316,1.524,317,0.005,318,0.005]],["title/classes/BaseOp.html",[0,0.174,25,1.575]],["body/classes/BaseOp.html",[0,0.321,1,2.819,2,0.881,3,0.047,4,0.04,5,0.034,6,1.453,7,0.04,8,0.825,9,1.931,10,1.931,11,2.448,12,2.448,13,2.448,14,2.409,15,4.183,16,0.884,18,0.728,19,0.01,20,0.42,21,0.148,22,0.938,23,2.228,24,0.784,25,3.137,26,3.29,27,4.236,30,2.409,33,3.29,35,2.409,38,3.29,40,2.409,43,3.29,45,2.409,48,3.29,50,0.268,51,0.895,52,0.623,53,1.092,54,1.229,55,3.55,56,1.508,57,1.453,58,1.268,59,3.55,60,2.869,61,2.179,62,1.508,63,1.484,64,1.508,65,1.508,66,1.708,67,1.224,68,1.508,69,1.786,70,1.401,71,2.962,72,2.577,73,1.746,74,0.904,75,2.276,76,2.933,77,1.569,78,1.569,79,2.409,80,1.508,81,1.776,82,1.004,83,0.142,84,2.316,85,0.508,86,1.165,87,1.508,88,2.849,89,2.819,90,2.933,91,1.033,92,1.268,93,1.569,94,0.215,95,2.409,96,0.881,97,1.347,98,3.729,99,2.651,100,2.046,101,3.362,102,3.362,103,3.362,104,4.448,105,3.747,106,0.153,107,3.602,108,1.268,109,2.569,110,4.55,111,2.079,112,2.384,113,3.55,114,1.668,115,2.052,116,2.747,117,2.577,118,1.594,119,1.033,120,1.401,121,2.316,122,1.508,123,1.569,124,4.236,125,1.508,126,1.569,127,3.747,128,1.268,129,1.354,130,1.586,131,2.819,132,3.475,133,3.29,134,2.5,135,3.751,136,3.747,137,4.027,138,3.475,139,3.55,140,2.933,141,2.933,142,2.933,143,1.508,144,4.288,145,2.409,146,2.409,147,1.569,148,1.569,149,1.569,150,1.569,151,1.569,152,3.163,153,2.316,154,0.758,155,1.109,156,1.157,157,1.508,158,1.569,159,2.152,160,1.354,161,1.354,162,1.508,163,0.464,164,0.351,165,0.57,166,1.508,167,2.316,168,3.55,169,2.316,170,3.29,171,2.316,172,2.316,173,2.316,174,1.508,175,3.751,176,3.163,177,0.928,178,0.415,179,1.569,180,1.569,181,1.569,182,1.569,183,0.838,184,1.569,185,1.401,186,2.316,187,0.522,188,3.943,189,2.703,190,1.229,191,0.953,192,1.569,193,1.229,194,1.354,195,1.354,196,0.953,197,1.124,198,1.354,199,1.354,200,1.092,201,0.953,202,0.478,203,3.064,204,1.354,205,1.569,206,1.31,207,0.797,208,2.819,209,1.767,210,3.29,211,1.569,212,1.508,213,0.859,214,1.569,215,1.354,216,1.033,217,1.569,218,1.569,219,1.569,220,1.463,221,2.409,222,1.32,223,2.316,224,2.409,225,3.564,226,2.933,227,1.214,228,2.011,229,1.677,230,0.758,231,1.401,232,1.508,233,2.316,234,1.508,235,1.508,236,3.29,237,3.55,238,3.55,239,1.569,240,0.817,241,1.569,242,1.569,243,2.011,244,1.569,245,2.409,246,1.569,247,2.409,248,1.569,249,2.933,250,1.569,251,2.409,252,3.163,253,2.409,254,2.933,255,1.569,256,1.569,257,2.409,258,0.746,259,1.569,260,1.569,261,1.569,262,2.409,263,1.569,264,3.824,265,0.786,266,1.508,267,1.508,268,1.569,269,1.569,270,0.671,271,1.569,272,2.316,273,1.887,274,1.569,275,1.569,276,1.569,277,1.569,278,1.569,279,1.569,280,1.555,281,1.383,282,3.55,283,1.569,284,1.569,285,1.569,286,1.569,287,1.569,288,1.569,289,1.401,290,1.569,291,1.508,292,1.508,293,1.569,294,1.453,295,1.508,296,1.569,297,4.051,298,1.157,299,1.569,300,1.569,301,1.569,302,1.569,303,1.569,304,1.569,305,2.409,306,2.409,307,3.29,308,2.409,309,1.569,310,1.569,311,1.569,312,1.569,313,1.569,314,1.508,315,1.033,316,1.569,317,0.005,318,0.005,319,0.112,320,4.397,321,2.863,322,2.863,323,3.585,324,2.863,325,2.863,326,2.863,327,2.863,328,2.863,329,2.863,330,2.863,331,2.863,332,2.863,333,2.863,334,2.863,335,2.863]],["title/interfaces/Bounds.html",[106,0.111,336,1.575]],["body/interfaces/Bounds.html",[3,0.107,4,0.092,5,0.077,7,0.092,19,0.01,21,0.139,51,0.817,83,0.126,85,0.478,94,0.27,106,0.21,165,0.64,202,0.714,317,0.008,318,0.008,319,0.197,336,2.796,337,1.171,338,5.782,339,2.874,340,7.271,341,2.675,342,3.671,343,4.968,344,3.46,345,4.325,346,2.02,347,3.456,348,2.242,349,6.831,350,2.053,351,3.917,352,4.886,353,4.58,354,5.269,355,1.781,356,5.269,357,4.326,358,3.747,359,3.917,360,5.782,361,4.886,362,4.886,363,4.886]],["title/classes/Branch.html",[0,0.174,102,1.997]],["body/classes/Branch.html",[0,0.324,1,2.896,2,0.92,3,0.049,4,0.042,5,0.035,6,1.517,7,0.042,9,1.983,10,1.983,11,2.514,12,2.514,13,2.514,14,2.49,15,4.225,16,0.668,18,0.628,19,0.01,20,0.406,21,0.148,22,0.41,23,2.288,25,3.133,26,3.365,27,4.275,30,2.49,33,3.365,35,2.49,38,3.365,40,2.49,43,3.365,45,2.49,48,3.365,50,0.275,51,0.909,52,0.651,53,1.14,54,1.283,55,3.619,56,1.575,57,1.449,58,1.324,59,3.619,60,2.925,61,2.074,62,1.575,63,1.499,64,1.575,65,1.575,66,1.724,67,1.265,68,1.575,69,1.815,70,1.463,71,2.957,72,2.636,73,1.764,74,0.944,75,2.315,76,3.012,77,1.638,78,1.638,79,2.49,80,1.575,81,1.805,82,1.031,83,0.142,84,2.394,85,0.505,86,1.204,87,1.575,88,2.933,89,2.896,90,3.012,91,1.078,92,1.324,93,1.638,94,0.21,95,2.49,96,0.92,97,1.36,98,3.529,99,2.687,100,2.074,101,3.408,102,3.49,103,3.408,104,4.477,105,3.811,106,0.156,107,3.808,108,1.324,109,2.608,110,4.477,111,2.149,112,2.461,113,3.811,114,1.694,115,2.257,116,3.021,117,2.835,118,1.711,119,1.078,120,1.463,121,2.394,122,1.575,123,1.638,124,4.275,125,1.575,126,1.638,127,3.811,128,1.324,129,1.414,130,1.639,131,2.896,132,3.523,133,3.365,134,2.556,135,3.479,136,3.811,137,4.082,138,3.523,139,3.619,140,3.012,141,3.012,142,3.012,143,1.575,144,4.264,145,2.49,146,2.49,147,1.638,148,1.638,149,1.638,150,1.638,151,1.638,152,3.235,153,2.394,154,0.792,155,1.139,156,1.208,157,1.575,158,1.638,159,2.224,160,1.414,161,1.414,162,1.575,163,0.479,164,0.366,165,0.578,166,1.575,167,2.394,168,3.619,169,2.394,170,3.365,171,2.394,172,2.394,173,2.394,174,1.575,175,3.808,176,2.896,177,0.969,178,0.433,179,1.638,180,1.638,181,1.638,182,1.638,183,0.875,184,1.638,185,1.463,186,2.394,187,0.519,188,3.838,189,2.631,190,1.283,191,0.995,192,1.638,193,1.283,194,1.414,195,1.414,196,0.995,197,1.173,198,1.414,199,1.414,200,1.14,201,0.995,202,0.494,203,2.6,204,1.414,205,1.638,206,1.367,207,0.832,208,2.394,209,1.797,210,2.49,211,1.638,212,1.575,213,0.897,214,1.638,215,1.414,216,1.078,217,1.638,218,1.638,219,1.638,220,0.995,221,1.638,222,0.897,223,1.575,224,1.638,225,3.419,226,1.638,227,1.2,228,2.078,229,1.733,230,0.792,231,1.463,232,1.575,233,2.394,234,1.575,235,1.575,236,3.012,237,3.012,238,3.012,239,1.638,240,0.853,241,1.638,242,1.638,243,2.078,244,1.638,245,2.49,246,1.638,247,2.49,248,1.638,249,3.012,250,1.638,251,2.49,252,3.235,253,2.49,254,3.012,255,1.638,256,1.638,257,1.638,258,0.507,259,1.638,260,1.638,261,1.638,262,1.638,263,1.638,264,3.78,265,0.794,266,1.575,267,1.575,268,1.638,269,1.638,270,0.7,271,1.638,272,2.394,273,1.95,274,1.638,275,1.638,276,1.638,277,1.638,278,1.638,279,1.638,280,1.573,281,1.406,282,3.619,283,1.638,284,1.638,285,1.638,286,1.638,287,1.638,288,1.638,289,1.463,290,1.638,291,1.575,292,1.575,293,1.638,294,1.517,295,1.575,296,1.638,297,4.082,298,1.208,299,1.638,300,1.638,301,1.638,302,1.638,303,1.638,304,1.638,305,2.49,306,2.49,307,3.365,308,2.49,309,1.638,310,1.638,311,1.638,312,1.638,313,1.638,314,1.575,315,1.078,316,1.638,317,0.005,318,0.005,319,0.115,364,5.497]],["title/classes/Bus.html",[0,0.174,103,1.997]],["body/classes/Bus.html",[0,0.323,1,2.887,2,0.916,3,0.048,4,0.042,5,0.035,6,1.509,7,0.042,9,1.977,10,1.977,11,2.507,12,2.507,13,2.507,14,2.48,15,4.22,16,0.666,18,0.626,19,0.01,20,0.406,21,0.147,22,0.408,23,2.281,25,3.131,26,3.356,27,4.271,30,2.48,33,3.356,35,2.48,38,3.356,40,2.48,43,3.356,45,2.48,48,3.356,50,0.274,51,0.9,52,0.647,53,1.134,54,1.277,55,3.611,56,1.567,57,1.448,58,1.317,59,3.611,60,3.075,61,2.07,62,1.567,63,1.498,64,1.567,65,1.567,66,1.722,67,1.525,68,1.567,69,1.826,70,1.456,71,2.955,72,2.629,73,1.808,74,0.94,75,2.31,76,3.003,77,1.63,78,1.63,79,2.48,80,1.567,81,1.798,82,1.028,83,0.142,84,2.384,85,0.508,86,1.199,87,1.567,88,2.931,89,2.887,90,3.003,91,1.073,92,1.317,93,1.63,94,0.224,95,2.48,96,0.916,97,1.358,98,3.522,99,2.683,100,2.07,101,3.402,102,3.402,103,3.485,104,4.474,105,3.804,106,0.156,107,3.802,108,1.317,109,2.603,110,4.474,111,2.141,112,2.404,113,3.611,114,1.691,115,2.252,116,3.015,117,2.98,118,1.776,119,1.633,120,2.216,121,3.227,122,2.384,123,2.48,124,4.271,125,1.567,126,1.63,127,3.804,128,1.317,129,1.407,130,1.633,131,2.887,132,3.518,133,3.356,134,2.55,135,3.472,136,3.804,137,4.076,138,3.518,139,3.611,140,3.003,141,3.003,142,3.003,143,1.567,144,4.258,145,2.48,146,2.48,147,1.63,148,1.63,149,1.63,150,1.63,151,1.63,152,3.227,153,2.384,154,0.788,155,1.136,156,1.202,157,1.567,158,1.63,159,2.216,160,1.407,161,1.407,162,1.567,163,0.477,164,0.365,165,0.577,166,1.567,167,2.384,168,3.611,169,2.384,170,3.356,171,2.384,172,2.384,173,2.384,174,1.567,175,3.802,176,2.887,177,0.964,178,0.431,179,1.63,180,1.63,181,1.63,182,1.63,183,0.87,184,1.63,185,1.456,186,2.384,187,0.519,188,3.834,189,2.628,190,1.277,191,0.99,192,1.63,193,1.277,194,1.407,195,1.407,196,0.99,197,1.167,198,1.407,199,1.407,200,1.134,201,0.99,202,0.492,203,2.592,204,1.407,205,1.63,206,1.36,207,0.828,208,2.384,209,1.794,210,2.48,211,1.63,212,1.567,213,0.893,214,1.63,215,1.407,216,1.073,217,1.63,218,1.63,219,1.63,220,0.99,221,1.63,222,0.893,223,1.567,224,1.63,225,3.413,226,1.63,227,1.198,228,2.071,229,1.726,230,0.788,231,1.456,232,1.567,233,2.384,234,1.567,235,1.567,236,3.003,237,3.003,238,3.003,239,1.63,240,0.849,241,1.63,242,1.63,243,2.071,244,1.63,245,2.48,246,1.63,247,2.48,248,1.63,249,3.003,250,1.63,251,2.48,252,3.227,253,2.48,254,3.003,255,1.63,256,1.63,257,1.63,258,0.504,259,1.63,260,1.63,261,1.63,262,1.63,263,1.63,264,3.774,265,0.793,266,1.567,267,1.567,268,1.63,269,1.63,270,0.697,271,1.63,272,2.384,273,1.943,274,1.63,275,1.63,276,1.63,277,1.63,278,1.63,279,1.63,280,1.571,281,1.403,282,3.611,283,1.63,284,1.63,285,1.63,286,1.63,287,1.63,288,1.63,289,1.456,290,1.63,291,1.567,292,1.567,293,1.63,294,1.509,295,1.567,296,1.63,297,4.078,298,1.202,299,1.63,300,1.63,301,1.63,302,1.63,303,1.63,304,1.63,305,2.48,306,2.48,307,3.356,308,2.48,309,1.63,310,1.63,311,1.63,312,1.63,313,1.63,314,1.567,315,1.073,316,1.63,317,0.005,318,0.005,319,0.115,365,5.48]],["title/classes/Cell.html",[0,0.174,366,2.3]],["body/classes/Cell.html",[0,0.217,2,1.676,3,0.088,4,0.076,5,0.09,7,0.076,8,1.297,16,0.97,18,0.776,19,0.01,20,0.38,21,0.134,22,1.042,24,1.561,57,1.355,74,2.184,83,0.088,86,2.318,115,2.362,165,0.62,178,1.277,202,0.752,227,0.877,230,1.442,240,2.168,258,1.429,265,0.791,317,0.007,318,0.007,319,0.176,339,2.563,366,4.609,367,5.443,368,3.109,369,7.596,370,7.596,371,7.596,372,5.951,373,5.657,374,6.913,375,6.913,376,7.991,377,7.991,378,7.991,379,7.991,380,6.913,381,0.883,382,6.913,383,6.418,384,2.075,385,6.278,386,3.787,387,6.913,388,5.278,389,5.443,390,5.443,391,6.278,392,2.422,393,2.048,394,5.443,395,5.443,396,6.913,397,5.443,398,4.328,399,6.092,400,1.659,401,6.092,402,3.641,403,5.443,404,5.443,405,5.443,406,5.443,407,5.443,408,5.443,409,5.443,410,8.919,411,8.994,412,5.443,413,5.443,414,5.443,415,5.443,416,5.443,417,5.443,418,5.443,419,5.443,420,5.443,421,5.443]],["title/interfaces/ChainIndex.html",[106,0.111,422,3.507]],["body/interfaces/ChainIndex.html",[0,0.314,3,0.096,4,0.082,5,0.069,7,0.102,8,1.361,19,0.01,21,0.118,50,0.363,83,0.096,85,0.42,94,0.27,106,0.149,159,2.877,202,0.639,209,1.874,216,2.12,227,0.947,230,1.557,265,0.835,280,1.466,281,1.188,317,0.008,318,0.008,319,0.184,337,1.049,348,2.688,381,0.582,392,1.596,393,1.658,398,3.68,422,5.825,423,5.18,424,1.658,425,3.55,426,4.587,427,1.115,428,6.994,429,2.766,430,1.519,431,4.021,432,3.757,433,3.43,434,2.982,435,3.509,436,3.68,437,2.19,438,5.18,439,4.72,440,2.523,441,5.18,442,4.72,443,5.18,444,4.72,445,4.72,446,3.113,447,5.18,448,2.779,449,1.905,450,3.357,451,5.18,452,4.72,453,5.18,454,5.18,455,5.18,456,6.392,457,5.18,458,2.688,459,5.18,460,1.905,461,5.18,462,4.72,463,2.447,464,5.18,465,5.18,466,6.392,467,5.18,468,4.72,469,5.18,470,5.825,471,3.68,472,5.18,473,4.377,474,5.18,475,2.779,476,5.18,477,4.72,478,3.875,479,5.18,480,2.12,481,5.18,482,4.782,483,3.68,484,5.825,485,5.18,486,5.18,487,5.18,488,5.18,489,2.982,490,6.392,491,5.18,492,3.68,493,4.72,494,5.18,495,4.72,496,5.18,497,4.72,498,5.18]],["title/interfaces/ChainOp.html",[106,0.111,433,2.065]],["body/interfaces/ChainOp.html",[3,0.068,4,0.059,5,0.049,7,0.059,9,1.51,10,1.51,19,0.01,20,0.415,21,0.135,23,3.148,25,1.51,50,0.378,51,0.887,52,0.911,53,1.597,57,1.282,61,1.616,63,1.16,66,1.764,67,1.165,69,1.264,71,3.044,73,0.934,83,0.143,85,0.481,94,0.263,96,1.788,97,1.387,99,2.405,100,1.855,106,0.183,111,1.98,112,1.743,115,1.431,138,2.746,163,0.612,164,0.983,165,0.558,187,0.386,189,1.882,202,0.455,209,1.723,215,1.98,220,1.394,265,0.872,270,0.981,280,1.795,315,1.51,317,0.006,318,0.006,319,0.148,337,0.747,350,1.766,357,2.761,381,0.575,424,1.327,425,4.004,426,3.792,427,1.041,431,2.842,432,3.799,433,3.7,434,2.125,437,2.312,440,1.797,482,3.828,489,2.946,499,2.761,500,3.496,501,2.746,502,3.316,503,4.746,504,1.98,505,1.692,506,3.263,507,2.656,508,3.467,509,3.316,510,3.263,511,2.392,512,2.5,513,3.593,514,1.98,515,2.294,516,0.981,517,2.5,518,3.118,519,2.277,520,2.215,521,2.761,522,4.112,523,3.148,524,4.395,525,3.807,526,3.807,527,3.976,528,3.579,529,4.298,530,3.118,531,4.325,532,4.514,533,4.654,534,4.965,535,4.319,536,3.807,537,3.118,538,3.118,539,2.05,540,3.118,541,4.298,542,3.118,543,3.118,544,2.392,545,2.5,546,2.294,547,3.316,548,4.325,549,2.5,550,5.361,551,3.467,552,3.118,553,4.298,554,3.467,555,4.308,556,2.5,557,3.118,558,1.538,559,3.741,560,3.118,561,3.118,562,3.828,563,2.923,564,3.118,565,2.923,566,3.118,567,3.118,568,3.316,569,2.492,570,2.923,571,3.118,572,4.325,573,1.577,574,4.325,575,3.316,576,4.325,577,3.118,578,1.643,579,4.325,580,3.118,581,3.118,582,2.5,583,3.118,584,2.923,585,3.118,586,2.125,587,3.511,588,2.923,589,1.47,590,2.923,591,2.923,592,4.325,593,3.118,594,1.323,595,2.761,596,3.118,597,2.5,598,4.054,599,3.118,600,2.923,601,4.325,602,4.054,603,3.118,604,3.118,605,3.118,606,4.325,607,4.112,608,4.325,609,4.325,610,4.325,611,3.118,612,3.118,613,3.118,614,3.118,615,3.118,616,3.118,617,2.294,618,3.828,619,3.828,620,3.828,621,3.118,622,2.761]],["title/components/ConnectionComponent.html",[623,0.905,624,1.764]],["body/components/ConnectionComponent.html",[0,0.153,3,0.063,4,0.054,5,0.045,7,0.054,8,1.026,16,0.975,18,0.749,19,0.01,20,0.4,21,0.143,22,1.005,24,1.474,50,0.381,52,0.837,63,1.206,73,1.22,81,1.437,83,0.063,86,1.449,94,0.263,97,1.417,112,2.081,114,1.281,154,1.837,163,0.773,164,0.471,165,0.494,178,1.061,191,1.28,202,0.595,216,1.973,227,0.619,230,1.449,240,1.817,258,1.401,265,0.381,280,1.287,317,0.006,318,0.006,319,0.139,336,2.746,343,3.96,344,2.147,345,4.062,346,2.508,347,4.126,348,1.869,356,4.393,381,0.775,384,1.154,392,2.269,427,1.016,430,0.994,446,2.348,516,0.901,558,1.837,569,2.732,573,1.044,623,1.623,624,2.802,625,2.028,626,1.819,627,1.759,628,1.819,629,2.039,630,3.846,631,2.732,632,3.811,633,3.696,634,7.501,635,2.502,636,6.366,637,2.502,638,5.47,639,6.366,640,6.366,641,4.821,642,6.366,643,6.366,644,6.366,645,4.741,646,6.366,647,2.147,648,6.934,649,6.934,650,6.366,651,4.821,652,6.934,653,4.341,654,2.976,655,4.074,656,5.47,657,5.47,658,6.366,659,3.439,660,3.089,661,5.115,662,5.47,663,3.846,664,3.846,665,3.846,666,3.846,667,3.846,668,3.846,669,4.821,670,4.741,671,3.846,672,2.422,673,3.846,674,3.846,675,3.846,676,3.846,677,3.846,678,5.47,679,5.47,680,3.819,681,3.606,682,5.47,683,3.846,684,6.43,685,2.61,686,5.164,687,5.47,688,4.821,689,5.47,690,2.96,691,2.96,692,3.846,693,4.393,694,4.393,695,5.47,696,3.425,697,3.488,698,5.569,699,3.846,700,3.846,701,4.197,702,4.821,703,3.846,704,3.846,705,3.846,706,3.846,707,3.846,708,3.986,709,3.846,710,3.846,711,3.846,712,3.846,713,3.389,714,2.685,715,3.389,716,3.846,717,3.846,718,2.685,719,1.819,720,3.846,721,3.846,722,3.846,723,3.846,724,3.846,725,6.366,726,3.846,727,6.366,728,3.846,729,3.846,730,3.846,731,3.846,732,3.846,733,3.846,734,3.389,735,6.366,736,5.47,737,3.846,738,7.326,739,5.47,740,3.846,741,5.47,742,3.846,743,3.846,744,5.47,745,3.846,746,3.846,747,3.846,748,5.47,749,5.47,750,3.846,751,5.47,752,3.846,753,4.821,754,5.47,755,5.47,756,3.846,757,3.425,758,3.846,759,2.21,760,3.089,761,2.887,762,3.846,763,3.846,764,3.846,765,3.846,766,3.846,767,6.366,768,6.366,769,3.846,770,3.846,771,3.846,772,3.846,773,3.846,774,3.846,775,6.934,776,5.47,777,5.47,778,5.47,779,3.846,780,3.389,781,3.846,782,5.47,783,3.846,784,2.864,785,3.846,786,3.846,787,6.366,788,3.846,789,5.47,790,6.366,791,3.846,792,3.846,793,2.408,794,3.846,795,2.881,796,3.846,797,3.846,798,3.389,799,5.611,800,3.846,801,5.47,802,6.111,803,5.47,804,4.821,805,3.846,806,3.846,807,3.846,808,3.846,809,3.846,810,3.846,811,3.846,812,3.846,813,3.846,814,2.685,815,2.881,816,3.846,817,3.089,818,2.502,819,2.732,820,3.089,821,3.846,822,3.265,823,3.846,824,3.124,825,1.819,826,1.601,827,1.819,828,1.819,829,1.601,830,1.819,831,1.651,832,1.819,833,1.651,834,1.819,835,1.703,836,1.819,837,1.651,838,1.819,839,1.651,840,1.819,841,1.819,842,1.651,843,1.819,844,1.651,845,1.819,846,1.651,847,1.819,848,1.703,849,1.819,850,1.651,851,1.819,852,1.601,853,1.819,854,1.651,855,1.819,856,1.819,857,1.651,858,1.154,859,1.819,860,1.651,861,1.601,862,1.601,863,1.819,864,1.703,865,1.467,866,1.819]],["title/interfaces/Crossing.html",[106,0.111,867,3.252]],["body/interfaces/Crossing.html",[3,0.101,4,0.087,5,0.073,7,0.087,19,0.01,21,0.143,51,0.918,74,1.958,83,0.136,85,0.359,91,2.236,94,0.265,106,0.205,165,0.624,202,0.674,213,2.249,317,0.008,318,0.008,319,0.19,337,1.106,339,2.986,341,2.009,346,1.908,347,3.946,350,1.984,400,1.488,427,0.972,818,3.427,867,5.58,868,4.616,869,5.237,870,6.017,871,5.622,872,6.017,873,4.105,874,4.939,875,4.105,876,3.283,877,2.61,878,3.667,879,5.58,880,1.889,881,4.807,882,6.017,883,4.778,884,6.23,885,4.616,886,4.978,887,4.327,888,4.086,889,4.978,890,3.88,891,4.327,892,4.978,893,6.017,894,5.58,895,4.616,896,6.017,897,3.54,898,2.504,899,4.616,900,2.931,901,3.88,902,2.835,903,3.88,904,3.7,905,4.978,906,4.978,907,6.467,908,6.467,909,4.978,910,6.017,911,4.978,912,6.017,913,4.978,914,6.017,915,4.978,916,6.017,917,4.978,918,4.978,919,4.978]],["title/classes/DBListener.html",[0,0.174,920,1.934]],["body/classes/DBListener.html",[0,0.326,2,0.907,3,0.048,4,0.041,5,0.035,7,0.041,8,1.022,16,0.857,18,0.301,19,0.01,20,0.273,21,0.126,22,0.747,24,0.972,50,0.273,57,0.924,75,0.98,82,1.392,83,0.124,85,0.457,94,0.244,97,1.315,106,0.114,109,2.199,114,0.69,118,1.34,130,1.621,155,0.61,163,0.692,164,0.551,165,0.509,177,2.777,178,0.789,187,0.5,196,1.496,201,0.98,202,0.32,209,2.003,213,0.884,222,1.829,227,0.474,240,0.841,258,1.113,265,0.801,281,1.327,317,0.005,318,0.005,319,0.114,346,2.021,381,0.78,384,1.97,392,2.014,393,1.737,400,1.575,424,0.673,427,1.037,449,0.955,460,2.128,463,1.871,475,3.866,480,1.063,519,2.064,558,1.614,578,2.823,589,1.577,594,1.42,685,2.628,759,1.19,858,1.349,880,0.743,898,1.816,920,3.621,921,1.442,922,3.093,923,2.434,924,3.756,925,3.763,926,3.33,927,3.763,928,3.763,929,3.33,930,3.774,931,3.999,932,3.33,933,3.65,934,3.285,935,2.946,936,4.34,937,2.946,938,3.933,939,2.596,940,2.946,941,2.946,942,2.596,943,2.596,944,2.057,945,2.083,946,3.093,947,2.984,948,3.392,949,2.91,950,3.33,951,2.596,952,2.596,953,2.946,954,3.594,955,1.495,956,1.495,957,1.495,958,1.495,959,1.495,960,1.442,961,1.348,962,3.476,963,1.348,964,1.862,965,3.29,966,2.2,967,2.2,968,2.616,969,1.348,970,1.305,971,1.99,972,2.764,973,2.764,974,1.495,975,2.764,976,2.28,977,2.764,978,1.495,979,1.495,980,3.093,981,1.495,982,2.764,983,2.28,984,1.495,985,1.495,986,1.495,987,1.495,988,3.328,989,2.28,990,1.495,991,1.495,992,2.28,993,1.495,994,1.495,995,1.99,996,1.816,997,1.495,998,1.442,999,1.495,1000,3.33,1001,3.933,1002,2.28,1003,4.056,1004,3.999,1005,3.33,1006,2.28,1007,2.28,1008,3.093,1009,3.093,1010,3.093,1011,2.699,1012,3.093,1013,3.093,1014,3.186,1015,1.495,1016,1.495,1017,2.764,1018,2.764,1019,2.764,1020,1.99,1021,1.495,1022,1.495,1023,1.348,1024,1.495,1025,1.442,1026,1.495,1027,1.495,1028,0.864,1029,1.495,1030,1.495,1031,3.186,1032,2.984,1033,1.925,1034,3.65,1035,4.186,1036,3.093,1037,2.28,1038,2.28,1039,3.093,1040,2.413,1041,1.495,1042,1.495,1043,1.495,1044,1.305,1045,1.495,1046,2.28,1047,2.28,1048,2.28,1049,2.28,1050,2.28,1051,2.28,1052,1.495,1053,1.495,1054,1.495,1055,1.495,1056,1.99,1057,1.034,1058,3.093,1059,1.495,1060,1.495,1061,1.442,1062,0.761,1063,1.442,1064,2.764,1065,2.28,1066,2.28,1067,3.093,1068,3.093,1069,2.28,1070,2.28,1071,2.28,1072,3.509,1073,2.28,1074,3.509,1075,1.495,1076,2.28,1077,2.28,1078,2.28,1079,3.546,1080,3.33,1081,3.509,1082,1.442,1083,1.495,1084,2.28,1085,3.65,1086,2.28,1087,3.509,1088,3.856,1089,2.28,1090,3.093,1091,3.763,1092,2.28,1093,1.714,1094,2.28,1095,2.28,1096,2.28,1097,2.2,1098,1.829,1099,2.28,1100,2.28,1101,2.28,1102,2.28,1103,2.764,1104,2.28,1105,2.764,1106,1.495,1107,3.063,1108,1.495,1109,1.495,1110,1.495,1111,1.495,1112,1.495,1113,1.348,1114,2.492,1115,1.495,1116,2.28,1117,2.28,1118,2.28,1119,2.28,1120,2.28,1121,2.28,1122,2.28,1123,2.28,1124,2.28,1125,1.264,1126,2.056,1127,1.264,1128,1.348,1129,1.19,1130,1.495,1131,1.305,1132,1.495,1133,1.305,1134,1.495,1135,1.495,1136,1.495,1137,1.495,1138,1.495,1139,1.495,1140,1.495,1141,1.99,1142,0.98,1143,1.034,1144,2.28,1145,2.2,1146,1.305,1147,1.495,1148,1.495,1149,1.495,1150,1.226,1151,1.495,1152,1.495,1153,0.98,1154,1.495,1155,1.495,1156,1.495,1157,2.28,1158,1.495]],["title/classes/DBListenerArray.html",[0,0.174,1056,1.934]],["body/classes/DBListenerArray.html",[0,0.324,2,0.879,3,0.046,4,0.04,5,0.034,7,0.04,8,1.003,16,0.874,18,0.661,19,0.01,20,0.356,21,0.125,22,0.888,24,1.31,50,0.267,57,0.744,75,0.95,82,1.378,83,0.122,85,0.471,94,0.245,97,1.304,106,0.111,109,2.334,114,0.669,118,1.592,130,1.583,155,0.592,163,0.683,164,0.538,165,0.502,177,2.751,178,0.636,187,0.5,196,0.95,201,0.95,202,0.311,209,1.987,213,0.857,222,1.8,227,0.46,240,0.815,258,1.207,265,0.795,281,1.381,317,0.005,318,0.005,319,0.112,346,1.992,381,0.761,384,1.942,392,1.932,393,1.721,400,1.808,424,1.003,427,0.998,449,0.926,460,1.944,463,1.827,475,3.842,480,1.03,519,2.044,558,1.588,578,3.07,589,1.876,594,1.386,685,2.681,759,1.154,858,1.317,880,1.106,898,1.773,920,3.825,921,1.398,922,3.043,923,2.224,924,3.335,925,3.466,926,2.711,927,3.466,928,3.466,929,3.284,930,3.784,931,3.969,932,2.226,933,3.466,934,3.026,936,3.902,938,3.821,945,2.049,946,3.043,947,2.936,948,3.359,949,3.017,950,3.284,954,3.561,955,1.449,956,1.449,957,1.449,958,1.449,959,1.449,960,1.398,961,1.306,962,3.445,963,1.306,964,1.826,965,3.254,966,2.148,967,2.148,968,2.574,969,1.306,970,1.265,971,2.367,972,2.711,973,2.711,974,1.449,975,2.711,976,2.226,977,2.711,978,1.449,979,1.449,980,3.043,981,1.449,982,2.711,983,2.226,984,1.449,985,1.449,986,1.449,987,1.449,988,3.304,989,2.226,990,1.449,991,1.449,992,2.226,993,1.449,994,1.449,995,1.943,996,1.773,997,1.449,998,1.398,999,1.449,1000,3.284,1001,3.901,1002,2.226,1003,4.027,1004,3.969,1005,3.284,1006,2.226,1007,2.226,1008,3.043,1009,3.043,1010,3.043,1011,2.656,1012,3.043,1013,3.043,1014,3.151,1015,1.449,1016,1.449,1017,2.711,1018,2.711,1019,2.711,1020,1.943,1021,1.449,1022,1.449,1023,1.306,1024,1.449,1025,1.398,1026,1.449,1027,1.449,1028,1.028,1029,1.449,1030,1.449,1031,3.151,1032,3.885,1033,2.248,1034,3.969,1035,4.327,1036,3.284,1037,2.226,1038,2.226,1039,3.043,1040,2.656,1041,1.449,1042,1.449,1043,1.449,1044,1.265,1045,1.449,1046,2.226,1047,2.711,1048,2.226,1049,2.226,1050,2.226,1051,2.226,1052,2.226,1053,1.449,1054,3.043,1055,1.449,1056,2.367,1057,1.002,1058,3.284,1059,2.226,1060,2.226,1061,2.148,1062,1.134,1063,2.148,1064,2.711,1065,2.226,1066,2.226,1067,3.043,1068,3.043,1069,2.226,1070,2.226,1071,2.226,1072,3.466,1073,2.226,1074,3.466,1075,1.449,1076,2.226,1077,2.226,1078,2.226,1079,3.517,1080,3.284,1081,3.466,1082,2.148,1083,2.226,1084,2.226,1085,3.61,1086,2.226,1087,3.466,1088,3.821,1089,2.226,1090,3.043,1091,3.726,1092,2.711,1093,2.038,1094,2.711,1095,2.711,1096,2.711,1097,2.616,1098,1.942,1099,2.711,1100,2.226,1101,2.226,1102,2.226,1103,2.711,1104,2.226,1105,2.711,1106,1.449,1107,3.026,1108,1.449,1109,1.449,1110,1.449,1111,1.449,1112,1.449,1113,2.743,1114,2.444,1115,1.449,1116,2.226,1117,2.226,1118,2.226,1119,2.226,1120,2.226,1121,2.226,1122,2.226,1123,2.226,1124,2.226,1125,1.226,1126,2.007,1127,1.226,1128,1.306,1129,1.154,1130,1.449,1131,1.265,1132,1.449,1133,1.265,1134,1.449,1135,1.449,1136,1.449,1137,1.449,1138,1.449,1139,1.449,1140,1.449,1141,1.943,1142,0.95,1143,1.002,1144,2.226,1145,2.148,1146,1.265,1147,1.449,1148,1.449,1149,1.449,1150,1.189,1151,1.449,1152,1.449,1153,0.95,1154,1.449,1155,1.449,1156,1.449,1157,2.226,1158,1.449,1159,3.524,1160,3.867,1161,3.268,1162,3.268,1163,4.388,1164,2.856,1165,2.856,1166,2.856,1167,2.856,1168,2.856,1169,2.856,1170,2.856,1171,2.856,1172,2.856,1173,2.294,1174,2.294]],["title/classes/DBNode.html",[0,0.174,924,1.934]],["body/classes/DBNode.html",[0,0.325,2,0.896,3,0.047,4,0.041,5,0.034,7,0.041,8,1.015,16,0.903,18,0.553,19,0.01,20,0.358,21,0.128,22,0.896,24,1.081,50,0.271,57,0.917,75,0.969,82,1.386,83,0.123,85,0.455,94,0.243,97,1.311,106,0.113,109,2.185,114,1.043,118,1.331,130,1.607,155,0.603,163,0.689,164,0.546,165,0.506,177,2.772,178,0.784,187,0.502,196,0.969,201,0.969,202,0.484,209,1.997,213,0.874,222,1.818,227,0.469,240,0.831,258,1.027,265,0.799,281,1.32,317,0.005,318,0.005,319,0.113,346,2.12,381,0.799,384,1.959,392,1.945,393,1.731,400,1.567,424,0.666,427,1.035,449,0.944,460,2.232,463,1.854,475,3.857,480,1.05,519,2.057,558,1.605,578,2.811,589,1.563,594,1.407,685,2.641,759,1.176,858,1.337,880,0.734,898,2.185,920,3.574,921,1.425,922,2.744,923,2.246,924,3.423,925,3.749,926,3.312,927,3.749,928,3.749,929,3.312,930,3.766,931,3.988,932,2.26,933,3.635,934,3.272,938,3.921,945,2.07,946,3.074,947,2.965,948,3.535,949,2.9,950,3.312,954,3.717,955,1.477,956,1.477,957,1.477,958,1.477,959,1.477,960,1.425,961,1.332,962,3.535,963,1.332,964,2.07,965,3.38,966,2.648,967,2.648,968,2.6,969,1.332,970,1.289,971,2.395,972,3.635,973,2.744,974,1.477,975,2.744,976,2.26,977,2.744,978,1.477,979,1.477,980,3.074,981,1.477,982,2.744,983,2.26,984,1.477,985,1.477,986,1.477,987,1.477,988,3.396,989,2.26,990,1.477,991,1.477,992,2.26,993,1.477,994,2.26,995,1.972,996,1.8,997,1.477,998,1.425,999,1.477,1000,3.312,1001,3.921,1002,2.26,1003,4.045,1004,3.988,1005,3.312,1006,2.26,1007,2.26,1008,3.074,1009,3.074,1010,3.074,1011,2.683,1012,3.074,1013,3.074,1014,3.173,1015,1.477,1016,1.477,1017,2.744,1018,3.074,1019,2.744,1020,1.972,1021,1.477,1022,1.477,1023,1.332,1024,1.477,1025,1.425,1026,1.477,1027,1.477,1028,0.857,1029,1.477,1030,1.477,1031,3.173,1032,2.965,1033,1.914,1034,3.635,1035,4.177,1036,3.074,1037,2.26,1038,2.26,1039,3.074,1040,2.395,1041,1.477,1042,1.477,1043,1.477,1044,1.289,1045,1.477,1046,2.26,1047,2.26,1048,2.26,1049,2.26,1050,2.26,1051,2.26,1052,1.477,1053,1.477,1054,1.477,1055,1.477,1056,1.972,1057,1.022,1058,3.074,1059,1.477,1060,1.477,1061,1.425,1062,0.752,1063,1.425,1064,2.744,1065,2.26,1066,2.26,1067,3.074,1068,3.074,1069,2.26,1070,2.26,1071,2.26,1072,3.493,1073,2.26,1074,3.493,1075,1.477,1076,2.26,1077,2.26,1078,2.26,1079,3.535,1080,3.312,1081,3.493,1082,1.425,1083,1.477,1084,2.26,1085,3.635,1086,2.26,1087,3.493,1088,3.843,1089,2.26,1090,3.074,1091,3.749,1092,2.26,1093,1.699,1094,2.26,1095,2.26,1096,2.26,1097,2.18,1098,1.818,1099,2.26,1100,2.26,1101,2.26,1102,2.26,1103,2.744,1104,2.26,1105,2.744,1106,1.477,1107,3.049,1108,1.477,1109,1.477,1110,1.477,1111,1.477,1112,1.477,1113,1.332,1114,2.474,1115,1.477,1116,2.26,1117,2.26,1118,2.26,1119,2.26,1120,2.26,1121,2.26,1122,2.26,1123,2.26,1124,2.26,1125,1.25,1126,2.037,1127,1.25,1128,1.332,1129,1.176,1130,1.477,1131,1.289,1132,1.477,1133,1.289,1134,1.477,1135,1.477,1136,1.477,1137,1.477,1138,1.477,1139,1.477,1140,1.477,1141,1.972,1142,0.969,1143,1.022,1144,2.26,1145,2.18,1146,1.289,1147,1.477,1148,1.477,1149,1.477,1150,1.212,1151,1.477,1152,1.477,1153,0.969,1154,1.477,1155,1.477,1156,1.477,1157,2.26,1158,1.477,1175,2.544,1176,4.454,1177,2.912,1178,2.912,1179,2.912,1180,2.912,1181,2.912,1182,2.912,1183,2.912,1184,2.912,1185,2.912,1186,2.912,1187,2.566,1188,2.912,1189,2.912,1190,2.912,1191,2.912,1192,2.338,1193,2.912,1194,2.912,1195,2.912]],["title/classes/DBNodeArray.html",[0,0.174,1032,2.138]],["body/classes/DBNodeArray.html",[0,0.327,2,0.919,3,0.049,4,0.042,5,0.035,7,0.042,8,1.031,16,0.846,18,0.561,19,0.01,20,0.33,21,0.113,22,0.754,24,0.98,50,0.275,57,0.77,75,0.994,82,1.305,83,0.124,85,0.465,94,0.242,97,1.319,106,0.115,109,2.214,114,0.699,118,1.624,130,1.638,155,0.619,163,0.696,164,0.556,165,0.512,177,2.755,178,0.658,187,0.497,196,0.994,201,0.994,209,2.01,213,0.896,222,1.842,227,0.481,240,0.852,258,0.931,265,0.803,281,1.335,317,0.005,318,0.005,319,0.115,346,2.033,381,0.77,384,1.981,392,1.962,393,1.744,400,1.585,424,0.683,427,1.009,449,0.968,460,2.254,463,1.89,475,3.877,480,1.077,519,2.165,558,1.626,578,2.836,589,1.594,594,1.434,685,2.634,759,1.206,858,1.363,880,0.753,898,1.834,920,3.593,921,1.462,922,2.787,923,2.276,924,3.502,925,3.528,926,2.787,927,3.528,928,3.528,929,2.787,930,3.668,931,3.779,932,2.304,933,3.528,934,3.079,938,3.871,945,1.877,946,2.787,947,2.689,948,3.306,949,2.836,950,3.114,954,3.608,955,1.515,956,1.515,957,1.515,958,1.515,959,1.515,960,1.462,961,1.366,962,3.489,963,1.366,964,2.097,965,3.306,966,2.222,967,2.222,968,2.634,969,1.366,970,1.322,971,2.011,972,2.787,973,2.787,974,1.515,975,2.787,976,2.304,977,2.787,978,1.515,979,1.515,980,3.114,981,1.515,982,2.787,983,2.304,984,1.515,985,1.515,986,1.515,987,1.515,988,3.338,989,2.304,990,1.515,991,1.515,992,2.304,993,1.515,994,1.515,995,2.011,996,1.834,997,1.515,998,1.462,999,1.515,1000,3.35,1001,3.947,1002,2.304,1003,4.068,1004,4.012,1005,3.35,1006,2.304,1007,2.304,1008,3.114,1009,3.114,1010,3.114,1011,2.718,1012,3.114,1013,3.114,1014,3.201,1015,1.515,1016,1.515,1017,2.787,1018,2.787,1019,2.787,1020,2.011,1021,1.515,1022,1.515,1023,1.366,1024,1.515,1025,1.462,1026,1.515,1027,1.515,1028,0.873,1029,1.515,1030,1.515,1031,3.201,1032,3.232,1033,2.196,1034,3.947,1035,4.312,1036,3.35,1037,2.304,1038,2.304,1039,3.114,1040,2.924,1041,1.515,1042,1.515,1043,1.515,1044,2.433,1045,1.515,1046,2.304,1047,2.787,1048,2.304,1049,2.304,1050,2.304,1051,2.304,1052,2.304,1053,1.515,1054,3.114,1055,1.515,1056,2.011,1057,1.048,1058,3.114,1059,1.515,1060,1.515,1061,1.462,1062,0.772,1063,1.462,1064,2.787,1065,2.304,1066,2.304,1067,3.114,1068,3.114,1069,2.304,1070,2.304,1071,2.304,1072,3.528,1073,2.304,1074,3.528,1075,1.515,1076,2.304,1077,2.304,1078,2.304,1079,3.558,1080,3.35,1081,3.528,1082,1.462,1083,1.515,1084,2.304,1085,3.667,1086,2.304,1087,3.528,1088,3.871,1089,2.304,1090,3.114,1091,3.779,1092,2.304,1093,1.731,1094,2.304,1095,2.304,1096,2.304,1097,2.222,1098,1.842,1099,2.304,1100,2.304,1101,2.304,1102,2.304,1103,2.787,1104,2.304,1105,2.787,1106,1.515,1107,3.079,1108,1.515,1109,1.515,1110,1.515,1111,1.515,1112,1.515,1113,1.366,1114,2.513,1115,1.515,1116,2.304,1117,2.304,1118,2.304,1119,2.304,1120,2.304,1121,2.304,1122,2.304,1123,2.304,1124,2.304,1125,1.282,1126,2.077,1127,1.282,1128,1.366,1129,1.206,1130,1.515,1131,1.322,1132,1.515,1133,1.322,1134,1.515,1135,1.515,1136,1.515,1137,1.515,1138,1.515,1139,1.515,1140,1.515,1141,2.011,1142,0.994,1143,1.048,1144,2.304,1145,2.222,1146,1.322,1147,1.515,1148,1.515,1149,1.515,1150,1.243,1151,1.515,1152,1.515,1153,0.994,1154,1.515,1155,1.515,1156,1.515,1157,2.304,1158,1.515,1161,3.381,1162,3.381,1175,2.593,1192,2.398,1196,4.54,1197,2.986,1198,2.986,1199,2.986,1200,2.986,1201,2.986,1202,2.986,1203,2.986,1204,2.986,1205,2.986,1206,2.986]],["title/classes/DBTwoWay.html",[0,0.174,1031,1.934]],["body/classes/DBTwoWay.html",[0,0.326,2,0.905,3,0.048,4,0.041,5,0.035,7,0.041,8,1.021,16,0.869,18,0.459,19,0.01,20,0.305,21,0.126,22,0.835,24,1.086,50,0.272,57,0.923,75,0.979,82,1.391,83,0.123,85,0.457,94,0.244,97,1.314,106,0.114,109,2.196,114,0.689,118,1.339,130,1.619,155,0.609,163,0.692,164,0.55,165,0.508,177,2.776,178,0.65,187,0.5,196,0.979,201,0.979,209,2.002,213,0.883,222,1.828,227,0.474,240,0.839,258,1.172,265,0.8,281,1.326,317,0.005,318,0.005,319,0.114,346,2.128,381,0.78,384,1.968,392,1.952,393,1.736,400,1.574,424,0.672,427,1.037,449,0.953,460,1.974,463,1.868,475,3.865,480,1.061,519,2.063,558,1.613,578,2.821,589,1.575,594,1.418,685,2.627,759,1.188,858,1.347,880,0.741,898,1.813,920,3.582,921,1.439,922,2.761,923,2.258,924,3.755,925,3.761,926,3.327,927,3.761,928,3.761,929,3.327,930,3.773,931,3.997,932,3.327,933,3.647,934,3.283,936,4.338,938,3.931,944,2.053,945,2.081,946,3.089,947,2.981,948,3.39,949,2.909,950,3.327,954,3.592,955,1.492,956,1.492,957,1.492,958,1.492,959,1.492,960,1.439,961,1.345,962,3.474,963,1.345,964,1.86,965,3.288,966,2.197,967,2.197,968,2.613,969,1.345,970,1.302,971,1.987,972,2.761,973,2.761,974,1.492,975,2.761,976,2.277,977,2.761,978,1.492,979,1.492,980,3.089,981,1.492,982,2.761,983,2.277,984,1.492,985,1.492,986,1.492,987,1.492,988,3.326,989,2.277,990,1.492,991,1.492,992,2.277,993,1.492,994,1.492,995,1.987,996,1.813,997,1.492,998,1.439,999,1.492,1000,3.327,1001,3.931,1002,2.277,1003,4.054,1004,3.997,1005,3.327,1006,2.277,1007,2.277,1008,3.089,1009,3.089,1010,3.089,1011,2.697,1012,3.089,1013,3.089,1014,3.184,1015,1.492,1016,1.492,1017,2.761,1018,3.089,1019,2.761,1020,1.987,1021,1.492,1022,1.492,1023,1.345,1024,1.492,1025,1.439,1026,1.492,1027,1.492,1028,0.863,1029,1.492,1030,1.492,1031,3.283,1032,2.981,1033,1.923,1034,3.647,1035,4.185,1036,3.089,1037,2.277,1038,2.277,1039,3.089,1040,2.41,1041,1.492,1042,1.492,1043,1.492,1044,1.302,1045,1.492,1046,2.277,1047,2.277,1048,2.277,1049,2.277,1050,2.277,1051,2.277,1052,1.492,1053,1.492,1054,1.492,1055,1.492,1056,1.987,1057,1.032,1058,3.089,1059,1.492,1060,1.492,1061,1.439,1062,0.76,1063,1.439,1064,2.761,1065,2.277,1066,2.277,1067,3.089,1068,3.089,1069,2.277,1070,2.277,1071,2.277,1072,3.507,1073,2.277,1074,3.507,1075,1.492,1076,2.277,1077,2.277,1078,2.277,1079,3.544,1080,3.327,1081,3.507,1082,1.439,1083,1.492,1084,2.277,1085,3.647,1086,2.277,1087,3.507,1088,3.854,1089,2.277,1090,3.089,1091,3.761,1092,2.277,1093,1.711,1094,2.277,1095,2.277,1096,2.277,1097,2.197,1098,1.828,1099,2.277,1100,2.277,1101,2.277,1102,2.277,1103,2.761,1104,2.277,1105,2.761,1106,1.492,1107,3.061,1108,1.492,1109,1.492,1110,1.492,1111,1.492,1112,1.492,1113,1.345,1114,2.489,1115,1.492,1116,2.277,1117,2.277,1118,2.277,1119,2.277,1120,2.277,1121,2.277,1122,2.277,1123,2.277,1124,2.277,1125,1.262,1126,2.053,1127,1.262,1128,1.345,1129,1.188,1130,1.492,1131,1.302,1132,1.492,1133,1.302,1134,1.492,1135,1.492,1136,1.492,1137,1.492,1138,1.492,1139,1.492,1140,1.492,1141,1.987,1142,0.979,1143,1.032,1144,2.277,1145,2.197,1146,1.302,1147,1.492,1148,1.492,1149,1.492,1150,1.224,1151,1.492,1152,1.492,1153,0.979,1154,1.492,1155,1.492,1156,1.492,1157,2.277,1158,1.492,1207,3.604,1208,2.94,1209,2.94,1210,2.94,1211,2.94,1212,2.94,1213,2.94,1214,2.94,1215,2.94,1216,2.94,1217,2.94,1218,2.94]],["title/classes/DBTwoWayArray.html",[0,0.174,1133,1.934]],["body/classes/DBTwoWayArray.html",[0,0.323,2,0.862,3,0.046,4,0.039,5,0.033,7,0.039,8,0.991,16,0.904,18,0.746,19,0.01,20,0.383,21,0.128,22,1.001,24,1.41,50,0.264,57,0.733,75,0.932,82,1.369,83,0.122,85,0.485,94,0.248,97,1.297,106,0.11,109,2.314,114,0.656,118,1.578,130,2.141,154,0.742,155,0.58,163,0.677,164,0.53,165,0.497,177,2.743,178,0.765,187,0.497,196,0.932,201,0.932,202,0.305,209,1.976,213,1.297,222,1.782,227,0.451,240,0.799,258,1.32,265,0.792,281,1.297,317,0.005,318,0.005,319,0.11,323,1.672,346,2.175,381,0.757,384,1.925,392,1.918,393,1.712,400,1.54,424,0.64,427,0.992,449,0.908,460,1.924,463,1.8,475,3.827,480,1.559,519,2.129,558,1.572,578,2.939,589,1.853,594,1.875,685,2.642,759,1.132,858,1.782,880,0.706,898,1.747,920,3.619,921,1.371,922,3.012,923,2.201,924,3.316,925,3.44,926,2.679,927,3.44,928,3.44,929,3.255,930,3.77,931,3.95,932,2.193,933,3.44,934,3.002,936,3.872,938,3.799,945,2.029,946,3.012,947,2.906,948,3.425,949,3.001,950,3.255,954,3.541,955,1.421,956,1.421,957,1.421,958,1.421,959,1.421,960,1.371,961,1.281,962,3.425,963,1.281,964,1.804,965,3.338,966,2.116,967,2.116,968,2.548,969,1.281,970,1.24,971,1.915,972,2.679,973,2.679,974,1.421,975,2.679,976,2.193,977,2.679,978,1.421,979,1.421,980,3.012,981,1.421,982,2.679,983,2.193,984,1.421,985,1.421,986,1.421,987,1.421,988,3.289,989,2.193,990,1.421,991,1.421,992,2.193,993,1.421,994,1.421,995,1.915,996,1.747,997,1.421,998,1.371,999,1.421,1000,3.255,1001,3.881,1002,2.193,1003,4.009,1004,3.95,1005,3.255,1006,2.193,1007,2.193,1008,3.012,1009,3.012,1010,3.012,1011,2.629,1012,3.012,1013,3.012,1014,3.129,1015,1.421,1016,1.421,1017,2.679,1018,2.679,1019,2.679,1020,1.915,1021,1.421,1022,1.421,1023,1.281,1024,1.421,1025,1.371,1026,1.421,1027,1.421,1028,0.832,1029,1.421,1030,1.421,1031,3.544,1032,3.81,1033,2.141,1034,3.881,1035,4.269,1036,3.255,1037,2.193,1038,2.193,1039,3.012,1040,2.338,1041,1.421,1042,1.421,1043,1.421,1044,1.24,1045,1.421,1046,2.193,1047,2.679,1048,2.193,1049,2.193,1050,2.193,1051,2.193,1052,2.193,1053,1.421,1054,3.012,1055,1.421,1056,1.915,1057,0.983,1058,3.255,1059,1.421,1060,1.421,1061,1.371,1062,0.724,1063,1.371,1064,2.679,1065,2.193,1066,2.193,1067,3.012,1068,3.012,1069,2.193,1070,2.193,1071,2.193,1072,3.44,1073,2.193,1074,3.44,1075,1.421,1076,2.193,1077,2.193,1078,2.193,1079,3.498,1080,3.255,1081,3.44,1082,1.371,1083,1.421,1084,2.193,1085,3.585,1086,2.193,1087,3.44,1088,3.799,1089,2.193,1090,3.012,1091,3.703,1092,2.679,1093,2.013,1094,2.679,1095,2.679,1096,2.679,1097,2.584,1098,1.925,1099,2.679,1100,2.193,1101,2.193,1102,2.193,1103,3.44,1104,2.193,1105,3.012,1106,1.421,1107,3.129,1108,1.421,1109,1.421,1110,1.421,1111,1.421,1112,1.421,1113,1.281,1114,2.415,1115,1.421,1116,2.193,1117,2.193,1118,2.679,1119,2.193,1120,2.193,1121,3.012,1122,2.193,1123,2.679,1124,2.193,1125,1.855,1126,2.415,1127,1.855,1128,1.977,1129,1.747,1130,2.193,1131,1.915,1132,2.193,1133,1.915,1134,2.193,1135,1.421,1136,1.421,1137,1.421,1138,3.012,1139,1.421,1140,1.421,1141,1.915,1142,0.932,1143,0.983,1144,2.193,1145,2.116,1146,1.24,1147,1.421,1148,1.421,1149,1.421,1150,1.166,1151,1.421,1152,1.421,1153,0.932,1154,1.421,1155,1.421,1156,1.421,1157,2.193,1158,1.421,1159,3.472,1160,3.81,1161,3.22,1162,3.22,1173,2.249,1174,2.249,1219,4.323,1220,3.81,1221,3.81,1222,4.323,1223,2.801,1224,2.801,1225,2.801,1226,2.801,1227,2.801,1228,2.801,1229,2.801,1230,2.801,1231,2.801,1232,2.801,1233,2.801,1234,2.801,1235,2.468]],["title/classes/DBWriteBuffer.html",[0,0.174,1025,2.138]],["body/classes/DBWriteBuffer.html",[0,0.325,2,0.901,3,0.048,4,0.041,5,0.035,7,0.041,8,1.018,16,0.868,18,0.457,19,0.01,20,0.304,21,0.128,22,0.833,24,0.968,50,0.271,57,0.92,75,0.974,82,1.389,83,0.123,85,0.456,94,0.243,97,1.312,106,0.114,109,2.191,114,0.686,118,1.335,130,1.613,155,0.606,163,0.69,164,0.548,165,0.507,177,2.774,178,0.648,187,0.5,196,0.974,201,1.488,202,0.318,209,2,213,0.879,222,1.823,227,0.471,240,0.835,258,1.11,265,0.8,281,1.323,317,0.005,318,0.005,319,0.114,346,2.124,381,0.779,384,1.964,392,1.949,393,1.734,400,1.571,424,0.669,427,1.036,449,0.949,460,1.969,463,1.862,475,3.861,480,1.056,519,2.06,558,1.609,578,2.817,589,1.57,594,1.413,685,2.644,759,1.183,858,1.342,880,0.738,898,1.807,920,3.578,921,1.433,922,2.753,923,2.253,924,3.73,925,3.755,926,3.32,927,3.755,928,3.755,929,3.32,930,3.769,931,3.993,932,2.269,933,3.642,934,3.278,936,4.495,938,3.993,944,2.043,945,2.076,946,3.082,947,2.974,948,3.385,949,2.905,950,3.32,954,3.587,955,1.485,956,1.485,957,1.485,958,1.485,959,1.485,960,1.433,961,1.339,962,3.47,963,1.339,964,1.854,965,3.283,966,2.189,967,2.189,968,2.607,969,1.339,970,1.296,971,1.98,972,2.753,973,2.753,974,1.485,975,2.753,976,2.269,977,2.753,978,1.485,979,1.485,980,3.082,981,1.485,982,2.753,983,2.269,984,1.485,985,1.485,986,1.485,987,1.485,988,3.323,989,2.269,990,1.485,991,1.485,992,2.269,993,1.485,994,1.485,995,1.98,996,1.807,997,1.485,998,1.433,999,1.485,1000,3.32,1001,3.927,1002,2.269,1003,4.05,1004,3.993,1005,3.32,1006,2.269,1007,2.269,1008,3.082,1009,3.082,1010,3.082,1011,2.69,1012,3.082,1013,3.082,1014,3.485,1015,1.485,1016,1.485,1017,3.32,1018,3.082,1019,2.753,1020,2.403,1021,2.269,1022,2.269,1023,2.045,1024,2.269,1025,2.189,1026,1.485,1027,1.485,1028,0.86,1029,1.485,1030,1.485,1031,3.179,1032,2.974,1033,1.919,1034,3.642,1035,4.181,1036,3.082,1037,2.269,1038,2.269,1039,3.082,1040,2.403,1041,1.485,1042,1.485,1043,1.485,1044,1.296,1045,1.485,1046,2.269,1047,2.269,1048,2.269,1049,2.269,1050,2.269,1051,2.269,1052,1.485,1053,1.485,1054,1.485,1055,1.485,1056,1.98,1057,1.027,1058,3.082,1059,1.485,1060,1.485,1061,1.433,1062,0.756,1063,1.433,1064,2.753,1065,2.269,1066,2.269,1067,3.082,1068,3.082,1069,2.269,1070,2.269,1071,2.269,1072,3.5,1073,2.269,1074,3.5,1075,1.485,1076,2.269,1077,2.269,1078,2.269,1079,3.54,1080,3.32,1081,3.5,1082,1.433,1083,1.485,1084,2.269,1085,3.642,1086,2.269,1087,3.5,1088,3.849,1089,2.269,1090,3.082,1091,3.755,1092,2.269,1093,1.705,1094,2.269,1095,2.269,1096,2.269,1097,2.189,1098,1.823,1099,2.269,1100,2.269,1101,2.269,1102,2.269,1103,2.753,1104,2.269,1105,2.753,1106,1.485,1107,3.055,1108,1.485,1109,1.485,1110,1.485,1111,1.485,1112,1.485,1113,1.339,1114,2.482,1115,1.485,1116,2.269,1117,2.269,1118,2.269,1119,2.269,1120,2.269,1121,2.269,1122,2.269,1123,2.269,1124,2.269,1125,1.256,1126,2.045,1127,1.256,1128,1.339,1129,1.183,1130,1.485,1131,1.296,1132,1.485,1133,1.296,1134,1.485,1135,1.485,1136,1.485,1137,1.485,1138,1.485,1139,1.485,1140,1.485,1141,1.98,1142,0.974,1143,1.027,1144,2.269,1145,2.189,1146,1.296,1147,1.485,1148,1.485,1149,1.485,1150,1.219,1151,1.485,1152,1.485,1153,0.974,1154,1.485,1155,1.485,1156,1.485,1157,2.269,1158,1.485,1207,3.591,1236,2.927,1237,2.927,1238,2.927,1239,2.927,1240,2.927,1241,2.927,1242,2.58,1243,2.58,1244,2.927,1245,2.58,1246,2.58]],["title/classes/DBWriter.html",[0,0.174,1014,1.934]],["body/classes/DBWriter.html",[0,0.326,2,0.903,3,0.048,4,0.041,5,0.035,7,0.041,8,1.02,16,0.869,18,0.458,19,0.01,20,0.304,21,0.128,22,0.834,24,0.97,50,0.272,57,0.921,75,0.976,82,1.39,83,0.123,85,0.456,94,0.244,97,1.313,106,0.114,109,2.194,114,0.687,118,1.337,130,1.616,155,0.608,163,0.691,164,0.549,165,0.508,177,2.775,178,0.649,187,0.5,196,0.976,201,0.976,202,0.319,209,2.001,213,0.881,222,1.825,227,0.472,240,0.837,258,1.111,265,0.8,281,1.324,317,0.005,318,0.005,319,0.114,346,2.126,381,0.779,384,1.966,392,2.011,393,1.735,400,1.573,424,0.671,427,1.036,449,0.951,460,2.124,463,1.865,475,3.863,480,1.058,519,2.062,558,1.611,578,2.819,589,1.572,594,1.415,685,2.626,759,1.185,858,1.344,880,0.74,898,1.81,920,3.58,921,1.436,922,2.757,923,2.255,924,3.753,925,3.758,926,3.324,927,3.758,928,3.758,929,3.324,930,3.771,931,3.995,932,2.273,933,3.645,934,3.28,936,4.335,938,3.995,944,2.048,945,2.078,946,3.086,947,2.977,948,3.388,949,2.907,950,3.324,954,3.589,955,1.489,956,1.489,957,1.489,958,1.489,959,1.489,960,1.436,961,1.342,962,3.542,963,1.342,964,1.857,965,3.286,966,2.193,967,2.193,968,2.61,969,1.342,970,1.299,971,1.984,972,2.757,973,2.757,974,1.489,975,2.757,976,2.273,977,2.757,978,1.489,979,1.489,980,3.086,981,1.489,982,2.757,983,2.273,984,1.489,985,1.489,986,1.489,987,1.489,988,3.365,989,2.273,990,1.489,991,1.489,992,2.273,993,1.489,994,1.489,995,1.984,996,1.81,997,1.489,998,1.436,999,1.489,1000,3.324,1001,3.929,1002,2.273,1003,4.052,1004,3.995,1005,3.324,1006,2.273,1007,2.273,1008,3.086,1009,3.086,1010,3.086,1011,2.694,1012,3.086,1013,3.086,1014,3.28,1015,1.489,1016,2.273,1017,3.324,1018,3.086,1019,2.757,1020,1.984,1021,1.489,1022,1.489,1023,1.342,1024,1.489,1025,1.436,1026,1.489,1027,1.489,1028,0.862,1029,1.489,1030,1.489,1031,3.181,1032,2.977,1033,1.921,1034,3.645,1035,4.183,1036,3.086,1037,2.273,1038,2.273,1039,3.086,1040,2.407,1041,1.489,1042,1.489,1043,1.489,1044,1.299,1045,1.489,1046,2.273,1047,2.273,1048,2.273,1049,2.273,1050,2.273,1051,2.273,1052,1.489,1053,1.489,1054,1.489,1055,1.489,1056,1.984,1057,1.03,1058,3.086,1059,1.489,1060,1.489,1061,1.436,1062,0.758,1063,1.436,1064,2.757,1065,2.273,1066,2.273,1067,3.086,1068,3.086,1069,2.273,1070,2.273,1071,2.273,1072,3.504,1073,2.273,1074,3.504,1075,1.489,1076,2.273,1077,2.273,1078,2.273,1079,3.542,1080,3.324,1081,3.504,1082,1.436,1083,1.489,1084,2.273,1085,3.645,1086,2.273,1087,3.504,1088,3.851,1089,2.273,1090,3.086,1091,3.758,1092,2.273,1093,1.708,1094,2.273,1095,2.273,1096,2.273,1097,2.193,1098,1.825,1099,2.273,1100,2.273,1101,2.273,1102,2.273,1103,2.757,1104,2.273,1105,2.757,1106,1.489,1107,3.058,1108,1.489,1109,1.489,1110,1.489,1111,1.489,1112,1.489,1113,1.342,1114,2.486,1115,1.489,1116,2.273,1117,2.273,1118,2.273,1119,2.273,1120,2.273,1121,2.273,1122,2.273,1123,2.273,1124,2.273,1125,1.259,1126,2.049,1127,1.259,1128,1.342,1129,1.185,1130,1.489,1131,1.299,1132,1.489,1133,1.299,1134,1.489,1135,1.489,1136,1.489,1137,1.489,1138,1.489,1139,1.489,1140,1.489,1141,1.984,1142,0.976,1143,1.03,1144,2.273,1145,2.193,1146,1.299,1147,1.489,1148,1.489,1149,1.489,1150,1.221,1151,1.489,1152,1.489,1153,0.976,1154,1.489,1155,1.489,1156,1.489,1157,2.273,1158,1.489,1207,3.598,1242,2.586,1243,2.586,1245,2.586,1246,2.586,1247,2.934,1248,2.934,1249,2.934,1250,2.934,1251,2.934,1252,2.934,1253,2.934]],["title/classes/DBWriterArray.html",[0,0.174,1254,3.848]],["body/classes/DBWriterArray.html",[0,0.326,2,0.904,3,0.048,4,0.041,5,0.035,7,0.041,8,1.02,16,0.857,18,0.706,19,0.01,20,0.371,21,0.107,22,0.948,24,1.282,50,0.272,57,0.76,75,0.977,82,1.296,83,0.123,85,0.463,94,0.241,97,1.313,106,0.114,109,2.195,114,0.688,118,1.612,130,1.617,155,0.608,163,0.691,164,0.549,165,0.508,177,2.748,178,0.649,187,0.496,196,0.977,201,0.977,209,2.002,213,0.881,222,1.826,227,0.473,240,0.838,258,1.218,265,0.8,281,1.325,317,0.005,318,0.005,319,0.114,346,2.212,381,0.767,384,1.967,392,1.951,393,1.735,400,1.573,424,0.671,427,1.005,449,0.952,460,1.972,463,1.866,475,3.864,480,1.059,519,2.156,558,1.612,578,2.82,589,1.573,594,1.416,685,2.626,759,1.186,858,1.345,880,0.74,898,1.811,920,3.581,921,1.437,922,2.758,923,2.256,924,3.362,925,3.505,926,2.758,927,3.505,928,3.505,929,2.758,930,3.654,931,3.759,932,2.274,933,3.505,934,3.059,936,3.945,938,3.852,945,1.858,946,2.758,947,2.661,948,3.286,949,2.82,950,3.087,954,3.59,955,1.49,956,1.49,957,1.49,958,1.49,959,1.49,960,1.437,961,1.343,962,3.473,963,1.343,964,1.858,965,3.389,966,2.194,967,2.194,968,2.611,969,1.343,970,1.3,971,1.985,972,2.758,973,2.758,974,1.49,975,2.758,976,2.274,977,2.758,978,1.49,979,1.49,980,3.087,981,1.49,982,2.758,983,2.274,984,1.49,985,1.49,986,1.49,987,1.49,988,3.325,989,2.274,990,1.49,991,1.49,992,2.274,993,1.49,994,1.49,995,1.985,996,1.811,997,1.49,998,1.437,999,1.49,1000,3.325,1001,3.93,1002,2.274,1003,4.053,1004,3.996,1005,3.325,1006,2.274,1007,2.274,1008,3.087,1009,3.087,1010,3.087,1011,2.695,1012,3.087,1013,3.087,1014,3.362,1015,1.49,1016,1.49,1017,2.758,1018,2.758,1019,2.758,1020,1.985,1021,1.49,1022,1.49,1023,1.343,1024,1.49,1025,1.437,1026,1.49,1027,1.49,1028,0.862,1029,1.49,1030,1.49,1031,3.182,1032,3.855,1033,2.182,1034,3.93,1035,4.301,1036,3.325,1037,2.274,1038,2.274,1039,3.087,1040,2.408,1041,1.49,1042,1.49,1043,1.49,1044,1.3,1045,1.49,1046,2.274,1047,2.758,1048,2.274,1049,2.274,1050,2.274,1051,2.274,1052,2.274,1053,1.49,1054,3.087,1055,1.49,1056,1.985,1057,1.031,1058,3.087,1059,1.49,1060,1.49,1061,1.437,1062,0.759,1063,1.437,1064,2.758,1065,2.274,1066,2.274,1067,3.087,1068,3.087,1069,2.274,1070,2.274,1071,2.274,1072,3.505,1073,2.274,1074,3.505,1075,1.49,1076,2.274,1077,2.274,1078,2.274,1079,3.543,1080,3.325,1081,3.505,1082,1.437,1083,1.49,1084,2.274,1085,3.646,1086,2.274,1087,3.505,1088,3.852,1089,2.274,1090,3.087,1091,3.759,1092,2.274,1093,1.709,1094,2.274,1095,2.274,1096,2.274,1097,2.194,1098,1.826,1099,2.274,1100,2.274,1101,2.274,1102,2.274,1103,3.505,1104,2.274,1105,3.087,1106,1.49,1107,3.182,1108,1.49,1109,1.49,1110,1.49,1111,1.49,1112,1.49,1113,1.343,1114,2.487,1115,1.49,1116,2.274,1117,2.274,1118,2.758,1119,2.274,1120,2.274,1121,3.087,1122,2.274,1123,2.758,1124,2.274,1125,1.26,1126,2.05,1127,1.26,1128,1.343,1129,1.186,1130,1.49,1131,1.3,1132,1.49,1133,1.3,1134,1.49,1135,1.49,1136,1.49,1137,1.49,1138,1.49,1139,1.49,1140,1.49,1141,1.985,1142,0.977,1143,1.031,1144,2.274,1145,2.194,1146,1.3,1147,1.49,1148,1.49,1149,1.49,1150,1.222,1151,1.49,1152,1.49,1153,0.977,1154,1.49,1155,1.49,1156,1.49,1157,2.274,1158,1.49,1159,3.6,1161,3.338,1162,3.338,1173,2.358,1174,2.358,1220,3.95,1221,3.95,1235,2.587,1254,2.587,1255,2.936,1256,2.936,1257,2.936,1258,2.936,1259,2.936,1260,2.936,1261,2.936,1262,2.936]],["title/interfaces/DensityUnits.html",[106,0.111,1263,2.879]],["body/interfaces/DensityUnits.html",[3,0.106,4,0.092,5,0.077,7,0.092,19,0.01,21,0.126,83,0.141,85,0.379,94,0.197,106,0.221,165,0.674,178,1.307,187,0.532,200,2.498,317,0.008,318,0.008,319,0.197,337,1.169,381,0.766,877,2.51,880,1.651,897,3.741,1263,5.105,1264,4.572,1265,5.386,1266,4.318,1267,4.318,1268,4.318,1269,4.572,1270,4.572,1271,4.572,1272,3.741,1273,4.1,1274,4.318,1275,4.572,1276,3.45,1277,3.741,1278,4.572,1279,4.572,1280,4.242,1281,5.406,1282,3.323,1283,4.572,1284,4.709,1285,4.318]],["title/interfaces/DesignActions.html",[106,0.111,1286,3.848]],["body/interfaces/DesignActions.html",[0,0.134,3,0.055,4,0.047,5,0.04,7,0.069,19,0.01,21,0.096,24,1.238,50,0.425,51,0.897,52,0.731,63,1.132,81,1.557,82,0.63,83,0.055,86,2.043,88,2.838,94,0.241,97,1.483,106,0.085,114,0.786,115,2.014,128,1.487,163,0.897,164,0.945,165,0.538,178,1.141,187,0.456,206,1.535,216,2.347,228,1.535,240,1.857,265,0.862,281,1.679,317,0.005,318,0.005,319,0.126,336,2.71,337,0.599,341,1.088,342,1.397,343,1.917,344,1.317,345,3.686,346,2.237,347,3.656,348,2.776,350,1.313,351,2.004,355,1.6,366,3.427,372,2.5,373,2.5,381,0.763,384,1.768,388,2.101,391,2.5,392,1.6,393,1.831,398,3.689,424,1.133,427,0.765,430,0.867,440,1.441,504,2.344,505,1.356,520,1.28,539,1.643,559,2.267,586,1.703,623,1.027,625,1.245,629,1.64,631,2.127,632,1.441,633,1.397,635,1.535,637,1.535,641,2.958,647,2.554,653,2.101,654,1.441,655,4.388,659,3.211,661,3.46,670,2.5,672,1.487,680,5.071,690,2.381,691,1.356,698,4.732,708,2.101,714,2.343,715,2.958,734,2.958,757,2.101,759,2.003,761,2.063,798,6.402,799,6.402,802,5.193,804,4.368,814,5.971,815,2.611,817,2.696,818,2.267,819,2.127,820,2.696,822,3.884,829,1.397,876,1.317,877,1.088,883,3.365,890,2.101,904,2.959,964,2.838,1028,0.646,1062,1.523,1098,1.007,1142,1.117,1150,1.397,1265,3.884,1276,1.768,1280,3.565,1286,4.368,1287,3.357,1288,2.5,1289,3.357,1290,2.696,1291,3.357,1292,3.357,1293,3.357,1294,3.803,1295,2.343,1296,2.267,1297,3.46,1298,2.958,1299,3.981,1300,3.357,1301,2.696,1302,2.958,1303,1.917,1304,2.343,1305,4.956,1306,3.357,1307,3.46,1308,2.696,1309,3.981,1310,3.46,1311,2.343,1312,2.958,1313,2.958,1314,4.368,1315,2.958,1316,3.981,1317,2.696,1318,3.357,1319,2.958,1320,4.368,1321,2.959,1322,3.357,1323,3.357,1324,2.101,1325,2.5,1326,4.368,1327,2.958,1328,4.368,1329,3.548,1330,2.958,1331,2.5,1332,4.956,1333,3.357,1334,3.357,1335,3.357,1336,4.956,1337,3.357,1338,3.357,1339,3.357,1340,3.357,1341,3.357,1342,3.357,1343,3.357,1344,3.357,1345,3.357,1346,2.958,1347,3.357,1348,3.357,1349,3.357,1350,3.357,1351,3.357,1352,3.357,1353,3.357,1354,1.587,1355,3.357,1356,2.5,1357,2.958,1358,2.343,1359,2.696,1360,3.357,1361,3.357,1362,3.357,1363,3.357,1364,3.357,1365,2.958,1366,3.268,1367,3.691,1368,2.958,1369,3.357,1370,2.696,1371,2.696,1372,3.357,1373,3.357,1374,2.958,1375,3.357,1376,4.956,1377,3.357,1378,3.357,1379,3.268,1380,3.357,1381,3.357,1382,2.958,1383,3.357,1384,3.357,1385,3.357,1386,2.696,1387,1.768,1388,2.344,1389,2.5,1390,2.5,1391,2.101,1392,2.958,1393,3.357,1394,2.5,1395,2.5,1396,2.958,1397,3.357,1398,3.357,1399,4.956,1400,6.941,1401,3.357,1402,3.357,1403,3.357,1404,3.357,1405,3.357,1406,3.357,1407,3.357,1408,3.357,1409,3.357,1410,6.507,1411,3.357,1412,3.357,1413,7.16,1414,4.368,1415,4.368,1416,4.956,1417,7.713,1418,5.385,1419,2.958,1420,3.357,1421,3.691,1422,4.368,1423,3.357,1424,2.958,1425,4.114,1426,2.958,1427,4.114,1428,2.696,1429,3.357,1430,3.357,1431,3.357,1432,3.357,1433,3.357,1434,2.831,1435,3.46,1436,4.368,1437,4.368,1438,3.522,1439,3.981,1440,5.193,1441,3.103,1442,4.368,1443,3.103,1444,3.981,1445,3.357,1446,2.958,1447,4.368,1448,2.101,1449,3.357,1450,3.357,1451,2.958,1452,2.958,1453,3.357,1454,3.357,1455,4.368,1456,4.368,1457,3.46,1458,2.004,1459,1.768,1460,3.357,1461,3.357,1462,3.357,1463,3.357,1464,3.357,1465,3.357,1466,5.892,1467,6.941,1468,4.956,1469,5.892,1470,3.357,1471,3.357,1472,3.357,1473,3.357,1474,3.357,1475,3.357,1476,3.357,1477,3.357,1478,3.357,1479,3.357,1480,4.956,1481,5.892,1482,5.734,1483,5.892,1484,3.357,1485,3.357,1486,3.357,1487,4.956,1488,4.956,1489,3.357,1490,3.357,1491,3.357,1492,3.357,1493,3.357,1494,2.958,1495,5.892,1496,3.357,1497,2.343,1498,3.357,1499,3.357,1500,3.357,1501,3.357,1502,3.357,1503,3.357,1504,3.357,1505,3.357,1506,3.357,1507,3.357,1508,3.357,1509,3.357,1510,3.357,1511,3.357,1512,3.46,1513,4.956,1514,4.368,1515,4.956,1516,4.956,1517,4.956,1518,4.956,1519,2.831,1520,4.956,1521,4.956,1522,6.507,1523,3.357,1524,5.892,1525,6.507,1526,5.892,1527,6.507,1528,6.507,1529,3.357,1530,6.507,1531,3.357,1532,5.892,1533,3.357,1534,3.357,1535,3.357,1536,3.357,1537,2.5,1538,3.357,1539,1.768,1540,3.357,1541,4.368,1542,3.357,1543,1.768,1544,3.357,1545,5.193,1546,3.357,1547,1.768,1548,3.357,1549,2.213,1550,2.696,1551,2.343,1552,3.357,1553,3.357,1554,3.357,1555,3.357,1556,3.357,1557,3.357,1558,3.357,1559,3.357,1560,3.357,1561,3.357,1562,3.357,1563,3.357,1564,1.768,1565,2.213,1566,3.357,1567,3.689,1568,3.357,1569,2.5,1570,3.357,1571,2.5,1572,3.357,1573,2.101,1574,3.357,1575,2.5,1576,3.357,1577,2.5,1578,3.357,1579,2.5,1580,3.357,1581,2.5,1582,3.357,1583,3.357,1584,3.357]],["title/interfaces/DesignMode.html",[106,0.111,1285,2.879]],["body/interfaces/DesignMode.html",[3,0.104,4,0.089,5,0.075,7,0.089,19,0.01,21,0.14,83,0.14,85,0.472,94,0.192,106,0.219,165,0.669,178,1.302,187,0.533,200,2.432,202,0.694,317,0.008,318,0.008,319,0.194,337,1.138,381,0.836,877,2.643,880,1.922,897,4.353,1263,4.204,1264,4.452,1265,5.364,1266,4.204,1267,4.204,1268,4.204,1269,5.32,1270,5.32,1271,5.32,1272,4.353,1273,4.771,1274,5.025,1275,5.32,1276,3.359,1277,3.642,1278,4.452,1279,4.452,1280,4.729,1281,6.026,1282,3.235,1283,4.452,1284,5.004,1285,5.025]],["title/interfaces/DraftMap.html",[106,0.111,1295,3.049]],["body/interfaces/DraftMap.html",[3,0.09,4,0.078,5,0.065,7,0.078,16,0.603,19,0.01,20,0.383,21,0.125,50,0.277,51,0.963,63,0.964,69,1.843,83,0.135,85,0.491,94,0.272,97,0.94,106,0.204,163,0.848,164,0.857,165,0.699,178,1.11,183,1.623,187,0.405,202,0.603,207,1.947,229,2.115,270,1.885,273,3.56,317,0.007,318,0.007,319,0.178,337,0.989,341,1.797,348,1.895,355,1.505,358,3.167,366,4.036,381,0.549,400,1.679,427,0.994,458,2.536,546,3.038,586,2.813,589,1.946,623,1.667,625,2.593,818,3.199,819,3.002,822,3.31,873,3.038,876,3.255,877,2.484,880,1.932,883,4.595,902,3.68,903,3.471,988,2.911,1057,2.455,1062,1.433,1093,2.667,1294,3.038,1295,4.883,1324,5.037,1379,4.611,1457,3.871,1459,3.684,1569,5.209,1571,5.209,1573,5.536,1575,5.209,1577,5.209,1579,5.209,1581,5.209,1585,4.129,1586,3.423,1587,5.617,1588,6.462,1589,3.002,1590,3.832,1591,3.656,1592,3.871,1593,3.656,1594,4.453,1595,2.921,1596,3.038,1597,4.129,1598,4.453,1599,4.129,1600,3.471,1601,4.453,1602,4.453,1603,6.462,1604,6.462,1605,4.883,1606,3.307,1607,4.175,1608,5.617,1609,5.617,1610,5.209,1611,4.883,1612,5.617,1613,5.791,1614,5.617,1615,5.037,1616,5.617,1617,3.832,1618,4.453,1619,4.453,1620,4.453,1621,4.453,1622,4.453,1623,3.471,1624,4.129,1625,4.453,1626,4.129,1627,4.453,1628,4.129,1629,2.714]],["title/interfaces/DraftNodeProxy.html",[106,0.111,1630,2.3]],["body/interfaces/DraftNodeProxy.html",[3,0.083,4,0.071,5,0.06,7,0.071,16,0.555,18,0.521,19,0.01,20,0.39,21,0.144,50,0.404,51,0.953,57,1.124,61,2.05,63,1.153,67,1.845,69,1.11,73,1.478,74,2.553,81,1.056,82,0.957,83,0.144,85,0.521,91,2.391,94,0.27,100,1.845,106,0.222,155,1.373,165,0.699,183,1.492,187,0.521,202,0.555,207,2.05,230,1.35,270,1.194,317,0.007,318,0.007,319,0.168,336,2.813,337,0.91,339,1.891,341,1.653,348,1.742,355,2.399,381,0.8,400,1.224,402,2.686,424,1.683,427,1.075,437,1.845,516,1.194,520,3.297,623,1.526,629,2.05,659,2.759,672,2.935,685,2.829,719,3.688,877,1.653,878,3.244,880,1.285,945,2.517,1028,1.69,1033,2.094,1062,1.903,1142,1.697,1153,1.697,1296,3.567,1354,3.134,1387,4.258,1388,3.822,1539,3.491,1543,3.491,1547,3.491,1586,3.244,1589,2.188,1606,2.411,1630,3.491,1631,2.793,1632,3.631,1633,4.429,1634,4.429,1635,4.686,1636,2.587,1637,3.244,1638,2.587,1639,2.793,1640,2.793,1641,2.411,1642,3.631,1643,2.332,1644,2.793,1645,2.793,1646,2.332,1647,1.944,1648,2.686,1649,3.737,1650,2.686,1651,2.793,1652,2.793,1653,2.793,1654,2.686,1655,2.332,1656,2.411,1657,2.496,1658,2.793,1659,2.686,1660,3.879,1661,2.686,1662,2.686,1663,3.631,1664,2.411,1665,3.491,1666,4.429,1667,2.587,1668,2.686,1669,2.496,1670,2.793,1671,2.686,1672,2.686,1673,3.631,1674,2.686,1675,2.793,1676,2.793]],["title/interfaces/DraftOperationClassification.html",[106,0.111,1677,3.049]],["body/interfaces/DraftOperationClassification.html",[0,0.243,3,0.058,4,0.05,5,0.042,7,0.05,9,1.281,10,1.281,18,0.363,19,0.01,20,0.304,21,0.099,25,1.281,50,0.416,51,0.885,52,0.773,57,1.032,63,0.898,66,0.754,71,1.765,81,1.261,83,0.084,85,0.47,86,0.94,88,1.765,94,0.245,96,1.874,97,1.488,99,1.281,100,0.988,106,0.131,112,1.827,116,1.624,118,1.498,128,1.573,163,0.749,164,0.937,165,0.275,187,0.476,189,2.479,213,1.066,220,1.182,222,1.55,227,0.832,265,0.865,280,1.662,281,1.231,315,1.281,317,0.005,318,0.005,319,0.131,337,0.634,350,1.368,355,0.964,359,2.12,381,0.661,384,2.006,392,1.815,393,1.528,425,3.836,427,0.921,429,1.97,430,0.918,431,1.738,432,3.057,433,1.679,434,1.802,435,2.12,436,2.223,437,2.387,440,2.217,448,1.679,449,1.151,450,2.95,460,1.151,478,2.341,480,1.863,483,2.223,489,2.621,492,2.223,500,3.384,502,3.817,504,1.679,505,1.435,506,1.738,507,1.624,508,2.12,509,2.028,510,2.528,511,2.028,512,2.12,513,3.085,514,2.442,515,1.945,516,1.21,517,2.12,519,1.438,522,3.477,523,2.534,525,2.95,526,2.028,527,2.442,528,2.362,529,3.083,532,2.12,535,2.95,536,2.028,541,3.083,544,2.95,545,3.083,551,3.083,553,3.083,554,2.12,555,3.521,559,2.362,573,0.964,587,1.87,594,2.111,597,2.12,607,3.477,617,2.83,647,2.389,795,3.206,900,1.679,923,1.317,964,1.765,968,1.524,996,1.435,1011,1.573,1028,0.683,1057,1.246,1098,1.55,1125,2.613,1303,2.95,1321,3.083,1329,1.573,1418,2.479,1434,2.028,1438,1.802,1448,2.223,1458,2.12,1512,3.606,1549,2.341,1564,1.87,1567,3.233,1600,2.223,1629,2.528,1646,2.362,1677,3.606,1678,2.644,1679,4.566,1680,2.644,1681,2.644,1682,2.479,1683,2.341,1684,1.679,1685,2.644,1686,3.233,1687,2.479,1688,2.621,1689,2.12,1690,2.223,1691,2.479,1692,2.644,1693,3.606,1694,3.846,1695,3.405,1696,2.12,1697,2.644,1698,2.644,1699,3.846,1700,2.028,1701,2.223,1702,2.644,1703,2.223,1704,2.644,1705,2.644,1706,3.846,1707,2.479,1708,3.811,1709,2.644,1710,2.644,1711,2.644,1712,2.644,1713,3.405,1714,2.479,1715,2.644,1716,2.223,1717,2.644,1718,3.606,1719,2.644,1720,2.644,1721,2.644,1722,2.644,1723,2.479,1724,2.644,1725,2.479,1726,2.479,1727,2.479,1728,2.479,1729,2.341,1730,2.341,1731,2.479,1732,2.644,1733,2.644,1734,4.666,1735,2.644,1736,3.606,1737,2.479,1738,5.696,1739,2.644,1740,2.644,1741,2.644,1742,3.606,1743,3.846,1744,3.606,1745,3.846,1746,2.479,1747,5.519,1748,3.846,1749,3.606,1750,3.846,1751,2.479,1752,2.644,1753,2.479,1754,2.479,1755,2.479,1756,2.479,1757,3.606,1758,2.479,1759,2.479,1760,2.223,1761,3.391,1762,2.479,1763,2.479,1764,2.644,1765,2.479,1766,2.479,1767,3.846,1768,2.479,1769,3.606,1770,2.644,1771,2.479,1772,2.479,1773,2.644,1774,2.644,1775,2.479,1776,2.479,1777,2.341,1778,2.644,1779,2.644,1780,2.644,1781,2.644,1782,2.223,1783,2.644,1784,1.87,1785,2.028,1786,2.644,1787,3.811,1788,2.341,1789,2.644,1790,4.978,1791,2.479,1792,2.644,1793,2.644,1794,2.644,1795,2.644,1796,4.978,1797,4.533,1798,2.644,1799,2.479,1800,2.644,1801,2.644,1802,2.644,1803,2.644,1804,2.644,1805,3.846,1806,2.644,1807,3.846,1808,2.644,1809,3.846,1810,2.644,1811,3.846,1812,2.644,1813,3.846,1814,2.644,1815,2.644,1816,2.644,1817,2.644,1818,2.644,1819,3.606,1820,2.644,1821,2.644,1822,3.846,1823,2.644,1824,3.846,1825,2.644,1826,3.846,1827,2.644,1828,3.846,1829,2.644,1830,3.846,1831,2.644,1832,3.606,1833,2.644,1834,3.846,1835,2.644,1836,3.846,1837,2.644,1838,2.644,1839,2.644,1840,2.644,1841,2.644,1842,3.846,1843,3.846,1844,2.644,1845,2.644,1846,4.533,1847,3.662,1848,2.644,1849,2.479,1850,3.405,1851,4.682,1852,2.028,1853,2.644,1854,2.644,1855,2.644,1856,2.341,1857,2.644,1858,2.644,1859,2.644,1860,2.644,1861,2.644,1862,3.846,1863,2.12,1864,2.644,1865,2.644,1866,3.811,1867,2.644,1868,2.644,1869,2.644,1870,3.846,1871,2.644,1872,2.644,1873,2.12,1874,2.12,1875,2.644,1876,2.644,1877,2.644,1878,2.644,1879,2.644,1880,2.644,1881,3.846,1882,3.846,1883,3.846,1884,2.644,1885,2.644,1886,2.644,1887,2.644,1888,3.846,1889,2.644,1890,2.644,1891,2.644,1892,2.644,1893,2.644,1894,2.644,1895,2.644,1896,2.644,1897,2.644,1898,2.479,1899,2.644,1900,3.846,1901,2.644,1902,2.644,1903,3.083,1904,2.644,1905,2.644,1906,2.644,1907,2.644,1908,2.644,1909,2.12,1910,2.644,1911,2.644,1912,2.644,1913,2.644,1914,2.644,1915,2.644,1916,2.644,1917,2.644,1918,2.644,1919,2.644,1920,2.644,1921,2.644,1922,2.644,1923,2.644,1924,4.533,1925,2.479,1926,4.533,1927,2.644,1928,2.644,1929,2.644,1930,2.644,1931,2.644,1932,2.644,1933,2.644,1934,2.644,1935,2.644,1936,2.644,1937,2.644]],["title/components/DraftdetailComponent.html",[623,0.905,829,1.818]],["body/components/DraftdetailComponent.html",[0,0.142,3,0.058,4,0.05,5,0.042,7,0.05,8,0.971,16,0.97,18,0.684,19,0.01,20,0.412,21,0.14,22,0.918,24,1.521,50,0.423,51,0.934,52,0.775,63,1.164,69,0.775,82,0.668,83,0.058,85,0.206,86,1.371,94,0.184,97,1.298,114,1.212,154,0.943,161,2.883,165,0.276,178,0.516,187,0.43,191,1.185,202,0.387,212,3.525,227,0.573,229,1.974,230,1.371,258,1.377,265,0.734,280,0.72,297,2.533,317,0.005,318,0.005,319,0.132,342,1.482,344,3.229,350,1.883,351,3.995,355,2.315,381,0.512,392,1.655,393,1.183,398,2.229,401,3.138,427,0.791,430,0.92,437,1.697,446,2.617,473,4.984,504,3.62,505,1.439,516,0.834,539,2.533,558,1.773,573,0.967,623,1.473,624,1.439,625,1.919,626,1.684,627,1.629,628,1.684,629,1.863,631,2.617,632,3.779,633,3.665,635,2.367,637,2.367,647,3.444,653,4.19,654,2.872,661,4.672,690,1.439,691,1.439,697,2.835,708,2.229,714,2.486,759,1.439,761,2.154,819,1.528,824,2.034,825,1.684,826,1.482,827,1.684,828,1.684,829,2.786,830,1.684,831,1.528,832,1.684,833,1.528,834,1.684,835,1.577,836,1.684,837,1.528,838,1.684,839,1.528,840,1.684,841,1.684,842,1.528,843,1.684,844,1.528,845,1.684,846,1.528,847,1.684,848,1.577,849,1.684,850,1.528,851,1.684,852,1.482,853,1.684,854,1.528,855,1.684,856,1.684,857,1.528,858,1.069,859,1.684,860,1.528,861,1.482,862,1.482,863,1.684,864,1.577,865,1.358,866,1.684,869,3.24,874,3.412,875,1.951,881,3.089,888,3.412,900,1.684,949,2.393,960,2.533,1028,1.287,1062,1.729,1127,2.221,1129,2.091,1276,2.726,1282,1.807,1284,2.034,1288,2.652,1290,2.86,1296,2.789,1297,4.963,1298,3.138,1303,3.822,1304,2.486,1310,4.672,1311,2.486,1314,6.266,1315,3.138,1316,5.375,1317,2.86,1321,4.57,1324,3.24,1329,3.473,1358,5.178,1366,5.047,1386,4.896,1388,2.883,1389,2.652,1390,5.295,1392,5.373,1395,2.652,1396,6.266,1413,3.138,1414,3.138,1415,3.138,1425,2.486,1448,4.19,1455,5.373,1456,3.138,1459,3.211,1541,5.373,1567,2.229,1573,3.24,1607,3.089,1629,2.533,1647,2.711,1661,2.726,1784,3.525,1799,2.486,1849,3.613,1851,3.412,1938,3.561,1939,5.175,1940,4.256,1941,5.175,1942,6.693,1943,5.898,1944,3.613,1945,5.175,1946,6.097,1947,5.175,1948,7.109,1949,6.097,1950,7.418,1951,5.175,1952,7.654,1953,7.654,1954,6.693,1955,6.693,1956,6.693,1957,5.175,1958,6.693,1959,5.175,1960,3.138,1961,5.898,1962,6.693,1963,7.109,1964,5.175,1965,3.854,1966,5.175,1967,3.561,1968,3.561,1969,3.561,1970,3.854,1971,5.175,1972,5.175,1973,5.175,1974,3.561,1975,3.561,1976,3.561,1977,3.561,1978,3.561,1979,5.175,1980,6.693,1981,3.561,1982,3.561,1983,3.561,1984,5.175,1985,3.561,1986,3.561,1987,3.561,1988,3.561,1989,3.561,1990,3.561,1991,4.156,1992,5.175,1993,3.561,1994,3.561,1995,3.561,1996,3.561,1997,3.561,1998,3.561,1999,7.109,2000,2.229,2001,5.175,2002,3.561,2003,3.561,2004,2.486,2005,2.652,2006,3.561,2007,3.561,2008,3.561,2009,3.561,2010,2.86,2011,3.561,2012,3.561,2013,3.561,2014,2.652,2015,3.561,2016,3.561,2017,3.138,2018,3.561,2019,3.561,2020,3.561,2021,5.175,2022,3.561,2023,3.561,2024,3.561,2025,3.561,2026,3.138,2027,5.175,2028,6.693,2029,5.175,2030,3.561,2031,3.561,2032,3.561,2033,3.561,2034,3.561,2035,5.175,2036,3.561,2037,3.561,2038,3.561,2039,3.561,2040,3.138,2041,3.138,2042,3.561,2043,5.175,2044,3.561,2045,3.138,2046,3.561,2047,5.175,2048,3.561,2049,3.561,2050,3.561,2051,3.561,2052,3.561,2053,3.561,2054,3.561,2055,3.561,2056,3.561,2057,5.175,2058,5.175,2059,2.86,2060,3.561,2061,3.561,2062,2.486,2063,3.561,2064,3.561,2065,5.175,2066,2.652,2067,3.561,2068,3.561,2069,3.561,2070,4.561,2071,4.561,2072,4.156,2073,5.175,2074,5.175,2075,3.854,2076,5.175,2077,4.156,2078,5.175,2079,5.175,2080,5.175,2081,5.175,2082,5.175,2083,6.693,2084,5.175,2085,6.693,2086,6.693,2087,5.175,2088,5.175,2089,3.613,2090,5.175,2091,4.561,2092,3.561,2093,6.097,2094,3.913,2095,4.519,2096,4.032,2097,3.561,2098,2.86,2099,2.034,2100,3.561,2101,2.652,2102,2.86,2103,3.34,2104,3.561,2105,3.561,2106,2.86,2107,3.482,2108,4.256,2109,3.561,2110,2.86,2111,2.348,2112,2.486,2113,2.652,2114,2.726,2115,3.561,2116,1.951,2117,2.652,2118,2.652,2119,1.684,2120,3.561,2121,3.561,2122,3.561,2123,3.561,2124,2.486,2125,2.348,2126,2.652,2127,3.561]],["title/interfaces/DynamicOperation.html",[106,0.111,2128,2.607]],["body/interfaces/DynamicOperation.html",[3,0.057,4,0.05,5,0.042,7,0.085,9,1.274,10,1.274,11,1.615,12,1.615,13,1.615,18,0.62,19,0.01,20,0.429,21,0.137,22,0.484,23,2.141,25,1.274,50,0.333,51,0.703,52,0.769,53,1.347,54,1.516,57,1.422,58,1.564,60,3.138,61,2.312,63,1.519,66,1.744,69,1.808,71,2.726,72,2.208,73,1.832,81,1.533,82,0.663,83,0.135,85,0.528,86,0.935,94,0.213,96,2.409,99,2.405,100,1.856,101,3.492,102,2.776,103,2.776,106,0.188,108,1.564,112,2.127,115,2.278,118,0.869,119,1.274,132,2.87,134,2.526,154,1.363,156,1.427,163,0.876,164,0.744,165,0.686,187,0.502,188,3.7,189,2.628,190,1.516,193,2.604,194,2.433,195,1.67,196,1.175,197,1.386,198,1.67,199,1.67,200,2.314,201,1.712,202,0.725,203,1.67,206,2.353,207,2.059,209,1.329,216,1.274,220,1.175,225,3.7,228,1.615,229,1.347,265,0.878,270,0.827,280,1.695,298,3.275,315,1.274,317,0.005,318,0.005,319,0.131,337,0.63,341,1.145,427,0.458,437,1.689,501,2.433,506,1.729,507,3.492,510,2.97,520,3.132,527,3.7,539,1.729,547,2.017,549,3.98,556,3.071,568,2.938,569,3.277,578,2.019,586,2.61,589,1.24,629,1.856,696,2.211,697,1.935,815,2.71,876,2.381,1020,1.564,1062,0.913,1098,1.06,1150,2.526,1282,1.792,1391,2.211,1443,2.211,1590,1.935,1629,1.729,1641,2.433,1643,2.353,1655,1.615,1679,4.415,1696,3.071,1700,2.938,1847,1.935,1940,2.465,2062,3.591,2114,1.86,2128,3.071,2129,2.328,2130,3.733,2131,4.947,2132,5.277,2133,3.831,2134,3.831,2135,3.831,2136,2.63,2137,2.63,2138,2.63,2139,2.465,2140,4.519,2141,2.63,2142,2.63,2143,2.328,2144,2.63,2145,2.63,2146,2.63,2147,2.63,2148,2.465,2149,3.831,2150,2.63,2151,2.017,2152,2.63,2153,2.465,2154,2.465,2155,4.519,2156,5.508,2157,5.508,2158,2.465,2159,4.519,2160,4.519,2161,4.519,2162,4.519,2163,2.63,2164,4.519,2165,2.63,2166,3.831,2167,3.831,2168,3.831,2169,3.831,2170,3.831,2171,6.341,2172,2.465,2173,2.63,2174,2.63,2175,2.63,2176,2.63,2177,2.63,2178,2.63,2179,2.63,2180,2.63,2181,2.465,2182,2.63,2183,2.465,2184,6.296,2185,2.63,2186,2.63,2187,2.63,2188,2.465,2189,2.63,2190,2.63,2191,2.63,2192,2.63,2193,2.63,2194,4.965,2195,2.63,2196,2.63,2197,2.63,2198,3.831,2199,5.827,2200,5.827,2201,5.827,2202,3.831,2203,2.63,2204,2.63,2205,2.63,2206,5.277,2207,5.686,2208,3.831,2209,2.63,2210,4.965,2211,2.63,2212,3.831,2213,3.831,2214,3.831,2215,3.831,2216,3.831,2217,3.831,2218,3.831,2219,3.831,2220,3.831,2221,3.831,2222,4.965,2223,3.831,2224,3.831,2225,2.63,2226,3.831,2227,2.63,2228,2.63,2229,3.831,2230,3.831,2231,2.63,2232,2.63,2233,3.831,2234,2.63,2235,2.63,2236,2.63,2237,2.63,2238,2.63,2239,2.63,2240,2.63,2241,2.328,2242,2.63,2243,2.63,2244,2.63,2245,2.63,2246,2.63,2247,2.63,2248,2.465]],["title/interfaces/FileObj.html",[106,0.111,1665,2.3]],["body/interfaces/FileObj.html",[3,0.083,4,0.072,5,0.06,7,0.072,16,0.556,18,0.522,19,0.01,20,0.39,21,0.144,50,0.405,51,0.932,57,1.125,61,2.052,63,1.154,67,1.847,69,1.112,73,1.48,74,2.465,81,1.059,82,0.958,83,0.144,85,0.53,91,2.394,94,0.268,100,1.847,106,0.222,155,1.375,165,0.699,183,1.495,187,0.524,207,2.052,230,1.353,270,1.197,317,0.007,318,0.007,319,0.169,336,2.815,337,0.911,339,1.894,341,1.656,348,1.746,355,2.291,381,0.73,400,1.226,402,2.691,424,1.517,427,1.076,437,2.251,516,1.197,520,3.298,623,1.375,629,2.052,659,3.367,672,2.939,685,2.83,719,3.69,877,1.656,878,3.249,880,1.288,945,2.268,1028,1.678,1033,2.555,1062,1.905,1142,1.7,1153,1.7,1296,3.036,1354,3.138,1387,3.496,1388,3.138,1539,3.496,1543,3.496,1547,3.496,1586,3.249,1589,2.193,1606,2.416,1630,2.691,1631,2.799,1632,2.799,1633,3.636,1634,3.636,1635,4.431,1636,2.592,1637,3.249,1638,2.592,1639,2.799,1640,2.799,1641,2.416,1642,3.636,1643,2.337,1644,2.799,1645,2.799,1646,2.337,1647,1.948,1648,2.691,1649,4.206,1650,2.691,1651,2.799,1652,2.799,1653,2.799,1654,2.691,1655,2.337,1656,2.416,1657,2.501,1658,2.799,1659,2.691,1660,4.367,1661,2.691,1662,2.691,1663,4.431,1664,2.416,1665,3.883,1666,4.688,1667,3.959,1668,2.691,1669,2.501,1670,2.799,1671,2.691,1672,2.691,1673,3.636,1674,2.691,1675,2.799,1676,2.799]],["title/interfaces/FileSaver.html",[106,0.111,1674,2.3]],["body/interfaces/FileSaver.html",[3,0.085,4,0.073,5,0.062,7,0.073,16,0.568,18,0.534,19,0.01,20,0.394,21,0.14,50,0.407,51,0.935,57,1.142,61,2.074,63,1.171,66,1.771,67,1.874,69,1.137,73,1.502,74,2.486,81,1.082,82,0.98,83,0.144,85,0.522,91,2.428,94,0.266,100,1.874,106,0.222,155,1.395,165,0.701,183,1.528,187,0.519,207,2.074,230,1.383,270,1.223,317,0.007,318,0.007,319,0.171,336,2.839,337,0.932,339,1.937,341,1.693,348,1.785,355,2.303,381,0.737,400,1.254,402,2.751,424,1.539,427,1.082,437,1.874,516,1.223,520,3.312,623,1.395,629,2.074,659,2.802,672,2.981,685,2.837,719,3.721,877,1.693,878,3.295,880,1.317,945,2.301,1028,1.685,1033,2.127,1062,1.925,1142,1.738,1153,1.738,1296,3.079,1354,3.184,1387,3.546,1388,3.184,1539,4.29,1543,3.546,1547,4.29,1586,3.295,1589,2.241,1606,2.47,1630,2.751,1631,2.861,1632,2.861,1633,3.688,1634,3.688,1635,4.462,1636,2.65,1637,3.295,1638,2.65,1639,2.861,1640,2.861,1641,2.47,1642,3.688,1643,2.389,1644,2.861,1645,2.861,1646,2.389,1647,1.992,1648,2.751,1649,3.78,1650,2.751,1651,2.861,1652,2.861,1653,2.861,1654,2.751,1655,2.389,1656,2.47,1657,2.556,1658,2.861,1659,2.751,1660,3.924,1661,2.751,1662,2.751,1663,3.688,1664,2.47,1665,3.546,1666,4.462,1667,2.65,1668,2.751,1669,2.556,1670,2.861,1671,2.751,1672,2.751,1673,4.462,1674,3.546,1675,2.861,1676,2.861]],["title/interfaces/Fileloader.html",[106,0.111,1672,2.3]],["body/interfaces/Fileloader.html",[3,0.085,4,0.074,5,0.062,7,0.074,16,0.571,18,0.536,19,0.01,20,0.394,21,0.138,50,0.408,51,0.936,57,1.145,61,2.078,63,1.175,66,1.674,67,1.879,69,1.142,73,1.506,74,2.683,81,1.087,82,0.985,83,0.144,85,0.522,91,2.436,94,0.266,100,1.879,106,0.223,155,1.399,165,0.701,183,1.536,187,0.519,207,2.078,230,1.39,270,1.229,317,0.007,318,0.007,319,0.172,336,2.844,337,0.936,339,1.946,341,1.701,348,1.793,355,2.306,381,0.739,400,1.26,402,2.764,424,1.544,427,1.083,437,1.879,516,1.229,520,3.315,623,1.399,629,2.078,659,2.811,672,2.991,685,2.839,719,3.728,877,1.701,878,3.305,880,1.323,945,2.308,1028,1.686,1033,2.133,1062,1.929,1142,1.746,1153,1.746,1296,3.089,1354,3.193,1387,3.557,1388,3.193,1539,4.296,1543,3.557,1547,3.557,1586,3.305,1589,2.252,1606,2.481,1630,2.764,1631,2.875,1632,2.875,1633,3.7,1634,3.7,1635,4.469,1636,2.662,1637,3.305,1638,2.662,1639,2.875,1640,2.875,1641,2.481,1642,3.7,1643,2.4,1644,2.875,1645,2.875,1646,2.4,1647,2.001,1648,2.764,1649,3.788,1650,2.764,1651,2.875,1652,2.875,1653,2.875,1654,2.764,1655,2.4,1656,2.481,1657,2.569,1658,2.875,1659,2.764,1660,3.933,1661,2.764,1662,2.764,1663,3.7,1664,2.481,1665,3.557,1666,4.469,1667,2.662,1668,2.764,1669,2.569,1670,2.875,1671,2.764,1672,3.557,1673,3.7,1674,2.764,1675,2.875,1676,2.875]],["title/interfaces/IOTuple.html",[106,0.111,2249,3.507]],["body/interfaces/IOTuple.html",[3,0.083,4,0.071,5,0.06,7,0.071,19,0.01,20,0.368,21,0.143,50,0.414,51,0.89,57,1.322,61,2.17,63,1.153,67,2.25,69,1.603,70,3.244,73,1.803,75,1.697,81,1.807,83,0.131,85,0.48,86,1.35,88,2.831,94,0.235,96,2.041,106,0.168,112,2.426,115,2.265,117,2.845,155,1.373,163,0.902,164,0.956,165,0.701,183,1.94,187,0.295,202,0.555,207,1.419,230,1.951,270,1.194,280,1.031,317,0.007,318,0.007,319,0.168,337,0.91,339,1.891,355,2.249,381,0.505,400,1.591,424,1.515,427,1.012,430,1.317,437,1.845,458,2.332,460,1.653,501,3.918,546,3.631,569,3.161,582,3.957,623,1.717,624,2.678,625,1.891,629,2.05,681,4.37,684,4.095,685,2.884,690,2.678,691,2.678,719,4.154,757,5.281,795,4.108,876,2.001,880,1.966,900,2.411,954,2.411,971,2.258,995,2.935,1033,2.326,1062,2.015,1093,2.974,1276,4.108,1296,3.032,1388,3.134,1435,3.559,1589,2.188,1590,2.793,1591,3.361,1595,3.491,1596,3.631,1611,3.559,1636,2.587,1657,2.496,1667,3.737,2089,3.559,2249,5.323,2250,4.095,2251,5.323,2252,5.841,2253,4.936,2254,6.872,2255,5.841,2256,6.872,2257,6.491,2258,5.841,2259,5.841,2260,5.841,2261,5.841,2262,6.872,2263,5.841,2264,4.493,2265,4.493,2266,4.493,2267,4.493,2268,4.493,2269,4.493,2270,4.095,2271,4.493,2272,5.323,2273,2.912,2274,4.493,2275,4.493,2276,6.654,2277,4.493,2278,5.141,2279,4.627,2280,5.323,2281,5.323,2282,5.915,2283,4.493,2284,3.797,2285,4.493,2286,4.493,2287,4.095,2288,4.493,2289,4.493,2290,4.493,2291,4.493,2292,4.493,2293,4.493]],["title/components/ImageComponent.html",[623,0.905,831,1.874]],["body/components/ImageComponent.html",[0,0.247,3,0.101,4,0.087,5,0.073,7,0.087,8,1.406,16,0.815,19,0.01,20,0.403,24,1.106,50,0.31,83,0.101,94,0.226,114,1.755,191,2.063,227,1.297,258,1.051,280,1.253,317,0.008,318,0.008,430,1.602,446,3.216,516,1.452,558,2.216,573,1.683,623,1.668,624,2.504,625,2.778,626,2.931,627,2.835,628,2.931,629,1.725,631,3.456,632,3.969,633,3.85,635,3.427,637,3.427,654,3.59,690,2.504,691,2.504,761,3.119,825,2.931,826,2.58,827,2.931,828,2.931,829,2.58,830,2.931,831,3.59,832,2.931,833,2.66,834,2.931,835,2.745,836,2.931,837,2.66,838,2.931,839,2.66,840,2.931,841,2.931,842,2.66,843,2.931,844,2.66,845,2.931,846,2.66,847,2.931,848,2.745,849,2.931,850,2.66,851,2.931,852,2.58,853,2.931,854,2.66,855,2.931,856,2.931,857,2.66,858,1.86,859,2.931,860,2.66,861,2.58,862,2.58,863,2.931,864,2.745,865,2.364,866,2.931,2294,6.198,2295,6.603,2296,8.052,2297,7.492,2298,6.198,2299,6.198,2300,7.492,2301,7.492,2302,7.492]],["title/interfaces/Ink.html",[106,0.111,1366,2.879]],["body/interfaces/Ink.html",[0,0.212,3,0.086,4,0.075,5,0.063,7,0.075,19,0.01,20,0.447,21,0.136,24,1.461,50,0.266,51,0.835,66,1.129,83,0.086,85,0.308,86,1.99,92,2.354,97,0.901,106,0.135,160,2.514,165,0.583,178,1.272,183,1.556,187,0.521,189,2.847,207,1.895,227,0.856,265,0.81,270,1.245,273,3.515,317,0.007,318,0.007,319,0.173,337,0.948,352,3.959,381,0.869,383,5.469,385,5.071,386,2.912,388,3.328,391,5.071,392,1.849,393,1.992,429,2.597,430,1.374,448,2.514,449,1.723,458,2.431,573,1.443,865,2.597,873,2.912,875,2.912,877,1.723,1143,1.866,1265,5.243,1273,3.328,1280,4.812,1284,5.14,1297,3.711,1329,3.016,1358,3.711,1359,4.269,1366,6.074,1367,3.959,1390,3.959,1617,2.912,1991,4.269,2072,4.269,2089,3.711,2130,2.8,2143,3.505,2303,4.685,2304,6.981,2305,6.001,2306,6.001,2307,4.685,2308,4.685,2309,4.685,2310,6.034,2311,5.245,2312,4.685,2313,7.217,2314,7.384,2315,7.217,2316,4.685,2317,4.685,2318,6.001,2319,4.685,2320,4.685,2321,6.001,2322,4.685,2323,6.001,2324,4.685,2325,4.269,2326,4.685,2327,6.001,2328,4.685,2329,4.269,2330,4.685,2331,4.685,2332,6.001,2333,4.685,2334,4.685,2335,4.685,2336,4.685,2337,4.685,2338,4.685,2339,4.685,2340,4.685,2341,6.001,2342,4.685,2343,7.507,2344,4.685,2345,4.685,2346,6.001,2347,4.685,2348,6.001,2349,4.685,2350,4.685,2351,4.685,2352,4.269,2353,4.685,2354,4.685,2355,4.685,2356,4.685,2357,4.685,2358,6.001,2359,4.685,2360,6.001,2361,4.685,2362,4.685,2363,4.685,2364,4.685]],["title/injectables/InkService.html",[429,1.665,1297,3.049]],["body/injectables/InkService.html",[0,0.196,3,0.08,4,0.069,5,0.058,7,0.069,8,1.213,16,0.943,18,0.739,19,0.01,20,0.458,21,0.13,22,0.992,24,1.577,50,0.246,51,0.811,66,1.373,83,0.08,85,0.419,86,2.036,92,2.175,97,0.833,106,0.125,160,3.058,165,0.561,178,1.211,183,1.893,187,0.517,189,2.71,202,0.787,207,2.139,227,1.165,258,0.833,265,0.79,270,1.15,273,3.428,317,0.007,318,0.007,319,0.164,352,4.817,381,0.864,383,5.194,385,4.817,386,2.69,388,3.074,391,5.386,392,1.756,393,1.981,429,2.466,430,1.269,448,2.322,449,1.592,458,2.958,573,1.333,865,2.931,873,2.69,875,2.69,877,1.592,1143,2.27,1265,4.991,1273,4.049,1280,4.581,1284,5.143,1297,4.515,1329,3.632,1358,4.515,1359,5.194,1366,6.09,1367,3.657,1390,5.386,1617,2.69,1991,5.194,2072,3.944,2089,4.515,2130,3.407,2143,3.238,2303,4.328,2304,4.328,2305,5.7,2306,5.7,2307,4.328,2308,4.328,2309,4.328,2310,5.808,2311,5.048,2312,4.328,2313,7.038,2314,7.227,2315,7.038,2316,4.328,2317,4.328,2318,5.7,2319,4.328,2320,4.328,2321,5.7,2322,4.328,2323,5.7,2324,4.328,2325,3.944,2326,4.328,2327,5.7,2328,4.328,2329,3.944,2330,4.328,2331,4.328,2332,5.7,2333,4.328,2334,4.328,2335,4.328,2336,4.328,2337,4.328,2338,4.328,2339,4.328,2340,4.328,2341,6.773,2342,5.7,2343,7.477,2344,5.7,2345,4.328,2346,5.7,2347,6.773,2348,5.7,2349,5.7,2350,5.7,2351,5.7,2352,5.194,2353,5.7,2354,5.7,2355,5.7,2356,4.328,2357,4.328,2358,5.7,2359,4.328,2360,5.7,2361,5.7,2362,5.7,2363,4.328,2364,4.328,2365,2.932,2366,6.467,2367,7.231,2368,7.231,2369,6.467,2370,3.694,2371,7.231,2372,6.467,2373,4.911,2374,4.911,2375,4.911,2376,4.911,2377,4.911,2378,4.911,2379,4.911,2380,4.911,2381,4.911]],["title/components/InletComponent.html",[623,0.905,833,1.874]],["body/components/InletComponent.html",[0,0.17,3,0.069,4,0.06,5,0.05,7,0.06,8,1.101,16,0.973,18,0.741,19,0.01,20,0.426,21,0.146,22,0.994,24,1.403,50,0.411,51,0.619,52,0.926,58,2.6,67,1.634,73,1.499,81,1.67,83,0.069,85,0.42,86,1.78,88,2.477,94,0.262,97,1.229,114,1.375,134,1.771,164,0.888,178,1.222,187,0.456,189,1.903,191,1.416,197,2.984,227,0.685,240,1.675,258,1.29,265,0.753,280,1.187,281,1.465,317,0.006,318,0.006,319,0.149,342,3.017,344,2.638,348,1.454,381,0.581,427,0.762,430,1.099,437,1.871,446,2.52,505,1.719,516,0.997,558,1.92,569,3.458,570,2.97,573,1.155,623,1.393,624,1.719,625,2.177,626,2.012,627,1.946,628,2.012,629,2.117,631,2.885,632,3.85,633,3.734,635,2.685,637,2.685,647,2.304,654,3.111,660,3.417,661,5.309,690,1.719,691,1.719,696,4.209,697,4.621,714,2.97,718,2.97,761,2.444,819,2.52,825,2.012,826,1.771,827,2.012,828,2.012,829,1.771,830,2.012,831,1.826,832,2.012,833,3.111,834,2.012,835,1.884,836,2.012,837,1.826,838,2.012,839,1.826,840,2.012,841,2.012,842,1.826,843,2.012,844,1.826,845,2.012,846,1.826,847,2.012,848,1.884,849,2.012,850,1.826,851,2.012,852,1.771,853,2.012,854,1.826,855,2.012,856,2.012,857,1.826,858,1.277,859,2.012,860,1.826,861,1.771,862,1.771,863,2.012,864,1.884,865,1.622,866,2.012,890,2.663,964,2.754,1107,2.6,1277,2.43,1303,4.14,1304,2.97,1319,3.749,1329,2.6,1346,5.924,1391,3.675,1519,3.353,1607,4.013,2094,2.082,2095,3.092,2099,3.839,2103,2.331,2111,4.432,2116,3.216,2119,3.989,2124,2.97,2125,2.805,2128,2.54,2278,5.625,2310,4.715,2370,3.353,2382,4.254,2383,6.722,2384,5.871,2385,6.722,2386,5.924,2387,6.722,2388,6.722,2389,6.722,2390,5.871,2391,7.248,2392,7.248,2393,5.871,2394,5.871,2395,7.248,2396,5.924,2397,6.722,2398,6.722,2399,6.388,2400,5.871,2401,4.254,2402,4.254,2403,4.254,2404,4.254,2405,4.254,2406,4.254,2407,5.871,2408,4.254,2409,4.254,2410,4.254,2411,4.254,2412,5.871,2413,4.254,2414,5.871,2415,4.254,2416,5.871,2417,4.254,2418,5.399,2419,4.254,2420,4.254,2421,4.254,2422,4.254,2423,4.254,2424,4.254,2425,3.749,2426,3.749,2427,3.168,2428,4.254,2429,4.254,2430,4.254,2431,3.749,2432,3.749,2433,4.254,2434,4.254,2435,3.417,2436,3.749,2437,2.97,2438,4.254,2439,4.254,2440,3.417,2441,4.254,2442,3.749,2443,6.722,2444,4.254,2445,5.871,2446,5.871,2447,4.254,2448,4.254,2449,3.749,2450,4.254,2451,3.749,2452,5.398,2453,4.254,2454,5.871,2455,4.254,2456,4.254,2457,4.254,2458,4.254,2459,5.871,2460,5.871,2461,4.254,2462,4.254,2463,4.254,2464,3.749,2465,4.254,2466,5.924,2467,7.248,2468,4.254,2469,5.871,2470,7.863,2471,5.871,2472,5.871,2473,5.871,2474,5.663,2475,4.209,2476,4.372,2477,4.372,2478,4.254,2479,3.168,2480,4.254,2481,4.254,2482,4.254,2483,3.417,2484,2.158,2485,2.663,2486,3.168,2487,4.254,2488,3.216,2489,3.749,2490,6.722,2491,3.749,2492,4.254,2493,3.168,2494,2.805,2495,3.417]],["title/interfaces/Interlacement.html",[106,0.111,1294,2.392]],["body/interfaces/Interlacement.html",[3,0.09,4,0.077,5,0.065,7,0.077,16,0.601,19,0.01,20,0.382,21,0.131,50,0.276,51,0.956,63,0.96,69,1.748,83,0.135,85,0.498,94,0.274,97,0.936,106,0.204,163,0.847,164,0.677,165,0.699,178,1.164,183,1.616,187,0.404,202,0.601,207,1.537,229,2.66,270,1.882,273,3.556,317,0.007,318,0.007,319,0.177,337,0.985,341,1.79,348,2.384,355,1.499,358,3.153,366,4.028,381,0.546,400,1.325,427,0.992,458,2.525,546,3.025,586,2.801,589,1.938,623,1.445,625,2.586,818,3.19,819,2.994,822,4.164,873,3.025,876,3.251,877,2.604,880,1.759,883,4.907,902,3.789,903,3.456,988,2.904,1057,2.684,1062,1.427,1093,2.105,1294,3.821,1295,3.854,1324,4.787,1379,5.462,1457,3.854,1459,3.674,1569,5.195,1571,5.195,1573,5.533,1575,5.195,1577,5.195,1579,5.195,1581,5.195,1585,4.112,1586,2.702,1587,4.434,1588,4.434,1589,2.994,1590,3.821,1591,3.64,1592,3.854,1593,3.64,1594,4.434,1595,2.908,1596,3.025,1597,4.112,1598,4.434,1599,4.112,1600,3.456,1601,4.434,1602,4.434,1603,6.451,1604,6.451,1605,4.869,1606,3.298,1607,4.164,1608,5.602,1609,5.602,1610,5.195,1611,4.869,1612,5.602,1613,5.907,1614,5.602,1615,5.029,1616,5.602,1617,3.821,1618,4.434,1619,5.602,1620,5.602,1621,5.602,1622,4.434,1623,3.456,1624,4.112,1625,4.434,1626,4.112,1627,4.434,1628,4.112,1629,2.702]],["title/interfaces/InterlacementVal.html",[106,0.111,1628,3.252]],["body/interfaces/InterlacementVal.html",[3,0.09,4,0.077,5,0.065,7,0.077,16,0.6,19,0.01,20,0.382,21,0.131,50,0.276,51,0.956,63,0.96,69,1.748,83,0.135,85,0.49,94,0.273,97,0.935,106,0.204,163,0.847,164,0.676,165,0.699,178,1.163,183,1.614,187,0.404,202,0.6,207,1.536,229,2.104,270,1.881,273,3.555,317,0.007,318,0.007,319,0.177,337,0.984,341,1.788,348,1.885,355,1.893,358,3.151,366,4.026,381,0.756,400,1.324,427,0.992,458,2.523,546,3.023,586,2.799,589,1.937,623,1.445,625,2.585,818,3.189,819,2.992,822,3.293,873,3.023,876,3.32,877,2.603,880,1.758,883,4.906,902,3.673,903,3.454,988,3.448,1057,2.683,1062,1.426,1093,2.104,1294,3.023,1295,3.851,1324,4.785,1379,4.597,1457,4.867,1459,3.672,1569,5.192,1571,5.192,1573,5.532,1575,5.192,1577,5.192,1579,5.192,1581,5.192,1585,4.109,1586,2.7,1587,4.431,1588,4.431,1589,2.992,1590,3.82,1591,3.637,1592,3.851,1593,3.637,1594,4.431,1595,2.906,1596,3.023,1597,4.109,1598,4.431,1599,4.109,1600,3.454,1601,4.431,1602,4.431,1603,6.45,1604,6.45,1605,4.867,1606,3.297,1607,4.162,1608,5.599,1609,5.599,1610,5.192,1611,4.867,1612,5.599,1613,5.997,1614,5.599,1615,5.028,1616,5.599,1617,3.82,1618,4.431,1619,4.431,1620,4.431,1621,4.431,1622,4.431,1623,4.365,1624,5.192,1625,5.599,1626,5.192,1627,5.599,1628,5.192,1629,2.7]],["title/injectables/LayersService.html",[429,1.665,1299,3.507]],["body/injectables/LayersService.html",[0,0.262,3,0.107,4,0.092,5,0.078,7,0.092,8,1.455,16,0.946,19,0.01,21,0.107,24,1.473,50,0.328,83,0.107,94,0.262,117,3.328,163,0.818,202,0.714,227,1.329,258,1.113,265,0.767,281,1.568,317,0.008,318,0.008,319,0.197,341,2.514,429,2.958,430,1.697,440,3.328,448,3.105,449,2.129,693,6.228,1299,6.228,1370,6.228,1371,6.228,1610,5.775,2365,3.92,2496,6.566,2497,6.228,2498,7.755,2499,7.755,2500,8.253,2501,8.527,2502,8.527,2503,8.253,2504,7.755,2505,6.566,2506,6.566,2507,6.566,2508,8.7,2509,6.566]],["title/interfaces/LoadResponse.html",[106,0.111,1671,2.3]],["body/interfaces/LoadResponse.html",[3,0.085,4,0.074,5,0.062,7,0.074,16,0.571,18,0.536,19,0.01,20,0.394,21,0.138,50,0.408,51,0.936,57,1.145,61,2.078,63,1.175,67,1.879,69,1.142,73,1.506,74,2.49,81,1.087,82,0.985,83,0.144,85,0.522,91,2.436,94,0.269,100,1.879,106,0.223,155,1.399,165,0.701,183,1.536,187,0.519,207,2.078,230,1.39,270,1.229,317,0.007,318,0.007,319,0.172,336,2.844,337,0.936,339,1.946,341,1.701,348,1.793,355,2.306,381,0.739,400,1.26,402,2.764,424,1.544,427,1.083,437,1.879,516,1.229,520,3.315,623,1.399,629,2.078,659,2.811,672,2.991,685,2.839,719,3.728,877,1.701,878,3.305,880,1.323,945,2.308,1028,1.715,1033,2.133,1062,1.929,1142,1.746,1153,2.624,1296,3.089,1354,3.193,1387,3.557,1388,3.193,1539,3.557,1543,3.557,1547,3.557,1586,3.305,1589,2.252,1606,2.481,1630,2.764,1631,2.875,1632,2.875,1633,3.7,1634,3.7,1635,4.469,1636,2.662,1637,3.305,1638,2.662,1639,2.875,1640,2.875,1641,2.481,1642,3.7,1643,2.4,1644,2.875,1645,2.875,1646,2.4,1647,2.001,1648,2.764,1649,3.788,1650,2.764,1651,2.875,1652,2.875,1653,2.875,1654,2.764,1655,2.4,1656,2.481,1657,2.569,1658,2.875,1659,2.764,1660,3.933,1661,2.764,1662,2.764,1663,3.7,1664,2.481,1665,4.153,1666,4.469,1667,2.662,1668,2.764,1669,2.569,1670,2.875,1671,3.557,1672,2.764,1673,3.7,1674,2.764,1675,2.875,1676,2.875]],["title/interfaces/LoomConfig.html",[106,0.111,1693,3.049]],["body/interfaces/LoomConfig.html",[0,0.243,3,0.058,4,0.05,5,0.042,7,0.05,9,1.285,10,1.285,18,0.364,19,0.01,20,0.305,21,0.084,25,1.285,50,0.416,51,0.886,52,0.775,57,1.034,63,0.901,66,0.756,71,1.769,81,1.264,83,0.084,85,0.454,86,0.944,88,1.769,94,0.251,96,1.878,97,1.488,99,1.285,100,0.992,106,0.132,112,1.83,116,1.629,118,1.5,128,1.578,163,0.75,164,0.938,165,0.276,187,0.444,189,2.17,213,1.069,220,1.185,222,1.554,227,0.834,265,0.865,280,1.663,281,1.233,315,1.285,317,0.005,318,0.005,319,0.132,337,0.636,350,1.371,355,0.967,359,2.127,381,0.734,384,2.009,392,1.817,393,1.53,425,3.839,427,0.923,429,1.974,430,0.921,431,1.744,432,3.062,433,1.685,434,1.807,435,2.127,436,2.23,437,2.337,440,2.222,448,1.685,449,1.155,450,2.957,460,1.155,478,2.349,480,1.867,483,2.23,489,2.627,492,2.23,500,3.386,502,3.823,504,1.685,505,1.439,506,1.744,507,1.629,508,2.127,509,2.035,510,2.534,511,2.035,512,2.127,513,3.088,514,2.448,515,1.952,516,1.213,517,2.127,519,1.441,522,3.483,523,2.539,525,2.957,526,2.035,527,2.448,528,2.368,529,3.091,532,2.127,535,2.957,536,2.035,541,3.091,544,2.957,545,3.091,551,3.091,553,3.091,554,2.127,555,3.526,559,2.368,573,0.967,587,1.876,594,2.115,597,2.127,607,3.483,617,2.836,647,2.393,795,3.212,900,1.685,923,1.321,964,1.769,968,1.529,996,1.439,1011,1.578,1028,0.685,1057,1.25,1098,1.554,1125,2.617,1303,2.957,1321,4.245,1329,1.578,1418,2.487,1434,2.035,1438,1.807,1448,2.23,1458,2.127,1512,3.614,1549,2.349,1564,1.876,1567,3.241,1600,2.23,1629,2.534,1646,2.368,1677,2.487,1678,2.653,1679,3.996,1680,2.653,1681,2.653,1682,2.487,1683,2.349,1684,1.685,1685,2.653,1686,3.241,1687,2.487,1688,2.627,1689,2.127,1690,2.23,1691,2.487,1692,2.653,1693,4.257,1694,5.296,1695,3.413,1696,2.127,1697,2.653,1698,2.653,1699,3.855,1700,2.035,1701,2.23,1702,2.653,1703,2.23,1704,2.653,1705,2.653,1706,3.855,1707,2.487,1708,3.818,1709,2.653,1710,2.653,1711,2.653,1712,2.653,1713,3.413,1714,2.487,1715,2.653,1716,2.23,1717,2.653,1718,3.614,1719,2.653,1720,2.653,1721,2.653,1722,2.653,1723,2.487,1724,2.653,1725,2.487,1726,2.487,1727,2.487,1728,2.487,1729,2.349,1730,2.349,1731,2.487,1732,2.653,1733,2.653,1734,4.673,1735,2.653,1736,3.614,1737,2.487,1738,5.701,1739,2.653,1740,2.653,1741,2.653,1742,3.614,1743,3.855,1744,3.614,1745,3.855,1746,2.487,1747,5.525,1748,3.855,1749,3.614,1750,3.855,1751,2.487,1752,2.653,1753,2.487,1754,2.487,1755,2.487,1756,2.487,1757,3.614,1758,2.487,1759,2.487,1760,2.23,1761,3.396,1762,2.487,1763,2.487,1764,2.653,1765,2.487,1766,2.487,1767,3.855,1768,2.487,1769,3.614,1770,2.653,1771,2.487,1772,2.487,1773,2.653,1774,2.653,1775,2.487,1776,2.487,1777,2.349,1778,2.653,1779,2.653,1780,2.653,1781,2.653,1782,2.23,1783,2.653,1784,1.876,1785,2.035,1786,2.653,1787,3.818,1788,2.349,1789,2.653,1790,4.985,1791,2.487,1792,2.653,1793,2.653,1794,2.653,1795,2.653,1796,4.985,1797,4.542,1798,2.653,1799,2.487,1800,2.653,1801,2.653,1802,2.653,1803,2.653,1804,2.653,1805,3.855,1806,2.653,1807,3.855,1808,2.653,1809,3.855,1810,2.653,1811,3.855,1812,2.653,1813,3.855,1814,2.653,1815,2.653,1816,2.653,1817,2.653,1818,2.653,1819,3.614,1820,2.653,1821,2.653,1822,3.855,1823,2.653,1824,3.855,1825,2.653,1826,3.855,1827,2.653,1828,3.855,1829,2.653,1830,3.855,1831,2.653,1832,3.614,1833,2.653,1834,3.855,1835,2.653,1836,3.855,1837,2.653,1838,2.653,1839,2.653,1840,2.653,1841,2.653,1842,3.855,1843,3.855,1844,2.653,1845,2.653,1846,4.542,1847,3.668,1848,2.653,1849,2.487,1850,3.413,1851,4.688,1852,2.035,1853,2.653,1854,2.653,1855,2.653,1856,2.349,1857,2.653,1858,2.653,1859,2.653,1860,2.653,1861,2.653,1862,3.855,1863,2.127,1864,2.653,1865,2.653,1866,3.818,1867,2.653,1868,2.653,1869,2.653,1870,3.855,1871,2.653,1872,2.653,1873,2.127,1874,2.127,1875,2.653,1876,2.653,1877,2.653,1878,2.653,1879,2.653,1880,2.653,1881,3.855,1882,3.855,1883,3.855,1884,2.653,1885,2.653,1886,2.653,1887,2.653,1888,3.855,1889,2.653,1890,2.653,1891,2.653,1892,2.653,1893,2.653,1894,2.653,1895,2.653,1896,2.653,1897,2.653,1898,2.487,1899,2.653,1900,3.855,1901,2.653,1902,2.653,1903,3.091,1904,2.653,1905,2.653,1906,2.653,1907,2.653,1908,2.653,1909,2.127,1910,2.653,1911,2.653,1912,2.653,1913,2.653,1914,2.653,1915,2.653,1916,2.653,1917,2.653,1918,2.653,1919,2.653,1920,2.653,1921,2.653,1922,2.653,1923,2.653,1924,4.542,1925,2.487,1926,4.542,1927,2.653,1928,2.653,1929,2.653,1930,2.653,1931,2.653,1932,2.653,1933,2.653,1934,2.653,1935,2.653,1936,2.653,1937,2.653]],["title/interfaces/LoomTypes.html",[106,0.111,1266,2.879]],["body/interfaces/LoomTypes.html",[3,0.106,4,0.091,5,0.077,7,0.091,19,0.01,21,0.126,83,0.141,85,0.378,94,0.197,106,0.221,165,0.673,178,1.306,187,0.531,200,2.487,202,0.709,317,0.008,318,0.008,319,0.196,337,1.164,381,0.764,877,2.504,880,1.644,897,3.725,1263,4.3,1264,4.553,1265,5.383,1266,5.092,1267,4.3,1268,4.3,1269,4.553,1270,4.553,1271,4.553,1272,3.725,1273,4.083,1274,4.3,1275,4.553,1276,3.435,1277,3.725,1278,4.553,1279,4.553,1280,4.232,1281,5.392,1282,3.309,1283,4.553,1284,4.7,1285,4.3,1589,2.799,1701,4.083,2370,3.725,2510,6.522]],["title/injectables/MappingsService.html",[429,1.665,1686,2.734]],["body/injectables/MappingsService.html",[0,0.251,3,0.061,4,0.053,5,0.044,7,0.096,8,1.011,16,0.957,18,0.879,19,0.01,20,0.435,21,0.145,22,1.18,24,1.524,50,0.363,63,0.655,66,0.799,83,0.061,85,0.498,94,0.275,97,0.638,104,1.982,121,4.1,154,0.997,155,1.116,161,1.78,163,0.724,164,0.842,177,1.746,178,0.78,187,0.487,202,0.409,209,1.392,220,1.252,227,0.867,230,0.997,232,2.837,240,1.537,258,1.282,265,0.864,280,1.388,281,0.761,317,0.006,318,0.006,319,0.137,323,2.247,345,1.909,346,1.658,381,0.802,384,1.13,386,2.062,392,1.973,393,1.57,425,4.115,426,4.1,427,1.133,429,2.054,430,0.972,431,3.81,432,1.721,433,2.975,434,1.909,435,2.247,436,2.356,437,2.166,448,1.78,449,1.22,450,3.922,463,1.567,477,3.022,480,1.943,483,2.356,489,3.484,492,2.356,500,3.227,501,1.78,521,5.248,523,1.567,527,3.575,555,3.617,559,2.464,582,2.247,587,1.982,588,2.627,594,1.987,595,2.481,617,2.062,618,4.79,619,3.551,620,2.481,622,3.551,647,2.469,904,3.755,968,1.615,1023,1.721,1093,1.435,1125,1.615,1175,3.076,1276,1.982,1329,1.667,1549,2.481,1551,3.76,1683,2.481,1686,3.938,1688,3.687,1695,2.481,1707,4.391,1708,2.356,1713,3.551,1714,2.627,1716,2.356,1718,2.627,1723,2.627,1725,2.627,1726,2.627,1727,3.76,1728,2.627,1729,2.481,1730,2.481,1731,2.627,1734,5.557,1736,2.627,1737,2.627,1742,3.76,1744,3.76,1746,2.627,1749,3.76,1751,2.627,1753,2.627,1754,2.627,1755,2.627,1756,2.627,1757,2.627,1758,2.627,1759,2.627,1760,2.356,1761,3.835,1762,2.627,1763,3.76,1765,2.627,1766,3.76,1768,3.76,1769,2.627,1771,3.76,1772,4.391,1775,2.627,1776,2.627,1777,4.147,1785,2.149,1787,2.356,1788,4.527,2153,3.76,2365,2.247,2511,3.022,2512,6.866,2513,5.386,2514,5.386,2515,5.114,2516,4.747,2517,5.386,2518,5.386,2519,5.386,2520,5.386,2521,4.747,2522,4.747,2523,5.386,2524,4.747,2525,4.747,2526,4.747,2527,5.386,2528,5.386,2529,3.317,2530,5.386,2531,3.763,2532,5.386,2533,3.763,2534,5.386,2535,3.763,2536,5.386,2537,3.763,2538,5.386,2539,3.763,2540,5.386,2541,3.763,2542,3.763,2543,5.386,2544,3.763,2545,5.386,2546,3.763,2547,3.763,2548,3.763,2549,3.763,2550,5.386,2551,3.763,2552,5.386,2553,3.763,2554,3.763,2555,5.515,2556,3.763,2557,3.763,2558,3.763,2559,3.763,2560,3.763,2561,2.803,2562,3.763,2563,4.747,2564,3.763,2565,4.747,2566,3.317,2567,3.763,2568,3.763,2569,3.317,2570,3.763,2571,3.763,2572,3.317,2573,3.022,2574,3.763,2575,3.763,2576,3.763,2577,5.386,2578,3.763,2579,3.763,2580,3.763,2581,3.763,2582,3.763,2583,3.763,2584,3.763,2585,3.763,2586,3.763,2587,3.763,2588,3.763,2589,3.763,2590,3.763,2591,3.022,2592,3.763,2593,2.803,2594,3.763,2595,3.763,2596,3.763,2597,3.763,2598,5.386,2599,5.386,2600,3.763,2601,3.763,2602,3.763,2603,3.763,2604,3.763,2605,3.763,2606,3.763,2607,3.763,2608,3.763,2609,3.763,2610,3.763,2611,3.763,2612,5.386,2613,3.763,2614,3.763,2615,3.763,2616,3.317,2617,3.763,2618,3.763,2619,3.763,2620,3.763,2621,3.763,2622,3.763,2623,3.763,2624,3.763,2625,3.763,2626,3.763,2627,3.763,2628,3.763,2629,3.763,2630,3.763,2631,3.763,2632,7.783,2633,3.763,2634,5.386,2635,5.386,2636,5.386,2637,4.326,2638,4.326,2639,4.326,2640,4.326,2641,3.763,2642,3.022,2643,3.763,2644,3.763,2645,3.763,2646,3.763,2647,3.763,2648,3.763,2649,3.763,2650,3.763,2651,3.763,2652,3.763]],["title/directives/MarqueeComponent.html",[826,1.818,862,1.818]],["body/directives/MarqueeComponent.html",[0,0.241,3,0.098,4,0.085,5,0.071,7,0.085,8,1.385,16,0.975,18,0.618,19,0.01,20,0.303,21,0.142,22,0.83,24,1.421,50,0.415,51,0.913,52,1.606,83,0.098,94,0.25,114,1.729,154,2.253,163,0.945,178,1.232,187,0.35,191,2.013,258,1.252,265,0.598,317,0.008,318,0.008,319,0.188,336,3.214,342,3.073,343,4.216,344,2.897,345,3.068,346,2.272,393,1.687,427,1.034,430,1.563,460,2.583,505,2.444,631,3.419,632,3.168,633,3.073,647,3.396,654,3.561,659,3.316,701,4.866,826,3.073,861,2.518,862,3.073,865,2.815,1294,4.044,1320,5.33,1379,4.866,2484,3.745,2653,6.048,2654,7.381,2655,7.021,2656,7.311,2657,6.505,2658,6.048,2659,6.048,2660,6.505,2661,6.048,2662,6.048,2663,6.048,2664,7.381,2665,6.048,2666,6.048,2667,6.048,2668,6.048,2669,6.505,2670,6.048,2671,4.857,2672,5.33,2673,5.33,2674,5.33,2675,4.222]],["title/interfaces/MaterialTypes.html",[106,0.111,1267,2.879]],["body/interfaces/MaterialTypes.html",[3,0.106,4,0.092,5,0.077,7,0.092,19,0.01,21,0.126,83,0.141,85,0.379,94,0.248,106,0.221,165,0.674,178,1.307,187,0.529,200,2.498,317,0.008,318,0.008,319,0.197,337,1.169,381,0.766,877,2.51,880,1.651,897,3.741,1263,4.318,1264,4.572,1265,5.386,1266,4.318,1267,5.105,1268,4.318,1269,4.572,1270,4.572,1271,4.572,1272,3.741,1273,4.1,1274,4.318,1275,4.572,1276,3.45,1277,3.741,1278,4.572,1279,4.572,1280,4.242,1281,5.406,1282,3.323,1283,4.572,1284,4.709,1285,4.318]],["title/classes/Merge.html",[0,0.174,101,1.997]],["body/classes/Merge.html",[0,0.323,1,2.894,2,0.92,3,0.049,4,0.042,5,0.035,6,1.516,7,0.042,9,1.982,10,1.982,11,2.513,12,2.513,13,2.513,14,2.488,15,4.224,16,0.668,18,0.627,19,0.01,20,0.406,21,0.148,22,0.41,23,2.287,25,3.132,26,3.363,27,4.274,30,2.488,33,3.363,35,2.488,38,3.363,40,2.488,43,3.363,45,2.488,48,3.363,50,0.275,51,0.913,52,0.65,53,1.139,54,1.282,55,3.618,56,1.573,57,1.448,58,1.323,59,3.618,60,3.08,61,2.073,62,1.573,63,1.499,64,1.573,65,1.573,66,1.723,67,1.264,68,1.573,69,1.8,70,1.462,71,2.957,72,2.635,73,1.789,74,0.944,75,2.314,76,3.01,77,1.637,78,1.637,79,2.488,80,1.573,81,1.799,82,1.031,83,0.142,84,2.392,85,0.505,86,1.203,87,1.573,88,2.933,89,2.894,90,3.01,91,1.077,92,1.323,93,1.637,94,0.21,95,2.488,96,0.92,97,1.36,98,3.528,99,2.687,100,2.073,101,3.49,102,3.407,103,3.407,104,4.477,105,3.81,106,0.156,107,3.807,108,1.323,109,2.607,110,4.477,111,2.148,112,2.461,113,3.81,114,1.693,115,2.257,116,3.02,117,2.834,118,1.711,119,1.077,120,1.462,121,2.392,122,1.573,123,1.637,124,4.274,125,1.573,126,1.637,127,3.81,128,1.323,129,1.413,130,1.638,131,2.894,132,3.522,133,3.363,134,2.555,135,3.478,136,3.81,137,4.081,138,3.522,139,3.618,140,3.01,141,3.01,142,3.01,143,1.573,144,4.263,145,2.488,146,2.488,147,1.637,148,1.637,149,1.637,150,1.637,151,1.637,152,3.234,153,2.392,154,0.791,155,1.138,156,1.207,157,1.573,158,1.637,159,2.223,160,1.413,161,1.413,162,1.573,163,0.479,164,0.366,165,0.578,166,1.573,167,2.392,168,3.618,169,2.392,170,3.363,171,2.392,172,2.392,173,2.392,174,1.573,175,3.807,176,2.894,177,0.968,178,0.433,179,1.637,180,1.637,181,1.637,182,1.637,183,0.874,184,1.637,185,1.462,186,2.392,187,0.519,188,3.837,189,2.631,190,1.282,191,0.994,192,1.637,193,1.282,194,1.413,195,1.413,196,0.994,197,1.172,198,1.413,199,1.413,200,1.139,201,0.994,202,0.494,203,2.598,204,1.413,205,1.637,206,1.366,207,0.831,208,2.392,209,1.797,210,2.488,211,1.637,212,1.573,213,0.896,214,1.637,215,1.413,216,1.077,217,1.637,218,1.637,219,1.637,220,0.994,221,1.637,222,0.896,223,1.573,224,1.637,225,3.418,226,1.637,227,1.2,228,2.077,229,1.732,230,0.791,231,1.462,232,1.573,233,2.392,234,1.573,235,1.573,236,3.01,237,3.01,238,3.01,239,1.637,240,0.852,241,1.637,242,1.637,243,2.077,244,1.637,245,2.488,246,1.637,247,2.488,248,1.637,249,3.01,250,1.637,251,2.488,252,3.234,253,2.488,254,3.01,255,1.637,256,1.637,257,1.637,258,0.507,259,1.637,260,1.637,261,1.637,262,1.637,263,1.637,264,3.779,265,0.794,266,1.573,267,1.573,268,1.637,269,1.637,270,0.7,271,1.637,272,2.392,273,1.949,274,1.637,275,1.637,276,1.637,277,1.637,278,1.637,279,1.637,280,1.573,281,1.406,282,3.618,283,1.637,284,1.637,285,1.637,286,1.637,287,1.637,288,1.637,289,1.462,290,1.637,291,1.573,292,1.573,293,1.637,294,1.516,295,1.573,296,1.637,297,4.081,298,1.207,299,1.637,300,1.637,301,1.637,302,1.637,303,1.637,304,1.637,305,2.488,306,2.488,307,3.363,308,2.488,309,1.637,310,1.637,311,1.637,312,1.637,313,1.637,314,1.573,315,1.077,316,1.637,317,0.005,318,0.005,319,0.115,2676,5.494]],["title/modules/MixerModule.html",[2677,3.507,2678,3.252]],["body/modules/MixerModule.html",[0,0.231,3,0.094,4,0.081,5,0.068,19,0.01,50,0.46,83,0.094,317,0.008,318,0.008,430,1.497,624,3.46,690,3.46,691,3.46,829,3.565,831,3.676,833,3.676,835,3.793,837,3.676,839,3.676,842,3.676,844,3.676,848,3.793,850,3.676,852,2.993,854,3.676,862,3.565,1312,5.106,1441,4.501,1497,4.045,2678,6.93,2679,3.82,2680,4.74,2681,5.106,2682,5.106,2683,5.106,2684,5.978,2685,4.653,2686,5.794,2687,6.336,2688,6.336,2689,6.336,2690,6.336,2691,5.106,2692,7.189,2693,5.794,2694,5.794,2695,5.794,2696,5.794,2697,5.794,2698,5.794,2699,5.794,2700,5.794,2701,5.794,2702,5.794,2703,5.794,2704,5.794,2705,5.794,2706,5.794,2707,5.794,2708,5.794,2709,5.794,2710,5.794]],["title/components/MixerViewComponent.html",[623,0.905,837,1.874]],["body/components/MixerViewComponent.html",[0,0.154,3,0.063,4,0.103,5,0.046,7,0.089,8,1.028,16,0.973,18,0.819,19,0.01,20,0.418,21,0.143,22,1.099,24,1.507,50,0.347,52,0.839,67,1.525,81,0.799,83,0.063,85,0.402,88,2.179,94,0.257,97,1.432,112,1.157,114,1.284,134,1.605,155,0.799,163,0.804,164,0.472,187,0.369,190,1.655,191,1.283,227,0.621,258,1.402,265,0.631,280,0.779,281,1.108,317,0.006,318,0.006,319,0.139,336,2.94,342,3.515,343,2.202,344,3.282,345,3.866,346,2.346,347,4.014,348,2.179,350,1.839,366,3.358,424,0.881,430,0.996,446,2.352,458,2.506,516,0.903,558,1.839,573,1.047,595,3.613,623,1.321,624,1.558,625,2.032,626,1.823,627,1.763,628,1.823,629,1.073,631,2.736,632,3.812,633,3.697,635,2.506,637,2.506,645,2.871,647,2.878,653,4.346,654,2.98,659,1.605,690,1.558,691,1.558,701,3.613,708,4.591,718,2.691,761,2.89,784,2.871,793,4.346,818,3.354,819,2.736,822,2.302,824,3.641,825,1.823,826,1.605,827,1.823,828,1.823,829,1.605,830,1.823,831,1.655,832,1.823,833,1.655,834,1.823,835,1.707,836,1.823,837,2.98,838,1.823,839,1.655,840,1.823,841,1.823,842,1.655,843,1.823,844,1.655,845,1.823,846,1.655,847,1.823,848,1.707,849,1.823,850,1.655,851,1.823,852,1.605,853,1.823,854,1.655,855,1.823,856,1.823,857,1.655,858,1.157,859,1.823,860,1.655,861,1.605,862,1.605,863,1.823,864,1.707,865,1.47,866,1.823,890,3.431,923,1.43,945,1.873,949,2.502,964,2.179,1028,1.466,1098,1.157,1129,1.558,1307,5.12,1308,3.096,1309,5.575,1310,4.846,1311,2.691,1329,2.427,1386,3.096,1394,5.17,1395,4.748,1438,1.956,1439,3.096,1441,4.346,1444,4.401,1458,4.549,1459,4.014,1519,3.13,1647,2.09,1903,2.302,1943,4.829,1944,4.846,1965,4.748,2000,2.414,2004,2.691,2005,2.871,2014,4.081,2045,3.398,2059,3.096,2094,3.12,2095,3.657,2096,2.886,2099,3.13,2103,3.002,2106,5.12,2107,3.13,2108,2.691,2110,3.096,2111,4.577,2112,3.825,2114,2.031,2116,3.803,2119,3.015,2125,2.542,2126,4.748,2151,2.202,2474,4.081,2475,2.414,2476,2.871,2477,4.748,2483,5.12,2488,4.018,2493,2.871,2495,4.401,2675,2.691,2711,3.855,2712,5.48,2713,6.375,2714,5.48,2715,6.375,2716,7.62,2717,6.375,2718,5.48,2719,5.48,2720,4.829,2721,5.48,2722,5.48,2723,5.48,2724,6.942,2725,5.48,2726,6.942,2727,5.48,2728,6.375,2729,6.375,2730,3.855,2731,5.48,2732,3.855,2733,3.855,2734,3.855,2735,5.48,2736,3.855,2737,4.829,2738,3.855,2739,5.48,2740,3.855,2741,5.48,2742,3.855,2743,3.398,2744,5.48,2745,3.855,2746,3.855,2747,3.855,2748,3.855,2749,5.48,2750,3.855,2751,3.855,2752,3.855,2753,3.855,2754,3.855,2755,3.855,2756,3.855,2757,3.855,2758,3.855,2759,3.855,2760,3.855,2761,3.855,2762,3.855,2763,3.855,2764,3.855,2765,3.855,2766,4.401,2767,3.855,2768,4.829,2769,3.855,2770,3.096,2771,3.855,2772,5.48,2773,4.144,2774,3.855,2775,7.06,2776,3.855,2777,3.855,2778,3.855,2779,5.12,2780,5.48,2781,3.096,2782,3.398,2783,5.48,2784,5.48,2785,3.398,2786,3.855,2787,7.838,2788,3.855,2789,3.855,2790,3.855,2791,3.855,2792,3.855,2793,6.942,2794,3.855,2795,3.855,2796,3.855,2797,3.855,2798,3.855,2799,3.855,2800,3.855,2801,3.855,2802,5.48,2803,3.855,2804,3.855,2805,5.48,2806,3.855,2807,3.855,2808,3.855,2809,3.855,2810,3.855,2811,3.855,2812,3.855,2813,3.855,2814,3.855,2815,3.855,2816,3.855,2817,3.855,2818,3.398,2819,3.855,2820,3.855,2821,3.855,2822,3.855,2823,5.48,2824,3.855,2825,4.401,2826,3.398,2827,3.855,2828,3.855,2829,3.855,2830,3.855,2831,3.855,2832,3.855,2833,3.855,2834,3.855,2835,3.855,2836,3.855,2837,3.855,2838,3.855,2839,5.618,2840,5.48,2841,3.855,2842,3.398,2843,3.855,2844,5.48,2845,3.398,2846,5.48,2847,4.401,2848,3.096,2849,3.855,2850,3.855,2851,3.806,2852,3.398,2853,3.855,2854,3.855,2855,3.855,2856,3.855,2857,3.855,2858,3.398,2859,3.855]],["title/interfaces/NodeComponentProxy.html",[106,0.111,1648,2.3]],["body/interfaces/NodeComponentProxy.html",[3,0.084,4,0.073,5,0.061,7,0.073,16,0.565,18,0.531,19,0.01,20,0.393,21,0.143,50,0.407,51,0.935,57,1.138,61,2.068,63,1.167,67,1.867,69,1.131,73,1.496,74,2.568,81,1.076,82,0.975,83,0.144,85,0.522,91,2.42,94,0.268,100,1.867,106,0.222,155,1.39,165,0.7,183,1.52,187,0.522,202,0.565,207,2.068,230,1.376,270,1.217,317,0.007,318,0.007,319,0.17,336,3.129,337,0.927,339,1.926,341,1.684,348,1.775,355,2.3,381,0.735,400,1.247,402,2.736,424,1.699,427,1.08,437,1.867,516,1.217,520,3.309,623,1.39,629,2.068,659,2.793,672,2.971,685,2.836,719,3.714,877,1.684,878,3.284,880,1.31,945,2.539,1028,1.695,1033,2.119,1062,1.92,1142,1.729,1153,1.729,1296,3.069,1354,3.172,1387,3.534,1388,3.172,1539,3.534,1543,3.534,1547,3.534,1586,3.284,1589,2.229,1606,2.456,1630,2.736,1631,2.846,1632,2.846,1633,3.676,1634,3.676,1635,4.704,1636,2.636,1637,3.284,1638,2.636,1639,2.846,1640,2.846,1641,2.456,1642,3.676,1643,2.376,1644,3.676,1645,3.676,1646,3.069,1647,1.981,1648,3.534,1649,3.77,1650,2.736,1651,2.846,1652,2.846,1653,2.846,1654,2.736,1655,2.376,1656,2.456,1657,2.543,1658,2.846,1659,2.736,1660,3.914,1661,2.736,1662,2.736,1663,3.676,1664,2.456,1665,3.534,1666,4.455,1667,2.636,1668,2.736,1669,2.543,1670,2.846,1671,2.736,1672,2.736,1673,3.676,1674,2.736,1675,2.846,1676,2.846]],["title/interfaces/NodeMethods.html",[106,0.111,967,2.138]],["body/interfaces/NodeMethods.html",[0,0.329,3,0.05,4,0.043,5,0.036,7,0.043,8,1.049,16,0.505,19,0.01,20,0.232,21,0.075,24,0.828,50,0.28,57,0.787,75,1.023,82,1.319,83,0.125,85,0.454,94,0.243,97,1.329,106,0.118,109,2.246,114,0.72,118,1.375,130,1.674,155,0.637,163,0.705,164,0.569,165,0.518,177,2.767,178,0.672,187,0.499,196,1.023,201,1.023,209,1.987,213,0.922,222,1.869,240,0.877,258,1.056,265,0.808,281,1.351,317,0.005,318,0.005,337,0.548,346,2.058,381,0.776,384,2.007,392,1.982,393,1.758,400,1.605,424,0.702,427,1.017,449,0.996,460,2.019,463,1.931,475,3.898,480,1.108,519,2.091,558,1.649,578,2.864,589,1.629,594,1.466,685,2.647,759,1.241,858,1.392,880,0.775,898,1.875,920,3.615,921,1.504,922,2.836,923,2.309,924,3.406,925,3.567,926,2.836,927,3.567,928,3.567,929,2.836,930,3.803,931,4.04,932,2.354,933,3.567,934,3.113,938,3.902,945,1.91,946,2.836,947,2.736,948,3.338,949,2.864,950,3.16,954,3.637,955,1.559,956,1.559,957,1.559,958,1.559,959,1.559,960,1.504,961,1.405,962,3.517,963,1.405,964,1.91,965,3.338,966,2.271,967,2.736,968,2.673,969,1.405,970,1.361,971,2.055,972,2.836,973,2.836,974,1.559,975,2.836,976,2.354,977,2.836,978,1.559,979,1.559,980,3.16,981,1.559,982,2.836,983,2.354,984,1.559,985,1.559,986,1.559,987,1.559,988,3.359,989,2.354,990,1.559,991,1.559,992,2.354,993,1.559,994,1.559,995,2.055,996,1.875,997,1.559,998,1.504,999,1.559,1000,3.392,1001,3.976,1002,2.354,1003,4.094,1004,4.04,1005,3.392,1006,2.354,1007,2.354,1008,3.16,1009,3.16,1010,3.16,1011,2.758,1012,3.16,1013,3.16,1014,3.232,1015,1.559,1016,1.559,1017,2.836,1018,2.836,1019,2.836,1020,2.055,1021,1.559,1022,1.559,1023,1.405,1024,1.559,1025,1.504,1026,1.559,1027,1.559,1028,0.892,1029,1.559,1030,1.559,1031,3.232,1032,3.048,1033,1.967,1034,3.703,1035,4.219,1036,3.16,1037,2.354,1038,2.354,1039,3.16,1040,2.476,1041,1.559,1042,1.559,1043,1.559,1044,1.361,1045,1.559,1046,2.354,1047,2.354,1048,2.354,1049,2.354,1050,2.354,1051,2.354,1052,1.559,1053,1.559,1054,1.559,1055,1.559,1056,2.055,1057,1.079,1058,3.16,1059,1.559,1060,1.559,1061,1.504,1062,0.794,1063,1.504,1064,2.836,1065,2.354,1066,2.354,1067,3.16,1068,3.16,1069,2.354,1070,2.354,1071,2.354,1072,3.567,1073,2.354,1074,3.567,1075,1.559,1076,2.354,1077,2.354,1078,2.354,1079,3.585,1080,3.392,1081,3.567,1082,1.504,1083,1.559,1084,2.354,1085,3.703,1086,2.354,1087,3.567,1088,3.902,1089,2.354,1090,3.16,1091,3.812,1092,2.354,1093,1.769,1094,2.354,1095,2.354,1096,2.354,1097,2.271,1098,1.869,1099,2.354,1100,2.354,1101,2.354,1102,2.354,1103,2.836,1104,2.354,1105,2.836,1106,1.559,1107,3.113,1108,1.559,1109,1.559,1110,1.559,1111,1.559,1112,1.559,1113,1.405,1114,2.557,1115,1.559,1116,2.354,1117,2.354,1118,2.354,1119,2.354,1120,2.354,1121,2.354,1122,2.354,1123,2.354,1124,2.354,1125,1.319,1126,2.122,1127,1.319,1128,1.405,1129,1.241,1130,1.559,1131,1.361,1132,1.559,1133,1.361,1134,1.559,1135,1.559,1136,1.559,1137,1.559,1138,1.559,1139,1.559,1140,1.559,1141,2.055,1142,1.023,1143,1.079,1144,2.354,1145,2.271,1146,1.361,1147,1.559,1148,1.559,1149,1.559,1150,1.279,1151,1.559,1152,1.559,1153,1.023,1154,1.559,1155,1.559,1156,1.559,1157,2.354,1158,1.559,2860,3.072,2861,3.072]],["title/interfaces/NodeParams.html",[106,0.111,934,1.934]],["body/interfaces/NodeParams.html",[0,0.327,3,0.049,4,0.042,5,0.036,7,0.042,8,0.564,19,0.01,20,0.331,21,0.127,22,1.145,50,0.276,57,0.774,75,1.001,82,1.308,83,0.124,85,0.452,94,0.247,97,1.322,106,0.116,109,2.222,114,0.705,118,1.358,130,1.647,155,0.623,163,0.699,164,0.56,165,0.514,177,2.797,178,0.661,187,0.511,196,1.001,201,1.001,209,1.975,213,0.903,222,1.849,240,0.858,258,0.774,265,0.804,281,1.339,317,0.005,318,0.005,319,0.116,337,0.537,346,2.039,381,0.771,384,1.988,392,1.967,393,1.747,400,1.59,424,0.688,427,1.054,449,1.997,460,1.997,463,1.901,475,3.882,480,1.085,519,2.078,558,1.632,578,2.843,589,1.603,594,1.442,685,2.637,759,1.215,858,1.37,880,0.758,898,2.676,920,3.599,921,1.472,922,2.8,923,2.284,924,3.386,925,3.538,926,2.8,927,3.538,928,3.538,929,2.8,930,3.674,931,3.787,932,2.316,933,3.538,934,3.209,938,4.019,945,1.886,946,2.8,947,2.701,948,3.565,949,2.843,950,3.126,954,3.798,955,1.526,956,1.526,957,1.526,958,1.526,959,1.526,960,1.472,961,1.376,962,3.624,963,1.376,964,1.886,965,3.565,966,2.235,967,2.235,968,2.644,969,1.376,970,1.332,971,2.022,972,2.8,973,2.8,974,1.526,975,2.8,976,2.316,977,2.8,978,1.526,979,1.526,980,3.126,981,1.526,982,2.8,983,2.316,984,1.526,985,1.526,986,1.526,987,1.526,988,3.343,989,2.316,990,1.526,991,1.526,992,2.316,993,1.526,994,1.526,995,2.022,996,1.845,997,1.526,998,1.472,999,1.526,1000,3.361,1001,3.955,1002,2.316,1003,4.075,1004,4.019,1005,3.361,1006,2.316,1007,2.316,1008,3.126,1009,3.126,1010,3.126,1011,2.728,1012,3.126,1013,3.126,1014,3.209,1015,1.526,1016,1.526,1017,2.8,1018,2.8,1019,2.8,1020,2.022,1021,1.526,1022,1.526,1023,1.376,1024,1.526,1025,1.472,1026,1.526,1027,1.526,1028,0.878,1029,1.526,1030,1.526,1031,3.209,1032,3.016,1033,1.946,1034,3.676,1035,4.203,1036,3.126,1037,2.316,1038,2.316,1039,3.126,1040,2.444,1041,1.526,1042,1.526,1043,1.526,1044,1.332,1045,1.526,1046,2.316,1047,2.316,1048,2.316,1049,2.316,1050,2.316,1051,2.316,1052,1.526,1053,1.526,1054,1.526,1055,1.526,1056,2.022,1057,1.056,1058,3.126,1059,1.526,1060,1.526,1061,1.472,1062,0.777,1063,1.472,1064,2.8,1065,2.316,1066,2.316,1067,3.126,1068,3.126,1069,2.316,1070,2.316,1071,2.316,1072,3.538,1073,2.316,1074,3.538,1075,1.526,1076,2.316,1077,2.316,1078,2.316,1079,3.565,1080,3.361,1081,3.538,1082,1.472,1083,1.526,1084,2.316,1085,3.676,1086,2.316,1087,3.538,1088,3.879,1089,2.316,1090,3.126,1091,3.787,1092,2.316,1093,1.741,1094,2.316,1095,2.316,1096,2.316,1097,2.235,1098,1.849,1099,2.316,1100,2.316,1101,2.316,1102,2.316,1103,2.8,1104,2.316,1105,2.8,1106,1.526,1107,3.088,1108,1.526,1109,1.526,1110,1.526,1111,1.526,1112,1.526,1113,1.376,1114,2.524,1115,1.526,1116,2.316,1117,2.316,1118,2.316,1119,2.316,1120,2.316,1121,2.316,1122,2.316,1123,2.316,1124,2.316,1125,1.291,1126,2.088,1127,1.291,1128,1.376,1129,1.215,1130,1.526,1131,1.332,1132,1.526,1133,1.332,1134,1.526,1135,1.526,1136,1.526,1137,1.526,1138,1.526,1139,1.526,1140,1.526,1141,2.022,1142,1.001,1143,1.056,1144,2.316,1145,2.235,1146,1.332,1147,1.526,1148,1.526,1149,1.526,1150,1.252,1151,1.526,1152,1.526,1153,1.001,1154,1.526,1155,1.526,1156,1.526,1157,2.316,1158,1.526]],["title/components/NoteComponent.html",[623,0.905,839,1.874]],["body/components/NoteComponent.html",[0,0.164,3,0.093,4,0.058,5,0.049,7,0.081,8,1.078,16,0.967,18,0.768,19,0.01,20,0.408,21,0.142,22,1.032,24,1.477,50,0.376,52,0.898,67,1.599,73,1.282,81,1.482,83,0.067,88,2.26,94,0.265,97,1.275,114,1.346,134,2.977,154,1.522,163,0.606,165,0.32,178,1.036,191,1.373,216,2.073,227,0.664,240,2.041,258,1.382,265,0.654,280,0.834,281,1.162,317,0.006,318,0.006,319,0.146,336,2.809,342,2.753,343,3.282,344,2.595,345,2.093,346,2.036,347,3.483,348,2.444,350,1.894,351,4.27,366,2.173,384,1.238,398,3.598,424,0.943,427,0.928,430,1.066,440,1.77,446,2.466,516,0.966,519,1.148,558,1.894,573,1.12,623,1.37,624,1.667,625,2.131,626,1.951,627,1.887,628,1.951,629,1.148,631,2.838,632,3.838,633,3.723,635,2.628,637,2.628,645,4.28,651,5.064,653,4.478,654,3.07,655,5.951,659,3.585,669,5.064,670,5.8,672,3.449,680,5.578,690,1.667,691,1.667,701,3.789,708,2.582,759,1.667,761,2.977,784,4.28,793,2.582,814,5.437,815,3.767,817,3.313,818,3.271,819,2.838,820,3.313,822,3.43,824,4.085,825,1.951,826,1.717,827,1.951,828,1.951,829,1.717,830,1.951,831,1.77,832,1.951,833,1.77,834,1.951,835,1.827,836,1.951,837,1.77,838,1.951,839,3.07,840,1.951,841,1.951,842,1.77,843,1.951,844,1.77,845,1.951,846,1.77,847,1.951,848,1.827,849,1.951,850,1.77,851,1.951,852,1.717,853,1.951,854,1.77,855,1.951,856,1.951,857,1.77,858,1.238,859,1.951,860,1.77,861,1.717,862,1.717,863,1.951,864,1.827,865,1.573,866,1.951,876,2.255,887,4.617,904,3.43,923,1.53,949,1.619,964,2.26,1023,2.628,1175,3.282,1277,2.356,1280,2.26,1288,3.072,1294,2.26,1301,3.313,1302,3.635,1307,4.617,1308,3.313,1324,2.582,1325,4.925,1326,5.064,1327,3.635,1328,5.064,1329,2.929,1330,3.635,1331,4.28,1354,2.717,1365,5.064,1382,3.635,1389,3.072,1394,4.28,1419,3.635,1421,3.072,1422,3.635,1427,2.88,1434,3.282,1435,4.012,1436,5.064,1437,5.064,1438,2.916,1439,4.615,1440,5.064,1441,2.582,1442,3.635,1443,2.582,1444,3.313,1446,3.635,1447,3.635,1448,2.582,1451,3.635,1452,6.303,1638,4.253,1647,1.573,1664,2.717,1777,3.789,2040,3.635,2066,3.072,2094,4.183,2095,4.635,2096,4.293,2107,2.356,2114,2.173,2116,2.26,2119,2.717,2124,4.617,2125,2.719,2474,3.072,2475,2.582,2476,3.072,2477,3.072,2484,2.093,2485,2.582,2720,5.064,2737,5.064,2818,3.635,2825,3.313,2826,3.635,2842,5.064,2847,3.313,2851,3.43,2862,4.125,2863,6.613,2864,5.746,2865,6.303,2866,6.613,2867,6.613,2868,4.125,2869,6.613,2870,5.746,2871,4.125,2872,4.125,2873,5.746,2874,4.125,2875,4.125,2876,5.746,2877,4.125,2878,4.125,2879,4.125,2880,4.28,2881,5.746,2882,5.746,2883,4.125,2884,4.125,2885,4.125,2886,4.125,2887,4.125,2888,7.152,2889,4.125,2890,4.125,2891,4.125,2892,4.125,2893,4.125,2894,4.125,2895,4.125,2896,4.125,2897,4.125,2898,4.125,2899,4.125,2900,5.746,2901,4.125,2902,3.635,2903,4.125,2904,5.746,2905,5.746,2906,4.125,2907,4.125,2908,4.125,2909,4.125,2910,4.125,2911,4.125,2912,4.125,2913,4.125,2914,4.125,2915,4.125,2916,4.125,2917,4.125,2918,4.125,2919,4.125,2920,4.125,2921,4.125,2922,4.125,2923,4.125,2924,4.125,2925,4.125,2926,4.125,2927,4.125,2928,4.125,2929,4.125,2930,4.125,2931,4.125,2932,5.746,2933,5.746,2934,5.746,2935,4.125,2936,3.072,2937,3.072,2938,4.125,2939,5.746,2940,4.125,2941,4.125,2942,4.125,2943,4.125,2944,4.125,2945,4.125,2946,4.125,2947,4.125,2948,4.125,2949,4.125]],["title/classes/OnlineStatus.html",[0,0.174,1141,1.934]],["body/classes/OnlineStatus.html",[0,0.325,2,0.896,3,0.047,4,0.041,5,0.034,7,0.041,8,1.015,16,0.878,18,0.298,19,0.01,20,0.271,21,0.126,22,0.742,24,1.081,50,0.271,57,0.917,75,0.969,82,1.386,83,0.123,85,0.455,94,0.243,97,1.311,106,0.113,109,2.185,114,0.682,118,1.331,130,1.607,155,0.603,163,0.689,164,0.546,165,0.506,177,2.772,178,0.645,187,0.5,196,0.969,201,0.969,202,0.317,209,1.997,213,0.874,222,1.818,227,0.469,240,0.831,258,1.167,265,0.799,281,1.32,317,0.005,318,0.005,319,0.113,346,2.01,381,0.789,384,2.15,392,2.006,393,1.767,400,1.567,424,0.666,427,1.035,449,0.944,460,1.964,463,1.854,475,3.857,480,1.05,519,2.057,558,1.605,578,2.811,589,1.563,594,1.407,685,2.659,759,1.176,858,1.337,880,0.734,898,1.8,920,3.646,921,1.425,922,2.744,923,2.246,924,3.727,925,3.749,926,3.312,927,3.749,928,3.749,929,3.312,930,3.766,931,3.988,932,3.312,933,3.635,934,3.049,936,4.414,938,3.988,939,2.566,942,2.566,943,2.566,944,2.033,945,2.07,946,3.074,947,2.965,948,3.38,949,2.9,950,3.312,951,2.566,952,2.566,954,3.582,955,1.477,956,1.477,957,1.477,958,1.477,959,1.477,960,1.425,961,1.332,962,3.464,963,1.332,964,1.848,965,3.277,966,2.18,967,2.18,968,2.6,969,1.332,970,1.289,971,1.972,972,2.744,973,2.744,974,1.477,975,2.744,976,2.26,977,2.744,978,1.477,979,1.477,980,3.074,981,1.477,982,2.744,983,2.26,984,1.477,985,1.477,986,1.477,987,1.477,988,3.319,989,2.26,990,1.477,991,1.477,992,2.26,993,1.477,994,1.477,995,1.972,996,1.8,997,1.477,998,1.425,999,1.477,1000,3.312,1001,3.921,1002,2.26,1003,4.045,1004,3.988,1005,3.312,1006,2.26,1007,2.26,1008,3.074,1009,3.074,1010,3.074,1011,2.683,1012,3.074,1013,3.074,1014,3.173,1015,1.477,1016,1.477,1017,3.312,1018,2.744,1019,2.744,1020,1.972,1021,1.477,1022,1.477,1023,1.332,1024,1.477,1025,1.425,1026,1.477,1027,1.477,1028,0.857,1029,1.477,1030,1.477,1031,3.173,1032,2.965,1033,1.914,1034,3.635,1035,4.177,1036,3.074,1037,2.26,1038,2.26,1039,3.074,1040,2.395,1041,1.477,1042,1.477,1043,1.477,1044,1.289,1045,1.477,1046,2.26,1047,2.26,1048,2.26,1049,2.26,1050,2.26,1051,2.26,1052,1.477,1053,1.477,1054,1.477,1055,1.477,1056,1.972,1057,1.022,1058,3.312,1059,1.477,1060,1.477,1061,1.425,1062,0.752,1063,1.425,1064,2.744,1065,2.26,1066,2.26,1067,3.074,1068,3.074,1069,2.26,1070,2.26,1071,2.26,1072,3.493,1073,2.26,1074,3.493,1075,1.477,1076,2.26,1077,2.26,1078,2.26,1079,3.535,1080,3.312,1081,3.493,1082,1.425,1083,1.477,1084,2.26,1085,3.635,1086,2.26,1087,3.493,1088,3.843,1089,2.26,1090,3.074,1091,3.749,1092,2.26,1093,1.699,1094,2.26,1095,2.26,1096,2.26,1097,2.18,1098,1.818,1099,2.26,1100,2.26,1101,2.26,1102,2.26,1103,2.744,1104,2.26,1105,2.744,1106,1.477,1107,3.049,1108,1.477,1109,1.477,1110,1.477,1111,1.477,1112,1.477,1113,1.332,1114,2.474,1115,1.477,1116,2.26,1117,2.26,1118,2.26,1119,2.26,1120,2.26,1121,2.26,1122,2.26,1123,2.26,1124,2.26,1125,1.25,1126,2.037,1127,1.25,1128,1.332,1129,1.176,1130,1.477,1131,1.289,1132,1.477,1133,1.289,1134,1.477,1135,1.477,1136,1.477,1137,1.477,1138,1.477,1139,1.477,1140,1.477,1141,2.683,1142,1.482,1143,1.563,1144,3.074,1145,2.965,1146,1.972,1147,2.26,1148,2.26,1149,2.26,1150,1.854,1151,2.26,1152,2.26,1153,1.482,1154,2.26,1155,1.477,1156,3.074,1157,2.26,1158,1.477,2950,2.912,2951,2.912,2952,2.912,2953,2.912,2954,2.912,2955,2.912,2956,2.912]],["title/interfaces/OpClassifier.html",[106,0.111,176,2.3]],["body/interfaces/OpClassifier.html",[0,0.324,1,2.898,3,0.049,4,0.042,5,0.035,6,1.518,7,0.042,9,1.984,10,1.984,11,2.516,12,2.516,13,2.516,14,2.492,15,4.226,16,0.326,18,0.628,19,0.01,20,0.406,21,0.148,22,0.411,23,2.29,25,3.133,26,3.367,27,4.276,30,2.492,33,3.367,35,2.492,38,3.367,40,2.492,43,3.367,45,2.492,48,3.367,50,0.275,51,0.901,52,0.651,53,1.141,54,1.285,55,3.621,56,1.576,57,1.449,58,1.325,59,3.621,60,2.927,61,2.074,62,1.576,63,1.493,64,1.576,65,1.576,66,1.724,67,1.266,68,1.576,69,1.785,70,1.465,71,2.958,72,2.637,73,1.765,74,0.945,75,2.316,76,3.367,77,1.64,78,1.64,79,2.492,80,1.576,81,1.779,82,1.032,83,0.142,84,2.396,85,0.501,86,1.205,87,1.576,88,2.87,89,2.898,90,3.367,91,1.08,92,1.325,93,1.64,94,0.21,95,2.492,96,0.921,97,1.36,98,3.531,99,2.688,100,2.074,101,3.409,102,3.409,103,3.409,104,4.478,105,3.813,106,0.156,107,3.666,108,1.325,109,2.609,110,4.478,111,2.151,112,2.408,113,3.621,114,1.63,115,2.1,116,2.811,117,2.637,118,1.626,119,1.08,120,1.465,121,2.396,122,1.576,123,1.64,124,4.276,125,1.576,126,1.64,127,3.963,128,1.325,129,1.415,130,1.641,131,2.898,132,3.524,133,3.367,134,2.558,135,3.481,136,3.813,137,4.335,138,3.742,139,3.621,140,3.014,141,3.014,142,3.014,143,1.576,144,4.265,145,2.492,146,2.492,147,1.64,148,1.64,149,1.64,150,1.64,151,1.64,152,3.237,153,2.396,154,0.793,155,1.14,156,1.209,157,1.576,158,1.64,159,2.226,160,1.415,161,1.415,162,1.576,163,0.48,164,0.367,165,0.578,166,1.576,167,2.396,168,3.621,169,2.396,170,3.367,171,2.396,172,2.396,173,2.396,174,1.576,175,3.81,176,3.237,177,1.474,178,0.659,179,2.492,180,1.64,181,1.64,182,1.64,183,0.876,184,1.64,185,1.465,186,2.396,187,0.523,188,3.839,189,2.632,190,1.285,191,0.996,192,1.64,193,1.285,194,1.415,195,1.415,196,0.996,197,1.174,198,1.415,199,1.415,200,1.141,201,0.996,202,0.495,203,2.601,204,1.415,205,1.64,206,1.369,207,0.833,208,2.396,209,1.798,210,2.492,211,1.64,212,1.576,213,0.898,214,1.64,215,1.415,216,1.08,217,1.64,218,1.64,219,1.64,220,0.996,221,1.64,222,0.898,223,1.576,224,1.64,225,3.42,226,1.64,227,1.2,228,2.08,229,1.735,230,0.793,231,1.465,232,1.576,233,2.396,234,1.576,235,1.576,236,3.014,237,3.014,238,3.014,239,1.64,240,0.854,241,1.64,242,1.64,243,2.08,244,1.64,245,2.492,246,1.64,247,2.492,248,1.64,249,3.014,250,1.64,251,2.492,252,3.237,253,2.492,254,3.014,255,1.64,256,1.64,257,1.64,258,0.507,259,1.64,260,1.64,261,1.64,262,1.64,263,1.64,264,3.781,265,0.794,266,1.576,267,1.576,268,1.64,269,1.64,270,0.701,271,1.64,272,2.396,273,1.952,274,1.64,275,1.64,276,1.64,277,1.64,278,1.64,279,1.64,280,1.574,281,1.407,282,3.621,283,1.64,284,1.64,285,1.64,286,1.64,287,1.64,288,1.64,289,1.465,290,1.64,291,1.576,292,1.576,293,1.64,294,1.518,295,1.576,296,1.64,297,4.083,298,1.209,299,1.64,300,1.64,301,1.64,302,1.64,303,1.64,304,1.64,305,2.492,306,2.492,307,3.367,308,2.492,309,1.64,310,1.64,311,1.64,312,1.64,313,1.64,314,1.576,315,1.08,316,1.64,317,0.005,318,0.005,319,0.116,337,0.534]],["title/interfaces/OpComponentProxy.html",[106,0.111,1659,2.3]],["body/interfaces/OpComponentProxy.html",[3,0.084,4,0.073,5,0.061,7,0.073,16,0.563,18,0.529,19,0.01,20,0.423,21,0.141,50,0.406,51,0.934,57,1.377,61,2.315,63,1.164,67,1.862,69,1.126,73,1.492,74,2.565,81,1.072,82,0.971,83,0.144,85,0.527,91,2.414,94,0.268,100,1.862,106,0.222,155,1.386,165,0.7,183,1.514,187,0.522,202,0.563,207,2.064,230,1.37,270,1.567,317,0.007,318,0.007,319,0.17,336,2.828,337,0.923,339,1.918,341,1.677,348,1.768,355,2.298,381,0.734,400,1.242,402,2.725,424,1.529,427,1.079,437,1.862,516,1.212,520,3.306,623,1.537,629,2.064,659,2.785,672,2.963,685,2.834,719,3.708,877,1.677,878,3.63,880,1.304,945,2.287,1028,1.682,1033,2.114,1062,1.916,1142,1.722,1153,1.722,1296,3.061,1354,3.164,1387,3.525,1388,3.164,1539,3.525,1543,3.525,1547,3.525,1586,3.275,1589,2.22,1606,2.447,1630,2.725,1631,2.835,1632,2.835,1633,3.666,1634,3.666,1635,4.7,1636,2.625,1637,3.275,1638,2.625,1639,2.835,1640,2.835,1641,2.447,1642,4.063,1643,2.366,1644,2.835,1645,2.835,1646,2.366,1647,1.973,1648,2.725,1649,3.763,1650,2.725,1651,2.835,1652,2.835,1653,2.835,1654,2.725,1655,2.366,1656,2.447,1657,2.532,1658,3.666,1659,3.525,1660,3.907,1661,2.725,1662,2.725,1663,3.666,1664,2.447,1665,3.525,1666,4.449,1667,2.625,1668,2.725,1669,2.532,1670,2.835,1671,2.725,1672,2.725,1673,3.666,1674,2.725,1675,2.835,1676,2.835]],["title/components/OpHelpModal.html",[623,0.905,842,1.874]],["body/components/OpHelpModal.html",[0,0.201,3,0.082,4,0.071,5,0.059,7,0.071,8,1.233,16,0.954,18,0.748,19,0.01,20,0.431,21,0.144,22,0.69,24,1.173,50,0.388,51,0.818,52,1.095,57,1.241,61,2.16,63,1.143,66,1.396,69,1.43,72,2.821,73,1.466,81,1.711,83,0.082,85,0.381,94,0.198,97,0.853,112,1.972,114,1.539,116,3.006,153,3.462,154,2.055,163,0.818,178,1.236,187,0.478,191,1.675,202,0.715,227,0.81,243,2.302,252,2.651,258,1.114,280,1.328,317,0.007,318,0.007,319,0.167,381,0.65,386,3.601,424,1.502,430,1.3,437,1.829,446,2.821,501,3.108,516,1.179,558,2.055,569,2.821,573,1.366,623,1.516,624,2.033,625,2.437,626,2.38,627,2.302,628,2.38,629,1.401,631,3.141,632,3.908,633,3.79,635,3.006,637,3.006,647,2.872,654,3.33,690,2.033,691,2.033,761,2.736,815,2.651,825,2.38,826,2.095,827,2.38,828,2.38,829,2.095,830,2.38,831,2.16,832,2.38,833,2.16,834,2.38,835,2.229,836,2.38,837,2.16,838,2.38,839,2.16,840,2.38,841,2.38,842,3.33,843,2.38,844,2.16,845,2.38,846,2.16,847,2.38,848,2.229,849,2.38,850,2.16,851,2.38,852,2.095,853,2.38,854,2.16,855,2.38,856,2.38,857,2.16,858,1.51,859,2.38,860,2.16,861,2.095,862,2.095,863,2.38,864,2.229,865,1.919,866,2.38,1028,1.548,1303,4.18,1304,3.513,1310,5.417,1311,3.513,1329,2.229,1389,3.748,1647,2.506,1944,5.764,1960,4.435,1965,4.894,2000,3.15,2004,3.513,2005,3.748,2014,4.894,2094,2.463,2107,4.18,2114,2.651,2119,2.38,2128,3.004,2130,4.349,2131,5.109,2172,3.513,2435,5.278,2442,4.435,2479,3.748,2488,3.601,2936,3.748,2957,5.032,2958,6.572,2959,7.318,2960,6.572,2961,7.318,2962,8.049,2963,8.049,2964,7.318,2965,6.572,2966,5.032,2967,5.032,2968,5.032,2969,5.032,2970,5.032,2971,5.032,2972,5.032,2973,5.032,2974,5.032,2975,5.032,2976,5.032,2977,5.032,2978,5.032,2979,5.032,2980,5.032,2981,5.032,2982,5.032,2983,5.032,2984,5.032,2985,5.032,2986,5.032,2987,6.572,2988,6.572,2989,6.572,2990,5.792,2991,6.572,2992,6.572,2993,6.572,2994,6.572,2995,6.572,2996,6.572,2997,6.572,2998,5.792,2999,6.572,3000,5.278,3001,5.792,3002,5.792,3003,6.572,3004,3.748,3005,5.032,3006,5.032,3007,5.032,3008,6.572,3009,5.032]],["title/interfaces/OpInput.html",[106,0.111,506,2.138]],["body/interfaces/OpInput.html",[3,0.058,4,0.05,5,0.042,7,0.086,9,1.289,10,1.289,11,1.635,12,1.635,13,1.635,18,0.624,19,0.01,20,0.42,21,0.132,22,0.49,23,2.16,25,1.289,50,0.335,51,0.707,52,0.778,53,1.363,54,1.534,57,1.425,58,1.583,60,3.153,61,2.227,63,1.522,66,1.699,69,1.844,71,2.538,72,2.227,73,1.837,81,1.539,82,0.671,83,0.135,85,0.527,86,1.618,94,0.215,96,2.464,99,2.418,100,1.866,101,3.505,102,2.795,103,2.795,106,0.189,108,1.583,112,2.229,115,2.088,118,0.879,119,1.289,132,2.889,134,2.543,154,1.374,156,1.444,163,0.878,164,0.749,165,0.687,187,0.482,188,3.367,189,2.484,190,1.534,193,2.622,194,2.454,195,1.69,196,1.189,197,1.402,198,1.69,199,1.69,200,2.33,201,1.727,202,0.729,203,1.69,206,2.373,207,2.067,209,0.923,216,1.289,220,1.189,225,3.367,228,1.635,229,1.363,265,0.879,270,0.837,280,1.699,298,3.284,315,1.289,317,0.005,318,0.005,319,0.132,337,0.638,341,1.159,427,0.464,437,1.701,501,2.454,506,2.54,507,3.397,510,2.991,520,3.14,527,3.712,539,1.749,547,2.041,549,4.002,556,3.098,568,4.067,569,3.489,578,2.036,586,1.813,589,1.822,629,1.866,696,2.237,697,1.958,815,1.882,876,2.398,1020,1.583,1062,0.923,1098,1.073,1150,2.543,1282,1.813,1391,3.249,1443,2.237,1590,1.958,1629,1.749,1641,2.454,1643,2.373,1655,1.635,1679,4.434,1696,3.098,1700,2.964,1847,1.958,1940,2.495,2062,3.623,2114,1.882,2128,2.133,2129,2.356,2130,3.531,2131,3.623,2132,3.865,2133,3.865,2134,3.865,2135,3.865,2136,2.662,2137,2.662,2138,2.662,2139,3.623,2140,4.993,2141,3.865,2142,3.865,2143,3.421,2144,3.865,2145,3.865,2146,2.662,2147,2.662,2148,2.495,2149,3.865,2150,2.662,2151,2.041,2152,2.662,2153,2.495,2154,2.495,2155,4.55,2156,5.531,2157,5.531,2158,2.495,2159,4.55,2160,4.55,2161,4.55,2162,4.55,2163,2.662,2164,4.55,2165,2.662,2166,3.865,2167,3.865,2168,3.865,2169,3.865,2170,3.865,2171,6.353,2172,2.495,2173,2.662,2174,2.662,2175,2.662,2176,2.662,2177,2.662,2178,2.662,2179,2.662,2180,2.662,2181,2.495,2182,2.662,2183,2.495,2184,6.309,2185,2.662,2186,2.662,2187,2.662,2188,2.495,2189,2.662,2190,2.662,2191,2.662,2192,2.662,2193,2.662,2194,4.993,2195,2.662,2196,2.662,2197,2.662,2198,3.865,2199,5.846,2200,5.846,2201,5.846,2202,3.865,2203,2.662,2204,2.662,2205,2.662,2206,5.303,2207,5.707,2208,3.865,2209,2.662,2210,4.993,2211,2.662,2212,3.865,2213,3.865,2214,3.865,2215,3.865,2216,3.865,2217,3.865,2218,3.865,2219,3.865,2220,3.865,2221,3.865,2222,4.993,2223,3.865,2224,3.865,2225,2.662,2226,3.865,2227,2.662,2228,2.662,2229,3.865,2230,3.865,2231,2.662,2232,2.662,2233,3.865,2234,2.662,2235,2.662,2236,2.662,2237,2.662,2238,2.662,2239,2.662,2240,2.662,2241,2.356,2242,2.662,2243,2.662,2244,2.662,2245,2.662,2246,2.662,2247,2.662,2248,2.495]],["title/classes/OpSequencer.html",[0,0.174,431,2.138]],["body/classes/OpSequencer.html",[0,0.175,2,1.348,3,0.071,4,0.061,5,0.052,7,0.061,8,1.124,16,0.971,18,0.811,19,0.01,20,0.419,21,0.141,22,1.134,24,1.475,50,0.3,51,0.462,63,1.042,66,0.93,71,2.332,83,0.097,85,0.5,94,0.271,96,2.101,109,2.16,112,1.797,114,1.403,118,2.063,154,2.101,163,0.903,164,1.086,178,1.149,187,0.347,197,2.35,202,0.476,227,0.964,243,2.003,258,1.157,265,0.86,281,1.211,317,0.006,318,0.006,319,0.152,323,3.575,346,1.348,350,1.16,381,0.726,388,2.742,392,1.853,393,1.756,426,4.468,427,0.952,431,3.592,432,3.514,433,3.633,437,2.361,452,5.481,458,3.122,462,6.813,468,5.893,470,6.64,471,4.594,473,5.464,489,2.222,493,5.481,495,5.893,497,5.893,500,3.329,501,2.832,503,4.5,513,2.841,515,2.399,519,1.219,520,1.67,522,3.898,523,1.823,525,3.898,527,2.071,528,2.003,533,4.181,535,2.501,594,2.565,697,3.739,795,3.595,865,1.67,1143,1.537,1175,3.421,1646,2.739,1713,2.887,1729,5.451,1730,2.887,1760,2.742,1761,3.039,1863,2.614,1873,4.38,2077,4.81,2253,3.262,2352,3.517,2370,4.638,2451,3.86,2637,3.517,2638,4.81,2639,4.81,2640,5.481,2642,3.517,2880,4.46,3010,3.86,3011,5.989,3012,5.989,3013,5.989,3014,6.015,3015,6.015,3016,6.015,3017,6.015,3018,4.81,3019,5.278,3020,5.278,3021,5.278,3022,7.337,3023,5.278,3024,5.989,3025,5.989,3026,5.989,3027,5.989,3028,5.989,3029,6.825,3030,4.379,3031,4.379,3032,4.379,3033,4.379,3034,4.379,3035,4.379,3036,5.278,3037,4.379,3038,3.86,3039,4.379,3040,5.278,3041,4.379,3042,5.278,3043,6.466,3044,4.379,3045,4.379,3046,3.86,3047,4.379,3048,4.379,3049,4.379,3050,4.379,3051,4.379,3052,3.517,3053,4.379,3054,4.379,3055,4.379,3056,4.379,3057,4.379,3058,7.932,3059,4.379,3060,7.932,3061,4.379,3062,4.379,3063,7.683,3064,4.379,3065,4.379,3066,5.989,3067,4.379,3068,4.379,3069,4.379,3070,2.887,3071,5.989,3072,4.379,3073,4.379,3074,5.989,3075,4.379,3076,4.379,3077,4.379,3078,3.86,3079,4.379,3080,5.989]],["title/components/OpSequencerComponent.html",[623,0.905,846,1.874]],["body/components/OpSequencerComponent.html",[0,0.181,3,0.074,4,0.064,5,0.054,7,0.064,8,1.152,16,0.847,18,0.464,19,0.01,20,0.373,21,0.13,22,0.623,24,0.811,50,0.373,63,1.354,83,0.074,96,2.142,114,1.439,163,0.648,164,0.753,191,1.512,227,0.989,258,1.041,280,1.777,317,0.006,318,0.006,319,0.156,342,1.892,344,2.924,350,1.842,351,2.713,388,2.845,425,3.926,426,4.5,430,1.174,446,2.636,450,4.445,480,2.893,484,4.932,502,2.595,516,1.064,523,1.892,555,3.235,558,1.973,559,2.078,573,1.234,602,5.201,623,1.441,624,1.836,625,2.277,626,2.149,627,2.078,628,2.149,629,1.265,631,2.986,632,3.873,633,3.757,635,2.809,637,2.809,647,3.317,654,3.198,690,1.836,691,1.836,761,2.557,793,2.845,818,3.408,819,3.519,824,4.255,825,2.149,826,1.892,827,2.149,828,2.149,829,1.892,830,2.149,831,1.95,832,2.149,833,1.95,834,2.149,835,2.012,836,2.149,837,1.95,838,2.149,839,1.95,840,2.149,841,2.149,842,1.95,843,2.149,844,1.95,845,2.149,846,3.198,847,2.149,848,2.012,849,2.149,850,1.95,851,2.149,852,1.892,853,2.149,854,1.95,855,2.149,856,2.149,857,1.95,858,1.364,859,2.149,860,1.95,861,1.892,862,1.892,863,2.149,864,2.012,865,1.733,866,2.149,875,4.264,1282,3.116,1284,2.595,1519,3.507,1647,2.342,1688,3.948,1690,2.845,1691,3.172,1703,2.845,1785,4.445,1788,5.131,2094,3.926,2095,4.54,2096,3.235,2099,4.683,2101,3.384,2103,4.569,2107,3.973,2108,3.172,2113,4.574,2114,4.225,2116,4.921,2117,3.384,2119,3.944,2311,3.172,2475,5.437,2484,2.306,2485,2.845,2488,4.492,2494,5.406,2515,5.796,2561,3.384,2773,2.713,2851,3.666,2936,3.384,2937,3.384,3081,8.02,3082,6.441,3083,4.544,3084,6.956,3085,6.141,3086,5.984,3087,3.65,3088,4.544,3089,4.544,3090,4.544,3091,4.544,3092,4.544,3093,5.412,3094,5.412,3095,5.412,3096,5.984,3097,3.65,3098,3.65,3099,5.984,3100,5.984,3101,5.587,3102,4.005,3103,4.932,3104,4.932,3105,2.996,3106,4.005,3107,4.544,3108,5.412,3109,3.65,3110,6.063,3111,4.544,3112,5.412,3113,4.005,3114,4.544,3115,4.005,3116,6.861,3117,6.923,3118,3.65,3119,3.65,3120,3.65,3121,3.65,3122,4.932,3123,3.65,3124,7.122,3125,6.788,3126,5.587,3127,3.65,3128,3.65,3129,5.587,3130,3.65,3131,3.65,3132,3.65,3133,3.65,3134,3.65,3135,3.65,3136,3.65,3137,3.65,3138,3.65,3139,3.65,3140,3.65,3141,5.412,3142,4.544,3143,4.544,3144,4.544,3145,4.544,3146,4.544,3147,4.544,3148,4.544,3149,4.544,3150,4.544]],["title/interfaces/OperationClassification.html",[106,0.111,2248,3.049]],["body/interfaces/OperationClassification.html",[3,0.059,4,0.051,5,0.043,7,0.086,9,1.3,10,1.3,11,1.648,12,1.648,13,1.648,18,0.627,19,0.01,20,0.421,21,0.13,22,0.494,23,2.173,25,1.3,50,0.337,51,0.71,52,0.784,53,1.374,54,1.547,57,1.381,58,1.596,60,3.164,61,2.232,63,1.517,66,1.703,69,1.795,71,2.545,72,2.241,73,1.84,81,1.543,82,0.676,83,0.136,85,0.526,86,0.955,94,0.185,96,2.469,99,2.428,100,1.873,101,3.514,102,2.808,103,2.808,106,0.189,108,1.596,112,2.144,115,2.098,118,0.887,119,1.3,132,2.903,134,2.555,154,1.383,156,1.456,163,0.879,164,0.752,165,0.688,187,0.492,188,3.378,189,2.64,190,1.547,193,2.635,194,2.469,195,1.704,196,1.199,197,1.414,198,1.704,199,1.704,200,2.341,201,1.737,202,0.732,203,1.704,206,2.388,207,2.073,209,0.931,216,1.3,220,1.199,225,3.378,228,1.648,229,1.374,265,0.88,270,0.844,280,1.701,298,3.291,315,1.3,317,0.005,318,0.005,319,0.133,337,0.643,341,1.168,427,0.468,437,2.073,501,2.469,506,1.764,507,3.407,510,3.005,520,3.146,527,3.721,539,1.764,547,2.058,549,4.018,556,3.117,568,2.982,569,3.297,578,2.049,586,1.828,589,1.265,629,1.873,696,2.256,697,1.974,815,1.898,876,2.641,1020,1.596,1062,0.931,1098,1.082,1150,2.555,1282,2.649,1391,2.256,1443,2.256,1590,1.974,1629,1.764,1641,2.469,1643,2.388,1655,1.648,1679,4.787,1696,3.117,1700,2.982,1847,1.974,1940,2.516,2062,3.645,2114,1.898,2128,2.151,2129,2.376,2130,3.545,2131,3.645,2132,3.888,2133,3.888,2134,3.888,2135,3.888,2136,2.684,2137,2.684,2138,2.684,2139,2.516,2140,4.572,2141,2.684,2142,2.684,2143,2.376,2144,2.684,2145,2.684,2146,2.684,2147,2.684,2148,2.516,2149,3.888,2150,2.684,2151,2.058,2152,2.684,2153,2.516,2154,2.516,2155,4.572,2156,5.547,2157,5.547,2158,2.516,2159,4.572,2160,4.572,2161,4.572,2162,4.572,2163,2.684,2164,4.572,2165,2.684,2166,3.888,2167,3.888,2168,3.888,2169,3.888,2170,3.888,2171,6.362,2172,2.516,2173,2.684,2174,2.684,2175,2.684,2176,2.684,2177,2.684,2178,2.684,2179,2.684,2180,2.684,2181,2.516,2182,2.684,2183,2.516,2184,6.318,2185,2.684,2186,2.684,2187,2.684,2188,2.516,2189,2.684,2190,2.684,2191,2.684,2192,2.684,2193,2.684,2194,5.012,2195,2.684,2196,2.684,2197,2.684,2198,3.888,2199,5.86,2200,5.86,2201,5.86,2202,3.888,2203,2.684,2204,2.684,2205,2.684,2206,5.32,2207,5.722,2208,3.888,2209,2.684,2210,5.012,2211,2.684,2212,3.888,2213,3.888,2214,3.888,2215,3.888,2216,3.888,2217,3.888,2218,3.888,2219,3.888,2220,3.888,2221,3.888,2222,5.012,2223,3.888,2224,3.888,2225,2.684,2226,3.888,2227,2.684,2228,2.684,2229,3.888,2230,3.888,2231,2.684,2232,2.684,2233,3.888,2234,2.684,2235,2.684,2236,2.684,2237,2.684,2238,2.684,2239,2.684,2240,2.684,2241,2.376,2242,2.684,2243,2.684,2244,2.684,2245,2.684,2246,3.888,2247,3.888,2248,3.645]],["title/interfaces/OperationParam.html",[54,1.874,106,0.111]],["body/interfaces/OperationParam.html",[0,0.184,3,0.075,4,0.065,5,0.095,7,0.065,19,0.01,20,0.435,21,0.149,24,0.823,51,0.85,53,1.759,54,3.638,57,1.052,63,1.219,66,1.317,69,1.004,73,1.836,81,1.285,82,1.164,83,0.141,85,0.477,86,1.856,94,0.275,96,1.42,106,0.117,119,1.664,120,2.258,129,3.809,154,1.856,155,1.285,156,1.863,165,0.694,178,1.316,183,2.193,185,3.036,187,0.533,189,2.916,200,1.759,202,0.762,204,2.181,229,1.759,265,0.774,270,1.453,281,0.932,294,2.34,297,4.029,317,0.007,318,0.007,319,0.158,337,0.823,339,1.71,381,0.848,384,1.384,393,1.418,400,1.107,427,0.909,480,1.664,524,3.041,539,2.258,569,1.979,686,4.619,876,2.434,995,2.747,1028,1.442,1356,3.435,1458,2.753,1551,3.22,1564,3.267,1669,2.258,1847,2.527,1856,4.09,1970,5.999,2075,3.435,2118,6.38,2130,2.429,2241,3.041,2279,5.623,2370,4.842,3004,3.435,3105,5.589,3151,3.435,3152,4.065,3153,4.612,3154,4.612,3155,4.612,3156,3.704,3157,4.065,3158,4.065,3159,6.61,3160,3.704,3161,5.918,3162,4.065,3163,5.467,3164,5.22,3165,5.467,3166,3.435,3167,5.467,3168,5.467,3169,5.467,3170,4.619,3171,7.616,3172,4.065,3173,4.982,3174,4.065,3175,3.704,3176,4.065,3177,4.065,3178,4.065,3179,5.22,3180,5.582,3181,3.704,3182,3.435,3183,3.435,3184,4.982,3185,3.22,3186,3.22,3187,3.704,3188,3.704,3189,3.704,3190,3.704,3191,4.065,3192,4.065,3193,4.065,3194,4.065,3195,4.065,3196,5.467,3197,5.467,3198,5.467,3199,4.065,3200,4.065,3201,5.467,3202,4.065,3203,4.065,3204,4.065,3205,4.065,3206,3.704]],["title/interfaces/OperationProperties.html",[106,0.111,208,2.3]],["body/interfaces/OperationProperties.html",[0,0.324,1,2.898,3,0.049,4,0.042,5,0.035,6,1.519,7,0.042,9,1.985,10,1.985,11,2.517,12,2.517,13,2.517,14,2.493,15,4.226,16,0.326,18,0.628,19,0.01,20,0.406,21,0.147,22,0.755,23,2.291,25,3.133,26,3.367,27,4.276,30,2.493,33,3.367,35,2.493,38,3.367,40,2.493,43,3.367,45,2.493,48,3.367,50,0.275,51,0.901,52,0.652,53,1.142,54,1.285,55,3.621,56,1.577,57,1.468,58,1.326,59,3.621,60,2.927,61,2.075,62,1.577,63,1.493,64,1.577,65,1.577,66,1.742,67,1.266,68,1.577,69,1.785,70,1.466,71,2.968,72,2.638,73,1.765,74,0.946,75,2.316,76,3.367,77,1.64,78,1.64,79,2.493,80,1.577,81,1.779,82,1.032,83,0.142,84,2.396,85,0.508,86,1.205,87,1.577,88,2.871,89,2.898,90,3.015,91,1.08,92,1.326,93,1.64,94,0.225,95,2.493,96,0.922,97,1.36,98,3.531,99,2.689,100,2.075,101,3.409,102,3.409,103,3.409,104,4.478,105,3.813,106,0.156,107,3.666,108,1.326,109,2.609,110,4.478,111,2.151,112,2.408,113,3.621,114,1.63,115,2.1,116,2.811,117,2.638,118,1.626,119,1.08,120,1.466,121,2.396,122,1.577,123,1.64,124,4.276,125,1.577,126,1.64,127,3.813,128,1.326,129,1.416,130,1.641,131,2.898,132,3.525,133,3.367,134,2.559,135,3.482,136,3.813,137,4.084,138,3.525,139,3.621,140,3.015,141,3.015,142,3.015,143,1.577,144,4.265,145,2.493,146,2.493,147,1.64,148,1.64,149,1.64,150,1.64,151,1.64,152,3.237,153,2.396,154,0.793,155,1.14,156,1.21,157,1.577,158,1.64,159,2.227,160,1.416,161,1.416,162,1.577,163,0.48,164,0.367,165,0.578,166,1.577,167,2.396,168,3.621,169,2.396,170,3.367,171,2.396,172,2.396,173,2.396,174,1.577,175,3.811,176,2.898,177,0.971,178,0.434,179,1.64,180,1.64,181,1.64,182,1.64,183,0.876,184,1.64,185,1.466,186,2.898,187,0.519,188,3.839,189,2.632,190,1.953,191,1.514,192,2.493,193,1.953,194,1.416,195,1.416,196,0.996,197,1.175,198,1.416,199,1.416,200,1.142,201,0.996,202,0.495,203,3.291,204,1.416,205,1.64,206,1.369,207,0.833,208,2.898,209,1.869,210,3.621,211,1.64,212,1.577,213,0.899,214,1.64,215,1.416,216,1.08,217,1.64,218,1.64,219,1.64,220,0.996,221,1.64,222,0.899,223,1.577,224,1.64,225,3.421,226,1.64,227,1.2,228,2.081,229,1.735,230,0.793,231,1.466,232,1.577,233,2.396,234,1.577,235,1.577,236,3.015,237,3.015,238,3.015,239,1.64,240,0.854,241,1.64,242,1.64,243,2.081,244,1.64,245,2.493,246,1.64,247,2.493,248,1.64,249,3.015,250,1.64,251,2.493,252,3.237,253,2.493,254,3.015,255,1.64,256,1.64,257,1.64,258,0.508,259,1.64,260,1.64,261,1.64,262,1.64,263,1.64,264,3.782,265,0.794,266,1.577,267,1.577,268,1.64,269,1.64,270,0.701,271,1.64,272,2.396,273,1.953,274,1.64,275,1.64,276,1.64,277,1.64,278,1.64,279,1.64,280,1.574,281,1.407,282,3.621,283,1.64,284,1.64,285,1.64,286,1.64,287,1.64,288,1.64,289,1.466,290,1.64,291,1.577,292,1.577,293,1.64,294,1.519,295,1.577,296,1.64,297,4.083,298,1.21,299,1.64,300,1.64,301,1.64,302,1.64,303,1.64,304,1.64,305,2.493,306,2.493,307,3.367,308,2.493,309,1.64,310,1.64,311,1.64,312,1.64,313,1.64,314,1.577,315,1.08,316,1.64,317,0.005,318,0.005,319,0.116,337,0.534]],["title/components/OpsComponent.html",[623,0.905,844,1.874]],["body/components/OpsComponent.html",[0,0.191,3,0.078,4,0.067,5,0.057,7,0.067,8,1.193,16,0.963,18,0.777,19,0.01,20,0.435,21,0.141,22,1.044,24,1.413,50,0.416,67,1.77,74,1.512,83,0.078,85,0.368,88,2.44,96,1.958,97,1.211,114,1.489,154,1.891,164,0.587,178,1.102,187,0.489,191,1.593,227,0.771,258,1.29,265,0.474,280,1.538,281,1.538,317,0.007,318,0.007,319,0.162,342,1.992,344,2.802,350,1.268,351,2.857,359,3.796,430,1.237,437,2.266,446,2.729,516,1.121,558,2.015,559,2.189,573,1.299,623,1.479,624,1.934,625,2.358,626,2.263,627,2.189,628,2.263,629,1.332,631,3.065,632,3.891,633,3.774,635,2.908,637,2.908,647,3.108,654,3.265,690,1.934,691,1.934,718,3.341,757,2.996,760,3.844,761,2.647,819,2.054,824,4.523,825,2.263,826,1.992,827,2.263,828,2.263,829,1.992,830,2.263,831,2.054,832,2.263,833,2.054,834,2.263,835,2.12,836,2.263,837,2.054,838,2.263,839,2.054,840,2.263,841,2.263,842,2.054,843,2.263,844,3.265,845,2.263,846,2.054,847,2.263,848,2.12,849,2.263,850,2.054,851,2.263,852,1.992,853,2.263,854,2.054,855,2.263,856,2.263,857,2.054,858,1.436,859,2.263,860,2.054,861,1.992,862,1.992,863,2.263,864,2.12,865,1.825,866,2.263,949,1.878,964,2.44,1028,1.523,1277,2.733,1303,4.523,1304,3.341,1309,6.11,1310,5.311,1311,3.341,1329,3.507,1395,5.318,1425,3.341,1519,2.733,1647,2.723,1874,2.857,1909,2.857,1944,5.311,1965,5.318,2000,2.996,2004,3.341,2005,3.564,2010,3.844,2014,4.735,2059,3.844,2094,3.495,2095,4.008,2096,3.349,2099,4.078,2103,2.622,2107,4.523,2108,3.341,2110,3.844,2111,3.155,2112,3.341,2113,3.564,2116,3.484,2119,3.007,2151,2.733,2188,3.341,2418,5.735,2427,3.564,2436,4.218,2479,3.564,2485,2.996,2488,3.484,2489,5.604,2773,3.796,2845,4.218,2851,2.857,2936,3.564,2937,4.735,3018,5.107,3093,5.604,3094,5.604,3099,3.844,3101,5.107,3108,5.604,3109,5.107,3110,4.439,3207,4.786,3208,7.14,3209,6.358,3210,6.358,3211,7.14,3212,7.14,3213,6.358,3214,6.358,3215,6.358,3216,6.358,3217,6.358,3218,4.786,3219,6.358,3220,4.786,3221,4.786,3222,6.358,3223,4.786,3224,6.358,3225,4.786,3226,6.358,3227,4.786,3228,4.786,3229,4.786,3230,4.786,3231,4.786,3232,7.14,3233,4.786,3234,4.786,3235,4.786,3236,4.786,3237,4.786,3238,6.358,3239,4.786,3240,4.786,3241,4.786,3242,4.786,3243,4.786,3244,4.786,3245,4.786,3246,4.786,3247,6.358,3248,4.786,3249,4.786,3250,4.786,3251,4.786,3252,4.786,3253,4.786,3254,4.786,3255,4.786,3256,4.786,3257,4.786,3258,4.786,3259,4.786,3260,4.786,3261,4.786,3262,4.786,3263,6.358,3264,5.604,3265,6.358,3266,4.786,3267,7.14,3268,4.786,3269,4.786,3270,4.786]],["title/interfaces/PairedOp.html",[106,0.111,587,2.3]],["body/interfaces/PairedOp.html",[3,0.068,4,0.059,5,0.05,7,0.059,9,1.514,10,1.514,19,0.01,20,0.416,21,0.135,23,3.15,25,1.514,50,0.379,51,0.887,52,0.913,53,1.6,57,1.283,61,1.619,63,1.316,66,1.765,67,1.168,69,1.266,71,3.045,73,0.936,83,0.143,85,0.454,94,0.263,96,1.292,97,1.388,99,2.407,100,1.858,106,0.183,111,1.984,112,1.745,115,1.434,138,2.75,163,0.613,164,1.003,165,0.559,187,0.387,189,1.885,202,0.456,209,1.725,215,1.984,220,1.397,265,0.873,270,0.983,280,1.801,315,1.514,317,0.006,318,0.006,319,0.148,337,0.749,350,1.768,357,2.767,381,0.576,424,0.959,425,3.832,426,3.796,427,1.042,431,2.847,432,3.887,433,3.579,434,2.129,437,2.179,440,1.801,482,3.834,489,2.951,499,2.767,500,3.496,501,1.984,502,2.397,503,4.751,504,1.984,505,1.696,506,3.267,507,2.66,508,3.472,509,3.321,510,3.267,511,2.397,512,2.505,513,3.594,514,1.984,515,2.299,516,0.983,517,2.505,518,3.125,519,2.278,520,2.218,521,2.767,522,4.115,523,3.15,524,4.4,525,3.812,526,3.812,527,3.978,528,3.581,529,4.302,530,3.125,531,4.331,532,4.518,533,4.659,534,4.97,535,4.322,536,3.812,537,3.125,538,3.125,539,2.054,540,3.125,541,4.302,542,3.125,543,3.125,544,2.397,545,2.505,546,2.299,547,3.321,548,4.331,549,2.505,550,5.366,551,3.472,552,3.125,553,4.302,554,3.472,555,4.311,556,2.505,557,3.125,558,1.54,559,3.743,560,3.125,561,3.125,562,3.834,563,2.93,564,3.125,565,2.93,566,3.125,567,3.125,568,3.321,569,2.496,570,2.93,571,3.125,572,4.331,573,1.579,574,4.331,575,3.321,576,4.331,577,3.125,578,1.647,579,4.331,580,3.125,581,3.125,582,2.505,583,3.125,584,4.06,585,4.331,586,2.129,587,3.796,588,2.93,589,1.473,590,2.93,591,2.93,592,4.331,593,3.125,594,1.326,595,2.767,596,3.125,597,2.505,598,4.06,599,3.125,600,2.93,601,4.331,602,4.06,603,3.125,604,3.125,605,3.125,606,4.331,607,4.115,608,4.331,609,4.331,610,4.331,611,3.125,612,3.125,613,3.125,614,3.125,615,3.125,616,3.125,617,2.299,618,3.834,619,3.834,620,3.834,621,3.125,622,2.767]],["title/components/ParameterComponent.html",[623,0.905,850,1.874]],["body/components/ParameterComponent.html",[0,0.162,3,0.066,4,0.057,5,0.067,7,0.057,8,1.067,16,0.963,18,0.726,19,0.01,20,0.418,21,0.144,22,0.9,24,1.17,50,0.355,51,0.6,52,0.884,66,0.863,67,1.582,73,1.585,74,1.283,81,1.75,83,0.092,86,1.506,88,2.241,94,0.249,97,1.112,114,1.332,155,0.842,156,2.297,163,0.428,164,0.498,165,0.674,178,1.286,187,0.329,191,1.352,197,3.315,223,2.995,227,0.654,258,1.205,265,0.563,280,0.821,281,1.708,317,0.006,318,0.006,319,0.144,342,2.73,344,3.345,348,2.241,350,1.882,381,0.563,424,0.928,430,1.05,446,2.44,458,2.6,460,1.317,516,0.951,536,2.32,558,1.882,573,1.103,623,1.359,624,1.641,625,2.108,626,1.921,627,1.858,628,1.921,629,2.214,631,2.815,632,3.832,633,3.717,635,2.6,637,2.6,647,2.231,654,3.049,660,3.262,661,5.221,690,1.641,691,1.641,697,4.628,714,2.836,718,2.836,761,2.367,818,1.858,819,3.484,824,3.746,825,1.921,826,1.691,827,1.921,828,1.921,829,1.691,830,1.921,831,1.743,832,1.921,833,1.743,834,1.921,835,1.799,836,1.921,837,1.743,838,1.921,839,1.743,840,1.921,841,1.921,842,1.743,843,1.921,844,1.743,845,1.921,846,1.743,847,1.921,848,1.799,849,1.921,850,3.049,851,1.921,852,1.691,853,1.921,854,1.743,855,1.921,856,1.921,857,1.743,858,1.219,859,1.921,860,1.743,861,1.691,862,1.691,863,1.921,864,1.799,865,1.549,866,1.921,890,4.106,964,2.556,1028,0.781,1129,2.297,1277,4.773,1280,2.225,1374,3.58,1457,3.969,1459,2.995,1519,2.32,1596,2.225,1647,2.168,1656,1.921,1701,2.543,1874,2.425,2094,1.988,2095,3.455,2096,2.14,2099,2.32,2102,6.006,2103,3.115,2106,3.262,2107,3.247,2108,3.969,2111,2.678,2116,3.115,2118,3.025,2119,3.36,2124,2.836,2125,2.678,2130,2.995,2272,3.262,2278,5.667,2370,3.746,2386,5.78,2396,5.78,2418,5.268,2425,3.58,2426,3.58,2427,3.025,2431,3.58,2432,3.58,2449,6.83,2464,3.58,2466,6.591,2474,4.234,2475,2.543,2476,3.025,2477,3.025,2483,3.262,2484,2.061,2485,4.981,2486,4.234,2488,3.115,2493,3.025,2495,3.262,2743,3.58,2773,3.915,2839,5.01,2851,2.425,2858,3.58,2990,6.261,3001,3.58,3110,4.579,3161,2.836,3164,6.046,3166,6.046,3170,6.046,3175,3.262,3179,6.046,3180,3.025,3182,6.046,3183,6.046,3271,3.58,3272,6.559,3273,5.685,3274,5.685,3275,5.685,3276,6.559,3277,6.559,3278,6.559,3279,5.685,3280,4.062,3281,4.062,3282,4.062,3283,4.062,3284,4.062,3285,5.685,3286,4.062,3287,4.062,3288,5.685,3289,4.062,3290,4.062,3291,4.062,3292,4.062,3293,4.062,3294,4.062,3295,4.062,3296,4.062,3297,4.062,3298,4.062,3299,5.685,3300,5.685,3301,5.01,3302,4.062,3303,3.58,3304,4.062,3305,4.062,3306,5.685,3307,4.062,3308,4.062,3309,4.062,3310,3.58,3311,4.062,3312,5.685,3313,4.062,3314,7.75,3315,7.105,3316,4.062,3317,4.062,3318,4.062,3319,4.062,3320,4.062,3321,4.062,3322,4.062,3323,4.062,3324,4.062,3325,7.478,3326,7.105,3327,7.478,3328,4.062,3329,4.062,3330,4.062,3331,5.685,3332,4.062,3333,4.062,3334,5.685,3335,5.685,3336,5.685,3337,5.685,3338,4.062,3339,4.062,3340,3.58,3341,7.105,3342,4.062,3343,5.685,3344,5.01,3345,5.685,3346,4.062,3347,4.062,3348,4.062,3349,5.685,3350,5.685,3351,5.685,3352,4.062,3353,4.062]],["title/classes/Params.html",[0,0.174,57,0.74]],["body/classes/Params.html",[0,0.171,2,1.321,3,0.07,4,0.06,5,0.086,7,0.06,8,1.108,16,0.858,18,0.806,19,0.01,20,0.445,21,0.149,22,1.082,24,1.441,51,0.767,53,1.637,54,3.532,57,1.145,63,0.747,66,1.254,69,0.934,73,1.802,81,1.224,82,1.267,83,0.14,85,0.468,86,1.137,94,0.277,106,0.109,119,1.548,120,2.101,129,3.728,154,1.789,155,1.224,156,1.734,165,0.686,178,1.322,183,2.129,185,2.891,187,0.537,189,2.938,200,1.637,202,0.735,204,2.03,229,1.637,231,3.561,265,0.755,270,1.384,281,0.868,294,2.178,297,4.358,317,0.007,318,0.006,323,4.912,381,0.78,384,1.773,393,1.35,400,1.03,427,0.876,480,1.548,569,1.842,686,4.399,876,2.318,995,2.616,1028,1.136,1356,3.196,1458,2.562,1551,2.996,1564,3.557,1669,2.101,1847,2.351,1856,3.894,1970,5.872,2075,3.196,2118,6.527,2130,2.261,2241,2.83,2279,5.504,2370,4.613,3004,4.399,3105,5.748,3151,3.196,3156,3.447,3157,3.782,3158,3.782,3159,6.487,3160,3.447,3161,6.086,3162,3.782,3163,5.206,3164,5.681,3165,5.206,3166,3.196,3167,5.206,3168,5.206,3169,5.206,3170,4.399,3171,7.76,3172,3.782,3173,4.744,3174,3.782,3175,3.447,3176,3.782,3177,3.782,3178,3.782,3179,5.681,3180,6.128,3181,3.447,3182,3.196,3183,3.196,3184,4.744,3185,2.996,3186,2.996,3187,3.447,3188,3.447,3189,3.447,3190,3.447,3191,3.782,3192,3.782,3193,5.206,3194,5.206,3195,5.206,3196,6.412,3197,5.206,3198,5.206,3199,3.782,3200,3.782,3201,5.206,3202,5.206,3203,5.206,3204,3.782,3205,3.782,3206,3.447,3354,4.292,3355,4.292,3356,4.292,3357,4.292,3358,4.292,3359,4.292,3360,4.292,3361,4.292]],["title/interfaces/Pedal.html",[106,0.111,500,1.714]],["body/interfaces/Pedal.html",[0,0.254,3,0.063,4,0.054,5,0.045,7,0.054,19,0.01,20,0.347,21,0.124,22,0.751,50,0.381,51,0.672,63,0.67,66,0.818,82,0.723,83,0.104,85,0.441,94,0.209,97,1.243,106,0.098,117,2.351,118,1.707,154,1.021,155,0.798,163,0.732,164,0.781,177,2.25,178,0.794,187,0.479,193,1.654,202,0.419,209,1.415,216,1.976,220,1.282,222,2.404,227,0.882,265,0.863,280,0.779,281,1.647,289,1.886,317,0.006,318,0.006,319,0.139,337,0.688,350,1.451,353,3.824,355,2.292,368,2.201,381,0.631,384,1.644,386,4.294,392,1.487,393,1.791,400,1.315,427,1.085,429,2.089,430,0.996,440,3.27,448,1.822,449,1.776,460,1.776,463,2.28,471,2.412,500,3.438,516,2.022,519,1.073,558,1.688,573,1.487,594,2.755,681,3.611,858,2.404,898,2.213,920,3.609,923,1.429,924,3.074,930,1.763,934,2.426,948,3.664,949,2.501,961,1.763,962,3.485,963,1.763,964,2.178,965,1.763,969,1.763,970,1.707,988,2.28,996,2.213,1014,3.074,1028,1.41,1031,3.374,1033,2.407,1040,2.426,1044,1.707,1056,2.426,1062,1.415,1079,3.354,1093,1.47,1098,1.644,1107,2.822,1113,1.763,1114,3.585,1126,1.763,1127,2.351,1128,1.763,1129,2.213,1131,2.426,1133,2.426,1141,2.426,1143,1.353,1146,3.771,1153,2.44,1434,3.129,1438,1.955,1564,2.03,1565,2.541,1595,2.03,1615,3.429,1623,3.429,1684,1.822,1688,1.955,1689,3.27,1782,3.429,1863,3.805,1866,2.412,1873,2.3,1903,4.143,2437,3.824,2484,2.779,3185,3.824,3362,3.095,3363,5.574,3364,4.399,3365,4.399,3366,4.399,3367,4.399,3368,5.118,3369,5.574,3370,3.095,3371,4.399,3372,3.095,3373,3.095,3374,5.889,3375,6.119,3376,5.574,3377,5.574,3378,4.143,3379,5.574,3380,4.399,3381,5.574,3382,5.119,3383,5.889,3384,5.889,3385,5.574,3386,5.574,3387,3.095,3388,4.399,3389,4.399,3390,4.399,3391,3.095,3392,2.69,3393,6.294,3394,3.611,3395,5.118,3396,2.201,3397,2.111,3398,3.095,3399,3.095,3400,3.095,3401,3.095,3402,3.095,3403,3.095,3404,4.399,3405,4.399,3406,3.095,3407,4.399,3408,3.095,3409,3.429,3410,4.399,3411,3.095,3412,3.095,3413,5.118,3414,3.095,3415,3.095,3416,3.095,3417,3.095,3418,3.095,3419,3.095,3420,3.095,3421,3.095,3422,4.399,3423,3.095,3424,3.095,3425,3.095,3426,3.095,3427,4.399,3428,3.095,3429,3.095,3430,3.095,3431,3.095,3432,3.095,3433,3.095,3434,3.095,3435,3.095,3436,3.095,3437,3.095,3438,3.095,3439,3.095,3440,3.095,3441,3.095,3442,3.095,3443,3.095,3444,3.095,3445,3.095,3446,3.095,3447,3.095,3448,3.095,3449,3.095,3450,3.095,3451,3.095,3452,3.095,3453,3.095,3454,4.399,3455,5.118,3456,4.399,3457,4.399,3458,3.095,3459,4.399,3460,6.119,3461,5.574,3462,3.095,3463,3.095,3464,5.574,3465,4.399,3466,4.399,3467,4.399,3468,4.399,3469,4.399,3470,3.095,3471,3.095,3472,3.095,3473,3.095,3474,3.095,3475,5.118,3476,3.095,3477,3.095,3478,3.095,3479,4.399,3480,3.095,3481,3.095,3482,3.095,3483,3.095,3484,3.095,3485,3.095,3486,3.095,3487,3.095,3488,3.095,3489,3.095,3490,3.095,3491,3.095,3492,3.095,3493,3.095,3494,3.095,3495,3.095,3496,3.095,3497,3.095,3498,3.095,3499,3.095,3500,3.095,3501,3.095,3502,2.87,3503,3.095,3504,3.095,3505,3.095,3506,3.095,3507,3.095,3508,3.095,3509,3.095]],["title/classes/PedalConfig.html",[0,0.174,1695,2.879]],["body/classes/PedalConfig.html",[0,0.228,2,0.983,3,0.052,4,0.045,5,0.038,7,0.045,8,0.896,9,1.152,10,1.152,16,0.929,18,0.831,19,0.01,20,0.415,21,0.136,22,1.102,24,1.433,25,1.152,50,0.407,51,0.867,52,0.695,57,0.97,63,0.831,66,0.678,71,1.632,81,1.185,83,0.078,85,0.485,86,0.846,88,1.632,94,0.264,96,1.955,97,1.468,99,1.152,100,0.889,106,0.121,112,1.906,116,1.46,118,1.407,128,1.414,163,0.717,164,0.906,165,0.248,187,0.477,189,2.058,202,0.347,213,1.433,220,1.063,222,1.433,227,0.921,258,1.254,265,0.853,280,1.645,281,1.156,315,1.152,317,0.005,318,0.005,319,0.121,323,1.906,350,1.265,355,0.867,359,2.851,381,0.769,384,2.219,392,1.724,393,1.451,425,4.026,427,1.008,429,1.821,430,0.825,431,1.563,432,3.262,433,1.51,434,1.62,435,1.906,436,1.999,437,2.376,440,2.05,448,1.51,449,1.035,450,2.728,460,1.035,478,2.105,480,1.723,483,1.999,489,2.903,492,1.999,500,3.384,502,3.882,504,1.51,505,1.29,506,1.563,507,1.46,508,1.906,509,1.824,510,2.338,511,1.824,512,1.906,513,2.969,514,2.258,515,1.749,516,1.119,517,1.906,519,1.329,522,3.267,523,2.382,525,2.728,526,1.824,527,2.258,528,2.184,529,2.851,532,1.906,535,2.728,536,1.824,541,2.851,544,2.728,545,2.851,551,2.851,553,2.851,554,1.906,555,3.344,559,2.617,573,0.867,587,1.682,594,2.335,597,1.906,607,3.267,617,3.479,647,2.245,795,3.013,900,2.258,923,1.184,964,1.632,968,1.37,996,1.29,1011,1.414,1028,0.614,1057,1.676,1098,1.433,1125,2.725,1175,2.728,1303,2.728,1321,2.851,1329,1.414,1418,2.229,1434,1.824,1438,1.62,1448,1.999,1458,1.906,1512,3.334,1549,2.105,1564,1.682,1567,2.99,1600,1.999,1629,2.338,1646,2.184,1677,2.229,1678,2.378,1679,3.79,1680,2.378,1681,2.378,1682,2.229,1683,2.105,1684,1.51,1685,2.378,1686,2.99,1687,2.229,1688,2.423,1689,1.906,1690,1.999,1691,2.229,1692,2.378,1693,3.334,1694,3.557,1695,3.772,1696,1.906,1697,3.557,1698,3.557,1699,4.728,1700,2.728,1701,2.99,1702,3.557,1703,1.999,1704,2.378,1705,2.378,1706,4.728,1707,3.994,1708,4.255,1709,3.557,1710,4.261,1711,2.378,1712,3.557,1713,3.149,1714,2.229,1715,2.378,1716,1.999,1717,2.378,1718,3.334,1719,4.261,1720,2.378,1721,3.557,1722,2.378,1723,2.229,1724,4.728,1725,2.229,1726,2.229,1727,3.334,1728,2.229,1729,2.105,1730,2.105,1731,2.229,1732,2.378,1733,3.557,1734,5.426,1735,2.378,1736,3.334,1737,2.229,1738,5.506,1739,2.378,1740,2.378,1741,3.557,1742,3.334,1743,3.557,1744,3.334,1745,3.557,1746,2.229,1747,5.788,1748,3.557,1749,3.334,1750,3.557,1751,2.229,1752,3.557,1753,2.229,1754,2.229,1755,2.229,1756,2.229,1757,3.334,1758,2.229,1759,2.229,1760,1.999,1761,3.221,1762,2.229,1763,3.334,1764,2.378,1765,2.229,1766,3.334,1767,3.557,1768,3.334,1769,3.334,1770,2.378,1771,3.334,1772,2.229,1773,3.557,1774,2.378,1775,2.229,1776,2.229,1777,2.105,1778,2.378,1779,2.378,1780,2.378,1781,2.378,1782,1.999,1783,2.378,1784,1.682,1785,1.824,1786,2.378,1787,3.582,1788,2.105,1789,2.378,1790,4.728,1791,2.229,1792,2.378,1793,2.378,1794,2.378,1795,2.378,1796,4.728,1797,4.261,1798,2.378,1799,2.229,1800,2.378,1801,2.378,1802,2.378,1803,2.378,1804,2.378,1805,3.557,1806,2.378,1807,3.557,1808,2.378,1809,3.557,1810,2.378,1811,3.557,1812,2.378,1813,3.557,1814,2.378,1815,2.378,1816,2.378,1817,2.378,1818,2.378,1819,3.334,1820,2.378,1821,2.378,1822,3.557,1823,2.378,1824,3.557,1825,2.378,1826,3.557,1827,2.378,1828,3.557,1829,2.378,1830,3.557,1831,2.378,1832,3.334,1833,2.378,1834,3.557,1835,2.378,1836,3.557,1837,2.378,1838,2.378,1839,2.378,1840,2.378,1841,2.378,1842,3.557,1843,3.557,1844,2.378,1845,2.378,1846,4.261,1847,3.479,1848,2.378,1849,2.229,1850,3.149,1851,4.481,1852,1.824,1853,2.378,1854,2.378,1855,2.378,1856,2.105,1857,2.378,1858,2.378,1859,2.378,1860,2.378,1861,2.378,1862,3.557,1863,1.906,1864,2.378,1865,2.378,1866,3.582,1867,2.378,1868,2.378,1869,2.378,1870,3.557,1871,2.378,1872,2.378,1873,1.906,1874,1.906,1875,2.378,1876,2.378,1877,2.378,1878,2.378,1879,2.378,1880,2.378,1881,3.557,1882,3.557,1883,3.557,1884,2.378,1885,2.378,1886,2.378,1887,2.378,1888,3.557,1889,2.378,1890,2.378,1891,2.378,1892,2.378,1893,2.378,1894,2.378,1895,2.378,1896,2.378,1897,2.378,1898,2.229,1899,2.378,1900,3.557,1901,2.378,1902,2.378,1903,2.851,1904,2.378,1905,2.378,1906,2.378,1907,2.378,1908,2.378,1909,1.906,1910,2.378,1911,2.378,1912,2.378,1913,2.378,1914,2.378,1915,2.378,1916,2.378,1917,2.378,1918,2.378,1919,2.378,1920,2.378,1921,2.378,1922,2.378,1923,2.378,1924,4.261,1925,2.229,1926,4.261,1927,2.378,1928,2.378,1929,2.378,1930,2.378,1931,2.378,1932,2.378,1933,2.378,1934,2.378,1935,2.378,1936,2.378,1937,2.378,2516,4.209,2521,4.209,2522,4.209,2524,4.209,2525,4.209,2526,4.209,3510,4.776,3511,4.776,3512,4.776,3513,4.776,3514,3.193,3515,3.193,3516,3.193,3517,3.193,3518,3.193,3519,3.193,3520,3.193,3521,3.193,3522,3.193,3523,3.193,3524,3.193,3525,3.193,3526,3.193,3527,3.193,3528,3.193,3529,3.193,3530,3.193,3531,3.193]],["title/interfaces/PedalEvent.html",[106,0.111,503,2.879]],["body/interfaces/PedalEvent.html",[3,0.068,4,0.058,5,0.049,7,0.058,9,1.505,10,1.505,19,0.01,20,0.428,21,0.138,22,0.986,23,3.143,25,1.505,50,0.378,51,0.886,52,0.908,53,1.591,57,1.28,61,1.612,63,1.157,66,1.803,67,1.161,69,1.261,71,3.059,73,0.93,83,0.143,85,0.453,94,0.265,96,1.284,97,1.386,99,2.4,100,1.852,106,0.183,111,1.973,112,1.738,115,1.426,138,2.739,163,0.611,164,0.958,165,0.557,187,0.438,189,1.878,202,0.454,209,1.497,215,1.973,220,1.388,265,0.872,270,0.977,280,1.781,315,1.505,317,0.006,318,0.006,319,0.147,337,0.744,350,1.762,357,3.818,381,0.573,424,0.954,425,3.825,426,3.786,427,1.09,431,2.835,432,3.796,433,3.571,434,2.117,437,2.175,440,1.79,482,3.818,489,2.939,499,2.75,500,3.483,501,1.973,502,2.382,503,4.739,504,1.973,505,1.686,506,3.257,507,2.649,508,3.457,509,3.308,510,3.257,511,2.382,512,2.49,513,3.591,514,1.973,515,2.285,516,0.977,517,2.49,518,3.107,519,2.275,520,2.209,521,2.75,522,4.105,523,3.143,524,4.386,525,3.8,526,3.8,527,3.973,528,3.575,529,4.291,530,3.107,531,4.313,532,4.508,533,4.644,534,4.955,535,4.313,536,3.8,537,3.107,538,3.107,539,2.042,540,3.107,541,4.291,542,3.107,543,3.107,544,2.382,545,2.49,546,2.285,547,3.308,548,4.313,549,2.49,550,5.353,551,3.457,552,3.107,553,4.291,554,3.457,555,4.304,556,2.49,557,3.107,558,1.534,559,3.738,560,3.107,561,3.107,562,3.818,563,2.912,564,3.107,565,2.912,566,3.107,567,3.107,568,3.308,569,2.486,570,2.912,571,3.107,572,4.313,573,1.572,574,4.313,575,3.308,576,4.313,577,3.107,578,1.637,579,4.313,580,3.107,581,3.107,582,3.457,583,4.313,584,2.912,585,3.107,586,2.117,587,3.504,588,2.912,589,1.464,590,2.912,591,2.912,592,4.313,593,3.107,594,1.318,595,2.75,596,3.107,597,2.49,598,4.043,599,3.107,600,2.912,601,4.313,602,4.043,603,3.107,604,3.107,605,3.107,606,4.313,607,4.105,608,4.313,609,4.313,610,4.313,611,3.107,612,3.107,613,3.107,614,3.107,615,3.107,616,3.107,617,2.285,618,3.818,619,3.818,620,3.818,621,3.107,622,2.75]],["title/classes/PedalStatus.html",[0,0.174,1689,2.607]],["body/classes/PedalStatus.html",[0,0.25,2,1.154,3,0.061,4,0.053,5,0.044,7,0.053,8,1.008,16,0.935,18,0.383,19,0.01,20,0.269,21,0.139,22,0.514,24,0.669,50,0.378,51,0.662,63,0.652,66,0.796,82,0.703,83,0.102,85,0.437,94,0.162,97,1.23,106,0.095,117,2.305,118,1.686,154,0.993,155,0.777,163,0.723,164,0.769,177,1.215,178,0.778,187,0.42,193,1.609,202,0.408,209,1.622,216,1.937,220,1.248,222,2.387,227,1.011,265,0.86,280,0.758,281,1.637,289,1.835,317,0.006,318,0.006,319,0.136,350,1.423,353,2.617,355,2.281,368,2.141,381,0.621,384,1.612,386,4.136,392,1.458,393,1.777,400,0.9,427,1.032,429,2.048,430,0.969,440,3.114,448,1.773,449,1.741,460,1.741,463,2.236,471,2.347,500,3.41,516,1.968,519,1.043,558,1.662,573,1.458,594,2.731,681,2.472,858,2.387,898,2.17,920,3.72,923,1.39,924,1.66,930,1.715,934,2.379,948,3.703,949,2.463,961,1.715,962,3.637,963,1.715,964,2.342,965,1.715,969,2.457,970,1.66,988,2.236,996,1.515,1014,3.443,1028,1.396,1031,3.343,1033,2.456,1040,2.379,1044,1.66,1056,2.78,1062,1.388,1079,3.318,1093,1.43,1098,1.612,1107,2.78,1113,3.135,1114,3.556,1126,1.715,1127,2.305,1128,1.715,1129,2.17,1131,1.66,1133,2.78,1141,2.78,1143,1.316,1146,3.753,1153,2.414,1434,2.141,1438,1.902,1564,1.975,1565,2.472,1595,2.829,1615,3.363,1623,2.347,1684,1.773,1688,1.902,1689,3.747,1782,2.347,1863,3.747,1866,2.347,1873,2.238,1903,4.092,2437,3.75,2484,2.725,3185,3.75,3362,3.011,3363,4.314,3364,3.011,3365,3.011,3366,3.011,3367,3.011,3368,4.314,3369,3.011,3370,3.011,3371,4.314,3372,3.011,3373,4.314,3374,6.244,3375,6.063,3376,6.063,3377,6.063,3378,4.092,3379,5.505,3380,4.314,3381,6.063,3382,5.427,3383,6.244,3384,6.244,3385,6.063,3386,6.063,3387,5.041,3388,5.505,3389,5.505,3390,5.505,3391,4.314,3392,2.617,3393,6.244,3394,3.541,3395,5.041,3396,2.141,3397,2.054,3398,3.011,3399,3.011,3400,3.011,3401,3.011,3402,3.011,3403,3.011,3404,4.314,3405,4.314,3406,3.011,3407,4.314,3408,3.011,3409,3.363,3410,4.314,3411,3.011,3412,3.011,3413,5.041,3414,3.011,3415,3.011,3416,3.011,3417,3.011,3418,3.011,3419,3.011,3420,3.011,3421,3.011,3422,4.314,3423,3.011,3424,3.011,3425,3.011,3426,3.011,3427,4.314,3428,3.011,3429,3.011,3430,3.011,3431,3.011,3432,3.011,3433,3.011,3434,3.011,3435,3.011,3436,3.011,3437,3.011,3438,3.011,3439,3.011,3440,3.011,3441,3.011,3442,3.011,3443,3.011,3444,3.011,3445,3.011,3446,3.011,3447,3.011,3448,3.011,3449,3.011,3450,3.011,3451,3.011,3452,3.011,3453,3.011,3454,4.314,3455,5.041,3456,4.314,3457,4.314,3458,3.011,3459,4.314,3460,6.063,3461,5.505,3462,3.011,3463,3.011,3464,5.505,3465,4.314,3466,4.314,3467,4.314,3468,4.314,3469,4.314,3470,3.011,3471,3.011,3472,3.011,3473,3.011,3474,3.011,3475,5.041,3476,3.011,3477,3.011,3478,3.011,3479,4.314,3480,3.011,3481,3.011,3482,3.011,3483,3.011,3484,3.011,3485,3.011,3486,3.011,3487,3.011,3488,3.011,3489,3.011,3490,3.011,3491,3.011,3492,3.011,3493,3.011,3494,3.011,3495,3.011,3496,3.011,3497,3.011,3498,3.011,3499,3.011,3500,3.011,3501,3.011,3502,2.792,3503,3.011,3504,3.011,3505,3.011,3506,3.011,3507,3.011,3508,3.011,3509,3.011,3532,5.371,3533,3.749,3534,3.749,3535,3.749,3536,3.749,3537,3.749,3538,3.749,3539,3.749,3540,3.749,3541,3.749,3542,3.749,3543,3.749,3544,3.749,3545,3.749]],["title/injectables/PedalsService.html",[429,1.665,1688,2.216]],["body/injectables/PedalsService.html",[0,0.237,3,0.055,4,0.048,5,0.04,7,0.048,8,0.939,16,0.977,18,0.791,19,0.01,20,0.395,21,0.137,22,1.062,24,1.454,50,0.365,51,0.626,63,0.592,66,1.063,82,0.939,83,0.097,85,0.458,94,0.197,97,1.184,106,0.086,117,2.149,118,1.611,154,1.735,155,0.705,163,0.691,164,0.728,177,1.103,178,1.011,187,0.379,193,1.46,202,0.37,209,1.535,216,1.806,220,1.132,222,2.324,227,1.055,258,1.363,265,0.848,280,0.688,281,1.598,289,1.665,317,0.005,318,0.005,319,0.127,350,1.326,353,2.375,355,2.212,368,2.859,381,0.816,384,1.502,386,3.999,392,1.612,393,1.725,400,0.817,427,1.026,429,1.909,430,0.879,440,3.133,448,1.609,449,1.623,460,1.623,463,2.084,471,2.13,500,3.437,516,2.008,519,0.947,558,1.573,559,1.556,573,1.895,594,2.746,681,2.243,685,1.075,858,2.474,898,2.023,920,3.5,923,1.262,924,2.217,930,1.556,934,2.217,948,3.842,949,2.331,961,1.556,962,3.339,963,1.556,964,2.238,965,1.556,969,1.556,970,1.507,988,2.084,996,1.375,1014,2.901,1028,1.404,1031,3.233,1033,2.497,1040,2.217,1044,1.507,1056,2.217,1062,1.294,1079,3.193,1093,1.298,1098,1.502,1107,2.63,1113,1.556,1114,3.452,1126,2.717,1127,2.149,1128,1.556,1129,2.023,1131,1.507,1133,2.217,1141,2.217,1143,1.194,1146,3.72,1153,2.577,1175,2.859,1434,1.943,1438,1.726,1564,1.792,1565,2.243,1595,1.792,1615,3.134,1623,2.13,1684,2.809,1688,2.54,1689,3.546,1782,2.13,1863,3.546,1866,2.13,1873,3.546,1903,3.91,2365,2.031,2437,3.495,2484,3.013,2591,2.733,2616,2.999,3052,2.733,3185,3.495,3186,2.375,3362,2.733,3363,4.02,3364,2.733,3365,2.733,3366,2.733,3367,2.733,3368,4.77,3369,2.733,3370,2.733,3371,4.02,3372,2.733,3373,2.733,3374,6.061,3375,6.061,3376,5.863,3377,5.863,3378,3.91,3379,5.26,3380,4.02,3381,5.863,3382,5.269,3383,6.061,3384,6.061,3385,5.863,3386,5.863,3387,2.733,3388,5.26,3389,5.26,3390,5.26,3391,2.733,3392,2.375,3393,6.061,3394,3.3,3395,4.77,3396,1.943,3397,2.743,3398,2.733,3399,2.733,3400,2.733,3401,2.733,3402,2.733,3403,2.733,3404,4.02,3405,4.02,3406,2.733,3407,4.02,3408,2.733,3409,3.134,3410,4.02,3411,2.733,3412,2.733,3413,4.77,3414,2.733,3415,2.733,3416,2.733,3417,2.733,3418,2.733,3419,2.733,3420,2.733,3421,2.733,3422,4.02,3423,2.733,3424,2.733,3425,2.733,3426,2.733,3427,4.02,3428,2.733,3429,2.733,3430,2.733,3431,2.733,3432,2.733,3433,4.77,3434,4.77,3435,2.733,3436,2.733,3437,2.733,3438,2.733,3439,2.733,3440,2.733,3441,2.733,3442,2.733,3443,2.733,3444,2.733,3445,2.733,3446,2.733,3447,2.733,3448,2.733,3449,2.733,3450,2.733,3451,2.733,3452,2.733,3453,2.733,3454,4.02,3455,4.77,3456,4.02,3457,4.02,3458,2.733,3459,4.02,3460,5.863,3461,5.26,3462,2.733,3463,2.733,3464,5.26,3465,4.02,3466,4.02,3467,4.02,3468,4.02,3469,4.02,3470,2.733,3471,2.733,3472,2.733,3473,2.733,3474,2.733,3475,4.77,3476,2.733,3477,2.733,3478,2.733,3479,4.02,3480,2.733,3481,2.733,3482,2.733,3483,2.733,3484,2.733,3485,2.733,3486,2.733,3487,2.733,3488,2.733,3489,4.02,3490,2.733,3491,2.733,3492,4.77,3493,2.733,3494,2.733,3495,2.733,3496,2.733,3497,2.733,3498,2.733,3499,4.02,3500,2.733,3501,2.733,3502,3.728,3503,4.02,3504,2.733,3505,2.733,3506,5.26,3507,2.733,3508,4.02,3509,2.733,3546,5.006,3547,5.006,3548,5.006,3549,5.939,3550,5.006,3551,5.006,3552,5.006,3553,5.234,3554,5.006,3555,5.006,3556,5.006,3557,3.402,3558,3.402,3559,3.402,3560,3.402,3561,3.402,3562,3.402,3563,3.402,3564,3.402,3565,3.402,3566,3.402,3567,3.402,3568,3.402,3569,3.402,3570,3.402,3571,3.402,3572,3.402,3573,3.402,3574,3.402,3575,3.402,3576,3.402,3577,3.402,3578,3.402,3579,3.402,3580,3.402,3581,3.402,3582,3.402,3583,3.402,3584,3.402,3585,3.402,3586,3.402,3587,3.402,3588,3.402,3589,3.402,3590,3.402,3591,3.402,3592,3.402,3593,3.402,3594,3.402,3595,3.402,3596,3.402,3597,3.402,3598,3.402,3599,3.402,3600,3.402,3601,3.402,3602,3.402,3603,3.402,3604,3.402,3605,3.402,3606,3.402,3607,3.402,3608,3.402,3609,3.402,3610,3.402]],["title/classes/Pipe.html",[0,0.174,99,1.575]],["body/classes/Pipe.html",[0,0.324,1,2.896,2,0.92,3,0.049,4,0.042,5,0.035,6,1.517,7,0.042,9,1.983,10,1.983,11,2.514,12,2.514,13,2.514,14,2.49,15,4.225,16,0.668,18,0.628,19,0.01,20,0.406,21,0.148,22,0.41,23,2.288,25,3.133,26,3.365,27,4.275,30,2.49,33,3.365,35,2.49,38,3.365,40,2.49,43,3.365,45,2.49,48,3.365,50,0.275,51,0.919,52,0.651,53,1.14,54,1.283,55,3.619,56,1.575,57,1.449,58,1.324,59,3.619,60,2.925,61,2.074,62,1.575,63,1.499,64,1.575,65,1.575,66,1.724,67,1.265,68,1.575,69,1.785,70,1.463,71,2.957,72,2.636,73,1.764,74,0.944,75,2.315,76,3.012,77,1.638,78,1.638,79,2.49,80,1.575,81,1.805,82,1.031,83,0.142,84,2.394,85,0.501,86,1.204,87,1.575,88,2.933,89,2.896,90,3.012,91,1.078,92,1.324,93,1.638,94,0.21,95,2.49,96,0.92,97,1.36,98,3.529,99,2.753,100,2.074,101,3.408,102,3.408,103,3.408,104,4.477,105,3.811,106,0.156,107,3.808,108,1.324,109,2.608,110,4.477,111,2.149,112,2.503,113,3.961,114,1.694,115,2.257,116,3.021,117,2.636,118,1.625,119,1.078,120,1.463,121,2.394,122,1.575,123,1.638,124,4.275,125,1.575,126,1.638,127,3.811,128,1.324,129,1.414,130,1.639,131,2.896,132,3.523,133,3.365,134,2.556,135,3.479,136,3.811,137,4.082,138,3.523,139,3.619,140,3.012,141,3.012,142,3.012,143,1.575,144,4.264,145,2.49,146,2.49,147,1.638,148,1.638,149,1.638,150,1.638,151,1.638,152,3.235,153,2.394,154,0.792,155,1.139,156,1.208,157,1.575,158,1.638,159,2.224,160,1.414,161,1.414,162,1.575,163,0.479,164,0.366,165,0.578,166,1.575,167,2.394,168,3.619,169,2.394,170,3.365,171,2.394,172,2.394,173,2.394,174,1.575,175,3.808,176,2.896,177,0.969,178,0.433,179,1.638,180,1.638,181,1.638,182,1.638,183,0.875,184,1.638,185,1.463,186,2.394,187,0.519,188,3.838,189,2.631,190,1.283,191,0.995,192,1.638,193,1.283,194,1.414,195,1.414,196,0.995,197,1.173,198,1.414,199,1.414,200,1.14,201,0.995,202,0.494,203,2.6,204,1.414,205,1.638,206,1.367,207,0.832,208,2.394,209,1.797,210,2.49,211,1.638,212,1.575,213,0.897,214,1.638,215,1.414,216,1.078,217,1.638,218,1.638,219,1.638,220,0.995,221,1.638,222,0.897,223,1.575,224,1.638,225,3.419,226,1.638,227,1.2,228,2.078,229,1.733,230,0.792,231,1.463,232,1.575,233,2.394,234,1.575,235,1.575,236,3.012,237,3.012,238,3.012,239,1.638,240,0.853,241,1.638,242,1.638,243,2.078,244,1.638,245,2.49,246,1.638,247,2.49,248,1.638,249,3.012,250,1.638,251,2.49,252,3.235,253,2.49,254,3.012,255,1.638,256,1.638,257,1.638,258,0.507,259,1.638,260,1.638,261,1.638,262,1.638,263,1.638,264,3.78,265,0.794,266,1.575,267,1.575,268,1.638,269,1.638,270,0.7,271,1.638,272,2.394,273,1.95,274,1.638,275,1.638,276,1.638,277,1.638,278,1.638,279,1.638,280,1.573,281,1.406,282,3.619,283,1.638,284,1.638,285,1.638,286,1.638,287,1.638,288,1.638,289,1.463,290,1.638,291,1.575,292,1.575,293,1.638,294,1.517,295,1.575,296,1.638,297,4.082,298,1.208,299,1.638,300,1.638,301,1.638,302,1.638,303,1.638,304,1.638,305,2.49,306,2.49,307,3.365,308,2.49,309,1.638,310,1.638,311,1.638,312,1.638,313,1.638,314,1.575,315,1.078,316,1.638,317,0.005,318,0.005,319,0.115,3611,5.497]],["title/components/PlayerComponent.html",[623,0.905,852,1.818]],["body/components/PlayerComponent.html",[0,0.17,3,0.069,4,0.06,5,0.05,7,0.06,8,1.102,16,0.941,18,0.435,19,0.01,20,0.363,21,0.135,22,0.584,24,1.293,50,0.393,51,0.906,52,0.926,73,1.31,81,1.393,83,0.069,86,1.556,88,1.455,94,0.177,97,0.722,108,1.885,114,1.376,154,1.127,164,0.522,178,0.851,191,1.417,197,1.67,216,1.535,227,0.946,258,1.29,264,2.16,265,0.581,280,1.359,317,0.006,318,0.006,319,0.149,342,2.799,344,2.639,350,1.781,372,3.17,373,3.17,381,0.665,384,1.763,386,2.332,392,1.595,393,0.973,426,2.242,430,1.1,446,2.521,504,2.013,505,1.72,516,0.997,519,1.635,523,3.166,558,1.92,573,1.595,594,1.855,623,1.393,624,1.72,625,2.178,626,2.013,627,1.947,628,2.013,629,1.185,631,2.886,632,3.85,633,3.734,635,2.686,637,2.686,647,2.639,653,4.539,654,3.112,672,1.885,690,1.72,691,1.72,708,4.539,761,2.799,793,2.665,815,3.094,818,3.479,819,3.265,824,2.431,825,2.013,826,1.772,827,2.013,828,2.013,829,1.772,830,2.013,831,1.827,832,2.013,833,1.827,834,2.013,835,1.885,836,2.013,837,1.827,838,2.013,839,1.827,840,2.013,841,2.013,842,1.827,843,2.013,844,1.827,845,2.013,846,2.521,847,2.013,848,1.885,849,2.013,850,1.827,851,2.013,852,3.018,853,2.013,854,1.827,855,2.013,856,2.013,857,1.827,858,1.278,859,2.013,860,2.521,861,1.772,862,1.772,863,2.013,864,1.885,865,1.623,866,2.013,875,4.167,1282,2.16,1288,3.17,1321,2.541,1325,5.008,1329,1.885,1421,3.17,1424,3.751,1425,2.972,1426,3.751,1427,2.972,1428,3.419,1459,2.242,1519,3.354,1537,3.17,1550,4.717,1703,2.665,1785,4.344,1791,2.972,1819,2.972,1898,2.972,1944,4.1,2000,3.677,2094,3.549,2095,4.526,2096,2.242,2098,3.419,2099,4.14,2101,3.17,2103,3.218,2114,3.542,2116,4.874,2117,3.17,2119,3.719,2311,2.972,2475,5.418,2484,3.678,2485,4.21,2488,2.332,2494,5.015,2561,3.17,2773,3.506,2851,3.506,3082,3.419,3086,5.822,3087,3.419,3096,4.717,3097,5.4,3098,3.419,3100,5.4,3103,3.419,3104,5.4,3105,2.806,3106,3.751,3110,4.1,3115,3.751,3116,6.775,3117,6.843,3118,3.419,3119,3.419,3120,3.419,3121,3.419,3122,4.717,3123,3.419,3124,7.031,3125,6.775,3126,4.717,3127,3.419,3128,3.419,3129,5.4,3130,3.419,3131,3.419,3132,3.419,3133,3.419,3134,3.419,3135,3.419,3136,3.419,3137,3.419,3138,3.419,3139,3.419,3140,3.419,3141,3.751,3382,2.972,3409,2.665,3612,4.256,3613,6.724,3614,5.873,3615,5.926,3616,6.724,3617,5.926,3618,7.606,3619,6.724,3620,6.389,3621,7.249,3622,5.873,3623,4.256,3624,4.256,3625,4.256,3626,4.256,3627,4.256,3628,4.256,3629,5.873,3630,4.256,3631,4.256,3632,4.256,3633,4.256,3634,5.873,3635,4.256,3636,3.751,3637,3.419,3638,3.751,3639,3.751,3640,3.751,3641,3.751,3642,4.256,3643,5.873,3644,4.256,3645,4.256,3646,5.873,3647,5.873,3648,4.256,3649,4.256,3650,4.256,3651,4.256,3652,6.389,3653,5.176,3654,3.751,3655,5.176,3656,3.751,3657,3.751,3658,3.751,3659,3.751,3660,3.751,3661,3.751,3662,4.256,3663,4.256,3664,4.256,3665,4.256,3666,5.176,3667,3.751,3668,3.751,3669,3.751,3670,3.419,3671,4.256,3672,4.256,3673,4.256,3674,4.256,3675,4.256,3676,4.256,3677,4.256,3678,4.256,3679,4.256,3680,4.256,3681,2.972,3682,5.176,3683,3.751,3684,4.256,3685,4.256]],["title/modules/PlayerModule.html",[2677,3.507,2684,3.049]],["body/modules/PlayerModule.html",[0,0.26,3,0.106,4,0.091,5,0.077,19,0.01,50,0.445,83,0.106,280,1.318,317,0.008,318,0.008,430,1.685,573,1.771,846,3.779,852,3.799,857,3.779,858,1.957,860,3.779,1441,4.836,1497,4.553,2679,4.3,2680,5.092,2684,6.388,2685,5.238,2687,6.807,2688,5.748,2689,6.807,2690,6.807,2691,5.748,3082,5.238,3636,5.748,3637,5.238,3638,5.748,3686,5.748,3687,5.748,3688,5.748,3689,6.522,3690,7.724,3691,7.724,3692,5.748,3693,6.522,3694,5.748,3695,6.522]],["title/interfaces/PlayerOp.html",[106,0.111,432,1.997]],["body/interfaces/PlayerOp.html",[3,0.067,4,0.058,5,0.048,7,0.058,9,1.48,10,1.48,19,0.01,20,0.427,21,0.142,22,1.171,23,3.125,25,1.48,50,0.375,51,0.883,52,0.893,53,1.565,57,1.273,61,1.593,63,1.147,66,1.797,67,1.142,69,1.246,71,3.054,73,0.915,83,0.143,85,0.45,94,0.265,96,1.263,97,1.38,99,2.379,100,1.835,106,0.181,111,1.94,112,1.718,115,1.402,138,2.707,163,0.604,164,0.953,165,0.553,187,0.462,189,2.433,209,1.479,215,1.94,220,1.365,265,0.87,270,0.961,280,1.797,315,1.48,317,0.006,318,0.006,319,0.145,337,0.732,350,1.747,357,2.705,381,0.769,424,0.938,425,4.047,426,3.759,427,1.087,431,2.802,432,3.83,433,3.549,434,2.082,437,2.164,440,1.761,482,3.775,489,2.905,499,2.705,500,3.418,501,1.94,502,2.343,503,4.348,504,1.94,505,1.658,506,3.228,507,2.619,508,3.418,509,3.27,510,3.674,511,2.343,512,2.449,513,3.582,514,1.94,515,2.248,516,0.961,517,4.26,518,5.314,519,2.265,520,2.183,521,2.705,522,4.076,523,3.125,524,4.348,525,3.766,526,3.766,527,3.96,528,3.556,529,4.26,530,3.056,531,4.264,532,4.481,533,4.604,534,4.911,535,4.287,536,3.766,537,3.056,538,3.056,539,2.008,540,3.056,541,4.26,542,3.056,543,3.056,544,2.343,545,2.449,546,2.248,547,3.27,548,4.264,549,2.449,550,5.314,551,3.418,552,3.056,553,4.26,554,3.418,555,4.287,556,2.449,557,3.056,558,1.516,559,3.723,560,3.056,561,3.056,562,3.775,563,2.864,564,3.056,565,2.864,566,3.056,567,3.056,568,3.27,569,2.457,570,2.864,571,3.056,572,4.264,573,1.554,574,4.264,575,3.27,576,4.264,577,3.056,578,1.61,579,4.264,580,3.056,581,3.056,582,2.449,583,3.056,584,2.864,585,3.056,586,2.082,587,3.473,588,2.864,589,1.44,590,2.864,591,2.864,592,4.264,593,3.056,594,1.296,595,2.705,596,3.056,597,2.449,598,3.997,599,3.056,600,2.864,601,4.264,602,3.997,603,3.056,604,3.056,605,3.056,606,4.264,607,4.076,608,4.264,609,4.264,610,4.264,611,3.056,612,3.056,613,3.056,614,3.056,615,3.056,616,3.056,617,2.248,618,3.775,619,3.775,620,3.775,621,3.056,622,2.705]],["title/injectables/PlayerService.html",[429,1.665,1785,2.494]],["body/injectables/PlayerService.html",[0,0.229,3,0.052,4,0.045,5,0.038,7,0.045,8,0.903,9,1.163,10,1.163,16,0.939,18,0.796,19,0.01,20,0.403,21,0.133,22,1.046,24,1.39,25,1.163,50,0.408,51,0.924,52,0.702,57,0.976,63,1.001,66,0.685,71,1.644,81,1.192,83,0.078,85,0.452,86,0.854,88,1.644,94,0.246,96,1.772,97,1.47,99,1.163,100,0.898,106,0.122,112,1.727,116,1.475,118,1.416,128,1.428,154,1.274,163,0.72,164,0.909,165,0.25,178,0.697,187,0.43,189,2.069,202,0.523,213,0.968,220,1.073,222,1.444,227,0.927,258,1.214,265,0.854,280,1.628,281,1.29,315,1.163,317,0.005,318,0.005,319,0.122,350,1.274,355,1.562,359,1.925,381,0.676,384,1.915,392,1.732,393,1.458,425,3.732,427,0.929,429,1.835,430,0.833,431,1.579,432,3.122,433,1.525,434,1.636,435,1.925,436,2.019,437,2.294,440,2.47,448,1.525,449,1.046,450,3.898,460,1.046,478,2.126,480,1.735,483,2.019,489,2.441,492,2.019,500,3.372,502,3.644,504,1.525,505,1.303,506,1.579,507,1.475,508,1.925,509,1.842,510,2.355,511,1.842,512,1.925,513,3.174,514,2.275,515,1.767,516,1.495,517,1.925,519,1.339,522,3.287,523,2.656,525,2.748,526,1.842,527,2.275,528,2.201,529,2.872,532,1.925,535,2.748,536,1.842,541,2.872,544,2.748,545,2.872,551,2.872,553,2.872,554,1.925,555,3.361,559,2.918,573,1.562,587,1.699,594,2.343,597,1.925,607,4.089,617,2.636,647,3.058,795,3.031,900,1.525,923,1.196,964,1.967,968,1.384,996,1.944,1011,1.428,1028,0.62,1057,1.132,1098,1.444,1125,2.47,1175,2.748,1303,2.748,1321,2.872,1329,1.428,1418,2.251,1434,1.842,1438,1.636,1448,3.603,1458,2.872,1512,3.359,1549,2.126,1564,1.699,1567,3.012,1600,2.019,1629,2.355,1646,2.201,1677,2.251,1678,2.402,1679,3.809,1680,2.402,1681,2.402,1682,2.251,1683,2.126,1684,2.275,1685,2.402,1686,4.273,1687,2.251,1688,3.463,1689,1.925,1690,2.019,1691,2.251,1692,2.402,1693,4.018,1694,3.583,1695,3.172,1696,1.925,1697,2.402,1698,2.402,1699,3.583,1700,1.842,1701,2.019,1702,2.402,1703,2.019,1704,2.402,1705,2.402,1706,3.583,1707,2.251,1708,3.603,1709,2.402,1710,2.402,1711,2.402,1712,2.402,1713,3.172,1714,2.251,1715,2.402,1716,2.019,1717,2.402,1718,3.359,1719,2.402,1720,2.402,1721,2.402,1722,2.402,1723,2.251,1724,2.402,1725,2.251,1726,2.251,1727,2.251,1728,2.251,1729,2.126,1730,2.126,1731,2.251,1732,2.402,1733,2.402,1734,4.454,1735,2.402,1736,3.359,1737,2.251,1738,5.524,1739,2.402,1740,2.402,1741,2.402,1742,3.359,1743,3.583,1744,3.359,1745,3.583,1746,2.251,1747,5.332,1748,3.583,1749,3.359,1750,3.583,1751,2.251,1752,2.402,1753,2.251,1754,2.251,1755,2.251,1756,2.251,1757,4.018,1758,2.251,1759,2.251,1760,2.019,1761,3.237,1762,2.251,1763,2.251,1764,2.402,1765,2.251,1766,2.251,1767,3.583,1768,2.251,1769,3.359,1770,2.402,1771,2.251,1772,2.251,1773,2.402,1774,2.402,1775,2.251,1776,2.251,1777,2.126,1778,2.402,1779,2.402,1780,2.402,1781,2.402,1782,3.012,1783,3.583,1784,2.534,1785,2.748,1786,4.286,1787,4.644,1788,4.5,1789,2.402,1790,4.752,1791,2.251,1792,2.402,1793,2.402,1794,2.402,1795,2.402,1796,4.752,1797,4.286,1798,2.402,1799,2.251,1800,2.402,1801,2.402,1802,2.402,1803,2.402,1804,2.402,1805,3.583,1806,2.402,1807,3.583,1808,2.402,1809,3.583,1810,2.402,1811,3.583,1812,2.402,1813,3.583,1814,2.402,1815,2.402,1816,2.402,1817,2.402,1818,2.402,1819,3.359,1820,2.402,1821,2.402,1822,3.583,1823,2.402,1824,3.583,1825,2.402,1826,3.583,1827,2.402,1828,3.583,1829,2.402,1830,3.583,1831,2.402,1832,3.359,1833,2.402,1834,3.583,1835,2.402,1836,3.583,1837,2.402,1838,2.402,1839,2.402,1840,2.402,1841,2.402,1842,3.583,1843,3.583,1844,2.402,1845,2.402,1846,4.286,1847,3.74,1848,2.402,1849,2.251,1850,3.172,1851,4.72,1852,1.842,1853,2.402,1854,2.402,1855,2.402,1856,2.126,1857,2.402,1858,2.402,1859,2.402,1860,2.402,1861,2.402,1862,3.583,1863,1.925,1864,2.402,1865,2.402,1866,3.603,1867,2.402,1868,2.402,1869,2.402,1870,3.583,1871,2.402,1872,2.402,1873,3.436,1874,1.925,1875,2.402,1876,2.402,1877,2.402,1878,2.402,1879,2.402,1880,3.583,1881,3.583,1882,3.583,1883,3.583,1884,2.402,1885,2.402,1886,2.402,1887,2.402,1888,3.583,1889,2.402,1890,3.583,1891,2.402,1892,2.402,1893,2.402,1894,2.402,1895,2.402,1896,2.402,1897,2.402,1898,2.251,1899,3.583,1900,3.583,1901,2.402,1902,2.402,1903,4.075,1904,3.583,1905,2.402,1906,2.402,1907,2.402,1908,2.402,1909,1.925,1910,2.402,1911,3.583,1912,2.402,1913,2.402,1914,2.402,1915,2.402,1916,2.402,1917,2.402,1918,2.402,1919,2.402,1920,2.402,1921,2.402,1922,2.402,1923,2.402,1924,4.286,1925,2.251,1926,4.286,1927,2.402,1928,2.402,1929,2.402,1930,4.752,1931,2.402,1932,2.402,1933,2.402,1934,2.402,1935,2.402,1936,2.402,1937,2.402,2365,1.925,3023,2.842,3052,2.59,3553,5.072,3696,4.811,3697,4.811,3698,4.811,3699,4.811,3700,4.811,3701,4.811,3702,4.811,3703,4.811,3704,3.225,3705,3.225,3706,3.225,3707,3.225,3708,3.225,3709,3.225,3710,3.225,3711,3.225,3712,3.225,3713,3.225,3714,3.225,3715,3.225,3716,3.225,3717,3.225,3718,3.225,3719,3.225,3720,3.225,3721,3.225,3722,3.225,3723,3.225,3724,2.842,3725,3.225]],["title/interfaces/PlayerState.html",[106,0.111,513,1.818]],["body/interfaces/PlayerState.html",[3,0.101,4,0.087,5,0.073,7,0.087,19,0.01,20,0.31,21,0.139,50,0.375,51,0.97,52,1.349,66,1.71,83,0.139,85,0.359,94,0.268,106,0.213,119,2.236,163,0.79,165,0.664,187,0.485,202,0.674,265,0.741,317,0.008,318,0.008,319,0.19,337,1.106,350,2.332,355,1.683,381,0.797,393,1.417,500,3.455,505,2.504,513,3.665,514,2.931,516,1.452,519,1.725,523,3.119,528,2.835,573,2.391,575,4.971,902,2.835,1028,1.192,1057,2.63,1098,1.86,1143,2.176,1617,3.396,1684,2.931,1761,3.145,1784,3.946,1852,3.54,2273,3.54,3070,4.086,3378,3.7,3394,4.086,3396,3.54,3397,3.396,3726,4.616,3727,5.23,3728,5.23,3729,5.23,3730,4.327,3731,4.327,3732,4.086,3733,4.086,3734,4.327,3735,4.327,3736,4.327,3737,4.327,3738,4.616,3739,4.978]],["title/interfaces/PlayerState-1.html",[106,0.092,164,0.446,513,1.515]],["body/interfaces/PlayerState-1.html",[3,0.102,4,0.088,5,0.074,7,0.088,19,0.01,20,0.313,21,0.14,50,0.377,51,0.966,52,1.361,66,1.717,83,0.136,94,0.268,106,0.205,119,2.256,163,0.794,165,0.666,187,0.486,202,0.68,265,0.745,317,0.008,318,0.008,319,0.191,337,1.116,350,2.336,355,1.698,381,0.8,393,1.429,500,3.462,505,2.527,513,3.672,514,2.957,516,1.465,519,1.74,523,3.136,528,2.86,573,2.395,575,4.981,902,2.86,1028,1.203,1057,2.644,1098,1.877,1143,2.195,1617,3.426,1684,2.957,1761,3.173,1784,3.968,1852,3.571,2273,3.571,3070,4.123,3378,3.733,3396,3.571,3397,3.426,3727,5.258,3728,5.258,3729,5.258,3730,4.365,3731,4.365,3732,4.123,3733,4.123,3734,4.365,3735,4.365,3736,4.365,3737,4.365,3740,5.022]],["title/interfaces/Point.html",[106,0.111,345,2.216]],["body/interfaces/Point.html",[3,0.106,4,0.092,5,0.077,7,0.092,19,0.01,21,0.134,51,0.817,83,0.126,85,0.478,94,0.27,106,0.209,165,0.639,202,0.712,229,2.498,317,0.008,318,0.008,319,0.197,336,2.363,337,1.169,338,5.772,339,2.871,340,6.824,341,2.673,342,3.432,343,4.422,344,3.235,345,4.323,346,2.623,347,4.488,348,2.238,349,6.824,350,2.051,351,3.91,352,4.878,353,4.572,354,5.26,355,1.778,356,5.26,357,4.318,358,3.741,359,3.91,360,5.772,361,4.878,362,4.878,363,4.878,876,2.57,1274,4.318,3741,6.55,3742,6.55,3743,5.772,3744,6.55,3745,6.55,3746,6.55]],["title/classes/Render.html",[0,0.174,1427,3.049]],["body/classes/Render.html",[0,0.243,2,1.384,3,0.073,4,0.063,5,0.053,7,0.063,8,1.144,16,0.981,18,0.862,19,0.01,20,0.422,21,0.145,22,1.157,24,1.573,50,0.346,51,0.907,69,0.979,83,0.073,85,0.353,94,0.276,97,0.762,155,0.932,163,0.782,164,1.033,165,0.349,178,0.883,187,0.494,202,0.489,227,0.724,230,1.615,231,2.985,258,1.356,265,0.899,273,1.93,298,1.817,317,0.006,318,0.006,319,0.155,346,2.462,347,4.212,350,1.615,358,3.483,368,3.483,381,0.851,392,1.221,442,4.897,471,4.855,504,2.126,558,1.615,753,5.374,757,5.119,795,3.212,869,2.815,1329,3.285,1331,5.153,1427,5.179,1441,4.332,1459,3.212,1537,4.541,1656,2.884,2066,5.775,2151,2.568,2370,3.952,2399,6.538,2440,3.611,2773,3.64,2775,6.834,2847,4.897,3105,5.56,3161,6.053,3340,3.963,3344,3.963,3409,4.855,3670,6.228,3747,4.497,3748,6.919,3749,6.919,3750,6.919,3751,6.919,3752,6.098,3753,7.418,3754,6.098,3755,6.098,3756,6.919,3757,7.418,3758,6.098,3759,7.418,3760,7.418,3761,6.098,3762,6.098,3763,6.098,3764,6.098,3765,6.919,3766,7.418,3767,4.497,3768,6.919,3769,4.497,3770,6.919,3771,4.497,3772,4.497,3773,4.497,3774,4.497,3775,4.497,3776,4.497,3777,6.098,3778,4.497,3779,4.497,3780,6.098,3781,4.497,3782,6.098,3783,4.497,3784,4.497,3785,5.374,3786,6.098,3787,4.497,3788,4.497,3789,4.497,3790,4.497,3791,4.497,3792,4.497,3793,4.497,3794,4.497,3795,4.497,3796,6.098,3797,4.497,3798,6.098,3799,4.497,3800,4.497,3801,4.497,3802,4.497,3803,3.963,3804,4.497,3805,4.497,3806,4.497,3807,4.497,3808,4.497,3809,4.497,3810,4.497,3811,4.497,3812,7.754,3813,6.919,3814,6.098,3815,4.497,3816,8.177,3817,4.497,3818,4.497,3819,4.497,3820,4.497,3821,4.497,3822,6.919,3823,6.919,3824,6.098,3825,6.098,3826,4.497,3827,7.418,3828,4.497,3829,4.497,3830,4.497,3831,4.497,3832,7.995,3833,4.497,3834,4.497,3835,4.497,3836,4.497,3837,4.497,3838,4.497,3839,4.497,3840,4.497,3841,4.497,3842,4.497,3843,4.497,3844,4.497,3845,3.963,3846,4.497,3847,4.497,3848,4.497,3849,4.497,3850,4.497]],["title/interfaces/SaveObj.html",[106,0.111,1662,2.3]],["body/interfaces/SaveObj.html",[3,0.082,4,0.071,5,0.06,7,0.071,16,0.549,18,0.516,19,0.01,20,0.388,21,0.147,50,0.403,51,0.931,57,1.116,61,2.039,63,1.145,67,1.832,69,1.098,73,1.468,74,2.453,81,1.045,82,0.947,83,0.143,85,0.532,91,2.375,94,0.267,100,1.832,106,0.221,155,1.364,165,0.698,183,1.476,187,0.523,202,0.549,207,2.039,230,1.336,270,1.182,317,0.007,318,0.007,319,0.167,336,2.801,337,0.9,339,2.441,341,1.636,348,1.724,355,2.285,381,0.725,400,1.211,402,2.658,424,1.505,427,1.072,437,2.242,516,1.182,520,3.291,623,1.364,629,2.3,659,3.354,672,2.915,685,2.826,719,3.673,877,1.636,878,3.222,880,1.272,945,2.25,1028,1.687,1033,2.545,1062,1.893,1142,1.679,1153,1.679,1296,3.011,1354,3.113,1387,3.468,1388,3.113,1539,3.468,1543,3.468,1547,3.468,1586,3.222,1589,2.165,1606,3.673,1630,2.658,1631,2.764,1632,2.764,1633,3.607,1634,3.607,1635,4.414,1636,2.56,1637,3.222,1638,2.56,1639,2.764,1640,2.764,1641,2.386,1642,3.607,1643,2.308,1644,2.764,1645,2.764,1646,2.308,1647,1.924,1648,2.658,1649,4.192,1650,2.658,1651,2.764,1652,2.764,1653,2.764,1654,2.658,1655,2.308,1656,2.386,1657,2.47,1658,2.764,1659,2.658,1660,4.433,1661,3.468,1662,3.468,1663,4.414,1664,3.673,1665,3.468,1666,4.414,1667,2.56,1668,2.658,1669,2.47,1670,2.764,1671,2.658,1672,2.658,1673,3.607,1674,2.658,1675,2.764,1676,2.764]],["title/classes/Seed.html",[0,0.174,100,1.215]],["body/classes/Seed.html",[0,0.323,1,2.895,2,0.92,3,0.049,4,0.042,5,0.035,6,1.516,7,0.042,9,1.982,10,1.982,11,2.514,12,2.514,13,2.514,14,2.489,15,4.224,16,0.668,18,0.627,19,0.01,20,0.406,21,0.148,22,0.623,23,2.288,25,3.132,26,3.364,27,4.275,30,2.489,33,3.364,35,2.489,38,3.364,40,2.489,43,3.364,45,2.489,48,3.364,50,0.275,51,0.919,52,0.65,53,1.14,54,1.283,55,3.618,56,1.574,57,1.449,58,1.323,59,3.618,60,2.925,61,2.073,62,1.574,63,1.499,64,1.574,65,1.574,66,1.723,67,1.264,68,1.574,69,1.784,70,1.463,71,2.957,72,2.835,73,1.789,74,0.944,75,2.315,76,3.011,77,1.637,78,1.637,79,2.489,80,1.574,81,1.805,82,1.031,83,0.142,84,2.393,85,0.501,86,1.456,87,1.574,88,2.919,89,2.895,90,3.011,91,1.078,92,1.323,93,1.637,94,0.21,95,2.489,96,0.92,97,1.36,98,3.529,99,2.687,100,2.124,101,3.407,102,3.407,103,3.407,104,4.477,105,3.811,106,0.156,107,3.808,108,2.012,109,2.608,110,4.477,111,2.599,112,2.461,113,3.811,114,1.693,115,2.098,116,2.808,117,2.635,118,1.625,119,1.078,120,1.463,121,2.393,122,1.574,123,1.637,124,4.275,125,1.574,126,1.637,127,3.811,128,1.323,129,1.413,130,1.639,131,2.895,132,3.523,133,3.364,134,2.556,135,3.479,136,3.811,137,4.081,138,3.523,139,3.618,140,3.011,141,3.011,142,3.011,143,1.574,144,4.263,145,2.489,146,2.489,147,1.637,148,1.637,149,1.637,150,1.637,151,1.637,152,3.234,153,2.393,154,0.791,155,1.139,156,1.207,157,1.574,158,1.637,159,2.224,160,1.413,161,1.413,162,1.574,163,0.479,164,0.366,165,0.578,166,1.574,167,2.393,168,3.618,169,2.393,170,3.364,171,2.393,172,2.393,173,2.393,174,1.574,175,3.808,176,2.895,177,0.969,178,0.433,179,1.637,180,1.637,181,1.637,182,1.637,183,0.874,184,1.637,185,1.463,186,2.393,187,0.519,188,3.838,189,2.631,190,1.283,191,0.994,192,1.637,193,1.283,194,1.413,195,1.413,196,0.994,197,1.173,198,1.413,199,1.413,200,1.14,201,0.994,202,0.494,203,2.599,204,1.413,205,1.637,206,1.367,207,0.832,208,2.393,209,1.797,210,2.489,211,1.637,212,1.574,213,0.897,214,1.637,215,1.413,216,1.078,217,1.637,218,1.637,219,1.637,220,0.994,221,1.637,222,0.897,223,1.574,224,1.637,225,3.419,226,1.637,227,1.2,228,2.078,229,1.732,230,0.791,231,1.463,232,1.574,233,2.393,234,1.574,235,1.574,236,3.011,237,3.011,238,3.011,239,1.637,240,0.853,241,1.637,242,1.637,243,2.078,244,1.637,245,2.489,246,1.637,247,2.489,248,1.637,249,3.011,250,1.637,251,2.489,252,3.234,253,2.489,254,3.011,255,1.637,256,1.637,257,1.637,258,0.507,259,1.637,260,1.637,261,1.637,262,1.637,263,1.637,264,3.78,265,0.794,266,1.574,267,1.574,268,1.637,269,1.637,270,0.7,271,1.637,272,2.393,273,1.95,274,1.637,275,1.637,276,1.637,277,1.637,278,1.637,279,1.637,280,1.573,281,1.406,282,3.618,283,1.637,284,1.637,285,1.637,286,1.637,287,1.637,288,1.637,289,1.463,290,1.637,291,1.574,292,1.574,293,1.637,294,1.516,295,1.574,296,1.637,297,4.082,298,1.207,299,1.637,300,1.637,301,1.637,302,1.637,303,1.637,304,1.637,305,2.489,306,2.489,307,3.364,308,2.489,309,1.637,310,1.637,311,1.637,312,1.637,313,1.637,314,1.574,315,1.078,316,1.637,317,0.005,318,0.005,319,0.115,3851,5.496]],["title/classes/Selection.html",[0,0.174,865,1.665]],["body/classes/Selection.html",[0,0.292,2,1.843,3,0.097,4,0.084,5,0.071,7,0.084,8,1.376,16,0.986,18,0.612,19,0.01,20,0.299,21,0.138,22,0.821,24,1.575,50,0.299,52,1.303,83,0.097,94,0.249,163,0.774,164,1.013,202,0.651,230,1.943,240,2.093,258,1.345,264,3.722,265,0.854,317,0.008,318,0.008,319,0.186,342,3.302,344,3.113,368,4.19,381,0.592,865,3.153,881,4.379,901,4.593,1023,3.628,1294,4.647,1606,3.469,1607,4.379,2041,6.99,2484,4.024,2779,6.639,2781,6.639,3852,5.987,3853,8.267,3854,8.267,3855,8.267,3856,8.267,3857,8.267,3858,8.267,3859,7.336,3860,8.267,3861,5.987,3862,5.987,3863,5.987,3864,5.987,3865,5.987,3866,5.987,3867,5.987,3868,5.987,3869,5.987,3870,5.987,3871,5.987,3872,7.336,3873,5.987,3874,5.987,3875,5.987,3876,7.336,3877,5.987,3878,7.336,3879,7.336,3880,7.931,3881,5.987,3882,5.987,3883,7.336,3884,5.987]],["title/directives/SelectionComponent.html",[826,1.818,864,1.934]],["body/directives/SelectionComponent.html",[0,0.241,3,0.098,4,0.085,5,0.071,7,0.085,8,1.385,16,0.975,18,0.618,19,0.01,20,0.303,21,0.142,22,0.83,24,1.421,50,0.398,51,0.913,52,1.316,83,0.098,94,0.25,114,1.729,154,2.253,163,0.945,178,1.232,187,0.35,191,2.013,258,1.252,265,0.598,281,1.492,317,0.008,318,0.008,319,0.188,336,3.214,342,3.073,343,4.216,344,2.897,345,3.068,346,2.272,393,1.687,427,1.034,430,1.563,460,2.583,631,3.419,632,3.168,633,3.073,647,3.396,654,3.561,659,3.316,701,4.866,826,3.316,861,2.518,864,3.269,865,3.244,1294,4.044,1379,4.866,2484,3.745,2655,7.021,2656,7.311,2657,6.505,2660,6.505,2669,6.505,2671,4.857,2672,5.33,2673,5.33,2674,5.33,2675,4.222,3885,6.048,3886,6.048,3887,6.048,3888,6.048,3889,6.048,3890,6.048,3891,7.381,3892,6.048,3893,6.048,3894,6.048,3895,6.048,3896,6.048,3897,6.048,3898,6.048]],["title/injectables/SequencerService.html",[429,1.665,450,2.494]],["body/injectables/SequencerService.html",[0,0.313,3,0.076,4,0.066,5,0.055,7,0.088,8,1.517,16,0.986,18,0.869,19,0.01,20,0.433,21,0.145,22,1.188,24,1.556,50,0.313,71,2.139,83,0.076,85,0.437,94,0.275,106,0.119,118,1.736,154,2.187,159,3.063,164,0.924,178,1.196,187,0.271,202,0.508,209,1.947,216,2.257,227,1.136,230,1.658,258,1.4,265,0.777,280,0.945,281,0.945,317,0.007,318,0.007,319,0.159,323,2.79,346,1.439,348,2.139,381,0.698,392,1.269,393,1.613,398,3.918,422,3.753,423,4.119,424,1.068,425,2.288,426,4.259,427,0.916,428,6.494,429,2.387,430,1.208,431,4.409,432,3.99,433,3.564,434,2.371,435,2.79,436,2.926,437,2.187,438,5.515,439,5.026,440,2.686,441,5.515,442,5.026,443,5.515,444,5.026,445,5.026,446,3.234,447,5.515,448,2.21,449,1.515,450,3.574,451,4.119,452,5.667,453,6.218,454,4.119,455,4.119,456,5.515,457,4.119,458,2.138,459,4.119,460,2.287,461,4.119,462,3.753,463,1.945,464,5.515,465,6.218,466,6.641,467,4.119,468,5.667,469,4.119,470,6.494,471,4.417,472,4.119,473,5.255,474,5.515,475,2.21,476,4.119,477,3.753,478,3.081,479,4.119,480,1.686,481,5.515,482,4.126,483,2.926,484,5.026,485,4.119,486,4.119,487,4.119,488,5.515,489,4.103,490,5.515,491,4.119,492,2.926,493,6.052,494,4.119,495,6.052,496,4.119,497,6.052,498,4.119,513,2.605,519,1.301,520,1.782,936,5.062,1175,3.574,1192,3.753,2365,2.79,3014,5.515,3015,5.515,3016,5.515,3017,5.515,3018,5.026,3019,5.515,3020,5.515,3021,5.515,3036,4.119,3038,4.119,3040,4.119,3042,4.119,3043,5.515,3046,4.119,3899,6.258,3900,6.258,3901,6.258,3902,6.258,3903,6.258,3904,4.673,3905,4.673,3906,4.673,3907,4.673,3908,4.673,3909,4.673,3910,4.673,3911,4.673,3912,4.673,3913,4.673,3914,4.673,3915,4.673,3916,4.673,3917,4.673,3918,4.673,3919,4.673,3920,4.673,3921,4.673,3922,4.673,3923,4.673,3924,4.673,3925,4.673,3926,4.673,3927,4.119]],["title/classes/Shape.html",[0,0.174,92,1.934]],["body/classes/Shape.html",[0,0.265,2,1.579,3,0.083,4,0.072,5,0.061,7,0.072,8,1.248,16,0.988,18,0.828,19,0.01,20,0.428,21,0.145,22,1.111,24,1.569,50,0.257,51,0.702,82,1.248,83,0.083,85,0.489,92,3.995,94,0.277,122,2.702,163,0.541,164,0.629,187,0.453,202,0.558,207,1.428,227,1.304,230,1.762,243,3.043,258,1.407,265,0.731,281,1.037,317,0.007,318,0.007,319,0.169,336,2.993,342,3.254,344,3.315,350,1.956,358,2.929,368,3.8,384,1.539,424,1.521,427,1.077,428,5.344,501,2.425,558,1.358,759,2.072,761,2.77,881,4.835,898,2.689,902,2.346,1040,2.271,1127,3.354,1142,2.214,1371,5.344,1438,2.602,1497,3.581,1595,2.702,1605,5.456,1624,4.955,1637,4.192,1708,3.211,2273,3.8,2573,4.119,2675,3.581,2768,4.52,2770,5.344,2779,5.344,2781,4.119,2848,4.119,3310,4.52,3396,2.929,3397,2.81,3681,3.581,3927,6.888,3928,5.129,3929,5.864,3930,6.654,3931,6.654,3932,6.654,3933,7.386,3934,8.098,3935,7.386,3936,6.654,3937,6.888,3938,6.888,3939,7.816,3940,6.654,3941,5.344,3942,6.654,3943,5.864,3944,7.386,3945,6.654,3946,5.129,3947,5.129,3948,5.129,3949,5.129,3950,5.129,3951,5.129,3952,5.129,3953,5.129,3954,5.129,3955,5.129,3956,5.129,3957,5.129,3958,5.129,3959,5.129,3960,5.129,3961,5.129,3962,5.129,3963,6.654,3964,5.129,3965,7.816,3966,5.344,3967,5.129,3968,6.654,3969,5.129,3970,6.654,3971,5.129,3972,5.129,3973,5.129,3974,5.129,3975,5.129,3976,5.129,3977,5.129,3978,6.654,3979,4.52,3980,5.129,3981,5.129,3982,5.129,3983,5.129,3984,6.654,3985,6.654,3986,5.129,3987,5.129,3988,5.129]],["title/classes/Shape-1.html",[0,0.145,92,1.611,164,0.446]],["body/classes/Shape-1.html",[0,0.321,2,1.716,3,0.091,4,0.078,5,0.066,7,0.078,8,1.316,16,0.956,18,0.717,19,0.01,20,0.351,21,0.138,22,0.963,24,1.438,50,0.351,51,0.894,52,1.213,69,1.527,82,1.316,83,0.091,85,0.481,92,3.813,94,0.273,97,1.367,115,1.904,163,0.74,165,0.625,202,0.763,227,1.13,265,0.694,317,0.007,318,0.007,319,0.178,336,3.192,366,4.045,381,0.694,384,1.672,424,1.604,446,3.011,458,3.512,655,5.719,659,3.706,672,3.679,761,2.32,814,4.898,873,4.207,874,5.063,876,2.187,877,2.275,883,3.183,900,3.318,902,3.687,1028,1.072,1150,2.32,1313,4.911,1354,3.631,1514,4.911,1567,4.808,1592,4.898,1638,3.56,1647,2.929,2103,3.844,2270,5.635,2440,4.475,2486,4.15,2497,5.635,2671,4.475,3724,6.768,3989,5.572,3990,7.016,3991,7.016,3992,7.016,3993,7.016,3994,7.016,3995,7.016,3996,7.016,3997,8.06,3998,7.016,3999,7.679,4000,7.679,4001,8.06,4002,7.016,4003,7.016,4004,7.016,4005,7.016,4006,5.572,4007,7.679,4008,5.572,4009,5.572,4010,5.572,4011,5.572,4012,5.572,4013,8.481,4014,7.016,4015,5.572,4016,7.016,4017,7.016,4018,5.572,4019,5.572,4020,5.572,4021,4.911,4022,5.572,4023,5.572,4024,5.572,4025,7.016,4026,5.572,4027,5.572,4028,5.572,4029,4.911,4030,5.572,4031,5.572,4032,5.572,4033,5.572,4034,5.572,4035,5.572,4036,5.572]],["title/classes/Shuttle.html",[0,0.174,1637,2.138]],["body/classes/Shuttle.html",[0,0.207,2,1.602,3,0.085,4,0.073,5,0.061,7,0.073,8,1.26,16,0.993,18,0.866,19,0.01,20,0.443,21,0.149,22,1.209,24,1.572,83,0.085,86,1.97,94,0.273,118,1.653,163,0.708,164,0.823,187,0.52,202,0.566,227,0.838,230,1.379,240,1.485,243,3.721,258,1.413,265,0.805,298,2.103,317,0.007,318,0.007,319,0.171,368,2.973,381,0.824,392,2.019,393,1.19,400,1.249,427,1.1,759,3.176,819,2.234,895,3.876,1187,6.926,1545,4.587,1637,3.983,1656,4.009,1664,3.847,2119,4.009,2295,5.92,2494,3.432,3392,3.634,3941,5.395,3966,5.395,4037,5.205,4038,5.205,4039,7.859,4040,8.136,4041,7.859,4042,8.136,4043,7.859,4044,7.859,4045,7.859,4046,7.859,4047,6.717,4048,6.717,4049,6.717,4050,5.92,4051,5.92,4052,6.717,4053,6.717,4054,6.717,4055,5.205,4056,5.205,4057,5.205,4058,5.205,4059,5.205,4060,5.205,4061,5.205,4062,5.205,4063,5.205,4064,5.205,4065,5.205,4066,5.205,4067,5.205,4068,5.205,4069,6.717,4070,5.205,4071,5.205,4072,6.717,4073,5.205,4074,6.717,4075,5.205,4076,5.205,4077,5.205,4078,4.587,4079,5.205,4080,5.205,4081,6.717,4082,6.555,4083,5.205,4084,5.205,4085,8.136,4086,5.92,4087,5.205,4088,4.587,4089,7.438,4090,7.438,4091,5.205,4092,5.205,4093,5.205,4094,5.205,4095,5.205,4096,5.205]],["title/components/SnackbarComponent.html",[623,0.905,854,1.874]],["body/components/SnackbarComponent.html",[0,0.23,3,0.094,4,0.081,5,0.068,7,0.081,8,1.346,16,0.931,18,0.59,19,0.01,20,0.408,21,0.136,22,0.792,24,1.03,50,0.39,52,1.256,83,0.094,94,0.216,114,1.68,134,2.403,187,0.416,191,1.921,227,0.93,258,0.979,280,1.167,317,0.008,318,0.008,319,0.182,336,3.086,344,2.265,350,1.529,430,1.492,446,3.078,516,1.352,558,2.162,573,1.567,623,1.617,624,2.332,625,2.66,626,2.73,627,2.64,628,2.73,629,1.607,631,3.349,632,3.949,633,3.83,635,3.281,637,3.281,647,3.062,654,3.503,659,3.248,690,2.332,691,2.332,761,2.986,814,4.03,819,2.477,825,2.73,826,2.403,827,2.73,828,2.73,829,2.403,830,2.73,831,2.477,832,2.73,833,2.477,834,2.73,835,2.556,836,2.73,837,2.477,838,2.73,839,2.477,840,2.73,841,2.73,842,2.477,843,2.73,844,2.477,845,2.73,846,2.477,847,2.73,848,2.556,849,2.73,850,2.477,851,2.73,852,2.403,853,2.73,854,3.503,855,2.73,856,2.73,857,2.477,858,1.732,859,2.73,860,2.477,861,2.403,862,2.403,863,2.73,864,2.556,865,2.201,866,2.73,923,2.14,1028,1.57,1669,4.109,2000,3.614,2004,4.03,2094,2.825,2095,3.778,2096,3.04,2107,3.297,2112,4.03,2119,2.73,2124,4.03,2479,4.299,2488,3.162,2675,4.03,2773,3.446,2825,4.636,2937,4.299,3109,4.636,4029,6.321,4097,5.772,4098,7.803,4099,7.803,4100,7.172,4101,5.772,4102,7.172,4103,5.772,4104,5.772,4105,5.772,4106,5.772,4107,5.772,4108,5.772,4109,5.772,4110,5.772,4111,5.772,4112,5.772,4113,5.772,4114,5.772,4115,5.772,4116,7.172,4117,5.772,4118,5.772,4119,5.772]],["title/interfaces/StatusMessage.html",[106,0.111,1668,2.3]],["body/interfaces/StatusMessage.html",[3,0.085,4,0.073,5,0.062,7,0.073,16,0.568,18,0.534,19,0.01,20,0.394,21,0.14,50,0.407,51,0.935,57,1.142,61,2.074,63,1.171,67,1.874,69,1.137,73,1.502,74,2.486,81,1.082,82,0.98,83,0.144,85,0.522,91,2.428,94,0.268,100,1.874,106,0.222,155,1.395,165,0.701,183,1.528,187,0.522,207,2.074,230,1.383,270,1.223,317,0.007,318,0.007,319,0.171,336,2.839,337,0.932,339,1.937,341,1.693,348,1.785,355,2.303,381,0.806,400,1.254,402,2.751,424,1.539,427,1.127,437,1.874,516,1.223,520,3.312,623,1.395,629,2.074,659,2.802,672,2.981,685,2.837,719,3.721,877,1.693,878,3.295,880,1.317,945,2.301,1028,1.685,1033,2.127,1062,1.925,1142,1.738,1153,1.738,1296,3.079,1354,3.184,1387,3.546,1388,3.184,1539,3.546,1543,3.546,1547,3.546,1586,3.295,1589,2.241,1606,2.47,1630,2.751,1631,2.861,1632,2.861,1633,3.688,1634,3.688,1635,4.462,1636,2.65,1637,3.295,1638,2.65,1639,2.861,1640,2.861,1641,2.47,1642,3.688,1643,2.389,1644,2.861,1645,2.861,1646,2.389,1647,1.992,1648,2.751,1649,3.78,1650,2.751,1651,2.861,1652,2.861,1653,2.861,1654,2.751,1655,2.389,1656,2.47,1657,2.556,1658,2.861,1659,2.751,1660,3.924,1661,2.751,1662,2.751,1663,3.688,1664,2.47,1665,3.546,1666,4.462,1667,2.65,1668,3.546,1669,3.852,1670,4.311,1671,2.751,1672,2.751,1673,3.688,1674,2.751,1675,2.861,1676,2.861]],["title/classes/System.html",[0,0.174,2452,3.252]],["body/classes/System.html",[0,0.274,2,1.657,3,0.087,4,0.075,5,0.064,7,0.075,8,1.288,16,0.964,18,0.813,19,0.01,20,0.437,21,0.141,22,1.092,24,1.467,50,0.269,66,1.458,69,1.171,81,1.115,83,0.112,85,0.438,86,2.001,94,0.248,97,1.35,115,1.839,163,0.867,164,0.66,165,0.417,178,0.78,187,0.461,190,2.31,202,0.586,204,2.545,227,0.867,230,1.818,243,3.64,258,1.281,265,0.856,298,2.175,317,0.007,318,0.007,319,0.174,339,2.545,368,3.92,381,0.856,392,1.461,393,1.23,424,1.23,427,1.108,504,3.246,757,4.297,759,3.216,760,4.323,871,4.792,876,2.694,900,3.246,901,3.37,902,3.64,947,2.635,1272,3.074,1301,4.323,1565,3.549,1593,4.525,1596,3.76,1607,3.213,1656,3.888,1664,3.888,1787,4.297,1850,4.525,1909,3.213,2151,3.92,2452,6.597,2593,4.009,3206,5.512,3392,3.758,3941,5.512,3966,5.512,4050,6.049,4051,6.049,4078,4.744,4082,7.014,4086,6.049,4088,4.744,4120,4.744,4121,6.863,4122,6.863,4123,6.863,4124,6.069,4125,6.863,4126,7.557,4127,7.958,4128,7.958,4129,6.863,4130,6.863,4131,6.863,4132,5.382,4133,5.382,4134,5.382,4135,5.382,4136,5.382,4137,5.382,4138,5.382,4139,6.863,4140,5.382,4141,5.382,4142,5.382,4143,5.382,4144,5.382,4145,5.382,4146,4.744,4147,4.744,4148,4.744,4149,4.744,4150,4.744,4151,6.049,4152,4.744,4153,4.744,4154,5.382,4155,5.382,4156,5.382,4157,5.382,4158,7.557,4159,5.382,4160,5.382,4161,5.382,4162,5.382,4163,5.382,4164,5.382,4165,5.382,4166,4.744,4167,5.382,4168,5.382,4169,5.382,4170,6.863,4171,5.382,4172,5.382,4173,6.863,4174,5.382,4175,5.382]],["title/interfaces/TopologyDef.html",[106,0.111,107,2.3]],["body/interfaces/TopologyDef.html",[0,0.324,1,2.907,3,0.049,4,0.042,5,0.036,6,1.526,7,0.042,9,1.99,10,1.99,11,2.524,12,2.524,13,2.524,14,2.501,15,4.231,16,0.327,18,0.63,19,0.01,20,0.406,21,0.148,22,0.413,23,2.297,25,3.135,26,3.375,27,4.281,30,2.501,33,3.375,35,2.501,38,3.375,40,2.501,43,3.375,45,2.501,48,3.375,50,0.276,51,0.902,52,0.655,53,1.147,54,1.291,55,3.629,56,1.584,57,1.45,58,1.332,59,3.629,60,2.933,61,2.078,62,1.584,63,1.494,64,1.584,65,1.584,66,1.726,67,1.271,68,1.584,69,1.787,70,1.472,71,2.959,72,2.644,73,1.767,74,0.95,75,2.32,76,3.023,77,1.648,78,1.648,79,2.501,80,1.584,81,1.801,82,1.035,83,0.143,84,3.245,85,0.502,86,1.209,87,1.584,88,2.922,89,3.489,90,3.023,91,1.085,92,1.332,93,1.648,94,0.21,95,2.501,96,0.926,97,1.362,98,3.787,99,2.693,100,2.078,101,3.414,102,3.414,103,3.414,104,4.481,105,3.82,106,0.156,107,3.817,108,1.332,109,2.614,110,4.481,111,2.159,112,2.41,113,3.629,114,1.633,115,2.105,116,2.818,117,2.644,118,1.629,119,1.085,120,1.472,121,2.405,122,1.584,123,1.648,124,4.281,125,1.584,126,1.648,127,3.82,128,1.332,129,1.422,130,1.647,131,2.907,132,3.53,133,3.375,134,2.565,135,3.489,136,3.82,137,4.09,138,3.53,139,3.629,140,3.023,141,3.023,142,3.023,143,1.584,144,4.271,145,2.501,146,2.501,147,1.648,148,1.648,149,1.648,150,1.648,151,1.648,152,3.245,153,2.405,154,0.797,155,1.143,156,1.215,157,1.584,158,1.648,159,2.235,160,1.422,161,1.422,162,1.584,163,0.481,164,0.369,165,0.579,166,1.584,167,2.405,168,3.629,169,2.405,170,3.375,171,2.405,172,2.405,173,2.405,174,1.584,175,3.817,176,2.907,177,0.975,178,0.436,179,1.648,180,1.648,181,1.648,182,1.648,183,0.88,184,1.648,185,1.472,186,2.405,187,0.519,188,3.843,189,2.634,190,1.291,191,1.001,192,1.648,193,1.291,194,1.422,195,1.422,196,1.001,197,1.18,198,1.422,199,1.422,200,1.147,201,1.001,202,0.327,203,2.609,204,1.422,205,1.648,206,1.376,207,0.837,208,2.405,209,1.802,210,2.501,211,1.648,212,1.584,213,0.903,214,1.648,215,1.422,216,1.085,217,1.648,218,1.648,219,1.648,220,1.001,221,1.648,222,0.903,223,1.584,224,1.648,225,3.426,226,1.648,227,1.202,228,2.088,229,1.741,230,0.797,231,1.472,232,1.584,233,2.405,234,1.584,235,1.584,236,3.023,237,3.023,238,3.023,239,1.648,240,0.858,241,1.648,242,1.648,243,2.088,244,1.648,245,2.501,246,1.648,247,2.501,248,1.648,249,3.023,250,1.648,251,2.501,252,3.245,253,2.501,254,3.023,255,1.648,256,1.648,257,1.648,258,0.51,259,1.648,260,1.648,261,1.648,262,1.648,263,1.648,264,3.787,265,0.795,266,1.584,267,1.584,268,1.648,269,1.648,270,0.705,271,1.648,272,2.405,273,1.96,274,1.648,275,1.648,276,1.648,277,1.648,278,1.648,279,1.648,280,1.576,281,1.41,282,3.629,283,1.648,284,1.648,285,1.648,286,1.648,287,1.648,288,1.648,289,1.472,290,1.648,291,1.584,292,1.584,293,1.648,294,1.526,295,1.584,296,1.648,297,4.086,298,1.215,299,1.648,300,1.648,301,1.648,302,1.648,303,1.648,304,1.648,305,2.501,306,2.501,307,3.375,308,2.501,309,1.648,310,1.648,311,1.648,312,1.648,313,1.648,314,1.584,315,1.085,316,1.648,317,0.005,318,0.005,319,0.116,337,0.537]],["title/interfaces/TreeNode.html",[106,0.111,719,2.065]],["body/interfaces/TreeNode.html",[3,0.084,4,0.072,5,0.061,7,0.072,19,0.01,20,0.371,21,0.144,50,0.416,51,0.892,57,1.329,61,2.062,63,1.162,67,2.387,69,1.454,70,2.527,73,1.913,75,1.718,81,1.777,83,0.132,85,0.506,86,1.368,88,2.773,94,0.201,96,2.412,106,0.17,112,2.495,115,1.764,117,3.363,155,1.385,163,0.826,164,0.819,165,0.702,183,1.956,187,0.299,202,0.562,207,1.437,230,1.962,270,1.209,280,1.044,317,0.007,318,0.007,319,0.17,337,0.921,339,1.915,355,2.257,381,0.511,400,1.604,424,1.18,427,1.017,430,1.334,437,1.437,458,2.362,460,1.674,501,3.504,546,2.829,569,2.868,582,3.082,623,1.723,624,2.7,625,2.478,629,2.181,681,3.404,684,4.147,685,2.895,690,2.7,691,2.7,719,4.162,757,4.905,795,3.52,876,2.026,880,1.976,900,3.16,954,2.442,971,2.287,995,2.287,1033,2.111,1062,2.148,1093,3.095,1276,4.127,1296,3.057,1388,3.16,1435,3.605,1589,2.216,1590,2.829,1591,3.404,1595,2.72,1596,3.661,1611,3.605,1636,2.62,1657,2.527,1667,3.759,2089,3.605,2249,4.147,2250,4.147,2251,4.147,2252,4.55,2253,3.845,2254,5.889,2255,4.55,2256,5.889,2257,5.889,2258,4.55,2259,4.55,2260,4.55,2261,4.55,2262,4.55,2263,5.889,2264,4.55,2265,4.55,2266,4.55,2267,4.55,2268,4.55,2269,4.55,2270,4.147,2271,4.55,2272,5.367,2273,2.949,2274,4.55,2275,4.55,2276,6.677,2277,4.55,2278,5.173,2279,4.665,2280,5.367,2281,5.367,2282,5.951,2283,4.55,2284,3.845,2285,4.55,2286,4.55,2287,5.367,2288,4.55,2289,4.55,2290,4.55,2291,5.889,2292,5.889,2293,5.889]],["title/interfaces/TreeNodeProxy.html",[106,0.111,1654,2.3]],["body/interfaces/TreeNodeProxy.html",[3,0.084,4,0.072,5,0.061,7,0.072,16,0.562,18,0.528,19,0.01,20,0.392,21,0.141,50,0.406,51,0.934,57,1.134,61,2.064,63,1.163,67,2.26,69,1.125,73,1.811,74,2.476,81,1.071,82,0.97,83,0.144,85,0.527,91,2.413,94,0.27,100,1.862,106,0.222,155,1.386,165,0.7,183,1.513,187,0.518,202,0.562,207,2.064,230,1.369,270,1.211,317,0.007,318,0.007,319,0.17,336,2.828,337,0.922,339,1.917,341,1.676,348,1.767,355,2.298,381,0.734,400,1.241,402,2.723,424,1.529,427,1.079,437,1.862,516,1.211,520,3.306,623,1.386,629,2.182,659,2.784,672,2.962,685,2.866,719,3.707,877,1.676,878,3.629,880,1.686,945,2.286,1028,1.682,1033,2.113,1062,2.149,1142,1.721,1153,1.721,1296,3.059,1354,3.163,1387,3.523,1388,3.163,1539,3.523,1543,3.523,1547,3.523,1586,3.274,1589,2.219,1606,2.445,1630,2.723,1631,2.833,1632,2.833,1633,3.664,1634,3.664,1635,4.448,1636,2.623,1637,3.274,1638,2.623,1639,2.833,1640,2.833,1641,2.445,1642,3.664,1643,2.365,1644,2.833,1645,2.833,1646,2.365,1647,1.972,1648,2.723,1649,3.978,1650,3.523,1651,3.664,1652,2.833,1653,2.833,1654,3.523,1655,2.365,1656,2.445,1657,2.531,1658,2.833,1659,2.723,1660,3.905,1661,2.723,1662,2.723,1663,3.664,1664,2.445,1665,3.523,1666,4.448,1667,2.623,1668,2.723,1669,2.531,1670,2.833,1671,2.723,1672,2.723,1673,3.664,1674,2.723,1675,2.833,1676,2.833]],["title/interfaces/TreeOperation.html",[106,0.111,507,1.997]],["body/interfaces/TreeOperation.html",[3,0.058,4,0.05,5,0.042,7,0.085,9,1.284,10,1.284,11,1.629,12,1.629,13,1.629,18,0.623,19,0.01,20,0.429,21,0.135,22,0.488,23,2.154,25,1.284,50,0.335,51,0.706,52,0.775,53,1.358,54,1.528,57,1.424,58,1.577,60,3.149,61,2.315,63,1.521,66,1.747,69,1.791,71,2.732,72,2.221,73,1.835,81,1.537,82,0.668,83,0.135,85,0.528,86,0.943,94,0.184,96,2.414,99,2.414,100,1.863,101,3.501,102,2.789,103,2.789,106,0.188,108,1.577,112,2.134,115,2.083,118,0.876,119,1.284,132,2.883,134,2.538,154,1.371,156,1.439,163,0.877,164,0.747,165,0.687,187,0.497,188,3.709,189,2.633,190,2.221,193,2.617,194,2.447,195,1.684,196,1.185,197,1.397,198,1.684,199,1.684,200,2.325,201,1.722,202,0.728,203,1.684,206,2.367,207,2.065,209,0.92,216,1.284,220,1.185,225,3.709,228,1.629,229,1.358,265,0.879,270,0.834,280,1.697,298,3.282,315,1.284,317,0.005,318,0.005,319,0.132,337,0.635,341,1.154,427,0.462,437,1.697,501,2.447,506,1.743,507,3.501,510,2.984,520,3.138,527,3.709,539,1.743,547,2.034,549,3.995,556,3.089,568,2.956,569,3.285,578,2.031,586,1.807,589,1.25,629,1.979,696,2.229,697,1.951,815,1.876,876,2.626,1020,1.577,1062,0.92,1098,1.069,1150,2.538,1282,1.807,1391,2.229,1443,2.229,1590,1.951,1629,1.743,1641,2.447,1643,2.367,1655,1.629,1679,4.428,1696,3.089,1700,2.956,1847,1.951,1940,2.486,2062,3.613,2114,1.876,2128,2.126,2129,2.348,2130,3.525,2131,3.613,2132,3.854,2133,3.854,2134,3.854,2135,3.854,2136,2.652,2137,2.652,2138,2.652,2139,2.486,2140,4.541,2141,2.652,2142,2.652,2143,2.348,2144,2.652,2145,2.652,2146,2.652,2147,2.652,2148,2.486,2149,3.854,2150,2.652,2151,2.034,2152,2.652,2153,2.486,2154,2.486,2155,4.541,2156,5.524,2157,5.524,2158,2.486,2159,4.541,2160,4.541,2161,4.541,2162,4.541,2163,2.652,2164,4.541,2165,2.652,2166,3.854,2167,3.854,2168,3.854,2169,3.854,2170,3.854,2171,6.35,2172,2.486,2173,2.652,2174,2.652,2175,2.652,2176,2.652,2177,2.652,2178,2.652,2179,2.652,2180,2.652,2181,2.486,2182,2.652,2183,2.486,2184,6.305,2185,2.652,2186,2.652,2187,2.652,2188,2.486,2189,2.652,2190,2.652,2191,2.652,2192,2.652,2193,2.652,2194,4.984,2195,2.652,2196,2.652,2197,2.652,2198,3.854,2199,5.841,2200,5.841,2201,5.841,2202,3.854,2203,2.652,2204,2.652,2205,2.652,2206,5.295,2207,5.701,2208,3.854,2209,2.652,2210,4.984,2211,2.652,2212,3.854,2213,3.854,2214,3.854,2215,3.854,2216,3.854,2217,3.854,2218,3.854,2219,3.854,2220,3.854,2221,3.854,2222,4.984,2223,3.854,2224,3.854,2225,2.652,2226,3.854,2227,2.652,2228,2.652,2229,3.854,2230,3.854,2231,2.652,2232,2.652,2233,3.854,2234,2.652,2235,2.652,2236,2.652,2237,2.652,2238,2.652,2239,2.652,2240,2.652,2241,2.348,2242,2.652,2243,2.652,2244,2.652,2245,2.652,2246,2.652,2247,2.652,2248,2.486]],["title/interfaces/Vertex.html",[106,0.111,885,3.252]],["body/interfaces/Vertex.html",[3,0.101,4,0.087,5,0.073,7,0.087,19,0.01,21,0.136,51,0.904,74,1.966,83,0.136,85,0.361,91,2.709,94,0.27,106,0.205,165,0.626,202,0.677,213,1.868,317,0.008,318,0.008,319,0.191,337,1.11,339,2.785,341,2.435,346,2.312,347,4.589,350,1.989,400,1.494,427,0.974,818,2.846,867,4.634,868,4.634,869,5.244,870,4.998,871,5.243,872,4.998,873,3.409,874,4.103,875,3.409,876,3.365,877,2.435,878,3.046,879,4.634,880,1.569,881,4.483,882,4.998,883,3.554,884,5.593,885,5.593,886,6.728,887,5.243,888,4.951,889,6.032,890,4.702,891,5.243,892,6.032,893,6.032,894,5.593,895,4.634,896,6.032,897,3.554,898,2.514,899,4.634,900,2.943,901,3.896,902,2.846,903,3.896,904,3.715,905,4.998,906,4.998,907,6.478,908,6.478,909,4.998,910,6.032,911,4.998,912,6.032,913,4.998,914,6.032,915,4.998,916,6.032,917,4.998,918,4.998,919,4.998]],["title/interfaces/ViewModes.html",[106,0.111,1268,2.879]],["body/interfaces/ViewModes.html",[3,0.106,4,0.092,5,0.077,7,0.092,19,0.01,21,0.126,83,0.141,85,0.379,94,0.197,106,0.221,165,0.674,178,1.307,187,0.532,200,2.498,317,0.008,318,0.008,319,0.197,337,1.169,381,0.766,877,2.51,880,1.651,897,3.741,1263,4.318,1264,4.572,1265,5.386,1266,4.318,1267,4.318,1268,5.105,1269,4.572,1270,4.572,1271,4.572,1272,3.741,1273,4.1,1274,4.318,1275,4.572,1276,3.45,1277,3.741,1278,4.572,1279,4.572,1280,4.242,1281,5.406,1282,3.323,1283,4.572,1284,4.709,1285,4.318]],["title/injectables/ViewportService.html",[429,1.665,1307,3.049]],["body/injectables/ViewportService.html",[0,0.175,3,0.071,4,0.061,5,0.052,7,0.061,8,1.125,16,0.978,18,0.857,19,0.01,20,0.42,21,0.14,22,1.151,24,1.597,50,0.3,52,0.954,83,0.071,85,0.347,94,0.278,97,1.158,163,0.632,165,0.63,202,0.743,222,1.799,227,1.1,240,1.71,258,1.439,265,0.84,281,1.604,317,0.006,318,0.006,319,0.152,336,3.026,341,1.943,342,3.056,343,4.532,344,3.114,345,4.48,346,2.612,347,4.512,348,2.048,384,2.382,398,4.968,427,1.15,429,2.286,430,1.133,448,2.073,449,1.421,458,2.741,559,2.005,680,6.028,694,4.814,698,5.896,701,3.952,702,5.282,761,2.495,784,4.464,822,4.077,877,1.943,1276,3.157,1294,4.531,1307,4.184,1394,5.91,1438,3.041,1459,3.157,1494,3.864,1596,3.284,1613,4.184,1615,3.752,1647,2.286,1874,3.578,2017,5.282,2126,5.467,2151,2.504,2253,4.464,2365,2.617,2437,3.061,2486,5.91,2572,5.282,2766,4.814,2782,5.282,2785,5.282,3409,4.596,3670,6.373,3733,3.952,3743,5.282,3937,6.469,3938,6.469,3943,5.282,4176,4.384,4177,6.829,4178,6.829,4179,5.994,4180,7.341,4181,7.341,4182,7.341,4183,7.341,4184,7.341,4185,7.341,4186,5.994,4187,5.994,4188,5.994,4189,5.994,4190,7.341,4191,5.994,4192,5.994,4193,5.994,4194,4.384,4195,4.384,4196,4.384,4197,4.384,4198,4.384,4199,4.384,4200,4.384,4201,4.384,4202,4.384,4203,5.994,4204,4.384,4205,5.282,4206,5.994,4207,4.384,4208,5.994,4209,5.994,4210,5.994,4211,4.384,4212,5.994,4213,4.384,4214,5.994,4215,4.384,4216,5.994,4217,4.384,4218,4.384,4219,5.994,4220,4.384,4221,4.384,4222,4.384,4223,5.994,4224,4.384,4225,5.994,4226,5.994,4227,5.282,4228,4.384,4229,5.994,4230,4.384,4231,7.341,4232,4.384,4233,4.384,4234,4.384,4235,4.384,4236,4.384,4237,4.384,4238,4.384,4239,4.384,4240,5.994,4241,5.994,4242,4.384,4243,4.384,4244,4.384,4245,5.994,4246,5.994,4247,4.384,4248,4.384,4249,7.341,4250,7.341,4251,7.341,4252,4.384,4253,4.384,4254,5.994,4255,5.994,4256,6.829,4257,4.384,4258,4.384]],["title/components/VirtualPedalsComponent.html",[623,0.905,857,1.874]],["body/components/VirtualPedalsComponent.html",[0,0.216,3,0.088,4,0.076,5,0.064,7,0.076,8,1.292,16,0.896,18,0.704,19,0.01,20,0.412,21,0.123,22,0.945,24,1.228,50,0.344,83,0.088,114,1.613,154,1.433,163,0.799,164,0.663,177,1.753,191,1.8,197,3.129,227,1.109,235,2.849,258,1.284,280,1.093,317,0.007,318,0.007,319,0.175,342,3.153,344,2.702,350,2.006,430,1.398,446,2.955,516,1.267,558,2.112,573,1.468,594,2.659,623,1.569,624,2.185,625,2.553,626,2.558,627,2.474,628,2.558,629,1.505,631,3.251,632,3.93,633,3.812,635,3.149,637,3.149,647,2.972,654,3.422,690,2.185,691,2.185,697,4.857,761,2.866,793,3.386,795,2.849,815,2.849,825,2.558,826,2.252,827,2.558,828,2.558,829,2.252,830,2.558,831,2.321,832,2.558,833,2.321,834,2.558,835,2.395,836,2.558,837,2.321,838,2.558,839,2.321,840,2.558,841,2.558,842,2.321,843,2.558,844,2.321,845,2.558,846,2.321,847,2.558,848,2.395,849,2.558,850,2.321,851,2.558,852,2.252,853,2.558,854,2.321,855,2.558,856,2.558,857,3.422,858,2.644,859,2.558,860,2.321,861,2.252,862,2.252,863,2.558,864,2.395,865,2.063,866,2.558,949,3.129,1063,2.648,1290,4.344,1331,4.028,1519,3.089,1537,4.028,1688,4.177,1690,3.386,1716,4.31,1925,3.776,2000,3.386,2094,2.648,2095,3.627,2096,2.849,2099,3.089,2103,2.963,2111,3.566,2112,5.287,2116,2.963,2119,3.256,2125,4.539,2488,3.772,2515,5.938,2529,4.767,2848,4.344,2851,4.11,3161,5.566,3694,7.417,3785,4.767,4259,8.416,4260,5.409,4261,7.574,4262,6.885,4263,6.885,4264,6.885,4265,6.885,4266,5.409,4267,5.409,4268,7.973,4269,6.885,4270,5.409,4271,6.885,4272,6.885,4273,5.409,4274,5.409,4275,5.409,4276,5.409,4277,5.409,4278,5.409,4279,4.767,4280,5.409,4281,5.409,4282,5.409,4283,5.409,4284,6.885,4285,6.885]],["title/interfaces/WeavingLog.html",[106,0.111,3738,3.252]],["body/interfaces/WeavingLog.html",[3,0.102,4,0.088,5,0.074,7,0.088,19,0.01,20,0.315,21,0.132,50,0.378,51,0.973,52,1.371,66,1.722,83,0.14,85,0.47,94,0.253,106,0.214,119,2.272,163,0.798,165,0.667,187,0.438,265,0.749,317,0.008,318,0.008,319,0.192,337,1.124,350,2.228,355,1.71,381,0.623,393,1.44,500,3.301,505,2.545,513,3.581,514,2.979,516,1.475,519,1.753,523,2.622,528,2.881,573,2.284,575,4.631,902,2.881,1028,1.212,1057,2.211,1098,1.89,1143,2.211,1617,3.451,1684,2.979,1761,3.196,1784,3.985,1852,3.598,2273,3.598,3070,4.153,3378,3.76,3394,5.545,3396,3.598,3397,3.451,3726,4.691,3727,4.397,3728,5.281,3729,5.281,3730,4.397,3731,4.397,3732,4.153,3733,4.153,3734,4.397,3735,4.397,3736,4.397,3737,4.397,3738,5.634,3739,6.755]],["title/interfaces/WeavingPick.html",[106,0.111,1684,2.065]],["body/interfaces/WeavingPick.html",[3,0.103,4,0.089,5,0.075,7,0.089,19,0.01,20,0.317,21,0.123,50,0.38,51,0.959,52,1.379,66,1.726,83,0.14,85,0.367,94,0.264,106,0.214,119,2.285,163,0.801,165,0.668,187,0.488,265,0.751,317,0.008,318,0.008,319,0.193,337,1.13,350,2.232,355,1.72,381,0.627,393,1.448,500,3.307,505,2.56,513,3.587,514,2.996,516,1.484,519,1.763,523,2.637,528,2.898,573,2.288,575,4.643,902,2.898,1028,1.219,1057,2.224,1098,1.901,1143,2.224,1617,3.471,1684,3.59,1761,3.214,1784,3.999,1852,3.618,2273,3.618,3070,4.177,3378,3.782,3394,4.177,3396,3.618,3397,3.471,3726,4.718,3727,4.423,3728,5.3,3729,5.3,3730,4.423,3731,4.423,3732,4.177,3733,4.177,3734,4.423,3735,4.423,3736,5.883,3737,5.883,3738,4.718,3739,5.088]],["title/interfaces/WeavingPick-1.html",[106,0.092,164,0.446,1684,1.721]],["body/interfaces/WeavingPick-1.html",[3,0.104,4,0.09,5,0.075,7,0.09,19,0.01,20,0.32,21,0.124,50,0.382,51,0.948,52,1.391,66,1.733,83,0.137,94,0.264,106,0.207,119,2.306,163,0.805,165,0.67,187,0.49,265,0.755,317,0.008,318,0.008,319,0.194,337,1.141,350,2.239,355,1.736,381,0.633,393,1.461,500,3.317,505,2.583,513,3.596,514,3.023,516,1.497,519,1.779,523,2.661,528,2.924,573,2.295,575,4.661,902,2.924,1028,1.23,1057,2.244,1098,1.919,1143,2.244,1617,3.502,1684,3.609,1761,3.243,1784,4.02,1852,3.651,2273,3.651,3070,4.215,3378,3.816,3396,3.651,3397,3.502,3727,4.463,3728,5.328,3729,5.328,3730,4.463,3731,4.463,3732,4.215,3733,4.215,3734,4.463,3735,4.463,3736,5.901,3737,5.901,3740,5.134]],["title/components/WeavingStateComponent.html",[623,0.905,860,1.874]],["body/components/WeavingStateComponent.html",[0,0.148,3,0.061,4,0.052,5,0.044,7,0.052,8,1.003,16,0.944,18,0.698,19,0.01,20,0.388,21,0.141,22,0.937,24,1.344,50,0.388,51,0.92,52,0.81,63,1.189,73,1.192,74,1.176,81,1.108,83,0.061,85,0.31,86,0.986,88,1.272,94,0.257,114,1.252,154,1.917,163,0.763,164,0.456,178,1.048,187,0.216,191,1.239,197,1.461,227,0.861,230,1.416,240,1.063,258,1.277,265,0.368,280,1.081,317,0.006,318,0.006,319,0.136,341,1.733,342,2.225,344,2.84,346,1.146,350,1.81,351,2.223,355,2.155,372,2.773,373,2.773,381,0.822,388,3.346,392,1.965,393,1.222,430,0.962,446,2.294,460,1.733,500,3.172,504,1.761,505,1.505,516,1.859,523,1.55,555,3.599,558,1.81,573,2.278,594,2.379,623,1.296,624,1.505,625,1.982,626,1.761,627,1.703,628,1.761,629,1.036,631,2.684,632,3.798,633,3.684,635,2.445,637,2.445,647,3.172,653,4.278,654,2.933,670,4.657,672,2.367,690,1.505,691,1.505,708,4.278,761,2.603,793,2.331,815,3.967,818,2.86,819,2.933,824,2.127,825,1.761,826,1.55,827,1.761,828,1.761,829,1.55,830,1.761,831,1.598,832,1.761,833,1.598,834,1.761,835,1.649,836,1.761,837,1.598,838,1.761,839,1.598,840,1.761,841,1.761,842,1.598,843,1.761,844,1.598,845,1.761,846,1.598,847,1.761,848,1.649,849,1.761,850,1.598,851,1.761,852,1.55,853,1.761,854,1.598,855,1.761,856,1.761,857,1.598,858,1.118,859,1.761,860,2.933,861,1.55,862,1.55,863,1.761,864,1.649,865,1.42,866,1.761,875,3.964,883,3.053,887,3.732,971,2.367,1028,0.716,1146,2.769,1153,1.239,1316,2.99,1317,2.99,1321,3.733,1325,4.657,1354,2.528,1366,4.123,1367,4.657,1368,3.282,1421,3.981,1482,5.511,1519,3.053,1647,1.42,1686,4.53,1687,2.599,1688,3.671,1690,2.331,1716,4.715,1785,4.133,1832,5.052,1909,4.32,1961,4.711,2066,2.773,2094,3.687,2095,4.374,2096,2.816,2098,2.99,2099,4.685,2101,2.773,2102,2.99,2103,4.494,2107,2.127,2113,2.773,2114,3.812,2116,4.816,2117,2.773,2119,4.033,2475,4.857,2484,3.173,2485,2.331,2488,4.251,2493,2.773,2494,4.771,2515,5.389,2561,2.773,2773,3.191,2851,3.191,2852,3.282,3086,5.488,3087,2.99,3096,5.022,3097,2.99,3098,2.99,3099,6.492,3100,5.811,3101,2.99,3102,4.711,3103,5.022,3104,4.293,3105,3.524,3110,5.643,3112,5.511,3113,3.282,3116,5.811,3117,6.049,3118,2.99,3119,2.99,3120,2.99,3121,2.99,3122,5.022,3123,2.99,3124,6.798,3125,6.492,3126,4.293,3127,2.99,3128,2.99,3129,5.022,3130,2.99,3131,2.99,3132,2.99,3133,2.99,3134,2.99,3135,2.99,3136,2.99,3137,2.99,3138,2.99,3139,2.99,3140,2.99,3264,3.282,3382,2.599,3409,2.331,3615,5.511,3617,5.511,3620,4.711,3637,7.004,3639,3.282,3640,5.511,3641,4.711,3652,3.282,3653,4.711,3654,3.282,3655,4.711,3656,3.282,3657,3.282,3658,3.282,3659,3.282,3660,3.282,3661,4.711,3666,3.282,3667,3.282,3668,3.282,3669,3.282,3681,2.599,3682,4.711,3683,4.711,4286,8.721,4287,3.723,4288,6.253,4289,5.345,4290,6.253,4291,5.345,4292,5.345,4293,5.345,4294,3.723,4295,3.723,4296,3.723,4297,5.345,4298,3.723,4299,5.345,4300,5.345,4301,3.723,4302,5.345,4303,5.345,4304,5.345,4305,3.723,4306,3.723,4307,3.723,4308,3.723,4309,3.723,4310,3.723,4311,3.723,4312,3.723,4313,3.723,4314,3.723,4315,3.723,4316,3.723,4317,3.723,4318,3.723,4319,5.345,4320,5.345,4321,3.723,4322,3.723,4323,3.723,4324,6.253,4325,5.345,4326,5.345,4327,5.345,4328,6.833,4329,6.833,4330,5.345,4331,5.345,4332,3.723,4333,3.723,4334,3.723,4335,3.723,4336,3.723,4337,3.723,4338,3.723,4339,3.723,4340,3.723,4341,3.723,4342,3.723,4343,5.345,4344,3.723]],["title/interfaces/YarnPath.html",[106,0.111,899,3.252]],["body/interfaces/YarnPath.html",[3,0.101,4,0.087,5,0.073,7,0.087,19,0.01,21,0.139,51,0.903,74,1.955,83,0.136,85,0.466,91,2.7,94,0.269,106,0.204,165,0.624,202,0.673,213,1.857,317,0.008,318,0.008,319,0.19,337,1.104,339,2.775,341,2.426,346,2.304,347,4.239,350,1.982,400,1.485,427,0.971,818,2.83,867,4.608,868,4.608,869,5.234,870,4.97,871,5.225,872,4.97,873,3.39,874,4.08,875,3.39,876,3.36,877,2.426,878,3.029,879,4.608,880,1.56,881,4.468,882,4.97,883,3.534,884,5.574,885,4.608,886,4.97,887,5.225,888,4.935,889,6.011,890,4.686,891,5.225,892,6.011,893,6.876,894,6.376,895,4.608,896,6.876,897,3.534,898,2.5,899,5.574,900,2.926,901,3.874,902,2.83,903,3.874,904,3.694,905,4.97,906,4.97,907,6.463,908,6.463,909,4.97,910,6.011,911,4.97,912,6.011,913,4.97,914,6.011,915,4.97,916,6.011,917,4.97,918,4.97,919,4.97]],["title/dependencies.html",[2680,3.466,4345,2.922]],["body/dependencies.html",[19,0.01,317,0.008,318,0.008,430,1.713,696,4.15,713,5.842,970,2.935,2010,5.323,2119,3.134,2427,4.936,2680,4.37,3692,5.842,4346,6.628,4347,9.08,4348,6.628,4349,6.628,4350,6.628,4351,6.628,4352,6.628,4353,7.798,4354,6.263,4355,6.628,4356,6.628,4357,6.628,4358,6.628,4359,6.628,4360,8.553,4361,6.628,4362,7.798,4363,6.628,4364,6.628,4365,6.628,4366,6.628,4367,6.628,4368,6.628,4369,6.628,4370,6.628,4371,6.628,4372,5.842,4373,6.628,4374,6.628,4375,6.628,4376,6.628,4377,6.628,4378,6.628,4379,6.628,4380,6.628,4381,6.628,4382,6.628,4383,6.628,4384,6.628,4385,6.628,4386,6.628,4387,6.628,4388,6.628,4389,6.628,4390,6.628]],["title/miscellaneous/functions.html",[82,0.986,4391,2.71]],["body/miscellaneous/functions.html",[6,2.606,7,0.072,18,0.928,19,0.01,20,0.454,21,0.148,22,1.246,24,1.614,51,0.779,56,3.508,57,1.374,60,2.274,66,1.414,69,1.839,73,1.648,81,1.62,82,0.964,85,0.534,88,2.276,94,0.269,98,3.379,115,1.755,118,1.638,154,1.36,155,1.064,163,0.542,164,0.629,175,2.705,178,0.965,187,0.496,190,2.204,202,0.804,204,2.429,265,0.508,270,1.203,280,1.638,295,2.705,298,2.691,317,0.007,318,0.007,323,4.837,424,1.174,432,3.046,433,3.149,434,3.379,435,3.976,437,1.429,499,3.386,507,2.349,510,3.828,511,3.804,513,3.566,514,3.926,515,4.284,519,1.854,528,3.046,544,2.933,547,2.933,559,3.577,562,4.391,563,4.649,565,3.585,568,4.466,587,2.705,591,3.585,598,3.585,600,3.585,607,2.933,1028,1.281,1272,2.933,1391,3.215,1565,3.386,1593,3.386,1596,3.649,1605,3.585,1607,3.976,1682,4.649,1683,4.391,1787,4.169,1909,3.066,2129,3.386,2148,3.585,2154,3.585,2158,3.585,2183,3.585,2452,5.504,2511,4.125,2555,4.125,2565,6.513,2593,3.825,2637,4.125,2638,5.348,2639,5.348,2640,5.348,2642,4.125,3010,4.526,3151,3.825,3180,4.96,3186,3.585,3187,4.125,3188,4.125,3189,4.125,3190,4.125,3271,4.526,3301,4.526,3303,4.526,3681,4.649,3726,3.825,3740,4.125,4120,4.526,4124,4.125,4146,4.526,4147,4.526,4148,4.526,4149,4.526,4150,4.526,4151,5.869,4152,4.526,4153,4.526,4391,3.825,4392,6.659,4393,7.14,4394,6.659,4395,6.659,4396,7.82,4397,5.136,4398,6.659,4399,6.659,4400,6.659,4401,6.659,4402,4.526,4403,6.659,4404,7.14,4405,5.136,4406,6.659,4407,5.136,4408,6.659,4409,4.526,4410,4.526,4411,6.659,4412,5.136,4413,6.659,4414,5.136,4415,6.659,4416,5.136,4417,5.136,4418,5.136,4419,4.526,4420,5.136,4421,5.136,4422,5.136]],["title/index.html",[7,0.051,4423,3.638,4424,3.638]],["body/index.html",[4,0.06,5,0.07,18,0.44,19,0.008,21,0.07,51,0.914,61,1.198,63,1.471,66,0.914,67,1.198,69,1.717,72,1.847,73,0.96,75,2.251,80,3.117,81,1.226,82,0.808,96,2.351,106,0.109,108,3.226,112,1.292,117,1.847,119,2.135,129,2.035,130,2.135,155,1.226,156,2.391,160,2.035,161,2.799,178,0.624,183,2.131,202,0.468,213,1.292,230,1.14,234,3.117,270,1.789,272,4.337,273,1.847,281,1.472,291,2.267,292,3.117,298,1.739,317,0.007,318,0.006,339,2.508,341,2.193,348,2.022,354,3.457,355,2.142,358,2.458,359,2.569,361,4.407,362,3.205,363,5.424,366,3.563,381,0.426,385,3.205,386,3.242,399,3.793,400,1.033,424,1.882,427,0.558,439,7.004,440,2.903,444,3.457,445,3.457,449,1.395,458,2.707,524,2.838,539,3.311,569,1.847,573,1.607,582,2.569,584,3.005,589,2.374,590,3.005,623,1.509,625,3.098,627,3.094,629,1.647,633,3.179,634,5.215,680,3.005,685,1.36,688,5.215,693,3.457,694,3.457,818,1.969,819,1.847,861,2.816,869,2.694,873,2.358,874,2.838,876,2.997,877,2.193,879,4.407,880,1.705,881,2.569,888,2.838,891,3.005,894,3.205,897,2.458,900,3.198,901,2.694,904,2.569,945,2.61,971,2.995,1028,1.607,1044,1.906,1061,2.107,1082,2.107,1097,2.107,1129,2.391,1131,3.862,1142,1.432,1143,1.511,1145,2.107,1272,2.458,1324,4.56,1356,3.205,1357,3.793,1358,3.005,1425,4.131,1428,3.457,1435,3.005,1443,2.694,1459,4.497,1550,4.753,1551,3.005,1564,3.837,1573,4.56,1593,3.902,1595,4.022,1596,3.242,1597,3.205,1599,5.037,1613,4.131,1623,2.694,1626,3.205,1629,4.03,1643,3.697,1649,2.184,1650,2.267,1655,1.969,1660,2.267,1664,2.035,1700,2.458,1701,2.694,1703,2.694,1708,2.694,1760,2.694,1784,4.022,1850,2.838,1851,2.838,1874,2.569,2026,3.793,2070,5.215,2071,5.215,2077,3.457,2091,3.793,2094,2.107,2126,3.205,2130,3.563,2139,5.085,2181,3.005,2273,2.458,2284,3.205,2287,3.457,2311,3.005,2325,3.457,2435,6.133,2491,3.793,2497,5.85,2566,3.793,2569,5.215,2573,4.753,2591,3.457,2593,4.407,2677,6.133,2679,4.802,2680,2.838,2766,4.753,2770,3.457,2865,3.793,2880,3.205,2902,5.215,2998,3.793,3000,3.457,3002,6.419,3004,5.037,3078,3.793,3152,3.793,3173,3.457,3186,4.131,3397,2.358,3502,3.205,3681,3.005,3732,3.902,3803,3.793,3845,6.419,3929,3.793,3979,3.793,4021,3.793,4124,3.457,4205,3.793,4227,3.793,4345,3.457,4354,3.457,4372,7.124,4419,3.793,4425,6.763,4426,4.304,4427,7.284,4428,4.304,4429,4.304,4430,5.918,4431,4.304,4432,4.304,4433,4.304,4434,4.304,4435,4.304,4436,4.304,4437,4.304,4438,7.284,4439,4.304,4440,4.304,4441,4.304,4442,4.304,4443,4.304,4444,4.304,4445,4.304,4446,4.304,4447,4.304,4448,4.304,4449,4.304,4450,7.284,4451,4.304,4452,4.304,4453,7.891,4454,7.284,4455,4.304,4456,4.304,4457,4.304,4458,4.304,4459,4.304,4460,4.304,4461,5.918,4462,4.304,4463,4.304,4464,4.304,4465,4.304,4466,4.304,4467,4.304,4468,4.304,4469,4.304,4470,5.918,4471,5.918,4472,4.304,4473,4.304,4474,4.304,4475,8.083,4476,4.304,4477,4.304,4478,4.304,4479,4.304,4480,5.918,4481,4.304,4482,4.304,4483,4.304,4484,4.304,4485,4.304,4486,4.304,4487,4.304,4488,4.304,4489,4.304,4490,4.304,4491,4.304,4492,4.304,4493,5.918,4494,4.304,4495,4.304,4496,6.763,4497,7.284,4498,7.891,4499,4.304,4500,4.304,4501,7.891,4502,4.304,4503,4.304,4504,4.304,4505,6.763,4506,5.918,4507,5.918,4508,4.304,4509,4.304,4510,4.304,4511,4.304,4512,3.793,4513,4.304,4514,4.304,4515,4.304,4516,6.763,4517,5.918,4518,5.918,4519,4.304,4520,4.304,4521,4.304,4522,4.304,4523,5.918,4524,7.284,4525,4.304,4526,4.304,4527,4.304,4528,5.918,4529,5.918,4530,4.304,4531,4.304,4532,4.304,4533,5.918,4534,4.304,4535,5.918,4536,4.304,4537,4.304,4538,4.304,4539,4.304,4540,4.304,4541,4.304,4542,4.304,4543,4.304,4544,4.304,4545,4.304,4546,4.304,4547,4.304,4548,4.304,4549,4.304,4550,4.304,4551,4.304,4552,4.304,4553,4.304,4554,4.304,4555,4.304,4556,5.918,4557,3.793,4558,4.304,4559,4.304,4560,4.304,4561,4.304,4562,4.304,4563,4.304,4564,4.304,4565,4.304,4566,4.304,4567,4.304,4568,4.304,4569,4.304,4570,4.304,4571,4.304,4572,4.304,4573,3.793,4574,4.304,4575,4.304,4576,4.304,4577,4.304,4578,4.304,4579,4.304,4580,4.304,4581,4.304,4582,4.304,4583,4.304,4584,5.918,4585,4.304,4586,4.304,4587,6.763,4588,5.918,4589,4.304,4590,4.304,4591,4.304,4592,4.304,4593,4.304,4594,4.304,4595,4.304,4596,4.304,4597,4.304,4598,4.304,4599,4.304,4600,4.304,4601,6.763,4602,4.304,4603,4.304,4604,5.918,4605,4.304,4606,7.636,4607,4.304,4608,4.304,4609,4.304,4610,4.304,4611,4.304,4612,4.304]],["title/modules.html",[2679,3.941]],["body/modules.html",[19,0.009,317,0.009,318,0.009,645,6.077,2678,5.339,2679,4.727,2684,5.005,4354,6.554,4613,8.16,4614,8.16]],["title/overview.html",[4615,5.268]],["body/overview.html",[2,1.95,19,0.01,317,0.008,318,0.008,337,1.13,624,3.284,625,2.349,690,3.284,691,3.284,780,5.583,795,3.999,829,3.384,831,3.489,833,3.489,835,3.6,837,3.489,839,3.489,842,3.489,844,3.489,846,3.489,848,3.6,850,3.489,852,3.682,854,3.489,857,3.489,860,3.489,861,2.637,862,3.384,1441,4.753,1497,4.423,2365,3.782,2678,6.951,2679,4.177,2680,5.005,2681,5.583,2682,5.583,2683,5.583,2684,6.349,2685,5.088,3686,5.583,3687,5.583,3688,5.583,4279,5.583,4615,5.583,4616,6.335,4617,6.335]],["title/properties.html",[319,0.134,4345,2.922]],["body/properties.html",[19,0.009,317,0.009,318,0.009,319,0.183,1649,3.644,4618,7.182,4619,7.182,4620,7.182,4621,7.182,4622,7.182]],["title/miscellaneous/typealiases.html",[4391,2.71,4623,5.257]],["body/miscellaneous/typealiases.html",[5,0.056,6,2.427,7,0.067,9,2.293,10,2.293,11,2.907,12,2.907,13,2.907,15,3.76,16,0.52,18,0.489,19,0.01,21,0.149,27,3.76,51,0.858,53,2.424,57,1.21,58,2.815,60,3.369,61,1.769,62,2.519,63,1.5,64,2.519,65,2.519,66,1.35,67,1.331,68,2.519,69,1.723,70,2.341,71,2.172,72,2.053,73,1.905,74,1.511,75,2.115,81,1.317,82,1.192,84,3.348,85,0.489,86,1.267,87,3.348,89,3.348,94,0.191,98,3.225,110,3.348,112,1.436,118,1.177,119,1.725,120,2.341,124,3.348,125,3.348,128,2.118,129,3.928,131,3.348,135,3.348,143,3.348,152,3.348,156,1.933,157,3.348,159,2.341,160,2.262,161,2.262,162,2.519,163,0.753,164,0.779,165,0.644,166,2.519,167,3.348,169,3.348,171,3.348,172,3.348,173,3.348,174,3.348,178,0.693,183,1.4,185,2.341,186,3.348,187,0.277,207,1.331,231,4.467,233,3.348,266,3.348,267,3.348,270,1.12,314,3.348,315,2.293,317,0.007,318,0.007,339,1.774,345,3.225,355,2.15,358,2.732,361,3.562,362,3.562,363,3.562,366,4.007,381,0.629,400,1.148,424,1.453,425,2.341,426,2.519,432,2.188,480,1.725,499,3.154,507,2.907,509,3.63,521,4.19,526,3.63,539,2.341,546,2.621,562,4.19,569,2.728,617,3.482,618,4.19,619,4.19,620,3.154,622,4.19,629,1.331,685,2.255,686,4.733,868,3.562,869,5.2,871,3.339,875,2.621,880,1.206,881,2.855,884,4.733,888,3.154,891,3.339,900,2.262,901,4.762,902,2.188,903,2.994,904,2.855,921,2.341,945,1.635,966,3.111,998,3.111,1028,1.373,1033,1.511,1142,1.592,1272,2.732,1296,2.907,1370,3.841,1573,3.979,1585,3.562,1589,3.064,1590,3.482,1591,3.154,1592,3.339,1595,2.519,1647,1.824,1657,2.341,1761,2.427,1970,6.186,2075,3.562,2096,2.519,2128,2.855,2129,3.154,2250,3.841,2251,3.841,2276,6.359,2278,5.31,2279,5.962,2280,5.104,2281,5.104,2282,6.109,2284,3.562,2329,3.841,2370,4.344,2494,3.154,2511,3.841,2555,5.104,2563,5.601,2880,3.562,3000,3.841,3095,4.215,3151,3.562,3156,5.104,3159,6.775,3160,5.104,3164,4.733,3166,4.733,3170,4.733,3179,4.733,3181,3.841,3182,4.733,3183,4.733,3184,5.104,4166,4.215,4391,3.562,4393,4.215,4402,7.526,4404,7.174,4409,8.089,4410,5.601,4512,4.215,4557,4.215,4573,5.601,4624,4.783,4625,7.606,4626,4.783,4627,4.783,4628,7.606,4629,6.356,4630,7.138,4631,6.356,4632,4.783,4633,6.356,4634,7.138,4635,6.356,4636,6.356,4637,4.783,4638,4.783,4639,4.783,4640,4.783,4641,4.783,4642,4.783,4643,4.783,4644,4.783,4645,6.356,4646,4.783,4647,4.783,4648,4.783,4649,4.783,4650,4.783,4651,4.783,4652,4.783,4653,4.783]]],"invertedIndex":[["",{"_index":19,"title":{},"body":{"classes/AbstractOpFactory.html":{},"classes/BaseOp.html":{},"interfaces/Bounds.html":{},"classes/Branch.html":{},"classes/Bus.html":{},"classes/Cell.html":{},"interfaces/ChainIndex.html":{},"interfaces/ChainOp.html":{},"components/ConnectionComponent.html":{},"interfaces/Crossing.html":{},"classes/DBListener.html":{},"classes/DBListenerArray.html":{},"classes/DBNode.html":{},"classes/DBNodeArray.html":{},"classes/DBTwoWay.html":{},"classes/DBTwoWayArray.html":{},"classes/DBWriteBuffer.html":{},"classes/DBWriter.html":{},"classes/DBWriterArray.html":{},"interfaces/DensityUnits.html":{},"interfaces/DesignActions.html":{},"interfaces/DesignMode.html":{},"interfaces/DraftMap.html":{},"interfaces/DraftNodeProxy.html":{},"interfaces/DraftOperationClassification.html":{},"components/DraftdetailComponent.html":{},"interfaces/DynamicOperation.html":{},"interfaces/FileObj.html":{},"interfaces/FileSaver.html":{},"interfaces/Fileloader.html":{},"interfaces/IOTuple.html":{},"components/ImageComponent.html":{},"interfaces/Ink.html":{},"injectables/InkService.html":{},"components/InletComponent.html":{},"interfaces/Interlacement.html":{},"interfaces/InterlacementVal.html":{},"injectables/LayersService.html":{},"interfaces/LoadResponse.html":{},"interfaces/LoomConfig.html":{},"interfaces/LoomTypes.html":{},"injectables/MappingsService.html":{},"directives/MarqueeComponent.html":{},"interfaces/MaterialTypes.html":{},"classes/Merge.html":{},"modules/MixerModule.html":{},"components/MixerViewComponent.html":{},"interfaces/NodeComponentProxy.html":{},"interfaces/NodeMethods.html":{},"interfaces/NodeParams.html":{},"components/NoteComponent.html":{},"classes/OnlineStatus.html":{},"interfaces/OpClassifier.html":{},"interfaces/OpComponentProxy.html":{},"components/OpHelpModal.html":{},"interfaces/OpInput.html":{},"classes/OpSequencer.html":{},"components/OpSequencerComponent.html":{},"interfaces/OperationClassification.html":{},"interfaces/OperationParam.html":{},"interfaces/OperationProperties.html":{},"components/OpsComponent.html":{},"interfaces/PairedOp.html":{},"components/ParameterComponent.html":{},"classes/Params.html":{},"interfaces/Pedal.html":{},"classes/PedalConfig.html":{},"interfaces/PedalEvent.html":{},"classes/PedalStatus.html":{},"injectables/PedalsService.html":{},"classes/Pipe.html":{},"components/PlayerComponent.html":{},"modules/PlayerModule.html":{},"interfaces/PlayerOp.html":{},"injectables/PlayerService.html":{},"interfaces/PlayerState.html":{},"interfaces/PlayerState-1.html":{},"interfaces/Point.html":{},"classes/Render.html":{},"interfaces/SaveObj.html":{},"classes/Seed.html":{},"classes/Selection.html":{},"directives/SelectionComponent.html":{},"injectables/SequencerService.html":{},"classes/Shape.html":{},"classes/Shape-1.html":{},"classes/Shuttle.html":{},"components/SnackbarComponent.html":{},"interfaces/StatusMessage.html":{},"classes/System.html":{},"interfaces/TopologyDef.html":{},"interfaces/TreeNode.html":{},"interfaces/TreeNodeProxy.html":{},"interfaces/TreeOperation.html":{},"interfaces/Vertex.html":{},"interfaces/ViewModes.html":{},"injectables/ViewportService.html":{},"components/VirtualPedalsComponent.html":{},"interfaces/WeavingLog.html":{},"interfaces/WeavingPick.html":{},"interfaces/WeavingPick-1.html":{},"components/WeavingStateComponent.html":{},"interfaces/YarnPath.html":{},"dependencies.html":{},"miscellaneous/functions.html":{},"index.html":{},"modules.html":{},"overview.html":{},"properties.html":{},"miscellaneous/typealiases.html":{}}}],["0",{"_index":163,"title":{},"body":{"classes/AbstractOpFactory.html":{},"classes/BaseOp.html":{},"classes/Branch.html":{},"classes/Bus.html":{},"interfaces/ChainOp.html":{},"components/ConnectionComponent.html":{},"classes/DBListener.html":{},"classes/DBListenerArray.html":{},"classes/DBNode.html":{},"classes/DBNodeArray.html":{},"classes/DBTwoWay.html":{},"classes/DBTwoWayArray.html":{},"classes/DBWriteBuffer.html":{},"classes/DBWriter.html":{},"classes/DBWriterArray.html":{},"interfaces/DesignActions.html":{},"interfaces/DraftMap.html":{},"interfaces/DraftOperationClassification.html":{},"interfaces/DynamicOperation.html":{},"interfaces/IOTuple.html":{},"interfaces/Interlacement.html":{},"interfaces/InterlacementVal.html":{},"injectables/LayersService.html":{},"interfaces/LoomConfig.html":{},"injectables/MappingsService.html":{},"directives/MarqueeComponent.html":{},"classes/Merge.html":{},"components/MixerViewComponent.html":{},"interfaces/NodeMethods.html":{},"interfaces/NodeParams.html":{},"components/NoteComponent.html":{},"classes/OnlineStatus.html":{},"interfaces/OpClassifier.html":{},"components/OpHelpModal.html":{},"interfaces/OpInput.html":{},"classes/OpSequencer.html":{},"components/OpSequencerComponent.html":{},"interfaces/OperationClassification.html":{},"interfaces/OperationProperties.html":{},"interfaces/PairedOp.html":{},"components/ParameterComponent.html":{},"interfaces/Pedal.html":{},"classes/PedalConfig.html":{},"interfaces/PedalEvent.html":{},"classes/PedalStatus.html":{},"injectables/PedalsService.html":{},"classes/Pipe.html":{},"interfaces/PlayerOp.html":{},"injectables/PlayerService.html":{},"interfaces/PlayerState.html":{},"interfaces/PlayerState-1.html":{},"classes/Render.html":{},"classes/Seed.html":{},"classes/Selection.html":{},"directives/SelectionComponent.html":{},"classes/Shape.html":{},"classes/Shape-1.html":{},"classes/Shuttle.html":{},"classes/System.html":{},"interfaces/TopologyDef.html":{},"interfaces/TreeNode.html":{},"interfaces/TreeOperation.html":{},"injectables/ViewportService.html":{},"components/VirtualPedalsComponent.html":{},"interfaces/WeavingLog.html":{},"interfaces/WeavingPick.html":{},"interfaces/WeavingPick-1.html":{},"components/WeavingStateComponent.html":{},"miscellaneous/functions.html":{},"miscellaneous/typealiases.html":{}}}],["0.0.6",{"_index":4367,"title":{},"body":{"dependencies.html":{}}}],["0.11.4",{"_index":4390,"title":{},"body":{"dependencies.html":{}}}],["0.50",{"_index":3123,"title":{},"body":{"components/OpSequencerComponent.html":{},"components/PlayerComponent.html":{},"components/WeavingStateComponent.html":{}}}],["0.8.0",{"_index":4369,"title":{},"body":{"dependencies.html":{}}}],["00d1b2",{"_index":2479,"title":{},"body":{"components/InletComponent.html":{},"components/OpHelpModal.html":{},"components/OpsComponent.html":{},"components/SnackbarComponent.html":{}}}],["0101",{"_index":4647,"title":{},"body":{"miscellaneous/typealiases.html":{}}}],["0][0",{"_index":4564,"title":{},"body":{"index.html":{}}}],["0a0000",{"_index":4335,"title":{},"body":{"components/WeavingStateComponent.html":{}}}],["0pt",{"_index":3117,"title":{},"body":{"components/OpSequencerComponent.html":{},"components/PlayerComponent.html":{},"components/WeavingStateComponent.html":{}}}],["0px",{"_index":824,"title":{},"body":{"components/ConnectionComponent.html":{},"components/DraftdetailComponent.html":{},"components/MixerViewComponent.html":{},"components/NoteComponent.html":{},"components/OpSequencerComponent.html":{},"components/OpsComponent.html":{},"components/ParameterComponent.html":{},"components/PlayerComponent.html":{},"components/WeavingStateComponent.html":{}}}],["1",{"_index":164,"title":{"interfaces/PlayerState-1.html":{},"classes/Shape-1.html":{},"interfaces/WeavingPick-1.html":{}},"body":{"classes/AbstractOpFactory.html":{},"classes/BaseOp.html":{},"classes/Branch.html":{},"classes/Bus.html":{},"interfaces/ChainOp.html":{},"components/ConnectionComponent.html":{},"classes/DBListener.html":{},"classes/DBListenerArray.html":{},"classes/DBNode.html":{},"classes/DBNodeArray.html":{},"classes/DBTwoWay.html":{},"classes/DBTwoWayArray.html":{},"classes/DBWriteBuffer.html":{},"classes/DBWriter.html":{},"classes/DBWriterArray.html":{},"interfaces/DesignActions.html":{},"interfaces/DraftMap.html":{},"interfaces/DraftOperationClassification.html":{},"interfaces/DynamicOperation.html":{},"interfaces/IOTuple.html":{},"components/InletComponent.html":{},"interfaces/Interlacement.html":{},"interfaces/InterlacementVal.html":{},"interfaces/LoomConfig.html":{},"injectables/MappingsService.html":{},"classes/Merge.html":{},"components/MixerViewComponent.html":{},"interfaces/NodeMethods.html":{},"interfaces/NodeParams.html":{},"classes/OnlineStatus.html":{},"interfaces/OpClassifier.html":{},"interfaces/OpInput.html":{},"classes/OpSequencer.html":{},"components/OpSequencerComponent.html":{},"interfaces/OperationClassification.html":{},"interfaces/OperationProperties.html":{},"components/OpsComponent.html":{},"interfaces/PairedOp.html":{},"components/ParameterComponent.html":{},"interfaces/Pedal.html":{},"classes/PedalConfig.html":{},"interfaces/PedalEvent.html":{},"classes/PedalStatus.html":{},"injectables/PedalsService.html":{},"classes/Pipe.html":{},"components/PlayerComponent.html":{},"interfaces/PlayerOp.html":{},"injectables/PlayerService.html":{},"classes/Render.html":{},"classes/Seed.html":{},"classes/Selection.html":{},"injectables/SequencerService.html":{},"classes/Shape.html":{},"classes/Shuttle.html":{},"classes/System.html":{},"interfaces/TopologyDef.html":{},"interfaces/TreeNode.html":{},"interfaces/TreeOperation.html":{},"components/VirtualPedalsComponent.html":{},"components/WeavingStateComponent.html":{},"miscellaneous/functions.html":{},"miscellaneous/typealiases.html":{}}}],["1).length",{"_index":2216,"title":{},"body":{"interfaces/DynamicOperation.html":{},"interfaces/OpInput.html":{},"interfaces/OperationClassification.html":{},"interfaces/TreeOperation.html":{}}}],["1.0.5",{"_index":4371,"title":{},"body":{"dependencies.html":{}}}],["1.1em",{"_index":3342,"title":{},"body":{"components/ParameterComponent.html":{}}}],["1.25",{"_index":3818,"title":{},"body":{"classes/Render.html":{}}}],["1.2em",{"_index":3009,"title":{},"body":{"components/OpHelpModal.html":{}}}],["1.5",{"_index":3817,"title":{},"body":{"classes/Render.html":{}}}],["1.75",{"_index":3815,"title":{},"body":{"classes/Render.html":{}}}],["1.8em",{"_index":3007,"title":{},"body":{"components/OpHelpModal.html":{}}}],["10",{"_index":2066,"title":{},"body":{"components/DraftdetailComponent.html":{},"components/NoteComponent.html":{},"classes/Render.html":{},"components/WeavingStateComponent.html":{}}}],["100",{"_index":2773,"title":{},"body":{"components/MixerViewComponent.html":{},"components/OpSequencerComponent.html":{},"components/OpsComponent.html":{},"components/ParameterComponent.html":{},"components/PlayerComponent.html":{},"classes/Render.html":{},"components/SnackbarComponent.html":{},"components/WeavingStateComponent.html":{}}}],["10px",{"_index":3110,"title":{},"body":{"components/OpSequencerComponent.html":{},"components/OpsComponent.html":{},"components/ParameterComponent.html":{},"components/PlayerComponent.html":{},"components/WeavingStateComponent.html":{}}}],["11.0.0",{"_index":4381,"title":{},"body":{"dependencies.html":{}}}],["1100",{"_index":4648,"title":{},"body":{"miscellaneous/typealiases.html":{}}}],["12",{"_index":3786,"title":{},"body":{"classes/Render.html":{}}}],["121f6b",{"_index":3128,"title":{},"body":{"components/OpSequencerComponent.html":{},"components/PlayerComponent.html":{},"components/WeavingStateComponent.html":{}}}],["1255px",{"_index":4333,"title":{},"body":{"components/WeavingStateComponent.html":{}}}],["129",{"_index":3351,"title":{},"body":{"components/ParameterComponent.html":{}}}],["13.0.2",{"_index":4360,"title":{},"body":{"dependencies.html":{}}}],["13.1.1",{"_index":4347,"title":{},"body":{"dependencies.html":{}}}],["130px",{"_index":4344,"title":{},"body":{"components/WeavingStateComponent.html":{}}}],["14px",{"_index":3101,"title":{},"body":{"components/OpSequencerComponent.html":{},"components/OpsComponent.html":{},"components/WeavingStateComponent.html":{}}}],["15",{"_index":753,"title":{},"body":{"components/ConnectionComponent.html":{},"classes/Render.html":{}}}],["15*this.scale/this.default_cell_size",{"_index":740,"title":{},"body":{"components/ConnectionComponent.html":{}}}],["150",{"_index":4034,"title":{},"body":{"classes/Shape-1.html":{}}}],["16px",{"_index":2854,"title":{},"body":{"components/MixerViewComponent.html":{}}}],["18",{"_index":4616,"title":{},"body":{"overview.html":{}}}],["18px",{"_index":2104,"title":{},"body":{"components/DraftdetailComponent.html":{}}}],["19",{"_index":4337,"title":{},"body":{"components/WeavingStateComponent.html":{}}}],["1]+1",{"_index":4162,"title":{},"body":{"classes/System.html":{}}}],["1em",{"_index":2112,"title":{},"body":{"components/DraftdetailComponent.html":{},"components/MixerViewComponent.html":{},"components/OpsComponent.html":{},"components/SnackbarComponent.html":{},"components/VirtualPedalsComponent.html":{}}}],["1px",{"_index":3132,"title":{},"body":{"components/OpSequencerComponent.html":{},"components/PlayerComponent.html":{},"components/WeavingStateComponent.html":{}}}],["2",{"_index":795,"title":{},"body":{"components/ConnectionComponent.html":{},"interfaces/DraftOperationClassification.html":{},"interfaces/IOTuple.html":{},"interfaces/LoomConfig.html":{},"classes/OpSequencer.html":{},"classes/PedalConfig.html":{},"injectables/PlayerService.html":{},"classes/Render.html":{},"interfaces/TreeNode.html":{},"components/VirtualPedalsComponent.html":{},"overview.html":{}}}],["2.2.0",{"_index":4618,"title":{},"body":{"properties.html":{}}}],["2.3*h+t).tostring",{"_index":3677,"title":{},"body":{"components/PlayerComponent.html":{}}}],["2.3.1",{"_index":4388,"title":{},"body":{"dependencies.html":{}}}],["20",{"_index":2931,"title":{},"body":{"components/NoteComponent.html":{}}}],["200",{"_index":2888,"title":{},"body":{"components/NoteComponent.html":{}}}],["200px",{"_index":2105,"title":{},"body":{"components/DraftdetailComponent.html":{}}}],["20px",{"_index":2113,"title":{},"body":{"components/DraftdetailComponent.html":{},"components/OpSequencerComponent.html":{},"components/OpsComponent.html":{},"components/WeavingStateComponent.html":{}}}],["210px",{"_index":3106,"title":{},"body":{"components/OpSequencerComponent.html":{},"components/PlayerComponent.html":{}}}],["214",{"_index":4343,"title":{},"body":{"components/WeavingStateComponent.html":{}}}],["222222",{"_index":4338,"title":{},"body":{"components/WeavingStateComponent.html":{}}}],["25",{"_index":3340,"title":{},"body":{"components/ParameterComponent.html":{},"classes/Render.html":{}}}],["250",{"_index":2780,"title":{},"body":{"components/MixerViewComponent.html":{}}}],["250px",{"_index":2846,"title":{},"body":{"components/MixerViewComponent.html":{}}}],["255",{"_index":3122,"title":{},"body":{"components/OpSequencerComponent.html":{},"components/PlayerComponent.html":{},"components/WeavingStateComponent.html":{}}}],["257px",{"_index":2849,"title":{},"body":{"components/MixerViewComponent.html":{}}}],["2640",{"_index":1800,"title":{},"body":{"interfaces/DraftOperationClassification.html":{},"interfaces/LoomConfig.html":{},"classes/PedalConfig.html":{},"injectables/PlayerService.html":{}}}],["2d",{"_index":1592,"title":{},"body":{"interfaces/DraftMap.html":{},"interfaces/Interlacement.html":{},"interfaces/InterlacementVal.html":{},"classes/Shape-1.html":{},"miscellaneous/typealiases.html":{}}}],["2em",{"_index":3269,"title":{},"body":{"components/OpsComponent.html":{}}}],["2px",{"_index":2852,"title":{},"body":{"components/MixerViewComponent.html":{},"components/WeavingStateComponent.html":{}}}],["3",{"_index":2848,"title":{},"body":{"components/MixerViewComponent.html":{},"classes/Shape.html":{},"components/VirtualPedalsComponent.html":{}}}],["3*this.scale",{"_index":777,"title":{},"body":{"components/ConnectionComponent.html":{}}}],["3*this.scale/this.default_cell_size",{"_index":752,"title":{},"body":{"components/ConnectionComponent.html":{}}}],["3.0",{"_index":4621,"title":{},"body":{"properties.html":{}}}],["3.6.4",{"_index":4374,"title":{},"body":{"dependencies.html":{}}}],["30",{"_index":780,"title":{},"body":{"components/ConnectionComponent.html":{},"overview.html":{}}}],["30px",{"_index":2474,"title":{},"body":{"components/InletComponent.html":{},"components/MixerViewComponent.html":{},"components/NoteComponent.html":{},"components/ParameterComponent.html":{}}}],["32px",{"_index":2841,"title":{},"body":{"components/MixerViewComponent.html":{}}}],["333333",{"_index":2845,"title":{},"body":{"components/MixerViewComponent.html":{},"components/OpsComponent.html":{}}}],["34px",{"_index":2487,"title":{},"body":{"components/InletComponent.html":{}}}],["350",{"_index":2778,"title":{},"body":{"components/MixerViewComponent.html":{}}}],["35px",{"_index":2492,"title":{},"body":{"components/InletComponent.html":{}}}],["370px",{"_index":4334,"title":{},"body":{"components/WeavingStateComponent.html":{}}}],["3d3d3d",{"_index":2100,"title":{},"body":{"components/DraftdetailComponent.html":{}}}],["3f51b5",{"_index":3102,"title":{},"body":{"components/OpSequencerComponent.html":{},"components/WeavingStateComponent.html":{}}}],["4",{"_index":3785,"title":{},"body":{"classes/Render.html":{},"components/VirtualPedalsComponent.html":{}}}],["4.14.149",{"_index":4365,"title":{},"body":{"dependencies.html":{}}}],["4.17.15",{"_index":4377,"title":{},"body":{"dependencies.html":{}}}],["40px",{"_index":3346,"title":{},"body":{"components/ParameterComponent.html":{}}}],["42",{"_index":2115,"title":{},"body":{"components/DraftdetailComponent.html":{}}}],["444444",{"_index":4341,"title":{},"body":{"components/WeavingStateComponent.html":{}}}],["48px",{"_index":2840,"title":{},"body":{"components/MixerViewComponent.html":{}}}],["4px",{"_index":2489,"title":{},"body":{"components/InletComponent.html":{},"components/OpsComponent.html":{}}}],["5",{"_index":1331,"title":{},"body":{"interfaces/DesignActions.html":{},"components/NoteComponent.html":{},"classes/Render.html":{},"components/VirtualPedalsComponent.html":{}}}],["5.0.10",{"_index":4386,"title":{},"body":{"dependencies.html":{}}}],["50",{"_index":1374,"title":{},"body":{"interfaces/DesignActions.html":{},"components/ParameterComponent.html":{}}}],["51",{"_index":4617,"title":{},"body":{"overview.html":{}}}],["566be2",{"_index":3139,"title":{},"body":{"components/OpSequencerComponent.html":{},"components/PlayerComponent.html":{},"components/WeavingStateComponent.html":{}}}],["5px",{"_index":3683,"title":{},"body":{"components/PlayerComponent.html":{},"components/WeavingStateComponent.html":{}}}],["6",{"_index":4277,"title":{},"body":{"components/VirtualPedalsComponent.html":{}}}],["6.0.0",{"_index":4383,"title":{},"body":{"dependencies.html":{}}}],["6.1.1",{"_index":4358,"title":{},"body":{"dependencies.html":{}}}],["6.5.4",{"_index":4384,"title":{},"body":{"dependencies.html":{}}}],["60",{"_index":1406,"title":{},"body":{"interfaces/DesignActions.html":{}}}],["60px",{"_index":3345,"title":{},"body":{"components/ParameterComponent.html":{}}}],["64",{"_index":3350,"title":{},"body":{"components/ParameterComponent.html":{}}}],["666666",{"_index":2925,"title":{},"body":{"components/NoteComponent.html":{}}}],["6px",{"_index":2495,"title":{},"body":{"components/InletComponent.html":{},"components/MixerViewComponent.html":{},"components/ParameterComponent.html":{}}}],["7",{"_index":4278,"title":{},"body":{"components/VirtualPedalsComponent.html":{}}}],["7.0.4",{"_index":4351,"title":{},"body":{"dependencies.html":{}}}],["7.3.8",{"_index":4476,"title":{},"body":{"index.html":{}}}],["7.5.1",{"_index":4378,"title":{},"body":{"dependencies.html":{}}}],["70",{"_index":3343,"title":{},"body":{"components/ParameterComponent.html":{}}}],["75",{"_index":3344,"title":{},"body":{"components/ParameterComponent.html":{},"classes/Render.html":{}}}],["8",{"_index":1537,"title":{},"body":{"interfaces/DesignActions.html":{},"components/PlayerComponent.html":{},"classes/Render.html":{},"components/VirtualPedalsComponent.html":{}}}],["8.ng",{"_index":3145,"title":{},"body":{"components/OpSequencerComponent.html":{}}}],["80",{"_index":2123,"title":{},"body":{"components/DraftdetailComponent.html":{}}}],["800",{"_index":2938,"title":{},"body":{"components/NoteComponent.html":{}}}],["8em",{"_index":2108,"title":{},"body":{"components/DraftdetailComponent.html":{},"components/MixerViewComponent.html":{},"components/OpSequencerComponent.html":{},"components/OpsComponent.html":{},"components/ParameterComponent.html":{}}}],["8px",{"_index":2483,"title":{},"body":{"components/InletComponent.html":{},"components/MixerViewComponent.html":{},"components/ParameterComponent.html":{}}}],["9",{"_index":4279,"title":{},"body":{"components/VirtualPedalsComponent.html":{},"overview.html":{}}}],["9.4.0",{"_index":4375,"title":{},"body":{"dependencies.html":{}}}],["95",{"_index":3108,"title":{},"body":{"components/OpSequencerComponent.html":{},"components/OpsComponent.html":{}}}],["9em",{"_index":2859,"title":{},"body":{"components/MixerViewComponent.html":{}}}],["9px",{"_index":2858,"title":{},"body":{"components/MixerViewComponent.html":{},"components/ParameterComponent.html":{}}}],["_active",{"_index":925,"title":{},"body":{"classes/DBListener.html":{},"classes/DBListenerArray.html":{},"classes/DBNode.html":{},"classes/DBNodeArray.html":{},"classes/DBTwoWay.html":{},"classes/DBTwoWayArray.html":{},"classes/DBWriteBuffer.html":{},"classes/DBWriter.html":{},"classes/DBWriterArray.html":{},"interfaces/NodeMethods.html":{},"interfaces/NodeParams.html":{},"classes/OnlineStatus.html":{}}}],["_active_draft",{"_index":3645,"title":{},"body":{"components/PlayerComponent.html":{}}}],["_bitmap.jpg",{"_index":1529,"title":{},"body":{"interfaces/DesignActions.html":{}}}],["_bounds:bounds",{"_index":1339,"title":{},"body":{"interfaces/DesignActions.html":{}}}],["_dbref",{"_index":926,"title":{},"body":{"classes/DBListener.html":{},"classes/DBListenerArray.html":{},"classes/DBNode.html":{},"classes/DBNodeArray.html":{},"classes/DBTwoWay.html":{},"classes/DBTwoWayArray.html":{},"classes/DBWriteBuffer.html":{},"classes/DBWriter.html":{},"classes/DBWriterArray.html":{},"interfaces/NodeMethods.html":{},"interfaces/NodeParams.html":{},"classes/OnlineStatus.html":{}}}],["_draft:draft",{"_index":1335,"title":{},"body":{"interfaces/DesignActions.html":{}}}],["_filter",{"_index":3214,"title":{},"body":{"components/OpsComponent.html":{}}}],["_filter(value",{"_index":3222,"title":{},"body":{"components/OpsComponent.html":{}}}],["_name",{"_index":927,"title":{},"body":{"classes/DBListener.html":{},"classes/DBListenerArray.html":{},"classes/DBNode.html":{},"classes/DBNodeArray.html":{},"classes/DBTwoWay.html":{},"classes/DBTwoWayArray.html":{},"classes/DBWriteBuffer.html":{},"classes/DBWriter.html":{},"classes/DBWriterArray.html":{},"interfaces/NodeMethods.html":{},"interfaces/NodeParams.html":{},"classes/OnlineStatus.html":{}}}],["_pos",{"_index":3014,"title":{},"body":{"classes/OpSequencer.html":{},"injectables/SequencerService.html":{}}}],["_ref",{"_index":1017,"title":{},"body":{"classes/DBListener.html":{},"classes/DBListenerArray.html":{},"classes/DBNode.html":{},"classes/DBNodeArray.html":{},"classes/DBTwoWay.html":{},"classes/DBTwoWayArray.html":{},"classes/DBWriteBuffer.html":{},"classes/DBWriter.html":{},"classes/DBWriterArray.html":{},"interfaces/NodeMethods.html":{},"interfaces/NodeParams.html":{},"classes/OnlineStatus.html":{}}}],["_scale",{"_index":1365,"title":{},"body":{"interfaces/DesignActions.html":{},"components/NoteComponent.html":{}}}],["_scale:number",{"_index":1330,"title":{},"body":{"interfaces/DesignActions.html":{},"components/NoteComponent.html":{}}}],["_val",{"_index":928,"title":{},"body":{"classes/DBListener.html":{},"classes/DBListenerArray.html":{},"classes/DBNode.html":{},"classes/DBNodeArray.html":{},"classes/DBTwoWay.html":{},"classes/DBTwoWayArray.html":{},"classes/DBWriteBuffer.html":{},"classes/DBWriter.html":{},"classes/DBWriterArray.html":{},"interfaces/NodeMethods.html":{},"interfaces/NodeParams.html":{},"classes/OnlineStatus.html":{}}}],["a.click",{"_index":1530,"title":{},"body":{"interfaces/DesignActions.html":{}}}],["a.download",{"_index":1527,"title":{},"body":{"interfaces/DesignActions.html":{}}}],["a.href",{"_index":1525,"title":{},"body":{"interfaces/DesignActions.html":{}}}],["above",{"_index":2998,"title":{},"body":{"components/OpHelpModal.html":{},"index.html":{}}}],["abs_topleft",{"_index":4256,"title":{},"body":{"injectables/ViewportService.html":{}}}],["absolute",{"_index":822,"title":{},"body":{"components/ConnectionComponent.html":{},"interfaces/DesignActions.html":{},"interfaces/DraftMap.html":{},"interfaces/Interlacement.html":{},"interfaces/InterlacementVal.html":{},"components/MixerViewComponent.html":{},"components/NoteComponent.html":{},"injectables/ViewportService.html":{}}}],["absolution",{"_index":1489,"title":{},"body":{"interfaces/DesignActions.html":{}}}],["abstract",{"_index":972,"title":{},"body":{"classes/DBListener.html":{},"classes/DBListenerArray.html":{},"classes/DBNode.html":{},"classes/DBNodeArray.html":{},"classes/DBTwoWay.html":{},"classes/DBTwoWayArray.html":{},"classes/DBWriteBuffer.html":{},"classes/DBWriter.html":{},"classes/DBWriterArray.html":{},"interfaces/NodeMethods.html":{},"interfaces/NodeParams.html":{},"classes/OnlineStatus.html":{}}}],["abstractcontrol",{"_index":3299,"title":{},"body":{"components/ParameterComponent.html":{}}}],["abstractopfactory",{"_index":1,"title":{"classes/AbstractOpFactory.html":{}},"body":{"classes/AbstractOpFactory.html":{},"classes/BaseOp.html":{},"classes/Branch.html":{},"classes/Bus.html":{},"classes/Merge.html":{},"interfaces/OpClassifier.html":{},"interfaces/OperationProperties.html":{},"classes/Pipe.html":{},"classes/Seed.html":{},"interfaces/TopologyDef.html":{}}}],["acc",{"_index":4173,"title":{},"body":{"classes/System.html":{}}}],["acc.concat(ds",{"_index":2157,"title":{},"body":{"interfaces/DynamicOperation.html":{},"interfaces/OpInput.html":{},"interfaces/OperationClassification.html":{},"interfaces/TreeOperation.html":{}}}],["acc.concat(el",{"_index":2152,"title":{},"body":{"interfaces/DynamicOperation.html":{},"interfaces/OpInput.html":{},"interfaces/OperationClassification.html":{},"interfaces/TreeOperation.html":{}}}],["accept",{"_index":153,"title":{},"body":{"classes/AbstractOpFactory.html":{},"classes/BaseOp.html":{},"classes/Branch.html":{},"classes/Bus.html":{},"classes/Merge.html":{},"interfaces/OpClassifier.html":{},"components/OpHelpModal.html":{},"interfaces/OperationProperties.html":{},"classes/Pipe.html":{},"classes/Seed.html":{},"interfaces/TopologyDef.html":{}}}],["access",{"_index":3310,"title":{},"body":{"components/ParameterComponent.html":{},"classes/Shape.html":{}}}],["accessors",{"_index":1175,"title":{},"body":{"classes/DBNode.html":{},"classes/DBNodeArray.html":{},"injectables/MappingsService.html":{},"components/NoteComponent.html":{},"classes/OpSequencer.html":{},"classes/PedalConfig.html":{},"injectables/PedalsService.html":{},"injectables/PlayerService.html":{},"injectables/SequencerService.html":{}}}],["accordingly",{"_index":3472,"title":{},"body":{"interfaces/Pedal.html":{},"classes/PedalStatus.html":{},"injectables/PedalsService.html":{}}}],["accordion",{"_index":3129,"title":{},"body":{"components/OpSequencerComponent.html":{},"components/PlayerComponent.html":{},"components/WeavingStateComponent.html":{}}}],["account",{"_index":2252,"title":{},"body":{"interfaces/IOTuple.html":{},"interfaces/TreeNode.html":{}}}],["action",{"_index":359,"title":{},"body":{"interfaces/Bounds.html":{},"interfaces/DraftOperationClassification.html":{},"interfaces/LoomConfig.html":{},"components/OpsComponent.html":{},"classes/PedalConfig.html":{},"injectables/PlayerService.html":{},"interfaces/Point.html":{},"index.html":{}}}],["active",{"_index":460,"title":{},"body":{"interfaces/ChainIndex.html":{},"classes/DBListener.html":{},"classes/DBListenerArray.html":{},"classes/DBNode.html":{},"classes/DBNodeArray.html":{},"classes/DBTwoWay.html":{},"classes/DBTwoWayArray.html":{},"classes/DBWriteBuffer.html":{},"classes/DBWriter.html":{},"classes/DBWriterArray.html":{},"interfaces/DraftOperationClassification.html":{},"interfaces/IOTuple.html":{},"interfaces/LoomConfig.html":{},"directives/MarqueeComponent.html":{},"interfaces/NodeMethods.html":{},"interfaces/NodeParams.html":{},"classes/OnlineStatus.html":{},"components/ParameterComponent.html":{},"interfaces/Pedal.html":{},"classes/PedalConfig.html":{},"classes/PedalStatus.html":{},"injectables/PedalsService.html":{},"injectables/PlayerService.html":{},"directives/SelectionComponent.html":{},"injectables/SequencerService.html":{},"interfaces/TreeNode.html":{},"components/WeavingStateComponent.html":{}}}],["active(tf",{"_index":993,"title":{},"body":{"classes/DBListener.html":{},"classes/DBListenerArray.html":{},"classes/DBNode.html":{},"classes/DBNodeArray.html":{},"classes/DBTwoWay.html":{},"classes/DBTwoWayArray.html":{},"classes/DBWriteBuffer.html":{},"classes/DBWriter.html":{},"classes/DBWriterArray.html":{},"interfaces/NodeMethods.html":{},"interfaces/NodeParams.html":{},"classes/OnlineStatus.html":{}}}],["active_draft",{"_index":3382,"title":{},"body":{"interfaces/Pedal.html":{},"classes/PedalStatus.html":{},"injectables/PedalsService.html":{},"components/PlayerComponent.html":{},"components/WeavingStateComponent.html":{}}}],["actual",{"_index":2569,"title":{},"body":{"injectables/MappingsService.html":{},"index.html":{}}}],["actual_component",{"_index":866,"title":{},"body":{"components/ConnectionComponent.html":{},"components/DraftdetailComponent.html":{},"components/ImageComponent.html":{},"components/InletComponent.html":{},"components/MixerViewComponent.html":{},"components/NoteComponent.html":{},"components/OpHelpModal.html":{},"components/OpSequencerComponent.html":{},"components/OpsComponent.html":{},"components/ParameterComponent.html":{},"components/PlayerComponent.html":{},"components/SnackbarComponent.html":{},"components/VirtualPedalsComponent.html":{},"components/WeavingStateComponent.html":{}}}],["actually",{"_index":3730,"title":{},"body":{"interfaces/PlayerState.html":{},"interfaces/PlayerState-1.html":{},"interfaces/WeavingLog.html":{},"interfaces/WeavingPick.html":{},"interfaces/WeavingPick-1.html":{}}}],["ada",{"_index":1539,"title":{},"body":{"interfaces/DesignActions.html":{},"interfaces/DraftNodeProxy.html":{},"interfaces/FileObj.html":{},"interfaces/FileSaver.html":{},"interfaces/Fileloader.html":{},"interfaces/LoadResponse.html":{},"interfaces/NodeComponentProxy.html":{},"interfaces/OpComponentProxy.html":{},"interfaces/SaveObj.html":{},"interfaces/StatusMessage.html":{},"interfaces/TreeNodeProxy.html":{}}}],["adacad",{"_index":1131,"title":{},"body":{"classes/DBListener.html":{},"classes/DBListenerArray.html":{},"classes/DBNode.html":{},"classes/DBNodeArray.html":{},"classes/DBTwoWay.html":{},"classes/DBTwoWayArray.html":{},"classes/DBWriteBuffer.html":{},"classes/DBWriter.html":{},"classes/DBWriterArray.html":{},"interfaces/NodeMethods.html":{},"interfaces/NodeParams.html":{},"classes/OnlineStatus.html":{},"interfaces/Pedal.html":{},"classes/PedalStatus.html":{},"injectables/PedalsService.html":{},"index.html":{}}}],["add",{"_index":480,"title":{},"body":{"interfaces/ChainIndex.html":{},"classes/DBListener.html":{},"classes/DBListenerArray.html":{},"classes/DBNode.html":{},"classes/DBNodeArray.html":{},"classes/DBTwoWay.html":{},"classes/DBTwoWayArray.html":{},"classes/DBWriteBuffer.html":{},"classes/DBWriter.html":{},"classes/DBWriterArray.html":{},"interfaces/DraftOperationClassification.html":{},"interfaces/LoomConfig.html":{},"injectables/MappingsService.html":{},"interfaces/NodeMethods.html":{},"interfaces/NodeParams.html":{},"classes/OnlineStatus.html":{},"components/OpSequencerComponent.html":{},"interfaces/OperationParam.html":{},"classes/Params.html":{},"classes/PedalConfig.html":{},"injectables/PlayerService.html":{},"injectables/SequencerService.html":{},"miscellaneous/typealiases.html":{}}}],["addchainop",{"_index":3899,"title":{},"body":{"injectables/SequencerService.html":{}}}],["addchainop(o",{"_index":481,"title":{},"body":{"interfaces/ChainIndex.html":{},"injectables/SequencerService.html":{}}}],["added",{"_index":222,"title":{},"body":{"classes/AbstractOpFactory.html":{},"classes/BaseOp.html":{},"classes/Branch.html":{},"classes/Bus.html":{},"classes/DBListener.html":{},"classes/DBListenerArray.html":{},"classes/DBNode.html":{},"classes/DBNodeArray.html":{},"classes/DBTwoWay.html":{},"classes/DBTwoWayArray.html":{},"classes/DBWriteBuffer.html":{},"classes/DBWriter.html":{},"classes/DBWriterArray.html":{},"interfaces/DraftOperationClassification.html":{},"interfaces/LoomConfig.html":{},"classes/Merge.html":{},"interfaces/NodeMethods.html":{},"interfaces/NodeParams.html":{},"classes/OnlineStatus.html":{},"interfaces/OpClassifier.html":{},"interfaces/OperationProperties.html":{},"interfaces/Pedal.html":{},"classes/PedalConfig.html":{},"classes/PedalStatus.html":{},"injectables/PedalsService.html":{},"classes/Pipe.html":{},"injectables/PlayerService.html":{},"classes/Seed.html":{},"interfaces/TopologyDef.html":{},"injectables/ViewportService.html":{}}}],["adding",{"_index":4124,"title":{},"body":{"classes/System.html":{},"miscellaneous/functions.html":{},"index.html":{}}}],["additional",{"_index":2281,"title":{},"body":{"interfaces/IOTuple.html":{},"interfaces/TreeNode.html":{},"miscellaneous/typealiases.html":{}}}],["addnode",{"_index":1159,"title":{},"body":{"classes/DBListenerArray.html":{},"classes/DBTwoWayArray.html":{},"classes/DBWriterArray.html":{}}}],["addnode(initval",{"_index":1118,"title":{},"body":{"classes/DBListener.html":{},"classes/DBListenerArray.html":{},"classes/DBNode.html":{},"classes/DBNodeArray.html":{},"classes/DBTwoWay.html":{},"classes/DBTwoWayArray.html":{},"classes/DBWriteBuffer.html":{},"classes/DBWriter.html":{},"classes/DBWriterArray.html":{},"interfaces/NodeMethods.html":{},"interfaces/NodeParams.html":{},"classes/OnlineStatus.html":{}}}],["addnode(key",{"_index":1083,"title":{},"body":{"classes/DBListener.html":{},"classes/DBListenerArray.html":{},"classes/DBNode.html":{},"classes/DBNodeArray.html":{},"classes/DBTwoWay.html":{},"classes/DBTwoWayArray.html":{},"classes/DBWriteBuffer.html":{},"classes/DBWriter.html":{},"classes/DBWriterArray.html":{},"interfaces/NodeMethods.html":{},"interfaces/NodeParams.html":{},"classes/OnlineStatus.html":{}}}],["addobj",{"_index":4179,"title":{},"body":{"injectables/ViewportService.html":{}}}],["addobj(id",{"_index":4193,"title":{},"body":{"injectables/ViewportService.html":{}}}],["addop",{"_index":3018,"title":{},"body":{"classes/OpSequencer.html":{},"components/OpsComponent.html":{},"injectables/SequencerService.html":{}}}],["addop(defs.basket",{"_index":1816,"title":{},"body":{"interfaces/DraftOperationClassification.html":{},"interfaces/LoomConfig.html":{},"classes/PedalConfig.html":{},"injectables/PlayerService.html":{}}}],["addop(defs.bindwarpfloats",{"_index":1841,"title":{},"body":{"interfaces/DraftOperationClassification.html":{},"interfaces/LoomConfig.html":{},"classes/PedalConfig.html":{},"injectables/PlayerService.html":{}}}],["addop(defs.bindweftfloats",{"_index":1839,"title":{},"body":{"interfaces/DraftOperationClassification.html":{},"interfaces/LoomConfig.html":{},"classes/PedalConfig.html":{},"injectables/PlayerService.html":{}}}],["addop(defs.flipx",{"_index":1831,"title":{},"body":{"interfaces/DraftOperationClassification.html":{},"interfaces/LoomConfig.html":{},"classes/PedalConfig.html":{},"injectables/PlayerService.html":{}}}],["addop(defs.flipy",{"_index":1833,"title":{},"body":{"interfaces/DraftOperationClassification.html":{},"interfaces/LoomConfig.html":{},"classes/PedalConfig.html":{},"injectables/PlayerService.html":{}}}],["addop(defs.invert",{"_index":1823,"title":{},"body":{"interfaces/DraftOperationClassification.html":{},"interfaces/LoomConfig.html":{},"classes/PedalConfig.html":{},"injectables/PlayerService.html":{}}}],["addop(defs.makesymmetric",{"_index":1835,"title":{},"body":{"interfaces/DraftOperationClassification.html":{},"interfaces/LoomConfig.html":{},"classes/PedalConfig.html":{},"injectables/PlayerService.html":{}}}],["addop(defs.random",{"_index":1820,"title":{},"body":{"interfaces/DraftOperationClassification.html":{},"interfaces/LoomConfig.html":{},"classes/PedalConfig.html":{},"injectables/PlayerService.html":{}}}],["addop(defs.rib",{"_index":1818,"title":{},"body":{"interfaces/DraftOperationClassification.html":{},"interfaces/LoomConfig.html":{},"classes/PedalConfig.html":{},"injectables/PlayerService.html":{}}}],["addop(defs.rotate",{"_index":1821,"title":{},"body":{"interfaces/DraftOperationClassification.html":{},"interfaces/LoomConfig.html":{},"classes/PedalConfig.html":{},"injectables/PlayerService.html":{}}}],["addop(defs.satin",{"_index":1812,"title":{},"body":{"interfaces/DraftOperationClassification.html":{},"interfaces/LoomConfig.html":{},"classes/PedalConfig.html":{},"injectables/PlayerService.html":{}}}],["addop(defs.shiftx",{"_index":1825,"title":{},"body":{"interfaces/DraftOperationClassification.html":{},"interfaces/LoomConfig.html":{},"classes/PedalConfig.html":{},"injectables/PlayerService.html":{}}}],["addop(defs.shifty",{"_index":1827,"title":{},"body":{"interfaces/DraftOperationClassification.html":{},"interfaces/LoomConfig.html":{},"classes/PedalConfig.html":{},"injectables/PlayerService.html":{}}}],["addop(defs.slope",{"_index":1829,"title":{},"body":{"interfaces/DraftOperationClassification.html":{},"interfaces/LoomConfig.html":{},"classes/PedalConfig.html":{},"injectables/PlayerService.html":{}}}],["addop(defs.stretch",{"_index":1837,"title":{},"body":{"interfaces/DraftOperationClassification.html":{},"interfaces/LoomConfig.html":{},"classes/PedalConfig.html":{},"injectables/PlayerService.html":{}}}],["addop(defs.tabby",{"_index":1808,"title":{},"body":{"interfaces/DraftOperationClassification.html":{},"interfaces/LoomConfig.html":{},"classes/PedalConfig.html":{},"injectables/PlayerService.html":{}}}],["addop(defs.twill",{"_index":1810,"title":{},"body":{"interfaces/DraftOperationClassification.html":{},"interfaces/LoomConfig.html":{},"classes/PedalConfig.html":{},"injectables/PlayerService.html":{}}}],["addop(defs.waffle",{"_index":1814,"title":{},"body":{"interfaces/DraftOperationClassification.html":{},"interfaces/LoomConfig.html":{},"classes/PedalConfig.html":{},"injectables/PlayerService.html":{}}}],["addop(name",{"_index":3224,"title":{},"body":{"components/OpsComponent.html":{}}}],["addop(o",{"_index":3036,"title":{},"body":{"classes/OpSequencer.html":{},"injectables/SequencerService.html":{}}}],["addop(op",{"_index":1804,"title":{},"body":{"interfaces/DraftOperationClassification.html":{},"interfaces/LoomConfig.html":{},"classes/PedalConfig.html":{},"injectables/PlayerService.html":{}}}],["addoperation",{"_index":2516,"title":{},"body":{"injectables/MappingsService.html":{},"classes/PedalConfig.html":{}}}],["addoperation(o",{"_index":1727,"title":{},"body":{"interfaces/DraftOperationClassification.html":{},"interfaces/LoomConfig.html":{},"injectables/MappingsService.html":{},"classes/PedalConfig.html":{},"injectables/PlayerService.html":{}}}],["addopfromsearch",{"_index":3215,"title":{},"body":{"components/OpsComponent.html":{}}}],["addopfromsearch(event",{"_index":3226,"title":{},"body":{"components/OpsComponent.html":{}}}],["addpedal",{"_index":3510,"title":{},"body":{"classes/PedalConfig.html":{}}}],["addpedal(p",{"_index":1721,"title":{},"body":{"interfaces/DraftOperationClassification.html":{},"interfaces/LoomConfig.html":{},"classes/PedalConfig.html":{},"injectables/PlayerService.html":{}}}],["addpedals",{"_index":3900,"title":{},"body":{"injectables/SequencerService.html":{}}}],["addpedals(fwd_pedal",{"_index":464,"title":{},"body":{"interfaces/ChainIndex.html":{},"injectables/SequencerService.html":{}}}],["adds",{"_index":1097,"title":{},"body":{"classes/DBListener.html":{},"classes/DBListenerArray.html":{},"classes/DBNode.html":{},"classes/DBNodeArray.html":{},"classes/DBTwoWay.html":{},"classes/DBTwoWayArray.html":{},"classes/DBWriteBuffer.html":{},"classes/DBWriter.html":{},"classes/DBWriterArray.html":{},"interfaces/NodeMethods.html":{},"interfaces/NodeParams.html":{},"classes/OnlineStatus.html":{},"index.html":{}}}],["addshuttle",{"_index":3936,"title":{},"body":{"classes/Shape.html":{}}}],["addshuttle(shuttle",{"_index":3954,"title":{},"body":{"classes/Shape.html":{}}}],["addsingleop",{"_index":3901,"title":{},"body":{"injectables/SequencerService.html":{}}}],["addsingleop(o",{"_index":474,"title":{},"body":{"interfaces/ChainIndex.html":{},"injectables/SequencerService.html":{}}}],["addtochain",{"_index":3902,"title":{},"body":{"injectables/SequencerService.html":{}}}],["addtochain(ch_id",{"_index":488,"title":{},"body":{"interfaces/ChainIndex.html":{},"injectables/SequencerService.html":{}}}],["addvpedal",{"_index":3506,"title":{},"body":{"interfaces/Pedal.html":{},"classes/PedalStatus.html":{},"injectables/PedalsService.html":{}}}],["adj",{"_index":2915,"title":{},"body":{"components/NoteComponent.html":{}}}],["adj:point",{"_index":2913,"title":{},"body":{"components/NoteComponent.html":{}}}],["adjust",{"_index":2072,"title":{},"body":{"components/DraftdetailComponent.html":{},"interfaces/Ink.html":{},"injectables/InkService.html":{}}}],["adjusted",{"_index":2802,"title":{},"body":{"components/MixerViewComponent.html":{}}}],["affect",{"_index":4457,"title":{},"body":{"index.html":{}}}],["aid",{"_index":2062,"title":{},"body":{"components/DraftdetailComponent.html":{},"interfaces/DynamicOperation.html":{},"interfaces/OpInput.html":{},"interfaces/OperationClassification.html":{},"interfaces/TreeOperation.html":{}}}],["algorithmically",{"_index":1848,"title":{},"body":{"interfaces/DraftOperationClassification.html":{},"interfaces/LoomConfig.html":{},"classes/PedalConfig.html":{},"injectables/PlayerService.html":{}}}],["aliases",{"_index":4624,"title":{},"body":{"miscellaneous/typealiases.html":{}}}],["align",{"_index":2485,"title":{},"body":{"components/InletComponent.html":{},"components/NoteComponent.html":{},"components/OpSequencerComponent.html":{},"components/OpsComponent.html":{},"components/ParameterComponent.html":{},"components/PlayerComponent.html":{},"components/WeavingStateComponent.html":{}}}],["align:middle",{"_index":3339,"title":{},"body":{"components/ParameterComponent.html":{}}}],["aligned",{"_index":3680,"title":{},"body":{"components/PlayerComponent.html":{}}}],["alive",{"_index":3442,"title":{},"body":{"interfaces/Pedal.html":{},"classes/PedalStatus.html":{},"injectables/PedalsService.html":{}}}],["all_req",{"_index":142,"title":{},"body":{"classes/AbstractOpFactory.html":{},"classes/BaseOp.html":{},"classes/Branch.html":{},"classes/Bus.html":{},"classes/Merge.html":{},"interfaces/OpClassifier.html":{},"interfaces/OperationProperties.html":{},"classes/Pipe.html":{},"classes/Seed.html":{},"interfaces/TopologyDef.html":{}}}],["all_system_codes",{"_index":2385,"title":{},"body":{"components/InletComponent.html":{}}}],["allmaps",{"_index":2643,"title":{},"body":{"injectables/MappingsService.html":{}}}],["allops",{"_index":3244,"title":{},"body":{"components/OpsComponent.html":{}}}],["allops.map(el",{"_index":3247,"title":{},"body":{"components/OpsComponent.html":{}}}],["allowable",{"_index":3163,"title":{},"body":{"interfaces/OperationParam.html":{},"classes/Params.html":{}}}],["allowed",{"_index":205,"title":{},"body":{"classes/AbstractOpFactory.html":{},"classes/BaseOp.html":{},"classes/Branch.html":{},"classes/Bus.html":{},"classes/Merge.html":{},"interfaces/OpClassifier.html":{},"interfaces/OperationProperties.html":{},"classes/Pipe.html":{},"classes/Seed.html":{},"interfaces/TopologyDef.html":{}}}],["allows",{"_index":2284,"title":{},"body":{"interfaces/IOTuple.html":{},"interfaces/TreeNode.html":{},"index.html":{},"miscellaneous/typealiases.html":{}}}],["allrequired",{"_index":9,"title":{},"body":{"classes/AbstractOpFactory.html":{},"classes/BaseOp.html":{},"classes/Branch.html":{},"classes/Bus.html":{},"interfaces/ChainOp.html":{},"interfaces/DraftOperationClassification.html":{},"interfaces/DynamicOperation.html":{},"interfaces/LoomConfig.html":{},"classes/Merge.html":{},"interfaces/OpClassifier.html":{},"interfaces/OpInput.html":{},"interfaces/OperationClassification.html":{},"interfaces/OperationProperties.html":{},"interfaces/PairedOp.html":{},"classes/PedalConfig.html":{},"interfaces/PedalEvent.html":{},"classes/Pipe.html":{},"interfaces/PlayerOp.html":{},"injectables/PlayerService.html":{},"classes/Seed.html":{},"interfaces/TopologyDef.html":{},"interfaces/TreeOperation.html":{},"miscellaneous/typealiases.html":{}}}],["allrequired(...args",{"_index":26,"title":{},"body":{"classes/AbstractOpFactory.html":{},"classes/BaseOp.html":{},"classes/Branch.html":{},"classes/Bus.html":{},"classes/Merge.html":{},"interfaces/OpClassifier.html":{},"interfaces/OperationProperties.html":{},"classes/Pipe.html":{},"classes/Seed.html":{},"interfaces/TopologyDef.html":{}}}],["allrequired(args",{"_index":14,"title":{},"body":{"classes/AbstractOpFactory.html":{},"classes/BaseOp.html":{},"classes/Branch.html":{},"classes/Bus.html":{},"classes/Merge.html":{},"interfaces/OpClassifier.html":{},"interfaces/OperationProperties.html":{},"classes/Pipe.html":{},"classes/Seed.html":{},"interfaces/TopologyDef.html":{}}}],["allrequiredperform",{"_index":173,"title":{},"body":{"classes/AbstractOpFactory.html":{},"classes/BaseOp.html":{},"classes/Branch.html":{},"classes/Bus.html":{},"classes/Merge.html":{},"interfaces/OpClassifier.html":{},"interfaces/OperationProperties.html":{},"classes/Pipe.html":{},"classes/Seed.html":{},"interfaces/TopologyDef.html":{},"miscellaneous/typealiases.html":{}}}],["along",{"_index":903,"title":{},"body":{"interfaces/Crossing.html":{},"interfaces/DraftMap.html":{},"interfaces/Interlacement.html":{},"interfaces/InterlacementVal.html":{},"interfaces/Vertex.html":{},"interfaces/YarnPath.html":{},"miscellaneous/typealiases.html":{}}}],["already",{"_index":1549,"title":{},"body":{"interfaces/DesignActions.html":{},"interfaces/DraftOperationClassification.html":{},"interfaces/LoomConfig.html":{},"injectables/MappingsService.html":{},"classes/PedalConfig.html":{},"injectables/PlayerService.html":{}}}],["always",{"_index":693,"title":{},"body":{"components/ConnectionComponent.html":{},"injectables/LayersService.html":{},"index.html":{}}}],["and/or",{"_index":3744,"title":{},"body":{"interfaces/Point.html":{}}}],["angular",{"_index":439,"title":{},"body":{"interfaces/ChainIndex.html":{},"injectables/SequencerService.html":{},"index.html":{}}}],["angular/animations",{"_index":4346,"title":{},"body":{"dependencies.html":{}}}],["angular/cdk",{"_index":4348,"title":{},"body":{"dependencies.html":{}}}],["angular/cdk/keycodes",{"_index":2430,"title":{},"body":{"components/InletComponent.html":{}}}],["angular/cdk/scrolling",{"_index":2007,"title":{},"body":{"components/DraftdetailComponent.html":{}}}],["angular/common",{"_index":3692,"title":{},"body":{"modules/PlayerModule.html":{},"dependencies.html":{}}}],["angular/compiler",{"_index":4349,"title":{},"body":{"dependencies.html":{}}}],["angular/core",{"_index":430,"title":{},"body":{"interfaces/ChainIndex.html":{},"components/ConnectionComponent.html":{},"interfaces/DesignActions.html":{},"interfaces/DraftOperationClassification.html":{},"components/DraftdetailComponent.html":{},"interfaces/IOTuple.html":{},"components/ImageComponent.html":{},"interfaces/Ink.html":{},"injectables/InkService.html":{},"components/InletComponent.html":{},"injectables/LayersService.html":{},"interfaces/LoomConfig.html":{},"injectables/MappingsService.html":{},"directives/MarqueeComponent.html":{},"modules/MixerModule.html":{},"components/MixerViewComponent.html":{},"components/NoteComponent.html":{},"components/OpHelpModal.html":{},"components/OpSequencerComponent.html":{},"components/OpsComponent.html":{},"components/ParameterComponent.html":{},"interfaces/Pedal.html":{},"classes/PedalConfig.html":{},"classes/PedalStatus.html":{},"injectables/PedalsService.html":{},"components/PlayerComponent.html":{},"modules/PlayerModule.html":{},"injectables/PlayerService.html":{},"directives/SelectionComponent.html":{},"injectables/SequencerService.html":{},"components/SnackbarComponent.html":{},"interfaces/TreeNode.html":{},"injectables/ViewportService.html":{},"components/VirtualPedalsComponent.html":{},"components/WeavingStateComponent.html":{},"dependencies.html":{}}}],["angular/fire",{"_index":4350,"title":{},"body":{"dependencies.html":{}}}],["angular/fire/database",{"_index":963,"title":{},"body":{"classes/DBListener.html":{},"classes/DBListenerArray.html":{},"classes/DBNode.html":{},"classes/DBNodeArray.html":{},"classes/DBTwoWay.html":{},"classes/DBTwoWayArray.html":{},"classes/DBWriteBuffer.html":{},"classes/DBWriter.html":{},"classes/DBWriterArray.html":{},"interfaces/NodeMethods.html":{},"interfaces/NodeParams.html":{},"classes/OnlineStatus.html":{},"interfaces/Pedal.html":{},"classes/PedalStatus.html":{},"injectables/PedalsService.html":{}}}],["angular/forms",{"_index":2427,"title":{},"body":{"components/InletComponent.html":{},"components/OpsComponent.html":{},"components/ParameterComponent.html":{},"dependencies.html":{}}}],["angular/material",{"_index":4352,"title":{},"body":{"dependencies.html":{}}}],["angular/material/dialog",{"_index":1311,"title":{},"body":{"interfaces/DesignActions.html":{},"components/DraftdetailComponent.html":{},"components/MixerViewComponent.html":{},"components/OpHelpModal.html":{},"components/OpsComponent.html":{}}}],["angular/material/snack",{"_index":4109,"title":{},"body":{"components/SnackbarComponent.html":{}}}],["angular/material/tooltip",{"_index":3237,"title":{},"body":{"components/OpsComponent.html":{}}}],["angular/platform",{"_index":4353,"title":{},"body":{"dependencies.html":{}}}],["angular/router",{"_index":4355,"title":{},"body":{"dependencies.html":{}}}],["another",{"_index":686,"title":{},"body":{"components/ConnectionComponent.html":{},"interfaces/OperationParam.html":{},"classes/Params.html":{},"miscellaneous/typealiases.html":{}}}],["anyone",{"_index":4446,"title":{},"body":{"index.html":{}}}],["anything",{"_index":1760,"title":{},"body":{"interfaces/DraftOperationClassification.html":{},"interfaces/LoomConfig.html":{},"injectables/MappingsService.html":{},"classes/OpSequencer.html":{},"classes/PedalConfig.html":{},"injectables/PlayerService.html":{},"index.html":{}}}],["app",{"_index":633,"title":{},"body":{"components/ConnectionComponent.html":{},"interfaces/DesignActions.html":{},"components/DraftdetailComponent.html":{},"components/ImageComponent.html":{},"components/InletComponent.html":{},"directives/MarqueeComponent.html":{},"components/MixerViewComponent.html":{},"components/NoteComponent.html":{},"components/OpHelpModal.html":{},"components/OpSequencerComponent.html":{},"components/OpsComponent.html":{},"components/ParameterComponent.html":{},"components/PlayerComponent.html":{},"directives/SelectionComponent.html":{},"components/SnackbarComponent.html":{},"components/VirtualPedalsComponent.html":{},"components/WeavingStateComponent.html":{},"index.html":{}}}],["appearance",{"_index":2857,"title":{},"body":{"components/MixerViewComponent.html":{}}}],["application",{"_index":4540,"title":{},"body":{"index.html":{}}}],["applies",{"_index":1854,"title":{},"body":{"interfaces/DraftOperationClassification.html":{},"interfaces/LoomConfig.html":{},"classes/PedalConfig.html":{},"injectables/PlayerService.html":{}}}],["apply",{"_index":274,"title":{},"body":{"classes/AbstractOpFactory.html":{},"classes/BaseOp.html":{},"classes/Branch.html":{},"classes/Bus.html":{},"classes/Merge.html":{},"interfaces/OpClassifier.html":{},"interfaces/OperationProperties.html":{},"classes/Pipe.html":{},"classes/Seed.html":{},"interfaces/TopologyDef.html":{}}}],["appropriate",{"_index":4601,"title":{},"body":{"index.html":{}}}],["apps",{"_index":4474,"title":{},"body":{"index.html":{}}}],["architectural",{"_index":4510,"title":{},"body":{"index.html":{}}}],["areas",{"_index":2329,"title":{},"body":{"interfaces/Ink.html":{},"injectables/InkService.html":{},"miscellaneous/typealiases.html":{}}}],["aren't",{"_index":2232,"title":{},"body":{"interfaces/DynamicOperation.html":{},"interfaces/OpInput.html":{},"interfaces/OperationClassification.html":{},"interfaces/TreeOperation.html":{}}}],["arg",{"_index":2193,"title":{},"body":{"interfaces/DynamicOperation.html":{},"interfaces/OpInput.html":{},"interfaces/OperationClassification.html":{},"interfaces/TreeOperation.html":{}}}],["args",{"_index":23,"title":{},"body":{"classes/AbstractOpFactory.html":{},"classes/BaseOp.html":{},"classes/Branch.html":{},"classes/Bus.html":{},"interfaces/ChainOp.html":{},"interfaces/DynamicOperation.html":{},"classes/Merge.html":{},"interfaces/OpClassifier.html":{},"interfaces/OpInput.html":{},"interfaces/OperationClassification.html":{},"interfaces/OperationProperties.html":{},"interfaces/PairedOp.html":{},"interfaces/PedalEvent.html":{},"classes/Pipe.html":{},"interfaces/PlayerOp.html":{},"classes/Seed.html":{},"interfaces/TopologyDef.html":{},"interfaces/TreeOperation.html":{}}}],["args.displayname",{"_index":246,"title":{},"body":{"classes/AbstractOpFactory.html":{},"classes/BaseOp.html":{},"classes/Branch.html":{},"classes/Bus.html":{},"classes/Merge.html":{},"interfaces/OpClassifier.html":{},"interfaces/OperationProperties.html":{},"classes/Pipe.html":{},"classes/Seed.html":{},"interfaces/TopologyDef.html":{}}}],["args.dx",{"_index":248,"title":{},"body":{"classes/AbstractOpFactory.html":{},"classes/BaseOp.html":{},"classes/Branch.html":{},"classes/Bus.html":{},"classes/Merge.html":{},"interfaces/OpClassifier.html":{},"interfaces/OperationProperties.html":{},"classes/Pipe.html":{},"classes/Seed.html":{},"interfaces/TopologyDef.html":{}}}],["args.inlets",{"_index":253,"title":{},"body":{"classes/AbstractOpFactory.html":{},"classes/BaseOp.html":{},"classes/Branch.html":{},"classes/Bus.html":{},"classes/Merge.html":{},"interfaces/OpClassifier.html":{},"interfaces/OperationProperties.html":{},"classes/Pipe.html":{},"classes/Seed.html":{},"interfaces/TopologyDef.html":{}}}],["args.name",{"_index":244,"title":{},"body":{"classes/AbstractOpFactory.html":{},"classes/BaseOp.html":{},"classes/Branch.html":{},"classes/Bus.html":{},"classes/Merge.html":{},"interfaces/OpClassifier.html":{},"interfaces/OperationProperties.html":{},"classes/Pipe.html":{},"classes/Seed.html":{},"interfaces/TopologyDef.html":{}}}],["args.params",{"_index":251,"title":{},"body":{"classes/AbstractOpFactory.html":{},"classes/BaseOp.html":{},"classes/Branch.html":{},"classes/Bus.html":{},"classes/Merge.html":{},"interfaces/OpClassifier.html":{},"interfaces/OperationProperties.html":{},"classes/Pipe.html":{},"classes/Seed.html":{},"interfaces/TopologyDef.html":{}}}],["args.perform",{"_index":250,"title":{},"body":{"classes/AbstractOpFactory.html":{},"classes/BaseOp.html":{},"classes/Branch.html":{},"classes/Bus.html":{},"classes/Merge.html":{},"interfaces/OpClassifier.html":{},"interfaces/OperationProperties.html":{},"classes/Pipe.html":{},"classes/Seed.html":{},"interfaces/TopologyDef.html":{}}}],["arguments",{"_index":235,"title":{},"body":{"classes/AbstractOpFactory.html":{},"classes/BaseOp.html":{},"classes/Branch.html":{},"classes/Bus.html":{},"classes/Merge.html":{},"interfaces/OpClassifier.html":{},"interfaces/OperationProperties.html":{},"classes/Pipe.html":{},"classes/Seed.html":{},"interfaces/TopologyDef.html":{},"components/VirtualPedalsComponent.html":{}}}],["arranges",{"_index":3373,"title":{},"body":{"interfaces/Pedal.html":{},"classes/PedalStatus.html":{},"injectables/PedalsService.html":{}}}],["array",{"_index":85,"title":{},"body":{"classes/AbstractOpFactory.html":{},"classes/BaseOp.html":{},"interfaces/Bounds.html":{},"classes/Branch.html":{},"classes/Bus.html":{},"interfaces/ChainIndex.html":{},"interfaces/ChainOp.html":{},"interfaces/Crossing.html":{},"classes/DBListener.html":{},"classes/DBListenerArray.html":{},"classes/DBNode.html":{},"classes/DBNodeArray.html":{},"classes/DBTwoWay.html":{},"classes/DBTwoWayArray.html":{},"classes/DBWriteBuffer.html":{},"classes/DBWriter.html":{},"classes/DBWriterArray.html":{},"interfaces/DensityUnits.html":{},"interfaces/DesignMode.html":{},"interfaces/DraftMap.html":{},"interfaces/DraftNodeProxy.html":{},"interfaces/DraftOperationClassification.html":{},"components/DraftdetailComponent.html":{},"interfaces/DynamicOperation.html":{},"interfaces/FileObj.html":{},"interfaces/FileSaver.html":{},"interfaces/Fileloader.html":{},"interfaces/IOTuple.html":{},"interfaces/Ink.html":{},"injectables/InkService.html":{},"components/InletComponent.html":{},"interfaces/Interlacement.html":{},"interfaces/InterlacementVal.html":{},"interfaces/LoadResponse.html":{},"interfaces/LoomConfig.html":{},"interfaces/LoomTypes.html":{},"injectables/MappingsService.html":{},"interfaces/MaterialTypes.html":{},"classes/Merge.html":{},"components/MixerViewComponent.html":{},"interfaces/NodeComponentProxy.html":{},"interfaces/NodeMethods.html":{},"interfaces/NodeParams.html":{},"classes/OnlineStatus.html":{},"interfaces/OpClassifier.html":{},"interfaces/OpComponentProxy.html":{},"components/OpHelpModal.html":{},"interfaces/OpInput.html":{},"classes/OpSequencer.html":{},"interfaces/OperationClassification.html":{},"interfaces/OperationParam.html":{},"interfaces/OperationProperties.html":{},"components/OpsComponent.html":{},"interfaces/PairedOp.html":{},"classes/Params.html":{},"interfaces/Pedal.html":{},"classes/PedalConfig.html":{},"interfaces/PedalEvent.html":{},"classes/PedalStatus.html":{},"injectables/PedalsService.html":{},"classes/Pipe.html":{},"interfaces/PlayerOp.html":{},"injectables/PlayerService.html":{},"interfaces/PlayerState.html":{},"interfaces/Point.html":{},"classes/Render.html":{},"interfaces/SaveObj.html":{},"classes/Seed.html":{},"injectables/SequencerService.html":{},"classes/Shape.html":{},"classes/Shape-1.html":{},"interfaces/StatusMessage.html":{},"classes/System.html":{},"interfaces/TopologyDef.html":{},"interfaces/TreeNode.html":{},"interfaces/TreeNodeProxy.html":{},"interfaces/TreeOperation.html":{},"interfaces/Vertex.html":{},"interfaces/ViewModes.html":{},"injectables/ViewportService.html":{},"interfaces/WeavingLog.html":{},"interfaces/WeavingPick.html":{},"components/WeavingStateComponent.html":{},"interfaces/YarnPath.html":{},"miscellaneous/functions.html":{},"miscellaneous/typealiases.html":{}}}],["array's",{"_index":3998,"title":{},"body":{"classes/Shape-1.html":{}}}],["array;//array",{"_index":2564,"title":{},"body":{"injectables/MappingsService.html":{}}}],["arrays",{"_index":1593,"title":{},"body":{"interfaces/DraftMap.html":{},"interfaces/Interlacement.html":{},"interfaces/InterlacementVal.html":{},"classes/System.html":{},"miscellaneous/functions.html":{},"index.html":{}}}],["artifacts",{"_index":4607,"title":{},"body":{"index.html":{}}}],["asking",{"_index":2362,"title":{},"body":{"interfaces/Ink.html":{},"injectables/InkService.html":{}}}],["assign",{"_index":1604,"title":{},"body":{"interfaces/DraftMap.html":{},"interfaces/Interlacement.html":{},"interfaces/InterlacementVal.html":{}}}],["assigned",{"_index":586,"title":{},"body":{"interfaces/ChainOp.html":{},"interfaces/DesignActions.html":{},"interfaces/DraftMap.html":{},"interfaces/DynamicOperation.html":{},"interfaces/Interlacement.html":{},"interfaces/InterlacementVal.html":{},"interfaces/OpInput.html":{},"interfaces/OperationClassification.html":{},"interfaces/PairedOp.html":{},"interfaces/PedalEvent.html":{},"interfaces/PlayerOp.html":{},"interfaces/TreeOperation.html":{}}}],["assignment",{"_index":2146,"title":{},"body":{"interfaces/DynamicOperation.html":{},"interfaces/OpInput.html":{},"interfaces/OperationClassification.html":{},"interfaces/TreeOperation.html":{}}}],["associate",{"_index":2999,"title":{},"body":{"components/OpHelpModal.html":{}}}],["associated",{"_index":207,"title":{},"body":{"classes/AbstractOpFactory.html":{},"classes/BaseOp.html":{},"classes/Branch.html":{},"classes/Bus.html":{},"interfaces/DraftMap.html":{},"interfaces/DraftNodeProxy.html":{},"interfaces/DynamicOperation.html":{},"interfaces/FileObj.html":{},"interfaces/FileSaver.html":{},"interfaces/Fileloader.html":{},"interfaces/IOTuple.html":{},"interfaces/Ink.html":{},"injectables/InkService.html":{},"interfaces/Interlacement.html":{},"interfaces/InterlacementVal.html":{},"interfaces/LoadResponse.html":{},"classes/Merge.html":{},"interfaces/NodeComponentProxy.html":{},"interfaces/OpClassifier.html":{},"interfaces/OpComponentProxy.html":{},"interfaces/OpInput.html":{},"interfaces/OperationClassification.html":{},"interfaces/OperationProperties.html":{},"classes/Pipe.html":{},"interfaces/SaveObj.html":{},"classes/Seed.html":{},"classes/Shape.html":{},"interfaces/StatusMessage.html":{},"interfaces/TopologyDef.html":{},"interfaces/TreeNode.html":{},"interfaces/TreeNodeProxy.html":{},"interfaces/TreeOperation.html":{},"miscellaneous/typealiases.html":{}}}],["associted",{"_index":2283,"title":{},"body":{"interfaces/IOTuple.html":{},"interfaces/TreeNode.html":{}}}],["assume",{"_index":2568,"title":{},"body":{"injectables/MappingsService.html":{}}}],["assumes",{"_index":1060,"title":{},"body":{"classes/DBListener.html":{},"classes/DBListenerArray.html":{},"classes/DBNode.html":{},"classes/DBNodeArray.html":{},"classes/DBTwoWay.html":{},"classes/DBTwoWayArray.html":{},"classes/DBWriteBuffer.html":{},"classes/DBWriter.html":{},"classes/DBWriterArray.html":{},"interfaces/NodeMethods.html":{},"interfaces/NodeParams.html":{},"classes/OnlineStatus.html":{}}}],["async",{"_index":1532,"title":{},"body":{"interfaces/DesignActions.html":{}}}],["atop",{"_index":2321,"title":{},"body":{"interfaces/Ink.html":{},"injectables/InkService.html":{}}}],["attach",{"_index":930,"title":{},"body":{"classes/DBListener.html":{},"classes/DBListenerArray.html":{},"classes/DBNode.html":{},"classes/DBNodeArray.html":{},"classes/DBTwoWay.html":{},"classes/DBTwoWayArray.html":{},"classes/DBWriteBuffer.html":{},"classes/DBWriter.html":{},"classes/DBWriterArray.html":{},"interfaces/NodeMethods.html":{},"interfaces/NodeParams.html":{},"classes/OnlineStatus.html":{},"interfaces/Pedal.html":{},"classes/PedalStatus.html":{},"injectables/PedalsService.html":{}}}],["attachchildnode",{"_index":1160,"title":{},"body":{"classes/DBListenerArray.html":{},"classes/DBTwoWayArray.html":{}}}],["attachchildnode(node",{"_index":1099,"title":{},"body":{"classes/DBListener.html":{},"classes/DBListenerArray.html":{},"classes/DBNode.html":{},"classes/DBNodeArray.html":{},"classes/DBTwoWay.html":{},"classes/DBTwoWayArray.html":{},"classes/DBWriteBuffer.html":{},"classes/DBWriter.html":{},"classes/DBWriterArray.html":{},"interfaces/NodeMethods.html":{},"interfaces/NodeParams.html":{},"classes/OnlineStatus.html":{}}}],["attached",{"_index":3415,"title":{},"body":{"interfaces/Pedal.html":{},"classes/PedalStatus.html":{},"injectables/PedalsService.html":{}}}],["attaching",{"_index":1092,"title":{},"body":{"classes/DBListener.html":{},"classes/DBListenerArray.html":{},"classes/DBNode.html":{},"classes/DBNodeArray.html":{},"classes/DBTwoWay.html":{},"classes/DBTwoWayArray.html":{},"classes/DBWriteBuffer.html":{},"classes/DBWriter.html":{},"classes/DBWriterArray.html":{},"interfaces/NodeMethods.html":{},"interfaces/NodeParams.html":{},"classes/OnlineStatus.html":{}}}],["attempting",{"_index":1154,"title":{},"body":{"classes/DBListener.html":{},"classes/DBListenerArray.html":{},"classes/DBNode.html":{},"classes/DBNodeArray.html":{},"classes/DBTwoWay.html":{},"classes/DBTwoWayArray.html":{},"classes/DBWriteBuffer.html":{},"classes/DBWriter.html":{},"classes/DBWriterArray.html":{},"interfaces/NodeMethods.html":{},"interfaces/NodeParams.html":{},"classes/OnlineStatus.html":{}}}],["augmenting",{"_index":4545,"title":{},"body":{"index.html":{}}}],["auto",{"_index":2943,"title":{},"body":{"components/NoteComponent.html":{}}}],["automatically",{"_index":1599,"title":{},"body":{"interfaces/DraftMap.html":{},"interfaces/Interlacement.html":{},"interfaces/InterlacementVal.html":{},"index.html":{}}}],["available",{"_index":1655,"title":{},"body":{"interfaces/DraftNodeProxy.html":{},"interfaces/DynamicOperation.html":{},"interfaces/FileObj.html":{},"interfaces/FileSaver.html":{},"interfaces/Fileloader.html":{},"interfaces/LoadResponse.html":{},"interfaces/NodeComponentProxy.html":{},"interfaces/OpComponentProxy.html":{},"interfaces/OpInput.html":{},"interfaces/OperationClassification.html":{},"interfaces/SaveObj.html":{},"interfaces/StatusMessage.html":{},"interfaces/TreeNodeProxy.html":{},"interfaces/TreeOperation.html":{},"index.html":{}}}],["availpedals",{"_index":1707,"title":{},"body":{"interfaces/DraftOperationClassification.html":{},"interfaces/LoomConfig.html":{},"injectables/MappingsService.html":{},"classes/PedalConfig.html":{},"injectables/PlayerService.html":{}}}],["b",{"_index":1512,"title":{},"body":{"interfaces/DesignActions.html":{},"interfaces/DraftOperationClassification.html":{},"interfaces/LoomConfig.html":{},"classes/PedalConfig.html":{},"injectables/PlayerService.html":{}}}],["b.getcontext('2d",{"_index":1515,"title":{},"body":{"interfaces/DesignActions.html":{}}}],["b.height",{"_index":1517,"title":{},"body":{"interfaces/DesignActions.html":{}}}],["b.width",{"_index":1516,"title":{},"body":{"interfaces/DesignActions.html":{}}}],["b71c1c",{"_index":3270,"title":{},"body":{"components/OpsComponent.html":{}}}],["b:boolean",{"_index":906,"title":{},"body":{"interfaces/Crossing.html":{},"interfaces/Vertex.html":{},"interfaces/YarnPath.html":{}}}],["b:false",{"_index":912,"title":{},"body":{"interfaces/Crossing.html":{},"interfaces/Vertex.html":{},"interfaces/YarnPath.html":{}}}],["b:null",{"_index":908,"title":{},"body":{"interfaces/Crossing.html":{},"interfaces/Vertex.html":{},"interfaces/YarnPath.html":{}}}],["b:true",{"_index":910,"title":{},"body":{"interfaces/Crossing.html":{},"interfaces/Vertex.html":{},"interfaces/YarnPath.html":{}}}],["b_from",{"_index":639,"title":{},"body":{"components/ConnectionComponent.html":{}}}],["b_to",{"_index":640,"title":{},"body":{"components/ConnectionComponent.html":{}}}],["back",{"_index":473,"title":{},"body":{"interfaces/ChainIndex.html":{},"components/DraftdetailComponent.html":{},"classes/OpSequencer.html":{},"injectables/SequencerService.html":{}}}],["backdrop",{"_index":2046,"title":{},"body":{"components/DraftdetailComponent.html":{}}}],["background",{"_index":2099,"title":{},"body":{"components/DraftdetailComponent.html":{},"components/InletComponent.html":{},"components/MixerViewComponent.html":{},"components/OpSequencerComponent.html":{},"components/OpsComponent.html":{},"components/ParameterComponent.html":{},"components/PlayerComponent.html":{},"components/VirtualPedalsComponent.html":{},"components/WeavingStateComponent.html":{}}}],["backwards",{"_index":542,"title":{},"body":{"interfaces/ChainOp.html":{},"interfaces/PairedOp.html":{},"interfaces/PedalEvent.html":{},"interfaces/PlayerOp.html":{}}}],["banner",{"_index":2144,"title":{},"body":{"interfaces/DynamicOperation.html":{},"interfaces/OpInput.html":{},"interfaces/OperationClassification.html":{},"interfaces/TreeOperation.html":{}}}],["bar",{"_index":4110,"title":{},"body":{"components/SnackbarComponent.html":{}}}],["base",{"_index":298,"title":{},"body":{"classes/AbstractOpFactory.html":{},"classes/BaseOp.html":{},"classes/Branch.html":{},"classes/Bus.html":{},"interfaces/DynamicOperation.html":{},"classes/Merge.html":{},"interfaces/OpClassifier.html":{},"interfaces/OpInput.html":{},"interfaces/OperationClassification.html":{},"interfaces/OperationProperties.html":{},"classes/Pipe.html":{},"classes/Render.html":{},"classes/Seed.html":{},"classes/Shuttle.html":{},"classes/System.html":{},"interfaces/TopologyDef.html":{},"interfaces/TreeOperation.html":{},"miscellaneous/functions.html":{},"index.html":{}}}],["base.classifier.input_drafts",{"_index":2195,"title":{},"body":{"interfaces/DynamicOperation.html":{},"interfaces/OpInput.html":{},"interfaces/OperationClassification.html":{},"interfaces/TreeOperation.html":{}}}],["base.classifier.input_params",{"_index":2206,"title":{},"body":{"interfaces/DynamicOperation.html":{},"interfaces/OpInput.html":{},"interfaces/OperationClassification.html":{},"interfaces/TreeOperation.html":{}}}],["base.classifier.type",{"_index":2194,"title":{},"body":{"interfaces/DynamicOperation.html":{},"interfaces/OpInput.html":{},"interfaces/OperationClassification.html":{},"interfaces/TreeOperation.html":{}}}],["base.displayname",{"_index":2237,"title":{},"body":{"interfaces/DynamicOperation.html":{},"interfaces/OpInput.html":{},"interfaces/OperationClassification.html":{},"interfaces/TreeOperation.html":{}}}],["base.dx",{"_index":2238,"title":{},"body":{"interfaces/DynamicOperation.html":{},"interfaces/OpInput.html":{},"interfaces/OperationClassification.html":{},"interfaces/TreeOperation.html":{}}}],["base.inlets",{"_index":2236,"title":{},"body":{"interfaces/DynamicOperation.html":{},"interfaces/OpInput.html":{},"interfaces/OperationClassification.html":{},"interfaces/TreeOperation.html":{}}}],["base.inlets.filter((i",{"_index":2214,"title":{},"body":{"interfaces/DynamicOperation.html":{},"interfaces/OpInput.html":{},"interfaces/OperationClassification.html":{},"interfaces/TreeOperation.html":{}}}],["base.inlets.length",{"_index":2227,"title":{},"body":{"interfaces/DynamicOperation.html":{},"interfaces/OpInput.html":{},"interfaces/OperationClassification.html":{},"interfaces/TreeOperation.html":{}}}],["base.max_inputs",{"_index":2239,"title":{},"body":{"interfaces/DynamicOperation.html":{},"interfaces/OpInput.html":{},"interfaces/OperationClassification.html":{},"interfaces/TreeOperation.html":{}}}],["base.name",{"_index":2198,"title":{},"body":{"interfaces/DynamicOperation.html":{},"interfaces/OpInput.html":{},"interfaces/OperationClassification.html":{},"interfaces/TreeOperation.html":{}}}],["base.old_names",{"_index":2235,"title":{},"body":{"interfaces/DynamicOperation.html":{},"interfaces/OpInput.html":{},"interfaces/OperationClassification.html":{},"interfaces/TreeOperation.html":{}}}],["base.params",{"_index":2240,"title":{},"body":{"interfaces/DynamicOperation.html":{},"interfaces/OpInput.html":{},"interfaces/OperationClassification.html":{},"interfaces/TreeOperation.html":{}}}],["base_cell",{"_index":3748,"title":{},"body":{"classes/Render.html":{}}}],["base_clear_x",{"_index":3837,"title":{},"body":{"classes/Render.html":{}}}],["base_clear_y",{"_index":3839,"title":{},"body":{"classes/Render.html":{}}}],["base_fill_x",{"_index":3841,"title":{},"body":{"classes/Render.html":{}}}],["base_fill_y",{"_index":3843,"title":{},"body":{"classes/Render.html":{}}}],["base_op",{"_index":609,"title":{},"body":{"interfaces/ChainOp.html":{},"interfaces/PairedOp.html":{},"interfaces/PedalEvent.html":{},"interfaces/PlayerOp.html":{}}}],["base_op.perform(d",{"_index":612,"title":{},"body":{"interfaces/ChainOp.html":{},"interfaces/PairedOp.html":{},"interfaces/PedalEvent.html":{},"interfaces/PlayerOp.html":{}}}],["base_op.perform(getdefaultparams(base_op",{"_index":611,"title":{},"body":{"interfaces/ChainOp.html":{},"interfaces/PairedOp.html":{},"interfaces/PedalEvent.html":{},"interfaces/PlayerOp.html":{}}}],["based",{"_index":128,"title":{},"body":{"classes/AbstractOpFactory.html":{},"classes/BaseOp.html":{},"classes/Branch.html":{},"classes/Bus.html":{},"interfaces/DesignActions.html":{},"interfaces/DraftOperationClassification.html":{},"interfaces/LoomConfig.html":{},"classes/Merge.html":{},"interfaces/OpClassifier.html":{},"interfaces/OperationProperties.html":{},"classes/PedalConfig.html":{},"classes/Pipe.html":{},"injectables/PlayerService.html":{},"classes/Seed.html":{},"interfaces/TopologyDef.html":{},"miscellaneous/typealiases.html":{}}}],["basenode",{"_index":2276,"title":{},"body":{"interfaces/IOTuple.html":{},"interfaces/TreeNode.html":{},"miscellaneous/typealiases.html":{}}}],["baseop",{"_index":25,"title":{"classes/BaseOp.html":{}},"body":{"classes/AbstractOpFactory.html":{},"classes/BaseOp.html":{},"classes/Branch.html":{},"classes/Bus.html":{},"interfaces/ChainOp.html":{},"interfaces/DraftOperationClassification.html":{},"interfaces/DynamicOperation.html":{},"interfaces/LoomConfig.html":{},"classes/Merge.html":{},"interfaces/OpClassifier.html":{},"interfaces/OpInput.html":{},"interfaces/OperationClassification.html":{},"interfaces/OperationProperties.html":{},"interfaces/PairedOp.html":{},"classes/PedalConfig.html":{},"interfaces/PedalEvent.html":{},"classes/Pipe.html":{},"interfaces/PlayerOp.html":{},"injectables/PlayerService.html":{},"classes/Seed.html":{},"interfaces/TopologyDef.html":{},"interfaces/TreeOperation.html":{}}}],["baseop(...args",{"_index":282,"title":{},"body":{"classes/AbstractOpFactory.html":{},"classes/BaseOp.html":{},"classes/Branch.html":{},"classes/Bus.html":{},"classes/Merge.html":{},"interfaces/OpClassifier.html":{},"interfaces/OperationProperties.html":{},"classes/Pipe.html":{},"classes/Seed.html":{},"interfaces/TopologyDef.html":{}}}],["basic",{"_index":584,"title":{},"body":{"interfaces/ChainOp.html":{},"interfaces/PairedOp.html":{},"interfaces/PedalEvent.html":{},"interfaces/PlayerOp.html":{},"index.html":{}}}],["basics",{"_index":4485,"title":{},"body":{"index.html":{}}}],["basis",{"_index":3682,"title":{},"body":{"components/PlayerComponent.html":{},"components/WeavingStateComponent.html":{}}}],["basket",{"_index":1815,"title":{},"body":{"interfaces/DraftOperationClassification.html":{},"interfaces/LoomConfig.html":{},"classes/PedalConfig.html":{},"injectables/PlayerService.html":{}}}],["bbc5ff",{"_index":3113,"title":{},"body":{"components/OpSequencerComponent.html":{},"components/WeavingStateComponent.html":{}}}],["before",{"_index":1626,"title":{},"body":{"interfaces/DraftMap.html":{},"interfaces/Interlacement.html":{},"interfaces/InterlacementVal.html":{},"index.html":{}}}],["being",{"_index":1615,"title":{},"body":{"interfaces/DraftMap.html":{},"interfaces/Interlacement.html":{},"interfaces/InterlacementVal.html":{},"interfaces/Pedal.html":{},"classes/PedalStatus.html":{},"injectables/PedalsService.html":{},"injectables/ViewportService.html":{}}}],["belong",{"_index":2290,"title":{},"body":{"interfaces/IOTuple.html":{},"interfaces/TreeNode.html":{}}}],["belonging",{"_index":3978,"title":{},"body":{"classes/Shape.html":{}}}],["between",{"_index":900,"title":{},"body":{"interfaces/Crossing.html":{},"interfaces/DraftOperationClassification.html":{},"components/DraftdetailComponent.html":{},"interfaces/IOTuple.html":{},"interfaces/LoomConfig.html":{},"classes/PedalConfig.html":{},"injectables/PlayerService.html":{},"classes/Shape-1.html":{},"classes/System.html":{},"interfaces/TreeNode.html":{},"interfaces/Vertex.html":{},"interfaces/YarnPath.html":{},"index.html":{},"miscellaneous/typealiases.html":{}}}],["betwen",{"_index":872,"title":{},"body":{"interfaces/Crossing.html":{},"interfaces/Vertex.html":{},"interfaces/YarnPath.html":{}}}],["big",{"_index":2176,"title":{},"body":{"interfaces/DynamicOperation.html":{},"interfaces/OpInput.html":{},"interfaces/OperationClassification.html":{},"interfaces/TreeOperation.html":{}}}],["binary",{"_index":4645,"title":{},"body":{"miscellaneous/typealiases.html":{}}}],["bind(this",{"_index":2611,"title":{},"body":{"injectables/MappingsService.html":{}}}],["bindings",{"_index":1697,"title":{},"body":{"interfaces/DraftOperationClassification.html":{},"interfaces/LoomConfig.html":{},"classes/PedalConfig.html":{},"injectables/PlayerService.html":{}}}],["bindwarp",{"_index":1840,"title":{},"body":{"interfaces/DraftOperationClassification.html":{},"interfaces/LoomConfig.html":{},"classes/PedalConfig.html":{},"injectables/PlayerService.html":{}}}],["bindweft",{"_index":1838,"title":{},"body":{"interfaces/DraftOperationClassification.html":{},"interfaces/LoomConfig.html":{},"classes/PedalConfig.html":{},"injectables/PlayerService.html":{}}}],["bitmap",{"_index":1353,"title":{},"body":{"interfaces/DesignActions.html":{}}}],["bitmapimage",{"_index":2945,"title":{},"body":{"components/NoteComponent.html":{}}}],["black",{"_index":2310,"title":{},"body":{"interfaces/Ink.html":{},"injectables/InkService.html":{},"components/InletComponent.html":{}}}],["bleh",{"_index":4244,"title":{},"body":{"injectables/ViewportService.html":{}}}],["bleh.y",{"_index":4248,"title":{},"body":{"injectables/ViewportService.html":{}}}],["block",{"_index":2114,"title":{},"body":{"components/DraftdetailComponent.html":{},"interfaces/DynamicOperation.html":{},"components/MixerViewComponent.html":{},"components/NoteComponent.html":{},"components/OpHelpModal.html":{},"interfaces/OpInput.html":{},"components/OpSequencerComponent.html":{},"interfaces/OperationClassification.html":{},"components/PlayerComponent.html":{},"interfaces/TreeOperation.html":{},"components/WeavingStateComponent.html":{}}}],["blocks",{"_index":4521,"title":{},"body":{"index.html":{}}}],["blue",{"_index":3684,"title":{},"body":{"components/PlayerComponent.html":{}}}],["bmp",{"_index":1673,"title":{},"body":{"interfaces/DraftNodeProxy.html":{},"interfaces/FileObj.html":{},"interfaces/FileSaver.html":{},"interfaces/Fileloader.html":{},"interfaces/LoadResponse.html":{},"interfaces/NodeComponentProxy.html":{},"interfaces/OpComponentProxy.html":{},"interfaces/SaveObj.html":{},"interfaces/StatusMessage.html":{},"interfaces/TreeNodeProxy.html":{}}}],["body",{"_index":2101,"title":{},"body":{"components/DraftdetailComponent.html":{},"components/OpSequencerComponent.html":{},"components/PlayerComponent.html":{},"components/WeavingStateComponent.html":{}}}],["bold",{"_index":3109,"title":{},"body":{"components/OpSequencerComponent.html":{},"components/OpsComponent.html":{},"components/SnackbarComponent.html":{}}}],["bool",{"_index":3206,"title":{},"body":{"interfaces/OperationParam.html":{},"classes/Params.html":{},"classes/System.html":{}}}],["boolean",{"_index":381,"title":{},"body":{"classes/Cell.html":{},"interfaces/ChainIndex.html":{},"interfaces/ChainOp.html":{},"components/ConnectionComponent.html":{},"classes/DBListener.html":{},"classes/DBListenerArray.html":{},"classes/DBNode.html":{},"classes/DBNodeArray.html":{},"classes/DBTwoWay.html":{},"classes/DBTwoWayArray.html":{},"classes/DBWriteBuffer.html":{},"classes/DBWriter.html":{},"classes/DBWriterArray.html":{},"interfaces/DensityUnits.html":{},"interfaces/DesignActions.html":{},"interfaces/DesignMode.html":{},"interfaces/DraftMap.html":{},"interfaces/DraftNodeProxy.html":{},"interfaces/DraftOperationClassification.html":{},"components/DraftdetailComponent.html":{},"interfaces/FileObj.html":{},"interfaces/FileSaver.html":{},"interfaces/Fileloader.html":{},"interfaces/IOTuple.html":{},"interfaces/Ink.html":{},"injectables/InkService.html":{},"components/InletComponent.html":{},"interfaces/Interlacement.html":{},"interfaces/InterlacementVal.html":{},"interfaces/LoadResponse.html":{},"interfaces/LoomConfig.html":{},"interfaces/LoomTypes.html":{},"injectables/MappingsService.html":{},"interfaces/MaterialTypes.html":{},"interfaces/NodeComponentProxy.html":{},"interfaces/NodeMethods.html":{},"interfaces/NodeParams.html":{},"classes/OnlineStatus.html":{},"interfaces/OpComponentProxy.html":{},"components/OpHelpModal.html":{},"classes/OpSequencer.html":{},"interfaces/OperationParam.html":{},"interfaces/PairedOp.html":{},"components/ParameterComponent.html":{},"classes/Params.html":{},"interfaces/Pedal.html":{},"classes/PedalConfig.html":{},"interfaces/PedalEvent.html":{},"classes/PedalStatus.html":{},"injectables/PedalsService.html":{},"components/PlayerComponent.html":{},"interfaces/PlayerOp.html":{},"injectables/PlayerService.html":{},"interfaces/PlayerState.html":{},"interfaces/PlayerState-1.html":{},"classes/Render.html":{},"interfaces/SaveObj.html":{},"classes/Selection.html":{},"injectables/SequencerService.html":{},"classes/Shape-1.html":{},"classes/Shuttle.html":{},"interfaces/StatusMessage.html":{},"classes/System.html":{},"interfaces/TreeNode.html":{},"interfaces/TreeNodeProxy.html":{},"interfaces/ViewModes.html":{},"interfaces/WeavingLog.html":{},"interfaces/WeavingPick.html":{},"interfaces/WeavingPick-1.html":{},"components/WeavingStateComponent.html":{},"index.html":{},"miscellaneous/typealiases.html":{}}}],["boolparam",{"_index":3170,"title":{},"body":{"interfaces/OperationParam.html":{},"components/ParameterComponent.html":{},"classes/Params.html":{},"miscellaneous/typealiases.html":{}}}],["boolparam.falsestate",{"_index":3336,"title":{},"body":{"components/ParameterComponent.html":{}}}],["boolparam.truestate",{"_index":3335,"title":{},"body":{"components/ParameterComponent.html":{}}}],["border",{"_index":2475,"title":{},"body":{"components/InletComponent.html":{},"components/MixerViewComponent.html":{},"components/NoteComponent.html":{},"components/OpSequencerComponent.html":{},"components/ParameterComponent.html":{},"components/PlayerComponent.html":{},"components/WeavingStateComponent.html":{}}}],["border:thin",{"_index":2844,"title":{},"body":{"components/MixerViewComponent.html":{}}}],["both",{"_index":130,"title":{},"body":{"classes/AbstractOpFactory.html":{},"classes/BaseOp.html":{},"classes/Branch.html":{},"classes/Bus.html":{},"classes/DBListener.html":{},"classes/DBListenerArray.html":{},"classes/DBNode.html":{},"classes/DBNodeArray.html":{},"classes/DBTwoWay.html":{},"classes/DBTwoWayArray.html":{},"classes/DBWriteBuffer.html":{},"classes/DBWriter.html":{},"classes/DBWriterArray.html":{},"classes/Merge.html":{},"interfaces/NodeMethods.html":{},"interfaces/NodeParams.html":{},"classes/OnlineStatus.html":{},"interfaces/OpClassifier.html":{},"interfaces/OperationProperties.html":{},"classes/Pipe.html":{},"classes/Seed.html":{},"interfaces/TopologyDef.html":{},"index.html":{}}}],["bottom",{"_index":875,"title":{},"body":{"interfaces/Crossing.html":{},"components/DraftdetailComponent.html":{},"interfaces/Ink.html":{},"injectables/InkService.html":{},"components/OpSequencerComponent.html":{},"components/PlayerComponent.html":{},"interfaces/Vertex.html":{},"components/WeavingStateComponent.html":{},"interfaces/YarnPath.html":{},"miscellaneous/typealiases.html":{}}}],["bottomright",{"_index":783,"title":{},"body":{"components/ConnectionComponent.html":{}}}],["bound",{"_index":1699,"title":{},"body":{"interfaces/DraftOperationClassification.html":{},"interfaces/LoomConfig.html":{},"classes/PedalConfig.html":{},"injectables/PlayerService.html":{}}}],["bounds",{"_index":336,"title":{"interfaces/Bounds.html":{}},"body":{"interfaces/Bounds.html":{},"components/ConnectionComponent.html":{},"interfaces/DesignActions.html":{},"interfaces/DraftNodeProxy.html":{},"interfaces/FileObj.html":{},"interfaces/FileSaver.html":{},"interfaces/Fileloader.html":{},"interfaces/LoadResponse.html":{},"directives/MarqueeComponent.html":{},"components/MixerViewComponent.html":{},"interfaces/NodeComponentProxy.html":{},"components/NoteComponent.html":{},"interfaces/OpComponentProxy.html":{},"interfaces/Point.html":{},"interfaces/SaveObj.html":{},"directives/SelectionComponent.html":{},"classes/Shape.html":{},"classes/Shape-1.html":{},"components/SnackbarComponent.html":{},"interfaces/StatusMessage.html":{},"interfaces/TreeNodeProxy.html":{},"injectables/ViewportService.html":{}}}],["bounds(value",{"_index":1337,"title":{},"body":{"interfaces/DesignActions.html":{}}}],["bounds.height",{"_index":4029,"title":{},"body":{"classes/Shape-1.html":{},"components/SnackbarComponent.html":{}}}],["bounds.topleft.y",{"_index":4027,"title":{},"body":{"classes/Shape-1.html":{}}}],["bounds.width",{"_index":4028,"title":{},"body":{"classes/Shape-1.html":{}}}],["bounds:bounds",{"_index":2671,"title":{},"body":{"directives/MarqueeComponent.html":{},"directives/SelectionComponent.html":{},"classes/Shape-1.html":{}}}],["boundsstring",{"_index":3988,"title":{},"body":{"classes/Shape.html":{}}}],["box",{"_index":3112,"title":{},"body":{"components/OpSequencerComponent.html":{},"components/WeavingStateComponent.html":{}}}],["brain",{"_index":4579,"title":{},"body":{"index.html":{}}}],["branch",{"_index":102,"title":{"classes/Branch.html":{}},"body":{"classes/AbstractOpFactory.html":{},"classes/BaseOp.html":{},"classes/Branch.html":{},"classes/Bus.html":{},"interfaces/DynamicOperation.html":{},"classes/Merge.html":{},"interfaces/OpClassifier.html":{},"interfaces/OpInput.html":{},"interfaces/OperationClassification.html":{},"interfaces/OperationProperties.html":{},"classes/Pipe.html":{},"classes/Seed.html":{},"interfaces/TopologyDef.html":{},"interfaces/TreeOperation.html":{}}}],["branchop",{"_index":2229,"title":{},"body":{"interfaces/DynamicOperation.html":{},"interfaces/OpInput.html":{},"interfaces/OperationClassification.html":{},"interfaces/TreeOperation.html":{}}}],["branchoperation",{"_index":312,"title":{},"body":{"classes/AbstractOpFactory.html":{},"classes/BaseOp.html":{},"classes/Branch.html":{},"classes/Bus.html":{},"classes/Merge.html":{},"interfaces/OpClassifier.html":{},"interfaces/OperationProperties.html":{},"classes/Pipe.html":{},"classes/Seed.html":{},"interfaces/TopologyDef.html":{}}}],["break",{"_index":197,"title":{},"body":{"classes/AbstractOpFactory.html":{},"classes/BaseOp.html":{},"classes/Branch.html":{},"classes/Bus.html":{},"interfaces/DynamicOperation.html":{},"components/InletComponent.html":{},"classes/Merge.html":{},"interfaces/OpClassifier.html":{},"interfaces/OpInput.html":{},"classes/OpSequencer.html":{},"interfaces/OperationClassification.html":{},"interfaces/OperationProperties.html":{},"components/ParameterComponent.html":{},"classes/Pipe.html":{},"components/PlayerComponent.html":{},"classes/Seed.html":{},"interfaces/TopologyDef.html":{},"interfaces/TreeOperation.html":{},"components/VirtualPedalsComponent.html":{},"components/WeavingStateComponent.html":{}}}],["breaks",{"_index":4016,"title":{},"body":{"classes/Shape-1.html":{}}}],["broader",{"_index":1594,"title":{},"body":{"interfaces/DraftMap.html":{},"interfaces/Interlacement.html":{},"interfaces/InterlacementVal.html":{}}}],["browse",{"_index":4614,"title":{},"body":{"modules.html":{}}}],["browser",{"_index":4354,"title":{},"body":{"dependencies.html":{},"index.html":{},"modules.html":{}}}],["buffer",{"_index":1029,"title":{},"body":{"classes/DBListener.html":{},"classes/DBListenerArray.html":{},"classes/DBNode.html":{},"classes/DBNodeArray.html":{},"classes/DBTwoWay.html":{},"classes/DBTwoWayArray.html":{},"classes/DBWriteBuffer.html":{},"classes/DBWriter.html":{},"classes/DBWriterArray.html":{},"interfaces/NodeMethods.html":{},"interfaces/NodeParams.html":{},"classes/OnlineStatus.html":{}}}],["build",{"_index":4606,"title":{},"body":{"index.html":{}}}],["buildableoperation",{"_index":315,"title":{},"body":{"classes/AbstractOpFactory.html":{},"classes/BaseOp.html":{},"classes/Branch.html":{},"classes/Bus.html":{},"interfaces/ChainOp.html":{},"interfaces/DraftOperationClassification.html":{},"interfaces/DynamicOperation.html":{},"interfaces/LoomConfig.html":{},"classes/Merge.html":{},"interfaces/OpClassifier.html":{},"interfaces/OpInput.html":{},"interfaces/OperationClassification.html":{},"interfaces/OperationProperties.html":{},"interfaces/PairedOp.html":{},"classes/PedalConfig.html":{},"interfaces/PedalEvent.html":{},"classes/Pipe.html":{},"interfaces/PlayerOp.html":{},"injectables/PlayerService.html":{},"classes/Seed.html":{},"interfaces/TopologyDef.html":{},"interfaces/TreeOperation.html":{},"miscellaneous/typealiases.html":{}}}],["building",{"_index":4520,"title":{},"body":{"index.html":{}}}],["buildtreeop",{"_index":4392,"title":{},"body":{"miscellaneous/functions.html":{}}}],["buildtreeop(base",{"_index":2183,"title":{},"body":{"interfaces/DynamicOperation.html":{},"interfaces/OpInput.html":{},"interfaces/OperationClassification.html":{},"interfaces/TreeOperation.html":{},"miscellaneous/functions.html":{}}}],["built",{"_index":4470,"title":{},"body":{"index.html":{}}}],["bulma",{"_index":4368,"title":{},"body":{"dependencies.html":{}}}],["bundles",{"_index":4513,"title":{},"body":{"index.html":{}}}],["bus",{"_index":103,"title":{"classes/Bus.html":{}},"body":{"classes/AbstractOpFactory.html":{},"classes/BaseOp.html":{},"classes/Branch.html":{},"classes/Bus.html":{},"interfaces/DynamicOperation.html":{},"classes/Merge.html":{},"interfaces/OpClassifier.html":{},"interfaces/OpInput.html":{},"interfaces/OperationClassification.html":{},"interfaces/OperationProperties.html":{},"classes/Pipe.html":{},"classes/Seed.html":{},"interfaces/TopologyDef.html":{},"interfaces/TreeOperation.html":{}}}],["busoperation",{"_index":313,"title":{},"body":{"classes/AbstractOpFactory.html":{},"classes/BaseOp.html":{},"classes/Branch.html":{},"classes/Bus.html":{},"classes/Merge.html":{},"interfaces/OpClassifier.html":{},"interfaces/OperationProperties.html":{},"classes/Pipe.html":{},"classes/Seed.html":{},"interfaces/TopologyDef.html":{}}}],["button",{"_index":2851,"title":{},"body":{"components/MixerViewComponent.html":{},"components/NoteComponent.html":{},"components/OpSequencerComponent.html":{},"components/OpsComponent.html":{},"components/ParameterComponent.html":{},"components/PlayerComponent.html":{},"components/VirtualPedalsComponent.html":{},"components/WeavingStateComponent.html":{}}}],["button.cxn",{"_index":2481,"title":{},"body":{"components/InletComponent.html":{}}}],["button.input",{"_index":2478,"title":{},"body":{"components/InletComponent.html":{}}}],["button.is",{"_index":3347,"title":{},"body":{"components/ParameterComponent.html":{}}}],["button.mat",{"_index":3118,"title":{},"body":{"components/OpSequencerComponent.html":{},"components/PlayerComponent.html":{},"components/WeavingStateComponent.html":{}}}],["button.selected",{"_index":2856,"title":{},"body":{"components/MixerViewComponent.html":{}}}],["c",{"_index":144,"title":{},"body":{"classes/AbstractOpFactory.html":{},"classes/BaseOp.html":{},"classes/Branch.html":{},"classes/Bus.html":{},"classes/Merge.html":{},"interfaces/OpClassifier.html":{},"interfaces/OperationProperties.html":{},"classes/Pipe.html":{},"classes/Seed.html":{},"interfaces/TopologyDef.html":{}}}],["c.category",{"_index":1882,"title":{},"body":{"interfaces/DraftOperationClassification.html":{},"interfaces/LoomConfig.html":{},"classes/PedalConfig.html":{},"injectables/PlayerService.html":{}}}],["c130",{"_index":3144,"title":{},"body":{"components/OpSequencerComponent.html":{}}}],["calc(100vh",{"_index":3676,"title":{},"body":{"components/PlayerComponent.html":{}}}],["calculatebounds",{"_index":648,"title":{},"body":{"components/ConnectionComponent.html":{}}}],["call",{"_index":216,"title":{},"body":{"classes/AbstractOpFactory.html":{},"classes/BaseOp.html":{},"classes/Branch.html":{},"classes/Bus.html":{},"interfaces/ChainIndex.html":{},"components/ConnectionComponent.html":{},"interfaces/DesignActions.html":{},"interfaces/DynamicOperation.html":{},"classes/Merge.html":{},"components/NoteComponent.html":{},"interfaces/OpClassifier.html":{},"interfaces/OpInput.html":{},"interfaces/OperationClassification.html":{},"interfaces/OperationProperties.html":{},"interfaces/Pedal.html":{},"classes/PedalStatus.html":{},"injectables/PedalsService.html":{},"classes/Pipe.html":{},"components/PlayerComponent.html":{},"classes/Seed.html":{},"injectables/SequencerService.html":{},"interfaces/TopologyDef.html":{},"interfaces/TreeOperation.html":{}}}],["called",{"_index":398,"title":{},"body":{"classes/Cell.html":{},"interfaces/ChainIndex.html":{},"interfaces/DesignActions.html":{},"components/DraftdetailComponent.html":{},"components/NoteComponent.html":{},"injectables/SequencerService.html":{},"injectables/ViewportService.html":{}}}],["calledd",{"_index":4208,"title":{},"body":{"injectables/ViewportService.html":{}}}],["calls",{"_index":1376,"title":{},"body":{"interfaces/DesignActions.html":{}}}],["can't",{"_index":3077,"title":{},"body":{"classes/OpSequencer.html":{}}}],["canvas",{"_index":672,"title":{},"body":{"components/ConnectionComponent.html":{},"interfaces/DesignActions.html":{},"interfaces/DraftNodeProxy.html":{},"interfaces/FileObj.html":{},"interfaces/FileSaver.html":{},"interfaces/Fileloader.html":{},"interfaces/LoadResponse.html":{},"interfaces/NodeComponentProxy.html":{},"components/NoteComponent.html":{},"interfaces/OpComponentProxy.html":{},"components/PlayerComponent.html":{},"interfaces/SaveObj.html":{},"classes/Shape-1.html":{},"interfaces/StatusMessage.html":{},"interfaces/TreeNodeProxy.html":{},"components/WeavingStateComponent.html":{}}}],["canvas2image",{"_index":4370,"title":{},"body":{"dependencies.html":{}}}],["case",{"_index":697,"title":{},"body":{"components/ConnectionComponent.html":{},"components/DraftdetailComponent.html":{},"interfaces/DynamicOperation.html":{},"components/InletComponent.html":{},"interfaces/OpInput.html":{},"classes/OpSequencer.html":{},"interfaces/OperationClassification.html":{},"components/ParameterComponent.html":{},"interfaces/TreeOperation.html":{},"components/VirtualPedalsComponent.html":{}}}],["catch",{"_index":1158,"title":{},"body":{"classes/DBListener.html":{},"classes/DBListenerArray.html":{},"classes/DBNode.html":{},"classes/DBNodeArray.html":{},"classes/DBTwoWay.html":{},"classes/DBTwoWayArray.html":{},"classes/DBWriteBuffer.html":{},"classes/DBWriter.html":{},"classes/DBWriterArray.html":{},"interfaces/NodeMethods.html":{},"interfaces/NodeParams.html":{},"classes/OnlineStatus.html":{}}}],["catch(result",{"_index":1010,"title":{},"body":{"classes/DBListener.html":{},"classes/DBListenerArray.html":{},"classes/DBNode.html":{},"classes/DBNodeArray.html":{},"classes/DBTwoWay.html":{},"classes/DBTwoWayArray.html":{},"classes/DBWriteBuffer.html":{},"classes/DBWriter.html":{},"classes/DBWriterArray.html":{},"interfaces/NodeMethods.html":{},"interfaces/NodeParams.html":{},"classes/OnlineStatus.html":{}}}],["categorized",{"_index":4599,"title":{},"body":{"index.html":{}}}],["category",{"_index":1679,"title":{},"body":{"interfaces/DraftOperationClassification.html":{},"interfaces/DynamicOperation.html":{},"interfaces/LoomConfig.html":{},"interfaces/OpInput.html":{},"interfaces/OperationClassification.html":{},"classes/PedalConfig.html":{},"injectables/PlayerService.html":{},"interfaces/TreeOperation.html":{}}}],["cdkscrollable",{"_index":1980,"title":{},"body":{"components/DraftdetailComponent.html":{}}}],["cell",{"_index":366,"title":{"classes/Cell.html":{}},"body":{"classes/Cell.html":{},"interfaces/DesignActions.html":{},"interfaces/DraftMap.html":{},"interfaces/Interlacement.html":{},"interfaces/InterlacementVal.html":{},"components/MixerViewComponent.html":{},"components/NoteComponent.html":{},"classes/Shape-1.html":{},"index.html":{},"miscellaneous/typealiases.html":{}}}],["cell_factor",{"_index":2715,"title":{},"body":{"components/MixerViewComponent.html":{}}}],["cell_size",{"_index":4299,"title":{},"body":{"components/WeavingStateComponent.html":{}}}],["cells",{"_index":873,"title":{},"body":{"interfaces/Crossing.html":{},"interfaces/DraftMap.html":{},"interfaces/Ink.html":{},"injectables/InkService.html":{},"interfaces/Interlacement.html":{},"interfaces/InterlacementVal.html":{},"classes/Shape-1.html":{},"interfaces/Vertex.html":{},"interfaces/YarnPath.html":{},"index.html":{}}}],["center",{"_index":2486,"title":{},"body":{"components/InletComponent.html":{},"components/ParameterComponent.html":{},"classes/Shape-1.html":{},"injectables/ViewportService.html":{}}}],["certain",{"_index":4559,"title":{},"body":{"index.html":{}}}],["ch",{"_index":482,"title":{},"body":{"interfaces/ChainIndex.html":{},"interfaces/ChainOp.html":{},"interfaces/PairedOp.html":{},"interfaces/PedalEvent.html":{},"interfaces/PlayerOp.html":{},"injectables/SequencerService.html":{}}}],["ch.id",{"_index":484,"title":{},"body":{"interfaces/ChainIndex.html":{},"components/OpSequencerComponent.html":{},"injectables/SequencerService.html":{}}}],["ch_id",{"_index":3909,"title":{},"body":{"injectables/SequencerService.html":{}}}],["chagnes",{"_index":4583,"title":{},"body":{"index.html":{}}}],["chain",{"_index":425,"title":{},"body":{"interfaces/ChainIndex.html":{},"interfaces/ChainOp.html":{},"interfaces/DraftOperationClassification.html":{},"interfaces/LoomConfig.html":{},"injectables/MappingsService.html":{},"components/OpSequencerComponent.html":{},"interfaces/PairedOp.html":{},"classes/PedalConfig.html":{},"interfaces/PedalEvent.html":{},"interfaces/PlayerOp.html":{},"injectables/PlayerService.html":{},"injectables/SequencerService.html":{},"miscellaneous/typealiases.html":{}}}],["chain(id",{"_index":2532,"title":{},"body":{"injectables/MappingsService.html":{}}}],["chain(pedalid",{"_index":1741,"title":{},"body":{"interfaces/DraftOperationClassification.html":{},"interfaces/LoomConfig.html":{},"classes/PedalConfig.html":{},"injectables/PlayerService.html":{}}}],["chainable",{"_index":2590,"title":{},"body":{"injectables/MappingsService.html":{}}}],["chainarray",{"_index":2517,"title":{},"body":{"injectables/MappingsService.html":{}}}],["chainarray(id",{"_index":2534,"title":{},"body":{"injectables/MappingsService.html":{}}}],["chainindex",{"_index":422,"title":{"interfaces/ChainIndex.html":{}},"body":{"interfaces/ChainIndex.html":{},"injectables/SequencerService.html":{}}}],["chainop",{"_index":433,"title":{"interfaces/ChainOp.html":{}},"body":{"interfaces/ChainIndex.html":{},"interfaces/ChainOp.html":{},"interfaces/DraftOperationClassification.html":{},"interfaces/LoomConfig.html":{},"injectables/MappingsService.html":{},"classes/OpSequencer.html":{},"interfaces/PairedOp.html":{},"classes/PedalConfig.html":{},"interfaces/PedalEvent.html":{},"interfaces/PlayerOp.html":{},"injectables/PlayerService.html":{},"injectables/SequencerService.html":{},"miscellaneous/functions.html":{}}}],["chains",{"_index":453,"title":{},"body":{"interfaces/ChainIndex.html":{},"injectables/SequencerService.html":{}}}],["chaintopedal",{"_index":3511,"title":{},"body":{"classes/PedalConfig.html":{}}}],["chaintopedal(pedalid",{"_index":1752,"title":{},"body":{"interfaces/DraftOperationClassification.html":{},"interfaces/LoomConfig.html":{},"classes/PedalConfig.html":{},"injectables/PlayerService.html":{}}}],["chances",{"_index":4541,"title":{},"body":{"index.html":{}}}],["change",{"_index":1098,"title":{},"body":{"classes/DBListener.html":{},"classes/DBListenerArray.html":{},"classes/DBNode.html":{},"classes/DBNodeArray.html":{},"classes/DBTwoWay.html":{},"classes/DBTwoWayArray.html":{},"classes/DBWriteBuffer.html":{},"classes/DBWriter.html":{},"classes/DBWriterArray.html":{},"interfaces/DesignActions.html":{},"interfaces/DraftOperationClassification.html":{},"interfaces/DynamicOperation.html":{},"interfaces/LoomConfig.html":{},"components/MixerViewComponent.html":{},"interfaces/NodeMethods.html":{},"interfaces/NodeParams.html":{},"classes/OnlineStatus.html":{},"interfaces/OpInput.html":{},"interfaces/OperationClassification.html":{},"interfaces/Pedal.html":{},"classes/PedalConfig.html":{},"classes/PedalStatus.html":{},"injectables/PedalsService.html":{},"injectables/PlayerService.html":{},"interfaces/PlayerState.html":{},"interfaces/PlayerState-1.html":{},"interfaces/TreeOperation.html":{},"interfaces/WeavingLog.html":{},"interfaces/WeavingPick.html":{},"interfaces/WeavingPick-1.html":{}}}],["changed",{"_index":1077,"title":{},"body":{"classes/DBListener.html":{},"classes/DBListenerArray.html":{},"classes/DBNode.html":{},"classes/DBNodeArray.html":{},"classes/DBTwoWay.html":{},"classes/DBTwoWayArray.html":{},"classes/DBWriteBuffer.html":{},"classes/DBWriter.html":{},"classes/DBWriterArray.html":{},"interfaces/NodeMethods.html":{},"interfaces/NodeParams.html":{},"classes/OnlineStatus.html":{}}}],["changedetectionstrategy",{"_index":1292,"title":{},"body":{"interfaces/DesignActions.html":{}}}],["changedetectorref",{"_index":2763,"title":{},"body":{"components/MixerViewComponent.html":{}}}],["changeloomwidth",{"_index":3696,"title":{},"body":{"injectables/PlayerService.html":{}}}],["changeloomwidth(e",{"_index":3704,"title":{},"body":{"injectables/PlayerService.html":{}}}],["changes",{"_index":1129,"title":{},"body":{"classes/DBListener.html":{},"classes/DBListenerArray.html":{},"classes/DBNode.html":{},"classes/DBNodeArray.html":{},"classes/DBTwoWay.html":{},"classes/DBTwoWayArray.html":{},"classes/DBWriteBuffer.html":{},"classes/DBWriter.html":{},"classes/DBWriterArray.html":{},"components/DraftdetailComponent.html":{},"components/MixerViewComponent.html":{},"interfaces/NodeMethods.html":{},"interfaces/NodeParams.html":{},"classes/OnlineStatus.html":{},"components/ParameterComponent.html":{},"interfaces/Pedal.html":{},"classes/PedalStatus.html":{},"injectables/PedalsService.html":{},"index.html":{}}}],["changing",{"_index":196,"title":{},"body":{"classes/AbstractOpFactory.html":{},"classes/BaseOp.html":{},"classes/Branch.html":{},"classes/Bus.html":{},"classes/DBListener.html":{},"classes/DBListenerArray.html":{},"classes/DBNode.html":{},"classes/DBNodeArray.html":{},"classes/DBTwoWay.html":{},"classes/DBTwoWayArray.html":{},"classes/DBWriteBuffer.html":{},"classes/DBWriter.html":{},"classes/DBWriterArray.html":{},"interfaces/DynamicOperation.html":{},"classes/Merge.html":{},"interfaces/NodeMethods.html":{},"interfaces/NodeParams.html":{},"classes/OnlineStatus.html":{},"interfaces/OpClassifier.html":{},"interfaces/OpInput.html":{},"interfaces/OperationClassification.html":{},"interfaces/OperationProperties.html":{},"classes/Pipe.html":{},"classes/Seed.html":{},"interfaces/TopologyDef.html":{},"interfaces/TreeOperation.html":{}}}],["charge",{"_index":1782,"title":{},"body":{"interfaces/DraftOperationClassification.html":{},"interfaces/LoomConfig.html":{},"interfaces/Pedal.html":{},"classes/PedalConfig.html":{},"classes/PedalStatus.html":{},"injectables/PedalsService.html":{},"injectables/PlayerService.html":{}}}],["check",{"_index":1150,"title":{},"body":{"classes/DBListener.html":{},"classes/DBListenerArray.html":{},"classes/DBNode.html":{},"classes/DBNodeArray.html":{},"classes/DBTwoWay.html":{},"classes/DBTwoWayArray.html":{},"classes/DBWriteBuffer.html":{},"classes/DBWriter.html":{},"classes/DBWriterArray.html":{},"interfaces/DesignActions.html":{},"interfaces/DynamicOperation.html":{},"interfaces/NodeMethods.html":{},"interfaces/NodeParams.html":{},"classes/OnlineStatus.html":{},"interfaces/OpInput.html":{},"interfaces/OperationClassification.html":{},"classes/Shape-1.html":{},"interfaces/TreeOperation.html":{}}}],["checkalive",{"_index":1156,"title":{},"body":{"classes/DBListener.html":{},"classes/DBListenerArray.html":{},"classes/DBNode.html":{},"classes/DBNodeArray.html":{},"classes/DBTwoWay.html":{},"classes/DBTwoWayArray.html":{},"classes/DBWriteBuffer.html":{},"classes/DBWriter.html":{},"classes/DBWriterArray.html":{},"interfaces/NodeMethods.html":{},"interfaces/NodeParams.html":{},"classes/OnlineStatus.html":{}}}],["checked",{"_index":4459,"title":{},"body":{"index.html":{}}}],["checks",{"_index":2361,"title":{},"body":{"interfaces/Ink.html":{},"injectables/InkService.html":{}}}],["child",{"_index":578,"title":{},"body":{"interfaces/ChainOp.html":{},"classes/DBListener.html":{},"classes/DBListenerArray.html":{},"classes/DBNode.html":{},"classes/DBNodeArray.html":{},"classes/DBTwoWay.html":{},"classes/DBTwoWayArray.html":{},"classes/DBWriteBuffer.html":{},"classes/DBWriter.html":{},"classes/DBWriterArray.html":{},"interfaces/DynamicOperation.html":{},"interfaces/NodeMethods.html":{},"interfaces/NodeParams.html":{},"classes/OnlineStatus.html":{},"interfaces/OpInput.html":{},"interfaces/OperationClassification.html":{},"interfaces/PairedOp.html":{},"interfaces/PedalEvent.html":{},"interfaces/PlayerOp.html":{},"interfaces/TreeOperation.html":{}}}],["child')).length",{"_index":2201,"title":{},"body":{"interfaces/DynamicOperation.html":{},"interfaces/OpInput.html":{},"interfaces/OperationClassification.html":{},"interfaces/TreeOperation.html":{}}}],["child's",{"_index":1096,"title":{},"body":{"classes/DBListener.html":{},"classes/DBListenerArray.html":{},"classes/DBNode.html":{},"classes/DBNodeArray.html":{},"classes/DBTwoWay.html":{},"classes/DBTwoWayArray.html":{},"classes/DBWriteBuffer.html":{},"classes/DBWriter.html":{},"classes/DBWriterArray.html":{},"interfaces/NodeMethods.html":{},"interfaces/NodeParams.html":{},"classes/OnlineStatus.html":{}}}],["child(this.parentnode.ref",{"_index":1086,"title":{},"body":{"classes/DBListener.html":{},"classes/DBListenerArray.html":{},"classes/DBNode.html":{},"classes/DBNodeArray.html":{},"classes/DBTwoWay.html":{},"classes/DBTwoWayArray.html":{},"classes/DBWriteBuffer.html":{},"classes/DBWriter.html":{},"classes/DBWriterArray.html":{},"interfaces/NodeMethods.html":{},"interfaces/NodeParams.html":{},"classes/OnlineStatus.html":{}}}],["childkeys",{"_index":1111,"title":{},"body":{"classes/DBListener.html":{},"classes/DBListenerArray.html":{},"classes/DBNode.html":{},"classes/DBNodeArray.html":{},"classes/DBTwoWay.html":{},"classes/DBTwoWayArray.html":{},"classes/DBWriteBuffer.html":{},"classes/DBWriter.html":{},"classes/DBWriterArray.html":{},"interfaces/NodeMethods.html":{},"interfaces/NodeParams.html":{},"classes/OnlineStatus.html":{}}}],["childnode",{"_index":1087,"title":{},"body":{"classes/DBListener.html":{},"classes/DBListenerArray.html":{},"classes/DBNode.html":{},"classes/DBNodeArray.html":{},"classes/DBTwoWay.html":{},"classes/DBTwoWayArray.html":{},"classes/DBWriteBuffer.html":{},"classes/DBWriter.html":{},"classes/DBWriterArray.html":{},"interfaces/NodeMethods.html":{},"interfaces/NodeParams.html":{},"classes/OnlineStatus.html":{}}}],["childnode.attach",{"_index":1120,"title":{},"body":{"classes/DBListener.html":{},"classes/DBListenerArray.html":{},"classes/DBNode.html":{},"classes/DBNodeArray.html":{},"classes/DBTwoWay.html":{},"classes/DBTwoWayArray.html":{},"classes/DBWriteBuffer.html":{},"classes/DBWriter.html":{},"classes/DBWriterArray.html":{},"interfaces/NodeMethods.html":{},"interfaces/NodeParams.html":{},"classes/OnlineStatus.html":{}}}],["childref",{"_index":1085,"title":{},"body":{"classes/DBListener.html":{},"classes/DBListenerArray.html":{},"classes/DBNode.html":{},"classes/DBNodeArray.html":{},"classes/DBTwoWay.html":{},"classes/DBTwoWayArray.html":{},"classes/DBWriteBuffer.html":{},"classes/DBWriter.html":{},"classes/DBWriterArray.html":{},"interfaces/NodeMethods.html":{},"interfaces/NodeParams.html":{},"classes/OnlineStatus.html":{}}}],["children",{"_index":1281,"title":{},"body":{"interfaces/DensityUnits.html":{},"interfaces/DesignMode.html":{},"interfaces/LoomTypes.html":{},"interfaces/MaterialTypes.html":{},"interfaces/ViewModes.html":{}}}],["circular",{"_index":3011,"title":{},"body":{"classes/OpSequencer.html":{}}}],["class",{"_index":0,"title":{"classes/AbstractOpFactory.html":{},"classes/BaseOp.html":{},"classes/Branch.html":{},"classes/Bus.html":{},"classes/Cell.html":{},"classes/DBListener.html":{},"classes/DBListenerArray.html":{},"classes/DBNode.html":{},"classes/DBNodeArray.html":{},"classes/DBTwoWay.html":{},"classes/DBTwoWayArray.html":{},"classes/DBWriteBuffer.html":{},"classes/DBWriter.html":{},"classes/DBWriterArray.html":{},"classes/Merge.html":{},"classes/OnlineStatus.html":{},"classes/OpSequencer.html":{},"classes/Params.html":{},"classes/PedalConfig.html":{},"classes/PedalStatus.html":{},"classes/Pipe.html":{},"classes/Render.html":{},"classes/Seed.html":{},"classes/Selection.html":{},"classes/Shape.html":{},"classes/Shape-1.html":{},"classes/Shuttle.html":{},"classes/System.html":{}},"body":{"classes/AbstractOpFactory.html":{},"classes/BaseOp.html":{},"classes/Branch.html":{},"classes/Bus.html":{},"classes/Cell.html":{},"interfaces/ChainIndex.html":{},"components/ConnectionComponent.html":{},"classes/DBListener.html":{},"classes/DBListenerArray.html":{},"classes/DBNode.html":{},"classes/DBNodeArray.html":{},"classes/DBTwoWay.html":{},"classes/DBTwoWayArray.html":{},"classes/DBWriteBuffer.html":{},"classes/DBWriter.html":{},"classes/DBWriterArray.html":{},"interfaces/DesignActions.html":{},"interfaces/DraftOperationClassification.html":{},"components/DraftdetailComponent.html":{},"components/ImageComponent.html":{},"interfaces/Ink.html":{},"injectables/InkService.html":{},"components/InletComponent.html":{},"injectables/LayersService.html":{},"interfaces/LoomConfig.html":{},"injectables/MappingsService.html":{},"directives/MarqueeComponent.html":{},"classes/Merge.html":{},"modules/MixerModule.html":{},"components/MixerViewComponent.html":{},"interfaces/NodeMethods.html":{},"interfaces/NodeParams.html":{},"components/NoteComponent.html":{},"classes/OnlineStatus.html":{},"interfaces/OpClassifier.html":{},"components/OpHelpModal.html":{},"classes/OpSequencer.html":{},"components/OpSequencerComponent.html":{},"interfaces/OperationParam.html":{},"interfaces/OperationProperties.html":{},"components/OpsComponent.html":{},"components/ParameterComponent.html":{},"classes/Params.html":{},"interfaces/Pedal.html":{},"classes/PedalConfig.html":{},"classes/PedalStatus.html":{},"injectables/PedalsService.html":{},"classes/Pipe.html":{},"components/PlayerComponent.html":{},"modules/PlayerModule.html":{},"injectables/PlayerService.html":{},"classes/Render.html":{},"classes/Seed.html":{},"classes/Selection.html":{},"directives/SelectionComponent.html":{},"injectables/SequencerService.html":{},"classes/Shape.html":{},"classes/Shape-1.html":{},"classes/Shuttle.html":{},"components/SnackbarComponent.html":{},"classes/System.html":{},"interfaces/TopologyDef.html":{},"injectables/ViewportService.html":{},"components/VirtualPedalsComponent.html":{},"components/WeavingStateComponent.html":{}}}],["class.category",{"_index":3093,"title":{},"body":{"components/OpSequencerComponent.html":{},"components/OpsComponent.html":{}}}],["class.dx",{"_index":3094,"title":{},"body":{"components/OpSequencerComponent.html":{},"components/OpsComponent.html":{}}}],["classes",{"_index":2,"title":{},"body":{"classes/AbstractOpFactory.html":{},"classes/BaseOp.html":{},"classes/Branch.html":{},"classes/Bus.html":{},"classes/Cell.html":{},"classes/DBListener.html":{},"classes/DBListenerArray.html":{},"classes/DBNode.html":{},"classes/DBNodeArray.html":{},"classes/DBTwoWay.html":{},"classes/DBTwoWayArray.html":{},"classes/DBWriteBuffer.html":{},"classes/DBWriter.html":{},"classes/DBWriterArray.html":{},"classes/Merge.html":{},"classes/OnlineStatus.html":{},"classes/OpSequencer.html":{},"classes/Params.html":{},"classes/PedalConfig.html":{},"classes/PedalStatus.html":{},"classes/Pipe.html":{},"classes/Render.html":{},"classes/Seed.html":{},"classes/Selection.html":{},"classes/Shape.html":{},"classes/Shape-1.html":{},"classes/Shuttle.html":{},"classes/System.html":{},"overview.html":{}}}],["classifier",{"_index":226,"title":{},"body":{"classes/AbstractOpFactory.html":{},"classes/BaseOp.html":{},"classes/Branch.html":{},"classes/Bus.html":{},"classes/Merge.html":{},"interfaces/OpClassifier.html":{},"interfaces/OperationProperties.html":{},"classes/Pipe.html":{},"classes/Seed.html":{},"interfaces/TopologyDef.html":{}}}],["classifiers",{"_index":275,"title":{},"body":{"classes/AbstractOpFactory.html":{},"classes/BaseOp.html":{},"classes/Branch.html":{},"classes/Bus.html":{},"classes/Merge.html":{},"interfaces/OpClassifier.html":{},"interfaces/OperationProperties.html":{},"classes/Pipe.html":{},"classes/Seed.html":{},"interfaces/TopologyDef.html":{}}}],["classifies",{"_index":95,"title":{},"body":{"classes/AbstractOpFactory.html":{},"classes/BaseOp.html":{},"classes/Branch.html":{},"classes/Bus.html":{},"classes/Merge.html":{},"interfaces/OpClassifier.html":{},"interfaces/OperationProperties.html":{},"classes/Pipe.html":{},"classes/Seed.html":{},"interfaces/TopologyDef.html":{}}}],["classify",{"_index":2246,"title":{},"body":{"interfaces/DynamicOperation.html":{},"interfaces/OpInput.html":{},"interfaces/OperationClassification.html":{},"interfaces/TreeOperation.html":{}}}],["clear",{"_index":4180,"title":{},"body":{"injectables/ViewportService.html":{}}}],["cleared",{"_index":1022,"title":{},"body":{"classes/DBListener.html":{},"classes/DBListenerArray.html":{},"classes/DBNode.html":{},"classes/DBNodeArray.html":{},"classes/DBTwoWay.html":{},"classes/DBTwoWayArray.html":{},"classes/DBWriteBuffer.html":{},"classes/DBWriter.html":{},"classes/DBWriterArray.html":{},"interfaces/NodeMethods.html":{},"interfaces/NodeParams.html":{},"classes/OnlineStatus.html":{}}}],["clearlayers",{"_index":2501,"title":{},"body":{"injectables/LayersService.html":{}}}],["clears",{"_index":2349,"title":{},"body":{"interfaces/Ink.html":{},"injectables/InkService.html":{}}}],["clearselection",{"_index":2347,"title":{},"body":{"interfaces/Ink.html":{},"injectables/InkService.html":{}}}],["cli",{"_index":4475,"title":{},"body":{"index.html":{}}}],["click",{"_index":2049,"title":{},"body":{"components/DraftdetailComponent.html":{}}}],["click($event",{"_index":2039,"title":{},"body":{"components/DraftdetailComponent.html":{}}}],["clicks",{"_index":1972,"title":{},"body":{"components/DraftdetailComponent.html":{}}}],["clone",{"_index":4492,"title":{},"body":{"index.html":{}}}],["close",{"_index":1944,"title":{},"body":{"components/DraftdetailComponent.html":{},"components/MixerViewComponent.html":{},"components/OpHelpModal.html":{},"components/OpsComponent.html":{},"components/PlayerComponent.html":{}}}],["clunky",{"_index":443,"title":{},"body":{"interfaces/ChainIndex.html":{},"injectables/SequencerService.html":{}}}],["cluster_mixermodule",{"_index":2681,"title":{},"body":{"modules/MixerModule.html":{},"overview.html":{}}}],["cluster_mixermodule_declarations",{"_index":2683,"title":{},"body":{"modules/MixerModule.html":{},"overview.html":{}}}],["cluster_mixermodule_imports",{"_index":2682,"title":{},"body":{"modules/MixerModule.html":{},"overview.html":{}}}],["cluster_playermodule",{"_index":3686,"title":{},"body":{"modules/PlayerModule.html":{},"overview.html":{}}}],["cluster_playermodule_declarations",{"_index":3687,"title":{},"body":{"modules/PlayerModule.html":{},"overview.html":{}}}],["cluster_playermodule_exports",{"_index":3688,"title":{},"body":{"modules/PlayerModule.html":{},"overview.html":{}}}],["cm",{"_index":2064,"title":{},"body":{"components/DraftdetailComponent.html":{}}}],["code",{"_index":2435,"title":{},"body":{"components/InletComponent.html":{},"components/OpHelpModal.html":{},"index.html":{}}}],["col",{"_index":3965,"title":{},"body":{"classes/Shape.html":{}}}],["collection",{"_index":2566,"title":{},"body":{"injectables/MappingsService.html":{},"index.html":{}}}],["color",{"_index":2119,"title":{},"body":{"components/DraftdetailComponent.html":{},"components/InletComponent.html":{},"components/MixerViewComponent.html":{},"components/NoteComponent.html":{},"components/OpHelpModal.html":{},"components/OpSequencerComponent.html":{},"components/OpsComponent.html":{},"components/ParameterComponent.html":{},"components/PlayerComponent.html":{},"classes/Shuttle.html":{},"components/SnackbarComponent.html":{},"components/VirtualPedalsComponent.html":{},"components/WeavingStateComponent.html":{},"dependencies.html":{}}}],["color:#ffffff",{"_index":3685,"title":{},"body":{"components/PlayerComponent.html":{}}}],["colors",{"_index":2073,"title":{},"body":{"components/DraftdetailComponent.html":{}}}],["colortable",{"_index":2300,"title":{},"body":{"components/ImageComponent.html":{}}}],["cols",{"_index":4013,"title":{},"body":{"classes/Shape-1.html":{}}}],["colshuttlemapping",{"_index":1581,"title":{},"body":{"interfaces/DesignActions.html":{},"interfaces/DraftMap.html":{},"interfaces/Interlacement.html":{},"interfaces/InterlacementVal.html":{}}}],["colsystemmapping",{"_index":1579,"title":{},"body":{"interfaces/DesignActions.html":{},"interfaces/DraftMap.html":{},"interfaces/Interlacement.html":{},"interfaces/InterlacementVal.html":{}}}],["column",{"_index":351,"title":{},"body":{"interfaces/Bounds.html":{},"interfaces/DesignActions.html":{},"components/DraftdetailComponent.html":{},"components/NoteComponent.html":{},"components/OpSequencerComponent.html":{},"components/OpsComponent.html":{},"interfaces/Point.html":{},"components/WeavingStateComponent.html":{}}}],["column/warp",{"_index":1616,"title":{},"body":{"interfaces/DraftMap.html":{},"interfaces/Interlacement.html":{},"interfaces/InterlacementVal.html":{}}}],["columns",{"_index":1612,"title":{},"body":{"interfaces/DraftMap.html":{},"interfaces/Interlacement.html":{},"interfaces/InterlacementVal.html":{}}}],["combination",{"_index":585,"title":{},"body":{"interfaces/ChainOp.html":{},"interfaces/PairedOp.html":{},"interfaces/PedalEvent.html":{},"interfaces/PlayerOp.html":{}}}],["combine",{"_index":288,"title":{},"body":{"classes/AbstractOpFactory.html":{},"classes/BaseOp.html":{},"classes/Branch.html":{},"classes/Bus.html":{},"classes/Merge.html":{},"interfaces/OpClassifier.html":{},"interfaces/OperationProperties.html":{},"classes/Pipe.html":{},"classes/Seed.html":{},"interfaces/TopologyDef.html":{}}}],["come",{"_index":3172,"title":{},"body":{"interfaces/OperationParam.html":{},"classes/Params.html":{}}}],["comes",{"_index":4649,"title":{},"body":{"miscellaneous/typealiases.html":{}}}],["coming",{"_index":1652,"title":{},"body":{"interfaces/DraftNodeProxy.html":{},"interfaces/FileObj.html":{},"interfaces/FileSaver.html":{},"interfaces/Fileloader.html":{},"interfaces/LoadResponse.html":{},"interfaces/NodeComponentProxy.html":{},"interfaces/OpComponentProxy.html":{},"interfaces/SaveObj.html":{},"interfaces/StatusMessage.html":{},"interfaces/TreeNodeProxy.html":{}}}],["commands",{"_index":4535,"title":{},"body":{"index.html":{}}}],["comment",{"_index":2932,"title":{},"body":{"components/NoteComponent.html":{}}}],["commonmodule",{"_index":3691,"title":{},"body":{"modules/PlayerModule.html":{}}}],["communicate",{"_index":353,"title":{},"body":{"interfaces/Bounds.html":{},"interfaces/Pedal.html":{},"classes/PedalStatus.html":{},"injectables/PedalsService.html":{},"interfaces/Point.html":{}}}],["compare",{"_index":4152,"title":{},"body":{"classes/System.html":{},"miscellaneous/functions.html":{}}}],["compares",{"_index":2307,"title":{},"body":{"interfaces/Ink.html":{},"injectables/InkService.html":{}}}],["compatible",{"_index":561,"title":{},"body":{"interfaces/ChainOp.html":{},"interfaces/PairedOp.html":{},"interfaces/PedalEvent.html":{},"interfaces/PlayerOp.html":{}}}],["compile",{"_index":4503,"title":{},"body":{"index.html":{}}}],["complex",{"_index":2217,"title":{},"body":{"interfaces/DynamicOperation.html":{},"interfaces/OpInput.html":{},"interfaces/OperationClassification.html":{},"interfaces/TreeOperation.html":{}}}],["complicated",{"_index":2594,"title":{},"body":{"injectables/MappingsService.html":{}}}],["compoment",{"_index":679,"title":{},"body":{"components/ConnectionComponent.html":{}}}],["component",{"_index":623,"title":{"components/ConnectionComponent.html":{},"components/DraftdetailComponent.html":{},"components/ImageComponent.html":{},"components/InletComponent.html":{},"components/MixerViewComponent.html":{},"components/NoteComponent.html":{},"components/OpHelpModal.html":{},"components/OpSequencerComponent.html":{},"components/OpsComponent.html":{},"components/ParameterComponent.html":{},"components/PlayerComponent.html":{},"components/SnackbarComponent.html":{},"components/VirtualPedalsComponent.html":{},"components/WeavingStateComponent.html":{}},"body":{"components/ConnectionComponent.html":{},"interfaces/DesignActions.html":{},"interfaces/DraftMap.html":{},"interfaces/DraftNodeProxy.html":{},"components/DraftdetailComponent.html":{},"interfaces/FileObj.html":{},"interfaces/FileSaver.html":{},"interfaces/Fileloader.html":{},"interfaces/IOTuple.html":{},"components/ImageComponent.html":{},"components/InletComponent.html":{},"interfaces/Interlacement.html":{},"interfaces/InterlacementVal.html":{},"interfaces/LoadResponse.html":{},"components/MixerViewComponent.html":{},"interfaces/NodeComponentProxy.html":{},"components/NoteComponent.html":{},"interfaces/OpComponentProxy.html":{},"components/OpHelpModal.html":{},"components/OpSequencerComponent.html":{},"components/OpsComponent.html":{},"components/ParameterComponent.html":{},"components/PlayerComponent.html":{},"interfaces/SaveObj.html":{},"components/SnackbarComponent.html":{},"interfaces/StatusMessage.html":{},"interfaces/TreeNode.html":{},"interfaces/TreeNodeProxy.html":{},"components/VirtualPedalsComponent.html":{},"components/WeavingStateComponent.html":{},"index.html":{}}}],["component's",{"_index":1464,"title":{},"body":{"interfaces/DesignActions.html":{}}}],["component_id",{"_index":1588,"title":{},"body":{"interfaces/DraftMap.html":{},"interfaces/Interlacement.html":{},"interfaces/InterlacementVal.html":{}}}],["component_template",{"_index":827,"title":{},"body":{"components/ConnectionComponent.html":{},"components/DraftdetailComponent.html":{},"components/ImageComponent.html":{},"components/InletComponent.html":{},"components/MixerViewComponent.html":{},"components/NoteComponent.html":{},"components/OpHelpModal.html":{},"components/OpSequencerComponent.html":{},"components/OpsComponent.html":{},"components/ParameterComponent.html":{},"components/PlayerComponent.html":{},"components/SnackbarComponent.html":{},"components/VirtualPedalsComponent.html":{},"components/WeavingStateComponent.html":{}}}],["components",{"_index":625,"title":{},"body":{"components/ConnectionComponent.html":{},"interfaces/DesignActions.html":{},"interfaces/DraftMap.html":{},"components/DraftdetailComponent.html":{},"interfaces/IOTuple.html":{},"components/ImageComponent.html":{},"components/InletComponent.html":{},"interfaces/Interlacement.html":{},"interfaces/InterlacementVal.html":{},"components/MixerViewComponent.html":{},"components/NoteComponent.html":{},"components/OpHelpModal.html":{},"components/OpSequencerComponent.html":{},"components/OpsComponent.html":{},"components/ParameterComponent.html":{},"components/PlayerComponent.html":{},"components/SnackbarComponent.html":{},"interfaces/TreeNode.html":{},"components/VirtualPedalsComponent.html":{},"components/WeavingStateComponent.html":{},"index.html":{},"overview.html":{}}}],["compound",{"_index":1924,"title":{},"body":{"interfaces/DraftOperationClassification.html":{},"interfaces/LoomConfig.html":{},"classes/PedalConfig.html":{},"injectables/PlayerService.html":{}}}],["compressed",{"_index":1632,"title":{},"body":{"interfaces/DraftNodeProxy.html":{},"interfaces/FileObj.html":{},"interfaces/FileSaver.html":{},"interfaces/Fileloader.html":{},"interfaces/LoadResponse.html":{},"interfaces/NodeComponentProxy.html":{},"interfaces/OpComponentProxy.html":{},"interfaces/SaveObj.html":{},"interfaces/StatusMessage.html":{},"interfaces/TreeNodeProxy.html":{}}}],["computation",{"_index":4563,"title":{},"body":{"index.html":{}}}],["compute",{"_index":4582,"title":{},"body":{"index.html":{}}}],["computes",{"_index":4642,"title":{},"body":{"miscellaneous/typealiases.html":{}}}],["concepts",{"_index":4509,"title":{},"body":{"index.html":{}}}],["conductive",{"_index":4125,"title":{},"body":{"classes/System.html":{}}}],["conf",{"_index":2642,"title":{},"body":{"injectables/MappingsService.html":{},"classes/OpSequencer.html":{},"miscellaneous/functions.html":{}}}],["confirm",{"_index":3027,"title":{},"body":{"classes/OpSequencer.html":{}}}],["confirmed",{"_index":3073,"title":{},"body":{"classes/OpSequencer.html":{}}}],["connect",{"_index":2257,"title":{},"body":{"interfaces/IOTuple.html":{},"interfaces/TreeNode.html":{}}}],["connected",{"_index":2261,"title":{},"body":{"interfaces/IOTuple.html":{},"interfaces/TreeNode.html":{}}}],["connecting",{"_index":4429,"title":{},"body":{"index.html":{}}}],["connectino",{"_index":1361,"title":{},"body":{"interfaces/DesignActions.html":{}}}],["connection",{"_index":634,"title":{},"body":{"components/ConnectionComponent.html":{},"index.html":{}}}],["connection'},{'name",{"_index":828,"title":{},"body":{"components/ConnectionComponent.html":{},"components/DraftdetailComponent.html":{},"components/ImageComponent.html":{},"components/InletComponent.html":{},"components/MixerViewComponent.html":{},"components/NoteComponent.html":{},"components/OpHelpModal.html":{},"components/OpSequencerComponent.html":{},"components/OpsComponent.html":{},"components/ParameterComponent.html":{},"components/PlayerComponent.html":{},"components/SnackbarComponent.html":{},"components/VirtualPedalsComponent.html":{},"components/WeavingStateComponent.html":{}}}],["connection.component.html",{"_index":638,"title":{},"body":{"components/ConnectionComponent.html":{}}}],["connection.component.scss",{"_index":636,"title":{},"body":{"components/ConnectionComponent.html":{}}}],["connectioncomponent",{"_index":624,"title":{"components/ConnectionComponent.html":{}},"body":{"components/ConnectionComponent.html":{},"components/DraftdetailComponent.html":{},"interfaces/IOTuple.html":{},"components/ImageComponent.html":{},"components/InletComponent.html":{},"modules/MixerModule.html":{},"components/MixerViewComponent.html":{},"components/NoteComponent.html":{},"components/OpHelpModal.html":{},"components/OpSequencerComponent.html":{},"components/OpsComponent.html":{},"components/ParameterComponent.html":{},"components/PlayerComponent.html":{},"components/SnackbarComponent.html":{},"interfaces/TreeNode.html":{},"components/VirtualPedalsComponent.html":{},"components/WeavingStateComponent.html":{},"overview.html":{}}}],["connections",{"_index":681,"title":{},"body":{"components/ConnectionComponent.html":{},"interfaces/IOTuple.html":{},"interfaces/Pedal.html":{},"classes/PedalStatus.html":{},"injectables/PedalsService.html":{},"interfaces/TreeNode.html":{}}}],["consists",{"_index":4588,"title":{},"body":{"index.html":{}}}],["console.error(\"attempitng",{"_index":1468,"title":{},"body":{"interfaces/DesignActions.html":{}}}],["console.error(\"attempting",{"_index":748,"title":{},"body":{"components/ConnectionComponent.html":{}}}],["console.error(\"cound",{"_index":2901,"title":{},"body":{"components/NoteComponent.html":{}}}],["console.error(\"note",{"_index":2918,"title":{},"body":{"components/NoteComponent.html":{}}}],["console.log(\"a",{"_index":1892,"title":{},"body":{"interfaces/DraftOperationClassification.html":{},"interfaces/LoomConfig.html":{},"classes/PedalConfig.html":{},"injectables/PlayerService.html":{}}}],["console.log(\"anywhere",{"_index":2048,"title":{},"body":{"components/DraftdetailComponent.html":{}}}],["console.log(\"are",{"_index":3441,"title":{},"body":{"interfaces/Pedal.html":{},"classes/PedalStatus.html":{},"injectables/PedalsService.html":{}}}],["console.log(\"attempitng",{"_index":1476,"title":{},"body":{"interfaces/DesignActions.html":{}}}],["console.log(\"child",{"_index":1074,"title":{},"body":{"classes/DBListener.html":{},"classes/DBListenerArray.html":{},"classes/DBNode.html":{},"classes/DBNodeArray.html":{},"classes/DBTwoWay.html":{},"classes/DBTwoWayArray.html":{},"classes/DBWriteBuffer.html":{},"classes/DBWriter.html":{},"classes/DBWriterArray.html":{},"interfaces/NodeMethods.html":{},"interfaces/NodeParams.html":{},"classes/OnlineStatus.html":{}}}],["console.log(\"created",{"_index":3898,"title":{},"body":{"directives/SelectionComponent.html":{}}}],["console.log(\"draft",{"_index":1790,"title":{},"body":{"interfaces/DraftOperationClassification.html":{},"interfaces/LoomConfig.html":{},"classes/PedalConfig.html":{},"injectables/PlayerService.html":{}}}],["console.log(\"filtering",{"_index":2582,"title":{},"body":{"injectables/MappingsService.html":{}}}],["console.log(\"forward",{"_index":3068,"title":{},"body":{"classes/OpSequencer.html":{}}}],["console.log(\"init",{"_index":3657,"title":{},"body":{"components/PlayerComponent.html":{},"components/WeavingStateComponent.html":{}}}],["console.log(\"ng",{"_index":3646,"title":{},"body":{"components/PlayerComponent.html":{}}}],["console.log(\"node",{"_index":1049,"title":{},"body":{"classes/DBListener.html":{},"classes/DBListenerArray.html":{},"classes/DBNode.html":{},"classes/DBNodeArray.html":{},"classes/DBTwoWay.html":{},"classes/DBTwoWayArray.html":{},"classes/DBWriteBuffer.html":{},"classes/DBWriter.html":{},"classes/DBWriterArray.html":{},"interfaces/NodeMethods.html":{},"interfaces/NodeParams.html":{},"classes/OnlineStatus.html":{}}}],["console.log(\"op",{"_index":2197,"title":{},"body":{"interfaces/DynamicOperation.html":{},"interfaces/OpInput.html":{},"interfaces/OperationClassification.html":{},"interfaces/TreeOperation.html":{}}}],["console.log(\"overwriting",{"_index":1027,"title":{},"body":{"classes/DBListener.html":{},"classes/DBListenerArray.html":{},"classes/DBNode.html":{},"classes/DBNodeArray.html":{},"classes/DBTwoWay.html":{},"classes/DBTwoWayArray.html":{},"classes/DBWriteBuffer.html":{},"classes/DBWriter.html":{},"classes/DBWriterArray.html":{},"interfaces/NodeMethods.html":{},"interfaces/NodeParams.html":{},"classes/OnlineStatus.html":{}}}],["console.log(\"pedals",{"_index":1866,"title":{},"body":{"interfaces/DraftOperationClassification.html":{},"interfaces/LoomConfig.html":{},"interfaces/Pedal.html":{},"classes/PedalConfig.html":{},"classes/PedalStatus.html":{},"injectables/PedalsService.html":{},"injectables/PlayerService.html":{}}}],["console.log(\"perform",{"_index":2209,"title":{},"body":{"interfaces/DynamicOperation.html":{},"interfaces/OpInput.html":{},"interfaces/OperationClassification.html":{},"interfaces/TreeOperation.html":{}}}],["console.log(\"player",{"_index":1898,"title":{},"body":{"interfaces/DraftOperationClassification.html":{},"interfaces/LoomConfig.html":{},"classes/PedalConfig.html":{},"components/PlayerComponent.html":{},"injectables/PlayerService.html":{}}}],["console.log(\"redrawing",{"_index":3668,"title":{},"body":{"components/PlayerComponent.html":{},"components/WeavingStateComponent.html":{}}}],["console.log(\"result",{"_index":1562,"title":{},"body":{"interfaces/DesignActions.html":{}}}],["console.log(\"scale",{"_index":4024,"title":{},"body":{"classes/Shape-1.html":{}}}],["console.log(\"toggling",{"_index":3509,"title":{},"body":{"interfaces/Pedal.html":{},"classes/PedalStatus.html":{},"injectables/PedalsService.html":{}}}],["console.log(\"tree",{"_index":2204,"title":{},"body":{"interfaces/DynamicOperation.html":{},"interfaces/OpInput.html":{},"interfaces/OperationClassification.html":{},"interfaces/TreeOperation.html":{}}}],["console.log(\"unknown",{"_index":4282,"title":{},"body":{"components/VirtualPedalsComponent.html":{}}}],["console.log(\"weaving",{"_index":3474,"title":{},"body":{"interfaces/Pedal.html":{},"classes/PedalStatus.html":{},"injectables/PedalsService.html":{}}}],["console.log('child",{"_index":1084,"title":{},"body":{"classes/DBListener.html":{},"classes/DBListenerArray.html":{},"classes/DBNode.html":{},"classes/DBNodeArray.html":{},"classes/DBTwoWay.html":{},"classes/DBTwoWayArray.html":{},"classes/DBWriteBuffer.html":{},"classes/DBWriter.html":{},"classes/DBWriterArray.html":{},"interfaces/NodeMethods.html":{},"interfaces/NodeParams.html":{},"classes/OnlineStatus.html":{}}}],["console.log('mapping",{"_index":1915,"title":{},"body":{"interfaces/DraftOperationClassification.html":{},"interfaces/LoomConfig.html":{},"classes/PedalConfig.html":{},"injectables/PlayerService.html":{}}}],["console.log('no",{"_index":479,"title":{},"body":{"interfaces/ChainIndex.html":{},"injectables/SequencerService.html":{}}}],["console.log('op",{"_index":616,"title":{},"body":{"interfaces/ChainOp.html":{},"interfaces/PairedOp.html":{},"interfaces/PedalEvent.html":{},"interfaces/PlayerOp.html":{}}}],["console.log('pedal",{"_index":1861,"title":{},"body":{"interfaces/DraftOperationClassification.html":{},"interfaces/LoomConfig.html":{},"classes/PedalConfig.html":{},"injectables/PlayerService.html":{}}}],["console.log('pedals",{"_index":3457,"title":{},"body":{"interfaces/Pedal.html":{},"classes/PedalStatus.html":{},"injectables/PedalsService.html":{}}}],["console.log('player",{"_index":1912,"title":{},"body":{"interfaces/DraftOperationClassification.html":{},"interfaces/LoomConfig.html":{},"classes/PedalConfig.html":{},"injectables/PlayerService.html":{}}}],["console.log('sequencer",{"_index":3067,"title":{},"body":{"classes/OpSequencer.html":{}}}],["console.log('viewport",{"_index":2789,"title":{},"body":{"components/MixerViewComponent.html":{}}}],["console.log('writer",{"_index":3413,"title":{},"body":{"interfaces/Pedal.html":{},"classes/PedalStatus.html":{},"injectables/PedalsService.html":{}}}],["console.log((nameorargs.name",{"_index":239,"title":{},"body":{"classes/AbstractOpFactory.html":{},"classes/BaseOp.html":{},"classes/Branch.html":{},"classes/Bus.html":{},"classes/Merge.html":{},"interfaces/OpClassifier.html":{},"interfaces/OperationProperties.html":{},"classes/Pipe.html":{},"classes/Seed.html":{},"interfaces/TopologyDef.html":{}}}],["console.log(`unmapping",{"_index":2622,"title":{},"body":{"injectables/MappingsService.html":{}}}],["console.log(`unpairing",{"_index":1774,"title":{},"body":{"interfaces/DraftOperationClassification.html":{},"interfaces/LoomConfig.html":{},"classes/PedalConfig.html":{},"injectables/PlayerService.html":{}}}],["console.log(e",{"_index":1905,"title":{},"body":{"interfaces/DraftOperationClassification.html":{},"interfaces/LoomConfig.html":{},"classes/PedalConfig.html":{},"injectables/PlayerService.html":{}}}],["console.log(event",{"_index":4274,"title":{},"body":{"components/VirtualPedalsComponent.html":{}}}],["console.log(i",{"_index":4035,"title":{},"body":{"classes/Shape-1.html":{}}}],["console.log(name",{"_index":2646,"title":{},"body":{"injectables/MappingsService.html":{}}}],["console.log(o",{"_index":477,"title":{},"body":{"interfaces/ChainIndex.html":{},"injectables/MappingsService.html":{},"injectables/SequencerService.html":{}}}],["console.log(ops",{"_index":1884,"title":{},"body":{"interfaces/DraftOperationClassification.html":{},"interfaces/LoomConfig.html":{},"classes/PedalConfig.html":{},"injectables/PlayerService.html":{}}}],["console.log(parentkeys",{"_index":1110,"title":{},"body":{"classes/DBListener.html":{},"classes/DBListenerArray.html":{},"classes/DBNode.html":{},"classes/DBNodeArray.html":{},"classes/DBTwoWay.html":{},"classes/DBTwoWayArray.html":{},"classes/DBWriteBuffer.html":{},"classes/DBWriter.html":{},"classes/DBWriterArray.html":{},"interfaces/NodeMethods.html":{},"interfaces/NodeParams.html":{},"classes/OnlineStatus.html":{}}}],["console.log(res",{"_index":2153,"title":{},"body":{"interfaces/DynamicOperation.html":{},"injectables/MappingsService.html":{},"interfaces/OpInput.html":{},"interfaces/OperationClassification.html":{},"interfaces/TreeOperation.html":{}}}],["console.log(result",{"_index":1011,"title":{},"body":{"classes/DBListener.html":{},"classes/DBListenerArray.html":{},"classes/DBNode.html":{},"classes/DBNodeArray.html":{},"classes/DBTwoWay.html":{},"classes/DBTwoWayArray.html":{},"classes/DBWriteBuffer.html":{},"classes/DBWriter.html":{},"classes/DBWriterArray.html":{},"interfaces/DraftOperationClassification.html":{},"interfaces/LoomConfig.html":{},"interfaces/NodeMethods.html":{},"interfaces/NodeParams.html":{},"classes/OnlineStatus.html":{},"classes/PedalConfig.html":{},"injectables/PlayerService.html":{}}}],["console.log(startpattern",{"_index":1793,"title":{},"body":{"interfaces/DraftOperationClassification.html":{},"interfaces/LoomConfig.html":{},"classes/PedalConfig.html":{},"injectables/PlayerService.html":{}}}],["console.log(this",{"_index":982,"title":{},"body":{"classes/DBListener.html":{},"classes/DBListenerArray.html":{},"classes/DBNode.html":{},"classes/DBNodeArray.html":{},"classes/DBTwoWay.html":{},"classes/DBTwoWayArray.html":{},"classes/DBWriteBuffer.html":{},"classes/DBWriter.html":{},"classes/DBWriterArray.html":{},"interfaces/NodeMethods.html":{},"interfaces/NodeParams.html":{},"classes/OnlineStatus.html":{}}}],["console.log(this.draft.id",{"_index":2673,"title":{},"body":{"directives/MarqueeComponent.html":{},"directives/SelectionComponent.html":{}}}],["console.log(this.getmap(p",{"_index":2583,"title":{},"body":{"injectables/MappingsService.html":{}}}],["console.log(this.mappings",{"_index":1914,"title":{},"body":{"interfaces/DraftOperationClassification.html":{},"interfaces/LoomConfig.html":{},"classes/PedalConfig.html":{},"injectables/PlayerService.html":{}}}],["console.log(this.name",{"_index":987,"title":{},"body":{"classes/DBListener.html":{},"classes/DBListenerArray.html":{},"classes/DBNode.html":{},"classes/DBNodeArray.html":{},"classes/DBTwoWay.html":{},"classes/DBTwoWayArray.html":{},"classes/DBWriteBuffer.html":{},"classes/DBWriter.html":{},"classes/DBWriterArray.html":{},"interfaces/NodeMethods.html":{},"interfaces/NodeParams.html":{},"classes/OnlineStatus.html":{}}}],["console.log(this.nodes",{"_index":1048,"title":{},"body":{"classes/DBListener.html":{},"classes/DBListenerArray.html":{},"classes/DBNode.html":{},"classes/DBNodeArray.html":{},"classes/DBTwoWay.html":{},"classes/DBTwoWayArray.html":{},"classes/DBWriteBuffer.html":{},"classes/DBWriter.html":{},"classes/DBWriterArray.html":{},"interfaces/NodeMethods.html":{},"interfaces/NodeParams.html":{},"classes/OnlineStatus.html":{}}}],["console.log(this.nodes[n",{"_index":1050,"title":{},"body":{"classes/DBListener.html":{},"classes/DBListenerArray.html":{},"classes/DBNode.html":{},"classes/DBNodeArray.html":{},"classes/DBTwoWay.html":{},"classes/DBTwoWayArray.html":{},"classes/DBWriteBuffer.html":{},"classes/DBWriter.html":{},"classes/DBWriterArray.html":{},"interfaces/NodeMethods.html":{},"interfaces/NodeParams.html":{},"classes/OnlineStatus.html":{}}}],["console.log(this.ops",{"_index":492,"title":{},"body":{"interfaces/ChainIndex.html":{},"interfaces/DraftOperationClassification.html":{},"interfaces/LoomConfig.html":{},"injectables/MappingsService.html":{},"classes/PedalConfig.html":{},"injectables/PlayerService.html":{},"injectables/SequencerService.html":{}}}],["console.log(this.oss.getop('germanify",{"_index":1857,"title":{},"body":{"interfaces/DraftOperationClassification.html":{},"interfaces/LoomConfig.html":{},"classes/PedalConfig.html":{},"injectables/PlayerService.html":{}}}],["console.log(this.parentnode",{"_index":1109,"title":{},"body":{"classes/DBListener.html":{},"classes/DBListenerArray.html":{},"classes/DBNode.html":{},"classes/DBNodeArray.html":{},"classes/DBTwoWay.html":{},"classes/DBTwoWayArray.html":{},"classes/DBWriteBuffer.html":{},"classes/DBWriter.html":{},"classes/DBWriterArray.html":{},"interfaces/NodeMethods.html":{},"interfaces/NodeParams.html":{},"classes/OnlineStatus.html":{}}}],["console.log(this.seq",{"_index":478,"title":{},"body":{"interfaces/ChainIndex.html":{},"interfaces/DraftOperationClassification.html":{},"interfaces/LoomConfig.html":{},"classes/PedalConfig.html":{},"injectables/PlayerService.html":{},"injectables/SequencerService.html":{}}}],["console.log(this.state",{"_index":1919,"title":{},"body":{"interfaces/DraftOperationClassification.html":{},"interfaces/LoomConfig.html":{},"classes/PedalConfig.html":{},"injectables/PlayerService.html":{}}}],["console.log(this.status",{"_index":3440,"title":{},"body":{"interfaces/Pedal.html":{},"classes/PedalStatus.html":{},"injectables/PedalsService.html":{}}}],["const",{"_index":97,"title":{},"body":{"classes/AbstractOpFactory.html":{},"classes/BaseOp.html":{},"classes/Branch.html":{},"classes/Bus.html":{},"interfaces/ChainOp.html":{},"components/ConnectionComponent.html":{},"classes/DBListener.html":{},"classes/DBListenerArray.html":{},"classes/DBNode.html":{},"classes/DBNodeArray.html":{},"classes/DBTwoWay.html":{},"classes/DBTwoWayArray.html":{},"classes/DBWriteBuffer.html":{},"classes/DBWriter.html":{},"classes/DBWriterArray.html":{},"interfaces/DesignActions.html":{},"interfaces/DraftMap.html":{},"interfaces/DraftOperationClassification.html":{},"components/DraftdetailComponent.html":{},"interfaces/Ink.html":{},"injectables/InkService.html":{},"components/InletComponent.html":{},"interfaces/Interlacement.html":{},"interfaces/InterlacementVal.html":{},"interfaces/LoomConfig.html":{},"injectables/MappingsService.html":{},"classes/Merge.html":{},"components/MixerViewComponent.html":{},"interfaces/NodeMethods.html":{},"interfaces/NodeParams.html":{},"components/NoteComponent.html":{},"classes/OnlineStatus.html":{},"interfaces/OpClassifier.html":{},"components/OpHelpModal.html":{},"interfaces/OperationProperties.html":{},"components/OpsComponent.html":{},"interfaces/PairedOp.html":{},"components/ParameterComponent.html":{},"interfaces/Pedal.html":{},"classes/PedalConfig.html":{},"interfaces/PedalEvent.html":{},"classes/PedalStatus.html":{},"injectables/PedalsService.html":{},"classes/Pipe.html":{},"components/PlayerComponent.html":{},"interfaces/PlayerOp.html":{},"injectables/PlayerService.html":{},"classes/Render.html":{},"classes/Seed.html":{},"classes/Shape-1.html":{},"classes/System.html":{},"interfaces/TopologyDef.html":{},"injectables/ViewportService.html":{}}}],["constrain",{"_index":320,"title":{},"body":{"classes/BaseOp.html":{}}}],["constrain(c",{"_index":257,"title":{},"body":{"classes/AbstractOpFactory.html":{},"classes/BaseOp.html":{},"classes/Branch.html":{},"classes/Bus.html":{},"classes/Merge.html":{},"interfaces/OpClassifier.html":{},"interfaces/OperationProperties.html":{},"classes/Pipe.html":{},"classes/Seed.html":{},"interfaces/TopologyDef.html":{}}}],["constraint",{"_index":127,"title":{},"body":{"classes/AbstractOpFactory.html":{},"classes/BaseOp.html":{},"classes/Branch.html":{},"classes/Bus.html":{},"classes/Merge.html":{},"interfaces/OpClassifier.html":{},"interfaces/OperationProperties.html":{},"classes/Pipe.html":{},"classes/Seed.html":{},"interfaces/TopologyDef.html":{}}}],["constraint[\"input_drafts",{"_index":181,"title":{},"body":{"classes/AbstractOpFactory.html":{},"classes/BaseOp.html":{},"classes/Branch.html":{},"classes/Bus.html":{},"classes/Merge.html":{},"interfaces/OpClassifier.html":{},"interfaces/OperationProperties.html":{},"classes/Pipe.html":{},"classes/Seed.html":{},"interfaces/TopologyDef.html":{}}}],["constraint[\"input_params",{"_index":182,"title":{},"body":{"classes/AbstractOpFactory.html":{},"classes/BaseOp.html":{},"classes/Branch.html":{},"classes/Bus.html":{},"classes/Merge.html":{},"interfaces/OpClassifier.html":{},"interfaces/OperationProperties.html":{},"classes/Pipe.html":{},"classes/Seed.html":{},"interfaces/TopologyDef.html":{}}}],["constraintdefs",{"_index":143,"title":{},"body":{"classes/AbstractOpFactory.html":{},"classes/BaseOp.html":{},"classes/Branch.html":{},"classes/Bus.html":{},"classes/Merge.html":{},"interfaces/OpClassifier.html":{},"interfaces/OperationProperties.html":{},"classes/Pipe.html":{},"classes/Seed.html":{},"interfaces/TopologyDef.html":{},"miscellaneous/typealiases.html":{}}}],["constraintdefs[\"all_req",{"_index":151,"title":{},"body":{"classes/AbstractOpFactory.html":{},"classes/BaseOp.html":{},"classes/Branch.html":{},"classes/Bus.html":{},"classes/Merge.html":{},"interfaces/OpClassifier.html":{},"interfaces/OperationProperties.html":{},"classes/Pipe.html":{},"classes/Seed.html":{},"interfaces/TopologyDef.html":{}}}],["constraintdefs[\"drafts_opt",{"_index":149,"title":{},"body":{"classes/AbstractOpFactory.html":{},"classes/BaseOp.html":{},"classes/Branch.html":{},"classes/Bus.html":{},"classes/Merge.html":{},"interfaces/OpClassifier.html":{},"interfaces/OperationProperties.html":{},"classes/Pipe.html":{},"classes/Seed.html":{},"interfaces/TopologyDef.html":{}}}],["constraintdefs[\"no_drafts",{"_index":147,"title":{},"body":{"classes/AbstractOpFactory.html":{},"classes/BaseOp.html":{},"classes/Branch.html":{},"classes/Bus.html":{},"classes/Merge.html":{},"interfaces/OpClassifier.html":{},"interfaces/OperationProperties.html":{},"classes/Pipe.html":{},"classes/Seed.html":{},"interfaces/TopologyDef.html":{}}}],["constraintdefs[\"no_params",{"_index":148,"title":{},"body":{"classes/AbstractOpFactory.html":{},"classes/BaseOp.html":{},"classes/Branch.html":{},"classes/Bus.html":{},"classes/Merge.html":{},"interfaces/OpClassifier.html":{},"interfaces/OperationProperties.html":{},"classes/Pipe.html":{},"classes/Seed.html":{},"interfaces/TopologyDef.html":{}}}],["constraintdefs[\"params_opt",{"_index":150,"title":{},"body":{"classes/AbstractOpFactory.html":{},"classes/BaseOp.html":{},"classes/Branch.html":{},"classes/Bus.html":{},"classes/Merge.html":{},"interfaces/OpClassifier.html":{},"interfaces/OperationProperties.html":{},"classes/Pipe.html":{},"classes/Seed.html":{},"interfaces/TopologyDef.html":{}}}],["constraintindex",{"_index":152,"title":{},"body":{"classes/AbstractOpFactory.html":{},"classes/BaseOp.html":{},"classes/Branch.html":{},"classes/Bus.html":{},"classes/Merge.html":{},"interfaces/OpClassifier.html":{},"interfaces/OperationProperties.html":{},"classes/Pipe.html":{},"classes/Seed.html":{},"interfaces/TopologyDef.html":{},"miscellaneous/typealiases.html":{}}}],["constraintindex[constraintname",{"_index":158,"title":{},"body":{"classes/AbstractOpFactory.html":{},"classes/BaseOp.html":{},"classes/Branch.html":{},"classes/Bus.html":{},"classes/Merge.html":{},"interfaces/OpClassifier.html":{},"interfaces/OperationProperties.html":{},"classes/Pipe.html":{},"classes/Seed.html":{},"interfaces/TopologyDef.html":{}}}],["constraintname",{"_index":135,"title":{},"body":{"classes/AbstractOpFactory.html":{},"classes/BaseOp.html":{},"classes/Branch.html":{},"classes/Bus.html":{},"classes/Merge.html":{},"interfaces/OpClassifier.html":{},"interfaces/OperationProperties.html":{},"classes/Pipe.html":{},"classes/Seed.html":{},"interfaces/TopologyDef.html":{},"miscellaneous/typealiases.html":{}}}],["constraintname[c][\"input_drafts",{"_index":145,"title":{},"body":{"classes/AbstractOpFactory.html":{},"classes/BaseOp.html":{},"classes/Branch.html":{},"classes/Bus.html":{},"classes/Merge.html":{},"interfaces/OpClassifier.html":{},"interfaces/OperationProperties.html":{},"classes/Pipe.html":{},"classes/Seed.html":{},"interfaces/TopologyDef.html":{}}}],["constraintname[c][\"input_params",{"_index":146,"title":{},"body":{"classes/AbstractOpFactory.html":{},"classes/BaseOp.html":{},"classes/Branch.html":{},"classes/Bus.html":{},"classes/Merge.html":{},"interfaces/OpClassifier.html":{},"interfaces/OperationProperties.html":{},"classes/Pipe.html":{},"classes/Seed.html":{},"interfaces/TopologyDef.html":{}}}],["constraintoptions",{"_index":131,"title":{},"body":{"classes/AbstractOpFactory.html":{},"classes/BaseOp.html":{},"classes/Branch.html":{},"classes/Bus.html":{},"classes/Merge.html":{},"interfaces/OpClassifier.html":{},"interfaces/OperationProperties.html":{},"classes/Pipe.html":{},"classes/Seed.html":{},"interfaces/TopologyDef.html":{},"miscellaneous/typealiases.html":{}}}],["constructor",{"_index":227,"title":{},"body":{"classes/AbstractOpFactory.html":{},"classes/BaseOp.html":{},"classes/Branch.html":{},"classes/Bus.html":{},"classes/Cell.html":{},"interfaces/ChainIndex.html":{},"components/ConnectionComponent.html":{},"classes/DBListener.html":{},"classes/DBListenerArray.html":{},"classes/DBNode.html":{},"classes/DBNodeArray.html":{},"classes/DBTwoWay.html":{},"classes/DBTwoWayArray.html":{},"classes/DBWriteBuffer.html":{},"classes/DBWriter.html":{},"classes/DBWriterArray.html":{},"interfaces/DraftOperationClassification.html":{},"components/DraftdetailComponent.html":{},"components/ImageComponent.html":{},"interfaces/Ink.html":{},"injectables/InkService.html":{},"components/InletComponent.html":{},"injectables/LayersService.html":{},"interfaces/LoomConfig.html":{},"injectables/MappingsService.html":{},"classes/Merge.html":{},"components/MixerViewComponent.html":{},"components/NoteComponent.html":{},"classes/OnlineStatus.html":{},"interfaces/OpClassifier.html":{},"components/OpHelpModal.html":{},"classes/OpSequencer.html":{},"components/OpSequencerComponent.html":{},"interfaces/OperationProperties.html":{},"components/OpsComponent.html":{},"components/ParameterComponent.html":{},"interfaces/Pedal.html":{},"classes/PedalConfig.html":{},"classes/PedalStatus.html":{},"injectables/PedalsService.html":{},"classes/Pipe.html":{},"components/PlayerComponent.html":{},"injectables/PlayerService.html":{},"classes/Render.html":{},"classes/Seed.html":{},"injectables/SequencerService.html":{},"classes/Shape.html":{},"classes/Shape-1.html":{},"classes/Shuttle.html":{},"components/SnackbarComponent.html":{},"classes/System.html":{},"interfaces/TopologyDef.html":{},"injectables/ViewportService.html":{},"components/VirtualPedalsComponent.html":{},"components/WeavingStateComponent.html":{}}}],["constructor(@inject(mat_snack_bar_data",{"_index":4111,"title":{},"body":{"components/SnackbarComponent.html":{}}}],["constructor(data",{"_index":4101,"title":{},"body":{"components/SnackbarComponent.html":{}}}],["constructor(db",{"_index":3391,"title":{},"body":{"interfaces/Pedal.html":{},"classes/PedalStatus.html":{},"injectables/PedalsService.html":{}}}],["constructor(dialogref",{"_index":1960,"title":{},"body":{"components/DraftdetailComponent.html":{},"components/OpHelpModal.html":{}}}],["constructor(lengthnode",{"_index":1036,"title":{},"body":{"classes/DBListener.html":{},"classes/DBListenerArray.html":{},"classes/DBNode.html":{},"classes/DBNodeArray.html":{},"classes/DBTwoWay.html":{},"classes/DBTwoWayArray.html":{},"classes/DBWriteBuffer.html":{},"classes/DBWriter.html":{},"classes/DBWriterArray.html":{},"interfaces/NodeMethods.html":{},"interfaces/NodeParams.html":{},"classes/OnlineStatus.html":{}}}],["constructor(nameorargs",{"_index":321,"title":{},"body":{"classes/BaseOp.html":{}}}],["constructor(notes",{"_index":2868,"title":{},"body":{"components/NoteComponent.html":{}}}],["constructor(ops",{"_index":3218,"title":{},"body":{"components/OpsComponent.html":{}}}],["constructor(params",{"_index":933,"title":{},"body":{"classes/DBListener.html":{},"classes/DBListenerArray.html":{},"classes/DBNode.html":{},"classes/DBNodeArray.html":{},"classes/DBTwoWay.html":{},"classes/DBTwoWayArray.html":{},"classes/DBWriteBuffer.html":{},"classes/DBWriter.html":{},"classes/DBWriterArray.html":{},"interfaces/NodeMethods.html":{},"interfaces/NodeParams.html":{},"classes/OnlineStatus.html":{}}}],["constructor(pds",{"_index":2529,"title":{},"body":{"injectables/MappingsService.html":{},"components/VirtualPedalsComponent.html":{}}}],["constructor(pedalarray",{"_index":1709,"title":{},"body":{"interfaces/DraftOperationClassification.html":{},"interfaces/LoomConfig.html":{},"classes/PedalConfig.html":{},"injectables/PlayerService.html":{}}}],["constructor(pedals",{"_index":3023,"title":{},"body":{"classes/OpSequencer.html":{},"injectables/PlayerService.html":{}}}],["constructor(pls",{"_index":3087,"title":{},"body":{"components/OpSequencerComponent.html":{},"components/PlayerComponent.html":{},"components/WeavingStateComponent.html":{}}}],["constructor(private",{"_index":1389,"title":{},"body":{"interfaces/DesignActions.html":{},"components/DraftdetailComponent.html":{},"components/NoteComponent.html":{},"components/OpHelpModal.html":{}}}],["constructor(public",{"_index":718,"title":{},"body":{"components/ConnectionComponent.html":{},"components/InletComponent.html":{},"components/MixerViewComponent.html":{},"components/OpsComponent.html":{},"components/ParameterComponent.html":{}}}],["constructor(setting",{"_index":380,"title":{},"body":{"classes/Cell.html":{}}}],["constructor(shape_canvas",{"_index":4003,"title":{},"body":{"classes/Shape-1.html":{}}}],["constructor(shuttledict",{"_index":4052,"title":{},"body":{"classes/Shuttle.html":{}}}],["constructor(systemdict",{"_index":4129,"title":{},"body":{"classes/System.html":{}}}],["constructor(tree",{"_index":660,"title":{},"body":{"components/ConnectionComponent.html":{},"components/InletComponent.html":{},"components/ParameterComponent.html":{}}}],["constructor(view_frames",{"_index":3767,"title":{},"body":{"classes/Render.html":{}}}],["constructor(view_frames:boolean",{"_index":3810,"title":{},"body":{"classes/Render.html":{}}}],["constructor(viewport",{"_index":2730,"title":{},"body":{"components/MixerViewComponent.html":{}}}],["constructorargkeysindex",{"_index":266,"title":{},"body":{"classes/AbstractOpFactory.html":{},"classes/BaseOp.html":{},"classes/Branch.html":{},"classes/Bus.html":{},"classes/Merge.html":{},"interfaces/OpClassifier.html":{},"interfaces/OperationProperties.html":{},"classes/Pipe.html":{},"classes/Seed.html":{},"interfaces/TopologyDef.html":{},"miscellaneous/typealiases.html":{}}}],["constructorargkeysindex[constraint[\"constraint\"]][topo[\"type",{"_index":268,"title":{},"body":{"classes/AbstractOpFactory.html":{},"classes/BaseOp.html":{},"classes/Branch.html":{},"classes/Bus.html":{},"classes/Merge.html":{},"interfaces/OpClassifier.html":{},"interfaces/OperationProperties.html":{},"classes/Pipe.html":{},"classes/Seed.html":{},"interfaces/TopologyDef.html":{}}}],["constructorarrayindex",{"_index":267,"title":{},"body":{"classes/AbstractOpFactory.html":{},"classes/BaseOp.html":{},"classes/Branch.html":{},"classes/Bus.html":{},"classes/Merge.html":{},"interfaces/OpClassifier.html":{},"interfaces/OperationProperties.html":{},"classes/Pipe.html":{},"classes/Seed.html":{},"interfaces/TopologyDef.html":{},"miscellaneous/typealiases.html":{}}}],["constructorarrayindex[constraint[\"constraint\"]][topo[\"type",{"_index":269,"title":{},"body":{"classes/AbstractOpFactory.html":{},"classes/BaseOp.html":{},"classes/Branch.html":{},"classes/Bus.html":{},"classes/Merge.html":{},"interfaces/OpClassifier.html":{},"interfaces/OperationProperties.html":{},"classes/Pipe.html":{},"classes/Seed.html":{},"interfaces/TopologyDef.html":{}}}],["container",{"_index":815,"title":{},"body":{"components/ConnectionComponent.html":{},"interfaces/DesignActions.html":{},"interfaces/DynamicOperation.html":{},"components/NoteComponent.html":{},"components/OpHelpModal.html":{},"interfaces/OpInput.html":{},"interfaces/OperationClassification.html":{},"components/PlayerComponent.html":{},"interfaces/TreeOperation.html":{},"components/VirtualPedalsComponent.html":{},"components/WeavingStateComponent.html":{}}}],["container').offsetparent",{"_index":2792,"title":{},"body":{"components/MixerViewComponent.html":{}}}],["container.offsetheight",{"_index":1474,"title":{},"body":{"interfaces/DesignActions.html":{}}}],["container.style.transform",{"_index":820,"title":{},"body":{"components/ConnectionComponent.html":{},"interfaces/DesignActions.html":{},"components/NoteComponent.html":{}}}],["container.style.transformorigin",{"_index":817,"title":{},"body":{"components/ConnectionComponent.html":{},"interfaces/DesignActions.html":{},"components/NoteComponent.html":{}}}],["container:active",{"_index":2942,"title":{},"body":{"components/NoteComponent.html":{}}}],["container:hover",{"_index":2941,"title":{},"body":{"components/NoteComponent.html":{}}}],["contains",{"_index":2139,"title":{},"body":{"interfaces/DynamicOperation.html":{},"interfaces/OpInput.html":{},"interfaces/OperationClassification.html":{},"interfaces/TreeOperation.html":{},"index.html":{}}}],["content",{"_index":2125,"title":{},"body":{"components/DraftdetailComponent.html":{},"components/InletComponent.html":{},"components/MixerViewComponent.html":{},"components/NoteComponent.html":{},"components/ParameterComponent.html":{},"components/VirtualPedalsComponent.html":{}}}],["content:flex",{"_index":2934,"title":{},"body":{"components/NoteComponent.html":{}}}],["content:space",{"_index":4117,"title":{},"body":{"components/SnackbarComponent.html":{}}}],["contents",{"_index":2944,"title":{},"body":{"components/NoteComponent.html":{}}}],["context",{"_index":1514,"title":{},"body":{"interfaces/DesignActions.html":{},"classes/Shape-1.html":{}}}],["context.drawimage(this.canvas",{"_index":1521,"title":{},"body":{"interfaces/DesignActions.html":{}}}],["context.fillrect(0,0,b.width,b.height",{"_index":1520,"title":{},"body":{"interfaces/DesignActions.html":{}}}],["context.fillstyle",{"_index":1518,"title":{},"body":{"interfaces/DesignActions.html":{}}}],["context.getimagedata(bounds.topleft.x",{"_index":4026,"title":{},"body":{"classes/Shape-1.html":{}}}],["control",{"_index":1701,"title":{},"body":{"interfaces/DraftOperationClassification.html":{},"interfaces/LoomConfig.html":{},"interfaces/LoomTypes.html":{},"components/ParameterComponent.html":{},"classes/PedalConfig.html":{},"injectables/PlayerService.html":{},"index.html":{}}}],["control.value",{"_index":3309,"title":{},"body":{"components/ParameterComponent.html":{}}}],["controls",{"_index":3001,"title":{},"body":{"components/OpHelpModal.html":{},"components/ParameterComponent.html":{}}}],["convert",{"_index":2188,"title":{},"body":{"interfaces/DynamicOperation.html":{},"interfaces/OpInput.html":{},"interfaces/OperationClassification.html":{},"components/OpsComponent.html":{},"interfaces/TreeOperation.html":{}}}],["converting",{"_index":3997,"title":{},"body":{"classes/Shape-1.html":{}}}],["converts",{"_index":4018,"title":{},"body":{"classes/Shape-1.html":{}}}],["convoluted",{"_index":276,"title":{},"body":{"classes/AbstractOpFactory.html":{},"classes/BaseOp.html":{},"classes/Branch.html":{},"classes/Bus.html":{},"classes/Merge.html":{},"interfaces/OpClassifier.html":{},"interfaces/OperationProperties.html":{},"classes/Pipe.html":{},"classes/Seed.html":{},"interfaces/TopologyDef.html":{}}}],["coordiantes",{"_index":889,"title":{},"body":{"interfaces/Crossing.html":{},"interfaces/Vertex.html":{},"interfaces/YarnPath.html":{}}}],["coordinate",{"_index":1495,"title":{},"body":{"interfaces/DesignActions.html":{}}}],["coordinates",{"_index":3742,"title":{},"body":{"interfaces/Point.html":{}}}],["coords",{"_index":1440,"title":{},"body":{"interfaces/DesignActions.html":{},"components/NoteComponent.html":{}}}],["cooresponding",{"_index":2353,"title":{},"body":{"interfaces/Ink.html":{},"injectables/InkService.html":{}}}],["copied",{"_index":4302,"title":{},"body":{"components/WeavingStateComponent.html":{}}}],["copies",{"_index":2333,"title":{},"body":{"interfaces/Ink.html":{},"injectables/InkService.html":{}}}],["copy",{"_index":1941,"title":{},"body":{"components/DraftdetailComponent.html":{}}}],["copymap",{"_index":2604,"title":{},"body":{"injectables/MappingsService.html":{}}}],["copymap(p",{"_index":2618,"title":{},"body":{"injectables/MappingsService.html":{}}}],["copymap(r.p_select_b",{"_index":2621,"title":{},"body":{"injectables/MappingsService.html":{}}}],["copystate",{"_index":515,"title":{},"body":{"interfaces/ChainOp.html":{},"interfaces/DraftOperationClassification.html":{},"interfaces/LoomConfig.html":{},"classes/OpSequencer.html":{},"interfaces/PairedOp.html":{},"classes/PedalConfig.html":{},"interfaces/PedalEvent.html":{},"interfaces/PlayerOp.html":{},"injectables/PlayerService.html":{},"miscellaneous/functions.html":{}}}],["copystate(init",{"_index":528,"title":{},"body":{"interfaces/ChainOp.html":{},"interfaces/DraftOperationClassification.html":{},"interfaces/LoomConfig.html":{},"classes/OpSequencer.html":{},"interfaces/PairedOp.html":{},"classes/PedalConfig.html":{},"interfaces/PedalEvent.html":{},"interfaces/PlayerOp.html":{},"injectables/PlayerService.html":{},"interfaces/PlayerState.html":{},"interfaces/PlayerState-1.html":{},"interfaces/WeavingLog.html":{},"interfaces/WeavingPick.html":{},"interfaces/WeavingPick-1.html":{},"miscellaneous/functions.html":{}}}],["copystate(state",{"_index":1918,"title":{},"body":{"interfaces/DraftOperationClassification.html":{},"interfaces/LoomConfig.html":{},"classes/PedalConfig.html":{},"injectables/PlayerService.html":{}}}],["core",{"_index":4372,"title":{},"body":{"dependencies.html":{},"index.html":{}}}],["core/core.module",{"_index":2691,"title":{},"body":{"modules/MixerModule.html":{},"modules/PlayerModule.html":{}}}],["core/model/cell",{"_index":1313,"title":{},"body":{"interfaces/DesignActions.html":{},"classes/Shape-1.html":{}}}],["core/model/datatypes",{"_index":52,"title":{},"body":{"classes/AbstractOpFactory.html":{},"classes/BaseOp.html":{},"classes/Branch.html":{},"classes/Bus.html":{},"interfaces/ChainOp.html":{},"components/ConnectionComponent.html":{},"interfaces/DesignActions.html":{},"interfaces/DraftOperationClassification.html":{},"components/DraftdetailComponent.html":{},"interfaces/DynamicOperation.html":{},"components/InletComponent.html":{},"interfaces/LoomConfig.html":{},"directives/MarqueeComponent.html":{},"classes/Merge.html":{},"components/MixerViewComponent.html":{},"components/NoteComponent.html":{},"interfaces/OpClassifier.html":{},"components/OpHelpModal.html":{},"interfaces/OpInput.html":{},"interfaces/OperationClassification.html":{},"interfaces/OperationProperties.html":{},"interfaces/PairedOp.html":{},"components/ParameterComponent.html":{},"classes/PedalConfig.html":{},"interfaces/PedalEvent.html":{},"classes/Pipe.html":{},"components/PlayerComponent.html":{},"interfaces/PlayerOp.html":{},"injectables/PlayerService.html":{},"interfaces/PlayerState.html":{},"interfaces/PlayerState-1.html":{},"classes/Seed.html":{},"classes/Selection.html":{},"directives/SelectionComponent.html":{},"classes/Shape-1.html":{},"components/SnackbarComponent.html":{},"interfaces/TopologyDef.html":{},"interfaces/TreeOperation.html":{},"injectables/ViewportService.html":{},"interfaces/WeavingLog.html":{},"interfaces/WeavingPick.html":{},"interfaces/WeavingPick-1.html":{},"components/WeavingStateComponent.html":{}}}],["core/model/datatypes.ts",{"_index":4553,"title":{},"body":{"index.html":{}}}],["core/model/draft",{"_index":3897,"title":{},"body":{"directives/SelectionComponent.html":{}}}],["core/model/drafts",{"_index":505,"title":{},"body":{"interfaces/ChainOp.html":{},"interfaces/DesignActions.html":{},"interfaces/DraftOperationClassification.html":{},"components/DraftdetailComponent.html":{},"components/InletComponent.html":{},"interfaces/LoomConfig.html":{},"directives/MarqueeComponent.html":{},"interfaces/PairedOp.html":{},"classes/PedalConfig.html":{},"interfaces/PedalEvent.html":{},"components/PlayerComponent.html":{},"interfaces/PlayerOp.html":{},"injectables/PlayerService.html":{},"interfaces/PlayerState.html":{},"interfaces/PlayerState-1.html":{},"interfaces/WeavingLog.html":{},"interfaces/WeavingPick.html":{},"interfaces/WeavingPick-1.html":{},"components/WeavingStateComponent.html":{}}}],["core/model/looms",{"_index":2006,"title":{},"body":{"components/DraftdetailComponent.html":{}}}],["core/model/util",{"_index":1302,"title":{},"body":{"interfaces/DesignActions.html":{},"components/NoteComponent.html":{}}}],["core/provider/designmodes.service",{"_index":2008,"title":{},"body":{"components/DraftdetailComponent.html":{}}}],["core/provider/file.service",{"_index":1306,"title":{},"body":{"interfaces/DesignActions.html":{}}}],["core/provider/materials.service",{"_index":1317,"title":{},"body":{"interfaces/DesignActions.html":{},"components/DraftdetailComponent.html":{},"components/WeavingStateComponent.html":{}}}],["core/provider/notes.service",{"_index":2895,"title":{},"body":{"components/NoteComponent.html":{}}}],["core/provider/systems.service",{"_index":2428,"title":{},"body":{"components/InletComponent.html":{}}}],["core/provider/workspace.service",{"_index":1315,"title":{},"body":{"interfaces/DesignActions.html":{},"components/DraftdetailComponent.html":{}}}],["coremodule",{"_index":2690,"title":{},"body":{"modules/MixerModule.html":{},"modules/PlayerModule.html":{}}}],["corner",{"_index":694,"title":{},"body":{"components/ConnectionComponent.html":{},"injectables/ViewportService.html":{},"index.html":{}}}],["corners",{"_index":3115,"title":{},"body":{"components/OpSequencerComponent.html":{},"components/PlayerComponent.html":{}}}],["correctly",{"_index":223,"title":{},"body":{"classes/AbstractOpFactory.html":{},"classes/BaseOp.html":{},"classes/Branch.html":{},"classes/Bus.html":{},"classes/Merge.html":{},"interfaces/OpClassifier.html":{},"interfaces/OperationProperties.html":{},"components/ParameterComponent.html":{},"classes/Pipe.html":{},"classes/Seed.html":{},"interfaces/TopologyDef.html":{}}}],["correspond",{"_index":2512,"title":{},"body":{"injectables/MappingsService.html":{}}}],["corresponding",{"_index":352,"title":{},"body":{"interfaces/Bounds.html":{},"interfaces/Ink.html":{},"injectables/InkService.html":{},"interfaces/Point.html":{}}}],["corresponds",{"_index":4565,"title":{},"body":{"index.html":{}}}],["count",{"_index":2500,"title":{},"body":{"injectables/LayersService.html":{}}}],["counter:number",{"_index":1369,"title":{},"body":{"interfaces/DesignActions.html":{}}}],["counter_limit",{"_index":1373,"title":{},"body":{"interfaces/DesignActions.html":{}}}],["create",{"_index":228,"title":{},"body":{"classes/AbstractOpFactory.html":{},"classes/BaseOp.html":{},"classes/Branch.html":{},"classes/Bus.html":{},"interfaces/DesignActions.html":{},"interfaces/DynamicOperation.html":{},"classes/Merge.html":{},"interfaces/OpClassifier.html":{},"interfaces/OpInput.html":{},"interfaces/OperationClassification.html":{},"interfaces/OperationProperties.html":{},"classes/Pipe.html":{},"classes/Seed.html":{},"interfaces/TopologyDef.html":{},"interfaces/TreeOperation.html":{}}}],["created",{"_index":1093,"title":{},"body":{"classes/DBListener.html":{},"classes/DBListenerArray.html":{},"classes/DBNode.html":{},"classes/DBNodeArray.html":{},"classes/DBTwoWay.html":{},"classes/DBTwoWayArray.html":{},"classes/DBWriteBuffer.html":{},"classes/DBWriter.html":{},"classes/DBWriterArray.html":{},"interfaces/DraftMap.html":{},"interfaces/IOTuple.html":{},"interfaces/Interlacement.html":{},"interfaces/InterlacementVal.html":{},"injectables/MappingsService.html":{},"interfaces/NodeMethods.html":{},"interfaces/NodeParams.html":{},"classes/OnlineStatus.html":{},"interfaces/Pedal.html":{},"classes/PedalStatus.html":{},"injectables/PedalsService.html":{},"interfaces/TreeNode.html":{}}}],["createdraft",{"_index":1318,"title":{},"body":{"interfaces/DesignActions.html":{}}}],["createlayer",{"_index":2502,"title":{},"body":{"injectables/LayersService.html":{}}}],["creates",{"_index":3176,"title":{},"body":{"interfaces/OperationParam.html":{},"classes/Params.html":{}}}],["creating",{"_index":1082,"title":{},"body":{"classes/DBListener.html":{},"classes/DBListenerArray.html":{},"classes/DBNode.html":{},"classes/DBNodeArray.html":{},"classes/DBTwoWay.html":{},"classes/DBTwoWayArray.html":{},"classes/DBWriteBuffer.html":{},"classes/DBWriter.html":{},"classes/DBWriterArray.html":{},"interfaces/NodeMethods.html":{},"interfaces/NodeParams.html":{},"classes/OnlineStatus.html":{},"index.html":{}}}],["cross",{"_index":870,"title":{},"body":{"interfaces/Crossing.html":{},"interfaces/Vertex.html":{},"interfaces/YarnPath.html":{}}}],["crossing",{"_index":867,"title":{"interfaces/Crossing.html":{}},"body":{"interfaces/Crossing.html":{},"interfaces/Vertex.html":{},"interfaces/YarnPath.html":{}}}],["crossings",{"_index":882,"title":{},"body":{"interfaces/Crossing.html":{},"interfaces/Vertex.html":{},"interfaces/YarnPath.html":{}}}],["crosslink",{"_index":4569,"title":{},"body":{"index.html":{}}}],["crosstype",{"_index":884,"title":{},"body":{"interfaces/Crossing.html":{},"interfaces/Vertex.html":{},"interfaces/YarnPath.html":{},"miscellaneous/typealiases.html":{}}}],["curr_ops",{"_index":1744,"title":{},"body":{"interfaces/DraftOperationClassification.html":{},"interfaces/LoomConfig.html":{},"injectables/MappingsService.html":{},"classes/PedalConfig.html":{},"injectables/PlayerService.html":{}}}],["current",{"_index":458,"title":{},"body":{"interfaces/ChainIndex.html":{},"interfaces/DraftMap.html":{},"interfaces/IOTuple.html":{},"interfaces/Ink.html":{},"injectables/InkService.html":{},"interfaces/Interlacement.html":{},"interfaces/InterlacementVal.html":{},"components/MixerViewComponent.html":{},"classes/OpSequencer.html":{},"components/ParameterComponent.html":{},"injectables/SequencerService.html":{},"classes/Shape-1.html":{},"interfaces/TreeNode.html":{},"injectables/ViewportService.html":{},"index.html":{}}}],["current_scale",{"_index":1676,"title":{},"body":{"interfaces/DraftNodeProxy.html":{},"interfaces/FileObj.html":{},"interfaces/FileSaver.html":{},"interfaces/Fileloader.html":{},"interfaces/LoadResponse.html":{},"interfaces/NodeComponentProxy.html":{},"interfaces/OpComponentProxy.html":{},"interfaces/SaveObj.html":{},"interfaces/StatusMessage.html":{},"interfaces/TreeNodeProxy.html":{}}}],["current_view",{"_index":3749,"title":{},"body":{"classes/Render.html":{}}}],["currently",{"_index":119,"title":{},"body":{"classes/AbstractOpFactory.html":{},"classes/BaseOp.html":{},"classes/Branch.html":{},"classes/Bus.html":{},"interfaces/DynamicOperation.html":{},"classes/Merge.html":{},"interfaces/OpClassifier.html":{},"interfaces/OpInput.html":{},"interfaces/OperationClassification.html":{},"interfaces/OperationParam.html":{},"interfaces/OperationProperties.html":{},"classes/Params.html":{},"classes/Pipe.html":{},"interfaces/PlayerState.html":{},"interfaces/PlayerState-1.html":{},"classes/Seed.html":{},"interfaces/TopologyDef.html":{},"interfaces/TreeOperation.html":{},"interfaces/WeavingLog.html":{},"interfaces/WeavingPick.html":{},"interfaces/WeavingPick-1.html":{},"index.html":{},"miscellaneous/typealiases.html":{}}}],["currentrow",{"_index":1930,"title":{},"body":{"interfaces/DraftOperationClassification.html":{},"interfaces/LoomConfig.html":{},"classes/PedalConfig.html":{},"injectables/PlayerService.html":{}}}],["curves",{"_index":4651,"title":{},"body":{"miscellaneous/typealiases.html":{}}}],["custom",{"_index":1851,"title":{},"body":{"interfaces/DraftOperationClassification.html":{},"components/DraftdetailComponent.html":{},"interfaces/LoomConfig.html":{},"classes/PedalConfig.html":{},"injectables/PlayerService.html":{},"index.html":{}}}],["cx",{"_index":670,"title":{},"body":{"components/ConnectionComponent.html":{},"interfaces/DesignActions.html":{},"components/NoteComponent.html":{},"components/WeavingStateComponent.html":{}}}],["cx.beginpath",{"_index":791,"title":{},"body":{"components/ConnectionComponent.html":{}}}],["cx.fillstyle",{"_index":2924,"title":{},"body":{"components/NoteComponent.html":{}}}],["cx.filltext(this.note.text,this.bounds.topleft.x",{"_index":2929,"title":{},"body":{"components/NoteComponent.html":{}}}],["cx.font",{"_index":2926,"title":{},"body":{"components/NoteComponent.html":{}}}],["cx.lineto(this.bounds.width",{"_index":803,"title":{},"body":{"components/ConnectionComponent.html":{}}}],["cx.linewidth",{"_index":796,"title":{},"body":{"components/ConnectionComponent.html":{}}}],["cx.moveto(this.bounds.topleft.x",{"_index":801,"title":{},"body":{"components/ConnectionComponent.html":{}}}],["cx.setlinedash([scale",{"_index":794,"title":{},"body":{"components/ConnectionComponent.html":{}}}],["cx.stroke",{"_index":805,"title":{},"body":{"components/ConnectionComponent.html":{}}}],["cx.strokestyle",{"_index":792,"title":{},"body":{"components/ConnectionComponent.html":{}}}],["cxn",{"_index":2277,"title":{},"body":{"interfaces/IOTuple.html":{},"interfaces/TreeNode.html":{}}}],["d",{"_index":607,"title":{},"body":{"interfaces/ChainOp.html":{},"interfaces/DraftOperationClassification.html":{},"interfaces/LoomConfig.html":{},"interfaces/PairedOp.html":{},"classes/PedalConfig.html":{},"interfaces/PedalEvent.html":{},"interfaces/PlayerOp.html":{},"injectables/PlayerService.html":{},"miscellaneous/functions.html":{}}}],["d.gen_name",{"_index":1901,"title":{},"body":{"interfaces/DraftOperationClassification.html":{},"interfaces/LoomConfig.html":{},"classes/PedalConfig.html":{},"injectables/PlayerService.html":{}}}],["d.id",{"_index":1888,"title":{},"body":{"interfaces/DraftOperationClassification.html":{},"interfaces/LoomConfig.html":{},"classes/PedalConfig.html":{},"injectables/PlayerService.html":{}}}],["data",{"_index":1028,"title":{},"body":{"classes/DBListener.html":{},"classes/DBListenerArray.html":{},"classes/DBNode.html":{},"classes/DBNodeArray.html":{},"classes/DBTwoWay.html":{},"classes/DBTwoWayArray.html":{},"classes/DBWriteBuffer.html":{},"classes/DBWriter.html":{},"classes/DBWriterArray.html":{},"interfaces/DesignActions.html":{},"interfaces/DraftNodeProxy.html":{},"interfaces/DraftOperationClassification.html":{},"components/DraftdetailComponent.html":{},"interfaces/FileObj.html":{},"interfaces/FileSaver.html":{},"interfaces/Fileloader.html":{},"interfaces/LoadResponse.html":{},"interfaces/LoomConfig.html":{},"components/MixerViewComponent.html":{},"interfaces/NodeComponentProxy.html":{},"interfaces/NodeMethods.html":{},"interfaces/NodeParams.html":{},"classes/OnlineStatus.html":{},"interfaces/OpComponentProxy.html":{},"components/OpHelpModal.html":{},"interfaces/OperationParam.html":{},"components/OpsComponent.html":{},"components/ParameterComponent.html":{},"classes/Params.html":{},"interfaces/Pedal.html":{},"classes/PedalConfig.html":{},"classes/PedalStatus.html":{},"injectables/PedalsService.html":{},"injectables/PlayerService.html":{},"interfaces/PlayerState.html":{},"interfaces/PlayerState-1.html":{},"interfaces/SaveObj.html":{},"classes/Shape-1.html":{},"components/SnackbarComponent.html":{},"interfaces/StatusMessage.html":{},"interfaces/TreeNodeProxy.html":{},"interfaces/WeavingLog.html":{},"interfaces/WeavingPick.html":{},"interfaces/WeavingPick-1.html":{},"components/WeavingStateComponent.html":{},"miscellaneous/functions.html":{},"index.html":{},"miscellaneous/typealiases.html":{}}}],["data.bounds",{"_index":4112,"title":{},"body":{"components/SnackbarComponent.html":{}}}],["data.default_cell_size",{"_index":2788,"title":{},"body":{"components/MixerViewComponent.html":{}}}],["data.id",{"_index":2020,"title":{},"body":{"components/DraftdetailComponent.html":{}}}],["data.ink",{"_index":2022,"title":{},"body":{"components/DraftdetailComponent.html":{}}}],["data.length",{"_index":1937,"title":{},"body":{"interfaces/DraftOperationClassification.html":{},"interfaces/LoomConfig.html":{},"classes/PedalConfig.html":{},"injectables/PlayerService.html":{}}}],["data.measurescrolloffset(\"left",{"_index":2036,"title":{},"body":{"components/DraftdetailComponent.html":{}}}],["data.measurescrolloffset(\"top",{"_index":2034,"title":{},"body":{"components/DraftdetailComponent.html":{}}}],["data.message",{"_index":4114,"title":{},"body":{"components/SnackbarComponent.html":{}}}],["data.op.displayname",{"_index":2987,"title":{},"body":{"components/OpHelpModal.html":{}}}],["data.op.dx",{"_index":2988,"title":{},"body":{"components/OpHelpModal.html":{}}}],["data.op.max_inputs",{"_index":2989,"title":{},"body":{"components/OpHelpModal.html":{}}}],["data.op.name",{"_index":2977,"title":{},"body":{"components/OpHelpModal.html":{}}}],["data.op.perform",{"_index":3003,"title":{},"body":{"components/OpHelpModal.html":{}}}],["data.scale",{"_index":4115,"title":{},"body":{"components/SnackbarComponent.html":{}}}],["data.zoom",{"_index":2776,"title":{},"body":{"components/MixerViewComponent.html":{}}}],["data:application/json;charset=utf",{"_index":1536,"title":{},"body":{"interfaces/DesignActions.html":{}}}],["database",{"_index":962,"title":{},"body":{"classes/DBListener.html":{},"classes/DBListenerArray.html":{},"classes/DBNode.html":{},"classes/DBNodeArray.html":{},"classes/DBTwoWay.html":{},"classes/DBTwoWayArray.html":{},"classes/DBWriteBuffer.html":{},"classes/DBWriter.html":{},"classes/DBWriterArray.html":{},"interfaces/NodeMethods.html":{},"interfaces/NodeParams.html":{},"classes/OnlineStatus.html":{},"interfaces/Pedal.html":{},"classes/PedalStatus.html":{},"injectables/PedalsService.html":{}}}],["databasereference",{"_index":938,"title":{},"body":{"classes/DBListener.html":{},"classes/DBListenerArray.html":{},"classes/DBNode.html":{},"classes/DBNodeArray.html":{},"classes/DBTwoWay.html":{},"classes/DBTwoWayArray.html":{},"classes/DBWriteBuffer.html":{},"classes/DBWriter.html":{},"classes/DBWriterArray.html":{},"interfaces/NodeMethods.html":{},"interfaces/NodeParams.html":{},"classes/OnlineStatus.html":{}}}],["datatypes",{"_index":3803,"title":{},"body":{"classes/Render.html":{},"index.html":{}}}],["date",{"_index":3366,"title":{},"body":{"interfaces/Pedal.html":{},"classes/PedalStatus.html":{},"injectables/PedalsService.html":{}}}],["db",{"_index":948,"title":{},"body":{"classes/DBListener.html":{},"classes/DBListenerArray.html":{},"classes/DBNode.html":{},"classes/DBNodeArray.html":{},"classes/DBTwoWay.html":{},"classes/DBTwoWayArray.html":{},"classes/DBWriteBuffer.html":{},"classes/DBWriter.html":{},"classes/DBWriterArray.html":{},"interfaces/NodeMethods.html":{},"interfaces/NodeParams.html":{},"classes/OnlineStatus.html":{},"interfaces/Pedal.html":{},"classes/PedalStatus.html":{},"injectables/PedalsService.html":{}}}],["dblistener",{"_index":920,"title":{"classes/DBListener.html":{}},"body":{"classes/DBListener.html":{},"classes/DBListenerArray.html":{},"classes/DBNode.html":{},"classes/DBNodeArray.html":{},"classes/DBTwoWay.html":{},"classes/DBTwoWayArray.html":{},"classes/DBWriteBuffer.html":{},"classes/DBWriter.html":{},"classes/DBWriterArray.html":{},"interfaces/NodeMethods.html":{},"interfaces/NodeParams.html":{},"classes/OnlineStatus.html":{},"interfaces/Pedal.html":{},"classes/PedalStatus.html":{},"injectables/PedalsService.html":{}}}],["dblistener(params(listeners[l",{"_index":3406,"title":{},"body":{"interfaces/Pedal.html":{},"classes/PedalStatus.html":{},"injectables/PedalsService.html":{}}}],["dblistener(this.db",{"_index":3403,"title":{},"body":{"interfaces/Pedal.html":{},"classes/PedalStatus.html":{},"injectables/PedalsService.html":{}}}],["dblistener:141",{"_index":2956,"title":{},"body":{"classes/OnlineStatus.html":{}}}],["dblistenerarray",{"_index":1056,"title":{"classes/DBListenerArray.html":{}},"body":{"classes/DBListener.html":{},"classes/DBListenerArray.html":{},"classes/DBNode.html":{},"classes/DBNodeArray.html":{},"classes/DBTwoWay.html":{},"classes/DBTwoWayArray.html":{},"classes/DBWriteBuffer.html":{},"classes/DBWriter.html":{},"classes/DBWriterArray.html":{},"interfaces/NodeMethods.html":{},"interfaces/NodeParams.html":{},"classes/OnlineStatus.html":{},"interfaces/Pedal.html":{},"classes/PedalStatus.html":{},"injectables/PedalsService.html":{}}}],["dblistenerarray(this.num_pedals",{"_index":3418,"title":{},"body":{"interfaces/Pedal.html":{},"classes/PedalStatus.html":{},"injectables/PedalsService.html":{}}}],["dbnode",{"_index":924,"title":{"classes/DBNode.html":{}},"body":{"classes/DBListener.html":{},"classes/DBListenerArray.html":{},"classes/DBNode.html":{},"classes/DBNodeArray.html":{},"classes/DBTwoWay.html":{},"classes/DBTwoWayArray.html":{},"classes/DBWriteBuffer.html":{},"classes/DBWriter.html":{},"classes/DBWriterArray.html":{},"interfaces/NodeMethods.html":{},"interfaces/NodeParams.html":{},"classes/OnlineStatus.html":{},"interfaces/Pedal.html":{},"classes/PedalStatus.html":{},"injectables/PedalsService.html":{}}}],["dbnode:121",{"_index":942,"title":{},"body":{"classes/DBListener.html":{},"classes/OnlineStatus.html":{}}}],["dbnode:122",{"_index":943,"title":{},"body":{"classes/DBListener.html":{},"classes/OnlineStatus.html":{}}}],["dbnode:123",{"_index":940,"title":{},"body":{"classes/DBListener.html":{}}}],["dbnode:124",{"_index":939,"title":{},"body":{"classes/DBListener.html":{},"classes/OnlineStatus.html":{}}}],["dbnode:125",{"_index":941,"title":{},"body":{"classes/DBListener.html":{}}}],["dbnode:126",{"_index":937,"title":{},"body":{"classes/DBListener.html":{}}}],["dbnode:132",{"_index":951,"title":{},"body":{"classes/DBListener.html":{},"classes/OnlineStatus.html":{}}}],["dbnode:149",{"_index":952,"title":{},"body":{"classes/DBListener.html":{},"classes/OnlineStatus.html":{}}}],["dbnode:166",{"_index":1252,"title":{},"body":{"classes/DBWriter.html":{}}}],["dbnode:167",{"_index":1242,"title":{},"body":{"classes/DBWriteBuffer.html":{},"classes/DBWriter.html":{}}}],["dbnode:168",{"_index":1249,"title":{},"body":{"classes/DBWriter.html":{}}}],["dbnode:170",{"_index":1251,"title":{},"body":{"classes/DBWriter.html":{}}}],["dbnode:171",{"_index":1248,"title":{},"body":{"classes/DBWriter.html":{}}}],["dbnode:177",{"_index":1245,"title":{},"body":{"classes/DBWriteBuffer.html":{},"classes/DBWriter.html":{}}}],["dbnode:188",{"_index":1246,"title":{},"body":{"classes/DBWriteBuffer.html":{},"classes/DBWriter.html":{}}}],["dbnode:197",{"_index":1241,"title":{},"body":{"classes/DBWriteBuffer.html":{}}}],["dbnode:198",{"_index":1238,"title":{},"body":{"classes/DBWriteBuffer.html":{}}}],["dbnode:200",{"_index":1240,"title":{},"body":{"classes/DBWriteBuffer.html":{}}}],["dbnode:201",{"_index":1237,"title":{},"body":{"classes/DBWriteBuffer.html":{}}}],["dbnode:220",{"_index":1213,"title":{},"body":{"classes/DBTwoWay.html":{}}}],["dbnode:221",{"_index":1214,"title":{},"body":{"classes/DBTwoWay.html":{}}}],["dbnode:222",{"_index":1211,"title":{},"body":{"classes/DBTwoWay.html":{}}}],["dbnode:223",{"_index":1210,"title":{},"body":{"classes/DBTwoWay.html":{}}}],["dbnode:224",{"_index":1212,"title":{},"body":{"classes/DBTwoWay.html":{}}}],["dbnode:225",{"_index":1209,"title":{},"body":{"classes/DBTwoWay.html":{}}}],["dbnode:231",{"_index":1215,"title":{},"body":{"classes/DBTwoWay.html":{}}}],["dbnode:248",{"_index":1216,"title":{},"body":{"classes/DBTwoWay.html":{}}}],["dbnode:36",{"_index":1243,"title":{},"body":{"classes/DBWriteBuffer.html":{},"classes/DBWriter.html":{}}}],["dbnode:44",{"_index":944,"title":{},"body":{"classes/DBListener.html":{},"classes/DBTwoWay.html":{},"classes/DBWriteBuffer.html":{},"classes/DBWriter.html":{},"classes/OnlineStatus.html":{}}}],["dbnode:648",{"_index":2952,"title":{},"body":{"classes/OnlineStatus.html":{}}}],["dbnode:650",{"_index":2954,"title":{},"body":{"classes/OnlineStatus.html":{}}}],["dbnode:651",{"_index":2951,"title":{},"body":{"classes/OnlineStatus.html":{}}}],["dbnodearray",{"_index":1032,"title":{"classes/DBNodeArray.html":{}},"body":{"classes/DBListener.html":{},"classes/DBListenerArray.html":{},"classes/DBNode.html":{},"classes/DBNodeArray.html":{},"classes/DBTwoWay.html":{},"classes/DBTwoWayArray.html":{},"classes/DBWriteBuffer.html":{},"classes/DBWriter.html":{},"classes/DBWriterArray.html":{},"interfaces/NodeMethods.html":{},"interfaces/NodeParams.html":{},"classes/OnlineStatus.html":{}}}],["dbnodearray:287",{"_index":1235,"title":{},"body":{"classes/DBTwoWayArray.html":{},"classes/DBWriterArray.html":{}}}],["dbnodearray:294",{"_index":1174,"title":{},"body":{"classes/DBListenerArray.html":{},"classes/DBTwoWayArray.html":{},"classes/DBWriterArray.html":{}}}],["dbnodearray:298",{"_index":1173,"title":{},"body":{"classes/DBListenerArray.html":{},"classes/DBTwoWayArray.html":{},"classes/DBWriterArray.html":{}}}],["dbnodearray:313",{"_index":1164,"title":{},"body":{"classes/DBListenerArray.html":{}}}],["dbnodearray:314",{"_index":1166,"title":{},"body":{"classes/DBListenerArray.html":{}}}],["dbnodearray:315",{"_index":1165,"title":{},"body":{"classes/DBListenerArray.html":{}}}],["dbnodearray:377",{"_index":1171,"title":{},"body":{"classes/DBListenerArray.html":{}}}],["dbnodearray:458",{"_index":1257,"title":{},"body":{"classes/DBWriterArray.html":{}}}],["dbnodearray:459",{"_index":1256,"title":{},"body":{"classes/DBWriterArray.html":{}}}],["dbnodearray:460",{"_index":1258,"title":{},"body":{"classes/DBWriterArray.html":{}}}],["dbnodearray:510",{"_index":1224,"title":{},"body":{"classes/DBTwoWayArray.html":{}}}],["dbnodearray:511",{"_index":1223,"title":{},"body":{"classes/DBTwoWayArray.html":{}}}],["dbnodearray:512",{"_index":1225,"title":{},"body":{"classes/DBTwoWayArray.html":{}}}],["dbnodes",{"_index":1126,"title":{},"body":{"classes/DBListener.html":{},"classes/DBListenerArray.html":{},"classes/DBNode.html":{},"classes/DBNodeArray.html":{},"classes/DBTwoWay.html":{},"classes/DBTwoWayArray.html":{},"classes/DBWriteBuffer.html":{},"classes/DBWriter.html":{},"classes/DBWriterArray.html":{},"interfaces/NodeMethods.html":{},"interfaces/NodeParams.html":{},"classes/OnlineStatus.html":{},"interfaces/Pedal.html":{},"classes/PedalStatus.html":{},"injectables/PedalsService.html":{}}}],["dbtwoway",{"_index":1031,"title":{"classes/DBTwoWay.html":{}},"body":{"classes/DBListener.html":{},"classes/DBListenerArray.html":{},"classes/DBNode.html":{},"classes/DBNodeArray.html":{},"classes/DBTwoWay.html":{},"classes/DBTwoWayArray.html":{},"classes/DBWriteBuffer.html":{},"classes/DBWriter.html":{},"classes/DBWriterArray.html":{},"interfaces/NodeMethods.html":{},"interfaces/NodeParams.html":{},"classes/OnlineStatus.html":{},"interfaces/Pedal.html":{},"classes/PedalStatus.html":{},"injectables/PedalsService.html":{}}}],["dbtwoway(params('num",{"_index":3421,"title":{},"body":{"interfaces/Pedal.html":{},"classes/PedalStatus.html":{},"injectables/PedalsService.html":{}}}],["dbtwoway(params('v",{"_index":3423,"title":{},"body":{"interfaces/Pedal.html":{},"classes/PedalStatus.html":{},"injectables/PedalsService.html":{}}}],["dbtwowayarray",{"_index":1133,"title":{"classes/DBTwoWayArray.html":{}},"body":{"classes/DBListener.html":{},"classes/DBListenerArray.html":{},"classes/DBNode.html":{},"classes/DBNodeArray.html":{},"classes/DBTwoWay.html":{},"classes/DBTwoWayArray.html":{},"classes/DBWriteBuffer.html":{},"classes/DBWriter.html":{},"classes/DBWriterArray.html":{},"interfaces/NodeMethods.html":{},"interfaces/NodeParams.html":{},"classes/OnlineStatus.html":{},"interfaces/Pedal.html":{},"classes/PedalStatus.html":{},"injectables/PedalsService.html":{}}}],["dbtwowayarray(this.num_v_pedals",{"_index":3425,"title":{},"body":{"interfaces/Pedal.html":{},"classes/PedalStatus.html":{},"injectables/PedalsService.html":{}}}],["dbwritebuffer",{"_index":1025,"title":{"classes/DBWriteBuffer.html":{}},"body":{"classes/DBListener.html":{},"classes/DBListenerArray.html":{},"classes/DBNode.html":{},"classes/DBNodeArray.html":{},"classes/DBTwoWay.html":{},"classes/DBTwoWayArray.html":{},"classes/DBWriteBuffer.html":{},"classes/DBWriter.html":{},"classes/DBWriterArray.html":{},"interfaces/NodeMethods.html":{},"interfaces/NodeParams.html":{},"classes/OnlineStatus.html":{}}}],["dbwriter",{"_index":1014,"title":{"classes/DBWriter.html":{}},"body":{"classes/DBListener.html":{},"classes/DBListenerArray.html":{},"classes/DBNode.html":{},"classes/DBNodeArray.html":{},"classes/DBTwoWay.html":{},"classes/DBTwoWayArray.html":{},"classes/DBWriteBuffer.html":{},"classes/DBWriter.html":{},"classes/DBWriterArray.html":{},"interfaces/NodeMethods.html":{},"interfaces/NodeParams.html":{},"classes/OnlineStatus.html":{},"interfaces/Pedal.html":{},"classes/PedalStatus.html":{},"injectables/PedalsService.html":{}}}],["dbwriter({...params(writers[w",{"_index":3411,"title":{},"body":{"interfaces/Pedal.html":{},"classes/PedalStatus.html":{},"injectables/PedalsService.html":{}}}],["dbwriter:199",{"_index":1239,"title":{},"body":{"classes/DBWriteBuffer.html":{}}}],["dbwriter:207",{"_index":1244,"title":{},"body":{"classes/DBWriteBuffer.html":{}}}],["dbwriterarray",{"_index":1254,"title":{"classes/DBWriterArray.html":{}},"body":{"classes/DBWriterArray.html":{}}}],["de",{"_index":1619,"title":{},"body":{"interfaces/DraftMap.html":{},"interfaces/Interlacement.html":{},"interfaces/InterlacementVal.html":{}}}],["declarations",{"_index":2687,"title":{},"body":{"modules/MixerModule.html":{},"modules/PlayerModule.html":{}}}],["decorators",{"_index":2000,"title":{},"body":{"components/DraftdetailComponent.html":{},"components/MixerViewComponent.html":{},"components/OpHelpModal.html":{},"components/OpsComponent.html":{},"components/PlayerComponent.html":{},"components/SnackbarComponent.html":{},"components/VirtualPedalsComponent.html":{}}}],["default",{"_index":154,"title":{},"body":{"classes/AbstractOpFactory.html":{},"classes/BaseOp.html":{},"classes/Branch.html":{},"classes/Bus.html":{},"components/ConnectionComponent.html":{},"classes/DBTwoWayArray.html":{},"components/DraftdetailComponent.html":{},"interfaces/DynamicOperation.html":{},"injectables/MappingsService.html":{},"directives/MarqueeComponent.html":{},"classes/Merge.html":{},"components/NoteComponent.html":{},"interfaces/OpClassifier.html":{},"components/OpHelpModal.html":{},"interfaces/OpInput.html":{},"classes/OpSequencer.html":{},"interfaces/OperationClassification.html":{},"interfaces/OperationParam.html":{},"interfaces/OperationProperties.html":{},"components/OpsComponent.html":{},"classes/Params.html":{},"interfaces/Pedal.html":{},"classes/PedalStatus.html":{},"injectables/PedalsService.html":{},"classes/Pipe.html":{},"components/PlayerComponent.html":{},"injectables/PlayerService.html":{},"classes/Seed.html":{},"directives/SelectionComponent.html":{},"injectables/SequencerService.html":{},"interfaces/TopologyDef.html":{},"interfaces/TreeOperation.html":{},"components/VirtualPedalsComponent.html":{},"components/WeavingStateComponent.html":{},"miscellaneous/functions.html":{}}}],["default_cell",{"_index":1325,"title":{},"body":{"interfaces/DesignActions.html":{},"components/NoteComponent.html":{},"components/PlayerComponent.html":{},"components/WeavingStateComponent.html":{}}}],["default_cell_size",{"_index":658,"title":{},"body":{"components/ConnectionComponent.html":{}}}],["default_params",{"_index":210,"title":{},"body":{"classes/AbstractOpFactory.html":{},"classes/BaseOp.html":{},"classes/Branch.html":{},"classes/Bus.html":{},"classes/Merge.html":{},"interfaces/OpClassifier.html":{},"interfaces/OperationProperties.html":{},"classes/Pipe.html":{},"classes/Seed.html":{},"interfaces/TopologyDef.html":{}}}],["defaults",{"_index":3392,"title":{},"body":{"interfaces/Pedal.html":{},"classes/PedalStatus.html":{},"injectables/PedalsService.html":{},"classes/Shuttle.html":{},"classes/System.html":{}}}],["defaults[w",{"_index":3412,"title":{},"body":{"interfaces/Pedal.html":{},"classes/PedalStatus.html":{},"injectables/PedalsService.html":{}}}],["defined",{"_index":16,"title":{},"body":{"classes/AbstractOpFactory.html":{},"classes/BaseOp.html":{},"classes/Branch.html":{},"classes/Bus.html":{},"classes/Cell.html":{},"components/ConnectionComponent.html":{},"classes/DBListener.html":{},"classes/DBListenerArray.html":{},"classes/DBNode.html":{},"classes/DBNodeArray.html":{},"classes/DBTwoWay.html":{},"classes/DBTwoWayArray.html":{},"classes/DBWriteBuffer.html":{},"classes/DBWriter.html":{},"classes/DBWriterArray.html":{},"interfaces/DraftMap.html":{},"interfaces/DraftNodeProxy.html":{},"components/DraftdetailComponent.html":{},"interfaces/FileObj.html":{},"interfaces/FileSaver.html":{},"interfaces/Fileloader.html":{},"components/ImageComponent.html":{},"injectables/InkService.html":{},"components/InletComponent.html":{},"interfaces/Interlacement.html":{},"interfaces/InterlacementVal.html":{},"injectables/LayersService.html":{},"interfaces/LoadResponse.html":{},"injectables/MappingsService.html":{},"directives/MarqueeComponent.html":{},"classes/Merge.html":{},"components/MixerViewComponent.html":{},"interfaces/NodeComponentProxy.html":{},"interfaces/NodeMethods.html":{},"components/NoteComponent.html":{},"classes/OnlineStatus.html":{},"interfaces/OpClassifier.html":{},"interfaces/OpComponentProxy.html":{},"components/OpHelpModal.html":{},"classes/OpSequencer.html":{},"components/OpSequencerComponent.html":{},"interfaces/OperationProperties.html":{},"components/OpsComponent.html":{},"components/ParameterComponent.html":{},"classes/Params.html":{},"classes/PedalConfig.html":{},"classes/PedalStatus.html":{},"injectables/PedalsService.html":{},"classes/Pipe.html":{},"components/PlayerComponent.html":{},"injectables/PlayerService.html":{},"classes/Render.html":{},"interfaces/SaveObj.html":{},"classes/Seed.html":{},"classes/Selection.html":{},"directives/SelectionComponent.html":{},"injectables/SequencerService.html":{},"classes/Shape.html":{},"classes/Shape-1.html":{},"classes/Shuttle.html":{},"components/SnackbarComponent.html":{},"interfaces/StatusMessage.html":{},"classes/System.html":{},"interfaces/TopologyDef.html":{},"interfaces/TreeNodeProxy.html":{},"injectables/ViewportService.html":{},"components/VirtualPedalsComponent.html":{},"components/WeavingStateComponent.html":{},"miscellaneous/typealiases.html":{}}}],["definition",{"_index":368,"title":{},"body":{"classes/Cell.html":{},"interfaces/Pedal.html":{},"classes/PedalStatus.html":{},"injectables/PedalsService.html":{},"classes/Render.html":{},"classes/Selection.html":{},"classes/Shape.html":{},"classes/Shuttle.html":{},"classes/System.html":{}}}],["defs",{"_index":1680,"title":{},"body":{"interfaces/DraftOperationClassification.html":{},"interfaces/LoomConfig.html":{},"classes/PedalConfig.html":{},"injectables/PlayerService.html":{}}}],["defs.tabby.perform([1",{"_index":1798,"title":{},"body":{"interfaces/DraftOperationClassification.html":{},"interfaces/LoomConfig.html":{},"classes/PedalConfig.html":{},"injectables/PlayerService.html":{}}}],["defs.tile.name",{"_index":1843,"title":{},"body":{"interfaces/DraftOperationClassification.html":{},"interfaces/LoomConfig.html":{},"classes/PedalConfig.html":{},"injectables/PlayerService.html":{}}}],["defs.tile.perform([init.draft",{"_index":1844,"title":{},"body":{"interfaces/DraftOperationClassification.html":{},"interfaces/LoomConfig.html":{},"classes/PedalConfig.html":{},"injectables/PlayerService.html":{}}}],["delete",{"_index":1777,"title":{},"body":{"interfaces/DraftOperationClassification.html":{},"interfaces/LoomConfig.html":{},"injectables/MappingsService.html":{},"components/NoteComponent.html":{},"classes/PedalConfig.html":{},"injectables/PlayerService.html":{}}}],["delete(id",{"_index":2876,"title":{},"body":{"components/NoteComponent.html":{}}}],["deleted",{"_index":4209,"title":{},"body":{"injectables/ViewportService.html":{}}}],["deletenote",{"_index":2866,"title":{},"body":{"components/NoteComponent.html":{}}}],["deleting",{"_index":2269,"title":{},"body":{"interfaces/IOTuple.html":{},"interfaces/TreeNode.html":{}}}],["delimit",{"_index":3980,"title":{},"body":{"classes/Shape.html":{}}}],["delopat",{"_index":3019,"title":{},"body":{"classes/OpSequencer.html":{},"injectables/SequencerService.html":{}}}],["delopat(x",{"_index":3038,"title":{},"body":{"classes/OpSequencer.html":{},"injectables/SequencerService.html":{}}}],["densityunits",{"_index":1263,"title":{"interfaces/DensityUnits.html":{}},"body":{"interfaces/DensityUnits.html":{},"interfaces/DesignMode.html":{},"interfaces/LoomTypes.html":{},"interfaces/MaterialTypes.html":{},"interfaces/ViewModes.html":{}}}],["dependencies",{"_index":2680,"title":{"dependencies.html":{}},"body":{"modules/MixerModule.html":{},"modules/PlayerModule.html":{},"dependencies.html":{},"index.html":{},"overview.html":{}}}],["depends",{"_index":687,"title":{},"body":{"components/ConnectionComponent.html":{}}}],["deployments",{"_index":4458,"title":{},"body":{"index.html":{}}}],["desc",{"_index":968,"title":{},"body":{"classes/DBListener.html":{},"classes/DBListenerArray.html":{},"classes/DBNode.html":{},"classes/DBNodeArray.html":{},"classes/DBTwoWay.html":{},"classes/DBTwoWayArray.html":{},"classes/DBWriteBuffer.html":{},"classes/DBWriter.html":{},"classes/DBWriterArray.html":{},"interfaces/DraftOperationClassification.html":{},"interfaces/LoomConfig.html":{},"injectables/MappingsService.html":{},"interfaces/NodeMethods.html":{},"interfaces/NodeParams.html":{},"classes/OnlineStatus.html":{},"classes/PedalConfig.html":{},"injectables/PlayerService.html":{}}}],["describe",{"_index":4593,"title":{},"body":{"index.html":{}}}],["described",{"_index":4516,"title":{},"body":{"index.html":{}}}],["describes",{"_index":339,"title":{},"body":{"interfaces/Bounds.html":{},"classes/Cell.html":{},"interfaces/Crossing.html":{},"interfaces/DraftNodeProxy.html":{},"interfaces/FileObj.html":{},"interfaces/FileSaver.html":{},"interfaces/Fileloader.html":{},"interfaces/IOTuple.html":{},"interfaces/LoadResponse.html":{},"interfaces/NodeComponentProxy.html":{},"interfaces/OpComponentProxy.html":{},"interfaces/OperationParam.html":{},"interfaces/Point.html":{},"interfaces/SaveObj.html":{},"interfaces/StatusMessage.html":{},"classes/System.html":{},"interfaces/TreeNode.html":{},"interfaces/TreeNodeProxy.html":{},"interfaces/Vertex.html":{},"interfaces/YarnPath.html":{},"index.html":{},"miscellaneous/typealiases.html":{}}}],["describing",{"_index":160,"title":{},"body":{"classes/AbstractOpFactory.html":{},"classes/BaseOp.html":{},"classes/Branch.html":{},"classes/Bus.html":{},"interfaces/Ink.html":{},"injectables/InkService.html":{},"classes/Merge.html":{},"interfaces/OpClassifier.html":{},"interfaces/OperationProperties.html":{},"classes/Pipe.html":{},"classes/Seed.html":{},"interfaces/TopologyDef.html":{},"index.html":{},"miscellaneous/typealiases.html":{}}}],["description",{"_index":202,"title":{},"body":{"classes/AbstractOpFactory.html":{},"classes/BaseOp.html":{},"interfaces/Bounds.html":{},"classes/Branch.html":{},"classes/Bus.html":{},"classes/Cell.html":{},"interfaces/ChainIndex.html":{},"interfaces/ChainOp.html":{},"components/ConnectionComponent.html":{},"interfaces/Crossing.html":{},"classes/DBListener.html":{},"classes/DBListenerArray.html":{},"classes/DBNode.html":{},"classes/DBTwoWayArray.html":{},"classes/DBWriteBuffer.html":{},"classes/DBWriter.html":{},"interfaces/DesignMode.html":{},"interfaces/DraftMap.html":{},"interfaces/DraftNodeProxy.html":{},"components/DraftdetailComponent.html":{},"interfaces/DynamicOperation.html":{},"interfaces/IOTuple.html":{},"injectables/InkService.html":{},"interfaces/Interlacement.html":{},"interfaces/InterlacementVal.html":{},"injectables/LayersService.html":{},"interfaces/LoomTypes.html":{},"injectables/MappingsService.html":{},"classes/Merge.html":{},"interfaces/NodeComponentProxy.html":{},"classes/OnlineStatus.html":{},"interfaces/OpClassifier.html":{},"interfaces/OpComponentProxy.html":{},"components/OpHelpModal.html":{},"interfaces/OpInput.html":{},"classes/OpSequencer.html":{},"interfaces/OperationClassification.html":{},"interfaces/OperationParam.html":{},"interfaces/OperationProperties.html":{},"interfaces/PairedOp.html":{},"classes/Params.html":{},"interfaces/Pedal.html":{},"classes/PedalConfig.html":{},"interfaces/PedalEvent.html":{},"classes/PedalStatus.html":{},"injectables/PedalsService.html":{},"classes/Pipe.html":{},"injectables/PlayerService.html":{},"interfaces/PlayerState.html":{},"interfaces/PlayerState-1.html":{},"interfaces/Point.html":{},"classes/Render.html":{},"interfaces/SaveObj.html":{},"classes/Seed.html":{},"classes/Selection.html":{},"injectables/SequencerService.html":{},"classes/Shape.html":{},"classes/Shape-1.html":{},"classes/Shuttle.html":{},"classes/System.html":{},"interfaces/TopologyDef.html":{},"interfaces/TreeNode.html":{},"interfaces/TreeNodeProxy.html":{},"interfaces/TreeOperation.html":{},"interfaces/Vertex.html":{},"injectables/ViewportService.html":{},"interfaces/YarnPath.html":{},"miscellaneous/functions.html":{},"index.html":{}}}],["descriptive",{"_index":184,"title":{},"body":{"classes/AbstractOpFactory.html":{},"classes/BaseOp.html":{},"classes/Branch.html":{},"classes/Bus.html":{},"classes/Merge.html":{},"interfaces/OpClassifier.html":{},"interfaces/OperationProperties.html":{},"classes/Pipe.html":{},"classes/Seed.html":{},"interfaces/TopologyDef.html":{}}}],["design",{"_index":272,"title":{},"body":{"classes/AbstractOpFactory.html":{},"classes/BaseOp.html":{},"classes/Branch.html":{},"classes/Bus.html":{},"classes/Merge.html":{},"interfaces/OpClassifier.html":{},"interfaces/OperationProperties.html":{},"classes/Pipe.html":{},"classes/Seed.html":{},"interfaces/TopologyDef.html":{},"index.html":{}}}],["designactionchange(e",{"_index":2050,"title":{},"body":{"components/DraftdetailComponent.html":{}}}],["designactions",{"_index":1286,"title":{"interfaces/DesignActions.html":{}},"body":{"interfaces/DesignActions.html":{}}}],["designer",{"_index":4428,"title":{},"body":{"index.html":{}}}],["designing",{"_index":4461,"title":{},"body":{"index.html":{}}}],["designmode",{"_index":1285,"title":{"interfaces/DesignMode.html":{}},"body":{"interfaces/DensityUnits.html":{},"interfaces/DesignMode.html":{},"interfaces/LoomTypes.html":{},"interfaces/MaterialTypes.html":{},"interfaces/ViewModes.html":{}}}],["designmodesservice",{"_index":1963,"title":{},"body":{"components/DraftdetailComponent.html":{}}}],["detach",{"_index":931,"title":{},"body":{"classes/DBListener.html":{},"classes/DBListenerArray.html":{},"classes/DBNode.html":{},"classes/DBNodeArray.html":{},"classes/DBTwoWay.html":{},"classes/DBTwoWayArray.html":{},"classes/DBWriteBuffer.html":{},"classes/DBWriter.html":{},"classes/DBWriterArray.html":{},"interfaces/NodeMethods.html":{},"interfaces/NodeParams.html":{},"classes/OnlineStatus.html":{}}}],["detail",{"_index":2093,"title":{},"body":{"components/DraftdetailComponent.html":{}}}],["details",{"_index":2939,"title":{},"body":{"components/NoteComponent.html":{}}}],["determining",{"_index":1271,"title":{},"body":{"interfaces/DensityUnits.html":{},"interfaces/DesignMode.html":{},"interfaces/LoomTypes.html":{},"interfaces/MaterialTypes.html":{},"interfaces/ViewModes.html":{}}}],["dev",{"_index":4605,"title":{},"body":{"index.html":{}}}],["developer",{"_index":4467,"title":{},"body":{"index.html":{}}}],["developers",{"_index":4491,"title":{},"body":{"index.html":{}}}],["development",{"_index":4450,"title":{},"body":{"index.html":{}}}],["device",{"_index":1145,"title":{},"body":{"classes/DBListener.html":{},"classes/DBListenerArray.html":{},"classes/DBNode.html":{},"classes/DBNodeArray.html":{},"classes/DBTwoWay.html":{},"classes/DBTwoWayArray.html":{},"classes/DBWriteBuffer.html":{},"classes/DBWriter.html":{},"classes/DBWriterArray.html":{},"interfaces/NodeMethods.html":{},"interfaces/NodeParams.html":{},"classes/OnlineStatus.html":{},"index.html":{}}}],["devices",{"_index":1149,"title":{},"body":{"classes/DBListener.html":{},"classes/DBListenerArray.html":{},"classes/DBNode.html":{},"classes/DBNodeArray.html":{},"classes/DBTwoWay.html":{},"classes/DBTwoWayArray.html":{},"classes/DBWriteBuffer.html":{},"classes/DBWriter.html":{},"classes/DBWriterArray.html":{},"interfaces/NodeMethods.html":{},"interfaces/NodeParams.html":{},"classes/OnlineStatus.html":{}}}],["devtools",{"_index":4363,"title":{},"body":{"dependencies.html":{}}}],["dialog",{"_index":1395,"title":{},"body":{"interfaces/DesignActions.html":{},"components/DraftdetailComponent.html":{},"components/MixerViewComponent.html":{},"components/OpsComponent.html":{}}}],["dialogref",{"_index":1965,"title":{},"body":{"components/DraftdetailComponent.html":{},"components/MixerViewComponent.html":{},"components/OpHelpModal.html":{},"components/OpsComponent.html":{}}}],["didn't",{"_index":1426,"title":{},"body":{"interfaces/DesignActions.html":{},"components/PlayerComponent.html":{}}}],["different",{"_index":1272,"title":{},"body":{"interfaces/DensityUnits.html":{},"interfaces/DesignMode.html":{},"interfaces/LoomTypes.html":{},"interfaces/MaterialTypes.html":{},"classes/System.html":{},"interfaces/ViewModes.html":{},"miscellaneous/functions.html":{},"index.html":{},"miscellaneous/typealiases.html":{}}}],["differently",{"_index":2220,"title":{},"body":{"interfaces/DynamicOperation.html":{},"interfaces/OpInput.html":{},"interfaces/OperationClassification.html":{},"interfaces/TreeOperation.html":{}}}],["dims",{"_index":1545,"title":{},"body":{"interfaces/DesignActions.html":{},"classes/Shuttle.html":{}}}],["dims:({{bounds.width",{"_index":4116,"title":{},"body":{"components/SnackbarComponent.html":{}}}],["direct",{"_index":234,"title":{},"body":{"classes/AbstractOpFactory.html":{},"classes/BaseOp.html":{},"classes/Branch.html":{},"classes/Bus.html":{},"classes/Merge.html":{},"interfaces/OpClassifier.html":{},"interfaces/OperationProperties.html":{},"classes/Pipe.html":{},"classes/Seed.html":{},"interfaces/TopologyDef.html":{},"index.html":{}}}],["direction",{"_index":2096,"title":{},"body":{"components/DraftdetailComponent.html":{},"components/MixerViewComponent.html":{},"components/NoteComponent.html":{},"components/OpSequencerComponent.html":{},"components/OpsComponent.html":{},"components/ParameterComponent.html":{},"components/PlayerComponent.html":{},"components/SnackbarComponent.html":{},"components/VirtualPedalsComponent.html":{},"components/WeavingStateComponent.html":{},"miscellaneous/typealiases.html":{}}}],["directive",{"_index":826,"title":{"directives/MarqueeComponent.html":{},"directives/SelectionComponent.html":{}},"body":{"components/ConnectionComponent.html":{},"components/DraftdetailComponent.html":{},"components/ImageComponent.html":{},"components/InletComponent.html":{},"directives/MarqueeComponent.html":{},"components/MixerViewComponent.html":{},"components/NoteComponent.html":{},"components/OpHelpModal.html":{},"components/OpSequencerComponent.html":{},"components/OpsComponent.html":{},"components/ParameterComponent.html":{},"components/PlayerComponent.html":{},"directives/SelectionComponent.html":{},"components/SnackbarComponent.html":{},"components/VirtualPedalsComponent.html":{},"components/WeavingStateComponent.html":{}}}],["directives",{"_index":861,"title":{},"body":{"components/ConnectionComponent.html":{},"components/DraftdetailComponent.html":{},"components/ImageComponent.html":{},"components/InletComponent.html":{},"directives/MarqueeComponent.html":{},"components/MixerViewComponent.html":{},"components/NoteComponent.html":{},"components/OpHelpModal.html":{},"components/OpSequencerComponent.html":{},"components/OpsComponent.html":{},"components/ParameterComponent.html":{},"components/PlayerComponent.html":{},"directives/SelectionComponent.html":{},"components/SnackbarComponent.html":{},"components/VirtualPedalsComponent.html":{},"components/WeavingStateComponent.html":{},"index.html":{},"overview.html":{}}}],["directly",{"_index":206,"title":{},"body":{"classes/AbstractOpFactory.html":{},"classes/BaseOp.html":{},"classes/Branch.html":{},"classes/Bus.html":{},"interfaces/DesignActions.html":{},"interfaces/DynamicOperation.html":{},"classes/Merge.html":{},"interfaces/OpClassifier.html":{},"interfaces/OpInput.html":{},"interfaces/OperationClassification.html":{},"interfaces/OperationProperties.html":{},"classes/Pipe.html":{},"classes/Seed.html":{},"interfaces/TopologyDef.html":{},"interfaces/TreeOperation.html":{}}}],["directory",{"_index":4497,"title":{},"body":{"index.html":{}}}],["dirty",{"_index":2272,"title":{},"body":{"interfaces/IOTuple.html":{},"components/ParameterComponent.html":{},"interfaces/TreeNode.html":{}}}],["disable_drag",{"_index":641,"title":{},"body":{"components/ConnectionComponent.html":{},"interfaces/DesignActions.html":{}}}],["disable_drag:boolean",{"_index":717,"title":{},"body":{"components/ConnectionComponent.html":{}}}],["disableclose",{"_index":1557,"title":{},"body":{"interfaces/DesignActions.html":{}}}],["disabled",{"_index":3119,"title":{},"body":{"components/OpSequencerComponent.html":{},"components/PlayerComponent.html":{},"components/WeavingStateComponent.html":{}}}],["disabled=true",{"_index":3138,"title":{},"body":{"components/OpSequencerComponent.html":{},"components/PlayerComponent.html":{},"components/WeavingStateComponent.html":{}}}],["disabledrag",{"_index":649,"title":{},"body":{"components/ConnectionComponent.html":{}}}],["display",{"_index":2094,"title":{},"body":{"components/DraftdetailComponent.html":{},"components/InletComponent.html":{},"components/MixerViewComponent.html":{},"components/NoteComponent.html":{},"components/OpHelpModal.html":{},"components/OpSequencerComponent.html":{},"components/OpsComponent.html":{},"components/ParameterComponent.html":{},"components/PlayerComponent.html":{},"components/SnackbarComponent.html":{},"components/VirtualPedalsComponent.html":{},"components/WeavingStateComponent.html":{},"index.html":{}}}],["display:flex",{"_index":2940,"title":{},"body":{"components/NoteComponent.html":{}}}],["display:none",{"_index":2949,"title":{},"body":{"components/NoteComponent.html":{}}}],["displayname",{"_index":188,"title":{},"body":{"classes/AbstractOpFactory.html":{},"classes/BaseOp.html":{},"classes/Branch.html":{},"classes/Bus.html":{},"interfaces/DynamicOperation.html":{},"classes/Merge.html":{},"interfaces/OpClassifier.html":{},"interfaces/OpInput.html":{},"interfaces/OperationClassification.html":{},"interfaces/OperationProperties.html":{},"classes/Pipe.html":{},"classes/Seed.html":{},"interfaces/TopologyDef.html":{},"interfaces/TreeOperation.html":{}}}],["displaynames",{"_index":3210,"title":{},"body":{"components/OpsComponent.html":{}}}],["displaynames:array",{"_index":3243,"title":{},"body":{"components/OpsComponent.html":{}}}],["dist",{"_index":4608,"title":{},"body":{"index.html":{}}}],["div",{"_index":2716,"title":{},"body":{"components/MixerViewComponent.html":{}}}],["div.cdk",{"_index":2946,"title":{},"body":{"components/NoteComponent.html":{}}}],["dive",{"_index":4449,"title":{},"body":{"index.html":{}}}],["dm",{"_index":1948,"title":{},"body":{"components/DraftdetailComponent.html":{}}}],["dm.getselecteddesignmode('drawdown_editing_style').viewvalue",{"_index":2092,"title":{},"body":{"components/DraftdetailComponent.html":{}}}],["dm.getselecteddesignmode(\\'drawdown_editing_style\\').viewvalue",{"_index":2127,"title":{},"body":{"components/DraftdetailComponent.html":{}}}],["docs",{"_index":293,"title":{},"body":{"classes/AbstractOpFactory.html":{},"classes/BaseOp.html":{},"classes/Branch.html":{},"classes/Bus.html":{},"classes/Merge.html":{},"interfaces/OpClassifier.html":{},"interfaces/OperationProperties.html":{},"classes/Pipe.html":{},"classes/Seed.html":{},"interfaces/TopologyDef.html":{}}}],["documenation",{"_index":2961,"title":{},"body":{"components/OpHelpModal.html":{}}}],["document.createelement('a",{"_index":1522,"title":{},"body":{"interfaces/DesignActions.html":{}}}],["document.getelementbyid(\"notecanvas",{"_index":2906,"title":{},"body":{"components/NoteComponent.html":{}}}],["document.getelementbyid(\"scale",{"_index":1470,"title":{},"body":{"interfaces/DesignActions.html":{}}}],["document.getelementbyid('active",{"_index":3660,"title":{},"body":{"components/PlayerComponent.html":{},"components/WeavingStateComponent.html":{}}}],["document.getelementbyid('cxn",{"_index":816,"title":{},"body":{"components/ConnectionComponent.html":{}}}],["document.getelementbyid('global",{"_index":2814,"title":{},"body":{"components/MixerViewComponent.html":{}}}],["document.getelementbyid('inlet'+to.id",{"_index":762,"title":{},"body":{"components/ConnectionComponent.html":{}}}],["document.getelementbyid('player",{"_index":3654,"title":{},"body":{"components/PlayerComponent.html":{},"components/WeavingStateComponent.html":{}}}],["document.getelementbyid('scale",{"_index":1449,"title":{},"body":{"interfaces/DesignActions.html":{}}}],["document.getelementbyid('scalenote",{"_index":2919,"title":{},"body":{"components/NoteComponent.html":{}}}],["document.getelementbyid('scrollable",{"_index":2791,"title":{},"body":{"components/MixerViewComponent.html":{}}}],["document.getelementbyid('svg",{"_index":733,"title":{},"body":{"components/ConnectionComponent.html":{}}}],["document.getelementbyid(from.id",{"_index":773,"title":{},"body":{"components/ConnectionComponent.html":{}}}],["document.getelementbyid(this.id.tostring",{"_index":1420,"title":{},"body":{"interfaces/DesignActions.html":{}}}],["document.queryselector(\"app",{"_index":3672,"title":{},"body":{"components/PlayerComponent.html":{}}}],["document.queryselector('.mat",{"_index":3656,"title":{},"body":{"components/PlayerComponent.html":{},"components/WeavingStateComponent.html":{}}}],["document.queryselector('mat",{"_index":3663,"title":{},"body":{"components/PlayerComponent.html":{}}}],["document.write",{"_index":4023,"title":{},"body":{"classes/Shape-1.html":{}}}],["documentation",{"_index":3002,"title":{},"body":{"components/OpHelpModal.html":{},"index.html":{}}}],["doesn't",{"_index":1759,"title":{},"body":{"interfaces/DraftOperationClassification.html":{},"interfaces/LoomConfig.html":{},"injectables/MappingsService.html":{},"classes/PedalConfig.html":{},"injectables/PlayerService.html":{}}}],["dom",{"_index":628,"title":{},"body":{"components/ConnectionComponent.html":{},"components/DraftdetailComponent.html":{},"components/ImageComponent.html":{},"components/InletComponent.html":{},"components/MixerViewComponent.html":{},"components/NoteComponent.html":{},"components/OpHelpModal.html":{},"components/OpSequencerComponent.html":{},"components/OpsComponent.html":{},"components/ParameterComponent.html":{},"components/PlayerComponent.html":{},"components/SnackbarComponent.html":{},"components/VirtualPedalsComponent.html":{},"components/WeavingStateComponent.html":{}}}],["don't",{"_index":1551,"title":{},"body":{"interfaces/DesignActions.html":{},"injectables/MappingsService.html":{},"interfaces/OperationParam.html":{},"classes/Params.html":{},"index.html":{}}}],["doublecheck",{"_index":221,"title":{},"body":{"classes/AbstractOpFactory.html":{},"classes/BaseOp.html":{},"classes/Branch.html":{},"classes/Bus.html":{},"classes/Merge.html":{},"interfaces/OpClassifier.html":{},"interfaces/OperationProperties.html":{},"classes/Pipe.html":{},"classes/Seed.html":{},"interfaces/TopologyDef.html":{}}}],["down",{"_index":2317,"title":{},"body":{"interfaces/Ink.html":{},"injectables/InkService.html":{}}}],["down/lowered",{"_index":4555,"title":{},"body":{"index.html":{}}}],["download",{"_index":4021,"title":{},"body":{"classes/Shape-1.html":{},"index.html":{}}}],["downloading",{"_index":4444,"title":{},"body":{"index.html":{}}}],["downs",{"_index":2320,"title":{},"body":{"interfaces/Ink.html":{},"injectables/InkService.html":{}}}],["downstream",{"_index":1653,"title":{},"body":{"interfaces/DraftNodeProxy.html":{},"interfaces/FileObj.html":{},"interfaces/FileSaver.html":{},"interfaces/Fileloader.html":{},"interfaces/LoadResponse.html":{},"interfaces/NodeComponentProxy.html":{},"interfaces/OpComponentProxy.html":{},"interfaces/SaveObj.html":{},"interfaces/StatusMessage.html":{},"interfaces/TreeNodeProxy.html":{}}}],["draft",{"_index":51,"title":{},"body":{"classes/AbstractOpFactory.html":{},"classes/BaseOp.html":{},"interfaces/Bounds.html":{},"classes/Branch.html":{},"classes/Bus.html":{},"interfaces/ChainOp.html":{},"interfaces/Crossing.html":{},"interfaces/DesignActions.html":{},"interfaces/DraftMap.html":{},"interfaces/DraftNodeProxy.html":{},"interfaces/DraftOperationClassification.html":{},"components/DraftdetailComponent.html":{},"interfaces/DynamicOperation.html":{},"interfaces/FileObj.html":{},"interfaces/FileSaver.html":{},"interfaces/Fileloader.html":{},"interfaces/IOTuple.html":{},"interfaces/Ink.html":{},"injectables/InkService.html":{},"components/InletComponent.html":{},"interfaces/Interlacement.html":{},"interfaces/InterlacementVal.html":{},"interfaces/LoadResponse.html":{},"interfaces/LoomConfig.html":{},"directives/MarqueeComponent.html":{},"classes/Merge.html":{},"interfaces/NodeComponentProxy.html":{},"interfaces/OpClassifier.html":{},"interfaces/OpComponentProxy.html":{},"components/OpHelpModal.html":{},"interfaces/OpInput.html":{},"classes/OpSequencer.html":{},"interfaces/OperationClassification.html":{},"interfaces/OperationParam.html":{},"interfaces/OperationProperties.html":{},"interfaces/PairedOp.html":{},"components/ParameterComponent.html":{},"classes/Params.html":{},"interfaces/Pedal.html":{},"classes/PedalConfig.html":{},"interfaces/PedalEvent.html":{},"classes/PedalStatus.html":{},"injectables/PedalsService.html":{},"classes/Pipe.html":{},"components/PlayerComponent.html":{},"interfaces/PlayerOp.html":{},"injectables/PlayerService.html":{},"interfaces/PlayerState.html":{},"interfaces/PlayerState-1.html":{},"interfaces/Point.html":{},"classes/Render.html":{},"interfaces/SaveObj.html":{},"classes/Seed.html":{},"directives/SelectionComponent.html":{},"classes/Shape.html":{},"classes/Shape-1.html":{},"interfaces/StatusMessage.html":{},"interfaces/TopologyDef.html":{},"interfaces/TreeNode.html":{},"interfaces/TreeNodeProxy.html":{},"interfaces/TreeOperation.html":{},"interfaces/Vertex.html":{},"interfaces/WeavingLog.html":{},"interfaces/WeavingPick.html":{},"interfaces/WeavingPick-1.html":{},"components/WeavingStateComponent.html":{},"interfaces/YarnPath.html":{},"miscellaneous/functions.html":{},"index.html":{},"miscellaneous/typealiases.html":{}}}],["draft(value",{"_index":1333,"title":{},"body":{"interfaces/DesignActions.html":{}}}],["draft({name",{"_index":3891,"title":{},"body":{"directives/SelectionComponent.html":{}}}],["draft.drawdown[row",{"_index":1932,"title":{},"body":{"interfaces/DraftOperationClassification.html":{},"interfaces/LoomConfig.html":{},"classes/PedalConfig.html":{},"injectables/PlayerService.html":{}}}],["draft.rowsystemmapping.map((val",{"_index":3848,"title":{},"body":{"classes/Render.html":{}}}],["draft.ts",{"_index":3958,"title":{},"body":{"classes/Shape.html":{}}}],["draft.visiblerows",{"_index":1621,"title":{},"body":{"interfaces/DraftMap.html":{},"interfaces/Interlacement.html":{},"interfaces/InterlacementVal.html":{}}}],["draft.visiblerows[si",{"_index":1622,"title":{},"body":{"interfaces/DraftMap.html":{},"interfaces/Interlacement.html":{},"interfaces/InterlacementVal.html":{}}}],["draft:draft",{"_index":2012,"title":{},"body":{"components/DraftdetailComponent.html":{}}}],["draft_id",{"_index":1633,"title":{},"body":{"interfaces/DraftNodeProxy.html":{},"interfaces/FileObj.html":{},"interfaces/FileSaver.html":{},"interfaces/Fileloader.html":{},"interfaces/LoadResponse.html":{},"interfaces/NodeComponentProxy.html":{},"interfaces/OpComponentProxy.html":{},"interfaces/SaveObj.html":{},"interfaces/StatusMessage.html":{},"interfaces/TreeNodeProxy.html":{}}}],["draft_input",{"_index":577,"title":{},"body":{"interfaces/ChainOp.html":{},"interfaces/PairedOp.html":{},"interfaces/PedalEvent.html":{},"interfaces/PlayerOp.html":{}}}],["draft_input]).then((output",{"_index":581,"title":{},"body":{"interfaces/ChainOp.html":{},"interfaces/PairedOp.html":{},"interfaces/PedalEvent.html":{},"interfaces/PlayerOp.html":{}}}],["draft_name",{"_index":1634,"title":{},"body":{"interfaces/DraftNodeProxy.html":{},"interfaces/FileObj.html":{},"interfaces/FileSaver.html":{},"interfaces/Fileloader.html":{},"interfaces/LoadResponse.html":{},"interfaces/NodeComponentProxy.html":{},"interfaces/OpComponentProxy.html":{},"interfaces/SaveObj.html":{},"interfaces/StatusMessage.html":{},"interfaces/TreeNodeProxy.html":{}}}],["draft_ndx",{"_index":893,"title":{},"body":{"interfaces/Crossing.html":{},"interfaces/Vertex.html":{},"interfaces/YarnPath.html":{}}}],["draft_nodes",{"_index":1663,"title":{},"body":{"interfaces/DraftNodeProxy.html":{},"interfaces/FileObj.html":{},"interfaces/FileSaver.html":{},"interfaces/Fileloader.html":{},"interfaces/LoadResponse.html":{},"interfaces/NodeComponentProxy.html":{},"interfaces/OpComponentProxy.html":{},"interfaces/SaveObj.html":{},"interfaces/StatusMessage.html":{},"interfaces/TreeNodeProxy.html":{}}}],["draft_set",{"_index":3640,"title":{},"body":{"components/PlayerComponent.html":{},"components/WeavingStateComponent.html":{}}}],["draft_visible",{"_index":1387,"title":{},"body":{"interfaces/DesignActions.html":{},"interfaces/DraftNodeProxy.html":{},"interfaces/FileObj.html":{},"interfaces/FileSaver.html":{},"interfaces/Fileloader.html":{},"interfaces/LoadResponse.html":{},"interfaces/NodeComponentProxy.html":{},"interfaces/OpComponentProxy.html":{},"interfaces/SaveObj.html":{},"interfaces/StatusMessage.html":{},"interfaces/TreeNodeProxy.html":{}}}],["draftcanvas",{"_index":4290,"title":{},"body":{"components/WeavingStateComponent.html":{}}}],["draftclassification",{"_index":1786,"title":{},"body":{"interfaces/DraftOperationClassification.html":{},"interfaces/LoomConfig.html":{},"classes/PedalConfig.html":{},"injectables/PlayerService.html":{}}}],["draftdetail",{"_index":1945,"title":{},"body":{"components/DraftdetailComponent.html":{}}}],["draftdetail'},{'name",{"_index":830,"title":{},"body":{"components/ConnectionComponent.html":{},"components/DraftdetailComponent.html":{},"components/ImageComponent.html":{},"components/InletComponent.html":{},"components/MixerViewComponent.html":{},"components/NoteComponent.html":{},"components/OpHelpModal.html":{},"components/OpSequencerComponent.html":{},"components/OpsComponent.html":{},"components/ParameterComponent.html":{},"components/PlayerComponent.html":{},"components/SnackbarComponent.html":{},"components/VirtualPedalsComponent.html":{},"components/WeavingStateComponent.html":{}}}],["draftdetail.component.html",{"_index":1947,"title":{},"body":{"components/DraftdetailComponent.html":{}}}],["draftdetail.component.scss",{"_index":1946,"title":{},"body":{"components/DraftdetailComponent.html":{}}}],["draftdetailcomponent",{"_index":829,"title":{"components/DraftdetailComponent.html":{}},"body":{"components/ConnectionComponent.html":{},"interfaces/DesignActions.html":{},"components/DraftdetailComponent.html":{},"components/ImageComponent.html":{},"components/InletComponent.html":{},"modules/MixerModule.html":{},"components/MixerViewComponent.html":{},"components/NoteComponent.html":{},"components/OpHelpModal.html":{},"components/OpSequencerComponent.html":{},"components/OpsComponent.html":{},"components/ParameterComponent.html":{},"components/PlayerComponent.html":{},"components/SnackbarComponent.html":{},"components/VirtualPedalsComponent.html":{},"components/WeavingStateComponent.html":{},"overview.html":{}}}],["draftmap",{"_index":1295,"title":{"interfaces/DraftMap.html":{}},"body":{"interfaces/DesignActions.html":{},"interfaces/DraftMap.html":{},"interfaces/Interlacement.html":{},"interfaces/InterlacementVal.html":{}}}],["draftnode",{"_index":2282,"title":{},"body":{"interfaces/IOTuple.html":{},"interfaces/TreeNode.html":{},"miscellaneous/typealiases.html":{}}}],["draftnodeproxy",{"_index":1630,"title":{"interfaces/DraftNodeProxy.html":{}},"body":{"interfaces/DraftNodeProxy.html":{},"interfaces/FileObj.html":{},"interfaces/FileSaver.html":{},"interfaces/Fileloader.html":{},"interfaces/LoadResponse.html":{},"interfaces/NodeComponentProxy.html":{},"interfaces/OpComponentProxy.html":{},"interfaces/SaveObj.html":{},"interfaces/StatusMessage.html":{},"interfaces/TreeNodeProxy.html":{}}}],["draftoperationclassification",{"_index":1677,"title":{"interfaces/DraftOperationClassification.html":{}},"body":{"interfaces/DraftOperationClassification.html":{},"interfaces/LoomConfig.html":{},"classes/PedalConfig.html":{},"injectables/PlayerService.html":{}}}],["draftparam",{"_index":3183,"title":{},"body":{"interfaces/OperationParam.html":{},"components/ParameterComponent.html":{},"classes/Params.html":{},"miscellaneous/typealiases.html":{}}}],["draftrow",{"_index":1931,"title":{},"body":{"interfaces/DraftOperationClassification.html":{},"interfaces/LoomConfig.html":{},"classes/PedalConfig.html":{},"injectables/PlayerService.html":{}}}],["draftrow.length",{"_index":1936,"title":{},"body":{"interfaces/DraftOperationClassification.html":{},"interfaces/LoomConfig.html":{},"classes/PedalConfig.html":{},"injectables/PlayerService.html":{}}}],["drafts",{"_index":69,"title":{},"body":{"classes/AbstractOpFactory.html":{},"classes/BaseOp.html":{},"classes/Branch.html":{},"classes/Bus.html":{},"interfaces/ChainOp.html":{},"interfaces/DraftMap.html":{},"interfaces/DraftNodeProxy.html":{},"components/DraftdetailComponent.html":{},"interfaces/DynamicOperation.html":{},"interfaces/FileObj.html":{},"interfaces/FileSaver.html":{},"interfaces/Fileloader.html":{},"interfaces/IOTuple.html":{},"interfaces/Interlacement.html":{},"interfaces/InterlacementVal.html":{},"interfaces/LoadResponse.html":{},"classes/Merge.html":{},"interfaces/NodeComponentProxy.html":{},"interfaces/OpClassifier.html":{},"interfaces/OpComponentProxy.html":{},"components/OpHelpModal.html":{},"interfaces/OpInput.html":{},"interfaces/OperationClassification.html":{},"interfaces/OperationParam.html":{},"interfaces/OperationProperties.html":{},"interfaces/PairedOp.html":{},"classes/Params.html":{},"interfaces/PedalEvent.html":{},"classes/Pipe.html":{},"interfaces/PlayerOp.html":{},"classes/Render.html":{},"interfaces/SaveObj.html":{},"classes/Seed.html":{},"classes/Shape-1.html":{},"interfaces/StatusMessage.html":{},"classes/System.html":{},"interfaces/TopologyDef.html":{},"interfaces/TreeNode.html":{},"interfaces/TreeNodeProxy.html":{},"interfaces/TreeOperation.html":{},"miscellaneous/functions.html":{},"index.html":{},"miscellaneous/typealiases.html":{}}}],["drafts.foreach(draft",{"_index":2052,"title":{},"body":{"components/DraftdetailComponent.html":{}}}],["drafts/color",{"_index":2301,"title":{},"body":{"components/ImageComponent.html":{}}}],["drafts_opt",{"_index":140,"title":{},"body":{"classes/AbstractOpFactory.html":{},"classes/BaseOp.html":{},"classes/Branch.html":{},"classes/Bus.html":{},"classes/Merge.html":{},"interfaces/OpClassifier.html":{},"interfaces/OperationProperties.html":{},"classes/Pipe.html":{},"classes/Seed.html":{},"interfaces/TopologyDef.html":{}}}],["draftsoptional",{"_index":10,"title":{},"body":{"classes/AbstractOpFactory.html":{},"classes/BaseOp.html":{},"classes/Branch.html":{},"classes/Bus.html":{},"interfaces/ChainOp.html":{},"interfaces/DraftOperationClassification.html":{},"interfaces/DynamicOperation.html":{},"interfaces/LoomConfig.html":{},"classes/Merge.html":{},"interfaces/OpClassifier.html":{},"interfaces/OpInput.html":{},"interfaces/OperationClassification.html":{},"interfaces/OperationProperties.html":{},"interfaces/PairedOp.html":{},"classes/PedalConfig.html":{},"interfaces/PedalEvent.html":{},"classes/Pipe.html":{},"interfaces/PlayerOp.html":{},"injectables/PlayerService.html":{},"classes/Seed.html":{},"interfaces/TopologyDef.html":{},"interfaces/TreeOperation.html":{},"miscellaneous/typealiases.html":{}}}],["draftsoptional(...args",{"_index":33,"title":{},"body":{"classes/AbstractOpFactory.html":{},"classes/BaseOp.html":{},"classes/Branch.html":{},"classes/Bus.html":{},"classes/Merge.html":{},"interfaces/OpClassifier.html":{},"interfaces/OperationProperties.html":{},"classes/Pipe.html":{},"classes/Seed.html":{},"interfaces/TopologyDef.html":{}}}],["draftsoptional(args",{"_index":30,"title":{},"body":{"classes/AbstractOpFactory.html":{},"classes/BaseOp.html":{},"classes/Branch.html":{},"classes/Bus.html":{},"classes/Merge.html":{},"interfaces/OpClassifier.html":{},"interfaces/OperationProperties.html":{},"classes/Pipe.html":{},"classes/Seed.html":{},"interfaces/TopologyDef.html":{}}}],["draftsoptionalperform",{"_index":172,"title":{},"body":{"classes/AbstractOpFactory.html":{},"classes/BaseOp.html":{},"classes/Branch.html":{},"classes/Bus.html":{},"classes/Merge.html":{},"interfaces/OpClassifier.html":{},"interfaces/OperationProperties.html":{},"classes/Pipe.html":{},"classes/Seed.html":{},"interfaces/TopologyDef.html":{},"miscellaneous/typealiases.html":{}}}],["drafttiling",{"_index":1694,"title":{},"body":{"interfaces/DraftOperationClassification.html":{},"interfaces/LoomConfig.html":{},"classes/PedalConfig.html":{},"injectables/PlayerService.html":{}}}],["drag",{"_index":2947,"title":{},"body":{"components/NoteComponent.html":{}}}],["dragend",{"_index":2719,"title":{},"body":{"components/MixerViewComponent.html":{}}}],["dragend($event",{"_index":2735,"title":{},"body":{"components/MixerViewComponent.html":{}}}],["draggable",{"_index":2765,"title":{},"body":{"components/MixerViewComponent.html":{}}}],["dragging",{"_index":2818,"title":{},"body":{"components/MixerViewComponent.html":{},"components/NoteComponent.html":{}}}],["dragmove",{"_index":2720,"title":{},"body":{"components/MixerViewComponent.html":{},"components/NoteComponent.html":{}}}],["dragmove($event",{"_index":2737,"title":{},"body":{"components/MixerViewComponent.html":{},"components/NoteComponent.html":{}}}],["dragstart",{"_index":2721,"title":{},"body":{"components/MixerViewComponent.html":{}}}],["dragstart($event",{"_index":2739,"title":{},"body":{"components/MixerViewComponent.html":{}}}],["draw",{"_index":887,"title":{},"body":{"interfaces/Crossing.html":{},"components/NoteComponent.html":{},"interfaces/Vertex.html":{},"components/WeavingStateComponent.html":{},"interfaces/YarnPath.html":{}}}],["drawcell",{"_index":4291,"title":{},"body":{"components/WeavingStateComponent.html":{}}}],["drawcell(cell_size",{"_index":4296,"title":{},"body":{"components/WeavingStateComponent.html":{}}}],["drawconnection",{"_index":650,"title":{},"body":{"components/ConnectionComponent.html":{}}}],["drawdown",{"_index":1573,"title":{},"body":{"interfaces/DesignActions.html":{},"interfaces/DraftMap.html":{},"components/DraftdetailComponent.html":{},"interfaces/Interlacement.html":{},"interfaces/InterlacementVal.html":{},"index.html":{},"miscellaneous/typealiases.html":{}}}],["drawdown/interlacement",{"_index":1602,"title":{},"body":{"interfaces/DraftMap.html":{},"interfaces/Interlacement.html":{},"interfaces/InterlacementVal.html":{}}}],["drawdown_editing_style",{"_index":2028,"title":{},"body":{"components/DraftdetailComponent.html":{}}}],["drawdraft",{"_index":3620,"title":{},"body":{"components/PlayerComponent.html":{},"components/WeavingStateComponent.html":{}}}],["drawdraft(flipy",{"_index":4300,"title":{},"body":{"components/WeavingStateComponent.html":{}}}],["drawer",{"_index":2098,"title":{},"body":{"components/DraftdetailComponent.html":{},"components/PlayerComponent.html":{},"components/WeavingStateComponent.html":{}}}],["drawforprint",{"_index":651,"title":{},"body":{"components/ConnectionComponent.html":{},"components/NoteComponent.html":{}}}],["drawforprint(canvas",{"_index":669,"title":{},"body":{"components/ConnectionComponent.html":{},"components/NoteComponent.html":{}}}],["drawing",{"_index":3745,"title":{},"body":{"interfaces/Point.html":{}}}],["drawn",{"_index":2498,"title":{},"body":{"injectables/LayersService.html":{}}}],["drawprogressbar",{"_index":4292,"title":{},"body":{"components/WeavingStateComponent.html":{}}}],["drawprogressbar(cell_size",{"_index":4305,"title":{},"body":{"components/WeavingStateComponent.html":{}}}],["draws",{"_index":2309,"title":{},"body":{"interfaces/Ink.html":{},"injectables/InkService.html":{}}}],["drive",{"_index":4495,"title":{},"body":{"index.html":{}}}],["dropdown",{"_index":2247,"title":{},"body":{"interfaces/DynamicOperation.html":{},"interfaces/OpInput.html":{},"interfaces/OperationClassification.html":{},"interfaces/TreeOperation.html":{}}}],["ds",{"_index":2156,"title":{},"body":{"interfaces/DynamicOperation.html":{},"interfaces/OpInput.html":{},"interfaces/OperationClassification.html":{},"interfaces/TreeOperation.html":{}}}],["dst",{"_index":2606,"title":{},"body":{"injectables/MappingsService.html":{}}}],["duplicate",{"_index":2078,"title":{},"body":{"components/DraftdetailComponent.html":{}}}],["dx",{"_index":189,"title":{},"body":{"classes/AbstractOpFactory.html":{},"classes/BaseOp.html":{},"classes/Branch.html":{},"classes/Bus.html":{},"interfaces/ChainOp.html":{},"interfaces/DraftOperationClassification.html":{},"interfaces/DynamicOperation.html":{},"interfaces/Ink.html":{},"injectables/InkService.html":{},"components/InletComponent.html":{},"interfaces/LoomConfig.html":{},"classes/Merge.html":{},"interfaces/OpClassifier.html":{},"interfaces/OpInput.html":{},"interfaces/OperationClassification.html":{},"interfaces/OperationParam.html":{},"interfaces/OperationProperties.html":{},"interfaces/PairedOp.html":{},"classes/Params.html":{},"classes/PedalConfig.html":{},"interfaces/PedalEvent.html":{},"classes/Pipe.html":{},"interfaces/PlayerOp.html":{},"injectables/PlayerService.html":{},"classes/Seed.html":{},"interfaces/TopologyDef.html":{},"interfaces/TreeOperation.html":{}}}],["dyanmic",{"_index":2996,"title":{},"body":{"components/OpHelpModal.html":{}}}],["dynamic",{"_index":696,"title":{},"body":{"components/ConnectionComponent.html":{},"interfaces/DynamicOperation.html":{},"components/InletComponent.html":{},"interfaces/OpInput.html":{},"interfaces/OperationClassification.html":{},"interfaces/TreeOperation.html":{},"dependencies.html":{}}}],["dynamic_param_id",{"_index":2131,"title":{},"body":{"interfaces/DynamicOperation.html":{},"components/OpHelpModal.html":{},"interfaces/OpInput.html":{},"interfaces/OperationClassification.html":{},"interfaces/TreeOperation.html":{}}}],["dynamic_param_name",{"_index":2962,"title":{},"body":{"components/OpHelpModal.html":{}}}],["dynamic_param_type",{"_index":2132,"title":{},"body":{"interfaces/DynamicOperation.html":{},"interfaces/OpInput.html":{},"interfaces/OperationClassification.html":{},"interfaces/TreeOperation.html":{}}}],["dynamic_type",{"_index":2963,"title":{},"body":{"components/OpHelpModal.html":{}}}],["dynamically",{"_index":2242,"title":{},"body":{"interfaces/DynamicOperation.html":{},"interfaces/OpInput.html":{},"interfaces/OperationClassification.html":{},"interfaces/TreeOperation.html":{}}}],["dynamicoperation",{"_index":2128,"title":{"interfaces/DynamicOperation.html":{}},"body":{"interfaces/DynamicOperation.html":{},"components/InletComponent.html":{},"components/OpHelpModal.html":{},"interfaces/OpInput.html":{},"interfaces/OperationClassification.html":{},"interfaces/TreeOperation.html":{},"miscellaneous/typealiases.html":{}}}],["e",{"_index":1903,"title":{},"body":{"interfaces/DraftOperationClassification.html":{},"interfaces/LoomConfig.html":{},"components/MixerViewComponent.html":{},"interfaces/Pedal.html":{},"classes/PedalConfig.html":{},"classes/PedalStatus.html":{},"injectables/PedalsService.html":{},"injectables/PlayerService.html":{}}}],["e.g",{"_index":1443,"title":{},"body":{"interfaces/DesignActions.html":{},"interfaces/DynamicOperation.html":{},"components/NoteComponent.html":{},"interfaces/OpInput.html":{},"interfaces/OperationClassification.html":{},"interfaces/TreeOperation.html":{},"index.html":{}}}],["e.id",{"_index":3465,"title":{},"body":{"interfaces/Pedal.html":{},"classes/PedalStatus.html":{},"injectables/PedalsService.html":{}}}],["e.source",{"_index":2799,"title":{},"body":{"components/MixerViewComponent.html":{}}}],["e.val",{"_index":3464,"title":{},"body":{"interfaces/Pedal.html":{},"classes/PedalStatus.html":{},"injectables/PedalsService.html":{}}}],["e.value",{"_index":2800,"title":{},"body":{"components/MixerViewComponent.html":{}}}],["each",{"_index":424,"title":{},"body":{"interfaces/ChainIndex.html":{},"interfaces/ChainOp.html":{},"classes/DBListener.html":{},"classes/DBListenerArray.html":{},"classes/DBNode.html":{},"classes/DBNodeArray.html":{},"classes/DBTwoWay.html":{},"classes/DBTwoWayArray.html":{},"classes/DBWriteBuffer.html":{},"classes/DBWriter.html":{},"classes/DBWriterArray.html":{},"interfaces/DesignActions.html":{},"interfaces/DraftNodeProxy.html":{},"interfaces/FileObj.html":{},"interfaces/FileSaver.html":{},"interfaces/Fileloader.html":{},"interfaces/IOTuple.html":{},"interfaces/LoadResponse.html":{},"components/MixerViewComponent.html":{},"interfaces/NodeComponentProxy.html":{},"interfaces/NodeMethods.html":{},"interfaces/NodeParams.html":{},"components/NoteComponent.html":{},"classes/OnlineStatus.html":{},"interfaces/OpComponentProxy.html":{},"components/OpHelpModal.html":{},"interfaces/PairedOp.html":{},"components/ParameterComponent.html":{},"interfaces/PedalEvent.html":{},"interfaces/PlayerOp.html":{},"interfaces/SaveObj.html":{},"injectables/SequencerService.html":{},"classes/Shape.html":{},"classes/Shape-1.html":{},"interfaces/StatusMessage.html":{},"classes/System.html":{},"interfaces/TreeNode.html":{},"interfaces/TreeNodeProxy.html":{},"miscellaneous/functions.html":{},"index.html":{},"miscellaneous/typealiases.html":{}}}],["easily",{"_index":1645,"title":{},"body":{"interfaces/DraftNodeProxy.html":{},"interfaces/FileObj.html":{},"interfaces/FileSaver.html":{},"interfaces/Fileloader.html":{},"interfaces/LoadResponse.html":{},"interfaces/NodeComponentProxy.html":{},"interfaces/OpComponentProxy.html":{},"interfaces/SaveObj.html":{},"interfaces/StatusMessage.html":{},"interfaces/TreeNodeProxy.html":{}}}],["east",{"_index":4650,"title":{},"body":{"miscellaneous/typealiases.html":{}}}],["easy",{"_index":1650,"title":{},"body":{"interfaces/DraftNodeProxy.html":{},"interfaces/FileObj.html":{},"interfaces/FileSaver.html":{},"interfaces/Fileloader.html":{},"interfaces/LoadResponse.html":{},"interfaces/NodeComponentProxy.html":{},"interfaces/OpComponentProxy.html":{},"interfaces/SaveObj.html":{},"interfaces/StatusMessage.html":{},"interfaces/TreeNodeProxy.html":{},"index.html":{}}}],["eddle",{"_index":1507,"title":{},"body":{"interfaces/DesignActions.html":{}}}],["edge",{"_index":4652,"title":{},"body":{"miscellaneous/typealiases.html":{}}}],["editing",{"_index":2091,"title":{},"body":{"components/DraftdetailComponent.html":{},"index.html":{}}}],["el",{"_index":2151,"title":{},"body":{"interfaces/DynamicOperation.html":{},"components/MixerViewComponent.html":{},"interfaces/OpInput.html":{},"interfaces/OperationClassification.html":{},"components/OpsComponent.html":{},"classes/Render.html":{},"classes/System.html":{},"interfaces/TreeOperation.html":{},"injectables/ViewportService.html":{}}}],["el.displayname",{"_index":3249,"title":{},"body":{"components/OpsComponent.html":{}}}],["el.drafts",{"_index":2162,"title":{},"body":{"interfaces/DynamicOperation.html":{},"interfaces/OpInput.html":{},"interfaces/OperationClassification.html":{},"interfaces/TreeOperation.html":{}}}],["el.drafts).reduce((acc",{"_index":2155,"title":{},"body":{"interfaces/DynamicOperation.html":{},"interfaces/OpInput.html":{},"interfaces/OperationClassification.html":{},"interfaces/TreeOperation.html":{}}}],["el.i",{"_index":4239,"title":{},"body":{"injectables/ViewportService.html":{}}}],["el.id",{"_index":2437,"title":{},"body":{"components/InletComponent.html":{},"interfaces/Pedal.html":{},"classes/PedalStatus.html":{},"injectables/PedalsService.html":{},"injectables/ViewportService.html":{}}}],["el.inlet",{"_index":2159,"title":{},"body":{"interfaces/DynamicOperation.html":{},"interfaces/OpInput.html":{},"interfaces/OperationClassification.html":{},"interfaces/TreeOperation.html":{}}}],["el.length",{"_index":4171,"title":{},"body":{"classes/System.html":{}}}],["el.name",{"_index":2436,"title":{},"body":{"components/InletComponent.html":{},"components/OpsComponent.html":{}}}],["el.op_name",{"_index":2200,"title":{},"body":{"interfaces/DynamicOperation.html":{},"interfaces/OpInput.html":{},"interfaces/OperationClassification.html":{},"interfaces/TreeOperation.html":{}}}],["el.params).reduce((acc",{"_index":2150,"title":{},"body":{"interfaces/DynamicOperation.html":{},"interfaces/OpInput.html":{},"interfaces/OperationClassification.html":{},"interfaces/TreeOperation.html":{}}}],["el.struct_id",{"_index":1887,"title":{},"body":{"interfaces/DraftOperationClassification.html":{},"interfaces/LoomConfig.html":{},"classes/PedalConfig.html":{},"injectables/PlayerService.html":{}}}],["el.style.transform.split(/\\w",{"_index":2806,"title":{},"body":{"components/MixerViewComponent.html":{}}}],["el.value",{"_index":2175,"title":{},"body":{"interfaces/DynamicOperation.html":{},"interfaces/OpInput.html":{},"interfaces/OperationClassification.html":{},"interfaces/TreeOperation.html":{}}}],["element",{"_index":761,"title":{},"body":{"components/ConnectionComponent.html":{},"interfaces/DesignActions.html":{},"components/DraftdetailComponent.html":{},"components/ImageComponent.html":{},"components/InletComponent.html":{},"components/MixerViewComponent.html":{},"components/NoteComponent.html":{},"components/OpHelpModal.html":{},"components/OpSequencerComponent.html":{},"components/OpsComponent.html":{},"components/ParameterComponent.html":{},"components/PlayerComponent.html":{},"classes/Shape.html":{},"classes/Shape-1.html":{},"components/SnackbarComponent.html":{},"injectables/ViewportService.html":{},"components/VirtualPedalsComponent.html":{},"components/WeavingStateComponent.html":{}}}],["element.offsetleft",{"_index":765,"title":{},"body":{"components/ConnectionComponent.html":{}}}],["elementref",{"_index":1289,"title":{},"body":{"interfaces/DesignActions.html":{}}}],["elements",{"_index":2497,"title":{},"body":{"injectables/LayersService.html":{},"classes/Shape-1.html":{},"index.html":{}}}],["elsewhere",{"_index":1094,"title":{},"body":{"classes/DBListener.html":{},"classes/DBListenerArray.html":{},"classes/DBNode.html":{},"classes/DBNodeArray.html":{},"classes/DBTwoWay.html":{},"classes/DBTwoWayArray.html":{},"classes/DBWriteBuffer.html":{},"classes/DBWriter.html":{},"classes/DBWriterArray.html":{},"interfaces/NodeMethods.html":{},"interfaces/NodeParams.html":{},"classes/OnlineStatus.html":{}}}],["emit",{"_index":922,"title":{},"body":{"classes/DBListener.html":{},"classes/DBListenerArray.html":{},"classes/DBNode.html":{},"classes/DBNodeArray.html":{},"classes/DBTwoWay.html":{},"classes/DBTwoWayArray.html":{},"classes/DBWriteBuffer.html":{},"classes/DBWriter.html":{},"classes/DBWriterArray.html":{},"interfaces/NodeMethods.html":{},"interfaces/NodeParams.html":{},"classes/OnlineStatus.html":{}}}],["emitting",{"_index":997,"title":{},"body":{"classes/DBListener.html":{},"classes/DBListenerArray.html":{},"classes/DBNode.html":{},"classes/DBNodeArray.html":{},"classes/DBTwoWay.html":{},"classes/DBTwoWayArray.html":{},"classes/DBWriteBuffer.html":{},"classes/DBWriter.html":{},"classes/DBWriterArray.html":{},"interfaces/NodeMethods.html":{},"interfaces/NodeParams.html":{},"classes/OnlineStatus.html":{}}}],["enable",{"_index":3448,"title":{},"body":{"interfaces/Pedal.html":{},"classes/PedalStatus.html":{},"injectables/PedalsService.html":{}}}],["enabled",{"_index":746,"title":{},"body":{"components/ConnectionComponent.html":{}}}],["enabledrag",{"_index":652,"title":{},"body":{"components/ConnectionComponent.html":{}}}],["encodeuricomponent(out.json",{"_index":1538,"title":{},"body":{"interfaces/DesignActions.html":{}}}],["end",{"_index":1023,"title":{},"body":{"classes/DBListener.html":{},"classes/DBListenerArray.html":{},"classes/DBNode.html":{},"classes/DBNodeArray.html":{},"classes/DBTwoWay.html":{},"classes/DBTwoWayArray.html":{},"classes/DBWriteBuffer.html":{},"classes/DBWriter.html":{},"classes/DBWriterArray.html":{},"injectables/MappingsService.html":{},"interfaces/NodeMethods.html":{},"interfaces/NodeParams.html":{},"components/NoteComponent.html":{},"classes/OnlineStatus.html":{},"classes/Selection.html":{}}}],["endcol",{"_index":3933,"title":{},"body":{"classes/Shape.html":{}}}],["endlabel",{"_index":4039,"title":{},"body":{"classes/Shuttle.html":{}}}],["endposition.x",{"_index":1484,"title":{},"body":{"interfaces/DesignActions.html":{}}}],["endposition.y",{"_index":1486,"title":{},"body":{"interfaces/DesignActions.html":{}}}],["ends",{"_index":1127,"title":{},"body":{"classes/DBListener.html":{},"classes/DBListenerArray.html":{},"classes/DBNode.html":{},"classes/DBNodeArray.html":{},"classes/DBTwoWay.html":{},"classes/DBTwoWayArray.html":{},"classes/DBWriteBuffer.html":{},"classes/DBWriter.html":{},"classes/DBWriterArray.html":{},"components/DraftdetailComponent.html":{},"interfaces/NodeMethods.html":{},"interfaces/NodeParams.html":{},"classes/OnlineStatus.html":{},"interfaces/Pedal.html":{},"classes/PedalStatus.html":{},"injectables/PedalsService.html":{},"classes/Shape.html":{}}}],["enough",{"_index":4487,"title":{},"body":{"index.html":{}}}],["enter",{"_index":2255,"title":{},"body":{"interfaces/IOTuple.html":{},"interfaces/TreeNode.html":{}}}],["entered",{"_index":4638,"title":{},"body":{"miscellaneous/typealiases.html":{}}}],["entering",{"_index":2147,"title":{},"body":{"interfaces/DynamicOperation.html":{},"interfaces/OpInput.html":{},"interfaces/OperationClassification.html":{},"interfaces/TreeOperation.html":{}}}],["entire",{"_index":4585,"title":{},"body":{"index.html":{}}}],["entity",{"_index":4536,"title":{},"body":{"index.html":{}}}],["entries",{"_index":2567,"title":{},"body":{"injectables/MappingsService.html":{}}}],["entry",{"_index":2935,"title":{},"body":{"components/NoteComponent.html":{}}}],["ep10cm",{"_index":2084,"title":{},"body":{"components/DraftdetailComponent.html":{}}}],["epi",{"_index":2082,"title":{},"body":{"components/DraftdetailComponent.html":{}}}],["equal",{"_index":2312,"title":{},"body":{"interfaces/Ink.html":{},"injectables/InkService.html":{}}}],["erasing",{"_index":2318,"title":{},"body":{"interfaces/Ink.html":{},"injectables/InkService.html":{}}}],["err",{"_index":3352,"title":{},"body":{"components/ParameterComponent.html":{}}}],["error",{"_index":2118,"title":{},"body":{"components/DraftdetailComponent.html":{},"interfaces/OperationParam.html":{},"components/ParameterComponent.html":{},"classes/Params.html":{}}}],["etc",{"_index":4454,"title":{},"body":{"index.html":{}}}],["evenly",{"_index":4118,"title":{},"body":{"components/SnackbarComponent.html":{}}}],["event",{"_index":949,"title":{},"body":{"classes/DBListener.html":{},"classes/DBListenerArray.html":{},"classes/DBNode.html":{},"classes/DBNodeArray.html":{},"classes/DBTwoWay.html":{},"classes/DBTwoWayArray.html":{},"classes/DBWriteBuffer.html":{},"classes/DBWriter.html":{},"classes/DBWriterArray.html":{},"components/DraftdetailComponent.html":{},"components/MixerViewComponent.html":{},"interfaces/NodeMethods.html":{},"interfaces/NodeParams.html":{},"components/NoteComponent.html":{},"classes/OnlineStatus.html":{},"components/OpsComponent.html":{},"interfaces/Pedal.html":{},"classes/PedalStatus.html":{},"injectables/PedalsService.html":{},"components/VirtualPedalsComponent.html":{}}}],["event.key",{"_index":4283,"title":{},"body":{"components/VirtualPedalsComponent.html":{}}}],["event.option.value",{"_index":3261,"title":{},"body":{"components/OpsComponent.html":{}}}],["event.pointerposition",{"_index":2826,"title":{},"body":{"components/MixerViewComponent.html":{},"components/NoteComponent.html":{}}}],["event.target",{"_index":2042,"title":{},"body":{"components/DraftdetailComponent.html":{}}}],["eventemitter",{"_index":964,"title":{},"body":{"classes/DBListener.html":{},"classes/DBListenerArray.html":{},"classes/DBNode.html":{},"classes/DBNodeArray.html":{},"classes/DBTwoWay.html":{},"classes/DBTwoWayArray.html":{},"classes/DBWriteBuffer.html":{},"classes/DBWriter.html":{},"classes/DBWriterArray.html":{},"interfaces/DesignActions.html":{},"interfaces/DraftOperationClassification.html":{},"components/InletComponent.html":{},"interfaces/LoomConfig.html":{},"components/MixerViewComponent.html":{},"interfaces/NodeMethods.html":{},"interfaces/NodeParams.html":{},"components/NoteComponent.html":{},"classes/OnlineStatus.html":{},"components/OpsComponent.html":{},"components/ParameterComponent.html":{},"interfaces/Pedal.html":{},"classes/PedalConfig.html":{},"classes/PedalStatus.html":{},"injectables/PedalsService.html":{},"injectables/PlayerService.html":{}}}],["events",{"_index":923,"title":{},"body":{"classes/DBListener.html":{},"classes/DBListenerArray.html":{},"classes/DBNode.html":{},"classes/DBNodeArray.html":{},"classes/DBTwoWay.html":{},"classes/DBTwoWayArray.html":{},"classes/DBWriteBuffer.html":{},"classes/DBWriter.html":{},"classes/DBWriterArray.html":{},"interfaces/DraftOperationClassification.html":{},"interfaces/LoomConfig.html":{},"components/MixerViewComponent.html":{},"interfaces/NodeMethods.html":{},"interfaces/NodeParams.html":{},"components/NoteComponent.html":{},"classes/OnlineStatus.html":{},"interfaces/Pedal.html":{},"classes/PedalConfig.html":{},"classes/PedalStatus.html":{},"injectables/PedalsService.html":{},"injectables/PlayerService.html":{},"components/SnackbarComponent.html":{}}}],["everything",{"_index":193,"title":{},"body":{"classes/AbstractOpFactory.html":{},"classes/BaseOp.html":{},"classes/Branch.html":{},"classes/Bus.html":{},"interfaces/DynamicOperation.html":{},"classes/Merge.html":{},"interfaces/OpClassifier.html":{},"interfaces/OpInput.html":{},"interfaces/OperationClassification.html":{},"interfaces/OperationProperties.html":{},"interfaces/Pedal.html":{},"classes/PedalStatus.html":{},"injectables/PedalsService.html":{},"classes/Pipe.html":{},"classes/Seed.html":{},"interfaces/TopologyDef.html":{},"interfaces/TreeOperation.html":{}}}],["exactly",{"_index":113,"title":{},"body":{"classes/AbstractOpFactory.html":{},"classes/BaseOp.html":{},"classes/Branch.html":{},"classes/Bus.html":{},"classes/Merge.html":{},"interfaces/OpClassifier.html":{},"interfaces/OperationProperties.html":{},"classes/Pipe.html":{},"classes/Seed.html":{},"interfaces/TopologyDef.html":{}}}],["example",{"_index":546,"title":{},"body":{"interfaces/ChainOp.html":{},"interfaces/DraftMap.html":{},"interfaces/IOTuple.html":{},"interfaces/Interlacement.html":{},"interfaces/InterlacementVal.html":{},"interfaces/PairedOp.html":{},"interfaces/PedalEvent.html":{},"interfaces/PlayerOp.html":{},"interfaces/TreeNode.html":{},"miscellaneous/typealiases.html":{}}}],["execute",{"_index":596,"title":{},"body":{"interfaces/ChainOp.html":{},"interfaces/PairedOp.html":{},"interfaces/PedalEvent.html":{},"interfaces/PlayerOp.html":{}}}],["executes",{"_index":2168,"title":{},"body":{"interfaces/DynamicOperation.html":{},"interfaces/OpInput.html":{},"interfaces/OperationClassification.html":{},"interfaces/TreeOperation.html":{}}}],["existing",{"_index":3095,"title":{},"body":{"components/OpSequencerComponent.html":{},"miscellaneous/typealiases.html":{}}}],["exists",{"_index":1600,"title":{},"body":{"interfaces/DraftMap.html":{},"interfaces/DraftOperationClassification.html":{},"interfaces/Interlacement.html":{},"interfaces/InterlacementVal.html":{},"interfaces/LoomConfig.html":{},"classes/PedalConfig.html":{},"injectables/PlayerService.html":{}}}],["expand",{"_index":4597,"title":{},"body":{"index.html":{}}}],["expanded",{"_index":3136,"title":{},"body":{"components/OpSequencerComponent.html":{},"components/PlayerComponent.html":{},"components/WeavingStateComponent.html":{}}}],["expanded:focus",{"_index":3127,"title":{},"body":{"components/OpSequencerComponent.html":{},"components/PlayerComponent.html":{},"components/WeavingStateComponent.html":{}}}],["expanded:hover",{"_index":3134,"title":{},"body":{"components/OpSequencerComponent.html":{},"components/PlayerComponent.html":{},"components/WeavingStateComponent.html":{}}}],["expansion",{"_index":3124,"title":{},"body":{"components/OpSequencerComponent.html":{},"components/PlayerComponent.html":{},"components/WeavingStateComponent.html":{}}}],["expansionpanel",{"_index":3662,"title":{},"body":{"components/PlayerComponent.html":{}}}],["expansionpanel.close",{"_index":3664,"title":{},"body":{"components/PlayerComponent.html":{}}}],["expects",{"_index":1021,"title":{},"body":{"classes/DBListener.html":{},"classes/DBListenerArray.html":{},"classes/DBNode.html":{},"classes/DBNodeArray.html":{},"classes/DBTwoWay.html":{},"classes/DBTwoWayArray.html":{},"classes/DBWriteBuffer.html":{},"classes/DBWriter.html":{},"classes/DBWriterArray.html":{},"interfaces/NodeMethods.html":{},"interfaces/NodeParams.html":{},"classes/OnlineStatus.html":{}}}],["experimentation",{"_index":4465,"title":{},"body":{"index.html":{}}}],["explaining",{"_index":3168,"title":{},"body":{"interfaces/OperationParam.html":{},"classes/Params.html":{}}}],["export",{"_index":83,"title":{},"body":{"classes/AbstractOpFactory.html":{},"classes/BaseOp.html":{},"interfaces/Bounds.html":{},"classes/Branch.html":{},"classes/Bus.html":{},"classes/Cell.html":{},"interfaces/ChainIndex.html":{},"interfaces/ChainOp.html":{},"components/ConnectionComponent.html":{},"interfaces/Crossing.html":{},"classes/DBListener.html":{},"classes/DBListenerArray.html":{},"classes/DBNode.html":{},"classes/DBNodeArray.html":{},"classes/DBTwoWay.html":{},"classes/DBTwoWayArray.html":{},"classes/DBWriteBuffer.html":{},"classes/DBWriter.html":{},"classes/DBWriterArray.html":{},"interfaces/DensityUnits.html":{},"interfaces/DesignActions.html":{},"interfaces/DesignMode.html":{},"interfaces/DraftMap.html":{},"interfaces/DraftNodeProxy.html":{},"interfaces/DraftOperationClassification.html":{},"components/DraftdetailComponent.html":{},"interfaces/DynamicOperation.html":{},"interfaces/FileObj.html":{},"interfaces/FileSaver.html":{},"interfaces/Fileloader.html":{},"interfaces/IOTuple.html":{},"components/ImageComponent.html":{},"interfaces/Ink.html":{},"injectables/InkService.html":{},"components/InletComponent.html":{},"interfaces/Interlacement.html":{},"interfaces/InterlacementVal.html":{},"injectables/LayersService.html":{},"interfaces/LoadResponse.html":{},"interfaces/LoomConfig.html":{},"interfaces/LoomTypes.html":{},"injectables/MappingsService.html":{},"directives/MarqueeComponent.html":{},"interfaces/MaterialTypes.html":{},"classes/Merge.html":{},"modules/MixerModule.html":{},"components/MixerViewComponent.html":{},"interfaces/NodeComponentProxy.html":{},"interfaces/NodeMethods.html":{},"interfaces/NodeParams.html":{},"components/NoteComponent.html":{},"classes/OnlineStatus.html":{},"interfaces/OpClassifier.html":{},"interfaces/OpComponentProxy.html":{},"components/OpHelpModal.html":{},"interfaces/OpInput.html":{},"classes/OpSequencer.html":{},"components/OpSequencerComponent.html":{},"interfaces/OperationClassification.html":{},"interfaces/OperationParam.html":{},"interfaces/OperationProperties.html":{},"components/OpsComponent.html":{},"interfaces/PairedOp.html":{},"components/ParameterComponent.html":{},"classes/Params.html":{},"interfaces/Pedal.html":{},"classes/PedalConfig.html":{},"interfaces/PedalEvent.html":{},"classes/PedalStatus.html":{},"injectables/PedalsService.html":{},"classes/Pipe.html":{},"components/PlayerComponent.html":{},"modules/PlayerModule.html":{},"interfaces/PlayerOp.html":{},"injectables/PlayerService.html":{},"interfaces/PlayerState.html":{},"interfaces/PlayerState-1.html":{},"interfaces/Point.html":{},"classes/Render.html":{},"interfaces/SaveObj.html":{},"classes/Seed.html":{},"classes/Selection.html":{},"directives/SelectionComponent.html":{},"injectables/SequencerService.html":{},"classes/Shape.html":{},"classes/Shape-1.html":{},"classes/Shuttle.html":{},"components/SnackbarComponent.html":{},"interfaces/StatusMessage.html":{},"classes/System.html":{},"interfaces/TopologyDef.html":{},"interfaces/TreeNode.html":{},"interfaces/TreeNodeProxy.html":{},"interfaces/TreeOperation.html":{},"interfaces/Vertex.html":{},"interfaces/ViewModes.html":{},"injectables/ViewportService.html":{},"components/VirtualPedalsComponent.html":{},"interfaces/WeavingLog.html":{},"interfaces/WeavingPick.html":{},"interfaces/WeavingPick-1.html":{},"components/WeavingStateComponent.html":{},"interfaces/YarnPath.html":{}}}],["exports",{"_index":3690,"title":{},"body":{"modules/PlayerModule.html":{}}}],["extends",{"_index":209,"title":{},"body":{"classes/AbstractOpFactory.html":{},"classes/BaseOp.html":{},"classes/Branch.html":{},"classes/Bus.html":{},"interfaces/ChainIndex.html":{},"interfaces/ChainOp.html":{},"classes/DBListener.html":{},"classes/DBListenerArray.html":{},"classes/DBNode.html":{},"classes/DBNodeArray.html":{},"classes/DBTwoWay.html":{},"classes/DBTwoWayArray.html":{},"classes/DBWriteBuffer.html":{},"classes/DBWriter.html":{},"classes/DBWriterArray.html":{},"interfaces/DynamicOperation.html":{},"injectables/MappingsService.html":{},"classes/Merge.html":{},"interfaces/NodeMethods.html":{},"interfaces/NodeParams.html":{},"classes/OnlineStatus.html":{},"interfaces/OpClassifier.html":{},"interfaces/OpInput.html":{},"interfaces/OperationClassification.html":{},"interfaces/OperationProperties.html":{},"interfaces/PairedOp.html":{},"interfaces/Pedal.html":{},"interfaces/PedalEvent.html":{},"classes/PedalStatus.html":{},"injectables/PedalsService.html":{},"classes/Pipe.html":{},"interfaces/PlayerOp.html":{},"classes/Seed.html":{},"injectables/SequencerService.html":{},"interfaces/TopologyDef.html":{},"interfaces/TreeOperation.html":{}}}],["extension",{"_index":2279,"title":{},"body":{"interfaces/IOTuple.html":{},"interfaces/OperationParam.html":{},"classes/Params.html":{},"interfaces/TreeNode.html":{},"miscellaneous/typealiases.html":{}}}],["extra",{"_index":3159,"title":{},"body":{"interfaces/OperationParam.html":{},"classes/Params.html":{},"miscellaneous/typealiases.html":{}}}],["extract",{"_index":3187,"title":{},"body":{"interfaces/OperationParam.html":{},"classes/Params.html":{},"miscellaneous/functions.html":{}}}],["f6ff00",{"_index":3114,"title":{},"body":{"components/OpSequencerComponent.html":{}}}],["fa",{"_index":2314,"title":{},"body":{"interfaces/Ink.html":{},"injectables/InkService.html":{}}}],["factor",{"_index":2717,"title":{},"body":{"components/MixerViewComponent.html":{}}}],["factor:number",{"_index":2769,"title":{},"body":{"components/MixerViewComponent.html":{}}}],["factory",{"_index":271,"title":{},"body":{"classes/AbstractOpFactory.html":{},"classes/BaseOp.html":{},"classes/Branch.html":{},"classes/Bus.html":{},"classes/Merge.html":{},"interfaces/OpClassifier.html":{},"interfaces/OperationProperties.html":{},"classes/Pipe.html":{},"classes/Seed.html":{},"interfaces/TopologyDef.html":{}}}],["factory/typescript",{"_index":279,"title":{},"body":{"classes/AbstractOpFactory.html":{},"classes/BaseOp.html":{},"classes/Branch.html":{},"classes/Bus.html":{},"classes/Merge.html":{},"interfaces/OpClassifier.html":{},"interfaces/OperationProperties.html":{},"classes/Pipe.html":{},"classes/Seed.html":{},"interfaces/TopologyDef.html":{}}}],["fairly",{"_index":4484,"title":{},"body":{"index.html":{}}}],["false",{"_index":393,"title":{},"body":{"classes/Cell.html":{},"interfaces/ChainIndex.html":{},"classes/DBListener.html":{},"classes/DBListenerArray.html":{},"classes/DBNode.html":{},"classes/DBNodeArray.html":{},"classes/DBTwoWay.html":{},"classes/DBTwoWayArray.html":{},"classes/DBWriteBuffer.html":{},"classes/DBWriter.html":{},"classes/DBWriterArray.html":{},"interfaces/DesignActions.html":{},"interfaces/DraftOperationClassification.html":{},"components/DraftdetailComponent.html":{},"interfaces/Ink.html":{},"injectables/InkService.html":{},"interfaces/LoomConfig.html":{},"injectables/MappingsService.html":{},"directives/MarqueeComponent.html":{},"interfaces/NodeMethods.html":{},"interfaces/NodeParams.html":{},"classes/OnlineStatus.html":{},"classes/OpSequencer.html":{},"interfaces/OperationParam.html":{},"classes/Params.html":{},"interfaces/Pedal.html":{},"classes/PedalConfig.html":{},"classes/PedalStatus.html":{},"injectables/PedalsService.html":{},"components/PlayerComponent.html":{},"injectables/PlayerService.html":{},"interfaces/PlayerState.html":{},"interfaces/PlayerState-1.html":{},"directives/SelectionComponent.html":{},"injectables/SequencerService.html":{},"classes/Shuttle.html":{},"classes/System.html":{},"interfaces/WeavingLog.html":{},"interfaces/WeavingPick.html":{},"interfaces/WeavingPick-1.html":{},"components/WeavingStateComponent.html":{}}}],["falsestate",{"_index":3167,"title":{},"body":{"interfaces/OperationParam.html":{},"classes/Params.html":{}}}],["fancy",{"_index":65,"title":{},"body":{"classes/AbstractOpFactory.html":{},"classes/BaseOp.html":{},"classes/Branch.html":{},"classes/Bus.html":{},"classes/Merge.html":{},"interfaces/OpClassifier.html":{},"interfaces/OperationProperties.html":{},"classes/Pipe.html":{},"classes/Seed.html":{},"interfaces/TopologyDef.html":{},"miscellaneous/typealiases.html":{}}}],["far",{"_index":1617,"title":{},"body":{"interfaces/DraftMap.html":{},"interfaces/Ink.html":{},"injectables/InkService.html":{},"interfaces/Interlacement.html":{},"interfaces/InterlacementVal.html":{},"interfaces/PlayerState.html":{},"interfaces/PlayerState-1.html":{},"interfaces/WeavingLog.html":{},"interfaces/WeavingPick.html":{},"interfaces/WeavingPick-1.html":{}}}],["fas",{"_index":2313,"title":{},"body":{"interfaces/Ink.html":{},"injectables/InkService.html":{}}}],["fc",{"_index":2386,"title":{},"body":{"components/InletComponent.html":{},"components/ParameterComponent.html":{}}}],["fd6d9d",{"_index":3120,"title":{},"body":{"components/OpSequencerComponent.html":{},"components/PlayerComponent.html":{},"components/WeavingStateComponent.html":{}}}],["features",{"_index":4595,"title":{},"body":{"index.html":{}}}],["few",{"_index":4543,"title":{},"body":{"index.html":{}}}],["ff3860",{"_index":2120,"title":{},"body":{"components/DraftdetailComponent.html":{}}}],["ff4081",{"_index":793,"title":{},"body":{"components/ConnectionComponent.html":{},"components/MixerViewComponent.html":{},"components/NoteComponent.html":{},"components/OpSequencerComponent.html":{},"components/PlayerComponent.html":{},"components/VirtualPedalsComponent.html":{},"components/WeavingStateComponent.html":{}}}],["fff",{"_index":2490,"title":{},"body":{"components/InletComponent.html":{}}}],["ffffff",{"_index":3103,"title":{},"body":{"components/OpSequencerComponent.html":{},"components/PlayerComponent.html":{},"components/WeavingStateComponent.html":{}}}],["field",{"_index":3099,"title":{},"body":{"components/OpSequencerComponent.html":{},"components/OpsComponent.html":{},"components/WeavingStateComponent.html":{}}}],["fields",{"_index":224,"title":{},"body":{"classes/AbstractOpFactory.html":{},"classes/BaseOp.html":{},"classes/Branch.html":{},"classes/Bus.html":{},"classes/Merge.html":{},"interfaces/OpClassifier.html":{},"interfaces/OperationProperties.html":{},"classes/Pipe.html":{},"classes/Seed.html":{},"interfaces/TopologyDef.html":{}}}],["file",{"_index":5,"title":{},"body":{"classes/AbstractOpFactory.html":{},"classes/BaseOp.html":{},"interfaces/Bounds.html":{},"classes/Branch.html":{},"classes/Bus.html":{},"classes/Cell.html":{},"interfaces/ChainIndex.html":{},"interfaces/ChainOp.html":{},"components/ConnectionComponent.html":{},"interfaces/Crossing.html":{},"classes/DBListener.html":{},"classes/DBListenerArray.html":{},"classes/DBNode.html":{},"classes/DBNodeArray.html":{},"classes/DBTwoWay.html":{},"classes/DBTwoWayArray.html":{},"classes/DBWriteBuffer.html":{},"classes/DBWriter.html":{},"classes/DBWriterArray.html":{},"interfaces/DensityUnits.html":{},"interfaces/DesignActions.html":{},"interfaces/DesignMode.html":{},"interfaces/DraftMap.html":{},"interfaces/DraftNodeProxy.html":{},"interfaces/DraftOperationClassification.html":{},"components/DraftdetailComponent.html":{},"interfaces/DynamicOperation.html":{},"interfaces/FileObj.html":{},"interfaces/FileSaver.html":{},"interfaces/Fileloader.html":{},"interfaces/IOTuple.html":{},"components/ImageComponent.html":{},"interfaces/Ink.html":{},"injectables/InkService.html":{},"components/InletComponent.html":{},"interfaces/Interlacement.html":{},"interfaces/InterlacementVal.html":{},"injectables/LayersService.html":{},"interfaces/LoadResponse.html":{},"interfaces/LoomConfig.html":{},"interfaces/LoomTypes.html":{},"injectables/MappingsService.html":{},"directives/MarqueeComponent.html":{},"interfaces/MaterialTypes.html":{},"classes/Merge.html":{},"modules/MixerModule.html":{},"components/MixerViewComponent.html":{},"interfaces/NodeComponentProxy.html":{},"interfaces/NodeMethods.html":{},"interfaces/NodeParams.html":{},"components/NoteComponent.html":{},"classes/OnlineStatus.html":{},"interfaces/OpClassifier.html":{},"interfaces/OpComponentProxy.html":{},"components/OpHelpModal.html":{},"interfaces/OpInput.html":{},"classes/OpSequencer.html":{},"components/OpSequencerComponent.html":{},"interfaces/OperationClassification.html":{},"interfaces/OperationParam.html":{},"interfaces/OperationProperties.html":{},"components/OpsComponent.html":{},"interfaces/PairedOp.html":{},"components/ParameterComponent.html":{},"classes/Params.html":{},"interfaces/Pedal.html":{},"classes/PedalConfig.html":{},"interfaces/PedalEvent.html":{},"classes/PedalStatus.html":{},"injectables/PedalsService.html":{},"classes/Pipe.html":{},"components/PlayerComponent.html":{},"modules/PlayerModule.html":{},"interfaces/PlayerOp.html":{},"injectables/PlayerService.html":{},"interfaces/PlayerState.html":{},"interfaces/PlayerState-1.html":{},"interfaces/Point.html":{},"classes/Render.html":{},"interfaces/SaveObj.html":{},"classes/Seed.html":{},"classes/Selection.html":{},"directives/SelectionComponent.html":{},"injectables/SequencerService.html":{},"classes/Shape.html":{},"classes/Shape-1.html":{},"classes/Shuttle.html":{},"components/SnackbarComponent.html":{},"interfaces/StatusMessage.html":{},"classes/System.html":{},"interfaces/TopologyDef.html":{},"interfaces/TreeNode.html":{},"interfaces/TreeNodeProxy.html":{},"interfaces/TreeOperation.html":{},"interfaces/Vertex.html":{},"interfaces/ViewModes.html":{},"injectables/ViewportService.html":{},"components/VirtualPedalsComponent.html":{},"interfaces/WeavingLog.html":{},"interfaces/WeavingPick.html":{},"interfaces/WeavingPick-1.html":{},"components/WeavingStateComponent.html":{},"interfaces/YarnPath.html":{},"index.html":{},"miscellaneous/typealiases.html":{}}}],["fileloader",{"_index":1672,"title":{"interfaces/Fileloader.html":{}},"body":{"interfaces/DraftNodeProxy.html":{},"interfaces/FileObj.html":{},"interfaces/FileSaver.html":{},"interfaces/Fileloader.html":{},"interfaces/LoadResponse.html":{},"interfaces/NodeComponentProxy.html":{},"interfaces/OpComponentProxy.html":{},"interfaces/SaveObj.html":{},"interfaces/StatusMessage.html":{},"interfaces/TreeNodeProxy.html":{}}}],["filename",{"_index":1666,"title":{},"body":{"interfaces/DraftNodeProxy.html":{},"interfaces/FileObj.html":{},"interfaces/FileSaver.html":{},"interfaces/Fileloader.html":{},"interfaces/LoadResponse.html":{},"interfaces/NodeComponentProxy.html":{},"interfaces/OpComponentProxy.html":{},"interfaces/SaveObj.html":{},"interfaces/StatusMessage.html":{},"interfaces/TreeNodeProxy.html":{}}}],["fileobj",{"_index":1665,"title":{"interfaces/FileObj.html":{}},"body":{"interfaces/DraftNodeProxy.html":{},"interfaces/FileObj.html":{},"interfaces/FileSaver.html":{},"interfaces/Fileloader.html":{},"interfaces/LoadResponse.html":{},"interfaces/NodeComponentProxy.html":{},"interfaces/OpComponentProxy.html":{},"interfaces/SaveObj.html":{},"interfaces/StatusMessage.html":{},"interfaces/TreeNodeProxy.html":{}}}],["fileparam",{"_index":3182,"title":{},"body":{"interfaces/OperationParam.html":{},"components/ParameterComponent.html":{},"classes/Params.html":{},"miscellaneous/typealiases.html":{}}}],["files",{"_index":1643,"title":{},"body":{"interfaces/DraftNodeProxy.html":{},"interfaces/DynamicOperation.html":{},"interfaces/FileObj.html":{},"interfaces/FileSaver.html":{},"interfaces/Fileloader.html":{},"interfaces/LoadResponse.html":{},"interfaces/NodeComponentProxy.html":{},"interfaces/OpComponentProxy.html":{},"interfaces/OpInput.html":{},"interfaces/OperationClassification.html":{},"interfaces/SaveObj.html":{},"interfaces/StatusMessage.html":{},"interfaces/TreeNodeProxy.html":{},"interfaces/TreeOperation.html":{},"index.html":{}}}],["filesaver",{"_index":1674,"title":{"interfaces/FileSaver.html":{}},"body":{"interfaces/DraftNodeProxy.html":{},"interfaces/FileObj.html":{},"interfaces/FileSaver.html":{},"interfaces/Fileloader.html":{},"interfaces/LoadResponse.html":{},"interfaces/NodeComponentProxy.html":{},"interfaces/OpComponentProxy.html":{},"interfaces/SaveObj.html":{},"interfaces/StatusMessage.html":{},"interfaces/TreeNodeProxy.html":{}}}],["fileservice",{"_index":1305,"title":{},"body":{"interfaces/DesignActions.html":{}}}],["filled",{"_index":3999,"title":{},"body":{"classes/Shape-1.html":{}}}],["filling",{"_index":3932,"title":{},"body":{"classes/Shape.html":{}}}],["fills",{"_index":3956,"title":{},"body":{"classes/Shape.html":{}}}],["filter",{"_index":2655,"title":{},"body":{"directives/MarqueeComponent.html":{},"directives/SelectionComponent.html":{}}}],["filter(el",{"_index":3850,"title":{},"body":{"classes/Render.html":{}}}],["filteredoptions",{"_index":3211,"title":{},"body":{"components/OpsComponent.html":{}}}],["filtervalue",{"_index":3254,"title":{},"body":{"components/OpsComponent.html":{}}}],["finaldraft",{"_index":1926,"title":{},"body":{"interfaces/DraftOperationClassification.html":{},"interfaces/LoomConfig.html":{},"classes/PedalConfig.html":{},"injectables/PlayerService.html":{}}}],["finaldraft.perform(op",{"_index":1928,"title":{},"body":{"interfaces/DraftOperationClassification.html":{},"interfaces/LoomConfig.html":{},"classes/PedalConfig.html":{},"injectables/PlayerService.html":{}}}],["find",{"_index":2902,"title":{},"body":{"components/NoteComponent.html":{},"index.html":{}}}],["fine",{"_index":2070,"title":{},"body":{"components/DraftdetailComponent.html":{},"index.html":{}}}],["finetune",{"_index":1548,"title":{},"body":{"interfaces/DesignActions.html":{}}}],["firebase",{"_index":970,"title":{},"body":{"classes/DBListener.html":{},"classes/DBListenerArray.html":{},"classes/DBNode.html":{},"classes/DBNodeArray.html":{},"classes/DBTwoWay.html":{},"classes/DBTwoWayArray.html":{},"classes/DBWriteBuffer.html":{},"classes/DBWriter.html":{},"classes/DBWriterArray.html":{},"interfaces/NodeMethods.html":{},"interfaces/NodeParams.html":{},"classes/OnlineStatus.html":{},"interfaces/Pedal.html":{},"classes/PedalStatus.html":{},"injectables/PedalsService.html":{},"dependencies.html":{}}}],["firebase/database",{"_index":961,"title":{},"body":{"classes/DBListener.html":{},"classes/DBListenerArray.html":{},"classes/DBNode.html":{},"classes/DBNodeArray.html":{},"classes/DBTwoWay.html":{},"classes/DBTwoWayArray.html":{},"classes/DBWriteBuffer.html":{},"classes/DBWriter.html":{},"classes/DBWriterArray.html":{},"interfaces/NodeMethods.html":{},"interfaces/NodeParams.html":{},"classes/OnlineStatus.html":{},"interfaces/Pedal.html":{},"classes/PedalStatus.html":{},"injectables/PedalsService.html":{}}}],["first",{"_index":3681,"title":{},"body":{"components/PlayerComponent.html":{},"classes/Shape.html":{},"components/WeavingStateComponent.html":{},"miscellaneous/functions.html":{},"index.html":{}}}],["first_op",{"_index":1749,"title":{},"body":{"interfaces/DraftOperationClassification.html":{},"interfaces/LoomConfig.html":{},"injectables/MappingsService.html":{},"classes/PedalConfig.html":{},"injectables/PlayerService.html":{}}}],["flag",{"_index":1356,"title":{},"body":{"interfaces/DesignActions.html":{},"interfaces/OperationParam.html":{},"classes/Params.html":{},"index.html":{}}}],["flex",{"_index":2095,"title":{},"body":{"components/DraftdetailComponent.html":{},"components/InletComponent.html":{},"components/MixerViewComponent.html":{},"components/NoteComponent.html":{},"components/OpSequencerComponent.html":{},"components/OpsComponent.html":{},"components/ParameterComponent.html":{},"components/PlayerComponent.html":{},"components/SnackbarComponent.html":{},"components/VirtualPedalsComponent.html":{},"components/WeavingStateComponent.html":{}}}],["flipx",{"_index":1830,"title":{},"body":{"interfaces/DraftOperationClassification.html":{},"interfaces/LoomConfig.html":{},"classes/PedalConfig.html":{},"injectables/PlayerService.html":{}}}],["flipy",{"_index":1832,"title":{},"body":{"interfaces/DraftOperationClassification.html":{},"interfaces/LoomConfig.html":{},"classes/PedalConfig.html":{},"injectables/PlayerService.html":{},"components/WeavingStateComponent.html":{}}}],["float",{"_index":909,"title":{},"body":{"interfaces/Crossing.html":{},"interfaces/Vertex.html":{},"interfaces/YarnPath.html":{}}}],["floor",{"_index":4434,"title":{},"body":{"index.html":{}}}],["following",{"_index":4589,"title":{},"body":{"index.html":{}}}],["font",{"_index":2107,"title":{},"body":{"components/DraftdetailComponent.html":{},"components/MixerViewComponent.html":{},"components/NoteComponent.html":{},"components/OpHelpModal.html":{},"components/OpSequencerComponent.html":{},"components/OpsComponent.html":{},"components/ParameterComponent.html":{},"components/SnackbarComponent.html":{},"components/WeavingStateComponent.html":{}}}],["foor",{"_index":1360,"title":{},"body":{"interfaces/DesignActions.html":{}}}],["footer",{"_index":2122,"title":{},"body":{"components/DraftdetailComponent.html":{}}}],["for(let",{"_index":2440,"title":{},"body":{"components/InletComponent.html":{},"classes/Render.html":{},"classes/Shape-1.html":{}}}],["for_timeline:boolean",{"_index":1675,"title":{},"body":{"interfaces/DraftNodeProxy.html":{},"interfaces/FileObj.html":{},"interfaces/FileSaver.html":{},"interfaces/Fileloader.html":{},"interfaces/LoadResponse.html":{},"interfaces/NodeComponentProxy.html":{},"interfaces/OpComponentProxy.html":{},"interfaces/SaveObj.html":{},"interfaces/StatusMessage.html":{},"interfaces/TreeNodeProxy.html":{}}}],["forbiddeninput",{"_index":3308,"title":{},"body":{"components/ParameterComponent.html":{}}}],["force",{"_index":1424,"title":{},"body":{"interfaces/DesignActions.html":{},"components/PlayerComponent.html":{}}}],["forever",{"_index":2271,"title":{},"body":{"interfaces/IOTuple.html":{},"interfaces/TreeNode.html":{}}}],["form",{"_index":74,"title":{},"body":{"classes/AbstractOpFactory.html":{},"classes/BaseOp.html":{},"classes/Branch.html":{},"classes/Bus.html":{},"classes/Cell.html":{},"interfaces/Crossing.html":{},"interfaces/DraftNodeProxy.html":{},"interfaces/FileObj.html":{},"interfaces/FileSaver.html":{},"interfaces/Fileloader.html":{},"interfaces/LoadResponse.html":{},"classes/Merge.html":{},"interfaces/NodeComponentProxy.html":{},"interfaces/OpClassifier.html":{},"interfaces/OpComponentProxy.html":{},"interfaces/OperationProperties.html":{},"components/OpsComponent.html":{},"components/ParameterComponent.html":{},"classes/Pipe.html":{},"interfaces/SaveObj.html":{},"classes/Seed.html":{},"interfaces/StatusMessage.html":{},"interfaces/TopologyDef.html":{},"interfaces/TreeNodeProxy.html":{},"interfaces/Vertex.html":{},"components/WeavingStateComponent.html":{},"interfaces/YarnPath.html":{},"miscellaneous/typealiases.html":{}}}],["format",{"_index":2137,"title":{},"body":{"interfaces/DynamicOperation.html":{},"interfaces/OpInput.html":{},"interfaces/OperationClassification.html":{},"interfaces/TreeOperation.html":{}}}],["formatname",{"_index":4396,"title":{},"body":{"miscellaneous/functions.html":{}}}],["formatname(drafts",{"_index":4415,"title":{},"body":{"miscellaneous/functions.html":{}}}],["formatted",{"_index":3337,"title":{},"body":{"components/ParameterComponent.html":{}}}],["formatting",{"_index":3564,"title":{},"body":{"injectables/PedalsService.html":{}}}],["formcontrol",{"_index":2418,"title":{},"body":{"components/InletComponent.html":{},"components/OpsComponent.html":{},"components/ParameterComponent.html":{}}}],["formcontrol(this.draftparam.value",{"_index":3324,"title":{},"body":{"components/ParameterComponent.html":{}}}],["formcontrol(this.param.value",{"_index":3315,"title":{},"body":{"components/ParameterComponent.html":{}}}],["formcontrol(this.parsedefaultinletvalue(this.inlet.type",{"_index":2450,"title":{},"body":{"components/InletComponent.html":{}}}],["formcontrol(this.stringparam.value",{"_index":3320,"title":{},"body":{"components/ParameterComponent.html":{}}}],["formgroupdirective",{"_index":2425,"title":{},"body":{"components/InletComponent.html":{},"components/ParameterComponent.html":{}}}],["fortawesome/fontawesome",{"_index":4356,"title":{},"body":{"dependencies.html":{}}}],["forward",{"_index":522,"title":{},"body":{"interfaces/ChainOp.html":{},"interfaces/DraftOperationClassification.html":{},"interfaces/LoomConfig.html":{},"classes/OpSequencer.html":{},"interfaces/PairedOp.html":{},"classes/PedalConfig.html":{},"interfaces/PedalEvent.html":{},"interfaces/PlayerOp.html":{},"injectables/PlayerService.html":{}}}],["forward.perform(res",{"_index":3075,"title":{},"body":{"classes/OpSequencer.html":{}}}],["found",{"_index":2343,"title":{},"body":{"interfaces/Ink.html":{},"injectables/InkService.html":{}}}],["frames",{"_index":2085,"title":{},"body":{"components/DraftdetailComponent.html":{}}}],["framework",{"_index":4472,"title":{},"body":{"index.html":{}}}],["free",{"_index":4357,"title":{},"body":{"dependencies.html":{}}}],["freeform",{"_index":4464,"title":{},"body":{"index.html":{}}}],["frequently",{"_index":1372,"title":{},"body":{"interfaces/DesignActions.html":{}}}],["from.bounds.topleft.x",{"_index":776,"title":{},"body":{"components/ConnectionComponent.html":{}}}],["from.bounds.topleft.y",{"_index":778,"title":{},"body":{"components/ConnectionComponent.html":{}}}],["from.id",{"_index":770,"title":{},"body":{"components/ConnectionComponent.html":{}}}],["from_comp",{"_index":807,"title":{},"body":{"components/ConnectionComponent.html":{}}}],["from_comp.bounds.height",{"_index":813,"title":{},"body":{"components/ConnectionComponent.html":{}}}],["from_comp.bounds.topleft.x",{"_index":811,"title":{},"body":{"components/ConnectionComponent.html":{}}}],["from_comp.bounds.topleft.y",{"_index":812,"title":{},"body":{"components/ConnectionComponent.html":{}}}],["from_io",{"_index":721,"title":{},"body":{"components/ConnectionComponent.html":{}}}],["from_io.tn.node.id",{"_index":726,"title":{},"body":{"components/ConnectionComponent.html":{}}}],["front",{"_index":2499,"title":{},"body":{"injectables/LayersService.html":{}}}],["fs",{"_index":1393,"title":{},"body":{"interfaces/DesignActions.html":{}}}],["fsm",{"_index":3727,"title":{},"body":{"interfaces/PlayerState.html":{},"interfaces/PlayerState-1.html":{},"interfaces/WeavingLog.html":{},"interfaces/WeavingPick.html":{},"interfaces/WeavingPick-1.html":{}}}],["function",{"_index":66,"title":{},"body":{"classes/AbstractOpFactory.html":{},"classes/BaseOp.html":{},"classes/Branch.html":{},"classes/Bus.html":{},"interfaces/ChainOp.html":{},"interfaces/DraftOperationClassification.html":{},"interfaces/DynamicOperation.html":{},"interfaces/FileSaver.html":{},"interfaces/Fileloader.html":{},"interfaces/Ink.html":{},"injectables/InkService.html":{},"interfaces/LoomConfig.html":{},"injectables/MappingsService.html":{},"classes/Merge.html":{},"interfaces/OpClassifier.html":{},"components/OpHelpModal.html":{},"interfaces/OpInput.html":{},"classes/OpSequencer.html":{},"interfaces/OperationClassification.html":{},"interfaces/OperationParam.html":{},"interfaces/OperationProperties.html":{},"interfaces/PairedOp.html":{},"components/ParameterComponent.html":{},"classes/Params.html":{},"interfaces/Pedal.html":{},"classes/PedalConfig.html":{},"interfaces/PedalEvent.html":{},"classes/PedalStatus.html":{},"injectables/PedalsService.html":{},"classes/Pipe.html":{},"interfaces/PlayerOp.html":{},"injectables/PlayerService.html":{},"interfaces/PlayerState.html":{},"interfaces/PlayerState-1.html":{},"classes/Seed.html":{},"classes/System.html":{},"interfaces/TopologyDef.html":{},"interfaces/TreeOperation.html":{},"interfaces/WeavingLog.html":{},"interfaces/WeavingPick.html":{},"interfaces/WeavingPick-1.html":{},"miscellaneous/functions.html":{},"index.html":{},"miscellaneous/typealiases.html":{}}}],["function(init",{"_index":550,"title":{},"body":{"interfaces/ChainOp.html":{},"interfaces/PairedOp.html":{},"interfaces/PedalEvent.html":{},"interfaces/PlayerOp.html":{}}}],["functional/reactive",{"_index":4550,"title":{},"body":{"index.html":{}}}],["functionality",{"_index":4514,"title":{},"body":{"index.html":{}}}],["functions",{"_index":82,"title":{"miscellaneous/functions.html":{}},"body":{"classes/AbstractOpFactory.html":{},"classes/BaseOp.html":{},"classes/Branch.html":{},"classes/Bus.html":{},"classes/DBListener.html":{},"classes/DBListenerArray.html":{},"classes/DBNode.html":{},"classes/DBNodeArray.html":{},"classes/DBTwoWay.html":{},"classes/DBTwoWayArray.html":{},"classes/DBWriteBuffer.html":{},"classes/DBWriter.html":{},"classes/DBWriterArray.html":{},"interfaces/DesignActions.html":{},"interfaces/DraftNodeProxy.html":{},"components/DraftdetailComponent.html":{},"interfaces/DynamicOperation.html":{},"interfaces/FileObj.html":{},"interfaces/FileSaver.html":{},"interfaces/Fileloader.html":{},"interfaces/LoadResponse.html":{},"classes/Merge.html":{},"interfaces/NodeComponentProxy.html":{},"interfaces/NodeMethods.html":{},"interfaces/NodeParams.html":{},"classes/OnlineStatus.html":{},"interfaces/OpClassifier.html":{},"interfaces/OpComponentProxy.html":{},"interfaces/OpInput.html":{},"interfaces/OperationClassification.html":{},"interfaces/OperationParam.html":{},"interfaces/OperationProperties.html":{},"classes/Params.html":{},"interfaces/Pedal.html":{},"classes/PedalStatus.html":{},"injectables/PedalsService.html":{},"classes/Pipe.html":{},"interfaces/SaveObj.html":{},"classes/Seed.html":{},"classes/Shape.html":{},"classes/Shape-1.html":{},"interfaces/StatusMessage.html":{},"interfaces/TopologyDef.html":{},"interfaces/TreeNodeProxy.html":{},"interfaces/TreeOperation.html":{},"miscellaneous/functions.html":{},"index.html":{},"miscellaneous/typealiases.html":{}}}],["further",{"_index":4611,"title":{},"body":{"index.html":{}}}],["fwd",{"_index":468,"title":{},"body":{"interfaces/ChainIndex.html":{},"classes/OpSequencer.html":{},"injectables/SequencerService.html":{}}}],["fwd_pedal",{"_index":3906,"title":{},"body":{"injectables/SequencerService.html":{}}}],["g",{"_index":3175,"title":{},"body":{"interfaces/OperationParam.html":{},"components/ParameterComponent.html":{},"classes/Params.html":{}}}],["gap",{"_index":3111,"title":{},"body":{"components/OpSequencerComponent.html":{}}}],["gen_name",{"_index":1569,"title":{},"body":{"interfaces/DesignActions.html":{},"interfaces/DraftMap.html":{},"interfaces/Interlacement.html":{},"interfaces/InterlacementVal.html":{}}}],["generalizes",{"_index":1059,"title":{},"body":{"classes/DBListener.html":{},"classes/DBListenerArray.html":{},"classes/DBNode.html":{},"classes/DBNodeArray.html":{},"classes/DBTwoWay.html":{},"classes/DBTwoWayArray.html":{},"classes/DBWriteBuffer.html":{},"classes/DBWriter.html":{},"classes/DBWriterArray.html":{},"interfaces/NodeMethods.html":{},"interfaces/NodeParams.html":{},"classes/OnlineStatus.html":{}}}],["generate",{"_index":108,"title":{},"body":{"classes/AbstractOpFactory.html":{},"classes/BaseOp.html":{},"classes/Branch.html":{},"classes/Bus.html":{},"interfaces/DynamicOperation.html":{},"classes/Merge.html":{},"interfaces/OpClassifier.html":{},"interfaces/OpInput.html":{},"interfaces/OperationClassification.html":{},"interfaces/OperationProperties.html":{},"classes/Pipe.html":{},"components/PlayerComponent.html":{},"classes/Seed.html":{},"interfaces/TopologyDef.html":{},"interfaces/TreeOperation.html":{},"index.html":{}}}],["generated",{"_index":1324,"title":{},"body":{"interfaces/DesignActions.html":{},"interfaces/DraftMap.html":{},"components/DraftdetailComponent.html":{},"interfaces/Interlacement.html":{},"interfaces/InterlacementVal.html":{},"components/NoteComponent.html":{},"index.html":{}}}],["generates",{"_index":116,"title":{},"body":{"classes/AbstractOpFactory.html":{},"classes/BaseOp.html":{},"classes/Branch.html":{},"classes/Bus.html":{},"interfaces/DraftOperationClassification.html":{},"interfaces/LoomConfig.html":{},"classes/Merge.html":{},"interfaces/OpClassifier.html":{},"components/OpHelpModal.html":{},"interfaces/OperationProperties.html":{},"classes/PedalConfig.html":{},"classes/Pipe.html":{},"injectables/PlayerService.html":{},"classes/Seed.html":{},"interfaces/TopologyDef.html":{}}}],["generative",{"_index":4456,"title":{},"body":{"index.html":{}}}],["generic",{"_index":159,"title":{},"body":{"classes/AbstractOpFactory.html":{},"classes/BaseOp.html":{},"classes/Branch.html":{},"classes/Bus.html":{},"interfaces/ChainIndex.html":{},"classes/Merge.html":{},"interfaces/OpClassifier.html":{},"interfaces/OperationProperties.html":{},"classes/Pipe.html":{},"classes/Seed.html":{},"injectables/SequencerService.html":{},"interfaces/TopologyDef.html":{},"miscellaneous/typealiases.html":{}}}],["genericop",{"_index":510,"title":{},"body":{"interfaces/ChainOp.html":{},"interfaces/DraftOperationClassification.html":{},"interfaces/DynamicOperation.html":{},"interfaces/LoomConfig.html":{},"interfaces/OpInput.html":{},"interfaces/OperationClassification.html":{},"interfaces/PairedOp.html":{},"classes/PedalConfig.html":{},"interfaces/PedalEvent.html":{},"interfaces/PlayerOp.html":{},"injectables/PlayerService.html":{},"interfaces/TreeOperation.html":{},"miscellaneous/functions.html":{}}}],["genericparam",{"_index":3184,"title":{},"body":{"interfaces/OperationParam.html":{},"classes/Params.html":{},"miscellaneous/typealiases.html":{}}}],["germanify",{"_index":1858,"title":{},"body":{"interfaces/DraftOperationClassification.html":{},"interfaces/LoomConfig.html":{},"classes/PedalConfig.html":{},"injectables/PlayerService.html":{}}}],["get(query(this.ref",{"_index":1008,"title":{},"body":{"classes/DBListener.html":{},"classes/DBListenerArray.html":{},"classes/DBNode.html":{},"classes/DBNodeArray.html":{},"classes/DBTwoWay.html":{},"classes/DBTwoWayArray.html":{},"classes/DBWriteBuffer.html":{},"classes/DBWriter.html":{},"classes/DBWriterArray.html":{},"interfaces/NodeMethods.html":{},"interfaces/NodeParams.html":{},"classes/OnlineStatus.html":{}}}],["getabsoluteheight",{"_index":4181,"title":{},"body":{"injectables/ViewportService.html":{}}}],["getabsolutewidth",{"_index":4182,"title":{},"body":{"injectables/ViewportService.html":{}}}],["getactive",{"_index":1192,"title":{},"body":{"classes/DBNode.html":{},"classes/DBNodeArray.html":{},"injectables/SequencerService.html":{}}}],["getactive_draft",{"_index":3590,"title":{},"body":{"injectables/PedalsService.html":{}}}],["getbounds",{"_index":4183,"title":{},"body":{"injectables/ViewportService.html":{}}}],["getcelldims",{"_index":3752,"title":{},"body":{"classes/Render.html":{}}}],["getcelldims(type",{"_index":3777,"title":{},"body":{"classes/Render.html":{}}}],["getcenterpoint",{"_index":4184,"title":{},"body":{"injectables/ViewportService.html":{}}}],["getchar",{"_index":4127,"title":{},"body":{"classes/System.html":{}}}],["getcolor",{"_index":4043,"title":{},"body":{"classes/Shuttle.html":{}}}],["getcurrent",{"_index":3054,"title":{},"body":{"classes/OpSequencer.html":{}}}],["getcurrentview",{"_index":3753,"title":{},"body":{"classes/Render.html":{}}}],["getcx",{"_index":2722,"title":{},"body":{"components/MixerViewComponent.html":{}}}],["getcx(obj",{"_index":2741,"title":{},"body":{"components/MixerViewComponent.html":{}}}],["getdatabase",{"_index":3371,"title":{},"body":{"interfaces/Pedal.html":{},"classes/PedalStatus.html":{},"injectables/PedalsService.html":{}}}],["getdefaultparams",{"_index":511,"title":{},"body":{"interfaces/ChainOp.html":{},"interfaces/DraftOperationClassification.html":{},"interfaces/LoomConfig.html":{},"interfaces/PairedOp.html":{},"classes/PedalConfig.html":{},"interfaces/PedalEvent.html":{},"interfaces/PlayerOp.html":{},"injectables/PlayerService.html":{},"miscellaneous/functions.html":{}}}],["getdefaultparams(base_op",{"_index":613,"title":{},"body":{"interfaces/ChainOp.html":{},"interfaces/PairedOp.html":{},"interfaces/PedalEvent.html":{},"interfaces/PlayerOp.html":{}}}],["getdefaultparams(op",{"_index":547,"title":{},"body":{"interfaces/ChainOp.html":{},"interfaces/DynamicOperation.html":{},"interfaces/OpInput.html":{},"interfaces/OperationClassification.html":{},"interfaces/PairedOp.html":{},"interfaces/PedalEvent.html":{},"interfaces/PlayerOp.html":{},"interfaces/TreeOperation.html":{},"miscellaneous/functions.html":{}}}],["getdraft",{"_index":3724,"title":{},"body":{"injectables/PlayerService.html":{},"classes/Shape-1.html":{}}}],["getdraftid",{"_index":2656,"title":{},"body":{"directives/MarqueeComponent.html":{},"directives/SelectionComponent.html":{}}}],["getdraftname",{"_index":1319,"title":{},"body":{"interfaces/DesignActions.html":{},"components/InletComponent.html":{}}}],["getdraftname(draft",{"_index":1528,"title":{},"body":{"interfaces/DesignActions.html":{}}}],["getdraftname(sd",{"_index":2463,"title":{},"body":{"components/InletComponent.html":{}}}],["getdraftsfrominputs",{"_index":4399,"title":{},"body":{"miscellaneous/functions.html":{}}}],["getdraftsfrominputs(inputs",{"_index":2154,"title":{},"body":{"interfaces/DynamicOperation.html":{},"interfaces/OpInput.html":{},"interfaces/OperationClassification.html":{},"interfaces/TreeOperation.html":{},"miscellaneous/functions.html":{}}}],["getdraftsfrominputs(op_inputs)[0",{"_index":2203,"title":{},"body":{"interfaces/DynamicOperation.html":{},"interfaces/OpInput.html":{},"interfaces/OperationClassification.html":{},"interfaces/TreeOperation.html":{}}}],["getfrontlayer",{"_index":2503,"title":{},"body":{"injectables/LayersService.html":{}}}],["getfrontlayer():number",{"_index":2509,"title":{},"body":{"injectables/LayersService.html":{}}}],["getheddle",{"_index":371,"title":{},"body":{"classes/Cell.html":{}}}],["getheddle():boolean",{"_index":418,"title":{},"body":{"classes/Cell.html":{}}}],["getheight",{"_index":3937,"title":{},"body":{"classes/Shape.html":{},"injectables/ViewportService.html":{}}}],["getid",{"_index":4044,"title":{},"body":{"classes/Shuttle.html":{}}}],["getimagedata",{"_index":4001,"title":{},"body":{"classes/Shape-1.html":{}}}],["getink",{"_index":2366,"title":{},"body":{"injectables/InkService.html":{}}}],["getink(name",{"_index":2344,"title":{},"body":{"interfaces/Ink.html":{},"injectables/InkService.html":{}}}],["getinks",{"_index":2367,"title":{},"body":{"injectables/InkService.html":{}}}],["getinks():array",{"_index":2336,"title":{},"body":{"interfaces/Ink.html":{},"injectables/InkService.html":{}}}],["getinletsfrominputs",{"_index":4400,"title":{},"body":{"miscellaneous/functions.html":{}}}],["getinletsfrominputs(inputs",{"_index":2158,"title":{},"body":{"interfaces/DynamicOperation.html":{},"interfaces/OpInput.html":{},"interfaces/OperationClassification.html":{},"interfaces/TreeOperation.html":{},"miscellaneous/functions.html":{}}}],["getinputname",{"_index":2390,"title":{},"body":{"components/InletComponent.html":{}}}],["getinputname(id",{"_index":2407,"title":{},"body":{"components/InletComponent.html":{}}}],["getinputname(input",{"_index":2473,"title":{},"body":{"components/InletComponent.html":{}}}],["getinterpolationdims(type",{"_index":3826,"title":{},"body":{"classes/Render.html":{}}}],["getismapped",{"_index":3050,"title":{},"body":{"classes/OpSequencer.html":{}}}],["getleft",{"_index":3853,"title":{},"body":{"classes/Selection.html":{}}}],["getlength",{"_index":1202,"title":{},"body":{"classes/DBNodeArray.html":{}}}],["getloom_online",{"_index":3586,"title":{},"body":{"injectables/PedalsService.html":{}}}],["getloom_ready",{"_index":3592,"title":{},"body":{"injectables/PedalsService.html":{}}}],["getmap",{"_index":2518,"title":{},"body":{"injectables/MappingsService.html":{}}}],["getmap(id",{"_index":2536,"title":{},"body":{"injectables/MappingsService.html":{}}}],["getmapoptions",{"_index":2519,"title":{},"body":{"injectables/MappingsService.html":{}}}],["getmapoptions(p",{"_index":2538,"title":{},"body":{"injectables/MappingsService.html":{}}}],["getmatrix",{"_index":2723,"title":{},"body":{"components/MixerViewComponent.html":{}}}],["getmatrix(el",{"_index":2744,"title":{},"body":{"components/MixerViewComponent.html":{}}}],["getname",{"_index":1187,"title":{},"body":{"classes/DBNode.html":{},"classes/Shuttle.html":{}}}],["getnextvisiblerow",{"_index":3754,"title":{},"body":{"classes/Render.html":{}}}],["getnextvisiblerow(ndx",{"_index":3780,"title":{},"body":{"classes/Render.html":{}}}],["getnow",{"_index":932,"title":{},"body":{"classes/DBListener.html":{},"classes/DBListenerArray.html":{},"classes/DBNode.html":{},"classes/DBNodeArray.html":{},"classes/DBTwoWay.html":{},"classes/DBTwoWayArray.html":{},"classes/DBWriteBuffer.html":{},"classes/DBWriter.html":{},"classes/DBWriterArray.html":{},"interfaces/NodeMethods.html":{},"interfaces/NodeParams.html":{},"classes/OnlineStatus.html":{}}}],["getnum_pedals",{"_index":3598,"title":{},"body":{"injectables/PedalsService.html":{}}}],["getnum_picks",{"_index":3594,"title":{},"body":{"injectables/PedalsService.html":{}}}],["getnum_v_pedals",{"_index":3604,"title":{},"body":{"injectables/PedalsService.html":{}}}],["getnummappings",{"_index":3530,"title":{},"body":{"classes/PedalConfig.html":{}}}],["getnumpedals",{"_index":3528,"title":{},"body":{"classes/PedalConfig.html":{}}}],["getoffset",{"_index":3755,"title":{},"body":{"classes/Render.html":{}}}],["getoffset(type",{"_index":3782,"title":{},"body":{"classes/Render.html":{}}}],["getop",{"_index":2520,"title":{},"body":{"injectables/MappingsService.html":{}}}],["getop(name",{"_index":2540,"title":{},"body":{"injectables/MappingsService.html":{}}}],["getp_pedal_array",{"_index":3602,"title":{},"body":{"injectables/PedalsService.html":{}}}],["getparamsfrominputs",{"_index":4401,"title":{},"body":{"miscellaneous/functions.html":{}}}],["getparamsfrominputs(inputs",{"_index":2148,"title":{},"body":{"interfaces/DynamicOperation.html":{},"interfaces/OpInput.html":{},"interfaces/OperationClassification.html":{},"interfaces/TreeOperation.html":{},"miscellaneous/functions.html":{}}}],["getparamsfrominputs(op_inputs",{"_index":2231,"title":{},"body":{"interfaces/DynamicOperation.html":{},"interfaces/OpInput.html":{},"interfaces/OperationClassification.html":{},"interfaces/TreeOperation.html":{}}}],["getparamvalues",{"_index":56,"title":{},"body":{"classes/AbstractOpFactory.html":{},"classes/BaseOp.html":{},"classes/Branch.html":{},"classes/Bus.html":{},"classes/Merge.html":{},"interfaces/OpClassifier.html":{},"interfaces/OperationProperties.html":{},"classes/Pipe.html":{},"classes/Seed.html":{},"interfaces/TopologyDef.html":{},"miscellaneous/functions.html":{}}}],["getparamvalues(input",{"_index":3190,"title":{},"body":{"interfaces/OperationParam.html":{},"classes/Params.html":{},"miscellaneous/functions.html":{}}}],["getparamvalues(params",{"_index":256,"title":{},"body":{"classes/AbstractOpFactory.html":{},"classes/BaseOp.html":{},"classes/Branch.html":{},"classes/Bus.html":{},"classes/Merge.html":{},"interfaces/OpClassifier.html":{},"interfaces/OperationProperties.html":{},"classes/Pipe.html":{},"classes/Seed.html":{},"interfaces/TopologyDef.html":{}}}],["getpedal_states",{"_index":3600,"title":{},"body":{"injectables/PedalsService.html":{}}}],["getpedals",{"_index":3583,"title":{},"body":{"injectables/PedalsService.html":{}}}],["getpi_online",{"_index":3584,"title":{},"body":{"injectables/PedalsService.html":{}}}],["getpick_data",{"_index":3596,"title":{},"body":{"injectables/PedalsService.html":{}}}],["getpos",{"_index":3927,"title":{},"body":{"injectables/SequencerService.html":{},"classes/Shape.html":{}}}],["getready",{"_index":1205,"title":{},"body":{"classes/DBNodeArray.html":{}}}],["getreadytoweave",{"_index":3052,"title":{},"body":{"classes/OpSequencer.html":{},"injectables/PedalsService.html":{},"injectables/PlayerService.html":{}}}],["getref",{"_index":1185,"title":{},"body":{"classes/DBNode.html":{}}}],["gets",{"_index":2253,"title":{},"body":{"interfaces/IOTuple.html":{},"classes/OpSequencer.html":{},"interfaces/TreeNode.html":{},"injectables/ViewportService.html":{}}}],["getscale",{"_index":2892,"title":{},"body":{"components/NoteComponent.html":{}}}],["getselected",{"_index":2368,"title":{},"body":{"injectables/InkService.html":{}}}],["getselected():string",{"_index":2359,"title":{},"body":{"interfaces/Ink.html":{},"injectables/InkService.html":{}}}],["getsequencer",{"_index":2558,"title":{},"body":{"injectables/MappingsService.html":{}}}],["gettarget",{"_index":3854,"title":{},"body":{"classes/Selection.html":{}}}],["gettargetid",{"_index":3855,"title":{},"body":{"classes/Selection.html":{}}}],["gettextinterval",{"_index":3756,"title":{},"body":{"classes/Render.html":{}}}],["getthickness",{"_index":4045,"title":{},"body":{"classes/Shuttle.html":{}}}],["getting",{"_index":4423,"title":{"index.html":{}},"body":{}}],["gettop",{"_index":3856,"title":{},"body":{"classes/Selection.html":{}}}],["gettopleft",{"_index":4185,"title":{},"body":{"injectables/ViewportService.html":{}}}],["gettype",{"_index":4046,"title":{},"body":{"classes/Shuttle.html":{}}}],["getv_pedal_array",{"_index":3608,"title":{},"body":{"injectables/PedalsService.html":{}}}],["getv_pedal_states",{"_index":3606,"title":{},"body":{"injectables/PedalsService.html":{}}}],["getvacuum_on",{"_index":3588,"title":{},"body":{"injectables/PedalsService.html":{}}}],["getval",{"_index":1189,"title":{},"body":{"classes/DBNode.html":{}}}],["getweaving",{"_index":3722,"title":{},"body":{"injectables/PlayerService.html":{}}}],["getwidth",{"_index":3938,"title":{},"body":{"classes/Shape.html":{},"injectables/ViewportService.html":{}}}],["getzoom",{"_index":3757,"title":{},"body":{"classes/Render.html":{}}}],["give",{"_index":215,"title":{},"body":{"classes/AbstractOpFactory.html":{},"classes/BaseOp.html":{},"classes/Branch.html":{},"classes/Bus.html":{},"interfaces/ChainOp.html":{},"classes/Merge.html":{},"interfaces/OpClassifier.html":{},"interfaces/OperationProperties.html":{},"interfaces/PairedOp.html":{},"interfaces/PedalEvent.html":{},"classes/Pipe.html":{},"interfaces/PlayerOp.html":{},"classes/Seed.html":{},"interfaces/TopologyDef.html":{}}}],["given",{"_index":358,"title":{},"body":{"interfaces/Bounds.html":{},"interfaces/DraftMap.html":{},"interfaces/Interlacement.html":{},"interfaces/InterlacementVal.html":{},"interfaces/Point.html":{},"classes/Render.html":{},"classes/Shape.html":{},"index.html":{},"miscellaneous/typealiases.html":{}}}],["global",{"_index":1458,"title":{},"body":{"interfaces/DesignActions.html":{},"interfaces/DraftOperationClassification.html":{},"interfaces/LoomConfig.html":{},"components/MixerViewComponent.html":{},"interfaces/OperationParam.html":{},"classes/Params.html":{},"classes/PedalConfig.html":{},"injectables/PlayerService.html":{}}}],["global.offsetleft",{"_index":2816,"title":{},"body":{"components/MixerViewComponent.html":{}}}],["global.offsetparent",{"_index":2819,"title":{},"body":{"components/MixerViewComponent.html":{}}}],["global.offsettop",{"_index":2817,"title":{},"body":{"components/MixerViewComponent.html":{}}}],["global_view",{"_index":2843,"title":{},"body":{"components/MixerViewComponent.html":{}}}],["globaloffset",{"_index":2815,"title":{},"body":{"components/MixerViewComponent.html":{}}}],["globaloffset.x",{"_index":2830,"title":{},"body":{"components/MixerViewComponent.html":{}}}],["globaloffset.y",{"_index":2834,"title":{},"body":{"components/MixerViewComponent.html":{}}}],["globalregex",{"_index":3304,"title":{},"body":{"components/ParameterComponent.html":{}}}],["globalregex.test(control.value",{"_index":3307,"title":{},"body":{"components/ParameterComponent.html":{}}}],["go",{"_index":2077,"title":{},"body":{"components/DraftdetailComponent.html":{},"classes/OpSequencer.html":{},"index.html":{}}}],["goes",{"_index":684,"title":{},"body":{"components/ConnectionComponent.html":{},"interfaces/IOTuple.html":{},"interfaces/TreeNode.html":{}}}],["governs",{"_index":4592,"title":{},"body":{"index.html":{}}}],["gpl",{"_index":4620,"title":{},"body":{"properties.html":{}}}],["grey",{"_index":2842,"title":{},"body":{"components/MixerViewComponent.html":{},"components/NoteComponent.html":{}}}],["group",{"_index":3267,"title":{},"body":{"components/OpsComponent.html":{}}}],["groups",{"_index":2302,"title":{},"body":{"components/ImageComponent.html":{}}}],["growing",{"_index":4539,"title":{},"body":{"index.html":{}}}],["guides",{"_index":4439,"title":{},"body":{"index.html":{}}}],["h",{"_index":3670,"title":{},"body":{"components/PlayerComponent.html":{},"classes/Render.html":{},"injectables/ViewportService.html":{}}}],["h.tostring",{"_index":3674,"title":{},"body":{"components/PlayerComponent.html":{}}}],["h2",{"_index":3006,"title":{},"body":{"components/OpHelpModal.html":{}}}],["h3",{"_index":2936,"title":{},"body":{"components/NoteComponent.html":{},"components/OpHelpModal.html":{},"components/OpSequencerComponent.html":{},"components/OpsComponent.html":{}}}],["h4",{"_index":2838,"title":{},"body":{"components/MixerViewComponent.html":{}}}],["hack",{"_index":590,"title":{},"body":{"interfaces/ChainOp.html":{},"interfaces/PairedOp.html":{},"interfaces/PedalEvent.html":{},"interfaces/PlayerOp.html":{},"index.html":{}}}],["handle",{"_index":4419,"title":{},"body":{"miscellaneous/functions.html":{},"index.html":{}}}],["handled",{"_index":1275,"title":{},"body":{"interfaces/DensityUnits.html":{},"interfaces/DesignMode.html":{},"interfaces/LoomTypes.html":{},"interfaces/MaterialTypes.html":{},"interfaces/ViewModes.html":{}}}],["handlefile",{"_index":3274,"title":{},"body":{"components/ParameterComponent.html":{}}}],["handlefile(obj",{"_index":3285,"title":{},"body":{"components/ParameterComponent.html":{}}}],["handles",{"_index":1970,"title":{},"body":{"components/DraftdetailComponent.html":{},"interfaces/OperationParam.html":{},"classes/Params.html":{},"miscellaneous/typealiases.html":{}}}],["handling",{"_index":3560,"title":{},"body":{"injectables/PedalsService.html":{}}}],["handlle",{"_index":77,"title":{},"body":{"classes/AbstractOpFactory.html":{},"classes/BaseOp.html":{},"classes/Branch.html":{},"classes/Bus.html":{},"classes/Merge.html":{},"interfaces/OpClassifier.html":{},"interfaces/OperationProperties.html":{},"classes/Pipe.html":{},"classes/Seed.html":{},"interfaces/TopologyDef.html":{}}}],["happen",{"_index":583,"title":{},"body":{"interfaces/ChainOp.html":{},"interfaces/PairedOp.html":{},"interfaces/PedalEvent.html":{},"interfaces/PlayerOp.html":{}}}],["happening",{"_index":1566,"title":{},"body":{"interfaces/DesignActions.html":{}}}],["hard",{"_index":4494,"title":{},"body":{"index.html":{}}}],["hardware",{"_index":3363,"title":{},"body":{"interfaces/Pedal.html":{},"classes/PedalStatus.html":{},"injectables/PedalsService.html":{}}}],["has_active_connection",{"_index":1384,"title":{},"body":{"interfaces/DesignActions.html":{}}}],["hasbackdrop",{"_index":1558,"title":{},"body":{"interfaces/DesignActions.html":{}}}],["hascustomstructure",{"_index":3697,"title":{},"body":{"injectables/PlayerService.html":{}}}],["hascustomstructure(d",{"_index":1880,"title":{},"body":{"interfaces/DraftOperationClassification.html":{},"interfaces/LoomConfig.html":{},"classes/PedalConfig.html":{},"injectables/PlayerService.html":{}}}],["haspedal",{"_index":3020,"title":{},"body":{"classes/OpSequencer.html":{},"injectables/SequencerService.html":{}}}],["haspedal(n",{"_index":3040,"title":{},"body":{"classes/OpSequencer.html":{},"injectables/SequencerService.html":{}}}],["hasselection",{"_index":3857,"title":{},"body":{"classes/Selection.html":{}}}],["header",{"_index":3100,"title":{},"body":{"components/OpSequencerComponent.html":{},"components/PlayerComponent.html":{},"components/WeavingStateComponent.html":{}}}],["header.mat",{"_index":3126,"title":{},"body":{"components/OpSequencerComponent.html":{},"components/PlayerComponent.html":{},"components/WeavingStateComponent.html":{}}}],["header:hover",{"_index":3133,"title":{},"body":{"components/OpSequencerComponent.html":{},"components/PlayerComponent.html":{},"components/WeavingStateComponent.html":{}}}],["header:hover:not([aria",{"_index":3137,"title":{},"body":{"components/OpSequencerComponent.html":{},"components/PlayerComponent.html":{},"components/WeavingStateComponent.html":{}}}],["heart",{"_index":62,"title":{},"body":{"classes/AbstractOpFactory.html":{},"classes/BaseOp.html":{},"classes/Branch.html":{},"classes/Bus.html":{},"classes/Merge.html":{},"interfaces/OpClassifier.html":{},"interfaces/OperationProperties.html":{},"classes/Pipe.html":{},"classes/Seed.html":{},"interfaces/TopologyDef.html":{},"miscellaneous/typealiases.html":{}}}],["heddle",{"_index":385,"title":{},"body":{"classes/Cell.html":{},"interfaces/Ink.html":{},"injectables/InkService.html":{},"index.html":{}}}],["height",{"_index":342,"title":{},"body":{"interfaces/Bounds.html":{},"interfaces/DesignActions.html":{},"components/DraftdetailComponent.html":{},"components/InletComponent.html":{},"directives/MarqueeComponent.html":{},"components/MixerViewComponent.html":{},"components/NoteComponent.html":{},"components/OpSequencerComponent.html":{},"components/OpsComponent.html":{},"components/ParameterComponent.html":{},"components/PlayerComponent.html":{},"interfaces/Point.html":{},"classes/Selection.html":{},"directives/SelectionComponent.html":{},"classes/Shape.html":{},"injectables/ViewportService.html":{},"components/VirtualPedalsComponent.html":{},"components/WeavingStateComponent.html":{}}}],["height:0",{"_index":702,"title":{},"body":{"components/ConnectionComponent.html":{},"injectables/ViewportService.html":{}}}],["height:100",{"_index":2774,"title":{},"body":{"components/MixerViewComponent.html":{}}}],["held",{"_index":2142,"title":{},"body":{"interfaces/DynamicOperation.html":{},"interfaces/OpInput.html":{},"interfaces/OperationClassification.html":{},"interfaces/TreeOperation.html":{}}}],["help",{"_index":3004,"title":{},"body":{"components/OpHelpModal.html":{},"interfaces/OperationParam.html":{},"classes/Params.html":{},"index.html":{}}}],["helper",{"_index":2061,"title":{},"body":{"components/DraftdetailComponent.html":{}}}],["helps",{"_index":4149,"title":{},"body":{"classes/System.html":{},"miscellaneous/functions.html":{}}}],["here",{"_index":1425,"title":{},"body":{"interfaces/DesignActions.html":{},"components/DraftdetailComponent.html":{},"components/OpsComponent.html":{},"components/PlayerComponent.html":{},"index.html":{}}}],["hidden",{"_index":3341,"title":{},"body":{"components/ParameterComponent.html":{}}}],["hide",{"_index":2040,"title":{},"body":{"components/DraftdetailComponent.html":{},"components/NoteComponent.html":{}}}],["hiding",{"_index":1618,"title":{},"body":{"interfaces/DraftMap.html":{},"interfaces/Interlacement.html":{},"interfaces/InterlacementVal.html":{}}}],["history",{"_index":4527,"title":{},"body":{"index.html":{}}}],["hold",{"_index":1363,"title":{},"body":{"interfaces/DesignActions.html":{}}}],["holds",{"_index":945,"title":{},"body":{"classes/DBListener.html":{},"classes/DBListenerArray.html":{},"classes/DBNode.html":{},"classes/DBNodeArray.html":{},"classes/DBTwoWay.html":{},"classes/DBTwoWayArray.html":{},"classes/DBWriteBuffer.html":{},"classes/DBWriter.html":{},"classes/DBWriterArray.html":{},"interfaces/DraftNodeProxy.html":{},"interfaces/FileObj.html":{},"interfaces/FileSaver.html":{},"interfaces/Fileloader.html":{},"interfaces/LoadResponse.html":{},"components/MixerViewComponent.html":{},"interfaces/NodeComponentProxy.html":{},"interfaces/NodeMethods.html":{},"interfaces/NodeParams.html":{},"classes/OnlineStatus.html":{},"interfaces/OpComponentProxy.html":{},"interfaces/SaveObj.html":{},"interfaces/StatusMessage.html":{},"interfaces/TreeNodeProxy.html":{},"index.html":{},"miscellaneous/typealiases.html":{}}}],["hopefully",{"_index":441,"title":{},"body":{"interfaces/ChainIndex.html":{},"injectables/SequencerService.html":{}}}],["host",{"_index":1144,"title":{},"body":{"classes/DBListener.html":{},"classes/DBListenerArray.html":{},"classes/DBNode.html":{},"classes/DBNodeArray.html":{},"classes/DBTwoWay.html":{},"classes/DBTwoWayArray.html":{},"classes/DBWriteBuffer.html":{},"classes/DBWriter.html":{},"classes/DBWriterArray.html":{},"interfaces/NodeMethods.html":{},"interfaces/NodeParams.html":{},"classes/OnlineStatus.html":{}}}],["host's",{"_index":1152,"title":{},"body":{"classes/DBListener.html":{},"classes/DBListenerArray.html":{},"classes/DBNode.html":{},"classes/DBNodeArray.html":{},"classes/DBTwoWay.html":{},"classes/DBTwoWayArray.html":{},"classes/DBWriteBuffer.html":{},"classes/DBWriter.html":{},"classes/DBWriterArray.html":{},"interfaces/NodeMethods.html":{},"interfaces/NodeParams.html":{},"classes/OnlineStatus.html":{}}}],["hostlistener",{"_index":1290,"title":{},"body":{"interfaces/DesignActions.html":{},"components/DraftdetailComponent.html":{},"components/VirtualPedalsComponent.html":{}}}],["hostlistener('document:click",{"_index":2038,"title":{},"body":{"components/DraftdetailComponent.html":{}}}],["hostlistener('window:keydown",{"_index":4272,"title":{},"body":{"components/VirtualPedalsComponent.html":{}}}],["hostlisteners",{"_index":4264,"title":{},"body":{"components/VirtualPedalsComponent.html":{}}}],["href",{"_index":1526,"title":{},"body":{"interfaces/DesignActions.html":{}}}],["html",{"_index":446,"title":{},"body":{"interfaces/ChainIndex.html":{},"components/ConnectionComponent.html":{},"components/DraftdetailComponent.html":{},"components/ImageComponent.html":{},"components/InletComponent.html":{},"components/MixerViewComponent.html":{},"components/NoteComponent.html":{},"components/OpHelpModal.html":{},"components/OpSequencerComponent.html":{},"components/OpsComponent.html":{},"components/ParameterComponent.html":{},"components/PlayerComponent.html":{},"injectables/SequencerService.html":{},"classes/Shape-1.html":{},"components/SnackbarComponent.html":{},"components/VirtualPedalsComponent.html":{},"components/WeavingStateComponent.html":{}}}],["html/css",{"_index":4486,"title":{},"body":{"index.html":{}}}],["htmlcanvaselement",{"_index":1354,"title":{},"body":{"interfaces/DesignActions.html":{},"interfaces/DraftNodeProxy.html":{},"interfaces/FileObj.html":{},"interfaces/FileSaver.html":{},"interfaces/Fileloader.html":{},"interfaces/LoadResponse.html":{},"interfaces/NodeComponentProxy.html":{},"components/NoteComponent.html":{},"interfaces/OpComponentProxy.html":{},"interfaces/SaveObj.html":{},"classes/Shape-1.html":{},"interfaces/StatusMessage.html":{},"interfaces/TreeNodeProxy.html":{},"components/WeavingStateComponent.html":{}}}],["htmlelement",{"_index":708,"title":{},"body":{"components/ConnectionComponent.html":{},"interfaces/DesignActions.html":{},"components/DraftdetailComponent.html":{},"components/MixerViewComponent.html":{},"components/NoteComponent.html":{},"components/PlayerComponent.html":{},"components/WeavingStateComponent.html":{}}}],["http://adacad.unstable.design/adacad",{"_index":4468,"title":{},"body":{"index.html":{}}}],["http://localhost:4200",{"_index":4506,"title":{},"body":{"index.html":{}}}],["https://adacad.org",{"_index":4437,"title":{},"body":{"index.html":{}}}],["https://adacad.unstable.design",{"_index":4441,"title":{},"body":{"index.html":{}}}],["https://refactoring.guru/design",{"_index":277,"title":{},"body":{"classes/AbstractOpFactory.html":{},"classes/BaseOp.html":{},"classes/Branch.html":{},"classes/Bus.html":{},"classes/Merge.html":{},"interfaces/OpClassifier.html":{},"interfaces/OperationProperties.html":{},"classes/Pipe.html":{},"classes/Seed.html":{},"interfaces/TopologyDef.html":{}}}],["i'm",{"_index":2592,"title":{},"body":{"injectables/MappingsService.html":{}}}],["i.e",{"_index":192,"title":{},"body":{"classes/AbstractOpFactory.html":{},"classes/BaseOp.html":{},"classes/Branch.html":{},"classes/Bus.html":{},"classes/Merge.html":{},"interfaces/OpClassifier.html":{},"interfaces/OperationProperties.html":{},"classes/Pipe.html":{},"classes/Seed.html":{},"interfaces/TopologyDef.html":{}}}],["i.num_drafts",{"_index":2215,"title":{},"body":{"interfaces/DynamicOperation.html":{},"interfaces/OpInput.html":{},"interfaces/OperationClassification.html":{},"interfaces/TreeOperation.html":{}}}],["i.viewvalue",{"_index":2090,"title":{},"body":{"components/DraftdetailComponent.html":{}}}],["i/o",{"_index":2187,"title":{},"body":{"interfaces/DynamicOperation.html":{},"interfaces/OpInput.html":{},"interfaces/OperationClassification.html":{},"interfaces/TreeOperation.html":{}}}],["i:i",{"_index":4233,"title":{},"body":{"injectables/ViewportService.html":{}}}],["i:interlacement",{"_index":4236,"title":{},"body":{"injectables/ViewportService.html":{}}}],["i=0",{"_index":1115,"title":{},"body":{"classes/DBListener.html":{},"classes/DBListenerArray.html":{},"classes/DBNode.html":{},"classes/DBNodeArray.html":{},"classes/DBTwoWay.html":{},"classes/DBTwoWayArray.html":{},"classes/DBWriteBuffer.html":{},"classes/DBWriter.html":{},"classes/DBWriterArray.html":{},"interfaces/NodeMethods.html":{},"interfaces/NodeParams.html":{},"classes/OnlineStatus.html":{}}}],["icon",{"_index":1280,"title":{},"body":{"interfaces/DensityUnits.html":{},"interfaces/DesignActions.html":{},"interfaces/DesignMode.html":{},"interfaces/Ink.html":{},"injectables/InkService.html":{},"interfaces/LoomTypes.html":{},"interfaces/MaterialTypes.html":{},"components/NoteComponent.html":{},"components/ParameterComponent.html":{},"interfaces/ViewModes.html":{}}}],["icons",{"_index":1269,"title":{},"body":{"interfaces/DensityUnits.html":{},"interfaces/DesignMode.html":{},"interfaces/LoomTypes.html":{},"interfaces/MaterialTypes.html":{},"interfaces/ViewModes.html":{}}}],["id",{"_index":427,"title":{},"body":{"interfaces/ChainIndex.html":{},"interfaces/ChainOp.html":{},"components/ConnectionComponent.html":{},"interfaces/Crossing.html":{},"classes/DBListener.html":{},"classes/DBListenerArray.html":{},"classes/DBNode.html":{},"classes/DBNodeArray.html":{},"classes/DBTwoWay.html":{},"classes/DBTwoWayArray.html":{},"classes/DBWriteBuffer.html":{},"classes/DBWriter.html":{},"classes/DBWriterArray.html":{},"interfaces/DesignActions.html":{},"interfaces/DraftMap.html":{},"interfaces/DraftNodeProxy.html":{},"interfaces/DraftOperationClassification.html":{},"components/DraftdetailComponent.html":{},"interfaces/DynamicOperation.html":{},"interfaces/FileObj.html":{},"interfaces/FileSaver.html":{},"interfaces/Fileloader.html":{},"interfaces/IOTuple.html":{},"components/InletComponent.html":{},"interfaces/Interlacement.html":{},"interfaces/InterlacementVal.html":{},"interfaces/LoadResponse.html":{},"interfaces/LoomConfig.html":{},"injectables/MappingsService.html":{},"directives/MarqueeComponent.html":{},"interfaces/NodeComponentProxy.html":{},"interfaces/NodeMethods.html":{},"interfaces/NodeParams.html":{},"components/NoteComponent.html":{},"classes/OnlineStatus.html":{},"interfaces/OpComponentProxy.html":{},"interfaces/OpInput.html":{},"classes/OpSequencer.html":{},"interfaces/OperationClassification.html":{},"interfaces/OperationParam.html":{},"interfaces/PairedOp.html":{},"classes/Params.html":{},"interfaces/Pedal.html":{},"classes/PedalConfig.html":{},"interfaces/PedalEvent.html":{},"classes/PedalStatus.html":{},"injectables/PedalsService.html":{},"interfaces/PlayerOp.html":{},"injectables/PlayerService.html":{},"interfaces/SaveObj.html":{},"directives/SelectionComponent.html":{},"injectables/SequencerService.html":{},"classes/Shape.html":{},"classes/Shuttle.html":{},"interfaces/StatusMessage.html":{},"classes/System.html":{},"interfaces/TreeNode.html":{},"interfaces/TreeNodeProxy.html":{},"interfaces/TreeOperation.html":{},"interfaces/Vertex.html":{},"injectables/ViewportService.html":{},"interfaces/YarnPath.html":{},"index.html":{}}}],["id's",{"_index":2513,"title":{},"body":{"injectables/MappingsService.html":{}}}],["idex",{"_index":2289,"title":{},"body":{"interfaces/IOTuple.html":{},"interfaces/TreeNode.html":{}}}],["ids",{"_index":1586,"title":{},"body":{"interfaces/DraftMap.html":{},"interfaces/DraftNodeProxy.html":{},"interfaces/FileObj.html":{},"interfaces/FileSaver.html":{},"interfaces/Fileloader.html":{},"interfaces/Interlacement.html":{},"interfaces/InterlacementVal.html":{},"interfaces/LoadResponse.html":{},"interfaces/NodeComponentProxy.html":{},"interfaces/OpComponentProxy.html":{},"interfaces/SaveObj.html":{},"interfaces/StatusMessage.html":{},"interfaces/TreeNodeProxy.html":{}}}],["if(!snapshot.val",{"_index":1026,"title":{},"body":{"classes/DBListener.html":{},"classes/DBListenerArray.html":{},"classes/DBNode.html":{},"classes/DBNodeArray.html":{},"classes/DBTwoWay.html":{},"classes/DBTwoWayArray.html":{},"classes/DBWriteBuffer.html":{},"classes/DBWriter.html":{},"classes/DBWriterArray.html":{},"interfaces/NodeMethods.html":{},"interfaces/NodeParams.html":{},"classes/OnlineStatus.html":{}}}],["if(!this.fc.haserror('forbiddeninput'))this.onoperationparamchange.emit({id",{"_index":3328,"title":{},"body":{"components/ParameterComponent.html":{}}}],["if(!this.is_preview",{"_index":1399,"title":{},"body":{"interfaces/DesignActions.html":{}}}],["if(!this.is_set",{"_index":420,"title":{},"body":{"classes/Cell.html":{}}}],["if(!this.orientation_x",{"_index":789,"title":{},"body":{"components/ConnectionComponent.html":{}}}],["if((from).draft_visible",{"_index":771,"title":{},"body":{"components/ConnectionComponent.html":{}}}],["if(canvas",{"_index":2922,"title":{},"body":{"components/NoteComponent.html":{}}}],["if(container",{"_index":1450,"title":{},"body":{"interfaces/DesignActions.html":{}}}],["if(coords.i",{"_index":1510,"title":{},"body":{"interfaces/DesignActions.html":{}}}],["if(draft",{"_index":1416,"title":{},"body":{"interfaces/DesignActions.html":{}}}],["if(el.id",{"_index":4238,"title":{},"body":{"injectables/ViewportService.html":{}}}],["if(element",{"_index":763,"title":{},"body":{"components/ConnectionComponent.html":{}}}],["if(from.id",{"_index":769,"title":{},"body":{"components/ConnectionComponent.html":{}}}],["if(i",{"_index":1501,"title":{},"body":{"interfaces/DesignActions.html":{}}}],["if(ink.value",{"_index":2346,"title":{},"body":{"interfaces/Ink.html":{},"injectables/InkService.html":{}}}],["if(j",{"_index":1502,"title":{},"body":{"interfaces/DesignActions.html":{}}}],["if(len",{"_index":4172,"title":{},"body":{"classes/System.html":{}}}],["if(name.includes(\"cdk",{"_index":2044,"title":{},"body":{"components/DraftdetailComponent.html":{}}}],["if(ndx",{"_index":760,"title":{},"body":{"components/ConnectionComponent.html":{},"components/OpsComponent.html":{},"classes/System.html":{}}}],["if(next",{"_index":3819,"title":{},"body":{"classes/Render.html":{}}}],["if(p.y",{"_index":1485,"title":{},"body":{"interfaces/DesignActions.html":{}}}],["if(p1",{"_index":785,"title":{},"body":{"components/ConnectionComponent.html":{}}}],["if(p2.x",{"_index":788,"title":{},"body":{"components/ConnectionComponent.html":{}}}],["if(p_grn",{"_index":4036,"title":{},"body":{"classes/Shape-1.html":{}}}],["if(params.id",{"_index":985,"title":{},"body":{"classes/DBListener.html":{},"classes/DBListenerArray.html":{},"classes/DBNode.html":{},"classes/DBNodeArray.html":{},"classes/DBTwoWay.html":{},"classes/DBTwoWayArray.html":{},"classes/DBWriteBuffer.html":{},"classes/DBWriter.html":{},"classes/DBWriterArray.html":{},"interfaces/NodeMethods.html":{},"interfaces/NodeParams.html":{},"classes/OnlineStatus.html":{}}}],["if(params.is_set",{"_index":414,"title":{},"body":{"classes/Cell.html":{}}}],["if(params.is_up",{"_index":412,"title":{},"body":{"classes/Cell.html":{}}}],["if(result",{"_index":1561,"title":{},"body":{"interfaces/DesignActions.html":{}}}],["if(sd",{"_index":2462,"title":{},"body":{"components/InletComponent.html":{}}}],["if(setting",{"_index":409,"title":{},"body":{"classes/Cell.html":{}}}],["if(sys.length",{"_index":4175,"title":{},"body":{"classes/System.html":{}}}],["if(this.bounds.topleft.x",{"_index":1408,"title":{},"body":{"interfaces/DesignActions.html":{}}}],["if(this.canvas",{"_index":1480,"title":{},"body":{"interfaces/DesignActions.html":{}}}],["if(this.dm.getselecteddesignmode('drawdown_editing_style').value",{"_index":2069,"title":{},"body":{"components/DraftdetailComponent.html":{}}}],["if(this.draft",{"_index":1445,"title":{},"body":{"interfaces/DesignActions.html":{}}}],["if(this.draftcanvas",{"_index":4317,"title":{},"body":{"components/WeavingStateComponent.html":{}}}],["if(this.inlet",{"_index":2448,"title":{},"body":{"components/InletComponent.html":{}}}],["if(this.is_dynamic_op",{"_index":2980,"title":{},"body":{"components/OpHelpModal.html":{}}}],["if(this.is_set",{"_index":419,"title":{},"body":{"classes/Cell.html":{}}}],["if(this.loom_settings.type",{"_index":2025,"title":{},"body":{"components/DraftdetailComponent.html":{}}}],["if(this.loom_settings.units",{"_index":2063,"title":{},"body":{"components/DraftdetailComponent.html":{}}}],["if(this.modal",{"_index":1553,"title":{},"body":{"interfaces/DesignActions.html":{}}}],["if(this.note",{"_index":2900,"title":{},"body":{"components/NoteComponent.html":{}}}],["if(this.orientation",{"_index":800,"title":{},"body":{"components/ConnectionComponent.html":{}}}],["if(this.parent_id",{"_index":1466,"title":{},"body":{"interfaces/DesignActions.html":{}}}],["if(this.pls.draft",{"_index":4318,"title":{},"body":{"components/WeavingStateComponent.html":{}}}],["if(this.target",{"_index":3884,"title":{},"body":{"classes/Selection.html":{}}}],["if(this.target.id",{"_index":3879,"title":{},"body":{"classes/Selection.html":{}}}],["if(this.tree.gettype(to.id",{"_index":756,"title":{},"body":{"components/ConnectionComponent.html":{}}}],["if(this.type",{"_index":4091,"title":{},"body":{"classes/Shuttle.html":{}}}],["if(this.zoom",{"_index":3816,"title":{},"body":{"classes/Render.html":{}}}],["if(to.id",{"_index":747,"title":{},"body":{"components/ConnectionComponent.html":{}}}],["if(to_comp",{"_index":737,"title":{},"body":{"components/ConnectionComponent.html":{}}}],["if(type",{"_index":3832,"title":{},"body":{"classes/Render.html":{}}}],["if(value",{"_index":417,"title":{},"body":{"classes/Cell.html":{}}}],["if(x",{"_index":4243,"title":{},"body":{"injectables/ViewportService.html":{}}}],["image",{"_index":2295,"title":{},"body":{"components/ImageComponent.html":{},"classes/Shuttle.html":{}}}],["image'},{'name",{"_index":832,"title":{},"body":{"components/ConnectionComponent.html":{},"components/DraftdetailComponent.html":{},"components/ImageComponent.html":{},"components/InletComponent.html":{},"components/MixerViewComponent.html":{},"components/NoteComponent.html":{},"components/OpHelpModal.html":{},"components/OpSequencerComponent.html":{},"components/OpsComponent.html":{},"components/ParameterComponent.html":{},"components/PlayerComponent.html":{},"components/SnackbarComponent.html":{},"components/VirtualPedalsComponent.html":{},"components/WeavingStateComponent.html":{}}}],["image.component.html",{"_index":2297,"title":{},"body":{"components/ImageComponent.html":{}}}],["image.component.scss",{"_index":2296,"title":{},"body":{"components/ImageComponent.html":{}}}],["imagecomponent",{"_index":831,"title":{"components/ImageComponent.html":{}},"body":{"components/ConnectionComponent.html":{},"components/DraftdetailComponent.html":{},"components/ImageComponent.html":{},"components/InletComponent.html":{},"modules/MixerModule.html":{},"components/MixerViewComponent.html":{},"components/NoteComponent.html":{},"components/OpHelpModal.html":{},"components/OpSequencerComponent.html":{},"components/OpsComponent.html":{},"components/ParameterComponent.html":{},"components/PlayerComponent.html":{},"components/SnackbarComponent.html":{},"components/VirtualPedalsComponent.html":{},"components/WeavingStateComponent.html":{},"overview.html":{}}}],["imagedata",{"_index":4007,"title":{},"body":{"classes/Shape-1.html":{}}}],["img_data",{"_index":4000,"title":{},"body":{"classes/Shape-1.html":{}}}],["impertive/object",{"_index":4548,"title":{},"body":{"index.html":{}}}],["implement",{"_index":3957,"title":{},"body":{"classes/Shape.html":{}}}],["implementing",{"_index":4544,"title":{},"body":{"index.html":{}}}],["implements",{"_index":114,"title":{},"body":{"classes/AbstractOpFactory.html":{},"classes/BaseOp.html":{},"classes/Branch.html":{},"classes/Bus.html":{},"components/ConnectionComponent.html":{},"classes/DBListener.html":{},"classes/DBListenerArray.html":{},"classes/DBNode.html":{},"classes/DBNodeArray.html":{},"classes/DBTwoWay.html":{},"classes/DBTwoWayArray.html":{},"classes/DBWriteBuffer.html":{},"classes/DBWriter.html":{},"classes/DBWriterArray.html":{},"interfaces/DesignActions.html":{},"components/DraftdetailComponent.html":{},"components/ImageComponent.html":{},"components/InletComponent.html":{},"directives/MarqueeComponent.html":{},"classes/Merge.html":{},"components/MixerViewComponent.html":{},"interfaces/NodeMethods.html":{},"interfaces/NodeParams.html":{},"components/NoteComponent.html":{},"classes/OnlineStatus.html":{},"interfaces/OpClassifier.html":{},"components/OpHelpModal.html":{},"classes/OpSequencer.html":{},"components/OpSequencerComponent.html":{},"interfaces/OperationProperties.html":{},"components/OpsComponent.html":{},"components/ParameterComponent.html":{},"classes/Pipe.html":{},"components/PlayerComponent.html":{},"classes/Seed.html":{},"directives/SelectionComponent.html":{},"components/SnackbarComponent.html":{},"interfaces/TopologyDef.html":{},"components/VirtualPedalsComponent.html":{},"components/WeavingStateComponent.html":{}}}],["import",{"_index":50,"title":{},"body":{"classes/AbstractOpFactory.html":{},"classes/BaseOp.html":{},"classes/Branch.html":{},"classes/Bus.html":{},"interfaces/ChainIndex.html":{},"interfaces/ChainOp.html":{},"components/ConnectionComponent.html":{},"classes/DBListener.html":{},"classes/DBListenerArray.html":{},"classes/DBNode.html":{},"classes/DBNodeArray.html":{},"classes/DBTwoWay.html":{},"classes/DBTwoWayArray.html":{},"classes/DBWriteBuffer.html":{},"classes/DBWriter.html":{},"classes/DBWriterArray.html":{},"interfaces/DesignActions.html":{},"interfaces/DraftMap.html":{},"interfaces/DraftNodeProxy.html":{},"interfaces/DraftOperationClassification.html":{},"components/DraftdetailComponent.html":{},"interfaces/DynamicOperation.html":{},"interfaces/FileObj.html":{},"interfaces/FileSaver.html":{},"interfaces/Fileloader.html":{},"interfaces/IOTuple.html":{},"components/ImageComponent.html":{},"interfaces/Ink.html":{},"injectables/InkService.html":{},"components/InletComponent.html":{},"interfaces/Interlacement.html":{},"interfaces/InterlacementVal.html":{},"injectables/LayersService.html":{},"interfaces/LoadResponse.html":{},"interfaces/LoomConfig.html":{},"injectables/MappingsService.html":{},"directives/MarqueeComponent.html":{},"classes/Merge.html":{},"modules/MixerModule.html":{},"components/MixerViewComponent.html":{},"interfaces/NodeComponentProxy.html":{},"interfaces/NodeMethods.html":{},"interfaces/NodeParams.html":{},"components/NoteComponent.html":{},"classes/OnlineStatus.html":{},"interfaces/OpClassifier.html":{},"interfaces/OpComponentProxy.html":{},"components/OpHelpModal.html":{},"interfaces/OpInput.html":{},"classes/OpSequencer.html":{},"components/OpSequencerComponent.html":{},"interfaces/OperationClassification.html":{},"interfaces/OperationProperties.html":{},"components/OpsComponent.html":{},"interfaces/PairedOp.html":{},"components/ParameterComponent.html":{},"interfaces/Pedal.html":{},"classes/PedalConfig.html":{},"interfaces/PedalEvent.html":{},"classes/PedalStatus.html":{},"injectables/PedalsService.html":{},"classes/Pipe.html":{},"components/PlayerComponent.html":{},"modules/PlayerModule.html":{},"interfaces/PlayerOp.html":{},"injectables/PlayerService.html":{},"interfaces/PlayerState.html":{},"interfaces/PlayerState-1.html":{},"classes/Render.html":{},"interfaces/SaveObj.html":{},"classes/Seed.html":{},"classes/Selection.html":{},"directives/SelectionComponent.html":{},"injectables/SequencerService.html":{},"classes/Shape.html":{},"classes/Shape-1.html":{},"components/SnackbarComponent.html":{},"interfaces/StatusMessage.html":{},"classes/System.html":{},"interfaces/TopologyDef.html":{},"interfaces/TreeNode.html":{},"interfaces/TreeNodeProxy.html":{},"interfaces/TreeOperation.html":{},"injectables/ViewportService.html":{},"components/VirtualPedalsComponent.html":{},"interfaces/WeavingLog.html":{},"interfaces/WeavingPick.html":{},"interfaces/WeavingPick-1.html":{},"components/WeavingStateComponent.html":{}}}],["important",{"_index":2491,"title":{},"body":{"components/InletComponent.html":{},"index.html":{}}}],["imports",{"_index":2688,"title":{},"body":{"modules/MixerModule.html":{},"modules/PlayerModule.html":{}}}],["in_use",{"_index":4126,"title":{},"body":{"classes/System.html":{}}}],["inch",{"_index":3974,"title":{},"body":{"classes/Shape.html":{}}}],["includes",{"_index":2280,"title":{},"body":{"interfaces/IOTuple.html":{},"interfaces/TreeNode.html":{},"miscellaneous/typealiases.html":{}}}],["ind",{"_index":2612,"title":{},"body":{"injectables/MappingsService.html":{}}}],["independent",{"_index":1364,"title":{},"body":{"interfaces/DesignActions.html":{}}}],["index",{"_index":7,"title":{"index.html":{}},"body":{"classes/AbstractOpFactory.html":{},"classes/BaseOp.html":{},"interfaces/Bounds.html":{},"classes/Branch.html":{},"classes/Bus.html":{},"classes/Cell.html":{},"interfaces/ChainIndex.html":{},"interfaces/ChainOp.html":{},"components/ConnectionComponent.html":{},"interfaces/Crossing.html":{},"classes/DBListener.html":{},"classes/DBListenerArray.html":{},"classes/DBNode.html":{},"classes/DBNodeArray.html":{},"classes/DBTwoWay.html":{},"classes/DBTwoWayArray.html":{},"classes/DBWriteBuffer.html":{},"classes/DBWriter.html":{},"classes/DBWriterArray.html":{},"interfaces/DensityUnits.html":{},"interfaces/DesignActions.html":{},"interfaces/DesignMode.html":{},"interfaces/DraftMap.html":{},"interfaces/DraftNodeProxy.html":{},"interfaces/DraftOperationClassification.html":{},"components/DraftdetailComponent.html":{},"interfaces/DynamicOperation.html":{},"interfaces/FileObj.html":{},"interfaces/FileSaver.html":{},"interfaces/Fileloader.html":{},"interfaces/IOTuple.html":{},"components/ImageComponent.html":{},"interfaces/Ink.html":{},"injectables/InkService.html":{},"components/InletComponent.html":{},"interfaces/Interlacement.html":{},"interfaces/InterlacementVal.html":{},"injectables/LayersService.html":{},"interfaces/LoadResponse.html":{},"interfaces/LoomConfig.html":{},"interfaces/LoomTypes.html":{},"injectables/MappingsService.html":{},"directives/MarqueeComponent.html":{},"interfaces/MaterialTypes.html":{},"classes/Merge.html":{},"components/MixerViewComponent.html":{},"interfaces/NodeComponentProxy.html":{},"interfaces/NodeMethods.html":{},"interfaces/NodeParams.html":{},"components/NoteComponent.html":{},"classes/OnlineStatus.html":{},"interfaces/OpClassifier.html":{},"interfaces/OpComponentProxy.html":{},"components/OpHelpModal.html":{},"interfaces/OpInput.html":{},"classes/OpSequencer.html":{},"components/OpSequencerComponent.html":{},"interfaces/OperationClassification.html":{},"interfaces/OperationParam.html":{},"interfaces/OperationProperties.html":{},"components/OpsComponent.html":{},"interfaces/PairedOp.html":{},"components/ParameterComponent.html":{},"classes/Params.html":{},"interfaces/Pedal.html":{},"classes/PedalConfig.html":{},"interfaces/PedalEvent.html":{},"classes/PedalStatus.html":{},"injectables/PedalsService.html":{},"classes/Pipe.html":{},"components/PlayerComponent.html":{},"interfaces/PlayerOp.html":{},"injectables/PlayerService.html":{},"interfaces/PlayerState.html":{},"interfaces/PlayerState-1.html":{},"interfaces/Point.html":{},"classes/Render.html":{},"interfaces/SaveObj.html":{},"classes/Seed.html":{},"classes/Selection.html":{},"directives/SelectionComponent.html":{},"injectables/SequencerService.html":{},"classes/Shape.html":{},"classes/Shape-1.html":{},"classes/Shuttle.html":{},"components/SnackbarComponent.html":{},"interfaces/StatusMessage.html":{},"classes/System.html":{},"interfaces/TopologyDef.html":{},"interfaces/TreeNode.html":{},"interfaces/TreeNodeProxy.html":{},"interfaces/TreeOperation.html":{},"interfaces/Vertex.html":{},"interfaces/ViewModes.html":{},"injectables/ViewportService.html":{},"components/VirtualPedalsComponent.html":{},"interfaces/WeavingLog.html":{},"interfaces/WeavingPick.html":{},"interfaces/WeavingPick-1.html":{},"components/WeavingStateComponent.html":{},"interfaces/YarnPath.html":{},"miscellaneous/functions.html":{},"miscellaneous/typealiases.html":{}}}],["indexed",{"_index":1620,"title":{},"body":{"interfaces/DraftMap.html":{},"interfaces/Interlacement.html":{},"interfaces/InterlacementVal.html":{}}}],["indexes",{"_index":2256,"title":{},"body":{"interfaces/IOTuple.html":{},"interfaces/TreeNode.html":{}}}],["indexs",{"_index":4095,"title":{},"body":{"classes/Shuttle.html":{}}}],["indicating",{"_index":3981,"title":{},"body":{"classes/Shape.html":{}}}],["indicator",{"_index":3140,"title":{},"body":{"components/OpSequencerComponent.html":{},"components/PlayerComponent.html":{},"components/WeavingStateComponent.html":{}}}],["indicator.ng",{"_index":3142,"title":{},"body":{"components/OpSequencerComponent.html":{}}}],["indicator::after",{"_index":3141,"title":{},"body":{"components/OpSequencerComponent.html":{},"components/PlayerComponent.html":{}}}],["indicatorrotate.ng",{"_index":3148,"title":{},"body":{"components/OpSequencerComponent.html":{}}}],["individual",{"_index":4455,"title":{},"body":{"index.html":{}}}],["inets",{"_index":2165,"title":{},"body":{"interfaces/DynamicOperation.html":{},"interfaces/OpInput.html":{},"interfaces/OperationClassification.html":{},"interfaces/TreeOperation.html":{}}}],["info",{"_index":3,"title":{},"body":{"classes/AbstractOpFactory.html":{},"classes/BaseOp.html":{},"interfaces/Bounds.html":{},"classes/Branch.html":{},"classes/Bus.html":{},"classes/Cell.html":{},"interfaces/ChainIndex.html":{},"interfaces/ChainOp.html":{},"components/ConnectionComponent.html":{},"interfaces/Crossing.html":{},"classes/DBListener.html":{},"classes/DBListenerArray.html":{},"classes/DBNode.html":{},"classes/DBNodeArray.html":{},"classes/DBTwoWay.html":{},"classes/DBTwoWayArray.html":{},"classes/DBWriteBuffer.html":{},"classes/DBWriter.html":{},"classes/DBWriterArray.html":{},"interfaces/DensityUnits.html":{},"interfaces/DesignActions.html":{},"interfaces/DesignMode.html":{},"interfaces/DraftMap.html":{},"interfaces/DraftNodeProxy.html":{},"interfaces/DraftOperationClassification.html":{},"components/DraftdetailComponent.html":{},"interfaces/DynamicOperation.html":{},"interfaces/FileObj.html":{},"interfaces/FileSaver.html":{},"interfaces/Fileloader.html":{},"interfaces/IOTuple.html":{},"components/ImageComponent.html":{},"interfaces/Ink.html":{},"injectables/InkService.html":{},"components/InletComponent.html":{},"interfaces/Interlacement.html":{},"interfaces/InterlacementVal.html":{},"injectables/LayersService.html":{},"interfaces/LoadResponse.html":{},"interfaces/LoomConfig.html":{},"interfaces/LoomTypes.html":{},"injectables/MappingsService.html":{},"directives/MarqueeComponent.html":{},"interfaces/MaterialTypes.html":{},"classes/Merge.html":{},"modules/MixerModule.html":{},"components/MixerViewComponent.html":{},"interfaces/NodeComponentProxy.html":{},"interfaces/NodeMethods.html":{},"interfaces/NodeParams.html":{},"components/NoteComponent.html":{},"classes/OnlineStatus.html":{},"interfaces/OpClassifier.html":{},"interfaces/OpComponentProxy.html":{},"components/OpHelpModal.html":{},"interfaces/OpInput.html":{},"classes/OpSequencer.html":{},"components/OpSequencerComponent.html":{},"interfaces/OperationClassification.html":{},"interfaces/OperationParam.html":{},"interfaces/OperationProperties.html":{},"components/OpsComponent.html":{},"interfaces/PairedOp.html":{},"components/ParameterComponent.html":{},"classes/Params.html":{},"interfaces/Pedal.html":{},"classes/PedalConfig.html":{},"interfaces/PedalEvent.html":{},"classes/PedalStatus.html":{},"injectables/PedalsService.html":{},"classes/Pipe.html":{},"components/PlayerComponent.html":{},"modules/PlayerModule.html":{},"interfaces/PlayerOp.html":{},"injectables/PlayerService.html":{},"interfaces/PlayerState.html":{},"interfaces/PlayerState-1.html":{},"interfaces/Point.html":{},"classes/Render.html":{},"interfaces/SaveObj.html":{},"classes/Seed.html":{},"classes/Selection.html":{},"directives/SelectionComponent.html":{},"injectables/SequencerService.html":{},"classes/Shape.html":{},"classes/Shape-1.html":{},"classes/Shuttle.html":{},"components/SnackbarComponent.html":{},"interfaces/StatusMessage.html":{},"classes/System.html":{},"interfaces/TopologyDef.html":{},"interfaces/TreeNode.html":{},"interfaces/TreeNodeProxy.html":{},"interfaces/TreeOperation.html":{},"interfaces/Vertex.html":{},"interfaces/ViewModes.html":{},"injectables/ViewportService.html":{},"components/VirtualPedalsComponent.html":{},"interfaces/WeavingLog.html":{},"interfaces/WeavingPick.html":{},"interfaces/WeavingPick-1.html":{},"components/WeavingStateComponent.html":{},"interfaces/YarnPath.html":{}}}],["inforamation",{"_index":4570,"title":{},"body":{"index.html":{}}}],["information",{"_index":1595,"title":{},"body":{"interfaces/DraftMap.html":{},"interfaces/IOTuple.html":{},"interfaces/Interlacement.html":{},"interfaces/InterlacementVal.html":{},"interfaces/Pedal.html":{},"classes/PedalStatus.html":{},"injectables/PedalsService.html":{},"classes/Shape.html":{},"interfaces/TreeNode.html":{},"index.html":{},"miscellaneous/typealiases.html":{}}}],["inherent",{"_index":3153,"title":{},"body":{"interfaces/OperationParam.html":{}}}],["inherit",{"_index":3104,"title":{},"body":{"components/OpSequencerComponent.html":{},"components/PlayerComponent.html":{},"components/WeavingStateComponent.html":{}}}],["inherited",{"_index":936,"title":{},"body":{"classes/DBListener.html":{},"classes/DBListenerArray.html":{},"classes/DBTwoWay.html":{},"classes/DBTwoWayArray.html":{},"classes/DBWriteBuffer.html":{},"classes/DBWriter.html":{},"classes/DBWriterArray.html":{},"classes/OnlineStatus.html":{},"injectables/SequencerService.html":{}}}],["inhertis",{"_index":4038,"title":{},"body":{"classes/Shuttle.html":{}}}],["init",{"_index":519,"title":{},"body":{"interfaces/ChainOp.html":{},"classes/DBListener.html":{},"classes/DBListenerArray.html":{},"classes/DBNode.html":{},"classes/DBNodeArray.html":{},"classes/DBTwoWay.html":{},"classes/DBTwoWayArray.html":{},"classes/DBWriteBuffer.html":{},"classes/DBWriter.html":{},"classes/DBWriterArray.html":{},"interfaces/DraftOperationClassification.html":{},"interfaces/LoomConfig.html":{},"interfaces/NodeMethods.html":{},"interfaces/NodeParams.html":{},"components/NoteComponent.html":{},"classes/OnlineStatus.html":{},"classes/OpSequencer.html":{},"interfaces/PairedOp.html":{},"interfaces/Pedal.html":{},"classes/PedalConfig.html":{},"interfaces/PedalEvent.html":{},"classes/PedalStatus.html":{},"injectables/PedalsService.html":{},"components/PlayerComponent.html":{},"interfaces/PlayerOp.html":{},"injectables/PlayerService.html":{},"interfaces/PlayerState.html":{},"interfaces/PlayerState-1.html":{},"injectables/SequencerService.html":{},"interfaces/WeavingLog.html":{},"interfaces/WeavingPick.html":{},"interfaces/WeavingPick-1.html":{},"miscellaneous/functions.html":{}}}],["init.draft",{"_index":579,"title":{},"body":{"interfaces/ChainOp.html":{},"interfaces/PairedOp.html":{},"interfaces/PedalEvent.html":{},"interfaces/PlayerOp.html":{}}}],["init.numpicks",{"_index":576,"title":{},"body":{"interfaces/ChainOp.html":{},"interfaces/PairedOp.html":{},"interfaces/PedalEvent.html":{},"interfaces/PlayerOp.html":{}}}],["init.row",{"_index":553,"title":{},"body":{"interfaces/ChainOp.html":{},"interfaces/DraftOperationClassification.html":{},"interfaces/LoomConfig.html":{},"interfaces/PairedOp.html":{},"classes/PedalConfig.html":{},"interfaces/PedalEvent.html":{},"interfaces/PlayerOp.html":{},"injectables/PlayerService.html":{}}}],["init.row+1",{"_index":530,"title":{},"body":{"interfaces/ChainOp.html":{},"interfaces/PairedOp.html":{},"interfaces/PedalEvent.html":{},"interfaces/PlayerOp.html":{}}}],["init.row+wefts(init.draft.drawdown",{"_index":543,"title":{},"body":{"interfaces/ChainOp.html":{},"interfaces/PairedOp.html":{},"interfaces/PedalEvent.html":{},"interfaces/PlayerOp.html":{}}}],["init.weaving",{"_index":574,"title":{},"body":{"interfaces/ChainOp.html":{},"interfaces/PairedOp.html":{},"interfaces/PedalEvent.html":{},"interfaces/PlayerOp.html":{}}}],["initalize",{"_index":3311,"title":{},"body":{"components/ParameterComponent.html":{}}}],["initatites",{"_index":1939,"title":{},"body":{"components/DraftdetailComponent.html":{}}}],["initdraft",{"_index":3728,"title":{},"body":{"interfaces/PlayerState.html":{},"interfaces/PlayerState-1.html":{},"interfaces/WeavingLog.html":{},"interfaces/WeavingPick.html":{},"interfaces/WeavingPick-1.html":{}}}],["initdraftwithparams",{"_index":1320,"title":{},"body":{"interfaces/DesignActions.html":{},"directives/MarqueeComponent.html":{}}}],["initdraftwithparams({ud_name",{"_index":2664,"title":{},"body":{"directives/MarqueeComponent.html":{}}}],["initialize",{"_index":3057,"title":{},"body":{"classes/OpSequencer.html":{}}}],["initstate",{"_index":514,"title":{},"body":{"interfaces/ChainOp.html":{},"interfaces/DraftOperationClassification.html":{},"interfaces/LoomConfig.html":{},"interfaces/PairedOp.html":{},"classes/PedalConfig.html":{},"interfaces/PedalEvent.html":{},"interfaces/PlayerOp.html":{},"injectables/PlayerService.html":{},"interfaces/PlayerState.html":{},"interfaces/PlayerState-1.html":{},"interfaces/WeavingLog.html":{},"interfaces/WeavingPick.html":{},"interfaces/WeavingPick-1.html":{},"miscellaneous/functions.html":{}}}],["initval",{"_index":965,"title":{},"body":{"classes/DBListener.html":{},"classes/DBListenerArray.html":{},"classes/DBNode.html":{},"classes/DBNodeArray.html":{},"classes/DBTwoWay.html":{},"classes/DBTwoWayArray.html":{},"classes/DBWriteBuffer.html":{},"classes/DBWriter.html":{},"classes/DBWriterArray.html":{},"interfaces/NodeMethods.html":{},"interfaces/NodeParams.html":{},"classes/OnlineStatus.html":{},"interfaces/Pedal.html":{},"classes/PedalStatus.html":{},"injectables/PedalsService.html":{}}}],["inject",{"_index":2004,"title":{},"body":{"components/DraftdetailComponent.html":{},"components/MixerViewComponent.html":{},"components/OpHelpModal.html":{},"components/OpsComponent.html":{},"components/SnackbarComponent.html":{}}}],["inject(mat_dialog_data",{"_index":2014,"title":{},"body":{"components/DraftdetailComponent.html":{},"components/MixerViewComponent.html":{},"components/OpHelpModal.html":{},"components/OpsComponent.html":{}}}],["inject(mat_snack_bar_data",{"_index":4105,"title":{},"body":{"components/SnackbarComponent.html":{}}}],["injectable",{"_index":429,"title":{"injectables/InkService.html":{},"injectables/LayersService.html":{},"injectables/MappingsService.html":{},"injectables/PedalsService.html":{},"injectables/PlayerService.html":{},"injectables/SequencerService.html":{},"injectables/ViewportService.html":{}},"body":{"interfaces/ChainIndex.html":{},"interfaces/DraftOperationClassification.html":{},"interfaces/Ink.html":{},"injectables/InkService.html":{},"injectables/LayersService.html":{},"interfaces/LoomConfig.html":{},"injectables/MappingsService.html":{},"interfaces/Pedal.html":{},"classes/PedalConfig.html":{},"classes/PedalStatus.html":{},"injectables/PedalsService.html":{},"injectables/PlayerService.html":{},"injectables/SequencerService.html":{},"injectables/ViewportService.html":{}}}],["injectables",{"_index":2365,"title":{},"body":{"injectables/InkService.html":{},"injectables/LayersService.html":{},"injectables/MappingsService.html":{},"injectables/PedalsService.html":{},"injectables/PlayerService.html":{},"injectables/SequencerService.html":{},"injectables/ViewportService.html":{},"overview.html":{}}}],["ink",{"_index":1366,"title":{"interfaces/Ink.html":{}},"body":{"interfaces/DesignActions.html":{},"components/DraftdetailComponent.html":{},"interfaces/Ink.html":{},"injectables/InkService.html":{},"components/WeavingStateComponent.html":{}}}],["ink.selected",{"_index":2358,"title":{},"body":{"interfaces/Ink.html":{},"injectables/InkService.html":{}}}],["inkactionchange",{"_index":1951,"title":{},"body":{"components/DraftdetailComponent.html":{}}}],["inkactionchange(name",{"_index":1966,"title":{},"body":{"components/DraftdetailComponent.html":{}}}],["inks",{"_index":1390,"title":{},"body":{"interfaces/DesignActions.html":{},"components/DraftdetailComponent.html":{},"interfaces/Ink.html":{},"injectables/InkService.html":{}}}],["inkservice",{"_index":1297,"title":{"injectables/InkService.html":{}},"body":{"interfaces/DesignActions.html":{},"components/DraftdetailComponent.html":{},"interfaces/Ink.html":{},"injectables/InkService.html":{}}}],["inlay",{"_index":2325,"title":{},"body":{"interfaces/Ink.html":{},"injectables/InkService.html":{},"index.html":{}}}],["inlet",{"_index":569,"title":{},"body":{"interfaces/ChainOp.html":{},"components/ConnectionComponent.html":{},"interfaces/DynamicOperation.html":{},"interfaces/IOTuple.html":{},"components/InletComponent.html":{},"components/OpHelpModal.html":{},"interfaces/OpInput.html":{},"interfaces/OperationClassification.html":{},"interfaces/OperationParam.html":{},"interfaces/PairedOp.html":{},"classes/Params.html":{},"interfaces/PedalEvent.html":{},"interfaces/PlayerOp.html":{},"interfaces/TreeNode.html":{},"interfaces/TreeOperation.html":{},"index.html":{},"miscellaneous/typealiases.html":{}}}],["inlet'},{'name",{"_index":834,"title":{},"body":{"components/ConnectionComponent.html":{},"components/DraftdetailComponent.html":{},"components/ImageComponent.html":{},"components/InletComponent.html":{},"components/MixerViewComponent.html":{},"components/NoteComponent.html":{},"components/OpHelpModal.html":{},"components/OpSequencerComponent.html":{},"components/OpsComponent.html":{},"components/ParameterComponent.html":{},"components/PlayerComponent.html":{},"components/SnackbarComponent.html":{},"components/VirtualPedalsComponent.html":{},"components/WeavingStateComponent.html":{}}}],["inlet.component.html",{"_index":2384,"title":{},"body":{"components/InletComponent.html":{}}}],["inlet.component.scss",{"_index":2383,"title":{},"body":{"components/InletComponent.html":{}}}],["inlet.name",{"_index":2469,"title":{},"body":{"components/InletComponent.html":{}}}],["inlet/outlet",{"_index":2254,"title":{},"body":{"interfaces/IOTuple.html":{},"interfaces/TreeNode.html":{}}}],["inlet_drafts",{"_index":2160,"title":{},"body":{"interfaces/DynamicOperation.html":{},"interfaces/OpInput.html":{},"interfaces/OperationClassification.html":{},"interfaces/TreeOperation.html":{}}}],["inlet_drafts.reduce((acc",{"_index":2164,"title":{},"body":{"interfaces/DynamicOperation.html":{},"interfaces/OpInput.html":{},"interfaces/OperationClassification.html":{},"interfaces/TreeOperation.html":{}}}],["inletchange",{"_index":2391,"title":{},"body":{"components/InletComponent.html":{}}}],["inletcomponent",{"_index":833,"title":{"components/InletComponent.html":{}},"body":{"components/ConnectionComponent.html":{},"components/DraftdetailComponent.html":{},"components/ImageComponent.html":{},"components/InletComponent.html":{},"modules/MixerModule.html":{},"components/MixerViewComponent.html":{},"components/NoteComponent.html":{},"components/OpHelpModal.html":{},"components/OpSequencerComponent.html":{},"components/OpsComponent.html":{},"components/ParameterComponent.html":{},"components/PlayerComponent.html":{},"components/SnackbarComponent.html":{},"components/VirtualPedalsComponent.html":{},"components/WeavingStateComponent.html":{},"overview.html":{}}}],["inletdrafts",{"_index":60,"title":{},"body":{"classes/AbstractOpFactory.html":{},"classes/BaseOp.html":{},"classes/Branch.html":{},"classes/Bus.html":{},"interfaces/DynamicOperation.html":{},"classes/Merge.html":{},"interfaces/OpClassifier.html":{},"interfaces/OpInput.html":{},"interfaces/OperationClassification.html":{},"interfaces/OperationProperties.html":{},"classes/Pipe.html":{},"classes/Seed.html":{},"interfaces/TopologyDef.html":{},"interfaces/TreeOperation.html":{},"miscellaneous/functions.html":{},"miscellaneous/typealiases.html":{}}}],["inletid",{"_index":2395,"title":{},"body":{"components/InletComponent.html":{}}}],["inletid+1",{"_index":2471,"title":{},"body":{"components/InletComponent.html":{}}}],["inlets",{"_index":61,"title":{},"body":{"classes/AbstractOpFactory.html":{},"classes/BaseOp.html":{},"classes/Branch.html":{},"classes/Bus.html":{},"interfaces/ChainOp.html":{},"interfaces/DraftNodeProxy.html":{},"interfaces/DynamicOperation.html":{},"interfaces/FileObj.html":{},"interfaces/FileSaver.html":{},"interfaces/Fileloader.html":{},"interfaces/IOTuple.html":{},"interfaces/LoadResponse.html":{},"classes/Merge.html":{},"interfaces/NodeComponentProxy.html":{},"interfaces/OpClassifier.html":{},"interfaces/OpComponentProxy.html":{},"components/OpHelpModal.html":{},"interfaces/OpInput.html":{},"interfaces/OperationClassification.html":{},"interfaces/OperationProperties.html":{},"interfaces/PairedOp.html":{},"interfaces/PedalEvent.html":{},"classes/Pipe.html":{},"interfaces/PlayerOp.html":{},"interfaces/SaveObj.html":{},"classes/Seed.html":{},"interfaces/StatusMessage.html":{},"interfaces/TopologyDef.html":{},"interfaces/TreeNode.html":{},"interfaces/TreeNodeProxy.html":{},"interfaces/TreeOperation.html":{},"index.html":{},"miscellaneous/typealiases.html":{}}}],["inline",{"_index":3098,"title":{},"body":{"components/OpSequencerComponent.html":{},"components/PlayerComponent.html":{},"components/WeavingStateComponent.html":{}}}],["input",{"_index":81,"title":{},"body":{"classes/AbstractOpFactory.html":{},"classes/BaseOp.html":{},"classes/Branch.html":{},"classes/Bus.html":{},"components/ConnectionComponent.html":{},"interfaces/DesignActions.html":{},"interfaces/DraftNodeProxy.html":{},"interfaces/DraftOperationClassification.html":{},"interfaces/DynamicOperation.html":{},"interfaces/FileObj.html":{},"interfaces/FileSaver.html":{},"interfaces/Fileloader.html":{},"interfaces/IOTuple.html":{},"components/InletComponent.html":{},"interfaces/LoadResponse.html":{},"interfaces/LoomConfig.html":{},"classes/Merge.html":{},"components/MixerViewComponent.html":{},"interfaces/NodeComponentProxy.html":{},"components/NoteComponent.html":{},"interfaces/OpClassifier.html":{},"interfaces/OpComponentProxy.html":{},"components/OpHelpModal.html":{},"interfaces/OpInput.html":{},"interfaces/OperationClassification.html":{},"interfaces/OperationParam.html":{},"interfaces/OperationProperties.html":{},"components/ParameterComponent.html":{},"classes/Params.html":{},"classes/PedalConfig.html":{},"classes/Pipe.html":{},"components/PlayerComponent.html":{},"injectables/PlayerService.html":{},"interfaces/SaveObj.html":{},"classes/Seed.html":{},"interfaces/StatusMessage.html":{},"classes/System.html":{},"interfaces/TopologyDef.html":{},"interfaces/TreeNode.html":{},"interfaces/TreeNodeProxy.html":{},"interfaces/TreeOperation.html":{},"components/WeavingStateComponent.html":{},"miscellaneous/functions.html":{},"index.html":{},"miscellaneous/typealiases.html":{}}}],["input('draft",{"_index":3639,"title":{},"body":{"components/PlayerComponent.html":{},"components/WeavingStateComponent.html":{}}}],["input.map((param",{"_index":3191,"title":{},"body":{"interfaces/OperationParam.html":{},"classes/Params.html":{}}}],["input/output",{"_index":78,"title":{},"body":{"classes/AbstractOpFactory.html":{},"classes/BaseOp.html":{},"classes/Branch.html":{},"classes/Bus.html":{},"classes/Merge.html":{},"interfaces/OpClassifier.html":{},"interfaces/OperationProperties.html":{},"classes/Pipe.html":{},"classes/Seed.html":{},"interfaces/TopologyDef.html":{}}}],["input_drafts",{"_index":137,"title":{},"body":{"classes/AbstractOpFactory.html":{},"classes/BaseOp.html":{},"classes/Branch.html":{},"classes/Bus.html":{},"classes/Merge.html":{},"interfaces/OpClassifier.html":{},"interfaces/OperationProperties.html":{},"classes/Pipe.html":{},"classes/Seed.html":{},"interfaces/TopologyDef.html":{}}}],["input_params",{"_index":138,"title":{},"body":{"classes/AbstractOpFactory.html":{},"classes/BaseOp.html":{},"classes/Branch.html":{},"classes/Bus.html":{},"interfaces/ChainOp.html":{},"classes/Merge.html":{},"interfaces/OpClassifier.html":{},"interfaces/OperationProperties.html":{},"interfaces/PairedOp.html":{},"interfaces/PedalEvent.html":{},"classes/Pipe.html":{},"interfaces/PlayerOp.html":{},"classes/Seed.html":{},"interfaces/TopologyDef.html":{}}}],["inputs",{"_index":73,"title":{},"body":{"classes/AbstractOpFactory.html":{},"classes/BaseOp.html":{},"classes/Branch.html":{},"classes/Bus.html":{},"interfaces/ChainOp.html":{},"components/ConnectionComponent.html":{},"interfaces/DraftNodeProxy.html":{},"interfaces/DynamicOperation.html":{},"interfaces/FileObj.html":{},"interfaces/FileSaver.html":{},"interfaces/Fileloader.html":{},"interfaces/IOTuple.html":{},"components/InletComponent.html":{},"interfaces/LoadResponse.html":{},"classes/Merge.html":{},"interfaces/NodeComponentProxy.html":{},"components/NoteComponent.html":{},"interfaces/OpClassifier.html":{},"interfaces/OpComponentProxy.html":{},"components/OpHelpModal.html":{},"interfaces/OpInput.html":{},"interfaces/OperationClassification.html":{},"interfaces/OperationParam.html":{},"interfaces/OperationProperties.html":{},"interfaces/PairedOp.html":{},"components/ParameterComponent.html":{},"classes/Params.html":{},"interfaces/PedalEvent.html":{},"classes/Pipe.html":{},"components/PlayerComponent.html":{},"interfaces/PlayerOp.html":{},"interfaces/SaveObj.html":{},"classes/Seed.html":{},"interfaces/StatusMessage.html":{},"interfaces/TopologyDef.html":{},"interfaces/TreeNode.html":{},"interfaces/TreeNodeProxy.html":{},"interfaces/TreeOperation.html":{},"components/WeavingStateComponent.html":{},"miscellaneous/functions.html":{},"index.html":{},"miscellaneous/typealiases.html":{}}}],["inputs.map((el",{"_index":2149,"title":{},"body":{"interfaces/DynamicOperation.html":{},"interfaces/OpInput.html":{},"interfaces/OperationClassification.html":{},"interfaces/TreeOperation.html":{}}}],["inputs[i",{"_index":2221,"title":{},"body":{"interfaces/DynamicOperation.html":{},"interfaces/OpInput.html":{},"interfaces/OperationClassification.html":{},"interfaces/TreeOperation.html":{}}}],["inputselected",{"_index":2392,"title":{},"body":{"components/InletComponent.html":{}}}],["ins",{"_index":290,"title":{},"body":{"classes/AbstractOpFactory.html":{},"classes/BaseOp.html":{},"classes/Branch.html":{},"classes/Bus.html":{},"classes/Merge.html":{},"interfaces/OpClassifier.html":{},"interfaces/OperationProperties.html":{},"classes/Pipe.html":{},"classes/Seed.html":{},"interfaces/TopologyDef.html":{}}}],["insert",{"_index":4040,"title":{},"body":{"classes/Shuttle.html":{}}}],["inserted::after",{"_index":3150,"title":{},"body":{"components/OpSequencerComponent.html":{}}}],["inset/outout",{"_index":2259,"title":{},"body":{"interfaces/IOTuple.html":{},"interfaces/TreeNode.html":{}}}],["install",{"_index":4499,"title":{},"body":{"index.html":{}}}],["installation",{"_index":4490,"title":{},"body":{"index.html":{}}}],["installed",{"_index":4500,"title":{},"body":{"index.html":{}}}],["installing",{"_index":4443,"title":{},"body":{"index.html":{}}}],["instance",{"_index":1611,"title":{},"body":{"interfaces/DraftMap.html":{},"interfaces/IOTuple.html":{},"interfaces/Interlacement.html":{},"interfaces/InterlacementVal.html":{},"interfaces/TreeNode.html":{}}}],["instead",{"_index":1601,"title":{},"body":{"interfaces/DraftMap.html":{},"interfaces/Interlacement.html":{},"interfaces/InterlacementVal.html":{}}}],["interact",{"_index":3502,"title":{},"body":{"interfaces/Pedal.html":{},"classes/PedalStatus.html":{},"injectables/PedalsService.html":{},"index.html":{}}}],["interested",{"_index":4447,"title":{},"body":{"index.html":{}}}],["interface",{"_index":106,"title":{"interfaces/Bounds.html":{},"interfaces/ChainIndex.html":{},"interfaces/ChainOp.html":{},"interfaces/Crossing.html":{},"interfaces/DensityUnits.html":{},"interfaces/DesignActions.html":{},"interfaces/DesignMode.html":{},"interfaces/DraftMap.html":{},"interfaces/DraftNodeProxy.html":{},"interfaces/DraftOperationClassification.html":{},"interfaces/DynamicOperation.html":{},"interfaces/FileObj.html":{},"interfaces/FileSaver.html":{},"interfaces/Fileloader.html":{},"interfaces/IOTuple.html":{},"interfaces/Ink.html":{},"interfaces/Interlacement.html":{},"interfaces/InterlacementVal.html":{},"interfaces/LoadResponse.html":{},"interfaces/LoomConfig.html":{},"interfaces/LoomTypes.html":{},"interfaces/MaterialTypes.html":{},"interfaces/NodeComponentProxy.html":{},"interfaces/NodeMethods.html":{},"interfaces/NodeParams.html":{},"interfaces/OpClassifier.html":{},"interfaces/OpComponentProxy.html":{},"interfaces/OpInput.html":{},"interfaces/OperationClassification.html":{},"interfaces/OperationParam.html":{},"interfaces/OperationProperties.html":{},"interfaces/PairedOp.html":{},"interfaces/Pedal.html":{},"interfaces/PedalEvent.html":{},"interfaces/PlayerOp.html":{},"interfaces/PlayerState.html":{},"interfaces/PlayerState-1.html":{},"interfaces/Point.html":{},"interfaces/SaveObj.html":{},"interfaces/StatusMessage.html":{},"interfaces/TopologyDef.html":{},"interfaces/TreeNode.html":{},"interfaces/TreeNodeProxy.html":{},"interfaces/TreeOperation.html":{},"interfaces/Vertex.html":{},"interfaces/ViewModes.html":{},"interfaces/WeavingLog.html":{},"interfaces/WeavingPick.html":{},"interfaces/WeavingPick-1.html":{},"interfaces/YarnPath.html":{}},"body":{"classes/AbstractOpFactory.html":{},"classes/BaseOp.html":{},"interfaces/Bounds.html":{},"classes/Branch.html":{},"classes/Bus.html":{},"interfaces/ChainIndex.html":{},"interfaces/ChainOp.html":{},"interfaces/Crossing.html":{},"classes/DBListener.html":{},"classes/DBListenerArray.html":{},"classes/DBNode.html":{},"classes/DBNodeArray.html":{},"classes/DBTwoWay.html":{},"classes/DBTwoWayArray.html":{},"classes/DBWriteBuffer.html":{},"classes/DBWriter.html":{},"classes/DBWriterArray.html":{},"interfaces/DensityUnits.html":{},"interfaces/DesignActions.html":{},"interfaces/DesignMode.html":{},"interfaces/DraftMap.html":{},"interfaces/DraftNodeProxy.html":{},"interfaces/DraftOperationClassification.html":{},"interfaces/DynamicOperation.html":{},"interfaces/FileObj.html":{},"interfaces/FileSaver.html":{},"interfaces/Fileloader.html":{},"interfaces/IOTuple.html":{},"interfaces/Ink.html":{},"injectables/InkService.html":{},"interfaces/Interlacement.html":{},"interfaces/InterlacementVal.html":{},"interfaces/LoadResponse.html":{},"interfaces/LoomConfig.html":{},"interfaces/LoomTypes.html":{},"interfaces/MaterialTypes.html":{},"classes/Merge.html":{},"interfaces/NodeComponentProxy.html":{},"interfaces/NodeMethods.html":{},"interfaces/NodeParams.html":{},"classes/OnlineStatus.html":{},"interfaces/OpClassifier.html":{},"interfaces/OpComponentProxy.html":{},"interfaces/OpInput.html":{},"interfaces/OperationClassification.html":{},"interfaces/OperationParam.html":{},"interfaces/OperationProperties.html":{},"interfaces/PairedOp.html":{},"classes/Params.html":{},"interfaces/Pedal.html":{},"classes/PedalConfig.html":{},"interfaces/PedalEvent.html":{},"classes/PedalStatus.html":{},"injectables/PedalsService.html":{},"classes/Pipe.html":{},"interfaces/PlayerOp.html":{},"injectables/PlayerService.html":{},"interfaces/PlayerState.html":{},"interfaces/PlayerState-1.html":{},"interfaces/Point.html":{},"interfaces/SaveObj.html":{},"classes/Seed.html":{},"injectables/SequencerService.html":{},"interfaces/StatusMessage.html":{},"interfaces/TopologyDef.html":{},"interfaces/TreeNode.html":{},"interfaces/TreeNodeProxy.html":{},"interfaces/TreeOperation.html":{},"interfaces/Vertex.html":{},"interfaces/ViewModes.html":{},"interfaces/WeavingLog.html":{},"interfaces/WeavingPick.html":{},"interfaces/WeavingPick-1.html":{},"interfaces/YarnPath.html":{},"index.html":{}}}],["interfaces",{"_index":337,"title":{},"body":{"interfaces/Bounds.html":{},"interfaces/ChainIndex.html":{},"interfaces/ChainOp.html":{},"interfaces/Crossing.html":{},"interfaces/DensityUnits.html":{},"interfaces/DesignActions.html":{},"interfaces/DesignMode.html":{},"interfaces/DraftMap.html":{},"interfaces/DraftNodeProxy.html":{},"interfaces/DraftOperationClassification.html":{},"interfaces/DynamicOperation.html":{},"interfaces/FileObj.html":{},"interfaces/FileSaver.html":{},"interfaces/Fileloader.html":{},"interfaces/IOTuple.html":{},"interfaces/Ink.html":{},"interfaces/Interlacement.html":{},"interfaces/InterlacementVal.html":{},"interfaces/LoadResponse.html":{},"interfaces/LoomConfig.html":{},"interfaces/LoomTypes.html":{},"interfaces/MaterialTypes.html":{},"interfaces/NodeComponentProxy.html":{},"interfaces/NodeMethods.html":{},"interfaces/NodeParams.html":{},"interfaces/OpClassifier.html":{},"interfaces/OpComponentProxy.html":{},"interfaces/OpInput.html":{},"interfaces/OperationClassification.html":{},"interfaces/OperationParam.html":{},"interfaces/OperationProperties.html":{},"interfaces/PairedOp.html":{},"interfaces/Pedal.html":{},"interfaces/PedalEvent.html":{},"interfaces/PlayerOp.html":{},"interfaces/PlayerState.html":{},"interfaces/PlayerState-1.html":{},"interfaces/Point.html":{},"interfaces/SaveObj.html":{},"interfaces/StatusMessage.html":{},"interfaces/TopologyDef.html":{},"interfaces/TreeNode.html":{},"interfaces/TreeNodeProxy.html":{},"interfaces/TreeOperation.html":{},"interfaces/Vertex.html":{},"interfaces/ViewModes.html":{},"interfaces/WeavingLog.html":{},"interfaces/WeavingPick.html":{},"interfaces/WeavingPick-1.html":{},"interfaces/YarnPath.html":{},"overview.html":{}}}],["interlace",{"_index":4421,"title":{},"body":{"miscellaneous/functions.html":{}}}],["interlacement",{"_index":1294,"title":{"interfaces/Interlacement.html":{}},"body":{"interfaces/DesignActions.html":{},"interfaces/DraftMap.html":{},"interfaces/Interlacement.html":{},"interfaces/InterlacementVal.html":{},"directives/MarqueeComponent.html":{},"components/NoteComponent.html":{},"classes/Selection.html":{},"directives/SelectionComponent.html":{},"injectables/ViewportService.html":{}}}],["interlacementval",{"_index":1628,"title":{"interfaces/InterlacementVal.html":{}},"body":{"interfaces/DraftMap.html":{},"interfaces/Interlacement.html":{},"interfaces/InterlacementVal.html":{}}}],["interlacing",{"_index":4150,"title":{},"body":{"classes/System.html":{},"miscellaneous/functions.html":{}}}],["interlalcement",{"_index":4226,"title":{},"body":{"injectables/ViewportService.html":{}}}],["intermediate",{"_index":4481,"title":{},"body":{"index.html":{}}}],["internal",{"_index":194,"title":{},"body":{"classes/AbstractOpFactory.html":{},"classes/BaseOp.html":{},"classes/Branch.html":{},"classes/Bus.html":{},"interfaces/DynamicOperation.html":{},"classes/Merge.html":{},"interfaces/OpClassifier.html":{},"interfaces/OpInput.html":{},"interfaces/OperationClassification.html":{},"interfaces/OperationProperties.html":{},"classes/Pipe.html":{},"classes/Seed.html":{},"interfaces/TopologyDef.html":{},"interfaces/TreeOperation.html":{}}}],["interpolate",{"_index":3758,"title":{},"body":{"classes/Render.html":{}}}],["interpolate(base",{"_index":3788,"title":{},"body":{"classes/Render.html":{}}}],["invalid",{"_index":3178,"title":{},"body":{"interfaces/OperationParam.html":{},"classes/Params.html":{}}}],["invert",{"_index":1822,"title":{},"body":{"interfaces/DraftOperationClassification.html":{},"interfaces/LoomConfig.html":{},"classes/PedalConfig.html":{},"injectables/PlayerService.html":{}}}],["invite",{"_index":4445,"title":{},"body":{"index.html":{}}}],["invokes",{"_index":1095,"title":{},"body":{"classes/DBListener.html":{},"classes/DBListenerArray.html":{},"classes/DBNode.html":{},"classes/DBNodeArray.html":{},"classes/DBTwoWay.html":{},"classes/DBTwoWayArray.html":{},"classes/DBWriteBuffer.html":{},"classes/DBWriter.html":{},"classes/DBWriterArray.html":{},"interfaces/NodeMethods.html":{},"interfaces/NodeParams.html":{},"classes/OnlineStatus.html":{}}}],["iotuple",{"_index":2249,"title":{"interfaces/IOTuple.html":{}},"body":{"interfaces/IOTuple.html":{},"interfaces/TreeNode.html":{}}}],["is_dynamic_op",{"_index":2964,"title":{},"body":{"components/OpHelpModal.html":{}}}],["is_preview",{"_index":1382,"title":{},"body":{"interfaces/DesignActions.html":{},"components/NoteComponent.html":{}}}],["is_set",{"_index":369,"title":{},"body":{"classes/Cell.html":{}}}],["is_up",{"_index":370,"title":{},"body":{"classes/Cell.html":{}}}],["isfront",{"_index":3759,"title":{},"body":{"classes/Render.html":{}}}],["ismapped",{"_index":3022,"title":{},"body":{"classes/OpSequencer.html":{}}}],["isn't",{"_index":442,"title":{},"body":{"interfaces/ChainIndex.html":{},"classes/Render.html":{},"injectables/SequencerService.html":{}}}],["isselected",{"_index":2369,"title":{},"body":{"injectables/InkService.html":{}}}],["isselected(name",{"_index":2377,"title":{},"body":{"injectables/InkService.html":{}}}],["isselected(name:string):boolean",{"_index":2363,"title":{},"body":{"interfaces/Ink.html":{},"injectables/InkService.html":{}}}],["isset",{"_index":372,"title":{},"body":{"classes/Cell.html":{},"interfaces/DesignActions.html":{},"components/PlayerComponent.html":{},"components/WeavingStateComponent.html":{}}}],["isup",{"_index":373,"title":{},"body":{"classes/Cell.html":{},"interfaces/DesignActions.html":{},"components/PlayerComponent.html":{},"components/WeavingStateComponent.html":{}}}],["isup():boolean",{"_index":421,"title":{},"body":{"classes/Cell.html":{}}}],["isvisible",{"_index":4128,"title":{},"body":{"classes/System.html":{}}}],["isyarnbasedview",{"_index":3760,"title":{},"body":{"classes/Render.html":{}}}],["it's",{"_index":4504,"title":{},"body":{"index.html":{}}}],["item",{"_index":1063,"title":{},"body":{"classes/DBListener.html":{},"classes/DBListenerArray.html":{},"classes/DBNode.html":{},"classes/DBNodeArray.html":{},"classes/DBTwoWay.html":{},"classes/DBTwoWayArray.html":{},"classes/DBWriteBuffer.html":{},"classes/DBWriter.html":{},"classes/DBWriterArray.html":{},"interfaces/NodeMethods.html":{},"interfaces/NodeParams.html":{},"classes/OnlineStatus.html":{},"components/VirtualPedalsComponent.html":{}}}],["items",{"_index":3097,"title":{},"body":{"components/OpSequencerComponent.html":{},"components/PlayerComponent.html":{},"components/WeavingStateComponent.html":{}}}],["iterface",{"_index":1442,"title":{},"body":{"interfaces/DesignActions.html":{},"components/NoteComponent.html":{}}}],["itself",{"_index":70,"title":{},"body":{"classes/AbstractOpFactory.html":{},"classes/BaseOp.html":{},"classes/Branch.html":{},"classes/Bus.html":{},"interfaces/IOTuple.html":{},"classes/Merge.html":{},"interfaces/OpClassifier.html":{},"interfaces/OperationProperties.html":{},"classes/Pipe.html":{},"classes/Seed.html":{},"interfaces/TopologyDef.html":{},"interfaces/TreeNode.html":{},"miscellaneous/typealiases.html":{}}}],["j",{"_index":883,"title":{},"body":{"interfaces/Crossing.html":{},"interfaces/DesignActions.html":{},"interfaces/DraftMap.html":{},"interfaces/Interlacement.html":{},"interfaces/InterlacementVal.html":{},"classes/Shape-1.html":{},"interfaces/Vertex.html":{},"components/WeavingStateComponent.html":{},"interfaces/YarnPath.html":{}}}],["j:0",{"_index":2669,"title":{},"body":{"directives/MarqueeComponent.html":{},"directives/SelectionComponent.html":{}}}],["j:j",{"_index":1503,"title":{},"body":{"interfaces/DesignActions.html":{}}}],["j=col",{"_index":1496,"title":{},"body":{"interfaces/DesignActions.html":{}}}],["jacquard",{"_index":2026,"title":{},"body":{"components/DraftdetailComponent.html":{},"index.html":{}}}],["jacuqard",{"_index":4433,"title":{},"body":{"index.html":{}}}],["jankperform",{"_index":592,"title":{},"body":{"interfaces/ChainOp.html":{},"interfaces/PairedOp.html":{},"interfaces/PedalEvent.html":{},"interfaces/PlayerOp.html":{}}}],["javascript",{"_index":4483,"title":{},"body":{"index.html":{}}}],["javasscript/typescript",{"_index":4482,"title":{},"body":{"index.html":{}}}],["jpg",{"_index":1547,"title":{},"body":{"interfaces/DesignActions.html":{},"interfaces/DraftNodeProxy.html":{},"interfaces/FileObj.html":{},"interfaces/FileSaver.html":{},"interfaces/Fileloader.html":{},"interfaces/LoadResponse.html":{},"interfaces/NodeComponentProxy.html":{},"interfaces/OpComponentProxy.html":{},"interfaces/SaveObj.html":{},"interfaces/StatusMessage.html":{},"interfaces/TreeNodeProxy.html":{}}}],["js",{"_index":4373,"title":{},"body":{"dependencies.html":{}}}],["justify",{"_index":2124,"title":{},"body":{"components/DraftdetailComponent.html":{},"components/InletComponent.html":{},"components/NoteComponent.html":{},"components/ParameterComponent.html":{},"components/SnackbarComponent.html":{}}}],["keep",{"_index":3365,"title":{},"body":{"interfaces/Pedal.html":{},"classes/PedalStatus.html":{},"injectables/PedalsService.html":{}}}],["keeping",{"_index":1148,"title":{},"body":{"classes/DBListener.html":{},"classes/DBListenerArray.html":{},"classes/DBNode.html":{},"classes/DBNodeArray.html":{},"classes/DBTwoWay.html":{},"classes/DBTwoWayArray.html":{},"classes/DBWriteBuffer.html":{},"classes/DBWriter.html":{},"classes/DBWriterArray.html":{},"interfaces/NodeMethods.html":{},"interfaces/NodeParams.html":{},"classes/OnlineStatus.html":{}}}],["keeps",{"_index":1370,"title":{},"body":{"interfaces/DesignActions.html":{},"injectables/LayersService.html":{},"miscellaneous/typealiases.html":{}}}],["key",{"_index":177,"title":{},"body":{"classes/AbstractOpFactory.html":{},"classes/BaseOp.html":{},"classes/Branch.html":{},"classes/Bus.html":{},"classes/DBListener.html":{},"classes/DBListenerArray.html":{},"classes/DBNode.html":{},"classes/DBNodeArray.html":{},"classes/DBTwoWay.html":{},"classes/DBTwoWayArray.html":{},"classes/DBWriteBuffer.html":{},"classes/DBWriter.html":{},"classes/DBWriterArray.html":{},"injectables/MappingsService.html":{},"classes/Merge.html":{},"interfaces/NodeMethods.html":{},"interfaces/NodeParams.html":{},"classes/OnlineStatus.html":{},"interfaces/OpClassifier.html":{},"interfaces/OperationProperties.html":{},"interfaces/Pedal.html":{},"classes/PedalStatus.html":{},"injectables/PedalsService.html":{},"classes/Pipe.html":{},"classes/Seed.html":{},"interfaces/TopologyDef.html":{},"components/VirtualPedalsComponent.html":{}}}],["keyboardevent",{"_index":4268,"title":{},"body":{"components/VirtualPedalsComponent.html":{}}}],["keyed",{"_index":998,"title":{},"body":{"classes/DBListener.html":{},"classes/DBListenerArray.html":{},"classes/DBNode.html":{},"classes/DBNodeArray.html":{},"classes/DBTwoWay.html":{},"classes/DBTwoWayArray.html":{},"classes/DBWriteBuffer.html":{},"classes/DBWriter.html":{},"classes/DBWriterArray.html":{},"interfaces/NodeMethods.html":{},"interfaces/NodeParams.html":{},"classes/OnlineStatus.html":{},"miscellaneous/typealiases.html":{}}}],["keyof",{"_index":104,"title":{},"body":{"classes/AbstractOpFactory.html":{},"classes/BaseOp.html":{},"classes/Branch.html":{},"classes/Bus.html":{},"injectables/MappingsService.html":{},"classes/Merge.html":{},"interfaces/OpClassifier.html":{},"interfaces/OperationProperties.html":{},"classes/Pipe.html":{},"classes/Seed.html":{},"interfaces/TopologyDef.html":{}}}],["keys",{"_index":232,"title":{},"body":{"classes/AbstractOpFactory.html":{},"classes/BaseOp.html":{},"classes/Branch.html":{},"classes/Bus.html":{},"injectables/MappingsService.html":{},"classes/Merge.html":{},"interfaces/OpClassifier.html":{},"interfaces/OperationProperties.html":{},"classes/Pipe.html":{},"classes/Seed.html":{},"interfaces/TopologyDef.html":{}}}],["kind",{"_index":688,"title":{},"body":{"components/ConnectionComponent.html":{},"index.html":{}}}],["know",{"_index":2591,"title":{},"body":{"injectables/MappingsService.html":{},"injectables/PedalsService.html":{},"index.html":{}}}],["l",{"_index":3404,"title":{},"body":{"interfaces/Pedal.html":{},"classes/PedalStatus.html":{},"injectables/PedalsService.html":{}}}],["label",{"_index":2493,"title":{},"body":{"components/InletComponent.html":{},"components/MixerViewComponent.html":{},"components/ParameterComponent.html":{},"components/WeavingStateComponent.html":{}}}],["language",{"_index":1270,"title":{},"body":{"interfaces/DensityUnits.html":{},"interfaces/DesignMode.html":{},"interfaces/LoomTypes.html":{},"interfaces/MaterialTypes.html":{},"interfaces/ViewModes.html":{}}}],["large",{"_index":4538,"title":{},"body":{"index.html":{}}}],["larger",{"_index":2145,"title":{},"body":{"interfaces/DynamicOperation.html":{},"interfaces/OpInput.html":{},"interfaces/OperationClassification.html":{},"interfaces/TreeOperation.html":{}}}],["last",{"_index":3979,"title":{},"body":{"classes/Shape.html":{},"index.html":{}}}],["last_max",{"_index":4158,"title":{},"body":{"classes/System.html":{}}}],["last_ndx:interlacement",{"_index":1378,"title":{},"body":{"interfaces/DesignActions.html":{}}}],["lastnode",{"_index":1135,"title":{},"body":{"classes/DBListener.html":{},"classes/DBListenerArray.html":{},"classes/DBNode.html":{},"classes/DBNodeArray.html":{},"classes/DBTwoWay.html":{},"classes/DBTwoWayArray.html":{},"classes/DBWriteBuffer.html":{},"classes/DBWriter.html":{},"classes/DBWriterArray.html":{},"interfaces/NodeMethods.html":{},"interfaces/NodeParams.html":{},"classes/OnlineStatus.html":{}}}],["later",{"_index":4622,"title":{},"body":{"properties.html":{}}}],["layer",{"_index":1391,"title":{},"body":{"interfaces/DesignActions.html":{},"interfaces/DynamicOperation.html":{},"components/InletComponent.html":{},"interfaces/OpInput.html":{},"interfaces/OperationClassification.html":{},"interfaces/TreeOperation.html":{},"miscellaneous/functions.html":{}}}],["layer.createlayer",{"_index":1398,"title":{},"body":{"interfaces/DesignActions.html":{}}}],["layers",{"_index":1610,"title":{},"body":{"interfaces/DraftMap.html":{},"interfaces/Interlacement.html":{},"interfaces/InterlacementVal.html":{},"injectables/LayersService.html":{}}}],["layersservice",{"_index":1299,"title":{"injectables/LayersService.html":{}},"body":{"interfaces/DesignActions.html":{},"injectables/LayersService.html":{}}}],["leaves",{"_index":387,"title":{},"body":{"classes/Cell.html":{}}}],["left",{"_index":819,"title":{},"body":{"components/ConnectionComponent.html":{},"interfaces/DesignActions.html":{},"interfaces/DraftMap.html":{},"components/DraftdetailComponent.html":{},"components/InletComponent.html":{},"interfaces/Interlacement.html":{},"interfaces/InterlacementVal.html":{},"components/MixerViewComponent.html":{},"components/NoteComponent.html":{},"components/OpSequencerComponent.html":{},"components/OpsComponent.html":{},"components/ParameterComponent.html":{},"components/PlayerComponent.html":{},"classes/Shuttle.html":{},"components/SnackbarComponent.html":{},"components/WeavingStateComponent.html":{},"index.html":{}}}],["left_offset",{"_index":764,"title":{},"body":{"components/ConnectionComponent.html":{}}}],["left_offset*this.scale/this.default_cell_size",{"_index":766,"title":{},"body":{"components/ConnectionComponent.html":{}}}],["legacy",{"_index":198,"title":{},"body":{"classes/AbstractOpFactory.html":{},"classes/BaseOp.html":{},"classes/Branch.html":{},"classes/Bus.html":{},"interfaces/DynamicOperation.html":{},"classes/Merge.html":{},"interfaces/OpClassifier.html":{},"interfaces/OpInput.html":{},"interfaces/OperationClassification.html":{},"interfaces/OperationProperties.html":{},"classes/Pipe.html":{},"classes/Seed.html":{},"interfaces/TopologyDef.html":{},"interfaces/TreeOperation.html":{}}}],["legend",{"_index":825,"title":{},"body":{"components/ConnectionComponent.html":{},"components/DraftdetailComponent.html":{},"components/ImageComponent.html":{},"components/InletComponent.html":{},"components/MixerViewComponent.html":{},"components/NoteComponent.html":{},"components/OpHelpModal.html":{},"components/OpSequencerComponent.html":{},"components/OpsComponent.html":{},"components/ParameterComponent.html":{},"components/PlayerComponent.html":{},"components/SnackbarComponent.html":{},"components/VirtualPedalsComponent.html":{},"components/WeavingStateComponent.html":{}}}],["len",{"_index":4170,"title":{},"body":{"classes/System.html":{}}}],["length",{"_index":1040,"title":{},"body":{"classes/DBListener.html":{},"classes/DBListenerArray.html":{},"classes/DBNode.html":{},"classes/DBNodeArray.html":{},"classes/DBTwoWay.html":{},"classes/DBTwoWayArray.html":{},"classes/DBWriteBuffer.html":{},"classes/DBWriter.html":{},"classes/DBWriterArray.html":{},"interfaces/NodeMethods.html":{},"interfaces/NodeParams.html":{},"classes/OnlineStatus.html":{},"interfaces/Pedal.html":{},"classes/PedalStatus.html":{},"injectables/PedalsService.html":{},"classes/Shape.html":{}}}],["lengthnode",{"_index":1034,"title":{},"body":{"classes/DBListener.html":{},"classes/DBListenerArray.html":{},"classes/DBNode.html":{},"classes/DBNodeArray.html":{},"classes/DBTwoWay.html":{},"classes/DBTwoWayArray.html":{},"classes/DBWriteBuffer.html":{},"classes/DBWriter.html":{},"classes/DBWriterArray.html":{},"interfaces/NodeMethods.html":{},"interfaces/NodeParams.html":{},"classes/OnlineStatus.html":{}}}],["lengths",{"_index":4167,"title":{},"body":{"classes/System.html":{}}}],["less",{"_index":447,"title":{},"body":{"interfaces/ChainIndex.html":{},"injectables/SequencerService.html":{}}}],["lets",{"_index":3573,"title":{},"body":{"injectables/PedalsService.html":{}}}],["license",{"_index":4619,"title":{},"body":{"properties.html":{}}}],["lightgrey",{"_index":2482,"title":{},"body":{"components/InletComponent.html":{}}}],["line",{"_index":2111,"title":{},"body":{"components/DraftdetailComponent.html":{},"components/InletComponent.html":{},"components/MixerViewComponent.html":{},"components/OpsComponent.html":{},"components/ParameterComponent.html":{},"components/VirtualPedalsComponent.html":{}}}],["link",{"_index":291,"title":{},"body":{"classes/AbstractOpFactory.html":{},"classes/BaseOp.html":{},"classes/Branch.html":{},"classes/Bus.html":{},"classes/Merge.html":{},"interfaces/OpClassifier.html":{},"interfaces/OperationProperties.html":{},"classes/Pipe.html":{},"classes/Seed.html":{},"interfaces/TopologyDef.html":{},"index.html":{}}}],["linked",{"_index":2270,"title":{},"body":{"interfaces/IOTuple.html":{},"classes/Shape-1.html":{},"interfaces/TreeNode.html":{}}}],["linking",{"_index":1598,"title":{},"body":{"interfaces/DraftMap.html":{},"interfaces/Interlacement.html":{},"interfaces/InterlacementVal.html":{}}}],["links",{"_index":2288,"title":{},"body":{"interfaces/IOTuple.html":{},"interfaces/TreeNode.html":{}}}],["list",{"_index":400,"title":{},"body":{"classes/Cell.html":{},"interfaces/Crossing.html":{},"classes/DBListener.html":{},"classes/DBListenerArray.html":{},"classes/DBNode.html":{},"classes/DBNodeArray.html":{},"classes/DBTwoWay.html":{},"classes/DBTwoWayArray.html":{},"classes/DBWriteBuffer.html":{},"classes/DBWriter.html":{},"classes/DBWriterArray.html":{},"interfaces/DraftMap.html":{},"interfaces/DraftNodeProxy.html":{},"interfaces/FileObj.html":{},"interfaces/FileSaver.html":{},"interfaces/Fileloader.html":{},"interfaces/IOTuple.html":{},"interfaces/Interlacement.html":{},"interfaces/InterlacementVal.html":{},"interfaces/LoadResponse.html":{},"interfaces/NodeComponentProxy.html":{},"interfaces/NodeMethods.html":{},"interfaces/NodeParams.html":{},"classes/OnlineStatus.html":{},"interfaces/OpComponentProxy.html":{},"interfaces/OperationParam.html":{},"classes/Params.html":{},"interfaces/Pedal.html":{},"classes/PedalStatus.html":{},"injectables/PedalsService.html":{},"interfaces/SaveObj.html":{},"classes/Shuttle.html":{},"interfaces/StatusMessage.html":{},"interfaces/TreeNode.html":{},"interfaces/TreeNodeProxy.html":{},"interfaces/Vertex.html":{},"interfaces/YarnPath.html":{},"index.html":{},"miscellaneous/typealiases.html":{}}}],["listener",{"_index":1058,"title":{},"body":{"classes/DBListener.html":{},"classes/DBListenerArray.html":{},"classes/DBNode.html":{},"classes/DBNodeArray.html":{},"classes/DBTwoWay.html":{},"classes/DBTwoWayArray.html":{},"classes/DBWriteBuffer.html":{},"classes/DBWriter.html":{},"classes/DBWriterArray.html":{},"interfaces/NodeMethods.html":{},"interfaces/NodeParams.html":{},"classes/OnlineStatus.html":{}}}],["listeners",{"_index":3393,"title":{},"body":{"interfaces/Pedal.html":{},"classes/PedalStatus.html":{},"injectables/PedalsService.html":{}}}],["listening",{"_index":1128,"title":{},"body":{"classes/DBListener.html":{},"classes/DBListenerArray.html":{},"classes/DBNode.html":{},"classes/DBNodeArray.html":{},"classes/DBTwoWay.html":{},"classes/DBTwoWayArray.html":{},"classes/DBWriteBuffer.html":{},"classes/DBWriter.html":{},"classes/DBWriterArray.html":{},"interfaces/NodeMethods.html":{},"interfaces/NodeParams.html":{},"classes/OnlineStatus.html":{},"interfaces/Pedal.html":{},"classes/PedalStatus.html":{},"injectables/PedalsService.html":{}}}],["listens",{"_index":3447,"title":{},"body":{"interfaces/Pedal.html":{},"classes/PedalStatus.html":{},"injectables/PedalsService.html":{}}}],["listing",{"_index":3986,"title":{},"body":{"classes/Shape.html":{}}}],["lists",{"_index":2510,"title":{},"body":{"interfaces/LoomTypes.html":{}}}],["literal",{"_index":231,"title":{},"body":{"classes/AbstractOpFactory.html":{},"classes/BaseOp.html":{},"classes/Branch.html":{},"classes/Bus.html":{},"classes/Merge.html":{},"interfaces/OpClassifier.html":{},"interfaces/OperationProperties.html":{},"classes/Params.html":{},"classes/Pipe.html":{},"classes/Render.html":{},"classes/Seed.html":{},"interfaces/TopologyDef.html":{},"miscellaneous/typealiases.html":{}}}],["little",{"_index":2219,"title":{},"body":{"interfaces/DynamicOperation.html":{},"interfaces/OpInput.html":{},"interfaces/OperationClassification.html":{},"interfaces/TreeOperation.html":{}}}],["load",{"_index":1646,"title":{},"body":{"interfaces/DraftNodeProxy.html":{},"interfaces/DraftOperationClassification.html":{},"interfaces/FileObj.html":{},"interfaces/FileSaver.html":{},"interfaces/Fileloader.html":{},"interfaces/LoadResponse.html":{},"interfaces/LoomConfig.html":{},"interfaces/NodeComponentProxy.html":{},"interfaces/OpComponentProxy.html":{},"classes/OpSequencer.html":{},"classes/PedalConfig.html":{},"injectables/PlayerService.html":{},"interfaces/SaveObj.html":{},"interfaces/StatusMessage.html":{},"interfaces/TreeNodeProxy.html":{}}}],["loadconfig",{"_index":1710,"title":{},"body":{"interfaces/DraftOperationClassification.html":{},"interfaces/LoomConfig.html":{},"classes/PedalConfig.html":{},"injectables/PlayerService.html":{}}}],["loaded",{"_index":1852,"title":{},"body":{"interfaces/DraftOperationClassification.html":{},"interfaces/LoomConfig.html":{},"classes/PedalConfig.html":{},"injectables/PlayerService.html":{},"interfaces/PlayerState.html":{},"interfaces/PlayerState-1.html":{},"interfaces/WeavingLog.html":{},"interfaces/WeavingPick.html":{},"interfaces/WeavingPick-1.html":{}}}],["loading",{"_index":1641,"title":{},"body":{"interfaces/DraftNodeProxy.html":{},"interfaces/DynamicOperation.html":{},"interfaces/FileObj.html":{},"interfaces/FileSaver.html":{},"interfaces/Fileloader.html":{},"interfaces/LoadResponse.html":{},"interfaces/NodeComponentProxy.html":{},"interfaces/OpComponentProxy.html":{},"interfaces/OpInput.html":{},"interfaces/OperationClassification.html":{},"interfaces/SaveObj.html":{},"interfaces/StatusMessage.html":{},"interfaces/TreeNodeProxy.html":{},"interfaces/TreeOperation.html":{}}}],["loadresponse",{"_index":1671,"title":{"interfaces/LoadResponse.html":{}},"body":{"interfaces/DraftNodeProxy.html":{},"interfaces/FileObj.html":{},"interfaces/FileSaver.html":{},"interfaces/Fileloader.html":{},"interfaces/LoadResponse.html":{},"interfaces/NodeComponentProxy.html":{},"interfaces/OpComponentProxy.html":{},"interfaces/SaveObj.html":{},"interfaces/StatusMessage.html":{},"interfaces/TreeNodeProxy.html":{}}}],["loads",{"_index":3568,"title":{},"body":{"injectables/PedalsService.html":{}}}],["local",{"_index":2766,"title":{},"body":{"components/MixerViewComponent.html":{},"injectables/ViewportService.html":{},"index.html":{}}}],["local_view",{"_index":2718,"title":{},"body":{"components/MixerViewComponent.html":{}}}],["local_view:bounds",{"_index":2767,"title":{},"body":{"components/MixerViewComponent.html":{}}}],["location",{"_index":1613,"title":{},"body":{"interfaces/DraftMap.html":{},"interfaces/Interlacement.html":{},"interfaces/InterlacementVal.html":{},"injectables/ViewportService.html":{},"index.html":{}}}],["locations",{"_index":354,"title":{},"body":{"interfaces/Bounds.html":{},"interfaces/Point.html":{},"index.html":{}}}],["lodash",{"_index":4376,"title":{},"body":{"dependencies.html":{}}}],["logging",{"_index":4526,"title":{},"body":{"index.html":{}}}],["look",{"_index":2245,"title":{},"body":{"interfaces/DynamicOperation.html":{},"interfaces/OpInput.html":{},"interfaces/OperationClassification.html":{},"interfaces/TreeOperation.html":{}}}],["looking",{"_index":1359,"title":{},"body":{"interfaces/DesignActions.html":{},"interfaces/Ink.html":{},"injectables/InkService.html":{}}}],["loom",{"_index":355,"title":{},"body":{"interfaces/Bounds.html":{},"interfaces/DesignActions.html":{},"interfaces/DraftMap.html":{},"interfaces/DraftNodeProxy.html":{},"interfaces/DraftOperationClassification.html":{},"components/DraftdetailComponent.html":{},"interfaces/FileObj.html":{},"interfaces/FileSaver.html":{},"interfaces/Fileloader.html":{},"interfaces/IOTuple.html":{},"interfaces/Interlacement.html":{},"interfaces/InterlacementVal.html":{},"interfaces/LoadResponse.html":{},"interfaces/LoomConfig.html":{},"interfaces/NodeComponentProxy.html":{},"interfaces/OpComponentProxy.html":{},"interfaces/Pedal.html":{},"classes/PedalConfig.html":{},"classes/PedalStatus.html":{},"injectables/PedalsService.html":{},"injectables/PlayerService.html":{},"interfaces/PlayerState.html":{},"interfaces/PlayerState-1.html":{},"interfaces/Point.html":{},"interfaces/SaveObj.html":{},"interfaces/StatusMessage.html":{},"interfaces/TreeNode.html":{},"interfaces/TreeNodeProxy.html":{},"interfaces/WeavingLog.html":{},"interfaces/WeavingPick.html":{},"interfaces/WeavingPick-1.html":{},"components/WeavingStateComponent.html":{},"index.html":{},"miscellaneous/typealiases.html":{}}}],["loom_online",{"_index":3376,"title":{},"body":{"interfaces/Pedal.html":{},"classes/PedalStatus.html":{},"injectables/PedalsService.html":{}}}],["loom_ready",{"_index":3381,"title":{},"body":{"interfaces/Pedal.html":{},"classes/PedalStatus.html":{},"injectables/PedalsService.html":{}}}],["loom_settings",{"_index":1388,"title":{},"body":{"interfaces/DesignActions.html":{},"interfaces/DraftNodeProxy.html":{},"components/DraftdetailComponent.html":{},"interfaces/FileObj.html":{},"interfaces/FileSaver.html":{},"interfaces/Fileloader.html":{},"interfaces/IOTuple.html":{},"interfaces/LoadResponse.html":{},"interfaces/NodeComponentProxy.html":{},"interfaces/OpComponentProxy.html":{},"interfaces/SaveObj.html":{},"interfaces/StatusMessage.html":{},"interfaces/TreeNode.html":{},"interfaces/TreeNodeProxy.html":{}}}],["loom_settings.epi",{"_index":2083,"title":{},"body":{"components/DraftdetailComponent.html":{}}}],["loom_settings.type",{"_index":2079,"title":{},"body":{"components/DraftdetailComponent.html":{}}}],["loom_settings.units",{"_index":2081,"title":{},"body":{"components/DraftdetailComponent.html":{}}}],["loomconfig",{"_index":1693,"title":{"interfaces/LoomConfig.html":{}},"body":{"interfaces/DraftOperationClassification.html":{},"interfaces/LoomConfig.html":{},"classes/PedalConfig.html":{},"injectables/PlayerService.html":{}}}],["loomlisteners",{"_index":3546,"title":{},"body":{"injectables/PedalsService.html":{}}}],["loomlisteners(state",{"_index":3558,"title":{},"body":{"injectables/PedalsService.html":{}}}],["loompedals",{"_index":3547,"title":{},"body":{"injectables/PedalsService.html":{}}}],["loompedals(state",{"_index":3499,"title":{},"body":{"interfaces/Pedal.html":{},"classes/PedalStatus.html":{},"injectables/PedalsService.html":{}}}],["looms",{"_index":1636,"title":{},"body":{"interfaces/DraftNodeProxy.html":{},"interfaces/FileObj.html":{},"interfaces/FileSaver.html":{},"interfaces/Fileloader.html":{},"interfaces/IOTuple.html":{},"interfaces/LoadResponse.html":{},"interfaces/NodeComponentProxy.html":{},"interfaces/OpComponentProxy.html":{},"interfaces/SaveObj.html":{},"interfaces/StatusMessage.html":{},"interfaces/TreeNode.html":{},"interfaces/TreeNodeProxy.html":{}}}],["loomsettings",{"_index":1296,"title":{},"body":{"interfaces/DesignActions.html":{},"interfaces/DraftNodeProxy.html":{},"components/DraftdetailComponent.html":{},"interfaces/FileObj.html":{},"interfaces/FileSaver.html":{},"interfaces/Fileloader.html":{},"interfaces/IOTuple.html":{},"interfaces/LoadResponse.html":{},"interfaces/NodeComponentProxy.html":{},"interfaces/OpComponentProxy.html":{},"interfaces/SaveObj.html":{},"interfaces/StatusMessage.html":{},"interfaces/TreeNode.html":{},"interfaces/TreeNodeProxy.html":{},"miscellaneous/typealiases.html":{}}}],["loomtypes",{"_index":1266,"title":{"interfaces/LoomTypes.html":{}},"body":{"interfaces/DensityUnits.html":{},"interfaces/DesignMode.html":{},"interfaces/LoomTypes.html":{},"interfaces/MaterialTypes.html":{},"interfaces/ViewModes.html":{}}}],["loomupdate",{"_index":360,"title":{},"body":{"interfaces/Bounds.html":{},"interfaces/Point.html":{}}}],["loomutil",{"_index":4573,"title":{},"body":{"index.html":{},"miscellaneous/typealiases.html":{}}}],["lower",{"_index":1377,"title":{},"body":{"interfaces/DesignActions.html":{}}}],["m",{"_index":121,"title":{},"body":{"classes/AbstractOpFactory.html":{},"classes/BaseOp.html":{},"classes/Branch.html":{},"classes/Bus.html":{},"injectables/MappingsService.html":{},"classes/Merge.html":{},"interfaces/OpClassifier.html":{},"interfaces/OperationProperties.html":{},"classes/Pipe.html":{},"classes/Seed.html":{},"interfaces/TopologyDef.html":{}}}],["m.name",{"_index":2578,"title":{},"body":{"injectables/MappingsService.html":{}}}],["m.name.includes(opname)).length",{"_index":1765,"title":{},"body":{"interfaces/DraftOperationClassification.html":{},"interfaces/LoomConfig.html":{},"injectables/MappingsService.html":{},"classes/PedalConfig.html":{},"injectables/PlayerService.html":{}}}],["m.type",{"_index":2625,"title":{},"body":{"injectables/MappingsService.html":{}}}],["made",{"_index":2354,"title":{},"body":{"interfaces/Ink.html":{},"injectables/InkService.html":{}}}],["main",{"_index":1434,"title":{},"body":{"interfaces/DesignActions.html":{},"interfaces/DraftOperationClassification.html":{},"interfaces/LoomConfig.html":{},"components/NoteComponent.html":{},"interfaces/Pedal.html":{},"classes/PedalConfig.html":{},"classes/PedalStatus.html":{},"injectables/PedalsService.html":{},"injectables/PlayerService.html":{}}}],["maindraft",{"_index":2948,"title":{},"body":{"components/NoteComponent.html":{}}}],["make",{"_index":1564,"title":{},"body":{"interfaces/DesignActions.html":{},"interfaces/DraftOperationClassification.html":{},"interfaces/LoomConfig.html":{},"interfaces/OperationParam.html":{},"classes/Params.html":{},"interfaces/Pedal.html":{},"classes/PedalConfig.html":{},"classes/PedalStatus.html":{},"injectables/PedalsService.html":{},"injectables/PlayerService.html":{},"index.html":{}}}],["makeblankchainop",{"_index":4403,"title":{},"body":{"miscellaneous/functions.html":{}}}],["makeblankchainop(p",{"_index":598,"title":{},"body":{"interfaces/ChainOp.html":{},"interfaces/PairedOp.html":{},"interfaces/PedalEvent.html":{},"interfaces/PlayerOp.html":{},"miscellaneous/functions.html":{}}}],["makechainop",{"_index":435,"title":{},"body":{"interfaces/ChainIndex.html":{},"interfaces/DraftOperationClassification.html":{},"interfaces/LoomConfig.html":{},"injectables/MappingsService.html":{},"classes/PedalConfig.html":{},"injectables/PlayerService.html":{},"injectables/SequencerService.html":{},"miscellaneous/functions.html":{}}}],["makechainop([first_op].concat([o",{"_index":1751,"title":{},"body":{"interfaces/DraftOperationClassification.html":{},"interfaces/LoomConfig.html":{},"injectables/MappingsService.html":{},"classes/PedalConfig.html":{},"injectables/PlayerService.html":{}}}],["makechainop([first_op].concat(op_array",{"_index":1758,"title":{},"body":{"interfaces/DraftOperationClassification.html":{},"interfaces/LoomConfig.html":{},"injectables/MappingsService.html":{},"classes/PedalConfig.html":{},"injectables/PlayerService.html":{}}}],["makechainop([o",{"_index":483,"title":{},"body":{"interfaces/ChainIndex.html":{},"interfaces/DraftOperationClassification.html":{},"interfaces/LoomConfig.html":{},"injectables/MappingsService.html":{},"classes/PedalConfig.html":{},"injectables/PlayerService.html":{},"injectables/SequencerService.html":{}}}],["makechainop(ch.ops.concat([o",{"_index":491,"title":{},"body":{"interfaces/ChainIndex.html":{},"injectables/SequencerService.html":{}}}],["makechainop(curr_ops.concat([o",{"_index":1746,"title":{},"body":{"interfaces/DraftOperationClassification.html":{},"interfaces/LoomConfig.html":{},"injectables/MappingsService.html":{},"classes/PedalConfig.html":{},"injectables/PlayerService.html":{}}}],["makechainop(curr_ops.concat(op_array",{"_index":1755,"title":{},"body":{"interfaces/DraftOperationClassification.html":{},"interfaces/LoomConfig.html":{},"injectables/MappingsService.html":{},"classes/PedalConfig.html":{},"injectables/PlayerService.html":{}}}],["makechainop(op_array",{"_index":1762,"title":{},"body":{"interfaces/DraftOperationClassification.html":{},"interfaces/LoomConfig.html":{},"injectables/MappingsService.html":{},"classes/PedalConfig.html":{},"injectables/PlayerService.html":{}}}],["makechainop(ops",{"_index":600,"title":{},"body":{"interfaces/ChainOp.html":{},"interfaces/PairedOp.html":{},"interfaces/PedalEvent.html":{},"interfaces/PlayerOp.html":{},"miscellaneous/functions.html":{}}}],["makeopsequencer",{"_index":434,"title":{},"body":{"interfaces/ChainIndex.html":{},"interfaces/ChainOp.html":{},"interfaces/DraftOperationClassification.html":{},"interfaces/LoomConfig.html":{},"injectables/MappingsService.html":{},"interfaces/PairedOp.html":{},"classes/PedalConfig.html":{},"interfaces/PedalEvent.html":{},"interfaces/PlayerOp.html":{},"injectables/PlayerService.html":{},"injectables/SequencerService.html":{},"miscellaneous/functions.html":{}}}],["makeopsequencer(conf",{"_index":2637,"title":{},"body":{"injectables/MappingsService.html":{},"classes/OpSequencer.html":{},"miscellaneous/functions.html":{}}}],["makepairedop",{"_index":1683,"title":{},"body":{"interfaces/DraftOperationClassification.html":{},"interfaces/LoomConfig.html":{},"injectables/MappingsService.html":{},"classes/PedalConfig.html":{},"injectables/PlayerService.html":{},"miscellaneous/functions.html":{}}}],["makepairedop(id",{"_index":2633,"title":{},"body":{"injectables/MappingsService.html":{}}}],["makepairedop(p",{"_index":591,"title":{},"body":{"interfaces/ChainOp.html":{},"interfaces/PairedOp.html":{},"interfaces/PedalEvent.html":{},"interfaces/PlayerOp.html":{},"miscellaneous/functions.html":{}}}],["makepairedop(pedalid",{"_index":1739,"title":{},"body":{"interfaces/DraftOperationClassification.html":{},"interfaces/LoomConfig.html":{},"classes/PedalConfig.html":{},"injectables/PlayerService.html":{}}}],["makes",{"_index":4147,"title":{},"body":{"classes/System.html":{},"miscellaneous/functions.html":{}}}],["makesystemsunique",{"_index":4406,"title":{},"body":{"miscellaneous/functions.html":{}}}],["makesystemsunique(systems",{"_index":4153,"title":{},"body":{"classes/System.html":{},"miscellaneous/functions.html":{}}}],["maketopofactory",{"_index":4408,"title":{},"body":{"miscellaneous/functions.html":{}}}],["maketopofactory(\"bus",{"_index":308,"title":{},"body":{"classes/AbstractOpFactory.html":{},"classes/BaseOp.html":{},"classes/Branch.html":{},"classes/Bus.html":{},"classes/Merge.html":{},"interfaces/OpClassifier.html":{},"interfaces/OperationProperties.html":{},"classes/Pipe.html":{},"classes/Seed.html":{},"interfaces/TopologyDef.html":{}}}],["maketopofactory(\"merge",{"_index":307,"title":{},"body":{"classes/AbstractOpFactory.html":{},"classes/BaseOp.html":{},"classes/Branch.html":{},"classes/Bus.html":{},"classes/Merge.html":{},"interfaces/OpClassifier.html":{},"interfaces/OperationProperties.html":{},"classes/Pipe.html":{},"classes/Seed.html":{},"interfaces/TopologyDef.html":{}}}],["maketopofactory(\"pipe",{"_index":306,"title":{},"body":{"classes/AbstractOpFactory.html":{},"classes/BaseOp.html":{},"classes/Branch.html":{},"classes/Bus.html":{},"classes/Merge.html":{},"interfaces/OpClassifier.html":{},"interfaces/OperationProperties.html":{},"classes/Pipe.html":{},"classes/Seed.html":{},"interfaces/TopologyDef.html":{}}}],["maketopofactory(\"seed",{"_index":305,"title":{},"body":{"classes/AbstractOpFactory.html":{},"classes/BaseOp.html":{},"classes/Branch.html":{},"classes/Bus.html":{},"classes/Merge.html":{},"interfaces/OpClassifier.html":{},"interfaces/OperationProperties.html":{},"classes/Pipe.html":{},"classes/Seed.html":{},"interfaces/TopologyDef.html":{}}}],["maketopofactory(topo",{"_index":295,"title":{},"body":{"classes/AbstractOpFactory.html":{},"classes/BaseOp.html":{},"classes/Branch.html":{},"classes/Bus.html":{},"classes/Merge.html":{},"interfaces/OpClassifier.html":{},"interfaces/OperationProperties.html":{},"classes/Pipe.html":{},"classes/Seed.html":{},"interfaces/TopologyDef.html":{},"miscellaneous/functions.html":{}}}],["making",{"_index":2593,"title":{},"body":{"injectables/MappingsService.html":{},"classes/System.html":{},"miscellaneous/functions.html":{},"index.html":{}}}],["manager",{"_index":4479,"title":{},"body":{"index.html":{}}}],["manages",{"_index":3990,"title":{},"body":{"classes/Shape-1.html":{}}}],["manipulates",{"_index":4523,"title":{},"body":{"index.html":{}}}],["manipulation",{"_index":4525,"title":{},"body":{"index.html":{}}}],["many",{"_index":117,"title":{},"body":{"classes/AbstractOpFactory.html":{},"classes/BaseOp.html":{},"classes/Branch.html":{},"classes/Bus.html":{},"interfaces/IOTuple.html":{},"injectables/LayersService.html":{},"classes/Merge.html":{},"interfaces/OpClassifier.html":{},"interfaces/OperationProperties.html":{},"interfaces/Pedal.html":{},"classes/PedalStatus.html":{},"injectables/PedalsService.html":{},"classes/Pipe.html":{},"classes/Seed.html":{},"interfaces/TopologyDef.html":{},"interfaces/TreeNode.html":{},"index.html":{}}}],["map",{"_index":1909,"title":{},"body":{"interfaces/DraftOperationClassification.html":{},"interfaces/LoomConfig.html":{},"components/OpsComponent.html":{},"classes/PedalConfig.html":{},"injectables/PlayerService.html":{},"classes/System.html":{},"components/WeavingStateComponent.html":{},"miscellaneous/functions.html":{}}}],["map((el",{"_index":1886,"title":{},"body":{"interfaces/DraftOperationClassification.html":{},"interfaces/LoomConfig.html":{},"classes/PedalConfig.html":{},"injectables/PlayerService.html":{}}}],["map(value",{"_index":3252,"title":{},"body":{"components/OpsComponent.html":{}}}],["map.getmap(p.id).name",{"_index":4331,"title":{},"body":{"components/WeavingStateComponent.html":{}}}],["mapped",{"_index":1761,"title":{},"body":{"interfaces/DraftOperationClassification.html":{},"interfaces/LoomConfig.html":{},"injectables/MappingsService.html":{},"classes/OpSequencer.html":{},"classes/PedalConfig.html":{},"injectables/PlayerService.html":{},"interfaces/PlayerState.html":{},"interfaces/PlayerState-1.html":{},"interfaces/WeavingLog.html":{},"interfaces/WeavingPick.html":{},"interfaces/WeavingPick-1.html":{},"miscellaneous/typealiases.html":{}}}],["mapped.perform(this.state",{"_index":1916,"title":{},"body":{"interfaces/DraftOperationClassification.html":{},"interfaces/LoomConfig.html":{},"classes/PedalConfig.html":{},"injectables/PlayerService.html":{}}}],["mappedal",{"_index":3021,"title":{},"body":{"classes/OpSequencer.html":{},"injectables/SequencerService.html":{}}}],["mappedal(id",{"_index":3042,"title":{},"body":{"classes/OpSequencer.html":{},"injectables/SequencerService.html":{}}}],["mapping",{"_index":1708,"title":{},"body":{"interfaces/DraftOperationClassification.html":{},"interfaces/LoomConfig.html":{},"injectables/MappingsService.html":{},"classes/PedalConfig.html":{},"injectables/PlayerService.html":{},"classes/Shape.html":{},"index.html":{}}}],["mappingindex",{"_index":2555,"title":{},"body":{"injectables/MappingsService.html":{},"miscellaneous/functions.html":{},"miscellaneous/typealiases.html":{}}}],["mappings",{"_index":1787,"title":{},"body":{"interfaces/DraftOperationClassification.html":{},"interfaces/LoomConfig.html":{},"injectables/MappingsService.html":{},"classes/PedalConfig.html":{},"injectables/PlayerService.html":{},"classes/System.html":{},"miscellaneous/functions.html":{}}}],["mappings.addoperation(forward",{"_index":1801,"title":{},"body":{"interfaces/DraftOperationClassification.html":{},"interfaces/LoomConfig.html":{},"classes/PedalConfig.html":{},"injectables/PlayerService.html":{}}}],["mappings.addoperation(p_op",{"_index":1806,"title":{},"body":{"interfaces/DraftOperationClassification.html":{},"interfaces/LoomConfig.html":{},"classes/PedalConfig.html":{},"injectables/PlayerService.html":{}}}],["mappings.addoperation(refresh",{"_index":1802,"title":{},"body":{"interfaces/DraftOperationClassification.html":{},"interfaces/LoomConfig.html":{},"classes/PedalConfig.html":{},"injectables/PlayerService.html":{}}}],["mappings.addoperation(reverse",{"_index":1803,"title":{},"body":{"interfaces/DraftOperationClassification.html":{},"interfaces/LoomConfig.html":{},"classes/PedalConfig.html":{},"injectables/PlayerService.html":{}}}],["mappings.addoperation(tile",{"_index":1845,"title":{},"body":{"interfaces/DraftOperationClassification.html":{},"interfaces/LoomConfig.html":{},"classes/PedalConfig.html":{},"injectables/PlayerService.html":{}}}],["mappings.pair(0",{"_index":1865,"title":{},"body":{"interfaces/DraftOperationClassification.html":{},"interfaces/LoomConfig.html":{},"classes/PedalConfig.html":{},"injectables/PlayerService.html":{}}}],["mappings.pedalismapped(0",{"_index":1867,"title":{},"body":{"interfaces/DraftOperationClassification.html":{},"interfaces/LoomConfig.html":{},"classes/PedalConfig.html":{},"injectables/PlayerService.html":{}}}],["mappings.unmap(0",{"_index":1868,"title":{},"body":{"interfaces/DraftOperationClassification.html":{},"interfaces/LoomConfig.html":{},"classes/PedalConfig.html":{},"injectables/PlayerService.html":{}}}],["mappings[0",{"_index":1869,"title":{},"body":{"interfaces/DraftOperationClassification.html":{},"interfaces/LoomConfig.html":{},"classes/PedalConfig.html":{},"injectables/PlayerService.html":{}}}],["mappings[1",{"_index":1871,"title":{},"body":{"interfaces/DraftOperationClassification.html":{},"interfaces/LoomConfig.html":{},"classes/PedalConfig.html":{},"injectables/PlayerService.html":{}}}],["mappingshapes",{"_index":619,"title":{},"body":{"interfaces/ChainOp.html":{},"injectables/MappingsService.html":{},"interfaces/PairedOp.html":{},"interfaces/PedalEvent.html":{},"interfaces/PlayerOp.html":{},"miscellaneous/typealiases.html":{}}}],["mappingshapes[keyof",{"_index":621,"title":{},"body":{"interfaces/ChainOp.html":{},"interfaces/PairedOp.html":{},"interfaces/PedalEvent.html":{},"interfaces/PlayerOp.html":{}}}],["mappingsservice",{"_index":1686,"title":{"injectables/MappingsService.html":{}},"body":{"interfaces/DraftOperationClassification.html":{},"interfaces/LoomConfig.html":{},"injectables/MappingsService.html":{},"classes/PedalConfig.html":{},"injectables/PlayerService.html":{},"components/WeavingStateComponent.html":{}}}],["mappingtype",{"_index":622,"title":{},"body":{"interfaces/ChainOp.html":{},"injectables/MappingsService.html":{},"interfaces/PairedOp.html":{},"interfaces/PedalEvent.html":{},"interfaces/PlayerOp.html":{},"miscellaneous/typealiases.html":{}}}],["maps",{"_index":4146,"title":{},"body":{"classes/System.html":{},"miscellaneous/functions.html":{}}}],["margin",{"_index":2103,"title":{},"body":{"components/DraftdetailComponent.html":{},"components/InletComponent.html":{},"components/MixerViewComponent.html":{},"components/OpSequencerComponent.html":{},"components/OpsComponent.html":{},"components/ParameterComponent.html":{},"components/PlayerComponent.html":{},"classes/Shape-1.html":{},"components/VirtualPedalsComponent.html":{},"components/WeavingStateComponent.html":{}}}],["margin_clear_x",{"_index":3806,"title":{},"body":{"classes/Render.html":{}}}],["margin_clear_y",{"_index":3807,"title":{},"body":{"classes/Render.html":{}}}],["margin_fill_x",{"_index":3804,"title":{},"body":{"classes/Render.html":{}}}],["margin_fill_y",{"_index":3805,"title":{},"body":{"classes/Render.html":{}}}],["marquee",{"_index":2654,"title":{},"body":{"directives/MarqueeComponent.html":{}}}],["marquee'},{'name",{"_index":863,"title":{},"body":{"components/ConnectionComponent.html":{},"components/DraftdetailComponent.html":{},"components/ImageComponent.html":{},"components/InletComponent.html":{},"components/MixerViewComponent.html":{},"components/NoteComponent.html":{},"components/OpHelpModal.html":{},"components/OpSequencerComponent.html":{},"components/OpsComponent.html":{},"components/ParameterComponent.html":{},"components/PlayerComponent.html":{},"components/SnackbarComponent.html":{},"components/VirtualPedalsComponent.html":{},"components/WeavingStateComponent.html":{}}}],["marqueecomponent",{"_index":862,"title":{"directives/MarqueeComponent.html":{}},"body":{"components/ConnectionComponent.html":{},"components/DraftdetailComponent.html":{},"components/ImageComponent.html":{},"components/InletComponent.html":{},"directives/MarqueeComponent.html":{},"modules/MixerModule.html":{},"components/MixerViewComponent.html":{},"components/NoteComponent.html":{},"components/OpHelpModal.html":{},"components/OpSequencerComponent.html":{},"components/OpsComponent.html":{},"components/ParameterComponent.html":{},"components/PlayerComponent.html":{},"components/SnackbarComponent.html":{},"components/VirtualPedalsComponent.html":{},"components/WeavingStateComponent.html":{},"overview.html":{}}}],["mask",{"_index":2330,"title":{},"body":{"interfaces/Ink.html":{},"injectables/InkService.html":{}}}],["masking",{"_index":2327,"title":{},"body":{"interfaces/Ink.html":{},"injectables/InkService.html":{}}}],["mat",{"_index":2116,"title":{},"body":{"components/DraftdetailComponent.html":{},"components/InletComponent.html":{},"components/MixerViewComponent.html":{},"components/NoteComponent.html":{},"components/OpSequencerComponent.html":{},"components/OpsComponent.html":{},"components/ParameterComponent.html":{},"components/PlayerComponent.html":{},"components/VirtualPedalsComponent.html":{},"components/WeavingStateComponent.html":{}}}],["mat_dialog_data",{"_index":2005,"title":{},"body":{"components/DraftdetailComponent.html":{},"components/MixerViewComponent.html":{},"components/OpHelpModal.html":{},"components/OpsComponent.html":{}}}],["mat_snack_bar_data",{"_index":4108,"title":{},"body":{"components/SnackbarComponent.html":{}}}],["match",{"_index":123,"title":{},"body":{"classes/AbstractOpFactory.html":{},"classes/BaseOp.html":{},"classes/Branch.html":{},"classes/Bus.html":{},"classes/Merge.html":{},"interfaces/OpClassifier.html":{},"interfaces/OperationProperties.html":{},"classes/Pipe.html":{},"classes/Seed.html":{},"interfaces/TopologyDef.html":{}}}],["matching",{"_index":318,"title":{},"body":{"classes/AbstractOpFactory.html":{},"classes/BaseOp.html":{},"interfaces/Bounds.html":{},"classes/Branch.html":{},"classes/Bus.html":{},"classes/Cell.html":{},"interfaces/ChainIndex.html":{},"interfaces/ChainOp.html":{},"components/ConnectionComponent.html":{},"interfaces/Crossing.html":{},"classes/DBListener.html":{},"classes/DBListenerArray.html":{},"classes/DBNode.html":{},"classes/DBNodeArray.html":{},"classes/DBTwoWay.html":{},"classes/DBTwoWayArray.html":{},"classes/DBWriteBuffer.html":{},"classes/DBWriter.html":{},"classes/DBWriterArray.html":{},"interfaces/DensityUnits.html":{},"interfaces/DesignActions.html":{},"interfaces/DesignMode.html":{},"interfaces/DraftMap.html":{},"interfaces/DraftNodeProxy.html":{},"interfaces/DraftOperationClassification.html":{},"components/DraftdetailComponent.html":{},"interfaces/DynamicOperation.html":{},"interfaces/FileObj.html":{},"interfaces/FileSaver.html":{},"interfaces/Fileloader.html":{},"interfaces/IOTuple.html":{},"components/ImageComponent.html":{},"interfaces/Ink.html":{},"injectables/InkService.html":{},"components/InletComponent.html":{},"interfaces/Interlacement.html":{},"interfaces/InterlacementVal.html":{},"injectables/LayersService.html":{},"interfaces/LoadResponse.html":{},"interfaces/LoomConfig.html":{},"interfaces/LoomTypes.html":{},"injectables/MappingsService.html":{},"directives/MarqueeComponent.html":{},"interfaces/MaterialTypes.html":{},"classes/Merge.html":{},"modules/MixerModule.html":{},"components/MixerViewComponent.html":{},"interfaces/NodeComponentProxy.html":{},"interfaces/NodeMethods.html":{},"interfaces/NodeParams.html":{},"components/NoteComponent.html":{},"classes/OnlineStatus.html":{},"interfaces/OpClassifier.html":{},"interfaces/OpComponentProxy.html":{},"components/OpHelpModal.html":{},"interfaces/OpInput.html":{},"classes/OpSequencer.html":{},"components/OpSequencerComponent.html":{},"interfaces/OperationClassification.html":{},"interfaces/OperationParam.html":{},"interfaces/OperationProperties.html":{},"components/OpsComponent.html":{},"interfaces/PairedOp.html":{},"components/ParameterComponent.html":{},"classes/Params.html":{},"interfaces/Pedal.html":{},"classes/PedalConfig.html":{},"interfaces/PedalEvent.html":{},"classes/PedalStatus.html":{},"injectables/PedalsService.html":{},"classes/Pipe.html":{},"components/PlayerComponent.html":{},"modules/PlayerModule.html":{},"interfaces/PlayerOp.html":{},"injectables/PlayerService.html":{},"interfaces/PlayerState.html":{},"interfaces/PlayerState-1.html":{},"interfaces/Point.html":{},"classes/Render.html":{},"interfaces/SaveObj.html":{},"classes/Seed.html":{},"classes/Selection.html":{},"directives/SelectionComponent.html":{},"injectables/SequencerService.html":{},"classes/Shape.html":{},"classes/Shape-1.html":{},"classes/Shuttle.html":{},"components/SnackbarComponent.html":{},"interfaces/StatusMessage.html":{},"classes/System.html":{},"interfaces/TopologyDef.html":{},"interfaces/TreeNode.html":{},"interfaces/TreeNodeProxy.html":{},"interfaces/TreeOperation.html":{},"interfaces/Vertex.html":{},"interfaces/ViewModes.html":{},"injectables/ViewportService.html":{},"components/VirtualPedalsComponent.html":{},"interfaces/WeavingLog.html":{},"interfaces/WeavingPick.html":{},"interfaces/WeavingPick-1.html":{},"components/WeavingStateComponent.html":{},"interfaces/YarnPath.html":{},"dependencies.html":{},"miscellaneous/functions.html":{},"index.html":{},"modules.html":{},"overview.html":{},"properties.html":{},"miscellaneous/typealiases.html":{}}}],["matdialog",{"_index":1309,"title":{},"body":{"interfaces/DesignActions.html":{},"components/MixerViewComponent.html":{},"components/OpsComponent.html":{}}}],["matdialogref",{"_index":1310,"title":{},"body":{"interfaces/DesignActions.html":{},"components/DraftdetailComponent.html":{},"components/MixerViewComponent.html":{},"components/OpHelpModal.html":{},"components/OpsComponent.html":{}}}],["material",{"_index":895,"title":{},"body":{"interfaces/Crossing.html":{},"classes/Shuttle.html":{},"interfaces/Vertex.html":{},"interfaces/YarnPath.html":{}}}],["material_id",{"_index":894,"title":{},"body":{"interfaces/Crossing.html":{},"interfaces/Vertex.html":{},"interfaces/YarnPath.html":{},"index.html":{}}}],["materials",{"_index":1606,"title":{},"body":{"interfaces/DraftMap.html":{},"interfaces/DraftNodeProxy.html":{},"interfaces/FileObj.html":{},"interfaces/FileSaver.html":{},"interfaces/Fileloader.html":{},"interfaces/Interlacement.html":{},"interfaces/InterlacementVal.html":{},"interfaces/LoadResponse.html":{},"interfaces/NodeComponentProxy.html":{},"interfaces/OpComponentProxy.html":{},"interfaces/SaveObj.html":{},"classes/Selection.html":{},"interfaces/StatusMessage.html":{},"interfaces/TreeNodeProxy.html":{}}}],["materialsservice",{"_index":1316,"title":{},"body":{"interfaces/DesignActions.html":{},"components/DraftdetailComponent.html":{},"components/WeavingStateComponent.html":{}}}],["materialtypes",{"_index":1267,"title":{"interfaces/MaterialTypes.html":{}},"body":{"interfaces/DensityUnits.html":{},"interfaces/DesignMode.html":{},"interfaces/LoomTypes.html":{},"interfaces/MaterialTypes.html":{},"interfaces/ViewModes.html":{}}}],["math.abs(this.start.j",{"_index":3875,"title":{},"body":{"classes/Selection.html":{}}}],["math.abs(this.start.si",{"_index":3877,"title":{},"body":{"classes/Selection.html":{}}}],["math.floor((p.x",{"_index":1500,"title":{},"body":{"interfaces/DesignActions.html":{}}}],["math.floor((p.y",{"_index":1499,"title":{},"body":{"interfaces/DesignActions.html":{}}}],["math.floor(bounds.width/scale",{"_index":4031,"title":{},"body":{"classes/Shape-1.html":{}}}],["math.max(parent.bounds.height",{"_index":1478,"title":{},"body":{"interfaces/DesignActions.html":{}}}],["math.max(parent.bounds.width",{"_index":1477,"title":{},"body":{"interfaces/DesignActions.html":{}}}],["math.min(this.start.j",{"_index":3882,"title":{},"body":{"classes/Selection.html":{}}}],["math.min(this.start.si",{"_index":3881,"title":{},"body":{"classes/Selection.html":{}}}],["mathjs",{"_index":713,"title":{},"body":{"components/ConnectionComponent.html":{},"dependencies.html":{}}}],["matter",{"_index":2316,"title":{},"body":{"interfaces/Ink.html":{},"injectables/InkService.html":{}}}],["mattooltipmodule",{"_index":3236,"title":{},"body":{"components/OpsComponent.html":{}}}],["max",{"_index":3105,"title":{},"body":{"components/OpSequencerComponent.html":{},"interfaces/OperationParam.html":{},"classes/Params.html":{},"components/PlayerComponent.html":{},"classes/Render.html":{},"components/WeavingStateComponent.html":{}}}],["max_in_systems",{"_index":4155,"title":{},"body":{"classes/System.html":{}}}],["max_in_systems[ndx",{"_index":4161,"title":{},"body":{"classes/System.html":{}}}],["max_inputs",{"_index":203,"title":{},"body":{"classes/AbstractOpFactory.html":{},"classes/BaseOp.html":{},"classes/Branch.html":{},"classes/Bus.html":{},"interfaces/DynamicOperation.html":{},"classes/Merge.html":{},"interfaces/OpClassifier.html":{},"interfaces/OpInput.html":{},"interfaces/OperationClassification.html":{},"interfaces/OperationProperties.html":{},"classes/Pipe.html":{},"classes/Seed.html":{},"interfaces/TopologyDef.html":{},"interfaces/TreeOperation.html":{}}}],["max_length:number",{"_index":4168,"title":{},"body":{"classes/System.html":{}}}],["maximum",{"_index":204,"title":{},"body":{"classes/AbstractOpFactory.html":{},"classes/BaseOp.html":{},"classes/Branch.html":{},"classes/Bus.html":{},"classes/Merge.html":{},"interfaces/OpClassifier.html":{},"interfaces/OperationParam.html":{},"interfaces/OperationProperties.html":{},"classes/Params.html":{},"classes/Pipe.html":{},"classes/Seed.html":{},"classes/System.html":{},"interfaces/TopologyDef.html":{},"miscellaneous/functions.html":{}}}],["maybe",{"_index":3975,"title":{},"body":{"classes/Shape.html":{}}}],["meaning",{"_index":2997,"title":{},"body":{"components/OpHelpModal.html":{}}}],["means",{"_index":995,"title":{},"body":{"classes/DBListener.html":{},"classes/DBListenerArray.html":{},"classes/DBNode.html":{},"classes/DBNodeArray.html":{},"classes/DBTwoWay.html":{},"classes/DBTwoWayArray.html":{},"classes/DBWriteBuffer.html":{},"classes/DBWriter.html":{},"classes/DBWriterArray.html":{},"interfaces/IOTuple.html":{},"interfaces/NodeMethods.html":{},"interfaces/NodeParams.html":{},"classes/OnlineStatus.html":{},"interfaces/OperationParam.html":{},"classes/Params.html":{},"interfaces/TreeNode.html":{}}}],["memory",{"_index":4566,"title":{},"body":{"index.html":{}}}],["menu",{"_index":1282,"title":{},"body":{"interfaces/DensityUnits.html":{},"interfaces/DesignMode.html":{},"components/DraftdetailComponent.html":{},"interfaces/DynamicOperation.html":{},"interfaces/LoomTypes.html":{},"interfaces/MaterialTypes.html":{},"interfaces/OpInput.html":{},"components/OpSequencerComponent.html":{},"interfaces/OperationClassification.html":{},"components/PlayerComponent.html":{},"interfaces/TreeOperation.html":{},"interfaces/ViewModes.html":{}}}],["merge",{"_index":101,"title":{"classes/Merge.html":{}},"body":{"classes/AbstractOpFactory.html":{},"classes/BaseOp.html":{},"classes/Branch.html":{},"classes/Bus.html":{},"interfaces/DynamicOperation.html":{},"classes/Merge.html":{},"interfaces/OpClassifier.html":{},"interfaces/OpInput.html":{},"interfaces/OperationClassification.html":{},"interfaces/OperationProperties.html":{},"classes/Pipe.html":{},"classes/Seed.html":{},"interfaces/TopologyDef.html":{},"interfaces/TreeOperation.html":{}}}],["mergeop",{"_index":2213,"title":{},"body":{"interfaces/DynamicOperation.html":{},"interfaces/OpInput.html":{},"interfaces/OperationClassification.html":{},"interfaces/TreeOperation.html":{}}}],["mergeoperation",{"_index":311,"title":{},"body":{"classes/AbstractOpFactory.html":{},"classes/BaseOp.html":{},"classes/Branch.html":{},"classes/Bus.html":{},"classes/Merge.html":{},"interfaces/OpClassifier.html":{},"interfaces/OperationProperties.html":{},"classes/Pipe.html":{},"classes/Seed.html":{},"interfaces/TopologyDef.html":{}}}],["message",{"_index":1669,"title":{},"body":{"interfaces/DraftNodeProxy.html":{},"interfaces/FileObj.html":{},"interfaces/FileSaver.html":{},"interfaces/Fileloader.html":{},"interfaces/LoadResponse.html":{},"interfaces/NodeComponentProxy.html":{},"interfaces/OpComponentProxy.html":{},"interfaces/OperationParam.html":{},"classes/Params.html":{},"interfaces/SaveObj.html":{},"components/SnackbarComponent.html":{},"interfaces/StatusMessage.html":{},"interfaces/TreeNodeProxy.html":{}}}],["metadata",{"_index":191,"title":{},"body":{"classes/AbstractOpFactory.html":{},"classes/BaseOp.html":{},"classes/Branch.html":{},"classes/Bus.html":{},"components/ConnectionComponent.html":{},"components/DraftdetailComponent.html":{},"components/ImageComponent.html":{},"components/InletComponent.html":{},"directives/MarqueeComponent.html":{},"classes/Merge.html":{},"components/MixerViewComponent.html":{},"components/NoteComponent.html":{},"interfaces/OpClassifier.html":{},"components/OpHelpModal.html":{},"components/OpSequencerComponent.html":{},"interfaces/OperationProperties.html":{},"components/OpsComponent.html":{},"components/ParameterComponent.html":{},"classes/Pipe.html":{},"components/PlayerComponent.html":{},"classes/Seed.html":{},"directives/SelectionComponent.html":{},"components/SnackbarComponent.html":{},"interfaces/TopologyDef.html":{},"components/VirtualPedalsComponent.html":{},"components/WeavingStateComponent.html":{}}}],["method",{"_index":109,"title":{},"body":{"classes/AbstractOpFactory.html":{},"classes/BaseOp.html":{},"classes/Branch.html":{},"classes/Bus.html":{},"classes/DBListener.html":{},"classes/DBListenerArray.html":{},"classes/DBNode.html":{},"classes/DBNodeArray.html":{},"classes/DBTwoWay.html":{},"classes/DBTwoWayArray.html":{},"classes/DBWriteBuffer.html":{},"classes/DBWriter.html":{},"classes/DBWriterArray.html":{},"classes/Merge.html":{},"interfaces/NodeMethods.html":{},"interfaces/NodeParams.html":{},"classes/OnlineStatus.html":{},"interfaces/OpClassifier.html":{},"classes/OpSequencer.html":{},"interfaces/OperationProperties.html":{},"classes/Pipe.html":{},"classes/Seed.html":{},"interfaces/TopologyDef.html":{}}}],["methods",{"_index":8,"title":{},"body":{"classes/AbstractOpFactory.html":{},"classes/BaseOp.html":{},"classes/Cell.html":{},"interfaces/ChainIndex.html":{},"components/ConnectionComponent.html":{},"classes/DBListener.html":{},"classes/DBListenerArray.html":{},"classes/DBNode.html":{},"classes/DBNodeArray.html":{},"classes/DBTwoWay.html":{},"classes/DBTwoWayArray.html":{},"classes/DBWriteBuffer.html":{},"classes/DBWriter.html":{},"classes/DBWriterArray.html":{},"components/DraftdetailComponent.html":{},"components/ImageComponent.html":{},"injectables/InkService.html":{},"components/InletComponent.html":{},"injectables/LayersService.html":{},"injectables/MappingsService.html":{},"directives/MarqueeComponent.html":{},"components/MixerViewComponent.html":{},"interfaces/NodeMethods.html":{},"interfaces/NodeParams.html":{},"components/NoteComponent.html":{},"classes/OnlineStatus.html":{},"components/OpHelpModal.html":{},"classes/OpSequencer.html":{},"components/OpSequencerComponent.html":{},"components/OpsComponent.html":{},"components/ParameterComponent.html":{},"classes/Params.html":{},"classes/PedalConfig.html":{},"classes/PedalStatus.html":{},"injectables/PedalsService.html":{},"components/PlayerComponent.html":{},"injectables/PlayerService.html":{},"classes/Render.html":{},"classes/Selection.html":{},"directives/SelectionComponent.html":{},"injectables/SequencerService.html":{},"classes/Shape.html":{},"classes/Shape-1.html":{},"classes/Shuttle.html":{},"components/SnackbarComponent.html":{},"classes/System.html":{},"injectables/ViewportService.html":{},"components/VirtualPedalsComponent.html":{},"components/WeavingStateComponent.html":{}}}],["migrating",{"_index":4547,"title":{},"body":{"index.html":{}}}],["min",{"_index":3161,"title":{},"body":{"interfaces/OperationParam.html":{},"components/ParameterComponent.html":{},"classes/Params.html":{},"classes/Render.html":{},"components/VirtualPedalsComponent.html":{}}}],["min/max",{"_index":2993,"title":{},"body":{"components/OpHelpModal.html":{}}}],["minimum",{"_index":3162,"title":{},"body":{"interfaces/OperationParam.html":{},"classes/Params.html":{}}}],["miscellaneous",{"_index":4391,"title":{"miscellaneous/functions.html":{},"miscellaneous/typealiases.html":{}},"body":{"miscellaneous/functions.html":{},"miscellaneous/typealiases.html":{}}}],["mix",{"_index":289,"title":{},"body":{"classes/AbstractOpFactory.html":{},"classes/BaseOp.html":{},"classes/Branch.html":{},"classes/Bus.html":{},"classes/Merge.html":{},"interfaces/OpClassifier.html":{},"interfaces/OperationProperties.html":{},"interfaces/Pedal.html":{},"classes/PedalStatus.html":{},"injectables/PedalsService.html":{},"classes/Pipe.html":{},"classes/Seed.html":{},"interfaces/TopologyDef.html":{}}}],["mixer",{"_index":1629,"title":{},"body":{"interfaces/DraftMap.html":{},"interfaces/DraftOperationClassification.html":{},"components/DraftdetailComponent.html":{},"interfaces/DynamicOperation.html":{},"interfaces/Interlacement.html":{},"interfaces/InterlacementVal.html":{},"interfaces/LoomConfig.html":{},"interfaces/OpInput.html":{},"interfaces/OperationClassification.html":{},"classes/PedalConfig.html":{},"injectables/PlayerService.html":{},"interfaces/TreeOperation.html":{},"index.html":{}}}],["mixer'},{'name",{"_index":836,"title":{},"body":{"components/ConnectionComponent.html":{},"components/DraftdetailComponent.html":{},"components/ImageComponent.html":{},"components/InletComponent.html":{},"components/MixerViewComponent.html":{},"components/NoteComponent.html":{},"components/OpHelpModal.html":{},"components/OpSequencerComponent.html":{},"components/OpsComponent.html":{},"components/ParameterComponent.html":{},"components/PlayerComponent.html":{},"components/SnackbarComponent.html":{},"components/VirtualPedalsComponent.html":{},"components/WeavingStateComponent.html":{}}}],["mixer.component",{"_index":2695,"title":{},"body":{"modules/MixerModule.html":{}}}],["mixer/model/op_definitions",{"_index":1681,"title":{},"body":{"interfaces/DraftOperationClassification.html":{},"interfaces/LoomConfig.html":{},"classes/PedalConfig.html":{},"injectables/PlayerService.html":{}}}],["mixer/model/operation",{"_index":512,"title":{},"body":{"interfaces/ChainOp.html":{},"interfaces/DraftOperationClassification.html":{},"interfaces/LoomConfig.html":{},"interfaces/PairedOp.html":{},"classes/PedalConfig.html":{},"interfaces/PedalEvent.html":{},"interfaces/PlayerOp.html":{},"injectables/PlayerService.html":{}}}],["mixer/palette/connection/connection.component",{"_index":2264,"title":{},"body":{"interfaces/IOTuple.html":{},"interfaces/TreeNode.html":{}}}],["mixer/palette/operation/operation.component",{"_index":2265,"title":{},"body":{"interfaces/IOTuple.html":{},"interfaces/TreeNode.html":{}}}],["mixer/palette/subdraft/subdraft.component",{"_index":2266,"title":{},"body":{"interfaces/IOTuple.html":{},"interfaces/TreeNode.html":{}}}],["mixer/provider/operation.service",{"_index":1692,"title":{},"body":{"interfaces/DraftOperationClassification.html":{},"interfaces/LoomConfig.html":{},"classes/PedalConfig.html":{},"injectables/PlayerService.html":{}}}],["mixer/provider/operation.service.ts",{"_index":4584,"title":{},"body":{"index.html":{}}}],["mixercomponent",{"_index":835,"title":{},"body":{"components/ConnectionComponent.html":{},"components/DraftdetailComponent.html":{},"components/ImageComponent.html":{},"components/InletComponent.html":{},"modules/MixerModule.html":{},"components/MixerViewComponent.html":{},"components/NoteComponent.html":{},"components/OpHelpModal.html":{},"components/OpSequencerComponent.html":{},"components/OpsComponent.html":{},"components/ParameterComponent.html":{},"components/PlayerComponent.html":{},"components/SnackbarComponent.html":{},"components/VirtualPedalsComponent.html":{},"components/WeavingStateComponent.html":{},"overview.html":{}}}],["mixerelement",{"_index":3615,"title":{},"body":{"components/PlayerComponent.html":{},"components/WeavingStateComponent.html":{}}}],["mixermodule",{"_index":2678,"title":{"modules/MixerModule.html":{}},"body":{"modules/MixerModule.html":{},"modules.html":{},"overview.html":{}}}],["mixerview",{"_index":2712,"title":{},"body":{"components/MixerViewComponent.html":{}}}],["mixerview'},{'name",{"_index":838,"title":{},"body":{"components/ConnectionComponent.html":{},"components/DraftdetailComponent.html":{},"components/ImageComponent.html":{},"components/InletComponent.html":{},"components/MixerViewComponent.html":{},"components/NoteComponent.html":{},"components/OpHelpModal.html":{},"components/OpSequencerComponent.html":{},"components/OpsComponent.html":{},"components/ParameterComponent.html":{},"components/PlayerComponent.html":{},"components/SnackbarComponent.html":{},"components/VirtualPedalsComponent.html":{},"components/WeavingStateComponent.html":{}}}],["mixerview.component.html",{"_index":2714,"title":{},"body":{"components/MixerViewComponent.html":{}}}],["mixerview.component.scss",{"_index":2713,"title":{},"body":{"components/MixerViewComponent.html":{}}}],["mixerviewcomponent",{"_index":837,"title":{"components/MixerViewComponent.html":{}},"body":{"components/ConnectionComponent.html":{},"components/DraftdetailComponent.html":{},"components/ImageComponent.html":{},"components/InletComponent.html":{},"modules/MixerModule.html":{},"components/MixerViewComponent.html":{},"components/NoteComponent.html":{},"components/OpHelpModal.html":{},"components/OpSequencerComponent.html":{},"components/OpsComponent.html":{},"components/ParameterComponent.html":{},"components/PlayerComponent.html":{},"components/SnackbarComponent.html":{},"components/VirtualPedalsComponent.html":{},"components/WeavingStateComponent.html":{},"overview.html":{}}}],["mixture",{"_index":4551,"title":{},"body":{"index.html":{}}}],["modal",{"_index":1386,"title":{},"body":{"interfaces/DesignActions.html":{},"components/DraftdetailComponent.html":{},"components/MixerViewComponent.html":{}}}],["modal/draftdetail/draftdetail.component",{"_index":1312,"title":{},"body":{"interfaces/DesignActions.html":{},"modules/MixerModule.html":{}}}],["modal/mixerview/mixerview.component",{"_index":2696,"title":{},"body":{"modules/MixerModule.html":{}}}],["modal/ophelp/ophelp.modal",{"_index":2704,"title":{},"body":{"modules/MixerModule.html":{}}}],["modal/ops/ops.component",{"_index":2703,"title":{},"body":{"modules/MixerModule.html":{}}}],["modaltopleft",{"_index":2820,"title":{},"body":{"components/MixerViewComponent.html":{}}}],["modaltopleft.x",{"_index":2829,"title":{},"body":{"components/MixerViewComponent.html":{}}}],["modaltopleft.y",{"_index":2833,"title":{},"body":{"components/MixerViewComponent.html":{}}}],["mode",{"_index":1358,"title":{},"body":{"interfaces/DesignActions.html":{},"components/DraftdetailComponent.html":{},"interfaces/Ink.html":{},"injectables/InkService.html":{},"index.html":{}}}],["mode.uses_mask",{"_index":2340,"title":{},"body":{"interfaces/Ink.html":{},"injectables/InkService.html":{}}}],["mode:ink",{"_index":2338,"title":{},"body":{"interfaces/Ink.html":{},"injectables/InkService.html":{}}}],["model",{"_index":4430,"title":{},"body":{"index.html":{}}}],["model/dbnodes",{"_index":3372,"title":{},"body":{"interfaces/Pedal.html":{},"classes/PedalStatus.html":{},"injectables/PedalsService.html":{}}}],["model/op_mappings",{"_index":436,"title":{},"body":{"interfaces/ChainIndex.html":{},"interfaces/DraftOperationClassification.html":{},"interfaces/LoomConfig.html":{},"injectables/MappingsService.html":{},"classes/PedalConfig.html":{},"injectables/PlayerService.html":{},"injectables/SequencerService.html":{}}}],["model/player",{"_index":3370,"title":{},"body":{"interfaces/Pedal.html":{},"classes/PedalStatus.html":{},"injectables/PedalsService.html":{}}}],["model/state",{"_index":1685,"title":{},"body":{"interfaces/DraftOperationClassification.html":{},"interfaces/LoomConfig.html":{},"classes/PedalConfig.html":{},"injectables/PlayerService.html":{}}}],["modes",{"_index":1273,"title":{},"body":{"interfaces/DensityUnits.html":{},"interfaces/DesignMode.html":{},"interfaces/Ink.html":{},"injectables/InkService.html":{},"interfaces/LoomTypes.html":{},"interfaces/MaterialTypes.html":{},"interfaces/ViewModes.html":{}}}],["modify",{"_index":2076,"title":{},"body":{"components/DraftdetailComponent.html":{}}}],["modifying",{"_index":1992,"title":{},"body":{"components/DraftdetailComponent.html":{}}}],["module",{"_index":2677,"title":{"modules/MixerModule.html":{},"modules/PlayerModule.html":{}},"body":{"index.html":{}}}],["module's",{"_index":4603,"title":{},"body":{"index.html":{}}}],["modules",{"_index":2679,"title":{"modules.html":{}},"body":{"modules/MixerModule.html":{},"modules/PlayerModule.html":{},"index.html":{},"modules.html":{},"overview.html":{}}}],["more",{"_index":539,"title":{},"body":{"interfaces/ChainOp.html":{},"interfaces/DesignActions.html":{},"components/DraftdetailComponent.html":{},"interfaces/DynamicOperation.html":{},"interfaces/OpInput.html":{},"interfaces/OperationClassification.html":{},"interfaces/OperationParam.html":{},"interfaces/PairedOp.html":{},"interfaces/PedalEvent.html":{},"interfaces/PlayerOp.html":{},"interfaces/TreeOperation.html":{},"index.html":{},"miscellaneous/typealiases.html":{}}}],["mouse",{"_index":1274,"title":{},"body":{"interfaces/DensityUnits.html":{},"interfaces/DesignMode.html":{},"interfaces/LoomTypes.html":{},"interfaces/MaterialTypes.html":{},"interfaces/Point.html":{},"interfaces/ViewModes.html":{}}}],["move",{"_index":698,"title":{},"body":{"components/ConnectionComponent.html":{},"interfaces/DesignActions.html":{},"injectables/ViewportService.html":{}}}],["move(x",{"_index":4203,"title":{},"body":{"injectables/ViewportService.html":{}}}],["moved",{"_index":4223,"title":{},"body":{"injectables/ViewportService.html":{}}}],["moving",{"_index":1381,"title":{},"body":{"interfaces/DesignActions.html":{}}}],["ms",{"_index":1392,"title":{},"body":{"interfaces/DesignActions.html":{},"components/DraftdetailComponent.html":{}}}],["mulitple",{"_index":2225,"title":{},"body":{"interfaces/DynamicOperation.html":{},"interfaces/OpInput.html":{},"interfaces/OperationClassification.html":{},"interfaces/TreeOperation.html":{}}}],["multi",{"_index":2224,"title":{},"body":{"interfaces/DynamicOperation.html":{},"interfaces/OpInput.html":{},"interfaces/OperationClassification.html":{},"interfaces/TreeOperation.html":{}}}],["multidraftinput",{"_index":87,"title":{},"body":{"classes/AbstractOpFactory.html":{},"classes/BaseOp.html":{},"classes/Branch.html":{},"classes/Bus.html":{},"classes/Merge.html":{},"interfaces/OpClassifier.html":{},"interfaces/OperationProperties.html":{},"classes/Pipe.html":{},"classes/Seed.html":{},"interfaces/TopologyDef.html":{},"miscellaneous/typealiases.html":{}}}],["multiple",{"_index":501,"title":{},"body":{"interfaces/ChainOp.html":{},"interfaces/DynamicOperation.html":{},"interfaces/IOTuple.html":{},"injectables/MappingsService.html":{},"components/OpHelpModal.html":{},"interfaces/OpInput.html":{},"classes/OpSequencer.html":{},"interfaces/OperationClassification.html":{},"interfaces/PairedOp.html":{},"interfaces/PedalEvent.html":{},"interfaces/PlayerOp.html":{},"classes/Shape.html":{},"interfaces/TreeNode.html":{},"interfaces/TreeOperation.html":{}}}],["multiplicity",{"_index":162,"title":{},"body":{"classes/AbstractOpFactory.html":{},"classes/BaseOp.html":{},"classes/Branch.html":{},"classes/Bus.html":{},"classes/Merge.html":{},"interfaces/OpClassifier.html":{},"interfaces/OperationProperties.html":{},"classes/Pipe.html":{},"classes/Seed.html":{},"interfaces/TopologyDef.html":{},"miscellaneous/typealiases.html":{}}}],["multple",{"_index":2228,"title":{},"body":{"interfaces/DynamicOperation.html":{},"interfaces/OpInput.html":{},"interfaces/OperationClassification.html":{},"interfaces/TreeOperation.html":{}}}],["mutipic",{"_index":4123,"title":{},"body":{"classes/System.html":{}}}],["mycontrol",{"_index":3212,"title":{},"body":{"components/OpsComponent.html":{}}}],["n",{"_index":118,"title":{},"body":{"classes/AbstractOpFactory.html":{},"classes/BaseOp.html":{},"classes/Branch.html":{},"classes/Bus.html":{},"classes/DBListener.html":{},"classes/DBListenerArray.html":{},"classes/DBNode.html":{},"classes/DBNodeArray.html":{},"classes/DBTwoWay.html":{},"classes/DBTwoWayArray.html":{},"classes/DBWriteBuffer.html":{},"classes/DBWriter.html":{},"classes/DBWriterArray.html":{},"interfaces/DraftOperationClassification.html":{},"interfaces/DynamicOperation.html":{},"interfaces/LoomConfig.html":{},"classes/Merge.html":{},"interfaces/NodeMethods.html":{},"interfaces/NodeParams.html":{},"classes/OnlineStatus.html":{},"interfaces/OpClassifier.html":{},"interfaces/OpInput.html":{},"classes/OpSequencer.html":{},"interfaces/OperationClassification.html":{},"interfaces/OperationProperties.html":{},"interfaces/Pedal.html":{},"classes/PedalConfig.html":{},"classes/PedalStatus.html":{},"injectables/PedalsService.html":{},"classes/Pipe.html":{},"injectables/PlayerService.html":{},"classes/Seed.html":{},"injectables/SequencerService.html":{},"classes/Shuttle.html":{},"interfaces/TopologyDef.html":{},"interfaces/TreeOperation.html":{},"miscellaneous/functions.html":{},"miscellaneous/typealiases.html":{}}}],["n+1th",{"_index":4148,"title":{},"body":{"classes/System.html":{},"miscellaneous/functions.html":{}}}],["n\\n",{"_index":3428,"title":{},"body":{"interfaces/Pedal.html":{},"classes/PedalStatus.html":{},"injectables/PedalsService.html":{}}}],["name",{"_index":20,"title":{},"body":{"classes/AbstractOpFactory.html":{},"classes/BaseOp.html":{},"classes/Branch.html":{},"classes/Bus.html":{},"classes/Cell.html":{},"interfaces/ChainOp.html":{},"components/ConnectionComponent.html":{},"classes/DBListener.html":{},"classes/DBListenerArray.html":{},"classes/DBNode.html":{},"classes/DBNodeArray.html":{},"classes/DBTwoWay.html":{},"classes/DBTwoWayArray.html":{},"classes/DBWriteBuffer.html":{},"classes/DBWriter.html":{},"classes/DBWriterArray.html":{},"interfaces/DraftMap.html":{},"interfaces/DraftNodeProxy.html":{},"interfaces/DraftOperationClassification.html":{},"components/DraftdetailComponent.html":{},"interfaces/DynamicOperation.html":{},"interfaces/FileObj.html":{},"interfaces/FileSaver.html":{},"interfaces/Fileloader.html":{},"interfaces/IOTuple.html":{},"components/ImageComponent.html":{},"interfaces/Ink.html":{},"injectables/InkService.html":{},"components/InletComponent.html":{},"interfaces/Interlacement.html":{},"interfaces/InterlacementVal.html":{},"interfaces/LoadResponse.html":{},"interfaces/LoomConfig.html":{},"injectables/MappingsService.html":{},"directives/MarqueeComponent.html":{},"classes/Merge.html":{},"components/MixerViewComponent.html":{},"interfaces/NodeComponentProxy.html":{},"interfaces/NodeMethods.html":{},"interfaces/NodeParams.html":{},"components/NoteComponent.html":{},"classes/OnlineStatus.html":{},"interfaces/OpClassifier.html":{},"interfaces/OpComponentProxy.html":{},"components/OpHelpModal.html":{},"interfaces/OpInput.html":{},"classes/OpSequencer.html":{},"components/OpSequencerComponent.html":{},"interfaces/OperationClassification.html":{},"interfaces/OperationParam.html":{},"interfaces/OperationProperties.html":{},"components/OpsComponent.html":{},"interfaces/PairedOp.html":{},"components/ParameterComponent.html":{},"classes/Params.html":{},"interfaces/Pedal.html":{},"classes/PedalConfig.html":{},"interfaces/PedalEvent.html":{},"classes/PedalStatus.html":{},"injectables/PedalsService.html":{},"classes/Pipe.html":{},"components/PlayerComponent.html":{},"interfaces/PlayerOp.html":{},"injectables/PlayerService.html":{},"interfaces/PlayerState.html":{},"interfaces/PlayerState-1.html":{},"classes/Render.html":{},"interfaces/SaveObj.html":{},"classes/Seed.html":{},"classes/Selection.html":{},"directives/SelectionComponent.html":{},"injectables/SequencerService.html":{},"classes/Shape.html":{},"classes/Shape-1.html":{},"classes/Shuttle.html":{},"components/SnackbarComponent.html":{},"interfaces/StatusMessage.html":{},"classes/System.html":{},"interfaces/TopologyDef.html":{},"interfaces/TreeNode.html":{},"interfaces/TreeNodeProxy.html":{},"interfaces/TreeOperation.html":{},"injectables/ViewportService.html":{},"components/VirtualPedalsComponent.html":{},"interfaces/WeavingLog.html":{},"interfaces/WeavingPick.html":{},"interfaces/WeavingPick-1.html":{},"components/WeavingStateComponent.html":{},"miscellaneous/functions.html":{}}}],["name)[0",{"_index":2648,"title":{},"body":{"injectables/MappingsService.html":{}}}],["named",{"_index":4602,"title":{},"body":{"index.html":{}}}],["namefocusout",{"_index":1432,"title":{},"body":{"interfaces/DesignActions.html":{}}}],["nameorargs",{"_index":236,"title":{},"body":{"classes/AbstractOpFactory.html":{},"classes/BaseOp.html":{},"classes/Branch.html":{},"classes/Bus.html":{},"classes/Merge.html":{},"interfaces/OpClassifier.html":{},"interfaces/OperationProperties.html":{},"classes/Pipe.html":{},"classes/Seed.html":{},"interfaces/TopologyDef.html":{}}}],["nameorargs.name",{"_index":242,"title":{},"body":{"classes/AbstractOpFactory.html":{},"classes/BaseOp.html":{},"classes/Branch.html":{},"classes/Bus.html":{},"classes/Merge.html":{},"interfaces/OpClassifier.html":{},"interfaces/OperationProperties.html":{},"classes/Pipe.html":{},"classes/Seed.html":{},"interfaces/TopologyDef.html":{}}}],["namere",{"_index":4422,"title":{},"body":{"miscellaneous/functions.html":{}}}],["names",{"_index":2241,"title":{},"body":{"interfaces/DynamicOperation.html":{},"interfaces/OpInput.html":{},"interfaces/OperationClassification.html":{},"interfaces/OperationParam.html":{},"classes/Params.html":{},"interfaces/TreeOperation.html":{}}}],["navigate",{"_index":4505,"title":{},"body":{"index.html":{}}}],["ndx",{"_index":757,"title":{},"body":{"components/ConnectionComponent.html":{},"interfaces/DesignActions.html":{},"interfaces/IOTuple.html":{},"components/OpsComponent.html":{},"classes/Render.html":{},"classes/System.html":{},"interfaces/TreeNode.html":{}}}],["ndx.i",{"_index":1492,"title":{},"body":{"interfaces/DesignActions.html":{}}}],["ndx.j",{"_index":1493,"title":{},"body":{"interfaces/DesignActions.html":{}}}],["neccessary",{"_index":4574,"title":{},"body":{"index.html":{}}}],["necessarily",{"_index":122,"title":{},"body":{"classes/AbstractOpFactory.html":{},"classes/BaseOp.html":{},"classes/Branch.html":{},"classes/Bus.html":{},"classes/Merge.html":{},"interfaces/OpClassifier.html":{},"interfaces/OperationProperties.html":{},"classes/Pipe.html":{},"classes/Seed.html":{},"classes/Shape.html":{},"interfaces/TopologyDef.html":{}}}],["need",{"_index":1874,"title":{},"body":{"interfaces/DraftOperationClassification.html":{},"interfaces/LoomConfig.html":{},"components/OpsComponent.html":{},"components/ParameterComponent.html":{},"classes/PedalConfig.html":{},"injectables/PlayerService.html":{},"injectables/ViewportService.html":{},"index.html":{}}}],["needs",{"_index":2273,"title":{},"body":{"interfaces/IOTuple.html":{},"interfaces/PlayerState.html":{},"interfaces/PlayerState-1.html":{},"classes/Shape.html":{},"interfaces/TreeNode.html":{},"interfaces/WeavingLog.html":{},"interfaces/WeavingPick.html":{},"interfaces/WeavingPick-1.html":{},"index.html":{}}}],["neq",{"_index":1367,"title":{},"body":{"interfaces/DesignActions.html":{},"interfaces/Ink.html":{},"injectables/InkService.html":{},"components/WeavingStateComponent.html":{}}}],["nest",{"_index":1283,"title":{},"body":{"interfaces/DensityUnits.html":{},"interfaces/DesignMode.html":{},"interfaces/LoomTypes.html":{},"interfaces/MaterialTypes.html":{},"interfaces/ViewModes.html":{}}}],["nesw",{"_index":4646,"title":{},"body":{"miscellaneous/typealiases.html":{}}}],["never",{"_index":745,"title":{},"body":{"components/ConnectionComponent.html":{}}}],["new",{"_index":281,"title":{},"body":{"classes/AbstractOpFactory.html":{},"classes/BaseOp.html":{},"classes/Branch.html":{},"classes/Bus.html":{},"interfaces/ChainIndex.html":{},"classes/DBListener.html":{},"classes/DBListenerArray.html":{},"classes/DBNode.html":{},"classes/DBNodeArray.html":{},"classes/DBTwoWay.html":{},"classes/DBTwoWayArray.html":{},"classes/DBWriteBuffer.html":{},"classes/DBWriter.html":{},"classes/DBWriterArray.html":{},"interfaces/DesignActions.html":{},"interfaces/DraftOperationClassification.html":{},"components/InletComponent.html":{},"injectables/LayersService.html":{},"interfaces/LoomConfig.html":{},"injectables/MappingsService.html":{},"classes/Merge.html":{},"components/MixerViewComponent.html":{},"interfaces/NodeMethods.html":{},"interfaces/NodeParams.html":{},"components/NoteComponent.html":{},"classes/OnlineStatus.html":{},"interfaces/OpClassifier.html":{},"classes/OpSequencer.html":{},"interfaces/OperationParam.html":{},"interfaces/OperationProperties.html":{},"components/OpsComponent.html":{},"components/ParameterComponent.html":{},"classes/Params.html":{},"interfaces/Pedal.html":{},"classes/PedalConfig.html":{},"classes/PedalStatus.html":{},"injectables/PedalsService.html":{},"classes/Pipe.html":{},"injectables/PlayerService.html":{},"classes/Seed.html":{},"directives/SelectionComponent.html":{},"injectables/SequencerService.html":{},"classes/Shape.html":{},"interfaces/TopologyDef.html":{},"injectables/ViewportService.html":{},"index.html":{}}}],["new_op",{"_index":2233,"title":{},"body":{"interfaces/DynamicOperation.html":{},"interfaces/OpInput.html":{},"interfaces/OperationClassification.html":{},"interfaces/TreeOperation.html":{}}}],["newl",{"_index":3405,"title":{},"body":{"interfaces/Pedal.html":{},"classes/PedalStatus.html":{},"injectables/PedalsService.html":{}}}],["newmapindex",{"_index":2565,"title":{},"body":{"injectables/MappingsService.html":{},"miscellaneous/functions.html":{}}}],["newnode",{"_index":3456,"title":{},"body":{"interfaces/Pedal.html":{},"classes/PedalStatus.html":{},"injectables/PedalsService.html":{}}}],["newstate",{"_index":605,"title":{},"body":{"interfaces/ChainOp.html":{},"interfaces/PairedOp.html":{},"interfaces/PedalEvent.html":{},"interfaces/PlayerOp.html":{}}}],["newstate.draft",{"_index":614,"title":{},"body":{"interfaces/ChainOp.html":{},"interfaces/PairedOp.html":{},"interfaces/PedalEvent.html":{},"interfaces/PlayerOp.html":{}}}],["newstate.pedal",{"_index":606,"title":{},"body":{"interfaces/ChainOp.html":{},"interfaces/PairedOp.html":{},"interfaces/PedalEvent.html":{},"interfaces/PlayerOp.html":{}}}],["newstates",{"_index":1121,"title":{},"body":{"classes/DBListener.html":{},"classes/DBListenerArray.html":{},"classes/DBNode.html":{},"classes/DBNodeArray.html":{},"classes/DBTwoWay.html":{},"classes/DBTwoWayArray.html":{},"classes/DBWriteBuffer.html":{},"classes/DBWriter.html":{},"classes/DBWriterArray.html":{},"interfaces/NodeMethods.html":{},"interfaces/NodeParams.html":{},"classes/OnlineStatus.html":{}}}],["neww",{"_index":3410,"title":{},"body":{"interfaces/Pedal.html":{},"classes/PedalStatus.html":{},"injectables/PedalsService.html":{}}}],["next",{"_index":471,"title":{},"body":{"interfaces/ChainIndex.html":{},"classes/OpSequencer.html":{},"interfaces/Pedal.html":{},"classes/PedalStatus.html":{},"injectables/PedalsService.html":{},"classes/Render.html":{},"injectables/SequencerService.html":{}}}],["next/previous",{"_index":3013,"title":{},"body":{"classes/OpSequencer.html":{}}}],["nextop",{"_index":495,"title":{},"body":{"interfaces/ChainIndex.html":{},"classes/OpSequencer.html":{},"injectables/SequencerService.html":{}}}],["ng",{"_index":4501,"title":{},"body":{"index.html":{}}}],["ngafterviewinit",{"_index":653,"title":{},"body":{"components/ConnectionComponent.html":{},"interfaces/DesignActions.html":{},"components/DraftdetailComponent.html":{},"components/MixerViewComponent.html":{},"components/NoteComponent.html":{},"components/PlayerComponent.html":{},"components/WeavingStateComponent.html":{}}}],["ngform",{"_index":2426,"title":{},"body":{"components/InletComponent.html":{},"components/ParameterComponent.html":{}}}],["ngmodule",{"_index":2689,"title":{},"body":{"modules/MixerModule.html":{},"modules/PlayerModule.html":{}}}],["ngoninit",{"_index":654,"title":{},"body":{"components/ConnectionComponent.html":{},"interfaces/DesignActions.html":{},"components/DraftdetailComponent.html":{},"components/ImageComponent.html":{},"components/InletComponent.html":{},"directives/MarqueeComponent.html":{},"components/MixerViewComponent.html":{},"components/NoteComponent.html":{},"components/OpHelpModal.html":{},"components/OpSequencerComponent.html":{},"components/OpsComponent.html":{},"components/ParameterComponent.html":{},"components/PlayerComponent.html":{},"directives/SelectionComponent.html":{},"components/SnackbarComponent.html":{},"components/VirtualPedalsComponent.html":{},"components/WeavingStateComponent.html":{}}}],["ngrx/effects",{"_index":4359,"title":{},"body":{"dependencies.html":{}}}],["ngrx/entity",{"_index":4361,"title":{},"body":{"dependencies.html":{}}}],["ngrx/store",{"_index":4362,"title":{},"body":{"dependencies.html":{}}}],["ngx",{"_index":4379,"title":{},"body":{"dependencies.html":{}}}],["no_drafts",{"_index":136,"title":{},"body":{"classes/AbstractOpFactory.html":{},"classes/BaseOp.html":{},"classes/Branch.html":{},"classes/Bus.html":{},"classes/Merge.html":{},"interfaces/OpClassifier.html":{},"interfaces/OperationProperties.html":{},"classes/Pipe.html":{},"classes/Seed.html":{},"interfaces/TopologyDef.html":{}}}],["no_draw",{"_index":642,"title":{},"body":{"components/ConnectionComponent.html":{}}}],["no_params",{"_index":139,"title":{},"body":{"classes/AbstractOpFactory.html":{},"classes/BaseOp.html":{},"classes/Branch.html":{},"classes/Bus.html":{},"classes/Merge.html":{},"interfaces/OpClassifier.html":{},"interfaces/OperationProperties.html":{},"classes/Pipe.html":{},"classes/Seed.html":{},"interfaces/TopologyDef.html":{}}}],["node",{"_index":685,"title":{},"body":{"components/ConnectionComponent.html":{},"classes/DBListener.html":{},"classes/DBListenerArray.html":{},"classes/DBNode.html":{},"classes/DBNodeArray.html":{},"classes/DBTwoWay.html":{},"classes/DBTwoWayArray.html":{},"classes/DBWriteBuffer.html":{},"classes/DBWriter.html":{},"classes/DBWriterArray.html":{},"interfaces/DraftNodeProxy.html":{},"interfaces/FileObj.html":{},"interfaces/FileSaver.html":{},"interfaces/Fileloader.html":{},"interfaces/IOTuple.html":{},"interfaces/LoadResponse.html":{},"interfaces/NodeComponentProxy.html":{},"interfaces/NodeMethods.html":{},"interfaces/NodeParams.html":{},"classes/OnlineStatus.html":{},"interfaces/OpComponentProxy.html":{},"injectables/PedalsService.html":{},"interfaces/SaveObj.html":{},"interfaces/StatusMessage.html":{},"interfaces/TreeNode.html":{},"interfaces/TreeNodeProxy.html":{},"index.html":{},"miscellaneous/typealiases.html":{}}}],["node.attach",{"_index":1100,"title":{},"body":{"classes/DBListener.html":{},"classes/DBListenerArray.html":{},"classes/DBNode.html":{},"classes/DBNodeArray.html":{},"classes/DBTwoWay.html":{},"classes/DBTwoWayArray.html":{},"classes/DBWriteBuffer.html":{},"classes/DBWriter.html":{},"classes/DBWriterArray.html":{},"interfaces/NodeMethods.html":{},"interfaces/NodeParams.html":{},"classes/OnlineStatus.html":{}}}],["node.id",{"_index":1102,"title":{},"body":{"classes/DBListener.html":{},"classes/DBListenerArray.html":{},"classes/DBNode.html":{},"classes/DBNodeArray.html":{},"classes/DBTwoWay.html":{},"classes/DBTwoWayArray.html":{},"classes/DBWriteBuffer.html":{},"classes/DBWriter.html":{},"classes/DBWriterArray.html":{},"interfaces/NodeMethods.html":{},"interfaces/NodeParams.html":{},"classes/OnlineStatus.html":{}}}],["node.js",{"_index":4478,"title":{},"body":{"index.html":{}}}],["node.on('change",{"_index":1101,"title":{},"body":{"classes/DBListener.html":{},"classes/DBListenerArray.html":{},"classes/DBNode.html":{},"classes/DBNodeArray.html":{},"classes/DBTwoWay.html":{},"classes/DBTwoWayArray.html":{},"classes/DBWriteBuffer.html":{},"classes/DBWriter.html":{},"classes/DBWriterArray.html":{},"interfaces/NodeMethods.html":{},"interfaces/NodeParams.html":{},"classes/OnlineStatus.html":{}}}],["node/component",{"_index":1644,"title":{},"body":{"interfaces/DraftNodeProxy.html":{},"interfaces/FileObj.html":{},"interfaces/FileSaver.html":{},"interfaces/Fileloader.html":{},"interfaces/LoadResponse.html":{},"interfaces/NodeComponentProxy.html":{},"interfaces/OpComponentProxy.html":{},"interfaces/SaveObj.html":{},"interfaces/StatusMessage.html":{},"interfaces/TreeNodeProxy.html":{}}}],["node_id",{"_index":1635,"title":{},"body":{"interfaces/DraftNodeProxy.html":{},"interfaces/FileObj.html":{},"interfaces/FileSaver.html":{},"interfaces/Fileloader.html":{},"interfaces/LoadResponse.html":{},"interfaces/NodeComponentProxy.html":{},"interfaces/OpComponentProxy.html":{},"interfaces/SaveObj.html":{},"interfaces/StatusMessage.html":{},"interfaces/TreeNodeProxy.html":{}}}],["nodeat",{"_index":1161,"title":{},"body":{"classes/DBListenerArray.html":{},"classes/DBNodeArray.html":{},"classes/DBTwoWayArray.html":{},"classes/DBWriterArray.html":{}}}],["nodeat(n",{"_index":1047,"title":{},"body":{"classes/DBListener.html":{},"classes/DBListenerArray.html":{},"classes/DBNode.html":{},"classes/DBNodeArray.html":{},"classes/DBTwoWay.html":{},"classes/DBTwoWayArray.html":{},"classes/DBWriteBuffer.html":{},"classes/DBWriter.html":{},"classes/DBWriterArray.html":{},"interfaces/NodeMethods.html":{},"interfaces/NodeParams.html":{},"classes/OnlineStatus.html":{}}}],["nodecomponentproxy",{"_index":1648,"title":{"interfaces/NodeComponentProxy.html":{}},"body":{"interfaces/DraftNodeProxy.html":{},"interfaces/FileObj.html":{},"interfaces/FileSaver.html":{},"interfaces/Fileloader.html":{},"interfaces/LoadResponse.html":{},"interfaces/NodeComponentProxy.html":{},"interfaces/OpComponentProxy.html":{},"interfaces/SaveObj.html":{},"interfaces/StatusMessage.html":{},"interfaces/TreeNodeProxy.html":{}}}],["nodemethods",{"_index":967,"title":{"interfaces/NodeMethods.html":{}},"body":{"classes/DBListener.html":{},"classes/DBListenerArray.html":{},"classes/DBNode.html":{},"classes/DBNodeArray.html":{},"classes/DBTwoWay.html":{},"classes/DBTwoWayArray.html":{},"classes/DBWriteBuffer.html":{},"classes/DBWriter.html":{},"classes/DBWriterArray.html":{},"interfaces/NodeMethods.html":{},"interfaces/NodeParams.html":{},"classes/OnlineStatus.html":{}}}],["nodeparams",{"_index":934,"title":{"interfaces/NodeParams.html":{}},"body":{"classes/DBListener.html":{},"classes/DBListenerArray.html":{},"classes/DBNode.html":{},"classes/DBNodeArray.html":{},"classes/DBTwoWay.html":{},"classes/DBTwoWayArray.html":{},"classes/DBWriteBuffer.html":{},"classes/DBWriter.html":{},"classes/DBWriterArray.html":{},"interfaces/NodeMethods.html":{},"interfaces/NodeParams.html":{},"classes/OnlineStatus.html":{},"interfaces/Pedal.html":{},"classes/PedalStatus.html":{},"injectables/PedalsService.html":{}}}],["nodes",{"_index":1033,"title":{},"body":{"classes/DBListener.html":{},"classes/DBListenerArray.html":{},"classes/DBNode.html":{},"classes/DBNodeArray.html":{},"classes/DBTwoWay.html":{},"classes/DBTwoWayArray.html":{},"classes/DBWriteBuffer.html":{},"classes/DBWriter.html":{},"classes/DBWriterArray.html":{},"interfaces/DraftNodeProxy.html":{},"interfaces/FileObj.html":{},"interfaces/FileSaver.html":{},"interfaces/Fileloader.html":{},"interfaces/IOTuple.html":{},"interfaces/LoadResponse.html":{},"interfaces/NodeComponentProxy.html":{},"interfaces/NodeMethods.html":{},"interfaces/NodeParams.html":{},"classes/OnlineStatus.html":{},"interfaces/OpComponentProxy.html":{},"interfaces/Pedal.html":{},"classes/PedalStatus.html":{},"injectables/PedalsService.html":{},"interfaces/SaveObj.html":{},"interfaces/StatusMessage.html":{},"interfaces/TreeNode.html":{},"interfaces/TreeNodeProxy.html":{},"miscellaneous/typealiases.html":{}}}],["nodetopedal",{"_index":3548,"title":{},"body":{"injectables/PedalsService.html":{}}}],["nodetopedal(node",{"_index":3562,"title":{},"body":{"injectables/PedalsService.html":{}}}],["nodevalue",{"_index":966,"title":{},"body":{"classes/DBListener.html":{},"classes/DBListenerArray.html":{},"classes/DBNode.html":{},"classes/DBNodeArray.html":{},"classes/DBTwoWay.html":{},"classes/DBTwoWayArray.html":{},"classes/DBWriteBuffer.html":{},"classes/DBWriter.html":{},"classes/DBWriterArray.html":{},"interfaces/NodeMethods.html":{},"interfaces/NodeParams.html":{},"classes/OnlineStatus.html":{},"miscellaneous/typealiases.html":{}}}],["nodrafts",{"_index":11,"title":{},"body":{"classes/AbstractOpFactory.html":{},"classes/BaseOp.html":{},"classes/Branch.html":{},"classes/Bus.html":{},"interfaces/DynamicOperation.html":{},"classes/Merge.html":{},"interfaces/OpClassifier.html":{},"interfaces/OpInput.html":{},"interfaces/OperationClassification.html":{},"interfaces/OperationProperties.html":{},"classes/Pipe.html":{},"classes/Seed.html":{},"interfaces/TopologyDef.html":{},"interfaces/TreeOperation.html":{},"miscellaneous/typealiases.html":{}}}],["nodrafts(...args",{"_index":38,"title":{},"body":{"classes/AbstractOpFactory.html":{},"classes/BaseOp.html":{},"classes/Branch.html":{},"classes/Bus.html":{},"classes/Merge.html":{},"interfaces/OpClassifier.html":{},"interfaces/OperationProperties.html":{},"classes/Pipe.html":{},"classes/Seed.html":{},"interfaces/TopologyDef.html":{}}}],["nodrafts(args",{"_index":35,"title":{},"body":{"classes/AbstractOpFactory.html":{},"classes/BaseOp.html":{},"classes/Branch.html":{},"classes/Bus.html":{},"classes/Merge.html":{},"interfaces/OpClassifier.html":{},"interfaces/OperationProperties.html":{},"classes/Pipe.html":{},"classes/Seed.html":{},"interfaces/TopologyDef.html":{}}}],["nodraftsperform",{"_index":167,"title":{},"body":{"classes/AbstractOpFactory.html":{},"classes/BaseOp.html":{},"classes/Branch.html":{},"classes/Bus.html":{},"classes/Merge.html":{},"interfaces/OpClassifier.html":{},"interfaces/OperationProperties.html":{},"classes/Pipe.html":{},"classes/Seed.html":{},"interfaces/TopologyDef.html":{},"miscellaneous/typealiases.html":{}}}],["non",{"_index":1469,"title":{},"body":{"interfaces/DesignActions.html":{}}}],["none",{"_index":134,"title":{},"body":{"classes/AbstractOpFactory.html":{},"classes/BaseOp.html":{},"classes/Branch.html":{},"classes/Bus.html":{},"interfaces/DynamicOperation.html":{},"components/InletComponent.html":{},"classes/Merge.html":{},"components/MixerViewComponent.html":{},"components/NoteComponent.html":{},"interfaces/OpClassifier.html":{},"interfaces/OpInput.html":{},"interfaces/OperationClassification.html":{},"interfaces/OperationProperties.html":{},"classes/Pipe.html":{},"classes/Seed.html":{},"components/SnackbarComponent.html":{},"interfaces/TopologyDef.html":{},"interfaces/TreeOperation.html":{}}}],["noparams",{"_index":12,"title":{},"body":{"classes/AbstractOpFactory.html":{},"classes/BaseOp.html":{},"classes/Branch.html":{},"classes/Bus.html":{},"interfaces/DynamicOperation.html":{},"classes/Merge.html":{},"interfaces/OpClassifier.html":{},"interfaces/OpInput.html":{},"interfaces/OperationClassification.html":{},"interfaces/OperationProperties.html":{},"classes/Pipe.html":{},"classes/Seed.html":{},"interfaces/TopologyDef.html":{},"interfaces/TreeOperation.html":{},"miscellaneous/typealiases.html":{}}}],["noparams(...args",{"_index":43,"title":{},"body":{"classes/AbstractOpFactory.html":{},"classes/BaseOp.html":{},"classes/Branch.html":{},"classes/Bus.html":{},"classes/Merge.html":{},"interfaces/OpClassifier.html":{},"interfaces/OperationProperties.html":{},"classes/Pipe.html":{},"classes/Seed.html":{},"interfaces/TopologyDef.html":{}}}],["noparams(args",{"_index":40,"title":{},"body":{"classes/AbstractOpFactory.html":{},"classes/BaseOp.html":{},"classes/Branch.html":{},"classes/Bus.html":{},"classes/Merge.html":{},"interfaces/OpClassifier.html":{},"interfaces/OperationProperties.html":{},"classes/Pipe.html":{},"classes/Seed.html":{},"interfaces/TopologyDef.html":{}}}],["noparamsperform",{"_index":169,"title":{},"body":{"classes/AbstractOpFactory.html":{},"classes/BaseOp.html":{},"classes/Branch.html":{},"classes/Bus.html":{},"classes/Merge.html":{},"interfaces/OpClassifier.html":{},"interfaces/OperationProperties.html":{},"classes/Pipe.html":{},"classes/Seed.html":{},"interfaces/TopologyDef.html":{},"miscellaneous/typealiases.html":{}}}],["normal",{"_index":1925,"title":{},"body":{"interfaces/DraftOperationClassification.html":{},"interfaces/LoomConfig.html":{},"classes/PedalConfig.html":{},"injectables/PlayerService.html":{},"components/VirtualPedalsComponent.html":{}}}],["notation",{"_index":2454,"title":{},"body":{"components/InletComponent.html":{}}}],["note",{"_index":1638,"title":{},"body":{"interfaces/DraftNodeProxy.html":{},"interfaces/FileObj.html":{},"interfaces/FileSaver.html":{},"interfaces/Fileloader.html":{},"interfaces/LoadResponse.html":{},"interfaces/NodeComponentProxy.html":{},"components/NoteComponent.html":{},"interfaces/OpComponentProxy.html":{},"interfaces/SaveObj.html":{},"classes/Shape-1.html":{},"interfaces/StatusMessage.html":{},"interfaces/TreeNodeProxy.html":{}}}],["note'},{'name",{"_index":840,"title":{},"body":{"components/ConnectionComponent.html":{},"components/DraftdetailComponent.html":{},"components/ImageComponent.html":{},"components/InletComponent.html":{},"components/MixerViewComponent.html":{},"components/NoteComponent.html":{},"components/OpHelpModal.html":{},"components/OpSequencerComponent.html":{},"components/OpsComponent.html":{},"components/ParameterComponent.html":{},"components/PlayerComponent.html":{},"components/SnackbarComponent.html":{},"components/VirtualPedalsComponent.html":{},"components/WeavingStateComponent.html":{}}}],["note.component.html",{"_index":2864,"title":{},"body":{"components/NoteComponent.html":{}}}],["note.component.scss",{"_index":2863,"title":{},"body":{"components/NoteComponent.html":{}}}],["note.id",{"_index":2933,"title":{},"body":{"components/NoteComponent.html":{}}}],["notecomponent",{"_index":839,"title":{"components/NoteComponent.html":{}},"body":{"components/ConnectionComponent.html":{},"components/DraftdetailComponent.html":{},"components/ImageComponent.html":{},"components/InletComponent.html":{},"modules/MixerModule.html":{},"components/MixerViewComponent.html":{},"components/NoteComponent.html":{},"components/OpHelpModal.html":{},"components/OpSequencerComponent.html":{},"components/OpsComponent.html":{},"components/ParameterComponent.html":{},"components/PlayerComponent.html":{},"components/SnackbarComponent.html":{},"components/VirtualPedalsComponent.html":{},"components/WeavingStateComponent.html":{},"overview.html":{}}}],["notes",{"_index":1664,"title":{},"body":{"interfaces/DraftNodeProxy.html":{},"interfaces/FileObj.html":{},"interfaces/FileSaver.html":{},"interfaces/Fileloader.html":{},"interfaces/LoadResponse.html":{},"interfaces/NodeComponentProxy.html":{},"components/NoteComponent.html":{},"interfaces/OpComponentProxy.html":{},"interfaces/SaveObj.html":{},"classes/Shuttle.html":{},"interfaces/StatusMessage.html":{},"classes/System.html":{},"interfaces/TreeNodeProxy.html":{},"index.html":{}}}],["notesservice",{"_index":2869,"title":{},"body":{"components/NoteComponent.html":{}}}],["notesservice,private",{"_index":2896,"title":{},"body":{"components/NoteComponent.html":{}}}],["nothing",{"_index":2342,"title":{},"body":{"interfaces/Ink.html":{},"injectables/InkService.html":{}}}],["now",{"_index":2293,"title":{},"body":{"interfaces/IOTuple.html":{},"interfaces/TreeNode.html":{}}}],["nowrap",{"_index":4332,"title":{},"body":{"components/WeavingStateComponent.html":{}}}],["npm",{"_index":4480,"title":{},"body":{"index.html":{}}}],["null",{"_index":86,"title":{},"body":{"classes/AbstractOpFactory.html":{},"classes/BaseOp.html":{},"classes/Branch.html":{},"classes/Bus.html":{},"classes/Cell.html":{},"components/ConnectionComponent.html":{},"interfaces/DesignActions.html":{},"interfaces/DraftOperationClassification.html":{},"components/DraftdetailComponent.html":{},"interfaces/DynamicOperation.html":{},"interfaces/IOTuple.html":{},"interfaces/Ink.html":{},"injectables/InkService.html":{},"components/InletComponent.html":{},"interfaces/LoomConfig.html":{},"classes/Merge.html":{},"interfaces/OpClassifier.html":{},"interfaces/OpInput.html":{},"interfaces/OperationClassification.html":{},"interfaces/OperationParam.html":{},"interfaces/OperationProperties.html":{},"components/ParameterComponent.html":{},"classes/Params.html":{},"classes/PedalConfig.html":{},"classes/Pipe.html":{},"components/PlayerComponent.html":{},"injectables/PlayerService.html":{},"classes/Seed.html":{},"classes/Shuttle.html":{},"classes/System.html":{},"interfaces/TopologyDef.html":{},"interfaces/TreeNode.html":{},"interfaces/TreeOperation.html":{},"components/WeavingStateComponent.html":{},"miscellaneous/typealiases.html":{}}}],["num",{"_index":1107,"title":{},"body":{"classes/DBListener.html":{},"classes/DBListenerArray.html":{},"classes/DBNode.html":{},"classes/DBNodeArray.html":{},"classes/DBTwoWay.html":{},"classes/DBTwoWayArray.html":{},"classes/DBWriteBuffer.html":{},"classes/DBWriter.html":{},"classes/DBWriterArray.html":{},"components/InletComponent.html":{},"interfaces/NodeMethods.html":{},"interfaces/NodeParams.html":{},"classes/OnlineStatus.html":{},"interfaces/Pedal.html":{},"classes/PedalStatus.html":{},"injectables/PedalsService.html":{}}}],["num_drafts",{"_index":2446,"title":{},"body":{"components/InletComponent.html":{}}}],["num_pedals",{"_index":3385,"title":{},"body":{"interfaces/Pedal.html":{},"classes/PedalStatus.html":{},"injectables/PedalsService.html":{}}}],["num_picks",{"_index":3383,"title":{},"body":{"interfaces/Pedal.html":{},"classes/PedalStatus.html":{},"injectables/PedalsService.html":{}}}],["num_v_pedals",{"_index":3388,"title":{},"body":{"interfaces/Pedal.html":{},"classes/PedalStatus.html":{},"injectables/PedalsService.html":{}}}],["number",{"_index":94,"title":{},"body":{"classes/AbstractOpFactory.html":{},"classes/BaseOp.html":{},"interfaces/Bounds.html":{},"classes/Branch.html":{},"classes/Bus.html":{},"interfaces/ChainIndex.html":{},"interfaces/ChainOp.html":{},"components/ConnectionComponent.html":{},"interfaces/Crossing.html":{},"classes/DBListener.html":{},"classes/DBListenerArray.html":{},"classes/DBNode.html":{},"classes/DBNodeArray.html":{},"classes/DBTwoWay.html":{},"classes/DBTwoWayArray.html":{},"classes/DBWriteBuffer.html":{},"classes/DBWriter.html":{},"classes/DBWriterArray.html":{},"interfaces/DensityUnits.html":{},"interfaces/DesignActions.html":{},"interfaces/DesignMode.html":{},"interfaces/DraftMap.html":{},"interfaces/DraftNodeProxy.html":{},"interfaces/DraftOperationClassification.html":{},"components/DraftdetailComponent.html":{},"interfaces/DynamicOperation.html":{},"interfaces/FileObj.html":{},"interfaces/FileSaver.html":{},"interfaces/Fileloader.html":{},"interfaces/IOTuple.html":{},"components/ImageComponent.html":{},"components/InletComponent.html":{},"interfaces/Interlacement.html":{},"interfaces/InterlacementVal.html":{},"injectables/LayersService.html":{},"interfaces/LoadResponse.html":{},"interfaces/LoomConfig.html":{},"interfaces/LoomTypes.html":{},"injectables/MappingsService.html":{},"directives/MarqueeComponent.html":{},"interfaces/MaterialTypes.html":{},"classes/Merge.html":{},"components/MixerViewComponent.html":{},"interfaces/NodeComponentProxy.html":{},"interfaces/NodeMethods.html":{},"interfaces/NodeParams.html":{},"components/NoteComponent.html":{},"classes/OnlineStatus.html":{},"interfaces/OpClassifier.html":{},"interfaces/OpComponentProxy.html":{},"components/OpHelpModal.html":{},"interfaces/OpInput.html":{},"classes/OpSequencer.html":{},"interfaces/OperationClassification.html":{},"interfaces/OperationParam.html":{},"interfaces/OperationProperties.html":{},"interfaces/PairedOp.html":{},"components/ParameterComponent.html":{},"classes/Params.html":{},"interfaces/Pedal.html":{},"classes/PedalConfig.html":{},"interfaces/PedalEvent.html":{},"classes/PedalStatus.html":{},"injectables/PedalsService.html":{},"classes/Pipe.html":{},"components/PlayerComponent.html":{},"interfaces/PlayerOp.html":{},"injectables/PlayerService.html":{},"interfaces/PlayerState.html":{},"interfaces/PlayerState-1.html":{},"interfaces/Point.html":{},"classes/Render.html":{},"interfaces/SaveObj.html":{},"classes/Seed.html":{},"classes/Selection.html":{},"directives/SelectionComponent.html":{},"injectables/SequencerService.html":{},"classes/Shape.html":{},"classes/Shape-1.html":{},"classes/Shuttle.html":{},"components/SnackbarComponent.html":{},"interfaces/StatusMessage.html":{},"classes/System.html":{},"interfaces/TopologyDef.html":{},"interfaces/TreeNode.html":{},"interfaces/TreeNodeProxy.html":{},"interfaces/TreeOperation.html":{},"interfaces/Vertex.html":{},"interfaces/ViewModes.html":{},"injectables/ViewportService.html":{},"interfaces/WeavingLog.html":{},"interfaces/WeavingPick.html":{},"interfaces/WeavingPick-1.html":{},"components/WeavingStateComponent.html":{},"interfaces/YarnPath.html":{},"miscellaneous/functions.html":{},"miscellaneous/typealiases.html":{}}}],["number(name",{"_index":3194,"title":{},"body":{"interfaces/OperationParam.html":{},"classes/Params.html":{}}}],["number(objorname",{"_index":3195,"title":{},"body":{"interfaces/OperationParam.html":{},"classes/Params.html":{}}}],["number(undefined",{"_index":3355,"title":{},"body":{"classes/Params.html":{}}}],["number):array",{"_index":4032,"title":{},"body":{"classes/Shape-1.html":{}}}],["number_opts",{"_index":2387,"title":{},"body":{"components/InletComponent.html":{}}}],["numbers",{"_index":595,"title":{},"body":{"interfaces/ChainOp.html":{},"injectables/MappingsService.html":{},"components/MixerViewComponent.html":{},"interfaces/PairedOp.html":{},"interfaces/PedalEvent.html":{},"interfaces/PlayerOp.html":{}}}],["numeric",{"_index":3160,"title":{},"body":{"interfaces/OperationParam.html":{},"classes/Params.html":{},"miscellaneous/typealiases.html":{}}}],["numframes",{"_index":1952,"title":{},"body":{"components/DraftdetailComponent.html":{}}}],["numframes(loom",{"_index":2067,"title":{},"body":{"components/DraftdetailComponent.html":{}}}],["numinlet",{"_index":4631,"title":{},"body":{"miscellaneous/typealiases.html":{}}}],["nummappings",{"_index":1719,"title":{},"body":{"interfaces/DraftOperationClassification.html":{},"interfaces/LoomConfig.html":{},"classes/PedalConfig.html":{},"injectables/PlayerService.html":{}}}],["numparam",{"_index":3164,"title":{},"body":{"interfaces/OperationParam.html":{},"components/ParameterComponent.html":{},"classes/Params.html":{},"miscellaneous/typealiases.html":{}}}],["numpedals",{"_index":1706,"title":{},"body":{"interfaces/DraftOperationClassification.html":{},"interfaces/LoomConfig.html":{},"classes/PedalConfig.html":{},"injectables/PlayerService.html":{}}}],["numpicks",{"_index":575,"title":{},"body":{"interfaces/ChainOp.html":{},"interfaces/PairedOp.html":{},"interfaces/PedalEvent.html":{},"interfaces/PlayerOp.html":{},"interfaces/PlayerState.html":{},"interfaces/PlayerState-1.html":{},"interfaces/WeavingLog.html":{},"interfaces/WeavingPick.html":{},"interfaces/WeavingPick-1.html":{}}}],["numtreadles",{"_index":1953,"title":{},"body":{"components/DraftdetailComponent.html":{}}}],["numtreadles(loom",{"_index":2068,"title":{},"body":{"components/DraftdetailComponent.html":{}}}],["nxy",{"_index":1490,"title":{},"body":{"interfaces/DesignActions.html":{}}}],["o",{"_index":489,"title":{},"body":{"interfaces/ChainIndex.html":{},"interfaces/ChainOp.html":{},"interfaces/DraftOperationClassification.html":{},"interfaces/LoomConfig.html":{},"injectables/MappingsService.html":{},"classes/OpSequencer.html":{},"interfaces/PairedOp.html":{},"classes/PedalConfig.html":{},"interfaces/PedalEvent.html":{},"interfaces/PlayerOp.html":{},"injectables/PlayerService.html":{},"injectables/SequencerService.html":{}}}],["o.chain",{"_index":1731,"title":{},"body":{"interfaces/DraftOperationClassification.html":{},"interfaces/LoomConfig.html":{},"injectables/MappingsService.html":{},"classes/PedalConfig.html":{},"injectables/PlayerService.html":{}}}],["o.id",{"_index":1728,"title":{},"body":{"interfaces/DraftOperationClassification.html":{},"interfaces/LoomConfig.html":{},"injectables/MappingsService.html":{},"classes/PedalConfig.html":{},"injectables/PlayerService.html":{}}}],["o.name",{"_index":602,"title":{},"body":{"interfaces/ChainOp.html":{},"components/OpSequencerComponent.html":{},"interfaces/PairedOp.html":{},"interfaces/PedalEvent.html":{},"interfaces/PlayerOp.html":{}}}],["o.op",{"_index":610,"title":{},"body":{"interfaces/ChainOp.html":{},"interfaces/PairedOp.html":{},"interfaces/PedalEvent.html":{},"interfaces/PlayerOp.html":{}}}],["o.op.classifier.type",{"_index":608,"title":{},"body":{"interfaces/ChainOp.html":{},"interfaces/PairedOp.html":{},"interfaces/PedalEvent.html":{},"interfaces/PlayerOp.html":{}}}],["obj",{"_index":2743,"title":{},"body":{"components/MixerViewComponent.html":{},"components/ParameterComponent.html":{}}}],["obj.data",{"_index":3333,"title":{},"body":{"components/ParameterComponent.html":{}}}],["obj.id",{"_index":3331,"title":{},"body":{"components/ParameterComponent.html":{}}}],["obj.p.x",{"_index":2794,"title":{},"body":{"components/MixerViewComponent.html":{}}}],["object",{"_index":230,"title":{},"body":{"classes/AbstractOpFactory.html":{},"classes/BaseOp.html":{},"classes/Branch.html":{},"classes/Bus.html":{},"classes/Cell.html":{},"interfaces/ChainIndex.html":{},"components/ConnectionComponent.html":{},"interfaces/DraftNodeProxy.html":{},"components/DraftdetailComponent.html":{},"interfaces/FileObj.html":{},"interfaces/FileSaver.html":{},"interfaces/Fileloader.html":{},"interfaces/IOTuple.html":{},"interfaces/LoadResponse.html":{},"injectables/MappingsService.html":{},"classes/Merge.html":{},"interfaces/NodeComponentProxy.html":{},"interfaces/OpClassifier.html":{},"interfaces/OpComponentProxy.html":{},"interfaces/OperationProperties.html":{},"classes/Pipe.html":{},"classes/Render.html":{},"interfaces/SaveObj.html":{},"classes/Seed.html":{},"classes/Selection.html":{},"injectables/SequencerService.html":{},"classes/Shape.html":{},"classes/Shuttle.html":{},"interfaces/StatusMessage.html":{},"classes/System.html":{},"interfaces/TopologyDef.html":{},"interfaces/TreeNode.html":{},"interfaces/TreeNodeProxy.html":{},"components/WeavingStateComponent.html":{},"index.html":{}}}],["object.assign",{"_index":3735,"title":{},"body":{"interfaces/PlayerState.html":{},"interfaces/PlayerState-1.html":{},"interfaces/WeavingLog.html":{},"interfaces/WeavingPick.html":{},"interfaces/WeavingPick-1.html":{}}}],["object.defineproperty(this",{"_index":3407,"title":{},"body":{"interfaces/Pedal.html":{},"classes/PedalStatus.html":{},"injectables/PedalsService.html":{}}}],["object.entries(this.mapping).length",{"_index":1720,"title":{},"body":{"interfaces/DraftOperationClassification.html":{},"interfaces/LoomConfig.html":{},"classes/PedalConfig.html":{},"injectables/PlayerService.html":{}}}],["object.keys(parentkeys",{"_index":1112,"title":{},"body":{"classes/DBListener.html":{},"classes/DBListenerArray.html":{},"classes/DBNode.html":{},"classes/DBNodeArray.html":{},"classes/DBTwoWay.html":{},"classes/DBTwoWayArray.html":{},"classes/DBWriteBuffer.html":{},"classes/DBWriter.html":{},"classes/DBWriterArray.html":{},"interfaces/NodeMethods.html":{},"interfaces/NodeParams.html":{},"classes/OnlineStatus.html":{}}}],["object.keys(this._val",{"_index":990,"title":{},"body":{"classes/DBListener.html":{},"classes/DBListenerArray.html":{},"classes/DBNode.html":{},"classes/DBNodeArray.html":{},"classes/DBTwoWay.html":{},"classes/DBTwoWayArray.html":{},"classes/DBWriteBuffer.html":{},"classes/DBWriter.html":{},"classes/DBWriterArray.html":{},"interfaces/NodeMethods.html":{},"interfaces/NodeParams.html":{},"classes/OnlineStatus.html":{}}}],["objects",{"_index":2572,"title":{},"body":{"injectables/MappingsService.html":{},"injectables/ViewportService.html":{}}}],["objects/types",{"_index":1589,"title":{},"body":{"interfaces/DraftMap.html":{},"interfaces/DraftNodeProxy.html":{},"interfaces/FileObj.html":{},"interfaces/FileSaver.html":{},"interfaces/Fileloader.html":{},"interfaces/IOTuple.html":{},"interfaces/Interlacement.html":{},"interfaces/InterlacementVal.html":{},"interfaces/LoadResponse.html":{},"interfaces/LoomTypes.html":{},"interfaces/NodeComponentProxy.html":{},"interfaces/OpComponentProxy.html":{},"interfaces/SaveObj.html":{},"interfaces/StatusMessage.html":{},"interfaces/TreeNode.html":{},"interfaces/TreeNodeProxy.html":{},"miscellaneous/typealiases.html":{}}}],["objects/types/utility",{"_index":2136,"title":{},"body":{"interfaces/DynamicOperation.html":{},"interfaces/OpInput.html":{},"interfaces/OperationClassification.html":{},"interfaces/TreeOperation.html":{}}}],["objorname",{"_index":3196,"title":{},"body":{"interfaces/OperationParam.html":{},"classes/Params.html":{}}}],["objorname.dx",{"_index":3201,"title":{},"body":{"interfaces/OperationParam.html":{},"classes/Params.html":{}}}],["objorname.error",{"_index":3205,"title":{},"body":{"interfaces/OperationParam.html":{},"classes/Params.html":{}}}],["objorname.max",{"_index":3200,"title":{},"body":{"interfaces/OperationParam.html":{},"classes/Params.html":{}}}],["objorname.min",{"_index":3199,"title":{},"body":{"interfaces/OperationParam.html":{},"classes/Params.html":{}}}],["objorname.name",{"_index":3197,"title":{},"body":{"interfaces/OperationParam.html":{},"classes/Params.html":{}}}],["objorname.regex",{"_index":3204,"title":{},"body":{"interfaces/OperationParam.html":{},"classes/Params.html":{}}}],["objorname.value",{"_index":3198,"title":{},"body":{"interfaces/OperationParam.html":{},"classes/Params.html":{}}}],["objs",{"_index":4177,"title":{},"body":{"injectables/ViewportService.html":{}}}],["observable",{"_index":3232,"title":{},"body":{"components/OpsComponent.html":{}}}],["occasionally",{"_index":1151,"title":{},"body":{"classes/DBListener.html":{},"classes/DBListenerArray.html":{},"classes/DBNode.html":{},"classes/DBNodeArray.html":{},"classes/DBTwoWay.html":{},"classes/DBTwoWayArray.html":{},"classes/DBWriteBuffer.html":{},"classes/DBWriter.html":{},"classes/DBWriterArray.html":{},"interfaces/NodeMethods.html":{},"interfaces/NodeParams.html":{},"classes/OnlineStatus.html":{}}}],["offer",{"_index":3154,"title":{},"body":{"interfaces/OperationParam.html":{}}}],["offers",{"_index":3993,"title":{},"body":{"classes/Shape-1.html":{}}}],["offline",{"_index":4324,"title":{},"body":{"components/WeavingStateComponent.html":{}}}],["offset_x",{"_index":3808,"title":{},"body":{"classes/Render.html":{}}}],["offset_y",{"_index":3809,"title":{},"body":{"classes/Render.html":{}}}],["ok",{"_index":2189,"title":{},"body":{"interfaces/DynamicOperation.html":{},"interfaces/OpInput.html":{},"interfaces/OperationClassification.html":{},"interfaces/TreeOperation.html":{}}}],["old",{"_index":1696,"title":{},"body":{"interfaces/DraftOperationClassification.html":{},"interfaces/DynamicOperation.html":{},"interfaces/LoomConfig.html":{},"interfaces/OpInput.html":{},"interfaces/OperationClassification.html":{},"classes/PedalConfig.html":{},"injectables/PlayerService.html":{},"interfaces/TreeOperation.html":{}}}],["old_names",{"_index":225,"title":{},"body":{"classes/AbstractOpFactory.html":{},"classes/BaseOp.html":{},"classes/Branch.html":{},"classes/Bus.html":{},"interfaces/DynamicOperation.html":{},"classes/Merge.html":{},"interfaces/OpClassifier.html":{},"interfaces/OpInput.html":{},"interfaces/OperationClassification.html":{},"interfaces/OperationProperties.html":{},"classes/Pipe.html":{},"classes/Seed.html":{},"interfaces/TopologyDef.html":{},"interfaces/TreeOperation.html":{}}}],["onaddpedal(p",{"_index":2587,"title":{},"body":{"injectables/MappingsService.html":{}}}],["oncancel",{"_index":1954,"title":{},"body":{"components/DraftdetailComponent.html":{}}}],["once",{"_index":2573,"title":{},"body":{"injectables/MappingsService.html":{},"classes/Shape.html":{},"index.html":{}}}],["onchanges",{"_index":1291,"title":{},"body":{"interfaces/DesignActions.html":{}}}],["onchildadded",{"_index":956,"title":{},"body":{"classes/DBListener.html":{},"classes/DBListenerArray.html":{},"classes/DBNode.html":{},"classes/DBNodeArray.html":{},"classes/DBTwoWay.html":{},"classes/DBTwoWayArray.html":{},"classes/DBWriteBuffer.html":{},"classes/DBWriter.html":{},"classes/DBWriterArray.html":{},"interfaces/NodeMethods.html":{},"interfaces/NodeParams.html":{},"classes/OnlineStatus.html":{}}}],["onchildadded(this.parentnode.ref",{"_index":1073,"title":{},"body":{"classes/DBListener.html":{},"classes/DBListenerArray.html":{},"classes/DBNode.html":{},"classes/DBNodeArray.html":{},"classes/DBTwoWay.html":{},"classes/DBTwoWayArray.html":{},"classes/DBWriteBuffer.html":{},"classes/DBWriter.html":{},"classes/DBWriterArray.html":{},"interfaces/NodeMethods.html":{},"interfaces/NodeParams.html":{},"classes/OnlineStatus.html":{}}}],["onchildchanged",{"_index":957,"title":{},"body":{"classes/DBListener.html":{},"classes/DBListenerArray.html":{},"classes/DBNode.html":{},"classes/DBNodeArray.html":{},"classes/DBTwoWay.html":{},"classes/DBTwoWayArray.html":{},"classes/DBWriteBuffer.html":{},"classes/DBWriter.html":{},"classes/DBWriterArray.html":{},"interfaces/NodeMethods.html":{},"interfaces/NodeParams.html":{},"classes/OnlineStatus.html":{}}}],["onchildchanged(this.parentnode.ref",{"_index":1076,"title":{},"body":{"classes/DBListener.html":{},"classes/DBListenerArray.html":{},"classes/DBNode.html":{},"classes/DBNodeArray.html":{},"classes/DBTwoWay.html":{},"classes/DBTwoWayArray.html":{},"classes/DBWriteBuffer.html":{},"classes/DBWriter.html":{},"classes/DBWriterArray.html":{},"interfaces/NodeMethods.html":{},"interfaces/NodeParams.html":{},"classes/OnlineStatus.html":{}}}],["onchildremoved",{"_index":958,"title":{},"body":{"classes/DBListener.html":{},"classes/DBListenerArray.html":{},"classes/DBNode.html":{},"classes/DBNodeArray.html":{},"classes/DBTwoWay.html":{},"classes/DBTwoWayArray.html":{},"classes/DBWriteBuffer.html":{},"classes/DBWriter.html":{},"classes/DBWriterArray.html":{},"interfaces/NodeMethods.html":{},"interfaces/NodeParams.html":{},"classes/OnlineStatus.html":{}}}],["onchildremoved(this.parentnode.ref",{"_index":1078,"title":{},"body":{"classes/DBListener.html":{},"classes/DBListenerArray.html":{},"classes/DBNode.html":{},"classes/DBNodeArray.html":{},"classes/DBTwoWay.html":{},"classes/DBTwoWayArray.html":{},"classes/DBWriteBuffer.html":{},"classes/DBWriter.html":{},"classes/DBWriterArray.html":{},"interfaces/NodeMethods.html":{},"interfaces/NodeParams.html":{},"classes/OnlineStatus.html":{}}}],["onconnectionmade",{"_index":1345,"title":{},"body":{"interfaces/DesignActions.html":{}}}],["onconnectionremoved",{"_index":1346,"title":{},"body":{"interfaces/DesignActions.html":{},"components/InletComponent.html":{}}}],["onconnectionstarted:any",{"_index":1348,"title":{},"body":{"interfaces/DesignActions.html":{}}}],["ondeletecalled",{"_index":1343,"title":{},"body":{"interfaces/DesignActions.html":{}}}],["ondesignaction",{"_index":1347,"title":{},"body":{"interfaces/DesignActions.html":{}}}],["ondrafttoplayer",{"_index":1351,"title":{},"body":{"interfaces/DesignActions.html":{}}}],["onduplicatecalled",{"_index":1344,"title":{},"body":{"interfaces/DesignActions.html":{}}}],["one",{"_index":112,"title":{},"body":{"classes/AbstractOpFactory.html":{},"classes/BaseOp.html":{},"classes/Branch.html":{},"classes/Bus.html":{},"interfaces/ChainOp.html":{},"components/ConnectionComponent.html":{},"interfaces/DraftOperationClassification.html":{},"interfaces/DynamicOperation.html":{},"interfaces/IOTuple.html":{},"interfaces/LoomConfig.html":{},"classes/Merge.html":{},"components/MixerViewComponent.html":{},"interfaces/OpClassifier.html":{},"components/OpHelpModal.html":{},"interfaces/OpInput.html":{},"classes/OpSequencer.html":{},"interfaces/OperationClassification.html":{},"interfaces/OperationProperties.html":{},"interfaces/PairedOp.html":{},"classes/PedalConfig.html":{},"interfaces/PedalEvent.html":{},"classes/Pipe.html":{},"interfaces/PlayerOp.html":{},"injectables/PlayerService.html":{},"classes/Seed.html":{},"interfaces/TopologyDef.html":{},"interfaces/TreeNode.html":{},"interfaces/TreeOperation.html":{},"index.html":{},"miscellaneous/typealiases.html":{}}}],["onfileupload",{"_index":3277,"title":{},"body":{"components/ParameterComponent.html":{}}}],["onimport",{"_index":3216,"title":{},"body":{"components/OpsComponent.html":{}}}],["onimport:any",{"_index":3241,"title":{},"body":{"components/OpsComponent.html":{}}}],["oninit",{"_index":631,"title":{},"body":{"components/ConnectionComponent.html":{},"interfaces/DesignActions.html":{},"components/DraftdetailComponent.html":{},"components/ImageComponent.html":{},"components/InletComponent.html":{},"directives/MarqueeComponent.html":{},"components/MixerViewComponent.html":{},"components/NoteComponent.html":{},"components/OpHelpModal.html":{},"components/OpSequencerComponent.html":{},"components/OpsComponent.html":{},"components/ParameterComponent.html":{},"components/PlayerComponent.html":{},"directives/SelectionComponent.html":{},"components/SnackbarComponent.html":{},"components/VirtualPedalsComponent.html":{},"components/WeavingStateComponent.html":{}}}],["oninletchange",{"_index":2397,"title":{},"body":{"components/InletComponent.html":{}}}],["oninputselected",{"_index":2398,"title":{},"body":{"components/InletComponent.html":{}}}],["onkeypress",{"_index":4263,"title":{},"body":{"components/VirtualPedalsComponent.html":{}}}],["onkeypress(event",{"_index":4271,"title":{},"body":{"components/VirtualPedalsComponent.html":{}}}],["online",{"_index":1146,"title":{},"body":{"classes/DBListener.html":{},"classes/DBListenerArray.html":{},"classes/DBNode.html":{},"classes/DBNodeArray.html":{},"classes/DBTwoWay.html":{},"classes/DBTwoWayArray.html":{},"classes/DBWriteBuffer.html":{},"classes/DBWriter.html":{},"classes/DBWriterArray.html":{},"interfaces/NodeMethods.html":{},"interfaces/NodeParams.html":{},"classes/OnlineStatus.html":{},"interfaces/Pedal.html":{},"classes/PedalStatus.html":{},"injectables/PedalsService.html":{},"components/WeavingStateComponent.html":{}}}],["onlinestatus",{"_index":1141,"title":{"classes/OnlineStatus.html":{}},"body":{"classes/DBListener.html":{},"classes/DBListenerArray.html":{},"classes/DBNode.html":{},"classes/DBNodeArray.html":{},"classes/DBTwoWay.html":{},"classes/DBTwoWayArray.html":{},"classes/DBWriteBuffer.html":{},"classes/DBWriter.html":{},"classes/DBWriterArray.html":{},"interfaces/NodeMethods.html":{},"interfaces/NodeParams.html":{},"classes/OnlineStatus.html":{},"interfaces/Pedal.html":{},"classes/PedalStatus.html":{},"injectables/PedalsService.html":{}}}],["onlinestatus(params('pi",{"_index":3400,"title":{},"body":{"interfaces/Pedal.html":{},"classes/PedalStatus.html":{},"injectables/PedalsService.html":{}}}],["onnamechange:any",{"_index":1350,"title":{},"body":{"interfaces/DesignActions.html":{}}}],["onnoclick",{"_index":1955,"title":{},"body":{"components/DraftdetailComponent.html":{}}}],["onnodeadded",{"_index":1219,"title":{},"body":{"classes/DBTwoWayArray.html":{}}}],["onnodeadded(key",{"_index":1134,"title":{},"body":{"classes/DBListener.html":{},"classes/DBListenerArray.html":{},"classes/DBNode.html":{},"classes/DBNodeArray.html":{},"classes/DBTwoWay.html":{},"classes/DBTwoWayArray.html":{},"classes/DBWriteBuffer.html":{},"classes/DBWriter.html":{},"classes/DBWriterArray.html":{},"interfaces/NodeMethods.html":{},"interfaces/NodeParams.html":{},"classes/OnlineStatus.html":{}}}],["onnoderemoved",{"_index":1138,"title":{},"body":{"classes/DBListener.html":{},"classes/DBListenerArray.html":{},"classes/DBNode.html":{},"classes/DBNodeArray.html":{},"classes/DBTwoWay.html":{},"classes/DBTwoWayArray.html":{},"classes/DBWriteBuffer.html":{},"classes/DBWriter.html":{},"classes/DBWriterArray.html":{},"interfaces/NodeMethods.html":{},"interfaces/NodeParams.html":{},"classes/OnlineStatus.html":{}}}],["onoperationadded",{"_index":3217,"title":{},"body":{"components/OpsComponent.html":{}}}],["onoperationadded:any",{"_index":3240,"title":{},"body":{"components/OpsComponent.html":{}}}],["onoperationparamchange",{"_index":3278,"title":{},"body":{"components/ParameterComponent.html":{}}}],["onparamchange",{"_index":3275,"title":{},"body":{"components/ParameterComponent.html":{}}}],["onparamchange(value",{"_index":3288,"title":{},"body":{"components/ParameterComponent.html":{}}}],["onpedal",{"_index":3698,"title":{},"body":{"injectables/PlayerService.html":{}}}],["onpedal(id",{"_index":1911,"title":{},"body":{"interfaces/DraftOperationClassification.html":{},"interfaces/LoomConfig.html":{},"classes/PedalConfig.html":{},"injectables/PlayerService.html":{}}}],["onrempedal",{"_index":2588,"title":{},"body":{"injectables/MappingsService.html":{}}}],["onsave",{"_index":1956,"title":{},"body":{"components/DraftdetailComponent.html":{}}}],["onscreen",{"_index":2813,"title":{},"body":{"components/MixerViewComponent.html":{}}}],["onsubdraftdrop",{"_index":1341,"title":{},"body":{"interfaces/DesignActions.html":{}}}],["onsubdraftmove",{"_index":1340,"title":{},"body":{"interfaces/DesignActions.html":{}}}],["onsubdraftstart",{"_index":1342,"title":{},"body":{"interfaces/DesignActions.html":{}}}],["onsubdraftviewchange:any",{"_index":1349,"title":{},"body":{"interfaces/DesignActions.html":{}}}],["onto",{"_index":2880,"title":{},"body":{"components/NoteComponent.html":{},"classes/OpSequencer.html":{},"index.html":{},"miscellaneous/typealiases.html":{}}}],["onvalue",{"_index":950,"title":{},"body":{"classes/DBListener.html":{},"classes/DBListenerArray.html":{},"classes/DBNode.html":{},"classes/DBNodeArray.html":{},"classes/DBTwoWay.html":{},"classes/DBTwoWayArray.html":{},"classes/DBWriteBuffer.html":{},"classes/DBWriter.html":{},"classes/DBWriterArray.html":{},"interfaces/NodeMethods.html":{},"interfaces/NodeParams.html":{},"classes/OnlineStatus.html":{}}}],["onvalue(this.ref",{"_index":1002,"title":{},"body":{"classes/DBListener.html":{},"classes/DBListenerArray.html":{},"classes/DBNode.html":{},"classes/DBNodeArray.html":{},"classes/DBTwoWay.html":{},"classes/DBTwoWayArray.html":{},"classes/DBWriteBuffer.html":{},"classes/DBWriter.html":{},"classes/DBWriterArray.html":{},"interfaces/NodeMethods.html":{},"interfaces/NodeParams.html":{},"classes/OnlineStatus.html":{}}}],["onviewportmove",{"_index":2728,"title":{},"body":{"components/MixerViewComponent.html":{}}}],["onwindowscroll",{"_index":1957,"title":{},"body":{"components/DraftdetailComponent.html":{}}}],["onwindowscroll(data",{"_index":1979,"title":{},"body":{"components/DraftdetailComponent.html":{}}}],["onzoomchange",{"_index":2729,"title":{},"body":{"components/MixerViewComponent.html":{}}}],["op",{"_index":280,"title":{},"body":{"classes/AbstractOpFactory.html":{},"classes/BaseOp.html":{},"classes/Branch.html":{},"classes/Bus.html":{},"interfaces/ChainIndex.html":{},"interfaces/ChainOp.html":{},"components/ConnectionComponent.html":{},"interfaces/DraftOperationClassification.html":{},"components/DraftdetailComponent.html":{},"interfaces/DynamicOperation.html":{},"interfaces/IOTuple.html":{},"components/ImageComponent.html":{},"components/InletComponent.html":{},"interfaces/LoomConfig.html":{},"injectables/MappingsService.html":{},"classes/Merge.html":{},"components/MixerViewComponent.html":{},"components/NoteComponent.html":{},"interfaces/OpClassifier.html":{},"components/OpHelpModal.html":{},"interfaces/OpInput.html":{},"components/OpSequencerComponent.html":{},"interfaces/OperationClassification.html":{},"interfaces/OperationProperties.html":{},"components/OpsComponent.html":{},"interfaces/PairedOp.html":{},"components/ParameterComponent.html":{},"interfaces/Pedal.html":{},"classes/PedalConfig.html":{},"interfaces/PedalEvent.html":{},"classes/PedalStatus.html":{},"injectables/PedalsService.html":{},"classes/Pipe.html":{},"components/PlayerComponent.html":{},"modules/PlayerModule.html":{},"interfaces/PlayerOp.html":{},"injectables/PlayerService.html":{},"classes/Seed.html":{},"injectables/SequencerService.html":{},"components/SnackbarComponent.html":{},"interfaces/TopologyDef.html":{},"interfaces/TreeNode.html":{},"interfaces/TreeOperation.html":{},"components/VirtualPedalsComponent.html":{},"components/WeavingStateComponent.html":{},"miscellaneous/functions.html":{}}}],["op).dynamic_param_id",{"_index":2983,"title":{},"body":{"components/OpHelpModal.html":{}}}],["op).dynamic_param_type",{"_index":2442,"title":{},"body":{"components/InletComponent.html":{},"components/OpHelpModal.html":{}}}],["op.classifier.type",{"_index":548,"title":{},"body":{"interfaces/ChainOp.html":{},"interfaces/PairedOp.html":{},"interfaces/PedalEvent.html":{},"interfaces/PlayerOp.html":{}}}],["op.constrain(\"all_req",{"_index":287,"title":{},"body":{"classes/AbstractOpFactory.html":{},"classes/BaseOp.html":{},"classes/Branch.html":{},"classes/Bus.html":{},"classes/Merge.html":{},"interfaces/OpClassifier.html":{},"interfaces/OperationProperties.html":{},"classes/Pipe.html":{},"classes/Seed.html":{},"interfaces/TopologyDef.html":{}}}],["op.constrain(\"drafts_opt",{"_index":285,"title":{},"body":{"classes/AbstractOpFactory.html":{},"classes/BaseOp.html":{},"classes/Branch.html":{},"classes/Bus.html":{},"classes/Merge.html":{},"interfaces/OpClassifier.html":{},"interfaces/OperationProperties.html":{},"classes/Pipe.html":{},"classes/Seed.html":{},"interfaces/TopologyDef.html":{}}}],["op.constrain(\"no_drafts",{"_index":283,"title":{},"body":{"classes/AbstractOpFactory.html":{},"classes/BaseOp.html":{},"classes/Branch.html":{},"classes/Bus.html":{},"classes/Merge.html":{},"interfaces/OpClassifier.html":{},"interfaces/OperationProperties.html":{},"classes/Pipe.html":{},"classes/Seed.html":{},"interfaces/TopologyDef.html":{}}}],["op.constrain(\"no_params",{"_index":284,"title":{},"body":{"classes/AbstractOpFactory.html":{},"classes/BaseOp.html":{},"classes/Branch.html":{},"classes/Bus.html":{},"classes/Merge.html":{},"interfaces/OpClassifier.html":{},"interfaces/OperationProperties.html":{},"classes/Pipe.html":{},"classes/Seed.html":{},"interfaces/TopologyDef.html":{}}}],["op.constrain(\"params_opt",{"_index":286,"title":{},"body":{"classes/AbstractOpFactory.html":{},"classes/BaseOp.html":{},"classes/Branch.html":{},"classes/Bus.html":{},"classes/Merge.html":{},"interfaces/OpClassifier.html":{},"interfaces/OperationProperties.html":{},"classes/Pipe.html":{},"classes/Seed.html":{},"interfaces/TopologyDef.html":{}}}],["op.displayname",{"_index":3265,"title":{},"body":{"components/OpsComponent.html":{}}}],["op.dx",{"_index":560,"title":{},"body":{"interfaces/ChainOp.html":{},"interfaces/PairedOp.html":{},"interfaces/PedalEvent.html":{},"interfaces/PlayerOp.html":{}}}],["op.inlets.length",{"_index":570,"title":{},"body":{"interfaces/ChainOp.html":{},"components/InletComponent.html":{},"interfaces/PairedOp.html":{},"interfaces/PedalEvent.html":{},"interfaces/PlayerOp.html":{}}}],["op.inlets[this.inletid",{"_index":2447,"title":{},"body":{"components/InletComponent.html":{}}}],["op.name",{"_index":555,"title":{},"body":{"interfaces/ChainOp.html":{},"interfaces/DraftOperationClassification.html":{},"interfaces/LoomConfig.html":{},"injectables/MappingsService.html":{},"components/OpSequencerComponent.html":{},"interfaces/PairedOp.html":{},"classes/PedalConfig.html":{},"interfaces/PedalEvent.html":{},"interfaces/PlayerOp.html":{},"injectables/PlayerService.html":{},"components/WeavingStateComponent.html":{}}}],["op.params",{"_index":2172,"title":{},"body":{"interfaces/DynamicOperation.html":{},"components/OpHelpModal.html":{},"interfaces/OpInput.html":{},"interfaces/OperationClassification.html":{},"interfaces/TreeOperation.html":{}}}],["op.params.length",{"_index":2173,"title":{},"body":{"interfaces/DynamicOperation.html":{},"interfaces/OpInput.html":{},"interfaces/OperationClassification.html":{},"interfaces/TreeOperation.html":{}}}],["op.params.map((el",{"_index":2174,"title":{},"body":{"interfaces/DynamicOperation.html":{},"interfaces/OpInput.html":{},"interfaces/OperationClassification.html":{},"interfaces/TreeOperation.html":{}}}],["op.perform([param_input",{"_index":580,"title":{},"body":{"interfaces/ChainOp.html":{},"interfaces/PairedOp.html":{},"interfaces/PedalEvent.html":{},"interfaces/PlayerOp.html":{}}}],["op.perform([param_input]).then((output",{"_index":571,"title":{},"body":{"interfaces/ChainOp.html":{},"interfaces/PairedOp.html":{},"interfaces/PedalEvent.html":{},"interfaces/PlayerOp.html":{}}}],["op.perform(init",{"_index":593,"title":{},"body":{"interfaces/ChainOp.html":{},"interfaces/PairedOp.html":{},"interfaces/PedalEvent.html":{},"interfaces/PlayerOp.html":{}}}],["op_array",{"_index":1753,"title":{},"body":{"interfaces/DraftOperationClassification.html":{},"interfaces/LoomConfig.html":{},"injectables/MappingsService.html":{},"classes/PedalConfig.html":{},"injectables/PlayerService.html":{}}}],["op_definitions",{"_index":2178,"title":{},"body":{"interfaces/DynamicOperation.html":{},"interfaces/OpInput.html":{},"interfaces/OperationClassification.html":{},"interfaces/TreeOperation.html":{}}}],["op_inputs",{"_index":2171,"title":{},"body":{"interfaces/DynamicOperation.html":{},"interfaces/OpInput.html":{},"interfaces/OperationClassification.html":{},"interfaces/TreeOperation.html":{}}}],["op_inputs.filter((el",{"_index":2199,"title":{},"body":{"interfaces/DynamicOperation.html":{},"interfaces/OpInput.html":{},"interfaces/OperationClassification.html":{},"interfaces/TreeOperation.html":{}}}],["op_inputs.map((el",{"_index":2226,"title":{},"body":{"interfaces/DynamicOperation.html":{},"interfaces/OpInput.html":{},"interfaces/OperationClassification.html":{},"interfaces/TreeOperation.html":{}}}],["op_inputs[0",{"_index":2191,"title":{},"body":{"interfaces/DynamicOperation.html":{},"interfaces/OpInput.html":{},"interfaces/OperationClassification.html":{},"interfaces/TreeOperation.html":{}}}],["op_inputs[0].params",{"_index":2210,"title":{},"body":{"interfaces/DynamicOperation.html":{},"interfaces/OpInput.html":{},"interfaces/OperationClassification.html":{},"interfaces/TreeOperation.html":{}}}],["op_inputs[0].params.length",{"_index":2211,"title":{},"body":{"interfaces/DynamicOperation.html":{},"interfaces/OpInput.html":{},"interfaces/OperationClassification.html":{},"interfaces/TreeOperation.html":{}}}],["op_mappings",{"_index":3056,"title":{},"body":{"classes/OpSequencer.html":{}}}],["op_name",{"_index":568,"title":{},"body":{"interfaces/ChainOp.html":{},"interfaces/DynamicOperation.html":{},"interfaces/OpInput.html":{},"interfaces/OperationClassification.html":{},"interfaces/PairedOp.html":{},"interfaces/PedalEvent.html":{},"interfaces/PlayerOp.html":{},"interfaces/TreeOperation.html":{},"miscellaneous/functions.html":{}}}],["op_sequencer",{"_index":3616,"title":{},"body":{"components/PlayerComponent.html":{}}}],["opchain",{"_index":2571,"title":{},"body":{"injectables/MappingsService.html":{}}}],["opchains",{"_index":3107,"title":{},"body":{"components/OpSequencerComponent.html":{}}}],["opclassifier",{"_index":176,"title":{"interfaces/OpClassifier.html":{}},"body":{"classes/AbstractOpFactory.html":{},"classes/BaseOp.html":{},"classes/Branch.html":{},"classes/Bus.html":{},"classes/Merge.html":{},"interfaces/OpClassifier.html":{},"interfaces/OperationProperties.html":{},"classes/Pipe.html":{},"classes/Seed.html":{},"interfaces/TopologyDef.html":{}}}],["opcomponentproxy",{"_index":1659,"title":{"interfaces/OpComponentProxy.html":{}},"body":{"interfaces/DraftNodeProxy.html":{},"interfaces/FileObj.html":{},"interfaces/FileSaver.html":{},"interfaces/Fileloader.html":{},"interfaces/LoadResponse.html":{},"interfaces/NodeComponentProxy.html":{},"interfaces/OpComponentProxy.html":{},"interfaces/SaveObj.html":{},"interfaces/StatusMessage.html":{},"interfaces/TreeNodeProxy.html":{}}}],["opconstraint",{"_index":157,"title":{},"body":{"classes/AbstractOpFactory.html":{},"classes/BaseOp.html":{},"classes/Branch.html":{},"classes/Bus.html":{},"classes/Merge.html":{},"interfaces/OpClassifier.html":{},"interfaces/OperationProperties.html":{},"classes/Pipe.html":{},"classes/Seed.html":{},"interfaces/TopologyDef.html":{},"miscellaneous/typealiases.html":{}}}],["opconstructorargkeys",{"_index":15,"title":{},"body":{"classes/AbstractOpFactory.html":{},"classes/BaseOp.html":{},"classes/Branch.html":{},"classes/Bus.html":{},"classes/Merge.html":{},"interfaces/OpClassifier.html":{},"interfaces/OperationProperties.html":{},"classes/Pipe.html":{},"classes/Seed.html":{},"interfaces/TopologyDef.html":{},"miscellaneous/typealiases.html":{}}}],["opconstructorargs",{"_index":233,"title":{},"body":{"classes/AbstractOpFactory.html":{},"classes/BaseOp.html":{},"classes/Branch.html":{},"classes/Bus.html":{},"classes/Merge.html":{},"interfaces/OpClassifier.html":{},"interfaces/OperationProperties.html":{},"classes/Pipe.html":{},"classes/Seed.html":{},"interfaces/TopologyDef.html":{},"miscellaneous/typealiases.html":{}}}],["opconstructorarray",{"_index":27,"title":{},"body":{"classes/AbstractOpFactory.html":{},"classes/BaseOp.html":{},"classes/Branch.html":{},"classes/Bus.html":{},"classes/Merge.html":{},"interfaces/OpClassifier.html":{},"interfaces/OperationProperties.html":{},"classes/Pipe.html":{},"classes/Seed.html":{},"interfaces/TopologyDef.html":{},"miscellaneous/typealiases.html":{}}}],["opearation",{"_index":195,"title":{},"body":{"classes/AbstractOpFactory.html":{},"classes/BaseOp.html":{},"classes/Branch.html":{},"classes/Bus.html":{},"interfaces/DynamicOperation.html":{},"classes/Merge.html":{},"interfaces/OpClassifier.html":{},"interfaces/OpInput.html":{},"interfaces/OperationClassification.html":{},"interfaces/OperationProperties.html":{},"classes/Pipe.html":{},"classes/Seed.html":{},"interfaces/TopologyDef.html":{},"interfaces/TreeOperation.html":{}}}],["open",{"_index":1550,"title":{},"body":{"interfaces/DesignActions.html":{},"components/PlayerComponent.html":{},"index.html":{}}}],["operaction",{"_index":1658,"title":{},"body":{"interfaces/DraftNodeProxy.html":{},"interfaces/FileObj.html":{},"interfaces/FileSaver.html":{},"interfaces/Fileloader.html":{},"interfaces/LoadResponse.html":{},"interfaces/NodeComponentProxy.html":{},"interfaces/OpComponentProxy.html":{},"interfaces/SaveObj.html":{},"interfaces/StatusMessage.html":{},"interfaces/TreeNodeProxy.html":{}}}],["operation",{"_index":63,"title":{},"body":{"classes/AbstractOpFactory.html":{},"classes/BaseOp.html":{},"classes/Branch.html":{},"classes/Bus.html":{},"interfaces/ChainOp.html":{},"components/ConnectionComponent.html":{},"interfaces/DesignActions.html":{},"interfaces/DraftMap.html":{},"interfaces/DraftNodeProxy.html":{},"interfaces/DraftOperationClassification.html":{},"components/DraftdetailComponent.html":{},"interfaces/DynamicOperation.html":{},"interfaces/FileObj.html":{},"interfaces/FileSaver.html":{},"interfaces/Fileloader.html":{},"interfaces/IOTuple.html":{},"interfaces/Interlacement.html":{},"interfaces/InterlacementVal.html":{},"interfaces/LoadResponse.html":{},"interfaces/LoomConfig.html":{},"injectables/MappingsService.html":{},"classes/Merge.html":{},"interfaces/NodeComponentProxy.html":{},"interfaces/OpClassifier.html":{},"interfaces/OpComponentProxy.html":{},"components/OpHelpModal.html":{},"interfaces/OpInput.html":{},"classes/OpSequencer.html":{},"components/OpSequencerComponent.html":{},"interfaces/OperationClassification.html":{},"interfaces/OperationParam.html":{},"interfaces/OperationProperties.html":{},"interfaces/PairedOp.html":{},"classes/Params.html":{},"interfaces/Pedal.html":{},"classes/PedalConfig.html":{},"interfaces/PedalEvent.html":{},"classes/PedalStatus.html":{},"injectables/PedalsService.html":{},"classes/Pipe.html":{},"interfaces/PlayerOp.html":{},"injectables/PlayerService.html":{},"interfaces/SaveObj.html":{},"classes/Seed.html":{},"interfaces/StatusMessage.html":{},"interfaces/TopologyDef.html":{},"interfaces/TreeNode.html":{},"interfaces/TreeNodeProxy.html":{},"interfaces/TreeOperation.html":{},"components/WeavingStateComponent.html":{},"index.html":{},"miscellaneous/typealiases.html":{}}}],["operation's",{"_index":76,"title":{},"body":{"classes/AbstractOpFactory.html":{},"classes/BaseOp.html":{},"classes/Branch.html":{},"classes/Bus.html":{},"classes/Merge.html":{},"interfaces/OpClassifier.html":{},"interfaces/OperationProperties.html":{},"classes/Pipe.html":{},"classes/Seed.html":{},"interfaces/TopologyDef.html":{}}}],["operation'},{'name",{"_index":841,"title":{},"body":{"components/ConnectionComponent.html":{},"components/DraftdetailComponent.html":{},"components/ImageComponent.html":{},"components/InletComponent.html":{},"components/MixerViewComponent.html":{},"components/NoteComponent.html":{},"components/OpHelpModal.html":{},"components/OpSequencerComponent.html":{},"components/OpsComponent.html":{},"components/ParameterComponent.html":{},"components/PlayerComponent.html":{},"components/SnackbarComponent.html":{},"components/VirtualPedalsComponent.html":{},"components/WeavingStateComponent.html":{}}}],["operation/formatting",{"_index":2138,"title":{},"body":{"interfaces/DynamicOperation.html":{},"interfaces/OpInput.html":{},"interfaces/OperationClassification.html":{},"interfaces/TreeOperation.html":{}}}],["operation/inlets",{"_index":2134,"title":{},"body":{"interfaces/DynamicOperation.html":{},"interfaces/OpInput.html":{},"interfaces/OperationClassification.html":{},"interfaces/TreeOperation.html":{}}}],["operation/operation.component",{"_index":715,"title":{},"body":{"components/ConnectionComponent.html":{},"interfaces/DesignActions.html":{}}}],["operation/params",{"_index":2133,"title":{},"body":{"interfaces/DynamicOperation.html":{},"interfaces/OpInput.html":{},"interfaces/OperationClassification.html":{},"interfaces/TreeOperation.html":{}}}],["operation/topology",{"_index":2135,"title":{},"body":{"interfaces/DynamicOperation.html":{},"interfaces/OpInput.html":{},"interfaces/OperationClassification.html":{},"interfaces/TreeOperation.html":{}}}],["operationclassification",{"_index":2248,"title":{"interfaces/OperationClassification.html":{}},"body":{"interfaces/DynamicOperation.html":{},"interfaces/OpInput.html":{},"interfaces/OperationClassification.html":{},"interfaces/TreeOperation.html":{}}}],["operationcomponent",{"_index":690,"title":{},"body":{"components/ConnectionComponent.html":{},"interfaces/DesignActions.html":{},"components/DraftdetailComponent.html":{},"interfaces/IOTuple.html":{},"components/ImageComponent.html":{},"components/InletComponent.html":{},"modules/MixerModule.html":{},"components/MixerViewComponent.html":{},"components/NoteComponent.html":{},"components/OpHelpModal.html":{},"components/OpSequencerComponent.html":{},"components/OpsComponent.html":{},"components/ParameterComponent.html":{},"components/PlayerComponent.html":{},"components/SnackbarComponent.html":{},"interfaces/TreeNode.html":{},"components/VirtualPedalsComponent.html":{},"components/WeavingStateComponent.html":{},"overview.html":{}}}],["operationdescriptors",{"_index":186,"title":{},"body":{"classes/AbstractOpFactory.html":{},"classes/BaseOp.html":{},"classes/Branch.html":{},"classes/Bus.html":{},"classes/Merge.html":{},"interfaces/OpClassifier.html":{},"interfaces/OperationProperties.html":{},"classes/Pipe.html":{},"classes/Seed.html":{},"interfaces/TopologyDef.html":{},"miscellaneous/typealiases.html":{}}}],["operationinlet",{"_index":58,"title":{},"body":{"classes/AbstractOpFactory.html":{},"classes/BaseOp.html":{},"classes/Branch.html":{},"classes/Bus.html":{},"interfaces/DynamicOperation.html":{},"components/InletComponent.html":{},"classes/Merge.html":{},"interfaces/OpClassifier.html":{},"interfaces/OpInput.html":{},"interfaces/OperationClassification.html":{},"interfaces/OperationProperties.html":{},"classes/Pipe.html":{},"classes/Seed.html":{},"interfaces/TopologyDef.html":{},"interfaces/TreeOperation.html":{},"miscellaneous/typealiases.html":{}}}],["operationinlet,opnode",{"_index":2429,"title":{},"body":{"components/InletComponent.html":{}}}],["operationparam",{"_index":54,"title":{"interfaces/OperationParam.html":{}},"body":{"classes/AbstractOpFactory.html":{},"classes/BaseOp.html":{},"classes/Branch.html":{},"classes/Bus.html":{},"interfaces/DynamicOperation.html":{},"classes/Merge.html":{},"interfaces/OpClassifier.html":{},"interfaces/OpInput.html":{},"interfaces/OperationClassification.html":{},"interfaces/OperationParam.html":{},"interfaces/OperationProperties.html":{},"classes/Params.html":{},"classes/Pipe.html":{},"classes/Seed.html":{},"interfaces/TopologyDef.html":{},"interfaces/TreeOperation.html":{}}}],["operationparam[\"type",{"_index":3157,"title":{},"body":{"interfaces/OperationParam.html":{},"classes/Params.html":{}}}],["operationparam[\"value",{"_index":3158,"title":{},"body":{"interfaces/OperationParam.html":{},"classes/Params.html":{}}}],["operationparameters",{"_index":3193,"title":{},"body":{"interfaces/OperationParam.html":{},"classes/Params.html":{}}}],["operationparams",{"_index":3188,"title":{},"body":{"interfaces/OperationParam.html":{},"classes/Params.html":{},"miscellaneous/functions.html":{}}}],["operationproperties",{"_index":208,"title":{"interfaces/OperationProperties.html":{}},"body":{"classes/AbstractOpFactory.html":{},"classes/BaseOp.html":{},"classes/Branch.html":{},"classes/Bus.html":{},"classes/Merge.html":{},"interfaces/OpClassifier.html":{},"interfaces/OperationProperties.html":{},"classes/Pipe.html":{},"classes/Seed.html":{},"interfaces/TopologyDef.html":{}}}],["operations",{"_index":96,"title":{},"body":{"classes/AbstractOpFactory.html":{},"classes/BaseOp.html":{},"classes/Branch.html":{},"classes/Bus.html":{},"interfaces/ChainOp.html":{},"interfaces/DraftOperationClassification.html":{},"interfaces/DynamicOperation.html":{},"interfaces/IOTuple.html":{},"interfaces/LoomConfig.html":{},"classes/Merge.html":{},"interfaces/OpClassifier.html":{},"interfaces/OpInput.html":{},"classes/OpSequencer.html":{},"components/OpSequencerComponent.html":{},"interfaces/OperationClassification.html":{},"interfaces/OperationParam.html":{},"interfaces/OperationProperties.html":{},"components/OpsComponent.html":{},"interfaces/PairedOp.html":{},"classes/PedalConfig.html":{},"interfaces/PedalEvent.html":{},"classes/Pipe.html":{},"interfaces/PlayerOp.html":{},"injectables/PlayerService.html":{},"classes/Seed.html":{},"interfaces/TopologyDef.html":{},"interfaces/TreeNode.html":{},"interfaces/TreeOperation.html":{},"index.html":{}}}],["operationservice",{"_index":1303,"title":{},"body":{"interfaces/DesignActions.html":{},"interfaces/DraftOperationClassification.html":{},"components/DraftdetailComponent.html":{},"components/InletComponent.html":{},"interfaces/LoomConfig.html":{},"components/OpHelpModal.html":{},"components/OpsComponent.html":{},"classes/PedalConfig.html":{},"injectables/PlayerService.html":{}}}],["opfactories",{"_index":304,"title":{},"body":{"classes/AbstractOpFactory.html":{},"classes/BaseOp.html":{},"classes/Branch.html":{},"classes/Bus.html":{},"classes/Merge.html":{},"interfaces/OpClassifier.html":{},"interfaces/OperationProperties.html":{},"classes/Pipe.html":{},"classes/Seed.html":{},"interfaces/TopologyDef.html":{}}}],["ophelp",{"_index":2958,"title":{},"body":{"components/OpHelpModal.html":{}}}],["ophelp'},{'name",{"_index":843,"title":{},"body":{"components/ConnectionComponent.html":{},"components/DraftdetailComponent.html":{},"components/ImageComponent.html":{},"components/InletComponent.html":{},"components/MixerViewComponent.html":{},"components/NoteComponent.html":{},"components/OpHelpModal.html":{},"components/OpSequencerComponent.html":{},"components/OpsComponent.html":{},"components/ParameterComponent.html":{},"components/PlayerComponent.html":{},"components/SnackbarComponent.html":{},"components/VirtualPedalsComponent.html":{},"components/WeavingStateComponent.html":{}}}],["ophelp.modal.html",{"_index":2960,"title":{},"body":{"components/OpHelpModal.html":{}}}],["ophelp.modal.scss",{"_index":2959,"title":{},"body":{"components/OpHelpModal.html":{}}}],["ophelpmodal",{"_index":842,"title":{"components/OpHelpModal.html":{}},"body":{"components/ConnectionComponent.html":{},"components/DraftdetailComponent.html":{},"components/ImageComponent.html":{},"components/InletComponent.html":{},"modules/MixerModule.html":{},"components/MixerViewComponent.html":{},"components/NoteComponent.html":{},"components/OpHelpModal.html":{},"components/OpSequencerComponent.html":{},"components/OpsComponent.html":{},"components/ParameterComponent.html":{},"components/PlayerComponent.html":{},"components/SnackbarComponent.html":{},"components/VirtualPedalsComponent.html":{},"components/WeavingStateComponent.html":{},"overview.html":{}}}],["opid",{"_index":2396,"title":{},"body":{"components/InletComponent.html":{},"components/ParameterComponent.html":{}}}],["opinlet",{"_index":59,"title":{},"body":{"classes/AbstractOpFactory.html":{},"classes/BaseOp.html":{},"classes/Branch.html":{},"classes/Bus.html":{},"classes/Merge.html":{},"interfaces/OpClassifier.html":{},"interfaces/OperationProperties.html":{},"classes/Pipe.html":{},"classes/Seed.html":{},"interfaces/TopologyDef.html":{}}}],["opinput",{"_index":506,"title":{"interfaces/OpInput.html":{}},"body":{"interfaces/ChainOp.html":{},"interfaces/DraftOperationClassification.html":{},"interfaces/DynamicOperation.html":{},"interfaces/LoomConfig.html":{},"interfaces/OpInput.html":{},"interfaces/OperationClassification.html":{},"interfaces/PairedOp.html":{},"classes/PedalConfig.html":{},"interfaces/PedalEvent.html":{},"interfaces/PlayerOp.html":{},"injectables/PlayerService.html":{},"interfaces/TreeOperation.html":{}}}],["opinputs",{"_index":2182,"title":{},"body":{"interfaces/DynamicOperation.html":{},"interfaces/OpInput.html":{},"interfaces/OperationClassification.html":{},"interfaces/TreeOperation.html":{}}}],["opismapped",{"_index":2521,"title":{},"body":{"injectables/MappingsService.html":{},"classes/PedalConfig.html":{}}}],["opismapped(opname",{"_index":1763,"title":{},"body":{"interfaces/DraftOperationClassification.html":{},"interfaces/LoomConfig.html":{},"injectables/MappingsService.html":{},"classes/PedalConfig.html":{},"injectables/PlayerService.html":{}}}],["opname",{"_index":1734,"title":{},"body":{"interfaces/DraftOperationClassification.html":{},"interfaces/LoomConfig.html":{},"injectables/MappingsService.html":{},"classes/PedalConfig.html":{},"injectables/PlayerService.html":{}}}],["opnames",{"_index":3213,"title":{},"body":{"components/OpsComponent.html":{}}}],["opnames:array",{"_index":3242,"title":{},"body":{"components/OpsComponent.html":{}}}],["opnode",{"_index":2278,"title":{},"body":{"interfaces/IOTuple.html":{},"components/InletComponent.html":{},"components/ParameterComponent.html":{},"interfaces/TreeNode.html":{},"miscellaneous/typealiases.html":{}}}],["opnode.inlets[inletid",{"_index":2470,"title":{},"body":{"components/InletComponent.html":{}}}],["opnode.inlets[this.inletid",{"_index":2467,"title":{},"body":{"components/InletComponent.html":{}}}],["opnode.params[this.paramid",{"_index":3325,"title":{},"body":{"components/ParameterComponent.html":{}}}],["oppairing",{"_index":2570,"title":{},"body":{"injectables/MappingsService.html":{}}}],["opparam",{"_index":55,"title":{},"body":{"classes/AbstractOpFactory.html":{},"classes/BaseOp.html":{},"classes/Branch.html":{},"classes/Bus.html":{},"classes/Merge.html":{},"interfaces/OpClassifier.html":{},"interfaces/OperationProperties.html":{},"classes/Pipe.html":{},"classes/Seed.html":{},"interfaces/TopologyDef.html":{}}}],["opperform",{"_index":110,"title":{},"body":{"classes/AbstractOpFactory.html":{},"classes/BaseOp.html":{},"classes/Branch.html":{},"classes/Bus.html":{},"classes/Merge.html":{},"interfaces/OpClassifier.html":{},"interfaces/OperationProperties.html":{},"classes/Pipe.html":{},"classes/Seed.html":{},"interfaces/TopologyDef.html":{},"miscellaneous/typealiases.html":{}}}],["oproulette",{"_index":1702,"title":{},"body":{"interfaces/DraftOperationClassification.html":{},"interfaces/LoomConfig.html":{},"classes/PedalConfig.html":{},"injectables/PlayerService.html":{}}}],["ops",{"_index":437,"title":{},"body":{"interfaces/ChainIndex.html":{},"interfaces/ChainOp.html":{},"interfaces/DraftNodeProxy.html":{},"interfaces/DraftOperationClassification.html":{},"components/DraftdetailComponent.html":{},"interfaces/DynamicOperation.html":{},"interfaces/FileObj.html":{},"interfaces/FileSaver.html":{},"interfaces/Fileloader.html":{},"interfaces/IOTuple.html":{},"components/InletComponent.html":{},"interfaces/LoadResponse.html":{},"interfaces/LoomConfig.html":{},"injectables/MappingsService.html":{},"interfaces/NodeComponentProxy.html":{},"interfaces/OpComponentProxy.html":{},"components/OpHelpModal.html":{},"interfaces/OpInput.html":{},"classes/OpSequencer.html":{},"interfaces/OperationClassification.html":{},"components/OpsComponent.html":{},"interfaces/PairedOp.html":{},"classes/PedalConfig.html":{},"interfaces/PedalEvent.html":{},"interfaces/PlayerOp.html":{},"injectables/PlayerService.html":{},"interfaces/SaveObj.html":{},"injectables/SequencerService.html":{},"interfaces/StatusMessage.html":{},"interfaces/TreeNode.html":{},"interfaces/TreeNodeProxy.html":{},"interfaces/TreeOperation.html":{},"miscellaneous/functions.html":{}}}],["ops'},{'name",{"_index":845,"title":{},"body":{"components/ConnectionComponent.html":{},"components/DraftdetailComponent.html":{},"components/ImageComponent.html":{},"components/InletComponent.html":{},"components/MixerViewComponent.html":{},"components/NoteComponent.html":{},"components/OpHelpModal.html":{},"components/OpSequencerComponent.html":{},"components/OpsComponent.html":{},"components/ParameterComponent.html":{},"components/PlayerComponent.html":{},"components/SnackbarComponent.html":{},"components/VirtualPedalsComponent.html":{},"components/WeavingStateComponent.html":{}}}],["ops.component.html",{"_index":3209,"title":{},"body":{"components/OpsComponent.html":{}}}],["ops.component.scss",{"_index":3208,"title":{},"body":{"components/OpsComponent.html":{}}}],["ops.length",{"_index":1885,"title":{},"body":{"interfaces/DraftOperationClassification.html":{},"interfaces/LoomConfig.html":{},"classes/PedalConfig.html":{},"injectables/PlayerService.html":{}}}],["ops.map((name",{"_index":1754,"title":{},"body":{"interfaces/DraftOperationClassification.html":{},"interfaces/LoomConfig.html":{},"injectables/MappingsService.html":{},"classes/PedalConfig.html":{},"injectables/PlayerService.html":{}}}],["ops:operationservice",{"_index":2975,"title":{},"body":{"components/OpHelpModal.html":{}}}],["opscomponent",{"_index":844,"title":{"components/OpsComponent.html":{}},"body":{"components/ConnectionComponent.html":{},"components/DraftdetailComponent.html":{},"components/ImageComponent.html":{},"components/InletComponent.html":{},"modules/MixerModule.html":{},"components/MixerViewComponent.html":{},"components/NoteComponent.html":{},"components/OpHelpModal.html":{},"components/OpSequencerComponent.html":{},"components/OpsComponent.html":{},"components/ParameterComponent.html":{},"components/PlayerComponent.html":{},"components/SnackbarComponent.html":{},"components/VirtualPedalsComponent.html":{},"components/WeavingStateComponent.html":{},"overview.html":{}}}],["opsequencer",{"_index":431,"title":{"classes/OpSequencer.html":{}},"body":{"interfaces/ChainIndex.html":{},"interfaces/ChainOp.html":{},"interfaces/DraftOperationClassification.html":{},"interfaces/LoomConfig.html":{},"injectables/MappingsService.html":{},"classes/OpSequencer.html":{},"interfaces/PairedOp.html":{},"classes/PedalConfig.html":{},"interfaces/PedalEvent.html":{},"interfaces/PlayerOp.html":{},"injectables/PlayerService.html":{},"injectables/SequencerService.html":{}}}],["opsequencer(pedals",{"_index":3080,"title":{},"body":{"classes/OpSequencer.html":{}}}],["opsequencer:104",{"_index":3915,"title":{},"body":{"injectables/SequencerService.html":{}}}],["opsequencer:12",{"_index":3921,"title":{},"body":{"injectables/SequencerService.html":{}}}],["opsequencer:13",{"_index":3924,"title":{},"body":{"injectables/SequencerService.html":{}}}],["opsequencer:14",{"_index":3925,"title":{},"body":{"injectables/SequencerService.html":{}}}],["opsequencer:15",{"_index":3923,"title":{},"body":{"injectables/SequencerService.html":{}}}],["opsequencer:16",{"_index":3920,"title":{},"body":{"injectables/SequencerService.html":{}}}],["opsequencer:17",{"_index":3922,"title":{},"body":{"injectables/SequencerService.html":{}}}],["opsequencer:25",{"_index":3919,"title":{},"body":{"injectables/SequencerService.html":{}}}],["opsequencer:56",{"_index":3913,"title":{},"body":{"injectables/SequencerService.html":{}}}],["opsequencer:69",{"_index":3912,"title":{},"body":{"injectables/SequencerService.html":{}}}],["opsequencer:74",{"_index":3914,"title":{},"body":{"injectables/SequencerService.html":{}}}],["opsequencer:81",{"_index":3916,"title":{},"body":{"injectables/SequencerService.html":{}}}],["opsequencer:88",{"_index":3910,"title":{},"body":{"injectables/SequencerService.html":{}}}],["opsequencer:94",{"_index":3917,"title":{},"body":{"injectables/SequencerService.html":{}}}],["opsequencer:99",{"_index":3911,"title":{},"body":{"injectables/SequencerService.html":{}}}],["opsequencercomponent",{"_index":846,"title":{"components/OpSequencerComponent.html":{}},"body":{"components/ConnectionComponent.html":{},"components/DraftdetailComponent.html":{},"components/ImageComponent.html":{},"components/InletComponent.html":{},"components/MixerViewComponent.html":{},"components/NoteComponent.html":{},"components/OpHelpModal.html":{},"components/OpSequencerComponent.html":{},"components/OpsComponent.html":{},"components/ParameterComponent.html":{},"components/PlayerComponent.html":{},"modules/PlayerModule.html":{},"components/SnackbarComponent.html":{},"components/VirtualPedalsComponent.html":{},"components/WeavingStateComponent.html":{},"overview.html":{}}}],["opt",{"_index":133,"title":{},"body":{"classes/AbstractOpFactory.html":{},"classes/BaseOp.html":{},"classes/Branch.html":{},"classes/Bus.html":{},"classes/Merge.html":{},"interfaces/OpClassifier.html":{},"interfaces/OperationProperties.html":{},"classes/Pipe.html":{},"classes/Seed.html":{},"interfaces/TopologyDef.html":{}}}],["opt.name",{"_index":3334,"title":{},"body":{"components/ParameterComponent.html":{}}}],["option",{"_index":3264,"title":{},"body":{"components/OpsComponent.html":{},"components/WeavingStateComponent.html":{}}}],["option.tolowercase().includes(filtervalue",{"_index":3257,"title":{},"body":{"components/OpsComponent.html":{}}}],["optional",{"_index":22,"title":{},"body":{"classes/AbstractOpFactory.html":{},"classes/BaseOp.html":{},"classes/Branch.html":{},"classes/Bus.html":{},"classes/Cell.html":{},"components/ConnectionComponent.html":{},"classes/DBListener.html":{},"classes/DBListenerArray.html":{},"classes/DBNode.html":{},"classes/DBNodeArray.html":{},"classes/DBTwoWay.html":{},"classes/DBTwoWayArray.html":{},"classes/DBWriteBuffer.html":{},"classes/DBWriter.html":{},"classes/DBWriterArray.html":{},"components/DraftdetailComponent.html":{},"interfaces/DynamicOperation.html":{},"injectables/InkService.html":{},"components/InletComponent.html":{},"injectables/MappingsService.html":{},"directives/MarqueeComponent.html":{},"classes/Merge.html":{},"components/MixerViewComponent.html":{},"interfaces/NodeParams.html":{},"components/NoteComponent.html":{},"classes/OnlineStatus.html":{},"interfaces/OpClassifier.html":{},"components/OpHelpModal.html":{},"interfaces/OpInput.html":{},"classes/OpSequencer.html":{},"components/OpSequencerComponent.html":{},"interfaces/OperationClassification.html":{},"interfaces/OperationProperties.html":{},"components/OpsComponent.html":{},"components/ParameterComponent.html":{},"classes/Params.html":{},"interfaces/Pedal.html":{},"classes/PedalConfig.html":{},"interfaces/PedalEvent.html":{},"classes/PedalStatus.html":{},"injectables/PedalsService.html":{},"classes/Pipe.html":{},"components/PlayerComponent.html":{},"interfaces/PlayerOp.html":{},"injectables/PlayerService.html":{},"classes/Render.html":{},"classes/Seed.html":{},"classes/Selection.html":{},"directives/SelectionComponent.html":{},"injectables/SequencerService.html":{},"classes/Shape.html":{},"classes/Shape-1.html":{},"classes/Shuttle.html":{},"components/SnackbarComponent.html":{},"classes/System.html":{},"interfaces/TopologyDef.html":{},"interfaces/TreeOperation.html":{},"injectables/ViewportService.html":{},"components/VirtualPedalsComponent.html":{},"components/WeavingStateComponent.html":{},"miscellaneous/functions.html":{}}}],["optionally",{"_index":3028,"title":{},"body":{"classes/OpSequencer.html":{}}}],["options",{"_index":161,"title":{},"body":{"classes/AbstractOpFactory.html":{},"classes/BaseOp.html":{},"classes/Branch.html":{},"classes/Bus.html":{},"components/DraftdetailComponent.html":{},"injectables/MappingsService.html":{},"classes/Merge.html":{},"interfaces/OpClassifier.html":{},"interfaces/OperationProperties.html":{},"classes/Pipe.html":{},"classes/Seed.html":{},"interfaces/TopologyDef.html":{},"index.html":{},"miscellaneous/typealiases.html":{}}}],["optopology",{"_index":125,"title":{},"body":{"classes/AbstractOpFactory.html":{},"classes/BaseOp.html":{},"classes/Branch.html":{},"classes/Bus.html":{},"classes/Merge.html":{},"interfaces/OpClassifier.html":{},"interfaces/OperationProperties.html":{},"classes/Pipe.html":{},"classes/Seed.html":{},"interfaces/TopologyDef.html":{},"miscellaneous/typealiases.html":{}}}],["order",{"_index":597,"title":{},"body":{"interfaces/ChainOp.html":{},"interfaces/DraftOperationClassification.html":{},"interfaces/LoomConfig.html":{},"interfaces/PairedOp.html":{},"classes/PedalConfig.html":{},"interfaces/PedalEvent.html":{},"interfaces/PlayerOp.html":{},"injectables/PlayerService.html":{}}}],["organization",{"_index":4508,"title":{},"body":{"index.html":{}}}],["organized",{"_index":4512,"title":{},"body":{"index.html":{},"miscellaneous/typealiases.html":{}}}],["orientation_x",{"_index":643,"title":{},"body":{"components/ConnectionComponent.html":{}}}],["orientation_y",{"_index":644,"title":{},"body":{"components/ConnectionComponent.html":{}}}],["oriented",{"_index":4549,"title":{},"body":{"index.html":{}}}],["origin",{"_index":2850,"title":{},"body":{"components/MixerViewComponent.html":{}}}],["oss",{"_index":1789,"title":{},"body":{"interfaces/DraftOperationClassification.html":{},"interfaces/LoomConfig.html":{},"classes/PedalConfig.html":{},"injectables/PlayerService.html":{}}}],["ot",{"_index":2258,"title":{},"body":{"interfaces/IOTuple.html":{},"interfaces/TreeNode.html":{}}}],["out",{"_index":1497,"title":{},"body":{"interfaces/DesignActions.html":{},"modules/MixerModule.html":{},"modules/PlayerModule.html":{},"classes/Shape.html":{},"overview.html":{}}}],["out\").offsettop",{"_index":774,"title":{},"body":{"components/ConnectionComponent.html":{}}}],["outlets",{"_index":2260,"title":{},"body":{"interfaces/IOTuple.html":{},"interfaces/TreeNode.html":{}}}],["output",{"_index":88,"title":{},"body":{"classes/AbstractOpFactory.html":{},"classes/BaseOp.html":{},"classes/Branch.html":{},"classes/Bus.html":{},"interfaces/DesignActions.html":{},"interfaces/DraftOperationClassification.html":{},"interfaces/IOTuple.html":{},"components/InletComponent.html":{},"interfaces/LoomConfig.html":{},"classes/Merge.html":{},"components/MixerViewComponent.html":{},"components/NoteComponent.html":{},"interfaces/OpClassifier.html":{},"interfaces/OperationProperties.html":{},"components/OpsComponent.html":{},"components/ParameterComponent.html":{},"classes/PedalConfig.html":{},"classes/Pipe.html":{},"components/PlayerComponent.html":{},"injectables/PlayerService.html":{},"classes/Seed.html":{},"interfaces/TopologyDef.html":{},"interfaces/TreeNode.html":{},"components/WeavingStateComponent.html":{},"miscellaneous/functions.html":{}}}],["output[0",{"_index":572,"title":{},"body":{"interfaces/ChainOp.html":{},"interfaces/PairedOp.html":{},"interfaces/PedalEvent.html":{},"interfaces/PlayerOp.html":{}}}],["outputs",{"_index":67,"title":{},"body":{"classes/AbstractOpFactory.html":{},"classes/BaseOp.html":{},"classes/Branch.html":{},"classes/Bus.html":{},"interfaces/ChainOp.html":{},"interfaces/DraftNodeProxy.html":{},"interfaces/FileObj.html":{},"interfaces/FileSaver.html":{},"interfaces/Fileloader.html":{},"interfaces/IOTuple.html":{},"components/InletComponent.html":{},"interfaces/LoadResponse.html":{},"classes/Merge.html":{},"components/MixerViewComponent.html":{},"interfaces/NodeComponentProxy.html":{},"components/NoteComponent.html":{},"interfaces/OpClassifier.html":{},"interfaces/OpComponentProxy.html":{},"interfaces/OperationProperties.html":{},"components/OpsComponent.html":{},"interfaces/PairedOp.html":{},"components/ParameterComponent.html":{},"interfaces/PedalEvent.html":{},"classes/Pipe.html":{},"interfaces/PlayerOp.html":{},"interfaces/SaveObj.html":{},"classes/Seed.html":{},"interfaces/StatusMessage.html":{},"interfaces/TopologyDef.html":{},"interfaces/TreeNode.html":{},"interfaces/TreeNodeProxy.html":{},"index.html":{},"miscellaneous/typealiases.html":{}}}],["outside",{"_index":1973,"title":{},"body":{"components/DraftdetailComponent.html":{}}}],["over",{"_index":4558,"title":{},"body":{"index.html":{}}}],["over_under",{"_index":918,"title":{},"body":{"interfaces/Crossing.html":{},"interfaces/Vertex.html":{},"interfaces/YarnPath.html":{}}}],["over_unset",{"_index":917,"title":{},"body":{"interfaces/Crossing.html":{},"interfaces/Vertex.html":{},"interfaces/YarnPath.html":{}}}],["overflow",{"_index":2102,"title":{},"body":{"components/DraftdetailComponent.html":{},"components/ParameterComponent.html":{},"components/WeavingStateComponent.html":{}}}],["overlay",{"_index":2045,"title":{},"body":{"components/DraftdetailComponent.html":{},"components/MixerViewComponent.html":{}}}],["overlay.offsetleft",{"_index":2821,"title":{},"body":{"components/MixerViewComponent.html":{}}}],["overlay.offsettop",{"_index":2822,"title":{},"body":{"components/MixerViewComponent.html":{}}}],["overlaying",{"_index":2332,"title":{},"body":{"interfaces/Ink.html":{},"injectables/InkService.html":{}}}],["overshot",{"_index":4122,"title":{},"body":{"classes/System.html":{}}}],["overview",{"_index":4615,"title":{"overview.html":{}},"body":{"overview.html":{}}}],["ownelement",{"_index":3617,"title":{},"body":{"components/PlayerComponent.html":{},"components/WeavingStateComponent.html":{}}}],["p",{"_index":559,"title":{},"body":{"interfaces/ChainOp.html":{},"interfaces/DesignActions.html":{},"interfaces/DraftOperationClassification.html":{},"interfaces/LoomConfig.html":{},"injectables/MappingsService.html":{},"components/OpSequencerComponent.html":{},"components/OpsComponent.html":{},"interfaces/PairedOp.html":{},"classes/PedalConfig.html":{},"interfaces/PedalEvent.html":{},"injectables/PedalsService.html":{},"interfaces/PlayerOp.html":{},"injectables/PlayerService.html":{},"injectables/ViewportService.html":{},"miscellaneous/functions.html":{}}}],["p.id",{"_index":1716,"title":{},"body":{"interfaces/DraftOperationClassification.html":{},"interfaces/LoomConfig.html":{},"injectables/MappingsService.html":{},"classes/PedalConfig.html":{},"injectables/PlayerService.html":{},"components/VirtualPedalsComponent.html":{},"components/WeavingStateComponent.html":{}}}],["p.state",{"_index":4329,"title":{},"body":{"components/WeavingStateComponent.html":{}}}],["p.u_name",{"_index":4328,"title":{},"body":{"components/WeavingStateComponent.html":{}}}],["p.x",{"_index":4252,"title":{},"body":{"injectables/ViewportService.html":{}}}],["p1",{"_index":781,"title":{},"body":{"components/ConnectionComponent.html":{}}}],["p2",{"_index":782,"title":{},"body":{"components/ConnectionComponent.html":{}}}],["p_conf",{"_index":2615,"title":{},"body":{"injectables/MappingsService.html":{}}}],["p_op",{"_index":1805,"title":{},"body":{"interfaces/DraftOperationClassification.html":{},"interfaces/LoomConfig.html":{},"classes/PedalConfig.html":{},"injectables/PlayerService.html":{}}}],["p_pedal_array",{"_index":3492,"title":{},"body":{"interfaces/Pedal.html":{},"classes/PedalStatus.html":{},"injectables/PedalsService.html":{}}}],["p_pedals",{"_index":3433,"title":{},"body":{"interfaces/Pedal.html":{},"classes/PedalStatus.html":{},"injectables/PedalsService.html":{}}}],["p_prog",{"_index":3015,"title":{},"body":{"classes/OpSequencer.html":{},"injectables/SequencerService.html":{}}}],["p_select_a",{"_index":3016,"title":{},"body":{"classes/OpSequencer.html":{},"injectables/SequencerService.html":{}}}],["p_select_b",{"_index":3017,"title":{},"body":{"classes/OpSequencer.html":{},"injectables/SequencerService.html":{}}}],["pack",{"_index":2177,"title":{},"body":{"interfaces/DynamicOperation.html":{},"interfaces/OpInput.html":{},"interfaces/OperationClassification.html":{},"interfaces/TreeOperation.html":{}}}],["package",{"_index":4345,"title":{"dependencies.html":{},"properties.html":{}},"body":{"index.html":{}}}],["padding",{"_index":2488,"title":{},"body":{"components/InletComponent.html":{},"components/MixerViewComponent.html":{},"components/OpHelpModal.html":{},"components/OpSequencerComponent.html":{},"components/OpsComponent.html":{},"components/ParameterComponent.html":{},"components/PlayerComponent.html":{},"components/SnackbarComponent.html":{},"components/VirtualPedalsComponent.html":{},"components/WeavingStateComponent.html":{}}}],["page",{"_index":4205,"title":{},"body":{"injectables/ViewportService.html":{},"index.html":{}}}],["pair",{"_index":2522,"title":{},"body":{"injectables/MappingsService.html":{},"classes/PedalConfig.html":{}}}],["pair(id",{"_index":2543,"title":{},"body":{"injectables/MappingsService.html":{}}}],["pair(pedalid",{"_index":1733,"title":{},"body":{"interfaces/DraftOperationClassification.html":{},"interfaces/LoomConfig.html":{},"classes/PedalConfig.html":{},"injectables/PlayerService.html":{}}}],["paired",{"_index":1756,"title":{},"body":{"interfaces/DraftOperationClassification.html":{},"interfaces/LoomConfig.html":{},"injectables/MappingsService.html":{},"classes/PedalConfig.html":{},"injectables/PlayerService.html":{}}}],["pairedop",{"_index":587,"title":{"interfaces/PairedOp.html":{}},"body":{"interfaces/ChainOp.html":{},"interfaces/DraftOperationClassification.html":{},"interfaces/LoomConfig.html":{},"injectables/MappingsService.html":{},"interfaces/PairedOp.html":{},"classes/PedalConfig.html":{},"interfaces/PedalEvent.html":{},"interfaces/PlayerOp.html":{},"injectables/PlayerService.html":{},"miscellaneous/functions.html":{}}}],["pairing",{"_index":620,"title":{},"body":{"interfaces/ChainOp.html":{},"injectables/MappingsService.html":{},"interfaces/PairedOp.html":{},"interfaces/PedalEvent.html":{},"interfaces/PlayerOp.html":{},"miscellaneous/typealiases.html":{}}}],["pairs",{"_index":179,"title":{},"body":{"classes/AbstractOpFactory.html":{},"classes/BaseOp.html":{},"classes/Branch.html":{},"classes/Bus.html":{},"classes/Merge.html":{},"interfaces/OpClassifier.html":{},"interfaces/OperationProperties.html":{},"classes/Pipe.html":{},"classes/Seed.html":{},"interfaces/TopologyDef.html":{}}}],["palette",{"_index":1435,"title":{},"body":{"interfaces/DesignActions.html":{},"interfaces/IOTuple.html":{},"components/NoteComponent.html":{},"interfaces/TreeNode.html":{},"index.html":{}}}],["palette'},{'name",{"_index":849,"title":{},"body":{"components/ConnectionComponent.html":{},"components/DraftdetailComponent.html":{},"components/ImageComponent.html":{},"components/InletComponent.html":{},"components/MixerViewComponent.html":{},"components/NoteComponent.html":{},"components/OpHelpModal.html":{},"components/OpSequencerComponent.html":{},"components/OpsComponent.html":{},"components/ParameterComponent.html":{},"components/PlayerComponent.html":{},"components/SnackbarComponent.html":{},"components/VirtualPedalsComponent.html":{},"components/WeavingStateComponent.html":{}}}],["palette/connection/connection.component",{"_index":2702,"title":{},"body":{"modules/MixerModule.html":{}}}],["palette/image/image.component",{"_index":2705,"title":{},"body":{"modules/MixerModule.html":{}}}],["palette/marquee/marquee.component",{"_index":2700,"title":{},"body":{"modules/MixerModule.html":{}}}],["palette/note/note.component",{"_index":2706,"title":{},"body":{"modules/MixerModule.html":{}}}],["palette/operation/inlet/inlet.component",{"_index":2709,"title":{},"body":{"modules/MixerModule.html":{}}}],["palette/operation/operation.component",{"_index":2701,"title":{},"body":{"modules/MixerModule.html":{}}}],["palette/operation/parameter/parameter.component",{"_index":2708,"title":{},"body":{"modules/MixerModule.html":{}}}],["palette/palette.component",{"_index":2698,"title":{},"body":{"modules/MixerModule.html":{}}}],["palette/snackbar/snackbar.component",{"_index":2699,"title":{},"body":{"modules/MixerModule.html":{}}}],["palette/subdraft",{"_index":4303,"title":{},"body":{"components/WeavingStateComponent.html":{}}}],["palette/subdraft/subdraft.component",{"_index":2697,"title":{},"body":{"modules/MixerModule.html":{}}}],["palettecomponent",{"_index":848,"title":{},"body":{"components/ConnectionComponent.html":{},"components/DraftdetailComponent.html":{},"components/ImageComponent.html":{},"components/InletComponent.html":{},"modules/MixerModule.html":{},"components/MixerViewComponent.html":{},"components/NoteComponent.html":{},"components/OpHelpModal.html":{},"components/OpSequencerComponent.html":{},"components/OpsComponent.html":{},"components/ParameterComponent.html":{},"components/PlayerComponent.html":{},"components/SnackbarComponent.html":{},"components/VirtualPedalsComponent.html":{},"components/WeavingStateComponent.html":{},"overview.html":{}}}],["panel",{"_index":3125,"title":{},"body":{"components/OpSequencerComponent.html":{},"components/PlayerComponent.html":{},"components/WeavingStateComponent.html":{}}}],["panel:first",{"_index":3131,"title":{},"body":{"components/OpSequencerComponent.html":{},"components/PlayerComponent.html":{},"components/WeavingStateComponent.html":{}}}],["panel:last",{"_index":3130,"title":{},"body":{"components/OpSequencerComponent.html":{},"components/PlayerComponent.html":{},"components/WeavingStateComponent.html":{}}}],["panel:not(.mat",{"_index":3135,"title":{},"body":{"components/OpSequencerComponent.html":{},"components/PlayerComponent.html":{},"components/WeavingStateComponent.html":{}}}],["param",{"_index":165,"title":{},"body":{"classes/AbstractOpFactory.html":{},"classes/BaseOp.html":{},"interfaces/Bounds.html":{},"classes/Branch.html":{},"classes/Bus.html":{},"classes/Cell.html":{},"interfaces/ChainOp.html":{},"components/ConnectionComponent.html":{},"interfaces/Crossing.html":{},"classes/DBListener.html":{},"classes/DBListenerArray.html":{},"classes/DBNode.html":{},"classes/DBNodeArray.html":{},"classes/DBTwoWay.html":{},"classes/DBTwoWayArray.html":{},"classes/DBWriteBuffer.html":{},"classes/DBWriter.html":{},"classes/DBWriterArray.html":{},"interfaces/DensityUnits.html":{},"interfaces/DesignActions.html":{},"interfaces/DesignMode.html":{},"interfaces/DraftMap.html":{},"interfaces/DraftNodeProxy.html":{},"interfaces/DraftOperationClassification.html":{},"components/DraftdetailComponent.html":{},"interfaces/DynamicOperation.html":{},"interfaces/FileObj.html":{},"interfaces/FileSaver.html":{},"interfaces/Fileloader.html":{},"interfaces/IOTuple.html":{},"interfaces/Ink.html":{},"injectables/InkService.html":{},"interfaces/Interlacement.html":{},"interfaces/InterlacementVal.html":{},"interfaces/LoadResponse.html":{},"interfaces/LoomConfig.html":{},"interfaces/LoomTypes.html":{},"interfaces/MaterialTypes.html":{},"classes/Merge.html":{},"interfaces/NodeComponentProxy.html":{},"interfaces/NodeMethods.html":{},"interfaces/NodeParams.html":{},"components/NoteComponent.html":{},"classes/OnlineStatus.html":{},"interfaces/OpClassifier.html":{},"interfaces/OpComponentProxy.html":{},"interfaces/OpInput.html":{},"interfaces/OperationClassification.html":{},"interfaces/OperationParam.html":{},"interfaces/OperationProperties.html":{},"interfaces/PairedOp.html":{},"components/ParameterComponent.html":{},"classes/Params.html":{},"classes/PedalConfig.html":{},"interfaces/PedalEvent.html":{},"classes/Pipe.html":{},"interfaces/PlayerOp.html":{},"injectables/PlayerService.html":{},"interfaces/PlayerState.html":{},"interfaces/PlayerState-1.html":{},"interfaces/Point.html":{},"classes/Render.html":{},"interfaces/SaveObj.html":{},"classes/Seed.html":{},"classes/Shape-1.html":{},"interfaces/StatusMessage.html":{},"classes/System.html":{},"interfaces/TopologyDef.html":{},"interfaces/TreeNode.html":{},"interfaces/TreeNodeProxy.html":{},"interfaces/TreeOperation.html":{},"interfaces/Vertex.html":{},"interfaces/ViewModes.html":{},"injectables/ViewportService.html":{},"interfaces/WeavingLog.html":{},"interfaces/WeavingPick.html":{},"interfaces/WeavingPick-1.html":{},"interfaces/YarnPath.html":{},"miscellaneous/typealiases.html":{}}}],["param.dx",{"_index":2991,"title":{},"body":{"components/OpHelpModal.html":{}}}],["param.max",{"_index":2995,"title":{},"body":{"components/OpHelpModal.html":{}}}],["param.min",{"_index":2994,"title":{},"body":{"components/OpHelpModal.html":{}}}],["param.name",{"_index":2990,"title":{},"body":{"components/OpHelpModal.html":{},"components/ParameterComponent.html":{}}}],["param.type",{"_index":2992,"title":{},"body":{"components/OpHelpModal.html":{}}}],["param.value",{"_index":3192,"title":{},"body":{"interfaces/OperationParam.html":{},"classes/Params.html":{}}}],["param_input",{"_index":567,"title":{},"body":{"interfaces/ChainOp.html":{},"interfaces/PairedOp.html":{},"interfaces/PedalEvent.html":{},"interfaces/PlayerOp.html":{}}}],["paramaterized",{"_index":2243,"title":{},"body":{"interfaces/DynamicOperation.html":{},"interfaces/OpInput.html":{},"interfaces/OperationClassification.html":{},"interfaces/TreeOperation.html":{}}}],["parameter",{"_index":2130,"title":{},"body":{"interfaces/DynamicOperation.html":{},"interfaces/Ink.html":{},"injectables/InkService.html":{},"components/OpHelpModal.html":{},"interfaces/OpInput.html":{},"interfaces/OperationClassification.html":{},"interfaces/OperationParam.html":{},"components/ParameterComponent.html":{},"classes/Params.html":{},"interfaces/TreeOperation.html":{},"index.html":{}}}],["parameter'},{'name",{"_index":851,"title":{},"body":{"components/ConnectionComponent.html":{},"components/DraftdetailComponent.html":{},"components/ImageComponent.html":{},"components/InletComponent.html":{},"components/MixerViewComponent.html":{},"components/NoteComponent.html":{},"components/OpHelpModal.html":{},"components/OpSequencerComponent.html":{},"components/OpsComponent.html":{},"components/ParameterComponent.html":{},"components/PlayerComponent.html":{},"components/SnackbarComponent.html":{},"components/VirtualPedalsComponent.html":{},"components/WeavingStateComponent.html":{}}}],["parameter.component.html",{"_index":3273,"title":{},"body":{"components/ParameterComponent.html":{}}}],["parameter.component.scss",{"_index":3272,"title":{},"body":{"components/ParameterComponent.html":{}}}],["parametercomponent",{"_index":850,"title":{"components/ParameterComponent.html":{}},"body":{"components/ConnectionComponent.html":{},"components/DraftdetailComponent.html":{},"components/ImageComponent.html":{},"components/InletComponent.html":{},"modules/MixerModule.html":{},"components/MixerViewComponent.html":{},"components/NoteComponent.html":{},"components/OpHelpModal.html":{},"components/OpSequencerComponent.html":{},"components/OpsComponent.html":{},"components/ParameterComponent.html":{},"components/PlayerComponent.html":{},"components/SnackbarComponent.html":{},"components/VirtualPedalsComponent.html":{},"components/WeavingStateComponent.html":{},"overview.html":{}}}],["parameters",{"_index":18,"title":{},"body":{"classes/AbstractOpFactory.html":{},"classes/BaseOp.html":{},"classes/Branch.html":{},"classes/Bus.html":{},"classes/Cell.html":{},"components/ConnectionComponent.html":{},"classes/DBListener.html":{},"classes/DBListenerArray.html":{},"classes/DBNode.html":{},"classes/DBNodeArray.html":{},"classes/DBTwoWay.html":{},"classes/DBTwoWayArray.html":{},"classes/DBWriteBuffer.html":{},"classes/DBWriter.html":{},"classes/DBWriterArray.html":{},"interfaces/DraftNodeProxy.html":{},"interfaces/DraftOperationClassification.html":{},"components/DraftdetailComponent.html":{},"interfaces/DynamicOperation.html":{},"interfaces/FileObj.html":{},"interfaces/FileSaver.html":{},"interfaces/Fileloader.html":{},"injectables/InkService.html":{},"components/InletComponent.html":{},"interfaces/LoadResponse.html":{},"interfaces/LoomConfig.html":{},"injectables/MappingsService.html":{},"directives/MarqueeComponent.html":{},"classes/Merge.html":{},"components/MixerViewComponent.html":{},"interfaces/NodeComponentProxy.html":{},"components/NoteComponent.html":{},"classes/OnlineStatus.html":{},"interfaces/OpClassifier.html":{},"interfaces/OpComponentProxy.html":{},"components/OpHelpModal.html":{},"interfaces/OpInput.html":{},"classes/OpSequencer.html":{},"components/OpSequencerComponent.html":{},"interfaces/OperationClassification.html":{},"interfaces/OperationProperties.html":{},"components/OpsComponent.html":{},"components/ParameterComponent.html":{},"classes/Params.html":{},"classes/PedalConfig.html":{},"classes/PedalStatus.html":{},"injectables/PedalsService.html":{},"classes/Pipe.html":{},"components/PlayerComponent.html":{},"injectables/PlayerService.html":{},"classes/Render.html":{},"interfaces/SaveObj.html":{},"classes/Seed.html":{},"classes/Selection.html":{},"directives/SelectionComponent.html":{},"injectables/SequencerService.html":{},"classes/Shape.html":{},"classes/Shape-1.html":{},"classes/Shuttle.html":{},"components/SnackbarComponent.html":{},"interfaces/StatusMessage.html":{},"classes/System.html":{},"interfaces/TopologyDef.html":{},"interfaces/TreeNodeProxy.html":{},"interfaces/TreeOperation.html":{},"injectables/ViewportService.html":{},"components/VirtualPedalsComponent.html":{},"components/WeavingStateComponent.html":{},"miscellaneous/functions.html":{},"index.html":{},"miscellaneous/typealiases.html":{}}}],["parametric",{"_index":4425,"title":{},"body":{"index.html":{}}}],["paramid",{"_index":3276,"title":{},"body":{"components/ParameterComponent.html":{}}}],["params",{"_index":57,"title":{"classes/Params.html":{}},"body":{"classes/AbstractOpFactory.html":{},"classes/BaseOp.html":{},"classes/Branch.html":{},"classes/Bus.html":{},"classes/Cell.html":{},"interfaces/ChainOp.html":{},"classes/DBListener.html":{},"classes/DBListenerArray.html":{},"classes/DBNode.html":{},"classes/DBNodeArray.html":{},"classes/DBTwoWay.html":{},"classes/DBTwoWayArray.html":{},"classes/DBWriteBuffer.html":{},"classes/DBWriter.html":{},"classes/DBWriterArray.html":{},"interfaces/DraftNodeProxy.html":{},"interfaces/DraftOperationClassification.html":{},"interfaces/DynamicOperation.html":{},"interfaces/FileObj.html":{},"interfaces/FileSaver.html":{},"interfaces/Fileloader.html":{},"interfaces/IOTuple.html":{},"interfaces/LoadResponse.html":{},"interfaces/LoomConfig.html":{},"classes/Merge.html":{},"interfaces/NodeComponentProxy.html":{},"interfaces/NodeMethods.html":{},"interfaces/NodeParams.html":{},"classes/OnlineStatus.html":{},"interfaces/OpClassifier.html":{},"interfaces/OpComponentProxy.html":{},"components/OpHelpModal.html":{},"interfaces/OpInput.html":{},"interfaces/OperationClassification.html":{},"interfaces/OperationParam.html":{},"interfaces/OperationProperties.html":{},"interfaces/PairedOp.html":{},"classes/Params.html":{},"classes/PedalConfig.html":{},"interfaces/PedalEvent.html":{},"classes/Pipe.html":{},"interfaces/PlayerOp.html":{},"injectables/PlayerService.html":{},"interfaces/SaveObj.html":{},"classes/Seed.html":{},"interfaces/StatusMessage.html":{},"interfaces/TopologyDef.html":{},"interfaces/TreeNode.html":{},"interfaces/TreeNodeProxy.html":{},"interfaces/TreeOperation.html":{},"miscellaneous/functions.html":{},"miscellaneous/typealiases.html":{}}}],["params(path",{"_index":3398,"title":{},"body":{"interfaces/Pedal.html":{},"classes/PedalStatus.html":{},"injectables/PedalsService.html":{}}}],["params.db",{"_index":974,"title":{},"body":{"classes/DBListener.html":{},"classes/DBListenerArray.html":{},"classes/DBNode.html":{},"classes/DBNodeArray.html":{},"classes/DBTwoWay.html":{},"classes/DBTwoWayArray.html":{},"classes/DBWriteBuffer.html":{},"classes/DBWriter.html":{},"classes/DBWriterArray.html":{},"interfaces/NodeMethods.html":{},"interfaces/NodeParams.html":{},"classes/OnlineStatus.html":{}}}],["params.id",{"_index":986,"title":{},"body":{"classes/DBListener.html":{},"classes/DBListenerArray.html":{},"classes/DBNode.html":{},"classes/DBNodeArray.html":{},"classes/DBTwoWay.html":{},"classes/DBTwoWayArray.html":{},"classes/DBWriteBuffer.html":{},"classes/DBWriter.html":{},"classes/DBWriterArray.html":{},"interfaces/NodeMethods.html":{},"interfaces/NodeParams.html":{},"classes/OnlineStatus.html":{}}}],["params.initval",{"_index":981,"title":{},"body":{"classes/DBListener.html":{},"classes/DBListenerArray.html":{},"classes/DBNode.html":{},"classes/DBNodeArray.html":{},"classes/DBTwoWay.html":{},"classes/DBTwoWayArray.html":{},"classes/DBWriteBuffer.html":{},"classes/DBWriter.html":{},"classes/DBWriterArray.html":{},"interfaces/NodeMethods.html":{},"interfaces/NodeParams.html":{},"classes/OnlineStatus.html":{}}}],["params.is_set",{"_index":415,"title":{},"body":{"classes/Cell.html":{}}}],["params.is_up",{"_index":413,"title":{},"body":{"classes/Cell.html":{}}}],["params.key",{"_index":984,"title":{},"body":{"classes/DBListener.html":{},"classes/DBListenerArray.html":{},"classes/DBNode.html":{},"classes/DBNodeArray.html":{},"classes/DBTwoWay.html":{},"classes/DBTwoWayArray.html":{},"classes/DBWriteBuffer.html":{},"classes/DBWriter.html":{},"classes/DBWriterArray.html":{},"interfaces/NodeMethods.html":{},"interfaces/NodeParams.html":{},"classes/OnlineStatus.html":{}}}],["params.path",{"_index":976,"title":{},"body":{"classes/DBListener.html":{},"classes/DBListenerArray.html":{},"classes/DBNode.html":{},"classes/DBNodeArray.html":{},"classes/DBTwoWay.html":{},"classes/DBTwoWayArray.html":{},"classes/DBWriteBuffer.html":{},"classes/DBWriter.html":{},"classes/DBWriterArray.html":{},"interfaces/NodeMethods.html":{},"interfaces/NodeParams.html":{},"classes/OnlineStatus.html":{}}}],["params.ref",{"_index":983,"title":{},"body":{"classes/DBListener.html":{},"classes/DBListenerArray.html":{},"classes/DBNode.html":{},"classes/DBNodeArray.html":{},"classes/DBTwoWay.html":{},"classes/DBTwoWayArray.html":{},"classes/DBWriteBuffer.html":{},"classes/DBWriter.html":{},"classes/DBWriterArray.html":{},"interfaces/NodeMethods.html":{},"interfaces/NodeParams.html":{},"classes/OnlineStatus.html":{}}}],["params.root",{"_index":979,"title":{},"body":{"classes/DBListener.html":{},"classes/DBListenerArray.html":{},"classes/DBNode.html":{},"classes/DBNodeArray.html":{},"classes/DBTwoWay.html":{},"classes/DBTwoWayArray.html":{},"classes/DBWriteBuffer.html":{},"classes/DBWriter.html":{},"classes/DBWriterArray.html":{},"interfaces/NodeMethods.html":{},"interfaces/NodeParams.html":{},"classes/OnlineStatus.html":{}}}],["params_opt",{"_index":141,"title":{},"body":{"classes/AbstractOpFactory.html":{},"classes/BaseOp.html":{},"classes/Branch.html":{},"classes/Bus.html":{},"classes/Merge.html":{},"interfaces/OpClassifier.html":{},"interfaces/OperationProperties.html":{},"classes/Pipe.html":{},"classes/Seed.html":{},"interfaces/TopologyDef.html":{}}}],["paramsoptional",{"_index":13,"title":{},"body":{"classes/AbstractOpFactory.html":{},"classes/BaseOp.html":{},"classes/Branch.html":{},"classes/Bus.html":{},"interfaces/DynamicOperation.html":{},"classes/Merge.html":{},"interfaces/OpClassifier.html":{},"interfaces/OpInput.html":{},"interfaces/OperationClassification.html":{},"interfaces/OperationProperties.html":{},"classes/Pipe.html":{},"classes/Seed.html":{},"interfaces/TopologyDef.html":{},"interfaces/TreeOperation.html":{},"miscellaneous/typealiases.html":{}}}],["paramsoptional(...args",{"_index":48,"title":{},"body":{"classes/AbstractOpFactory.html":{},"classes/BaseOp.html":{},"classes/Branch.html":{},"classes/Bus.html":{},"classes/Merge.html":{},"interfaces/OpClassifier.html":{},"interfaces/OperationProperties.html":{},"classes/Pipe.html":{},"classes/Seed.html":{},"interfaces/TopologyDef.html":{}}}],["paramsoptional(args",{"_index":45,"title":{},"body":{"classes/AbstractOpFactory.html":{},"classes/BaseOp.html":{},"classes/Branch.html":{},"classes/Bus.html":{},"classes/Merge.html":{},"interfaces/OpClassifier.html":{},"interfaces/OperationProperties.html":{},"classes/Pipe.html":{},"classes/Seed.html":{},"interfaces/TopologyDef.html":{}}}],["paramsoptionalperform",{"_index":171,"title":{},"body":{"classes/AbstractOpFactory.html":{},"classes/BaseOp.html":{},"classes/Branch.html":{},"classes/Bus.html":{},"classes/Merge.html":{},"interfaces/OpClassifier.html":{},"interfaces/OperationProperties.html":{},"classes/Pipe.html":{},"classes/Seed.html":{},"interfaces/TopologyDef.html":{},"miscellaneous/typealiases.html":{}}}],["paramtype",{"_index":3156,"title":{},"body":{"interfaces/OperationParam.html":{},"classes/Params.html":{},"miscellaneous/typealiases.html":{}}}],["paramvalue",{"_index":53,"title":{},"body":{"classes/AbstractOpFactory.html":{},"classes/BaseOp.html":{},"classes/Branch.html":{},"classes/Bus.html":{},"interfaces/ChainOp.html":{},"interfaces/DynamicOperation.html":{},"classes/Merge.html":{},"interfaces/OpClassifier.html":{},"interfaces/OpInput.html":{},"interfaces/OperationClassification.html":{},"interfaces/OperationParam.html":{},"interfaces/OperationProperties.html":{},"interfaces/PairedOp.html":{},"classes/Params.html":{},"interfaces/PedalEvent.html":{},"classes/Pipe.html":{},"interfaces/PlayerOp.html":{},"classes/Seed.html":{},"interfaces/TopologyDef.html":{},"interfaces/TreeOperation.html":{},"miscellaneous/typealiases.html":{}}}],["paramvalues",{"_index":3189,"title":{},"body":{"interfaces/OperationParam.html":{},"classes/Params.html":{},"miscellaneous/functions.html":{}}}],["parent",{"_index":1062,"title":{},"body":{"classes/DBListener.html":{},"classes/DBListenerArray.html":{},"classes/DBNode.html":{},"classes/DBNodeArray.html":{},"classes/DBTwoWay.html":{},"classes/DBTwoWayArray.html":{},"classes/DBWriteBuffer.html":{},"classes/DBWriter.html":{},"classes/DBWriterArray.html":{},"interfaces/DesignActions.html":{},"interfaces/DraftMap.html":{},"interfaces/DraftNodeProxy.html":{},"components/DraftdetailComponent.html":{},"interfaces/DynamicOperation.html":{},"interfaces/FileObj.html":{},"interfaces/FileSaver.html":{},"interfaces/Fileloader.html":{},"interfaces/IOTuple.html":{},"interfaces/Interlacement.html":{},"interfaces/InterlacementVal.html":{},"interfaces/LoadResponse.html":{},"interfaces/NodeComponentProxy.html":{},"interfaces/NodeMethods.html":{},"interfaces/NodeParams.html":{},"classes/OnlineStatus.html":{},"interfaces/OpComponentProxy.html":{},"interfaces/OpInput.html":{},"interfaces/OperationClassification.html":{},"interfaces/Pedal.html":{},"classes/PedalStatus.html":{},"injectables/PedalsService.html":{},"interfaces/SaveObj.html":{},"interfaces/StatusMessage.html":{},"interfaces/TreeNode.html":{},"interfaces/TreeNodeProxy.html":{},"interfaces/TreeOperation.html":{}}}],["parent.bounds.topleft.x",{"_index":1472,"title":{},"body":{"interfaces/DesignActions.html":{}}}],["parent.bounds.topleft.y",{"_index":1473,"title":{},"body":{"interfaces/DesignActions.html":{}}}],["parent.id",{"_index":1467,"title":{},"body":{"interfaces/DesignActions.html":{}}}],["parent/child",{"_index":4581,"title":{},"body":{"index.html":{}}}],["parent_id",{"_index":1355,"title":{},"body":{"interfaces/DesignActions.html":{}}}],["parentkeys",{"_index":1108,"title":{},"body":{"classes/DBListener.html":{},"classes/DBListenerArray.html":{},"classes/DBNode.html":{},"classes/DBNodeArray.html":{},"classes/DBTwoWay.html":{},"classes/DBTwoWayArray.html":{},"classes/DBWriteBuffer.html":{},"classes/DBWriter.html":{},"classes/DBWriterArray.html":{},"interfaces/NodeMethods.html":{},"interfaces/NodeParams.html":{},"classes/OnlineStatus.html":{}}}],["parentnode",{"_index":1035,"title":{},"body":{"classes/DBListener.html":{},"classes/DBListenerArray.html":{},"classes/DBNode.html":{},"classes/DBNodeArray.html":{},"classes/DBTwoWay.html":{},"classes/DBTwoWayArray.html":{},"classes/DBWriteBuffer.html":{},"classes/DBWriter.html":{},"classes/DBWriterArray.html":{},"interfaces/NodeMethods.html":{},"interfaces/NodeParams.html":{},"classes/OnlineStatus.html":{}}}],["parsedefaultinletvalue",{"_index":2393,"title":{},"body":{"components/InletComponent.html":{}}}],["parsedefaultinletvalue(type",{"_index":2412,"title":{},"body":{"components/InletComponent.html":{}}}],["parseint(el",{"_index":2812,"title":{},"body":{"components/MixerViewComponent.html":{}}}],["parseint(value",{"_index":2453,"title":{},"body":{"components/InletComponent.html":{}}}],["part",{"_index":3733,"title":{},"body":{"interfaces/PlayerState.html":{},"interfaces/PlayerState-1.html":{},"injectables/ViewportService.html":{},"interfaces/WeavingLog.html":{},"interfaces/WeavingPick.html":{},"interfaces/WeavingPick-1.html":{}}}],["particular",{"_index":3000,"title":{},"body":{"components/OpHelpModal.html":{},"index.html":{},"miscellaneous/typealiases.html":{}}}],["pass",{"_index":1016,"title":{},"body":{"classes/DBListener.html":{},"classes/DBListenerArray.html":{},"classes/DBNode.html":{},"classes/DBNodeArray.html":{},"classes/DBTwoWay.html":{},"classes/DBTwoWayArray.html":{},"classes/DBWriteBuffer.html":{},"classes/DBWriter.html":{},"classes/DBWriterArray.html":{},"interfaces/NodeMethods.html":{},"interfaces/NodeParams.html":{},"classes/OnlineStatus.html":{}}}],["passed",{"_index":1942,"title":{},"body":{"components/DraftdetailComponent.html":{}}}],["passing",{"_index":2597,"title":{},"body":{"injectables/MappingsService.html":{}}}],["path",{"_index":898,"title":{},"body":{"interfaces/Crossing.html":{},"classes/DBListener.html":{},"classes/DBListenerArray.html":{},"classes/DBNode.html":{},"classes/DBNodeArray.html":{},"classes/DBTwoWay.html":{},"classes/DBTwoWayArray.html":{},"classes/DBWriteBuffer.html":{},"classes/DBWriter.html":{},"classes/DBWriterArray.html":{},"interfaces/NodeMethods.html":{},"interfaces/NodeParams.html":{},"classes/OnlineStatus.html":{},"interfaces/Pedal.html":{},"classes/PedalStatus.html":{},"injectables/PedalsService.html":{},"classes/Shape.html":{},"interfaces/Vertex.html":{},"interfaces/YarnPath.html":{}}}],["paths",{"_index":888,"title":{},"body":{"interfaces/Crossing.html":{},"components/DraftdetailComponent.html":{},"interfaces/Vertex.html":{},"interfaces/YarnPath.html":{},"index.html":{},"miscellaneous/typealiases.html":{}}}],["pattern",{"_index":273,"title":{},"body":{"classes/AbstractOpFactory.html":{},"classes/BaseOp.html":{},"classes/Branch.html":{},"classes/Bus.html":{},"interfaces/DraftMap.html":{},"interfaces/Ink.html":{},"injectables/InkService.html":{},"interfaces/Interlacement.html":{},"interfaces/InterlacementVal.html":{},"classes/Merge.html":{},"interfaces/OpClassifier.html":{},"interfaces/OperationProperties.html":{},"classes/Pipe.html":{},"classes/Render.html":{},"classes/Seed.html":{},"interfaces/TopologyDef.html":{},"index.html":{}}}],["patterns",{"_index":4511,"title":{},"body":{"index.html":{}}}],["patterns/abstract",{"_index":278,"title":{},"body":{"classes/AbstractOpFactory.html":{},"classes/BaseOp.html":{},"classes/Branch.html":{},"classes/Bus.html":{},"classes/Merge.html":{},"interfaces/OpClassifier.html":{},"interfaces/OperationProperties.html":{},"classes/Pipe.html":{},"classes/Seed.html":{},"interfaces/TopologyDef.html":{}}}],["pds",{"_index":2515,"title":{},"body":{"injectables/MappingsService.html":{},"components/OpSequencerComponent.html":{},"components/VirtualPedalsComponent.html":{},"components/WeavingStateComponent.html":{}}}],["pds.num_v_pedals.val",{"_index":4284,"title":{},"body":{"components/VirtualPedalsComponent.html":{}}}],["pds.pedals.array((p",{"_index":2574,"title":{},"body":{"injectables/MappingsService.html":{}}}],["pedal",{"_index":500,"title":{"interfaces/Pedal.html":{}},"body":{"interfaces/ChainOp.html":{},"interfaces/DraftOperationClassification.html":{},"interfaces/LoomConfig.html":{},"injectables/MappingsService.html":{},"classes/OpSequencer.html":{},"interfaces/PairedOp.html":{},"interfaces/Pedal.html":{},"classes/PedalConfig.html":{},"interfaces/PedalEvent.html":{},"classes/PedalStatus.html":{},"injectables/PedalsService.html":{},"interfaces/PlayerOp.html":{},"injectables/PlayerService.html":{},"interfaces/PlayerState.html":{},"interfaces/PlayerState-1.html":{},"interfaces/WeavingLog.html":{},"interfaces/WeavingPick.html":{},"interfaces/WeavingPick-1.html":{},"components/WeavingStateComponent.html":{}}}],["pedal's",{"_index":3466,"title":{},"body":{"interfaces/Pedal.html":{},"classes/PedalStatus.html":{},"injectables/PedalsService.html":{}}}],["pedal(s",{"_index":3026,"title":{},"body":{"classes/OpSequencer.html":{}}}],["pedal.execute",{"_index":3467,"title":{},"body":{"interfaces/Pedal.html":{},"classes/PedalStatus.html":{},"injectables/PedalsService.html":{}}}],["pedal_array",{"_index":3387,"title":{},"body":{"interfaces/Pedal.html":{},"classes/PedalStatus.html":{},"injectables/PedalsService.html":{}}}],["pedal_states",{"_index":3386,"title":{},"body":{"interfaces/Pedal.html":{},"classes/PedalStatus.html":{},"injectables/PedalsService.html":{}}}],["pedalaction",{"_index":618,"title":{},"body":{"interfaces/ChainOp.html":{},"injectables/MappingsService.html":{},"interfaces/PairedOp.html":{},"interfaces/PedalEvent.html":{},"interfaces/PlayerOp.html":{},"miscellaneous/typealiases.html":{}}}],["pedalactions",{"_index":2514,"title":{},"body":{"injectables/MappingsService.html":{}}}],["pedalarray",{"_index":1712,"title":{},"body":{"interfaces/DraftOperationClassification.html":{},"interfaces/LoomConfig.html":{},"classes/PedalConfig.html":{},"injectables/PlayerService.html":{}}}],["pedalarray.map((p",{"_index":1715,"title":{},"body":{"interfaces/DraftOperationClassification.html":{},"interfaces/LoomConfig.html":{},"classes/PedalConfig.html":{},"injectables/PlayerService.html":{}}}],["pedalconfig",{"_index":1695,"title":{"classes/PedalConfig.html":{}},"body":{"interfaces/DraftOperationClassification.html":{},"interfaces/LoomConfig.html":{},"injectables/MappingsService.html":{},"classes/PedalConfig.html":{},"injectables/PlayerService.html":{}}}],["pedalevent",{"_index":503,"title":{"interfaces/PedalEvent.html":{}},"body":{"interfaces/ChainOp.html":{},"classes/OpSequencer.html":{},"interfaces/PairedOp.html":{},"interfaces/PedalEvent.html":{},"interfaces/PlayerOp.html":{}}}],["pedalid",{"_index":1747,"title":{},"body":{"interfaces/DraftOperationClassification.html":{},"interfaces/LoomConfig.html":{},"classes/PedalConfig.html":{},"injectables/PlayerService.html":{}}}],["pedalinsequencer",{"_index":2523,"title":{},"body":{"injectables/MappingsService.html":{}}}],["pedalinsequencer(id",{"_index":2545,"title":{},"body":{"injectables/MappingsService.html":{}}}],["pedalischained",{"_index":2524,"title":{},"body":{"injectables/MappingsService.html":{},"classes/PedalConfig.html":{}}}],["pedalischained(id",{"_index":1768,"title":{},"body":{"interfaces/DraftOperationClassification.html":{},"interfaces/LoomConfig.html":{},"injectables/MappingsService.html":{},"classes/PedalConfig.html":{},"injectables/PlayerService.html":{}}}],["pedalismapped",{"_index":2525,"title":{},"body":{"injectables/MappingsService.html":{},"classes/PedalConfig.html":{}}}],["pedalismapped(id",{"_index":1766,"title":{},"body":{"interfaces/DraftOperationClassification.html":{},"interfaces/LoomConfig.html":{},"injectables/MappingsService.html":{},"classes/PedalConfig.html":{},"injectables/PlayerService.html":{}}}],["pedalispaired",{"_index":2526,"title":{},"body":{"injectables/MappingsService.html":{},"classes/PedalConfig.html":{}}}],["pedalispaired(id",{"_index":1771,"title":{},"body":{"interfaces/DraftOperationClassification.html":{},"interfaces/LoomConfig.html":{},"injectables/MappingsService.html":{},"classes/PedalConfig.html":{},"injectables/PlayerService.html":{}}}],["pedalopmap",{"_index":2563,"title":{},"body":{"injectables/MappingsService.html":{},"miscellaneous/typealiases.html":{}}}],["pedalopmapping",{"_index":617,"title":{},"body":{"interfaces/ChainOp.html":{},"interfaces/DraftOperationClassification.html":{},"interfaces/LoomConfig.html":{},"injectables/MappingsService.html":{},"interfaces/PairedOp.html":{},"classes/PedalConfig.html":{},"interfaces/PedalEvent.html":{},"interfaces/PlayerOp.html":{},"injectables/PlayerService.html":{},"miscellaneous/typealiases.html":{}}}],["pedals",{"_index":594,"title":{},"body":{"interfaces/ChainOp.html":{},"classes/DBListener.html":{},"classes/DBListenerArray.html":{},"classes/DBNode.html":{},"classes/DBNodeArray.html":{},"classes/DBTwoWay.html":{},"classes/DBTwoWayArray.html":{},"classes/DBWriteBuffer.html":{},"classes/DBWriter.html":{},"classes/DBWriterArray.html":{},"interfaces/DraftOperationClassification.html":{},"interfaces/LoomConfig.html":{},"injectables/MappingsService.html":{},"interfaces/NodeMethods.html":{},"interfaces/NodeParams.html":{},"classes/OnlineStatus.html":{},"classes/OpSequencer.html":{},"interfaces/PairedOp.html":{},"interfaces/Pedal.html":{},"classes/PedalConfig.html":{},"interfaces/PedalEvent.html":{},"classes/PedalStatus.html":{},"injectables/PedalsService.html":{},"components/PlayerComponent.html":{},"interfaces/PlayerOp.html":{},"injectables/PlayerService.html":{},"components/VirtualPedalsComponent.html":{},"components/WeavingStateComponent.html":{}}}],["pedals'},{'name",{"_index":859,"title":{},"body":{"components/ConnectionComponent.html":{},"components/DraftdetailComponent.html":{},"components/ImageComponent.html":{},"components/InletComponent.html":{},"components/MixerViewComponent.html":{},"components/NoteComponent.html":{},"components/OpHelpModal.html":{},"components/OpSequencerComponent.html":{},"components/OpsComponent.html":{},"components/ParameterComponent.html":{},"components/PlayerComponent.html":{},"components/SnackbarComponent.html":{},"components/VirtualPedalsComponent.html":{},"components/WeavingStateComponent.html":{}}}],["pedals.component",{"_index":3695,"title":{},"body":{"modules/PlayerModule.html":{}}}],["pedals.component.html",{"_index":4262,"title":{},"body":{"components/VirtualPedalsComponent.html":{}}}],["pedals.component.scss",{"_index":4261,"title":{},"body":{"components/VirtualPedalsComponent.html":{}}}],["pedals.component.ts",{"_index":4260,"title":{},"body":{"components/VirtualPedalsComponent.html":{}}}],["pedals.component.ts:12",{"_index":4273,"title":{},"body":{"components/VirtualPedalsComponent.html":{}}}],["pedals.component.ts:15",{"_index":4270,"title":{},"body":{"components/VirtualPedalsComponent.html":{}}}],["pedals.component.ts:19",{"_index":4269,"title":{},"body":{"components/VirtualPedalsComponent.html":{}}}],["pedals.component.ts:9",{"_index":4266,"title":{},"body":{"components/VirtualPedalsComponent.html":{}}}],["pedals.length",{"_index":3062,"title":{},"body":{"classes/OpSequencer.html":{}}}],["pedals.on('pedal",{"_index":1862,"title":{},"body":{"interfaces/DraftOperationClassification.html":{},"interfaces/LoomConfig.html":{},"classes/PedalConfig.html":{},"injectables/PlayerService.html":{}}}],["pedals.push(sel_back",{"_index":3079,"title":{},"body":{"classes/OpSequencer.html":{}}}],["pedals.service",{"_index":2560,"title":{},"body":{"injectables/MappingsService.html":{}}}],["pedals/virtual",{"_index":3694,"title":{},"body":{"modules/PlayerModule.html":{},"components/VirtualPedalsComponent.html":{}}}],["pedals[0",{"_index":3059,"title":{},"body":{"classes/OpSequencer.html":{}}}],["pedals[1",{"_index":3061,"title":{},"body":{"classes/OpSequencer.html":{}}}],["pedals[2",{"_index":3064,"title":{},"body":{"classes/OpSequencer.html":{}}}],["pedalsservice",{"_index":1688,"title":{"injectables/PedalsService.html":{}},"body":{"interfaces/DraftOperationClassification.html":{},"interfaces/LoomConfig.html":{},"injectables/MappingsService.html":{},"components/OpSequencerComponent.html":{},"interfaces/Pedal.html":{},"classes/PedalConfig.html":{},"classes/PedalStatus.html":{},"injectables/PedalsService.html":{},"injectables/PlayerService.html":{},"components/VirtualPedalsComponent.html":{},"components/WeavingStateComponent.html":{}}}],["pedalstatus",{"_index":1689,"title":{"classes/PedalStatus.html":{}},"body":{"interfaces/DraftOperationClassification.html":{},"interfaces/LoomConfig.html":{},"interfaces/Pedal.html":{},"classes/PedalConfig.html":{},"classes/PedalStatus.html":{},"injectables/PedalsService.html":{},"injectables/PlayerService.html":{}}}],["pedalstatus(this.db",{"_index":3439,"title":{},"body":{"interfaces/Pedal.html":{},"classes/PedalStatus.html":{},"injectables/PedalsService.html":{}}}],["per",{"_index":3973,"title":{},"body":{"classes/Shape.html":{}}}],["percentage",{"_index":4080,"title":{},"body":{"classes/Shuttle.html":{}}}],["perform",{"_index":71,"title":{},"body":{"classes/AbstractOpFactory.html":{},"classes/BaseOp.html":{},"classes/Branch.html":{},"classes/Bus.html":{},"interfaces/ChainOp.html":{},"interfaces/DraftOperationClassification.html":{},"interfaces/DynamicOperation.html":{},"interfaces/LoomConfig.html":{},"classes/Merge.html":{},"interfaces/OpClassifier.html":{},"interfaces/OpInput.html":{},"classes/OpSequencer.html":{},"interfaces/OperationClassification.html":{},"interfaces/OperationProperties.html":{},"interfaces/PairedOp.html":{},"classes/PedalConfig.html":{},"interfaces/PedalEvent.html":{},"classes/Pipe.html":{},"interfaces/PlayerOp.html":{},"injectables/PlayerService.html":{},"classes/Seed.html":{},"injectables/SequencerService.html":{},"interfaces/TopologyDef.html":{},"interfaces/TreeOperation.html":{},"miscellaneous/typealiases.html":{}}}],["perform(init",{"_index":3046,"title":{},"body":{"classes/OpSequencer.html":{},"injectables/SequencerService.html":{}}}],["performargs",{"_index":219,"title":{},"body":{"classes/AbstractOpFactory.html":{},"classes/BaseOp.html":{},"classes/Branch.html":{},"classes/Bus.html":{},"classes/Merge.html":{},"interfaces/OpClassifier.html":{},"interfaces/OperationProperties.html":{},"classes/Pipe.html":{},"classes/Seed.html":{},"interfaces/TopologyDef.html":{}}}],["performcallsigs",{"_index":174,"title":{},"body":{"classes/AbstractOpFactory.html":{},"classes/BaseOp.html":{},"classes/Branch.html":{},"classes/Bus.html":{},"classes/Merge.html":{},"interfaces/OpClassifier.html":{},"interfaces/OperationProperties.html":{},"classes/Pipe.html":{},"classes/Seed.html":{},"interfaces/TopologyDef.html":{},"miscellaneous/typealiases.html":{}}}],["performcallsigs[constraint[\"constraint\"]][topo[\"type",{"_index":218,"title":{},"body":{"classes/AbstractOpFactory.html":{},"classes/BaseOp.html":{},"classes/Branch.html":{},"classes/Bus.html":{},"classes/Merge.html":{},"interfaces/OpClassifier.html":{},"interfaces/OperationProperties.html":{},"classes/Pipe.html":{},"classes/Seed.html":{},"interfaces/TopologyDef.html":{}}}],["performdraftinput",{"_index":84,"title":{},"body":{"classes/AbstractOpFactory.html":{},"classes/BaseOp.html":{},"classes/Branch.html":{},"classes/Bus.html":{},"classes/Merge.html":{},"interfaces/OpClassifier.html":{},"interfaces/OperationProperties.html":{},"classes/Pipe.html":{},"classes/Seed.html":{},"interfaces/TopologyDef.html":{},"miscellaneous/typealiases.html":{}}}],["performed",{"_index":2169,"title":{},"body":{"interfaces/DynamicOperation.html":{},"interfaces/OpInput.html":{},"interfaces/OperationClassification.html":{},"interfaces/TreeOperation.html":{}}}],["performinput",{"_index":214,"title":{},"body":{"classes/AbstractOpFactory.html":{},"classes/BaseOp.html":{},"classes/Branch.html":{},"classes/Bus.html":{},"classes/Merge.html":{},"interfaces/OpClassifier.html":{},"interfaces/OperationProperties.html":{},"classes/Pipe.html":{},"classes/Seed.html":{},"interfaces/TopologyDef.html":{}}}],["performorparams",{"_index":237,"title":{},"body":{"classes/AbstractOpFactory.html":{},"classes/BaseOp.html":{},"classes/Branch.html":{},"classes/Bus.html":{},"classes/Merge.html":{},"interfaces/OpClassifier.html":{},"interfaces/OperationProperties.html":{},"classes/Pipe.html":{},"classes/Seed.html":{},"interfaces/TopologyDef.html":{}}}],["performoutput",{"_index":89,"title":{},"body":{"classes/AbstractOpFactory.html":{},"classes/BaseOp.html":{},"classes/Branch.html":{},"classes/Bus.html":{},"classes/Merge.html":{},"interfaces/OpClassifier.html":{},"interfaces/OperationProperties.html":{},"classes/Pipe.html":{},"classes/Seed.html":{},"interfaces/TopologyDef.html":{},"miscellaneous/typealiases.html":{}}}],["performwithparams",{"_index":238,"title":{},"body":{"classes/AbstractOpFactory.html":{},"classes/BaseOp.html":{},"classes/Branch.html":{},"classes/Bus.html":{},"classes/Merge.html":{},"interfaces/OpClassifier.html":{},"interfaces/OperationProperties.html":{},"classes/Pipe.html":{},"classes/Seed.html":{},"interfaces/TopologyDef.html":{}}}],["physical",{"_index":3489,"title":{},"body":{"interfaces/Pedal.html":{},"classes/PedalStatus.html":{},"injectables/PedalsService.html":{}}}],["pi",{"_index":3375,"title":{},"body":{"interfaces/Pedal.html":{},"classes/PedalStatus.html":{},"injectables/PedalsService.html":{}}}],["pi/pc",{"_index":1132,"title":{},"body":{"classes/DBListener.html":{},"classes/DBListenerArray.html":{},"classes/DBNode.html":{},"classes/DBNodeArray.html":{},"classes/DBTwoWay.html":{},"classes/DBTwoWayArray.html":{},"classes/DBWriteBuffer.html":{},"classes/DBWriter.html":{},"classes/DBWriterArray.html":{},"interfaces/NodeMethods.html":{},"interfaces/NodeParams.html":{},"classes/OnlineStatus.html":{}}}],["pi_online",{"_index":3374,"title":{},"body":{"interfaces/Pedal.html":{},"classes/PedalStatus.html":{},"injectables/PedalsService.html":{}}}],["pick",{"_index":3397,"title":{},"body":{"interfaces/Pedal.html":{},"classes/PedalStatus.html":{},"injectables/PedalsService.html":{},"interfaces/PlayerState.html":{},"interfaces/PlayerState-1.html":{},"classes/Shape.html":{},"interfaces/WeavingLog.html":{},"interfaces/WeavingPick.html":{},"interfaces/WeavingPick-1.html":{},"index.html":{}}}],["pick_data",{"_index":3384,"title":{},"body":{"interfaces/Pedal.html":{},"classes/PedalStatus.html":{},"injectables/PedalsService.html":{}}}],["picker",{"_index":4380,"title":{},"body":{"dependencies.html":{}}}],["picknum",{"_index":3736,"title":{},"body":{"interfaces/PlayerState.html":{},"interfaces/PlayerState-1.html":{},"interfaces/WeavingLog.html":{},"interfaces/WeavingPick.html":{},"interfaces/WeavingPick-1.html":{}}}],["picks",{"_index":3396,"title":{},"body":{"interfaces/Pedal.html":{},"classes/PedalStatus.html":{},"injectables/PedalsService.html":{},"interfaces/PlayerState.html":{},"interfaces/PlayerState-1.html":{},"classes/Shape.html":{},"interfaces/WeavingLog.html":{},"interfaces/WeavingPick.html":{},"interfaces/WeavingPick-1.html":{}}}],["pics",{"_index":2080,"title":{},"body":{"components/DraftdetailComponent.html":{}}}],["pid",{"_index":1779,"title":{},"body":{"interfaces/DraftOperationClassification.html":{},"interfaces/LoomConfig.html":{},"classes/PedalConfig.html":{},"injectables/PlayerService.html":{}}}],["pink",{"_index":4119,"title":{},"body":{"components/SnackbarComponent.html":{}}}],["pipe",{"_index":99,"title":{"classes/Pipe.html":{}},"body":{"classes/AbstractOpFactory.html":{},"classes/BaseOp.html":{},"classes/Branch.html":{},"classes/Bus.html":{},"interfaces/ChainOp.html":{},"interfaces/DraftOperationClassification.html":{},"interfaces/DynamicOperation.html":{},"interfaces/LoomConfig.html":{},"classes/Merge.html":{},"interfaces/OpClassifier.html":{},"interfaces/OpInput.html":{},"interfaces/OperationClassification.html":{},"interfaces/OperationProperties.html":{},"interfaces/PairedOp.html":{},"classes/PedalConfig.html":{},"interfaces/PedalEvent.html":{},"classes/Pipe.html":{},"interfaces/PlayerOp.html":{},"injectables/PlayerService.html":{},"classes/Seed.html":{},"interfaces/TopologyDef.html":{},"interfaces/TreeOperation.html":{}}}],["pipe/merge/branch/bus",{"_index":2190,"title":{},"body":{"interfaces/DynamicOperation.html":{},"interfaces/OpInput.html":{},"interfaces/OperationClassification.html":{},"interfaces/TreeOperation.html":{}}}],["pipeline",{"_index":4431,"title":{},"body":{"index.html":{}}}],["pipeop",{"_index":549,"title":{},"body":{"interfaces/ChainOp.html":{},"interfaces/DynamicOperation.html":{},"interfaces/OpInput.html":{},"interfaces/OperationClassification.html":{},"interfaces/PairedOp.html":{},"interfaces/PedalEvent.html":{},"interfaces/PlayerOp.html":{},"interfaces/TreeOperation.html":{}}}],["pipeop.perform(init.draft",{"_index":552,"title":{},"body":{"interfaces/ChainOp.html":{},"interfaces/PairedOp.html":{},"interfaces/PedalEvent.html":{},"interfaces/PlayerOp.html":{}}}],["pipeoperation",{"_index":310,"title":{},"body":{"classes/AbstractOpFactory.html":{},"classes/BaseOp.html":{},"classes/Branch.html":{},"classes/Bus.html":{},"classes/Merge.html":{},"interfaces/OpClassifier.html":{},"interfaces/OperationProperties.html":{},"classes/Pipe.html":{},"classes/Seed.html":{},"interfaces/TopologyDef.html":{}}}],["pixels",{"_index":1444,"title":{},"body":{"interfaces/DesignActions.html":{},"components/MixerViewComponent.html":{},"components/NoteComponent.html":{}}}],["placed",{"_index":1624,"title":{},"body":{"interfaces/DraftMap.html":{},"interfaces/Interlacement.html":{},"interfaces/InterlacementVal.html":{},"classes/Shape.html":{}}}],["placeholder",{"_index":3181,"title":{},"body":{"interfaces/OperationParam.html":{},"classes/Params.html":{},"miscellaneous/typealiases.html":{}}}],["places",{"_index":2319,"title":{},"body":{"interfaces/Ink.html":{},"injectables/InkService.html":{}}}],["playabletreeop",{"_index":562,"title":{},"body":{"interfaces/ChainOp.html":{},"interfaces/PairedOp.html":{},"interfaces/PedalEvent.html":{},"interfaces/PlayerOp.html":{},"miscellaneous/functions.html":{},"miscellaneous/typealiases.html":{}}}],["player",{"_index":523,"title":{},"body":{"interfaces/ChainOp.html":{},"interfaces/DraftOperationClassification.html":{},"interfaces/LoomConfig.html":{},"injectables/MappingsService.html":{},"classes/OpSequencer.html":{},"components/OpSequencerComponent.html":{},"interfaces/PairedOp.html":{},"classes/PedalConfig.html":{},"interfaces/PedalEvent.html":{},"components/PlayerComponent.html":{},"interfaces/PlayerOp.html":{},"injectables/PlayerService.html":{},"interfaces/PlayerState.html":{},"interfaces/PlayerState-1.html":{},"interfaces/WeavingLog.html":{},"interfaces/WeavingPick.html":{},"interfaces/WeavingPick-1.html":{},"components/WeavingStateComponent.html":{}}}],["player'},{'name",{"_index":853,"title":{},"body":{"components/ConnectionComponent.html":{},"components/DraftdetailComponent.html":{},"components/ImageComponent.html":{},"components/InletComponent.html":{},"components/MixerViewComponent.html":{},"components/NoteComponent.html":{},"components/OpHelpModal.html":{},"components/OpSequencerComponent.html":{},"components/OpsComponent.html":{},"components/ParameterComponent.html":{},"components/PlayerComponent.html":{},"components/SnackbarComponent.html":{},"components/VirtualPedalsComponent.html":{},"components/WeavingStateComponent.html":{}}}],["player)operations",{"_index":1698,"title":{},"body":{"interfaces/DraftOperationClassification.html":{},"interfaces/LoomConfig.html":{},"classes/PedalConfig.html":{},"injectables/PlayerService.html":{}}}],["player.component",{"_index":3693,"title":{},"body":{"modules/PlayerModule.html":{}}}],["player.component.html",{"_index":3614,"title":{},"body":{"components/PlayerComponent.html":{}}}],["player.component.scss",{"_index":3613,"title":{},"body":{"components/PlayerComponent.html":{}}}],["player.service",{"_index":2561,"title":{},"body":{"injectables/MappingsService.html":{},"components/OpSequencerComponent.html":{},"components/PlayerComponent.html":{},"components/WeavingStateComponent.html":{}}}],["player/component/player.component",{"_index":2707,"title":{},"body":{"modules/MixerModule.html":{}}}],["player/player.component",{"_index":2710,"title":{},"body":{"modules/MixerModule.html":{}}}],["player/player.module",{"_index":2694,"title":{},"body":{"modules/MixerModule.html":{}}}],["playercomponent",{"_index":852,"title":{"components/PlayerComponent.html":{}},"body":{"components/ConnectionComponent.html":{},"components/DraftdetailComponent.html":{},"components/ImageComponent.html":{},"components/InletComponent.html":{},"modules/MixerModule.html":{},"components/MixerViewComponent.html":{},"components/NoteComponent.html":{},"components/OpHelpModal.html":{},"components/OpSequencerComponent.html":{},"components/OpsComponent.html":{},"components/ParameterComponent.html":{},"components/PlayerComponent.html":{},"modules/PlayerModule.html":{},"components/SnackbarComponent.html":{},"components/VirtualPedalsComponent.html":{},"components/WeavingStateComponent.html":{},"overview.html":{}}}],["playermodule",{"_index":2684,"title":{"modules/PlayerModule.html":{}},"body":{"modules/MixerModule.html":{},"modules/PlayerModule.html":{},"modules.html":{},"overview.html":{}}}],["playerop",{"_index":432,"title":{"interfaces/PlayerOp.html":{}},"body":{"interfaces/ChainIndex.html":{},"interfaces/ChainOp.html":{},"interfaces/DraftOperationClassification.html":{},"interfaces/LoomConfig.html":{},"injectables/MappingsService.html":{},"classes/OpSequencer.html":{},"interfaces/PairedOp.html":{},"classes/PedalConfig.html":{},"interfaces/PedalEvent.html":{},"interfaces/PlayerOp.html":{},"injectables/PlayerService.html":{},"injectables/SequencerService.html":{},"miscellaneous/functions.html":{},"miscellaneous/typealiases.html":{}}}],["playerop[\"perform",{"_index":566,"title":{},"body":{"interfaces/ChainOp.html":{},"interfaces/PairedOp.html":{},"interfaces/PedalEvent.html":{},"interfaces/PlayerOp.html":{}}}],["playeropfrom",{"_index":1682,"title":{},"body":{"interfaces/DraftOperationClassification.html":{},"interfaces/LoomConfig.html":{},"classes/PedalConfig.html":{},"injectables/PlayerService.html":{},"miscellaneous/functions.html":{}}}],["playeropfrom(defs.tabby",{"_index":1792,"title":{},"body":{"interfaces/DraftOperationClassification.html":{},"interfaces/LoomConfig.html":{},"classes/PedalConfig.html":{},"injectables/PlayerService.html":{}}}],["playeropfrom(op",{"_index":544,"title":{},"body":{"interfaces/ChainOp.html":{},"interfaces/DraftOperationClassification.html":{},"interfaces/LoomConfig.html":{},"interfaces/PairedOp.html":{},"classes/PedalConfig.html":{},"interfaces/PedalEvent.html":{},"interfaces/PlayerOp.html":{},"injectables/PlayerService.html":{},"miscellaneous/functions.html":{}}}],["playeropfromtree",{"_index":563,"title":{},"body":{"interfaces/ChainOp.html":{},"interfaces/PairedOp.html":{},"interfaces/PedalEvent.html":{},"interfaces/PlayerOp.html":{},"miscellaneous/functions.html":{}}}],["playeropfromtree(op",{"_index":565,"title":{},"body":{"interfaces/ChainOp.html":{},"interfaces/PairedOp.html":{},"interfaces/PedalEvent.html":{},"interfaces/PlayerOp.html":{},"miscellaneous/functions.html":{}}}],["playerservice",{"_index":1785,"title":{"injectables/PlayerService.html":{}},"body":{"interfaces/DraftOperationClassification.html":{},"interfaces/LoomConfig.html":{},"injectables/MappingsService.html":{},"components/OpSequencerComponent.html":{},"classes/PedalConfig.html":{},"components/PlayerComponent.html":{},"injectables/PlayerService.html":{},"components/WeavingStateComponent.html":{}}}],["playerstate",{"_index":513,"title":{"interfaces/PlayerState.html":{},"interfaces/PlayerState-1.html":{}},"body":{"interfaces/ChainOp.html":{},"interfaces/DraftOperationClassification.html":{},"interfaces/LoomConfig.html":{},"classes/OpSequencer.html":{},"interfaces/PairedOp.html":{},"classes/PedalConfig.html":{},"interfaces/PedalEvent.html":{},"interfaces/PlayerOp.html":{},"injectables/PlayerService.html":{},"interfaces/PlayerState.html":{},"interfaces/PlayerState-1.html":{},"injectables/SequencerService.html":{},"interfaces/WeavingLog.html":{},"interfaces/WeavingPick.html":{},"interfaces/WeavingPick-1.html":{},"miscellaneous/functions.html":{}}}],["playopen",{"_index":3618,"title":{},"body":{"components/PlayerComponent.html":{}}}],["pls",{"_index":3086,"title":{},"body":{"components/OpSequencerComponent.html":{},"components/PlayerComponent.html":{},"components/WeavingStateComponent.html":{}}}],["pls.draft",{"_index":3642,"title":{},"body":{"components/PlayerComponent.html":{}}}],["pls.draft(value",{"_index":3644,"title":{},"body":{"components/PlayerComponent.html":{}}}],["pls.pedalops.pairs[p.id].name",{"_index":4330,"title":{},"body":{"components/WeavingStateComponent.html":{}}}],["pls.pedals",{"_index":4327,"title":{},"body":{"components/WeavingStateComponent.html":{}}}],["plus",{"_index":2334,"title":{},"body":{"interfaces/Ink.html":{},"injectables/InkService.html":{}}}],["point",{"_index":345,"title":{"interfaces/Point.html":{}},"body":{"interfaces/Bounds.html":{},"components/ConnectionComponent.html":{},"interfaces/DesignActions.html":{},"injectables/MappingsService.html":{},"directives/MarqueeComponent.html":{},"components/MixerViewComponent.html":{},"components/NoteComponent.html":{},"interfaces/Point.html":{},"directives/SelectionComponent.html":{},"injectables/ViewportService.html":{},"miscellaneous/typealiases.html":{}}}],["pointer",{"_index":2825,"title":{},"body":{"components/MixerViewComponent.html":{},"components/NoteComponent.html":{},"components/SnackbarComponent.html":{}}}],["pointer.x",{"_index":2828,"title":{},"body":{"components/MixerViewComponent.html":{}}}],["pointer.y",{"_index":2832,"title":{},"body":{"components/MixerViewComponent.html":{}}}],["pointer:point",{"_index":2909,"title":{},"body":{"components/NoteComponent.html":{}}}],["pointeroffsetinglobal",{"_index":2827,"title":{},"body":{"components/MixerViewComponent.html":{}}}],["pointeroffsetinglobal.x",{"_index":2836,"title":{},"body":{"components/MixerViewComponent.html":{}}}],["pointeroffsetinglobal.y",{"_index":2837,"title":{},"body":{"components/MixerViewComponent.html":{}}}],["pointing",{"_index":454,"title":{},"body":{"interfaces/ChainIndex.html":{},"injectables/SequencerService.html":{}}}],["points",{"_index":897,"title":{},"body":{"interfaces/Crossing.html":{},"interfaces/DensityUnits.html":{},"interfaces/DesignMode.html":{},"interfaces/LoomTypes.html":{},"interfaces/MaterialTypes.html":{},"interfaces/Vertex.html":{},"interfaces/ViewModes.html":{},"interfaces/YarnPath.html":{},"index.html":{}}}],["poistion",{"_index":1504,"title":{},"body":{"interfaces/DesignActions.html":{}}}],["popnode",{"_index":1054,"title":{},"body":{"classes/DBListener.html":{},"classes/DBListenerArray.html":{},"classes/DBNode.html":{},"classes/DBNodeArray.html":{},"classes/DBTwoWay.html":{},"classes/DBTwoWayArray.html":{},"classes/DBWriteBuffer.html":{},"classes/DBWriter.html":{},"classes/DBWriterArray.html":{},"interfaces/NodeMethods.html":{},"interfaces/NodeParams.html":{},"classes/OnlineStatus.html":{}}}],["port",{"_index":1460,"title":{},"body":{"interfaces/DesignActions.html":{}}}],["pos",{"_index":428,"title":{},"body":{"interfaces/ChainIndex.html":{},"injectables/SequencerService.html":{},"classes/Shape.html":{}}}],["position",{"_index":348,"title":{},"body":{"interfaces/Bounds.html":{},"interfaces/ChainIndex.html":{},"components/ConnectionComponent.html":{},"interfaces/DesignActions.html":{},"interfaces/DraftMap.html":{},"interfaces/DraftNodeProxy.html":{},"interfaces/FileObj.html":{},"interfaces/FileSaver.html":{},"interfaces/Fileloader.html":{},"components/InletComponent.html":{},"interfaces/Interlacement.html":{},"interfaces/InterlacementVal.html":{},"interfaces/LoadResponse.html":{},"components/MixerViewComponent.html":{},"interfaces/NodeComponentProxy.html":{},"components/NoteComponent.html":{},"interfaces/OpComponentProxy.html":{},"components/ParameterComponent.html":{},"interfaces/Point.html":{},"interfaces/SaveObj.html":{},"injectables/SequencerService.html":{},"interfaces/StatusMessage.html":{},"interfaces/TreeNodeProxy.html":{},"injectables/ViewportService.html":{},"index.html":{}}}],["positions",{"_index":3746,"title":{},"body":{"interfaces/Point.html":{}}}],["preferences",{"_index":4640,"title":{},"body":{"miscellaneous/typealiases.html":{}}}],["prepare",{"_index":2218,"title":{},"body":{"interfaces/DynamicOperation.html":{},"interfaces/OpInput.html":{},"interfaces/OperationClassification.html":{},"interfaces/TreeOperation.html":{}}}],["prerequisites",{"_index":4477,"title":{},"body":{"index.html":{}}}],["present",{"_index":402,"title":{},"body":{"classes/Cell.html":{},"interfaces/DraftNodeProxy.html":{},"interfaces/FileObj.html":{},"interfaces/FileSaver.html":{},"interfaces/Fileloader.html":{},"interfaces/LoadResponse.html":{},"interfaces/NodeComponentProxy.html":{},"interfaces/OpComponentProxy.html":{},"interfaces/SaveObj.html":{},"interfaces/StatusMessage.html":{},"interfaces/TreeNodeProxy.html":{}}}],["prev",{"_index":3069,"title":{},"body":{"classes/OpSequencer.html":{}}}],["preview",{"_index":2771,"title":{},"body":{"components/MixerViewComponent.html":{}}}],["previewing",{"_index":3731,"title":{},"body":{"interfaces/PlayerState.html":{},"interfaces/PlayerState-1.html":{},"interfaces/WeavingLog.html":{},"interfaces/WeavingPick.html":{},"interfaces/WeavingPick-1.html":{}}}],["previous",{"_index":2350,"title":{},"body":{"interfaces/Ink.html":{},"injectables/InkService.html":{}}}],["previously",{"_index":1428,"title":{},"body":{"interfaces/DesignActions.html":{},"components/PlayerComponent.html":{},"index.html":{}}}],["prevop",{"_index":497,"title":{},"body":{"interfaces/ChainIndex.html":{},"classes/OpSequencer.html":{},"injectables/SequencerService.html":{}}}],["primary.is",{"_index":3348,"title":{},"body":{"components/ParameterComponent.html":{}}}],["printbounds",{"_index":3939,"title":{},"body":{"classes/Shape.html":{}}}],["printing",{"_index":2882,"title":{},"body":{"components/NoteComponent.html":{}}}],["prior",{"_index":2167,"title":{},"body":{"interfaces/DynamicOperation.html":{},"interfaces/OpInput.html":{},"interfaces/OperationClassification.html":{},"interfaces/TreeOperation.html":{}}}],["private",{"_index":1329,"title":{},"body":{"interfaces/DesignActions.html":{},"interfaces/DraftOperationClassification.html":{},"components/DraftdetailComponent.html":{},"interfaces/Ink.html":{},"injectables/InkService.html":{},"components/InletComponent.html":{},"interfaces/LoomConfig.html":{},"injectables/MappingsService.html":{},"components/MixerViewComponent.html":{},"components/NoteComponent.html":{},"components/OpHelpModal.html":{},"components/OpsComponent.html":{},"classes/PedalConfig.html":{},"components/PlayerComponent.html":{},"injectables/PlayerService.html":{},"classes/Render.html":{}}}],["process",{"_index":4519,"title":{},"body":{"index.html":{}}}],["prod",{"_index":4609,"title":{},"body":{"index.html":{}}}],["producing",{"_index":4575,"title":{},"body":{"index.html":{}}}],["production",{"_index":4610,"title":{},"body":{"index.html":{}}}],["program",{"_index":4552,"title":{},"body":{"index.html":{}}}],["progress",{"_index":525,"title":{},"body":{"interfaces/ChainOp.html":{},"interfaces/DraftOperationClassification.html":{},"interfaces/LoomConfig.html":{},"classes/OpSequencer.html":{},"interfaces/PairedOp.html":{},"classes/PedalConfig.html":{},"interfaces/PedalEvent.html":{},"interfaces/PlayerOp.html":{},"injectables/PlayerService.html":{}}}],["progressive",{"_index":4473,"title":{},"body":{"index.html":{}}}],["project",{"_index":4438,"title":{},"body":{"index.html":{}}}],["promise",{"_index":520,"title":{},"body":{"interfaces/ChainOp.html":{},"interfaces/DesignActions.html":{},"interfaces/DraftNodeProxy.html":{},"interfaces/DynamicOperation.html":{},"interfaces/FileObj.html":{},"interfaces/FileSaver.html":{},"interfaces/Fileloader.html":{},"interfaces/LoadResponse.html":{},"interfaces/NodeComponentProxy.html":{},"interfaces/OpComponentProxy.html":{},"interfaces/OpInput.html":{},"classes/OpSequencer.html":{},"interfaces/OperationClassification.html":{},"interfaces/PairedOp.html":{},"interfaces/PedalEvent.html":{},"interfaces/PlayerOp.html":{},"interfaces/SaveObj.html":{},"injectables/SequencerService.html":{},"interfaces/StatusMessage.html":{},"interfaces/TreeNodeProxy.html":{},"interfaces/TreeOperation.html":{}}}],["promise.resolve",{"_index":2207,"title":{},"body":{"interfaces/DynamicOperation.html":{},"interfaces/OpInput.html":{},"interfaces/OperationClassification.html":{},"interfaces/TreeOperation.html":{}}}],["promise.resolve([mergeop.perform(inputs",{"_index":2222,"title":{},"body":{"interfaces/DynamicOperation.html":{},"interfaces/OpInput.html":{},"interfaces/OperationClassification.html":{},"interfaces/TreeOperation.html":{}}}],["promise.resolve([pipeop.perform(getdraftsfrominputs(op_inputs)[0",{"_index":2208,"title":{},"body":{"interfaces/DynamicOperation.html":{},"interfaces/OpInput.html":{},"interfaces/OperationClassification.html":{},"interfaces/TreeOperation.html":{}}}],["promise.resolve([pipeop.perform(op_inputs[0].drafts[0",{"_index":2212,"title":{},"body":{"interfaces/DynamicOperation.html":{},"interfaces/OpInput.html":{},"interfaces/OperationClassification.html":{},"interfaces/TreeOperation.html":{}}}],["promise.resolve([res",{"_index":2205,"title":{},"body":{"interfaces/DynamicOperation.html":{},"interfaces/OpInput.html":{},"interfaces/OperationClassification.html":{},"interfaces/TreeOperation.html":{}}}],["promise.resolve([seedop.perform(op_inputs[0].params",{"_index":2196,"title":{},"body":{"interfaces/DynamicOperation.html":{},"interfaces/OpInput.html":{},"interfaces/OperationClassification.html":{},"interfaces/TreeOperation.html":{}}}],["promise.resolve(branchop.perform(op_inputs[1].drafts[0",{"_index":2230,"title":{},"body":{"interfaces/DynamicOperation.html":{},"interfaces/OpInput.html":{},"interfaces/OperationClassification.html":{},"interfaces/TreeOperation.html":{}}}],["promise.resolve(init",{"_index":599,"title":{},"body":{"interfaces/ChainOp.html":{},"interfaces/PairedOp.html":{},"interfaces/PedalEvent.html":{},"interfaces/PlayerOp.html":{}}}],["promise.resolve(newstate",{"_index":615,"title":{},"body":{"interfaces/ChainOp.html":{},"interfaces/PairedOp.html":{},"interfaces/PedalEvent.html":{},"interfaces/PlayerOp.html":{}}}],["promise.resolve(res",{"_index":535,"title":{},"body":{"interfaces/ChainOp.html":{},"interfaces/DraftOperationClassification.html":{},"interfaces/LoomConfig.html":{},"classes/OpSequencer.html":{},"interfaces/PairedOp.html":{},"classes/PedalConfig.html":{},"interfaces/PedalEvent.html":{},"interfaces/PlayerOp.html":{},"injectables/PlayerService.html":{}}}],["properly",{"_index":4532,"title":{},"body":{"index.html":{}}}],["properties",{"_index":319,"title":{"properties.html":{}},"body":{"classes/BaseOp.html":{},"interfaces/Bounds.html":{},"classes/Branch.html":{},"classes/Bus.html":{},"classes/Cell.html":{},"interfaces/ChainIndex.html":{},"interfaces/ChainOp.html":{},"components/ConnectionComponent.html":{},"interfaces/Crossing.html":{},"classes/DBListener.html":{},"classes/DBListenerArray.html":{},"classes/DBNode.html":{},"classes/DBNodeArray.html":{},"classes/DBTwoWay.html":{},"classes/DBTwoWayArray.html":{},"classes/DBWriteBuffer.html":{},"classes/DBWriter.html":{},"classes/DBWriterArray.html":{},"interfaces/DensityUnits.html":{},"interfaces/DesignActions.html":{},"interfaces/DesignMode.html":{},"interfaces/DraftMap.html":{},"interfaces/DraftNodeProxy.html":{},"interfaces/DraftOperationClassification.html":{},"components/DraftdetailComponent.html":{},"interfaces/DynamicOperation.html":{},"interfaces/FileObj.html":{},"interfaces/FileSaver.html":{},"interfaces/Fileloader.html":{},"interfaces/IOTuple.html":{},"interfaces/Ink.html":{},"injectables/InkService.html":{},"components/InletComponent.html":{},"interfaces/Interlacement.html":{},"interfaces/InterlacementVal.html":{},"injectables/LayersService.html":{},"interfaces/LoadResponse.html":{},"interfaces/LoomConfig.html":{},"interfaces/LoomTypes.html":{},"injectables/MappingsService.html":{},"directives/MarqueeComponent.html":{},"interfaces/MaterialTypes.html":{},"classes/Merge.html":{},"components/MixerViewComponent.html":{},"interfaces/NodeComponentProxy.html":{},"interfaces/NodeParams.html":{},"components/NoteComponent.html":{},"classes/OnlineStatus.html":{},"interfaces/OpClassifier.html":{},"interfaces/OpComponentProxy.html":{},"components/OpHelpModal.html":{},"interfaces/OpInput.html":{},"classes/OpSequencer.html":{},"components/OpSequencerComponent.html":{},"interfaces/OperationClassification.html":{},"interfaces/OperationParam.html":{},"interfaces/OperationProperties.html":{},"components/OpsComponent.html":{},"interfaces/PairedOp.html":{},"components/ParameterComponent.html":{},"interfaces/Pedal.html":{},"classes/PedalConfig.html":{},"interfaces/PedalEvent.html":{},"classes/PedalStatus.html":{},"injectables/PedalsService.html":{},"classes/Pipe.html":{},"components/PlayerComponent.html":{},"interfaces/PlayerOp.html":{},"injectables/PlayerService.html":{},"interfaces/PlayerState.html":{},"interfaces/PlayerState-1.html":{},"interfaces/Point.html":{},"classes/Render.html":{},"interfaces/SaveObj.html":{},"classes/Seed.html":{},"classes/Selection.html":{},"directives/SelectionComponent.html":{},"injectables/SequencerService.html":{},"classes/Shape.html":{},"classes/Shape-1.html":{},"classes/Shuttle.html":{},"components/SnackbarComponent.html":{},"interfaces/StatusMessage.html":{},"classes/System.html":{},"interfaces/TopologyDef.html":{},"interfaces/TreeNode.html":{},"interfaces/TreeNodeProxy.html":{},"interfaces/TreeOperation.html":{},"interfaces/Vertex.html":{},"interfaces/ViewModes.html":{},"injectables/ViewportService.html":{},"components/VirtualPedalsComponent.html":{},"interfaces/WeavingLog.html":{},"interfaces/WeavingPick.html":{},"interfaces/WeavingPick-1.html":{},"components/WeavingStateComponent.html":{},"interfaces/YarnPath.html":{},"properties.html":{}}}],["property",{"_index":2013,"title":{},"body":{"components/DraftdetailComponent.html":{}}}],["provide",{"_index":3029,"title":{},"body":{"classes/OpSequencer.html":{}}}],["provided",{"_index":3152,"title":{},"body":{"interfaces/OperationParam.html":{},"index.html":{}}}],["providedin",{"_index":448,"title":{},"body":{"interfaces/ChainIndex.html":{},"interfaces/DraftOperationClassification.html":{},"interfaces/Ink.html":{},"injectables/InkService.html":{},"injectables/LayersService.html":{},"interfaces/LoomConfig.html":{},"injectables/MappingsService.html":{},"interfaces/Pedal.html":{},"classes/PedalConfig.html":{},"classes/PedalStatus.html":{},"injectables/PedalsService.html":{},"injectables/PlayerService.html":{},"injectables/SequencerService.html":{},"injectables/ViewportService.html":{}}}],["provider",{"_index":4528,"title":{},"body":{"index.html":{}}}],["provider/ink.service",{"_index":1298,"title":{},"body":{"interfaces/DesignActions.html":{},"components/DraftdetailComponent.html":{}}}],["provider/layers.service",{"_index":1300,"title":{},"body":{"interfaces/DesignActions.html":{}}}],["provider/mappings.service",{"_index":1687,"title":{},"body":{"interfaces/DraftOperationClassification.html":{},"interfaces/LoomConfig.html":{},"classes/PedalConfig.html":{},"injectables/PlayerService.html":{},"components/WeavingStateComponent.html":{}}}],["provider/notes.service",{"_index":1639,"title":{},"body":{"interfaces/DraftNodeProxy.html":{},"interfaces/FileObj.html":{},"interfaces/FileSaver.html":{},"interfaces/Fileloader.html":{},"interfaces/LoadResponse.html":{},"interfaces/NodeComponentProxy.html":{},"interfaces/OpComponentProxy.html":{},"interfaces/SaveObj.html":{},"interfaces/StatusMessage.html":{},"interfaces/TreeNodeProxy.html":{}}}],["provider/operation.service",{"_index":1304,"title":{},"body":{"interfaces/DesignActions.html":{},"components/DraftdetailComponent.html":{},"components/InletComponent.html":{},"components/OpHelpModal.html":{},"components/OpsComponent.html":{}}}],["provider/pedals.service",{"_index":1690,"title":{},"body":{"interfaces/DraftOperationClassification.html":{},"interfaces/LoomConfig.html":{},"components/OpSequencerComponent.html":{},"classes/PedalConfig.html":{},"injectables/PlayerService.html":{},"components/VirtualPedalsComponent.html":{},"components/WeavingStateComponent.html":{}}}],["provider/sequencer.service",{"_index":1691,"title":{},"body":{"interfaces/DraftOperationClassification.html":{},"interfaces/LoomConfig.html":{},"components/OpSequencerComponent.html":{},"classes/PedalConfig.html":{},"injectables/PlayerService.html":{}}}],["provider/systems.service",{"_index":3802,"title":{},"body":{"classes/Render.html":{}}}],["provider/tree.service",{"_index":714,"title":{},"body":{"components/ConnectionComponent.html":{},"interfaces/DesignActions.html":{},"components/DraftdetailComponent.html":{},"components/InletComponent.html":{},"components/ParameterComponent.html":{}}}],["provider/viewport.service",{"_index":1308,"title":{},"body":{"interfaces/DesignActions.html":{},"components/MixerViewComponent.html":{},"components/NoteComponent.html":{}}}],["provides",{"_index":4517,"title":{},"body":{"index.html":{}}}],["public",{"_index":647,"title":{},"body":{"components/ConnectionComponent.html":{},"interfaces/DesignActions.html":{},"interfaces/DraftOperationClassification.html":{},"components/DraftdetailComponent.html":{},"components/InletComponent.html":{},"interfaces/LoomConfig.html":{},"injectables/MappingsService.html":{},"directives/MarqueeComponent.html":{},"components/MixerViewComponent.html":{},"components/OpHelpModal.html":{},"components/OpSequencerComponent.html":{},"components/OpsComponent.html":{},"components/ParameterComponent.html":{},"classes/PedalConfig.html":{},"components/PlayerComponent.html":{},"injectables/PlayerService.html":{},"directives/SelectionComponent.html":{},"components/SnackbarComponent.html":{},"components/VirtualPedalsComponent.html":{},"components/WeavingStateComponent.html":{}}}],["publishglobalutil",{"_index":2764,"title":{},"body":{"components/MixerViewComponent.html":{}}}],["pump",{"_index":3380,"title":{},"body":{"interfaces/Pedal.html":{},"classes/PedalStatus.html":{},"injectables/PedalsService.html":{}}}],["purposes",{"_index":4562,"title":{},"body":{"index.html":{}}}],["push",{"_index":959,"title":{},"body":{"classes/DBListener.html":{},"classes/DBListenerArray.html":{},"classes/DBNode.html":{},"classes/DBNodeArray.html":{},"classes/DBTwoWay.html":{},"classes/DBTwoWayArray.html":{},"classes/DBWriteBuffer.html":{},"classes/DBWriter.html":{},"classes/DBWriterArray.html":{},"interfaces/NodeMethods.html":{},"interfaces/NodeParams.html":{},"classes/OnlineStatus.html":{}}}],["push(this.parentnode.ref",{"_index":1119,"title":{},"body":{"classes/DBListener.html":{},"classes/DBListenerArray.html":{},"classes/DBNode.html":{},"classes/DBNodeArray.html":{},"classes/DBTwoWay.html":{},"classes/DBTwoWayArray.html":{},"classes/DBWriteBuffer.html":{},"classes/DBWriter.html":{},"classes/DBWriterArray.html":{},"interfaces/NodeMethods.html":{},"interfaces/NodeParams.html":{},"classes/OnlineStatus.html":{}}}],["pushing",{"_index":4460,"title":{},"body":{"index.html":{}}}],["pushnode",{"_index":1162,"title":{},"body":{"classes/DBListenerArray.html":{},"classes/DBNodeArray.html":{},"classes/DBTwoWayArray.html":{},"classes/DBWriterArray.html":{}}}],["pushnode(n",{"_index":1052,"title":{},"body":{"classes/DBListener.html":{},"classes/DBListenerArray.html":{},"classes/DBNode.html":{},"classes/DBNodeArray.html":{},"classes/DBTwoWay.html":{},"classes/DBTwoWayArray.html":{},"classes/DBWriteBuffer.html":{},"classes/DBWriter.html":{},"classes/DBWriterArray.html":{},"interfaces/NodeMethods.html":{},"interfaces/NodeParams.html":{},"classes/OnlineStatus.html":{}}}],["put",{"_index":2192,"title":{},"body":{"interfaces/DynamicOperation.html":{},"interfaces/OpInput.html":{},"interfaces/OperationClassification.html":{},"interfaces/TreeOperation.html":{}}}],["px",{"_index":3678,"title":{},"body":{"components/PlayerComponent.html":{}}}],["query",{"_index":955,"title":{},"body":{"classes/DBListener.html":{},"classes/DBListenerArray.html":{},"classes/DBNode.html":{},"classes/DBNodeArray.html":{},"classes/DBTwoWay.html":{},"classes/DBTwoWayArray.html":{},"classes/DBWriteBuffer.html":{},"classes/DBWriter.html":{},"classes/DBWriterArray.html":{},"interfaces/NodeMethods.html":{},"interfaces/NodeParams.html":{},"classes/OnlineStatus.html":{}}}],["question",{"_index":1505,"title":{},"body":{"interfaces/DesignActions.html":{}}}],["queue",{"_index":3012,"title":{},"body":{"classes/OpSequencer.html":{}}}],["r",{"_index":2616,"title":{},"body":{"injectables/MappingsService.html":{},"injectables/PedalsService.html":{}}}],["r.p_select_a",{"_index":2619,"title":{},"body":{"injectables/MappingsService.html":{}}}],["r.p_select_b",{"_index":2620,"title":{},"body":{"injectables/MappingsService.html":{}}}],["radius",{"_index":3116,"title":{},"body":{"components/OpSequencerComponent.html":{},"components/PlayerComponent.html":{},"components/WeavingStateComponent.html":{}}}],["random",{"_index":1819,"title":{},"body":{"interfaces/DraftOperationClassification.html":{},"interfaces/LoomConfig.html":{},"classes/PedalConfig.html":{},"components/PlayerComponent.html":{},"injectables/PlayerService.html":{}}}],["ratio",{"_index":2768,"title":{},"body":{"components/MixerViewComponent.html":{},"classes/Shape.html":{}}}],["re",{"_index":537,"title":{},"body":{"interfaces/ChainOp.html":{},"interfaces/PairedOp.html":{},"interfaces/PedalEvent.html":{},"interfaces/PlayerOp.html":{}}}],["read",{"_index":874,"title":{},"body":{"interfaces/Crossing.html":{},"components/DraftdetailComponent.html":{},"classes/Shape-1.html":{},"interfaces/Vertex.html":{},"interfaces/YarnPath.html":{},"index.html":{}}}],["readme",{"_index":4612,"title":{},"body":{"index.html":{}}}],["reads",{"_index":999,"title":{},"body":{"classes/DBListener.html":{},"classes/DBListenerArray.html":{},"classes/DBNode.html":{},"classes/DBNodeArray.html":{},"classes/DBTwoWay.html":{},"classes/DBTwoWayArray.html":{},"classes/DBWriteBuffer.html":{},"classes/DBWriter.html":{},"classes/DBWriterArray.html":{},"interfaces/NodeMethods.html":{},"interfaces/NodeParams.html":{},"classes/OnlineStatus.html":{}}}],["ready",{"_index":1044,"title":{},"body":{"classes/DBListener.html":{},"classes/DBListenerArray.html":{},"classes/DBNode.html":{},"classes/DBNodeArray.html":{},"classes/DBTwoWay.html":{},"classes/DBTwoWayArray.html":{},"classes/DBWriteBuffer.html":{},"classes/DBWriter.html":{},"classes/DBWriterArray.html":{},"interfaces/NodeMethods.html":{},"interfaces/NodeParams.html":{},"classes/OnlineStatus.html":{},"interfaces/Pedal.html":{},"classes/PedalStatus.html":{},"injectables/PedalsService.html":{},"index.html":{}}}],["readytoweave",{"_index":1873,"title":{},"body":{"interfaces/DraftOperationClassification.html":{},"interfaces/LoomConfig.html":{},"classes/OpSequencer.html":{},"interfaces/Pedal.html":{},"classes/PedalConfig.html":{},"classes/PedalStatus.html":{},"injectables/PedalsService.html":{},"injectables/PlayerService.html":{}}}],["really",{"_index":3076,"title":{},"body":{"classes/OpSequencer.html":{}}}],["recalcuated",{"_index":2274,"title":{},"body":{"interfaces/IOTuple.html":{},"interfaces/TreeNode.html":{}}}],["recalculate",{"_index":1380,"title":{},"body":{"interfaces/DesignActions.html":{}}}],["receipt",{"_index":1024,"title":{},"body":{"classes/DBListener.html":{},"classes/DBListenerArray.html":{},"classes/DBNode.html":{},"classes/DBNodeArray.html":{},"classes/DBTwoWay.html":{},"classes/DBTwoWayArray.html":{},"classes/DBWriteBuffer.html":{},"classes/DBWriter.html":{},"classes/DBWriterArray.html":{},"interfaces/NodeMethods.html":{},"interfaces/NodeParams.html":{},"classes/OnlineStatus.html":{}}}],["receive",{"_index":3732,"title":{},"body":{"interfaces/PlayerState.html":{},"interfaces/PlayerState-1.html":{},"interfaces/WeavingLog.html":{},"interfaces/WeavingPick.html":{},"interfaces/WeavingPick-1.html":{},"index.html":{}}}],["recognize",{"_index":2180,"title":{},"body":{"interfaces/DynamicOperation.html":{},"interfaces/OpInput.html":{},"interfaces/OperationClassification.html":{},"interfaces/TreeOperation.html":{}}}],["rectanble",{"_index":349,"title":{},"body":{"interfaces/Bounds.html":{},"interfaces/Point.html":{}}}],["rectangle",{"_index":340,"title":{},"body":{"interfaces/Bounds.html":{},"interfaces/Point.html":{}}}],["red",{"_index":3353,"title":{},"body":{"components/ParameterComponent.html":{}}}],["redraw",{"_index":1448,"title":{},"body":{"interfaces/DesignActions.html":{},"interfaces/DraftOperationClassification.html":{},"components/DraftdetailComponent.html":{},"interfaces/LoomConfig.html":{},"components/NoteComponent.html":{},"classes/PedalConfig.html":{},"injectables/PlayerService.html":{}}}],["redrawn",{"_index":2275,"title":{},"body":{"interfaces/IOTuple.html":{},"interfaces/TreeNode.html":{}}}],["reduce((a",{"_index":1889,"title":{},"body":{"interfaces/DraftOperationClassification.html":{},"interfaces/LoomConfig.html":{},"classes/PedalConfig.html":{},"injectables/PlayerService.html":{}}}],["ref",{"_index":954,"title":{},"body":{"classes/DBListener.html":{},"classes/DBListenerArray.html":{},"classes/DBNode.html":{},"classes/DBNodeArray.html":{},"classes/DBTwoWay.html":{},"classes/DBTwoWayArray.html":{},"classes/DBWriteBuffer.html":{},"classes/DBWriter.html":{},"classes/DBWriterArray.html":{},"interfaces/IOTuple.html":{},"interfaces/NodeMethods.html":{},"interfaces/NodeParams.html":{},"classes/OnlineStatus.html":{},"interfaces/TreeNode.html":{}}}],["ref(params.db",{"_index":978,"title":{},"body":{"classes/DBListener.html":{},"classes/DBListenerArray.html":{},"classes/DBNode.html":{},"classes/DBNodeArray.html":{},"classes/DBTwoWay.html":{},"classes/DBTwoWayArray.html":{},"classes/DBWriteBuffer.html":{},"classes/DBWriter.html":{},"classes/DBWriterArray.html":{},"interfaces/NodeMethods.html":{},"interfaces/NodeParams.html":{},"classes/OnlineStatus.html":{}}}],["refer",{"_index":1597,"title":{},"body":{"interfaces/DraftMap.html":{},"interfaces/Interlacement.html":{},"interfaces/InterlacementVal.html":{},"index.html":{}}}],["reference",{"_index":1276,"title":{},"body":{"interfaces/DensityUnits.html":{},"interfaces/DesignActions.html":{},"interfaces/DesignMode.html":{},"components/DraftdetailComponent.html":{},"interfaces/IOTuple.html":{},"interfaces/LoomTypes.html":{},"injectables/MappingsService.html":{},"interfaces/MaterialTypes.html":{},"interfaces/TreeNode.html":{},"interfaces/ViewModes.html":{},"injectables/ViewportService.html":{}}}],["references",{"_index":4227,"title":{},"body":{"injectables/ViewportService.html":{},"index.html":{}}}],["referencing",{"_index":3743,"title":{},"body":{"interfaces/Point.html":{},"injectables/ViewportService.html":{}}}],["referes",{"_index":2166,"title":{},"body":{"interfaces/DynamicOperation.html":{},"interfaces/OpInput.html":{},"interfaces/OperationClassification.html":{},"interfaces/TreeOperation.html":{}}}],["refers",{"_index":91,"title":{},"body":{"classes/AbstractOpFactory.html":{},"classes/BaseOp.html":{},"classes/Branch.html":{},"classes/Bus.html":{},"interfaces/Crossing.html":{},"interfaces/DraftNodeProxy.html":{},"interfaces/FileObj.html":{},"interfaces/FileSaver.html":{},"interfaces/Fileloader.html":{},"interfaces/LoadResponse.html":{},"classes/Merge.html":{},"interfaces/NodeComponentProxy.html":{},"interfaces/OpClassifier.html":{},"interfaces/OpComponentProxy.html":{},"interfaces/OperationProperties.html":{},"classes/Pipe.html":{},"interfaces/SaveObj.html":{},"classes/Seed.html":{},"interfaces/StatusMessage.html":{},"interfaces/TopologyDef.html":{},"interfaces/TreeNodeProxy.html":{},"interfaces/Vertex.html":{},"interfaces/YarnPath.html":{}}}],["reflect",{"_index":3977,"title":{},"body":{"classes/Shape.html":{}}}],["refresh",{"_index":536,"title":{},"body":{"interfaces/ChainOp.html":{},"interfaces/DraftOperationClassification.html":{},"interfaces/LoomConfig.html":{},"interfaces/PairedOp.html":{},"components/ParameterComponent.html":{},"classes/PedalConfig.html":{},"interfaces/PedalEvent.html":{},"interfaces/PlayerOp.html":{},"injectables/PlayerService.html":{}}}],["refs",{"_index":3658,"title":{},"body":{"components/PlayerComponent.html":{},"components/WeavingStateComponent.html":{}}}],["regex",{"_index":3171,"title":{},"body":{"interfaces/OperationParam.html":{},"classes/Params.html":{}}}],["regex101",{"_index":3174,"title":{},"body":{"interfaces/OperationParam.html":{},"classes/Params.html":{}}}],["regexp",{"_index":3180,"title":{},"body":{"interfaces/OperationParam.html":{},"components/ParameterComponent.html":{},"classes/Params.html":{},"miscellaneous/functions.html":{}}}],["regexp(namere",{"_index":3305,"title":{},"body":{"components/ParameterComponent.html":{}}}],["regexvalidator",{"_index":4411,"title":{},"body":{"miscellaneous/functions.html":{}}}],["regexvalidator((this.param).regex",{"_index":3322,"title":{},"body":{"components/ParameterComponent.html":{}}}],["regexvalidator(namere",{"_index":3303,"title":{},"body":{"components/ParameterComponent.html":{},"miscellaneous/functions.html":{}}}],["region",{"_index":3992,"title":{},"body":{"classes/Shape-1.html":{}}}],["register",{"_index":2589,"title":{},"body":{"injectables/MappingsService.html":{}}}],["regular",{"_index":3435,"title":{},"body":{"interfaces/Pedal.html":{},"classes/PedalStatus.html":{},"injectables/PedalsService.html":{}}}],["relaitonships",{"_index":4578,"title":{},"body":{"index.html":{}}}],["related",{"_index":1590,"title":{},"body":{"interfaces/DraftMap.html":{},"interfaces/DynamicOperation.html":{},"interfaces/IOTuple.html":{},"interfaces/Interlacement.html":{},"interfaces/InterlacementVal.html":{},"interfaces/OpInput.html":{},"interfaces/OperationClassification.html":{},"interfaces/TreeNode.html":{},"interfaces/TreeOperation.html":{},"miscellaneous/typealiases.html":{}}}],["relating",{"_index":4556,"title":{},"body":{"index.html":{}}}],["relationship",{"_index":871,"title":{},"body":{"interfaces/Crossing.html":{},"classes/System.html":{},"interfaces/Vertex.html":{},"interfaces/YarnPath.html":{},"miscellaneous/typealiases.html":{}}}],["relationships",{"_index":2287,"title":{},"body":{"interfaces/IOTuple.html":{},"interfaces/TreeNode.html":{},"index.html":{}}}],["relative",{"_index":890,"title":{},"body":{"interfaces/Crossing.html":{},"interfaces/DesignActions.html":{},"components/InletComponent.html":{},"components/MixerViewComponent.html":{},"components/ParameterComponent.html":{},"interfaces/Vertex.html":{},"interfaces/YarnPath.html":{}}}],["relative:point",{"_index":2910,"title":{},"body":{"components/NoteComponent.html":{}}}],["release",{"_index":4435,"title":{},"body":{"index.html":{}}}],["relevant",{"_index":4531,"title":{},"body":{"index.html":{}}}],["reload",{"_index":399,"title":{},"body":{"classes/Cell.html":{},"index.html":{}}}],["reloadcell",{"_index":374,"title":{},"body":{"classes/Cell.html":{}}}],["reloadcell(params",{"_index":396,"title":{},"body":{"classes/Cell.html":{}}}],["reloading",{"_index":1651,"title":{},"body":{"interfaces/DraftNodeProxy.html":{},"interfaces/FileObj.html":{},"interfaces/FileSaver.html":{},"interfaces/Fileloader.html":{},"interfaces/LoadResponse.html":{},"interfaces/NodeComponentProxy.html":{},"interfaces/OpComponentProxy.html":{},"interfaces/SaveObj.html":{},"interfaces/StatusMessage.html":{},"interfaces/TreeNodeProxy.html":{}}}],["remains",{"_index":1439,"title":{},"body":{"interfaces/DesignActions.html":{},"components/MixerViewComponent.html":{},"components/NoteComponent.html":{}}}],["remnode",{"_index":1103,"title":{},"body":{"classes/DBListener.html":{},"classes/DBListenerArray.html":{},"classes/DBNode.html":{},"classes/DBNodeArray.html":{},"classes/DBTwoWay.html":{},"classes/DBTwoWayArray.html":{},"classes/DBWriteBuffer.html":{},"classes/DBWriter.html":{},"classes/DBWriterArray.html":{},"interfaces/NodeMethods.html":{},"interfaces/NodeParams.html":{},"classes/OnlineStatus.html":{}}}],["remove",{"_index":960,"title":{},"body":{"classes/DBListener.html":{},"classes/DBListenerArray.html":{},"classes/DBNode.html":{},"classes/DBNodeArray.html":{},"classes/DBTwoWay.html":{},"classes/DBTwoWayArray.html":{},"classes/DBWriteBuffer.html":{},"classes/DBWriter.html":{},"classes/DBWriterArray.html":{},"components/DraftdetailComponent.html":{},"interfaces/NodeMethods.html":{},"interfaces/NodeParams.html":{},"classes/OnlineStatus.html":{}}}],["remove(lastnode.ref",{"_index":1137,"title":{},"body":{"classes/DBListener.html":{},"classes/DBListenerArray.html":{},"classes/DBNode.html":{},"classes/DBNodeArray.html":{},"classes/DBTwoWay.html":{},"classes/DBTwoWayArray.html":{},"classes/DBWriteBuffer.html":{},"classes/DBWriter.html":{},"classes/DBWriterArray.html":{},"interfaces/NodeMethods.html":{},"interfaces/NodeParams.html":{},"classes/OnlineStatus.html":{}}}],["remove(node.ref",{"_index":1104,"title":{},"body":{"classes/DBListener.html":{},"classes/DBListenerArray.html":{},"classes/DBNode.html":{},"classes/DBNodeArray.html":{},"classes/DBTwoWay.html":{},"classes/DBTwoWayArray.html":{},"classes/DBWriteBuffer.html":{},"classes/DBWriter.html":{},"classes/DBWriterArray.html":{},"interfaces/NodeMethods.html":{},"interfaces/NodeParams.html":{},"classes/OnlineStatus.html":{}}}],["removeconnectionto",{"_index":2394,"title":{},"body":{"components/InletComponent.html":{}}}],["removeconnectionto(sd_id",{"_index":2414,"title":{},"body":{"components/InletComponent.html":{}}}],["removed",{"_index":1079,"title":{},"body":{"classes/DBListener.html":{},"classes/DBListenerArray.html":{},"classes/DBNode.html":{},"classes/DBNodeArray.html":{},"classes/DBTwoWay.html":{},"classes/DBTwoWayArray.html":{},"classes/DBWriteBuffer.html":{},"classes/DBWriter.html":{},"classes/DBWriterArray.html":{},"interfaces/NodeMethods.html":{},"interfaces/NodeParams.html":{},"classes/OnlineStatus.html":{},"interfaces/Pedal.html":{},"classes/PedalStatus.html":{},"injectables/PedalsService.html":{}}}],["removeobj",{"_index":4186,"title":{},"body":{"injectables/ViewportService.html":{}}}],["removeobj(id",{"_index":4206,"title":{},"body":{"injectables/ViewportService.html":{}}}],["removeop",{"_index":493,"title":{},"body":{"interfaces/ChainIndex.html":{},"classes/OpSequencer.html":{},"injectables/SequencerService.html":{}}}],["removes",{"_index":2324,"title":{},"body":{"interfaces/Ink.html":{},"injectables/InkService.html":{}}}],["removing",{"_index":2323,"title":{},"body":{"interfaces/Ink.html":{},"injectables/InkService.html":{}}}],["rempedal",{"_index":1724,"title":{},"body":{"interfaces/DraftOperationClassification.html":{},"interfaces/LoomConfig.html":{},"classes/PedalConfig.html":{},"injectables/PlayerService.html":{}}}],["remvpedal",{"_index":3549,"title":{},"body":{"injectables/PedalsService.html":{}}}],["render",{"_index":1427,"title":{"classes/Render.html":{}},"body":{"interfaces/DesignActions.html":{},"components/NoteComponent.html":{},"components/PlayerComponent.html":{},"classes/Render.html":{}}}],["rendered",{"_index":2785,"title":{},"body":{"components/MixerViewComponent.html":{},"injectables/ViewportService.html":{}}}],["reopen",{"_index":1552,"title":{},"body":{"interfaces/DesignActions.html":{}}}],["repeating",{"_index":1603,"title":{},"body":{"interfaces/DraftMap.html":{},"interfaces/Interlacement.html":{},"interfaces/InterlacementVal.html":{}}}],["repo",{"_index":4452,"title":{},"body":{"index.html":{}}}],["repository",{"_index":4493,"title":{},"body":{"index.html":{}}}],["represeention",{"_index":4590,"title":{},"body":{"index.html":{}}}],["represenation",{"_index":4594,"title":{},"body":{"index.html":{}}}],["represent",{"_index":2770,"title":{},"body":{"components/MixerViewComponent.html":{},"classes/Shape.html":{},"index.html":{}}}],["representation",{"_index":879,"title":{},"body":{"interfaces/Crossing.html":{},"interfaces/Vertex.html":{},"interfaces/YarnPath.html":{},"index.html":{}}}],["representations",{"_index":4432,"title":{},"body":{"index.html":{}}}],["represented",{"_index":3996,"title":{},"body":{"classes/Shape-1.html":{}}}],["representing",{"_index":1142,"title":{},"body":{"classes/DBListener.html":{},"classes/DBListenerArray.html":{},"classes/DBNode.html":{},"classes/DBNodeArray.html":{},"classes/DBTwoWay.html":{},"classes/DBTwoWayArray.html":{},"classes/DBWriteBuffer.html":{},"classes/DBWriter.html":{},"classes/DBWriterArray.html":{},"interfaces/DesignActions.html":{},"interfaces/DraftNodeProxy.html":{},"interfaces/FileObj.html":{},"interfaces/FileSaver.html":{},"interfaces/Fileloader.html":{},"interfaces/LoadResponse.html":{},"interfaces/NodeComponentProxy.html":{},"interfaces/NodeMethods.html":{},"interfaces/NodeParams.html":{},"classes/OnlineStatus.html":{},"interfaces/OpComponentProxy.html":{},"interfaces/SaveObj.html":{},"classes/Shape.html":{},"interfaces/StatusMessage.html":{},"interfaces/TreeNodeProxy.html":{},"index.html":{},"miscellaneous/typealiases.html":{}}}],["represents",{"_index":1057,"title":{},"body":{"classes/DBListener.html":{},"classes/DBListenerArray.html":{},"classes/DBNode.html":{},"classes/DBNodeArray.html":{},"classes/DBTwoWay.html":{},"classes/DBTwoWayArray.html":{},"classes/DBWriteBuffer.html":{},"classes/DBWriter.html":{},"classes/DBWriterArray.html":{},"interfaces/DraftMap.html":{},"interfaces/DraftOperationClassification.html":{},"interfaces/Interlacement.html":{},"interfaces/InterlacementVal.html":{},"interfaces/LoomConfig.html":{},"interfaces/NodeMethods.html":{},"interfaces/NodeParams.html":{},"classes/OnlineStatus.html":{},"classes/PedalConfig.html":{},"injectables/PlayerService.html":{},"interfaces/PlayerState.html":{},"interfaces/PlayerState-1.html":{},"interfaces/WeavingLog.html":{},"interfaces/WeavingPick.html":{},"interfaces/WeavingPick-1.html":{}}}],["req",{"_index":132,"title":{},"body":{"classes/AbstractOpFactory.html":{},"classes/BaseOp.html":{},"classes/Branch.html":{},"classes/Bus.html":{},"interfaces/DynamicOperation.html":{},"classes/Merge.html":{},"interfaces/OpClassifier.html":{},"interfaces/OpInput.html":{},"interfaces/OperationClassification.html":{},"interfaces/OperationProperties.html":{},"classes/Pipe.html":{},"classes/Seed.html":{},"interfaces/TopologyDef.html":{},"interfaces/TreeOperation.html":{}}}],["requesting",{"_index":3432,"title":{},"body":{"interfaces/Pedal.html":{},"classes/PedalStatus.html":{},"injectables/PedalsService.html":{}}}],["require",{"_index":4442,"title":{},"body":{"index.html":{}}}],["required",{"_index":156,"title":{},"body":{"classes/AbstractOpFactory.html":{},"classes/BaseOp.html":{},"classes/Branch.html":{},"classes/Bus.html":{},"interfaces/DynamicOperation.html":{},"classes/Merge.html":{},"interfaces/OpClassifier.html":{},"interfaces/OpInput.html":{},"interfaces/OperationClassification.html":{},"interfaces/OperationParam.html":{},"interfaces/OperationProperties.html":{},"components/ParameterComponent.html":{},"classes/Params.html":{},"classes/Pipe.html":{},"classes/Seed.html":{},"interfaces/TopologyDef.html":{},"interfaces/TreeOperation.html":{},"index.html":{},"miscellaneous/typealiases.html":{}}}],["requirement",{"_index":166,"title":{},"body":{"classes/AbstractOpFactory.html":{},"classes/BaseOp.html":{},"classes/Branch.html":{},"classes/Bus.html":{},"classes/Merge.html":{},"interfaces/OpClassifier.html":{},"interfaces/OperationProperties.html":{},"classes/Pipe.html":{},"classes/Seed.html":{},"interfaces/TopologyDef.html":{},"miscellaneous/typealiases.html":{}}}],["requirements",{"_index":129,"title":{},"body":{"classes/AbstractOpFactory.html":{},"classes/BaseOp.html":{},"classes/Branch.html":{},"classes/Bus.html":{},"classes/Merge.html":{},"interfaces/OpClassifier.html":{},"interfaces/OperationParam.html":{},"interfaces/OperationProperties.html":{},"classes/Params.html":{},"classes/Pipe.html":{},"classes/Seed.html":{},"interfaces/TopologyDef.html":{},"index.html":{},"miscellaneous/typealiases.html":{}}}],["requires",{"_index":212,"title":{},"body":{"classes/AbstractOpFactory.html":{},"classes/BaseOp.html":{},"classes/Branch.html":{},"classes/Bus.html":{},"components/DraftdetailComponent.html":{},"classes/Merge.html":{},"interfaces/OpClassifier.html":{},"interfaces/OperationProperties.html":{},"classes/Pipe.html":{},"classes/Seed.html":{},"interfaces/TopologyDef.html":{}}}],["requiring",{"_index":4586,"title":{},"body":{"index.html":{}}}],["res",{"_index":527,"title":{},"body":{"interfaces/ChainOp.html":{},"interfaces/DraftOperationClassification.html":{},"interfaces/DynamicOperation.html":{},"interfaces/LoomConfig.html":{},"injectables/MappingsService.html":{},"interfaces/OpInput.html":{},"classes/OpSequencer.html":{},"interfaces/OperationClassification.html":{},"interfaces/PairedOp.html":{},"classes/PedalConfig.html":{},"interfaces/PedalEvent.html":{},"interfaces/PlayerOp.html":{},"injectables/PlayerService.html":{},"interfaces/TreeOperation.html":{}}}],["res.draft",{"_index":551,"title":{},"body":{"interfaces/ChainOp.html":{},"interfaces/DraftOperationClassification.html":{},"interfaces/LoomConfig.html":{},"interfaces/PairedOp.html":{},"classes/PedalConfig.html":{},"interfaces/PedalEvent.html":{},"interfaces/PlayerOp.html":{},"injectables/PlayerService.html":{}}}],["res.name",{"_index":601,"title":{},"body":{"interfaces/ChainOp.html":{},"interfaces/PairedOp.html":{},"interfaces/PedalEvent.html":{},"interfaces/PlayerOp.html":{}}}],["res.numpicks",{"_index":534,"title":{},"body":{"interfaces/ChainOp.html":{},"interfaces/PairedOp.html":{},"interfaces/PedalEvent.html":{},"interfaces/PlayerOp.html":{}}}],["res.ops",{"_index":603,"title":{},"body":{"interfaces/ChainOp.html":{},"interfaces/PairedOp.html":{},"interfaces/PedalEvent.html":{},"interfaces/PlayerOp.html":{}}}],["res.pedal",{"_index":532,"title":{},"body":{"interfaces/ChainOp.html":{},"interfaces/DraftOperationClassification.html":{},"interfaces/LoomConfig.html":{},"interfaces/PairedOp.html":{},"classes/PedalConfig.html":{},"interfaces/PedalEvent.html":{},"interfaces/PlayerOp.html":{},"injectables/PlayerService.html":{}}}],["res.perform",{"_index":604,"title":{},"body":{"interfaces/ChainOp.html":{},"interfaces/PairedOp.html":{},"interfaces/PedalEvent.html":{},"interfaces/PlayerOp.html":{}}}],["res.row",{"_index":529,"title":{},"body":{"interfaces/ChainOp.html":{},"interfaces/DraftOperationClassification.html":{},"interfaces/LoomConfig.html":{},"interfaces/PairedOp.html":{},"classes/PedalConfig.html":{},"interfaces/PedalEvent.html":{},"interfaces/PlayerOp.html":{},"injectables/PlayerService.html":{}}}],["res.weaving",{"_index":533,"title":{},"body":{"interfaces/ChainOp.html":{},"classes/OpSequencer.html":{},"interfaces/PairedOp.html":{},"interfaces/PedalEvent.html":{},"interfaces/PlayerOp.html":{}}}],["res[i",{"_index":2163,"title":{},"body":{"interfaces/DynamicOperation.html":{},"interfaces/OpInput.html":{},"interfaces/OperationClassification.html":{},"interfaces/TreeOperation.html":{}}}],["resample",{"_index":4002,"title":{},"body":{"classes/Shape-1.html":{}}}],["resample(rows",{"_index":4014,"title":{},"body":{"classes/Shape-1.html":{}}}],["rescale",{"_index":655,"title":{},"body":{"components/ConnectionComponent.html":{},"interfaces/DesignActions.html":{},"components/NoteComponent.html":{},"classes/Shape-1.html":{}}}],["rescale(scale",{"_index":676,"title":{},"body":{"components/ConnectionComponent.html":{}}}],["rescale(scale:number",{"_index":806,"title":{},"body":{"components/ConnectionComponent.html":{}}}],["rescaled",{"_index":1436,"title":{},"body":{"interfaces/DesignActions.html":{},"components/NoteComponent.html":{}}}],["rescaleforbitmap",{"_index":1479,"title":{},"body":{"interfaces/DesignActions.html":{}}}],["rescales",{"_index":678,"title":{},"body":{"components/ConnectionComponent.html":{}}}],["reserve",{"_index":3930,"title":{},"body":{"classes/Shape.html":{}}}],["reset",{"_index":2685,"title":{},"body":{"modules/MixerModule.html":{},"modules/PlayerModule.html":{},"overview.html":{}}}],["resizecontainer",{"_index":3621,"title":{},"body":{"components/PlayerComponent.html":{}}}],["resolvendxtopoint(ndx:interlacement",{"_index":1491,"title":{},"body":{"interfaces/DesignActions.html":{}}}],["resolvepointtondx(p:point",{"_index":1498,"title":{},"body":{"interfaces/DesignActions.html":{}}}],["resolvetovalue(p:point",{"_index":1508,"title":{},"body":{"interfaces/DesignActions.html":{}}}],["response",{"_index":357,"title":{},"body":{"interfaces/Bounds.html":{},"interfaces/ChainOp.html":{},"interfaces/PairedOp.html":{},"interfaces/PedalEvent.html":{},"interfaces/PlayerOp.html":{},"interfaces/Point.html":{}}}],["responsibility",{"_index":3364,"title":{},"body":{"interfaces/Pedal.html":{},"classes/PedalStatus.html":{},"injectables/PedalsService.html":{}}}],["responsible",{"_index":1147,"title":{},"body":{"classes/DBListener.html":{},"classes/DBListenerArray.html":{},"classes/DBNode.html":{},"classes/DBNodeArray.html":{},"classes/DBTwoWay.html":{},"classes/DBTwoWayArray.html":{},"classes/DBWriteBuffer.html":{},"classes/DBWriter.html":{},"classes/DBWriterArray.html":{},"interfaces/NodeMethods.html":{},"interfaces/NodeParams.html":{},"classes/OnlineStatus.html":{}}}],["restriction",{"_index":1704,"title":{},"body":{"interfaces/DraftOperationClassification.html":{},"interfaces/LoomConfig.html":{},"classes/PedalConfig.html":{},"injectables/PlayerService.html":{}}}],["resturns",{"_index":2170,"title":{},"body":{"interfaces/DynamicOperation.html":{},"interfaces/OpInput.html":{},"interfaces/OperationClassification.html":{},"interfaces/TreeOperation.html":{}}}],["result",{"_index":1563,"title":{},"body":{"interfaces/DesignActions.html":{}}}],["result.colshuttlemapping",{"_index":1582,"title":{},"body":{"interfaces/DesignActions.html":{}}}],["result.colsystemmapping",{"_index":1580,"title":{},"body":{"interfaces/DesignActions.html":{}}}],["result.drawdown",{"_index":1574,"title":{},"body":{"interfaces/DesignActions.html":{}}}],["result.gen_name",{"_index":1570,"title":{},"body":{"interfaces/DesignActions.html":{}}}],["result.id",{"_index":1568,"title":{},"body":{"interfaces/DesignActions.html":{}}}],["result.rowshuttlemapping",{"_index":1576,"title":{},"body":{"interfaces/DesignActions.html":{}}}],["result.rowsystemmapping",{"_index":1578,"title":{},"body":{"interfaces/DesignActions.html":{}}}],["result.ud_name",{"_index":1572,"title":{},"body":{"interfaces/DesignActions.html":{}}}],["results",{"_index":317,"title":{},"body":{"classes/AbstractOpFactory.html":{},"classes/BaseOp.html":{},"interfaces/Bounds.html":{},"classes/Branch.html":{},"classes/Bus.html":{},"classes/Cell.html":{},"interfaces/ChainIndex.html":{},"interfaces/ChainOp.html":{},"components/ConnectionComponent.html":{},"interfaces/Crossing.html":{},"classes/DBListener.html":{},"classes/DBListenerArray.html":{},"classes/DBNode.html":{},"classes/DBNodeArray.html":{},"classes/DBTwoWay.html":{},"classes/DBTwoWayArray.html":{},"classes/DBWriteBuffer.html":{},"classes/DBWriter.html":{},"classes/DBWriterArray.html":{},"interfaces/DensityUnits.html":{},"interfaces/DesignActions.html":{},"interfaces/DesignMode.html":{},"interfaces/DraftMap.html":{},"interfaces/DraftNodeProxy.html":{},"interfaces/DraftOperationClassification.html":{},"components/DraftdetailComponent.html":{},"interfaces/DynamicOperation.html":{},"interfaces/FileObj.html":{},"interfaces/FileSaver.html":{},"interfaces/Fileloader.html":{},"interfaces/IOTuple.html":{},"components/ImageComponent.html":{},"interfaces/Ink.html":{},"injectables/InkService.html":{},"components/InletComponent.html":{},"interfaces/Interlacement.html":{},"interfaces/InterlacementVal.html":{},"injectables/LayersService.html":{},"interfaces/LoadResponse.html":{},"interfaces/LoomConfig.html":{},"interfaces/LoomTypes.html":{},"injectables/MappingsService.html":{},"directives/MarqueeComponent.html":{},"interfaces/MaterialTypes.html":{},"classes/Merge.html":{},"modules/MixerModule.html":{},"components/MixerViewComponent.html":{},"interfaces/NodeComponentProxy.html":{},"interfaces/NodeMethods.html":{},"interfaces/NodeParams.html":{},"components/NoteComponent.html":{},"classes/OnlineStatus.html":{},"interfaces/OpClassifier.html":{},"interfaces/OpComponentProxy.html":{},"components/OpHelpModal.html":{},"interfaces/OpInput.html":{},"classes/OpSequencer.html":{},"components/OpSequencerComponent.html":{},"interfaces/OperationClassification.html":{},"interfaces/OperationParam.html":{},"interfaces/OperationProperties.html":{},"components/OpsComponent.html":{},"interfaces/PairedOp.html":{},"components/ParameterComponent.html":{},"classes/Params.html":{},"interfaces/Pedal.html":{},"classes/PedalConfig.html":{},"interfaces/PedalEvent.html":{},"classes/PedalStatus.html":{},"injectables/PedalsService.html":{},"classes/Pipe.html":{},"components/PlayerComponent.html":{},"modules/PlayerModule.html":{},"interfaces/PlayerOp.html":{},"injectables/PlayerService.html":{},"interfaces/PlayerState.html":{},"interfaces/PlayerState-1.html":{},"interfaces/Point.html":{},"classes/Render.html":{},"interfaces/SaveObj.html":{},"classes/Seed.html":{},"classes/Selection.html":{},"directives/SelectionComponent.html":{},"injectables/SequencerService.html":{},"classes/Shape.html":{},"classes/Shape-1.html":{},"classes/Shuttle.html":{},"components/SnackbarComponent.html":{},"interfaces/StatusMessage.html":{},"classes/System.html":{},"interfaces/TopologyDef.html":{},"interfaces/TreeNode.html":{},"interfaces/TreeNodeProxy.html":{},"interfaces/TreeOperation.html":{},"interfaces/Vertex.html":{},"interfaces/ViewModes.html":{},"injectables/ViewportService.html":{},"components/VirtualPedalsComponent.html":{},"interfaces/WeavingLog.html":{},"interfaces/WeavingPick.html":{},"interfaces/WeavingPick-1.html":{},"components/WeavingStateComponent.html":{},"interfaces/YarnPath.html":{},"dependencies.html":{},"miscellaneous/functions.html":{},"index.html":{},"modules.html":{},"overview.html":{},"properties.html":{},"miscellaneous/typealiases.html":{}}}],["retreive",{"_index":2341,"title":{},"body":{"interfaces/Ink.html":{},"injectables/InkService.html":{}}}],["return",{"_index":265,"title":{},"body":{"classes/AbstractOpFactory.html":{},"classes/BaseOp.html":{},"classes/Branch.html":{},"classes/Bus.html":{},"classes/Cell.html":{},"interfaces/ChainIndex.html":{},"interfaces/ChainOp.html":{},"components/ConnectionComponent.html":{},"classes/DBListener.html":{},"classes/DBListenerArray.html":{},"classes/DBNode.html":{},"classes/DBNodeArray.html":{},"classes/DBTwoWay.html":{},"classes/DBTwoWayArray.html":{},"classes/DBWriteBuffer.html":{},"classes/DBWriter.html":{},"classes/DBWriterArray.html":{},"interfaces/DesignActions.html":{},"interfaces/DraftOperationClassification.html":{},"components/DraftdetailComponent.html":{},"interfaces/DynamicOperation.html":{},"interfaces/Ink.html":{},"injectables/InkService.html":{},"components/InletComponent.html":{},"injectables/LayersService.html":{},"interfaces/LoomConfig.html":{},"injectables/MappingsService.html":{},"directives/MarqueeComponent.html":{},"classes/Merge.html":{},"components/MixerViewComponent.html":{},"interfaces/NodeMethods.html":{},"interfaces/NodeParams.html":{},"components/NoteComponent.html":{},"classes/OnlineStatus.html":{},"interfaces/OpClassifier.html":{},"interfaces/OpInput.html":{},"classes/OpSequencer.html":{},"interfaces/OperationClassification.html":{},"interfaces/OperationParam.html":{},"interfaces/OperationProperties.html":{},"components/OpsComponent.html":{},"interfaces/PairedOp.html":{},"components/ParameterComponent.html":{},"classes/Params.html":{},"interfaces/Pedal.html":{},"classes/PedalConfig.html":{},"interfaces/PedalEvent.html":{},"classes/PedalStatus.html":{},"injectables/PedalsService.html":{},"classes/Pipe.html":{},"components/PlayerComponent.html":{},"interfaces/PlayerOp.html":{},"injectables/PlayerService.html":{},"interfaces/PlayerState.html":{},"interfaces/PlayerState-1.html":{},"classes/Render.html":{},"classes/Seed.html":{},"classes/Selection.html":{},"directives/SelectionComponent.html":{},"injectables/SequencerService.html":{},"classes/Shape.html":{},"classes/Shape-1.html":{},"classes/Shuttle.html":{},"classes/System.html":{},"interfaces/TopologyDef.html":{},"interfaces/TreeOperation.html":{},"injectables/ViewportService.html":{},"interfaces/WeavingLog.html":{},"interfaces/WeavingPick.html":{},"interfaces/WeavingPick-1.html":{},"components/WeavingStateComponent.html":{},"miscellaneous/functions.html":{}}}],["return(name",{"_index":2364,"title":{},"body":{"interfaces/Ink.html":{},"injectables/InkService.html":{}}}],["returned",{"_index":947,"title":{},"body":{"classes/DBListener.html":{},"classes/DBListenerArray.html":{},"classes/DBNode.html":{},"classes/DBNodeArray.html":{},"classes/DBTwoWay.html":{},"classes/DBTwoWayArray.html":{},"classes/DBWriteBuffer.html":{},"classes/DBWriter.html":{},"classes/DBWriterArray.html":{},"interfaces/NodeMethods.html":{},"interfaces/NodeParams.html":{},"classes/OnlineStatus.html":{},"classes/System.html":{}}}],["returns",{"_index":24,"title":{},"body":{"classes/AbstractOpFactory.html":{},"classes/BaseOp.html":{},"classes/Cell.html":{},"components/ConnectionComponent.html":{},"classes/DBListener.html":{},"classes/DBListenerArray.html":{},"classes/DBNode.html":{},"classes/DBNodeArray.html":{},"classes/DBTwoWay.html":{},"classes/DBTwoWayArray.html":{},"classes/DBWriteBuffer.html":{},"classes/DBWriter.html":{},"classes/DBWriterArray.html":{},"interfaces/DesignActions.html":{},"components/DraftdetailComponent.html":{},"components/ImageComponent.html":{},"interfaces/Ink.html":{},"injectables/InkService.html":{},"components/InletComponent.html":{},"injectables/LayersService.html":{},"injectables/MappingsService.html":{},"directives/MarqueeComponent.html":{},"components/MixerViewComponent.html":{},"interfaces/NodeMethods.html":{},"components/NoteComponent.html":{},"classes/OnlineStatus.html":{},"components/OpHelpModal.html":{},"classes/OpSequencer.html":{},"components/OpSequencerComponent.html":{},"interfaces/OperationParam.html":{},"components/OpsComponent.html":{},"components/ParameterComponent.html":{},"classes/Params.html":{},"classes/PedalConfig.html":{},"classes/PedalStatus.html":{},"injectables/PedalsService.html":{},"components/PlayerComponent.html":{},"injectables/PlayerService.html":{},"classes/Render.html":{},"classes/Selection.html":{},"directives/SelectionComponent.html":{},"injectables/SequencerService.html":{},"classes/Shape.html":{},"classes/Shape-1.html":{},"classes/Shuttle.html":{},"components/SnackbarComponent.html":{},"classes/System.html":{},"injectables/ViewportService.html":{},"components/VirtualPedalsComponent.html":{},"components/WeavingStateComponent.html":{},"miscellaneous/functions.html":{}}}],["reveals",{"_index":2328,"title":{},"body":{"interfaces/Ink.html":{},"injectables/InkService.html":{}}}],["reverse",{"_index":541,"title":{},"body":{"interfaces/ChainOp.html":{},"interfaces/DraftOperationClassification.html":{},"interfaces/LoomConfig.html":{},"interfaces/PairedOp.html":{},"classes/PedalConfig.html":{},"interfaces/PedalEvent.html":{},"interfaces/PlayerOp.html":{},"injectables/PlayerService.html":{}}}],["reversing",{"_index":2306,"title":{},"body":{"interfaces/Ink.html":{},"injectables/InkService.html":{}}}],["revert",{"_index":4285,"title":{},"body":{"components/VirtualPedalsComponent.html":{}}}],["rgb(150",{"_index":4339,"title":{},"body":{"components/WeavingStateComponent.html":{}}}],["rgb(214",{"_index":4342,"title":{},"body":{"components/WeavingStateComponent.html":{}}}],["rgb(255",{"_index":3349,"title":{},"body":{"components/ParameterComponent.html":{}}}],["rgb(58",{"_index":4336,"title":{},"body":{"components/WeavingStateComponent.html":{}}}],["rgba(255",{"_index":3121,"title":{},"body":{"components/OpSequencerComponent.html":{},"components/PlayerComponent.html":{},"components/WeavingStateComponent.html":{}}}],["rib",{"_index":1817,"title":{},"body":{"interfaces/DraftOperationClassification.html":{},"interfaces/LoomConfig.html":{},"classes/PedalConfig.html":{},"injectables/PlayerService.html":{}}}],["right",{"_index":2494,"title":{},"body":{"components/InletComponent.html":{},"components/OpSequencerComponent.html":{},"components/PlayerComponent.html":{},"classes/Shuttle.html":{},"components/WeavingStateComponent.html":{},"miscellaneous/typealiases.html":{}}}],["role",{"_index":3043,"title":{},"body":{"classes/OpSequencer.html":{},"injectables/SequencerService.html":{}}}],["root",{"_index":449,"title":{},"body":{"interfaces/ChainIndex.html":{},"classes/DBListener.html":{},"classes/DBListenerArray.html":{},"classes/DBNode.html":{},"classes/DBNodeArray.html":{},"classes/DBTwoWay.html":{},"classes/DBTwoWayArray.html":{},"classes/DBWriteBuffer.html":{},"classes/DBWriter.html":{},"classes/DBWriterArray.html":{},"interfaces/DraftOperationClassification.html":{},"interfaces/Ink.html":{},"injectables/InkService.html":{},"injectables/LayersService.html":{},"interfaces/LoomConfig.html":{},"injectables/MappingsService.html":{},"interfaces/NodeMethods.html":{},"interfaces/NodeParams.html":{},"classes/OnlineStatus.html":{},"interfaces/Pedal.html":{},"classes/PedalConfig.html":{},"classes/PedalStatus.html":{},"injectables/PedalsService.html":{},"injectables/PlayerService.html":{},"injectables/SequencerService.html":{},"injectables/ViewportService.html":{},"index.html":{}}}],["rotate",{"_index":545,"title":{},"body":{"interfaces/ChainOp.html":{},"interfaces/DraftOperationClassification.html":{},"interfaces/LoomConfig.html":{},"interfaces/PairedOp.html":{},"classes/PedalConfig.html":{},"interfaces/PedalEvent.html":{},"interfaces/PlayerOp.html":{},"injectables/PlayerService.html":{}}}],["roul",{"_index":2626,"title":{},"body":{"injectables/MappingsService.html":{}}}],["roul.p_select_b",{"_index":2629,"title":{},"body":{"injectables/MappingsService.html":{}}}],["roulette",{"_index":2617,"title":{},"body":{"injectables/MappingsService.html":{}}}],["row",{"_index":350,"title":{},"body":{"interfaces/Bounds.html":{},"interfaces/ChainOp.html":{},"interfaces/Crossing.html":{},"interfaces/DesignActions.html":{},"interfaces/DraftOperationClassification.html":{},"components/DraftdetailComponent.html":{},"interfaces/LoomConfig.html":{},"components/MixerViewComponent.html":{},"components/NoteComponent.html":{},"classes/OpSequencer.html":{},"components/OpSequencerComponent.html":{},"components/OpsComponent.html":{},"interfaces/PairedOp.html":{},"components/ParameterComponent.html":{},"interfaces/Pedal.html":{},"classes/PedalConfig.html":{},"interfaces/PedalEvent.html":{},"classes/PedalStatus.html":{},"injectables/PedalsService.html":{},"components/PlayerComponent.html":{},"interfaces/PlayerOp.html":{},"injectables/PlayerService.html":{},"interfaces/PlayerState.html":{},"interfaces/PlayerState-1.html":{},"interfaces/Point.html":{},"classes/Render.html":{},"classes/Shape.html":{},"components/SnackbarComponent.html":{},"interfaces/Vertex.html":{},"components/VirtualPedalsComponent.html":{},"interfaces/WeavingLog.html":{},"interfaces/WeavingPick.html":{},"interfaces/WeavingPick-1.html":{},"components/WeavingStateComponent.html":{},"interfaces/YarnPath.html":{}}}],["row/column",{"_index":1487,"title":{},"body":{"interfaces/DesignActions.html":{}}}],["row/weft",{"_index":1614,"title":{},"body":{"interfaces/DraftMap.html":{},"interfaces/Interlacement.html":{},"interfaces/InterlacementVal.html":{}}}],["rowdata",{"_index":3737,"title":{},"body":{"interfaces/PlayerState.html":{},"interfaces/PlayerState-1.html":{},"interfaces/WeavingLog.html":{},"interfaces/WeavingPick.html":{},"interfaces/WeavingPick-1.html":{}}}],["rows",{"_index":902,"title":{},"body":{"interfaces/Crossing.html":{},"interfaces/DraftMap.html":{},"interfaces/Interlacement.html":{},"interfaces/InterlacementVal.html":{},"interfaces/PlayerState.html":{},"interfaces/PlayerState-1.html":{},"classes/Shape.html":{},"classes/Shape-1.html":{},"classes/System.html":{},"interfaces/Vertex.html":{},"interfaces/WeavingLog.html":{},"interfaces/WeavingPick.html":{},"interfaces/WeavingPick-1.html":{},"interfaces/YarnPath.html":{},"miscellaneous/typealiases.html":{}}}],["rowshuttlemapping",{"_index":1575,"title":{},"body":{"interfaces/DesignActions.html":{},"interfaces/DraftMap.html":{},"interfaces/Interlacement.html":{},"interfaces/InterlacementVal.html":{}}}],["rowsystemmapping",{"_index":1577,"title":{},"body":{"interfaces/DesignActions.html":{},"interfaces/DraftMap.html":{},"interfaces/Interlacement.html":{},"interfaces/InterlacementVal.html":{}}}],["rules",{"_index":2291,"title":{},"body":{"interfaces/IOTuple.html":{},"interfaces/TreeNode.html":{}}}],["run",{"_index":4498,"title":{},"body":{"index.html":{}}}],["running",{"_index":3378,"title":{},"body":{"interfaces/Pedal.html":{},"classes/PedalStatus.html":{},"injectables/PedalsService.html":{},"interfaces/PlayerState.html":{},"interfaces/PlayerState-1.html":{},"interfaces/WeavingLog.html":{},"interfaces/WeavingPick.html":{},"interfaces/WeavingPick-1.html":{}}}],["rxfire",{"_index":4382,"title":{},"body":{"dependencies.html":{}}}],["rxjs",{"_index":2010,"title":{},"body":{"components/DraftdetailComponent.html":{},"components/OpsComponent.html":{},"dependencies.html":{}}}],["rxjs/operators",{"_index":3239,"title":{},"body":{"components/OpsComponent.html":{}}}],["same",{"_index":904,"title":{},"body":{"interfaces/Crossing.html":{},"interfaces/DesignActions.html":{},"injectables/MappingsService.html":{},"components/NoteComponent.html":{},"interfaces/Vertex.html":{},"interfaces/YarnPath.html":{},"index.html":{},"miscellaneous/typealiases.html":{}}}],["satin",{"_index":1811,"title":{},"body":{"interfaces/DraftOperationClassification.html":{},"interfaces/LoomConfig.html":{},"classes/PedalConfig.html":{},"injectables/PlayerService.html":{}}}],["save",{"_index":2865,"title":{},"body":{"components/NoteComponent.html":{},"index.html":{}}}],["saveasada",{"_index":1533,"title":{},"body":{"interfaces/DesignActions.html":{}}}],["saveasprint",{"_index":1544,"title":{},"body":{"interfaces/DesignActions.html":{}}}],["saveaswif",{"_index":1540,"title":{},"body":{"interfaces/DesignActions.html":{}}}],["saved",{"_index":1661,"title":{},"body":{"interfaces/DraftNodeProxy.html":{},"components/DraftdetailComponent.html":{},"interfaces/FileObj.html":{},"interfaces/FileSaver.html":{},"interfaces/Fileloader.html":{},"interfaces/LoadResponse.html":{},"interfaces/NodeComponentProxy.html":{},"interfaces/OpComponentProxy.html":{},"interfaces/SaveObj.html":{},"interfaces/StatusMessage.html":{},"interfaces/TreeNodeProxy.html":{}}}],["savenotetext",{"_index":2867,"title":{},"body":{"components/NoteComponent.html":{}}}],["saveobj",{"_index":1662,"title":{"interfaces/SaveObj.html":{}},"body":{"interfaces/DraftNodeProxy.html":{},"interfaces/FileObj.html":{},"interfaces/FileSaver.html":{},"interfaces/Fileloader.html":{},"interfaces/LoadResponse.html":{},"interfaces/NodeComponentProxy.html":{},"interfaces/OpComponentProxy.html":{},"interfaces/SaveObj.html":{},"interfaces/StatusMessage.html":{},"interfaces/TreeNodeProxy.html":{}}}],["saving",{"_index":1642,"title":{},"body":{"interfaces/DraftNodeProxy.html":{},"interfaces/FileObj.html":{},"interfaces/FileSaver.html":{},"interfaces/Fileloader.html":{},"interfaces/LoadResponse.html":{},"interfaces/NodeComponentProxy.html":{},"interfaces/OpComponentProxy.html":{},"interfaces/SaveObj.html":{},"interfaces/StatusMessage.html":{},"interfaces/TreeNodeProxy.html":{}}}],["scaffolding",{"_index":4533,"title":{},"body":{"index.html":{}}}],["scale",{"_index":659,"title":{},"body":{"components/ConnectionComponent.html":{},"interfaces/DesignActions.html":{},"interfaces/DraftNodeProxy.html":{},"interfaces/FileObj.html":{},"interfaces/FileSaver.html":{},"interfaces/Fileloader.html":{},"interfaces/LoadResponse.html":{},"directives/MarqueeComponent.html":{},"components/MixerViewComponent.html":{},"interfaces/NodeComponentProxy.html":{},"components/NoteComponent.html":{},"interfaces/OpComponentProxy.html":{},"interfaces/SaveObj.html":{},"directives/SelectionComponent.html":{},"classes/Shape-1.html":{},"components/SnackbarComponent.html":{},"interfaces/StatusMessage.html":{},"interfaces/TreeNodeProxy.html":{}}}],["scale(value",{"_index":1327,"title":{},"body":{"interfaces/DesignActions.html":{},"components/NoteComponent.html":{}}}],["scale*2+\"px",{"_index":2927,"title":{},"body":{"components/NoteComponent.html":{}}}],["scale:number",{"_index":4019,"title":{},"body":{"classes/Shape-1.html":{}}}],["schematics",{"_index":4600,"title":{},"body":{"index.html":{}}}],["screen",{"_index":341,"title":{},"body":{"interfaces/Bounds.html":{},"interfaces/Crossing.html":{},"interfaces/DesignActions.html":{},"interfaces/DraftMap.html":{},"interfaces/DraftNodeProxy.html":{},"interfaces/DynamicOperation.html":{},"interfaces/FileObj.html":{},"interfaces/FileSaver.html":{},"interfaces/Fileloader.html":{},"interfaces/Interlacement.html":{},"interfaces/InterlacementVal.html":{},"injectables/LayersService.html":{},"interfaces/LoadResponse.html":{},"interfaces/NodeComponentProxy.html":{},"interfaces/OpComponentProxy.html":{},"interfaces/OpInput.html":{},"interfaces/OperationClassification.html":{},"interfaces/Point.html":{},"interfaces/SaveObj.html":{},"interfaces/StatusMessage.html":{},"interfaces/TreeNodeProxy.html":{},"interfaces/TreeOperation.html":{},"interfaces/Vertex.html":{},"injectables/ViewportService.html":{},"components/WeavingStateComponent.html":{},"interfaces/YarnPath.html":{},"index.html":{}}}],["screenlayout",{"_index":1640,"title":{},"body":{"interfaces/DraftNodeProxy.html":{},"interfaces/FileObj.html":{},"interfaces/FileSaver.html":{},"interfaces/Fileloader.html":{},"interfaces/LoadResponse.html":{},"interfaces/NodeComponentProxy.html":{},"interfaces/OpComponentProxy.html":{},"interfaces/SaveObj.html":{},"interfaces/StatusMessage.html":{},"interfaces/TreeNodeProxy.html":{}}}],["scripts",{"_index":4489,"title":{},"body":{"index.html":{}}}],["scroll",{"_index":1961,"title":{},"body":{"components/DraftdetailComponent.html":{},"components/WeavingStateComponent.html":{}}}],["scrollable",{"_index":4225,"title":{},"body":{"injectables/ViewportService.html":{}}}],["scrolldispatcher",{"_index":1962,"title":{},"body":{"components/DraftdetailComponent.html":{}}}],["scrolled",{"_index":2017,"title":{},"body":{"components/DraftdetailComponent.html":{},"injectables/ViewportService.html":{}}}],["scrollingsubscription",{"_index":1949,"title":{},"body":{"components/DraftdetailComponent.html":{}}}],["scrollleft",{"_index":2035,"title":{},"body":{"components/DraftdetailComponent.html":{}}}],["scrolltop",{"_index":2033,"title":{},"body":{"components/DraftdetailComponent.html":{}}}],["sd",{"_index":2460,"title":{},"body":{"components/InletComponent.html":{}}}],["sd_id",{"_index":2416,"title":{},"body":{"components/InletComponent.html":{}}}],["search",{"_index":3263,"title":{},"body":{"components/OpsComponent.html":{}}}],["second",{"_index":1703,"title":{},"body":{"interfaces/DraftOperationClassification.html":{},"interfaces/LoomConfig.html":{},"components/OpSequencerComponent.html":{},"classes/PedalConfig.html":{},"components/PlayerComponent.html":{},"injectables/PlayerService.html":{},"index.html":{}}}],["section",{"_index":4534,"title":{},"body":{"index.html":{}}}],["see",{"_index":4507,"title":{},"body":{"index.html":{}}}],["seed",{"_index":100,"title":{"classes/Seed.html":{}},"body":{"classes/AbstractOpFactory.html":{},"classes/BaseOp.html":{},"classes/Branch.html":{},"classes/Bus.html":{},"interfaces/ChainOp.html":{},"interfaces/DraftNodeProxy.html":{},"interfaces/DraftOperationClassification.html":{},"interfaces/DynamicOperation.html":{},"interfaces/FileObj.html":{},"interfaces/FileSaver.html":{},"interfaces/Fileloader.html":{},"interfaces/LoadResponse.html":{},"interfaces/LoomConfig.html":{},"classes/Merge.html":{},"interfaces/NodeComponentProxy.html":{},"interfaces/OpClassifier.html":{},"interfaces/OpComponentProxy.html":{},"interfaces/OpInput.html":{},"interfaces/OperationClassification.html":{},"interfaces/OperationProperties.html":{},"interfaces/PairedOp.html":{},"classes/PedalConfig.html":{},"interfaces/PedalEvent.html":{},"classes/Pipe.html":{},"interfaces/PlayerOp.html":{},"injectables/PlayerService.html":{},"interfaces/SaveObj.html":{},"classes/Seed.html":{},"interfaces/StatusMessage.html":{},"interfaces/TopologyDef.html":{},"interfaces/TreeNodeProxy.html":{},"interfaces/TreeOperation.html":{}}}],["seedop",{"_index":556,"title":{},"body":{"interfaces/ChainOp.html":{},"interfaces/DynamicOperation.html":{},"interfaces/OpInput.html":{},"interfaces/OperationClassification.html":{},"interfaces/PairedOp.html":{},"interfaces/PedalEvent.html":{},"interfaces/PlayerOp.html":{},"interfaces/TreeOperation.html":{}}}],["seedop.perform(input_params",{"_index":557,"title":{},"body":{"interfaces/ChainOp.html":{},"interfaces/PairedOp.html":{},"interfaces/PedalEvent.html":{},"interfaces/PlayerOp.html":{}}}],["seedop.perform(op_inputs[0].params",{"_index":2202,"title":{},"body":{"interfaces/DynamicOperation.html":{},"interfaces/OpInput.html":{},"interfaces/OperationClassification.html":{},"interfaces/TreeOperation.html":{}}}],["seedoperation",{"_index":309,"title":{},"body":{"classes/AbstractOpFactory.html":{},"classes/BaseOp.html":{},"classes/Branch.html":{},"classes/Bus.html":{},"classes/Merge.html":{},"interfaces/OpClassifier.html":{},"interfaces/OperationProperties.html":{},"classes/Pipe.html":{},"classes/Seed.html":{},"interfaces/TopologyDef.html":{}}}],["sees",{"_index":4596,"title":{},"body":{"index.html":{}}}],["sel",{"_index":470,"title":{},"body":{"interfaces/ChainIndex.html":{},"classes/OpSequencer.html":{},"injectables/SequencerService.html":{}}}],["sel_back",{"_index":2639,"title":{},"body":{"injectables/MappingsService.html":{},"classes/OpSequencer.html":{},"miscellaneous/functions.html":{}}}],["sel_fwd",{"_index":2638,"title":{},"body":{"injectables/MappingsService.html":{},"classes/OpSequencer.html":{},"miscellaneous/functions.html":{}}}],["select",{"_index":2370,"title":{},"body":{"injectables/InkService.html":{},"components/InletComponent.html":{},"interfaces/LoomTypes.html":{},"classes/OpSequencer.html":{},"interfaces/OperationParam.html":{},"components/ParameterComponent.html":{},"classes/Params.html":{},"classes/Render.html":{},"miscellaneous/typealiases.html":{}}}],["select(name",{"_index":2355,"title":{},"body":{"interfaces/Ink.html":{},"injectables/InkService.html":{}}}],["select_pedal_a",{"_index":465,"title":{},"body":{"interfaces/ChainIndex.html":{},"injectables/SequencerService.html":{}}}],["select_pedal_b",{"_index":466,"title":{},"body":{"interfaces/ChainIndex.html":{},"injectables/SequencerService.html":{}}}],["select_x",{"_index":3833,"title":{},"body":{"classes/Render.html":{}}}],["select_y",{"_index":3835,"title":{},"body":{"classes/Render.html":{}}}],["selected",{"_index":1284,"title":{},"body":{"interfaces/DensityUnits.html":{},"interfaces/DesignMode.html":{},"components/DraftdetailComponent.html":{},"interfaces/Ink.html":{},"injectables/InkService.html":{},"interfaces/LoomTypes.html":{},"interfaces/MaterialTypes.html":{},"components/OpSequencerComponent.html":{},"interfaces/ViewModes.html":{}}}],["selectedhasmask",{"_index":2371,"title":{},"body":{"injectables/InkService.html":{}}}],["selectedhasmask():boolean",{"_index":2337,"title":{},"body":{"interfaces/Ink.html":{},"injectables/InkService.html":{}}}],["selectedvalue",{"_index":2388,"title":{},"body":{"components/InletComponent.html":{}}}],["selecting",{"_index":452,"title":{},"body":{"interfaces/ChainIndex.html":{},"classes/OpSequencer.html":{},"injectables/SequencerService.html":{}}}],["selecting_connection",{"_index":1362,"title":{},"body":{"interfaces/DesignActions.html":{}}}],["selection",{"_index":865,"title":{"classes/Selection.html":{}},"body":{"components/ConnectionComponent.html":{},"components/DraftdetailComponent.html":{},"components/ImageComponent.html":{},"interfaces/Ink.html":{},"injectables/InkService.html":{},"components/InletComponent.html":{},"directives/MarqueeComponent.html":{},"components/MixerViewComponent.html":{},"components/NoteComponent.html":{},"components/OpHelpModal.html":{},"classes/OpSequencer.html":{},"components/OpSequencerComponent.html":{},"components/OpsComponent.html":{},"components/ParameterComponent.html":{},"components/PlayerComponent.html":{},"classes/Selection.html":{},"directives/SelectionComponent.html":{},"components/SnackbarComponent.html":{},"components/VirtualPedalsComponent.html":{},"components/WeavingStateComponent.html":{}}}],["selectioncomponent",{"_index":864,"title":{"directives/SelectionComponent.html":{}},"body":{"components/ConnectionComponent.html":{},"components/DraftdetailComponent.html":{},"components/ImageComponent.html":{},"components/InletComponent.html":{},"components/MixerViewComponent.html":{},"components/NoteComponent.html":{},"components/OpHelpModal.html":{},"components/OpSequencerComponent.html":{},"components/OpsComponent.html":{},"components/ParameterComponent.html":{},"components/PlayerComponent.html":{},"directives/SelectionComponent.html":{},"components/SnackbarComponent.html":{},"components/VirtualPedalsComponent.html":{},"components/WeavingStateComponent.html":{}}}],["selections",{"_index":2351,"title":{},"body":{"interfaces/Ink.html":{},"injectables/InkService.html":{}}}],["selectlist",{"_index":3165,"title":{},"body":{"interfaces/OperationParam.html":{},"classes/Params.html":{}}}],["selector",{"_index":632,"title":{},"body":{"components/ConnectionComponent.html":{},"interfaces/DesignActions.html":{},"components/DraftdetailComponent.html":{},"components/ImageComponent.html":{},"components/InletComponent.html":{},"directives/MarqueeComponent.html":{},"components/MixerViewComponent.html":{},"components/NoteComponent.html":{},"components/OpHelpModal.html":{},"components/OpSequencerComponent.html":{},"components/OpsComponent.html":{},"components/ParameterComponent.html":{},"components/PlayerComponent.html":{},"directives/SelectionComponent.html":{},"components/SnackbarComponent.html":{},"components/VirtualPedalsComponent.html":{},"components/WeavingStateComponent.html":{}}}],["selectparam",{"_index":3166,"title":{},"body":{"interfaces/OperationParam.html":{},"components/ParameterComponent.html":{},"classes/Params.html":{},"miscellaneous/typealiases.html":{}}}],["selects",{"_index":2352,"title":{},"body":{"interfaces/Ink.html":{},"injectables/InkService.html":{},"classes/OpSequencer.html":{}}}],["send",{"_index":3471,"title":{},"body":{"interfaces/Pedal.html":{},"classes/PedalStatus.html":{},"injectables/PedalsService.html":{}}}],["senddraftrow",{"_index":3550,"title":{},"body":{"injectables/PedalsService.html":{}}}],["senddraftrow(r",{"_index":3566,"title":{},"body":{"injectables/PedalsService.html":{}}}],["senddrafttoplayer",{"_index":1430,"title":{},"body":{"interfaces/DesignActions.html":{}}}],["sending",{"_index":1922,"title":{},"body":{"interfaces/DraftOperationClassification.html":{},"interfaces/LoomConfig.html":{},"classes/PedalConfig.html":{},"injectables/PlayerService.html":{}}}],["sends",{"_index":538,"title":{},"body":{"interfaces/ChainOp.html":{},"interfaces/PairedOp.html":{},"interfaces/PedalEvent.html":{},"interfaces/PlayerOp.html":{}}}],["sense",{"_index":1705,"title":{},"body":{"interfaces/DraftOperationClassification.html":{},"interfaces/LoomConfig.html":{},"classes/PedalConfig.html":{},"injectables/PlayerService.html":{}}}],["sent",{"_index":3070,"title":{},"body":{"classes/OpSequencer.html":{},"interfaces/PlayerState.html":{},"interfaces/PlayerState-1.html":{},"interfaces/WeavingLog.html":{},"interfaces/WeavingPick.html":{},"interfaces/WeavingPick-1.html":{}}}],["separate",{"_index":444,"title":{},"body":{"interfaces/ChainIndex.html":{},"injectables/SequencerService.html":{},"index.html":{}}}],["separated",{"_index":438,"title":{},"body":{"interfaces/ChainIndex.html":{},"injectables/SequencerService.html":{}}}],["seq",{"_index":1788,"title":{},"body":{"interfaces/DraftOperationClassification.html":{},"interfaces/LoomConfig.html":{},"injectables/MappingsService.html":{},"components/OpSequencerComponent.html":{},"classes/PedalConfig.html":{},"injectables/PlayerService.html":{}}}],["seq.length",{"_index":2579,"title":{},"body":{"injectables/MappingsService.html":{}}}],["seq[0",{"_index":2580,"title":{},"body":{"injectables/MappingsService.html":{}}}],["seq_array",{"_index":451,"title":{},"body":{"interfaces/ChainIndex.html":{},"injectables/SequencerService.html":{}}}],["sequence",{"_index":502,"title":{},"body":{"interfaces/ChainOp.html":{},"interfaces/DraftOperationClassification.html":{},"interfaces/LoomConfig.html":{},"components/OpSequencerComponent.html":{},"interfaces/PairedOp.html":{},"classes/PedalConfig.html":{},"interfaces/PedalEvent.html":{},"interfaces/PlayerOp.html":{},"injectables/PlayerService.html":{}}}],["sequencer",{"_index":426,"title":{},"body":{"interfaces/ChainIndex.html":{},"interfaces/ChainOp.html":{},"injectables/MappingsService.html":{},"classes/OpSequencer.html":{},"components/OpSequencerComponent.html":{},"interfaces/PairedOp.html":{},"interfaces/PedalEvent.html":{},"components/PlayerComponent.html":{},"interfaces/PlayerOp.html":{},"injectables/SequencerService.html":{},"miscellaneous/typealiases.html":{}}}],["sequencer'},{'name",{"_index":847,"title":{},"body":{"components/ConnectionComponent.html":{},"components/DraftdetailComponent.html":{},"components/ImageComponent.html":{},"components/InletComponent.html":{},"components/MixerViewComponent.html":{},"components/NoteComponent.html":{},"components/OpHelpModal.html":{},"components/OpSequencerComponent.html":{},"components/OpsComponent.html":{},"components/ParameterComponent.html":{},"components/PlayerComponent.html":{},"components/SnackbarComponent.html":{},"components/VirtualPedalsComponent.html":{},"components/WeavingStateComponent.html":{}}}],["sequencer.component",{"_index":3636,"title":{},"body":{"components/PlayerComponent.html":{},"modules/PlayerModule.html":{}}}],["sequencer.component.html",{"_index":3085,"title":{},"body":{"components/OpSequencerComponent.html":{}}}],["sequencer.component.scss",{"_index":3084,"title":{},"body":{"components/OpSequencerComponent.html":{}}}],["sequencer.component.ts",{"_index":3083,"title":{},"body":{"components/OpSequencerComponent.html":{}}}],["sequencer.component.ts:11",{"_index":3088,"title":{},"body":{"components/OpSequencerComponent.html":{}}}],["sequencer.component.ts:14",{"_index":3091,"title":{},"body":{"components/OpSequencerComponent.html":{}}}],["sequencer.component.ts:15",{"_index":3090,"title":{},"body":{"components/OpSequencerComponent.html":{}}}],["sequencer.component.ts:16",{"_index":3092,"title":{},"body":{"components/OpSequencerComponent.html":{}}}],["sequencer.component.ts:19",{"_index":3089,"title":{},"body":{"components/OpSequencerComponent.html":{}}}],["sequencer.service",{"_index":2562,"title":{},"body":{"injectables/MappingsService.html":{}}}],["sequencer/op",{"_index":3082,"title":{},"body":{"components/OpSequencerComponent.html":{},"components/PlayerComponent.html":{},"modules/PlayerModule.html":{}}}],["sequencerservice",{"_index":450,"title":{"injectables/SequencerService.html":{}},"body":{"interfaces/ChainIndex.html":{},"interfaces/DraftOperationClassification.html":{},"interfaces/LoomConfig.html":{},"injectables/MappingsService.html":{},"components/OpSequencerComponent.html":{},"classes/PedalConfig.html":{},"injectables/PlayerService.html":{},"injectables/SequencerService.html":{}}}],["series",{"_index":2140,"title":{},"body":{"interfaces/DynamicOperation.html":{},"interfaces/OpInput.html":{},"interfaces/OperationClassification.html":{},"interfaces/TreeOperation.html":{}}}],["serve",{"_index":80,"title":{},"body":{"classes/AbstractOpFactory.html":{},"classes/BaseOp.html":{},"classes/Branch.html":{},"classes/Bus.html":{},"classes/Merge.html":{},"interfaces/OpClassifier.html":{},"interfaces/OperationProperties.html":{},"classes/Pipe.html":{},"classes/Seed.html":{},"interfaces/TopologyDef.html":{},"index.html":{}}}],["server",{"_index":4604,"title":{},"body":{"index.html":{}}}],["serves",{"_index":211,"title":{},"body":{"classes/AbstractOpFactory.html":{},"classes/BaseOp.html":{},"classes/Branch.html":{},"classes/Bus.html":{},"classes/Merge.html":{},"interfaces/OpClassifier.html":{},"interfaces/OperationProperties.html":{},"classes/Pipe.html":{},"classes/Seed.html":{},"interfaces/TopologyDef.html":{}}}],["service",{"_index":440,"title":{},"body":{"interfaces/ChainIndex.html":{},"interfaces/ChainOp.html":{},"interfaces/DesignActions.html":{},"interfaces/DraftOperationClassification.html":{},"injectables/LayersService.html":{},"interfaces/LoomConfig.html":{},"components/NoteComponent.html":{},"interfaces/PairedOp.html":{},"interfaces/Pedal.html":{},"classes/PedalConfig.html":{},"interfaces/PedalEvent.html":{},"classes/PedalStatus.html":{},"injectables/PedalsService.html":{},"interfaces/PlayerOp.html":{},"injectables/PlayerService.html":{},"injectables/SequencerService.html":{},"index.html":{}}}],["services",{"_index":4453,"title":{},"body":{"index.html":{}}}],["set",{"_index":384,"title":{},"body":{"classes/Cell.html":{},"components/ConnectionComponent.html":{},"classes/DBListener.html":{},"classes/DBListenerArray.html":{},"classes/DBNode.html":{},"classes/DBNodeArray.html":{},"classes/DBTwoWay.html":{},"classes/DBTwoWayArray.html":{},"classes/DBWriteBuffer.html":{},"classes/DBWriter.html":{},"classes/DBWriterArray.html":{},"interfaces/DesignActions.html":{},"interfaces/DraftOperationClassification.html":{},"interfaces/LoomConfig.html":{},"injectables/MappingsService.html":{},"interfaces/NodeMethods.html":{},"interfaces/NodeParams.html":{},"components/NoteComponent.html":{},"classes/OnlineStatus.html":{},"interfaces/OperationParam.html":{},"classes/Params.html":{},"interfaces/Pedal.html":{},"classes/PedalConfig.html":{},"classes/PedalStatus.html":{},"injectables/PedalsService.html":{},"components/PlayerComponent.html":{},"injectables/PlayerService.html":{},"classes/Shape.html":{},"classes/Shape-1.html":{},"injectables/ViewportService.html":{}}}],["set(this.ref",{"_index":1019,"title":{},"body":{"classes/DBListener.html":{},"classes/DBListenerArray.html":{},"classes/DBNode.html":{},"classes/DBNodeArray.html":{},"classes/DBTwoWay.html":{},"classes/DBTwoWayArray.html":{},"classes/DBWriteBuffer.html":{},"classes/DBWriter.html":{},"classes/DBWriterArray.html":{},"interfaces/NodeMethods.html":{},"interfaces/NodeParams.html":{},"classes/OnlineStatus.html":{}}}],["set(x",{"_index":4210,"title":{},"body":{"injectables/ViewportService.html":{}}}],["set/true",{"_index":4560,"title":{},"body":{"index.html":{}}}],["set_connectable:boolean",{"_index":1385,"title":{},"body":{"interfaces/DesignActions.html":{}}}],["setabsolute",{"_index":4187,"title":{},"body":{"injectables/ViewportService.html":{}}}],["setabsolute(w",{"_index":4212,"title":{},"body":{"injectables/ViewportService.html":{}}}],["setactive(tf",{"_index":1194,"title":{},"body":{"classes/DBNode.html":{}}}],["setcolor",{"_index":4047,"title":{},"body":{"classes/Shuttle.html":{}}}],["setcolor(color",{"_index":4069,"title":{},"body":{"classes/Shuttle.html":{}}}],["setcurrentview",{"_index":3761,"title":{},"body":{"classes/Render.html":{}}}],["setcurrentview(view",{"_index":3792,"title":{},"body":{"classes/Render.html":{}}}],["setcurrentview(view:string",{"_index":3846,"title":{},"body":{"classes/Render.html":{}}}],["setdraft",{"_index":3699,"title":{},"body":{"injectables/PlayerService.html":{}}}],["setdraft(d",{"_index":1890,"title":{},"body":{"interfaces/DraftOperationClassification.html":{},"interfaces/LoomConfig.html":{},"classes/PedalConfig.html":{},"injectables/PlayerService.html":{}}}],["setendcol",{"_index":3940,"title":{},"body":{"classes/Shape.html":{}}}],["setendcol(col",{"_index":3963,"title":{},"body":{"classes/Shape.html":{}}}],["setfront",{"_index":3762,"title":{},"body":{"classes/Render.html":{}}}],["setfront(value",{"_index":3794,"title":{},"body":{"classes/Render.html":{}}}],["setfront(value:boolean",{"_index":3847,"title":{},"body":{"classes/Render.html":{}}}],["setheddle",{"_index":375,"title":{},"body":{"classes/Cell.html":{}}}],["setheddle(value",{"_index":403,"title":{},"body":{"classes/Cell.html":{}}}],["setheddle(value:boolean",{"_index":416,"title":{},"body":{"classes/Cell.html":{}}}],["setheddledown",{"_index":376,"title":{},"body":{"classes/Cell.html":{}}}],["setheddleup",{"_index":377,"title":{},"body":{"classes/Cell.html":{}}}],["setheight",{"_index":4188,"title":{},"body":{"injectables/ViewportService.html":{}}}],["setheight(h",{"_index":4214,"title":{},"body":{"injectables/ViewportService.html":{}}}],["setid",{"_index":3941,"title":{},"body":{"classes/Shape.html":{},"classes/Shuttle.html":{},"classes/System.html":{}}}],["setid(id",{"_index":3966,"title":{},"body":{"classes/Shape.html":{},"classes/Shuttle.html":{},"classes/System.html":{}}}],["setmap",{"_index":2527,"title":{},"body":{"injectables/MappingsService.html":{}}}],["setmap(p",{"_index":2550,"title":{},"body":{"injectables/MappingsService.html":{}}}],["setnode",{"_index":1220,"title":{},"body":{"classes/DBTwoWayArray.html":{},"classes/DBWriterArray.html":{}}}],["setnode(i",{"_index":1123,"title":{},"body":{"classes/DBListener.html":{},"classes/DBListenerArray.html":{},"classes/DBNode.html":{},"classes/DBNodeArray.html":{},"classes/DBTwoWay.html":{},"classes/DBTwoWayArray.html":{},"classes/DBWriteBuffer.html":{},"classes/DBWriter.html":{},"classes/DBWriterArray.html":{},"interfaces/NodeMethods.html":{},"interfaces/NodeParams.html":{},"classes/OnlineStatus.html":{}}}],["setparameters",{"_index":3858,"title":{},"body":{"classes/Selection.html":{}}}],["setpedalop",{"_index":3700,"title":{},"body":{"injectables/PlayerService.html":{}}}],["setpedalop(e",{"_index":1904,"title":{},"body":{"interfaces/DraftOperationClassification.html":{},"interfaces/LoomConfig.html":{},"classes/PedalConfig.html":{},"injectables/PlayerService.html":{}}}],["setpositionandsize",{"_index":2657,"title":{},"body":{"directives/MarqueeComponent.html":{},"directives/SelectionComponent.html":{}}}],["setpositionandsize(bounds",{"_index":2660,"title":{},"body":{"directives/MarqueeComponent.html":{},"directives/SelectionComponent.html":{}}}],["sets",{"_index":391,"title":{},"body":{"classes/Cell.html":{},"interfaces/DesignActions.html":{},"interfaces/Ink.html":{},"injectables/InkService.html":{}}}],["setscale(value",{"_index":2893,"title":{},"body":{"components/NoteComponent.html":{}}}],["setstartcol",{"_index":3942,"title":{},"body":{"classes/Shape.html":{}}}],["setstartcol(col",{"_index":3968,"title":{},"body":{"classes/Shape.html":{}}}],["sett",{"_index":3934,"title":{},"body":{"classes/Shape.html":{}}}],["settarget",{"_index":3859,"title":{},"body":{"classes/Selection.html":{}}}],["settarget(t",{"_index":3872,"title":{},"body":{"classes/Selection.html":{}}}],["setthickness",{"_index":4048,"title":{},"body":{"classes/Shuttle.html":{}}}],["setthickness(n",{"_index":4072,"title":{},"body":{"classes/Shuttle.html":{}}}],["setting",{"_index":383,"title":{},"body":{"classes/Cell.html":{},"interfaces/Ink.html":{},"injectables/InkService.html":{}}}],["settings",{"_index":1657,"title":{},"body":{"interfaces/DraftNodeProxy.html":{},"interfaces/FileObj.html":{},"interfaces/FileSaver.html":{},"interfaces/Fileloader.html":{},"interfaces/IOTuple.html":{},"interfaces/LoadResponse.html":{},"interfaces/NodeComponentProxy.html":{},"interfaces/OpComponentProxy.html":{},"interfaces/SaveObj.html":{},"interfaces/StatusMessage.html":{},"interfaces/TreeNode.html":{},"interfaces/TreeNodeProxy.html":{},"miscellaneous/typealiases.html":{}}}],["settopleft",{"_index":4189,"title":{},"body":{"injectables/ViewportService.html":{}}}],["settopleft(p",{"_index":4216,"title":{},"body":{"injectables/ViewportService.html":{}}}],["settting",{"_index":1627,"title":{},"body":{"interfaces/DraftMap.html":{},"interfaces/Interlacement.html":{},"interfaces/InterlacementVal.html":{}}}],["settype",{"_index":4049,"title":{},"body":{"classes/Shuttle.html":{}}}],["settype(type",{"_index":4074,"title":{},"body":{"classes/Shuttle.html":{}}}],["setup",{"_index":4469,"title":{},"body":{"index.html":{}}}],["setval",{"_index":1207,"title":{},"body":{"classes/DBTwoWay.html":{},"classes/DBWriteBuffer.html":{},"classes/DBWriter.html":{}}}],["setval(x",{"_index":1018,"title":{},"body":{"classes/DBListener.html":{},"classes/DBListenerArray.html":{},"classes/DBNode.html":{},"classes/DBNodeArray.html":{},"classes/DBTwoWay.html":{},"classes/DBTwoWayArray.html":{},"classes/DBWriteBuffer.html":{},"classes/DBWriter.html":{},"classes/DBWriterArray.html":{},"interfaces/NodeMethods.html":{},"interfaces/NodeParams.html":{},"classes/OnlineStatus.html":{}}}],["setviewportcenter",{"_index":4190,"title":{},"body":{"injectables/ViewportService.html":{}}}],["setvisible",{"_index":4050,"title":{},"body":{"classes/Shuttle.html":{},"classes/System.html":{}}}],["setvisible(bool",{"_index":4139,"title":{},"body":{"classes/System.html":{}}}],["setvisible(visible",{"_index":4076,"title":{},"body":{"classes/Shuttle.html":{}}}],["setvisible(visible:boolean",{"_index":4096,"title":{},"body":{"classes/Shuttle.html":{}}}],["setwidth",{"_index":3943,"title":{},"body":{"classes/Shape.html":{},"injectables/ViewportService.html":{}}}],["setwidth(w",{"_index":4219,"title":{},"body":{"injectables/ViewportService.html":{}}}],["setwidth(width",{"_index":3970,"title":{},"body":{"classes/Shape.html":{}}}],["setzoom",{"_index":3763,"title":{},"body":{"classes/Render.html":{}}}],["setzoom(z",{"_index":3796,"title":{},"body":{"classes/Render.html":{}}}],["several",{"_index":68,"title":{},"body":{"classes/AbstractOpFactory.html":{},"classes/BaseOp.html":{},"classes/Branch.html":{},"classes/Bus.html":{},"classes/Merge.html":{},"interfaces/OpClassifier.html":{},"interfaces/OperationProperties.html":{},"classes/Pipe.html":{},"classes/Seed.html":{},"interfaces/TopologyDef.html":{},"miscellaneous/typealiases.html":{}}}],["shape",{"_index":92,"title":{"classes/Shape.html":{},"classes/Shape-1.html":{}},"body":{"classes/AbstractOpFactory.html":{},"classes/BaseOp.html":{},"classes/Branch.html":{},"classes/Bus.html":{},"interfaces/Ink.html":{},"injectables/InkService.html":{},"classes/Merge.html":{},"interfaces/OpClassifier.html":{},"interfaces/OperationProperties.html":{},"classes/Pipe.html":{},"classes/Seed.html":{},"classes/Shape.html":{},"classes/Shape-1.html":{},"interfaces/TopologyDef.html":{}}}],["shape_canvas",{"_index":4005,"title":{},"body":{"classes/Shape-1.html":{}}}],["shape_canvas.getcontext('2d",{"_index":4020,"title":{},"body":{"classes/Shape-1.html":{}}}],["shape_canvas.todataurl(\"image/png",{"_index":4022,"title":{},"body":{"classes/Shape-1.html":{}}}],["shaped",{"_index":3991,"title":{},"body":{"classes/Shape-1.html":{}}}],["shapes",{"_index":3995,"title":{},"body":{"classes/Shape-1.html":{}}}],["shared",{"_index":2011,"title":{},"body":{"components/DraftdetailComponent.html":{}}}],["shiftx",{"_index":1824,"title":{},"body":{"interfaces/DraftOperationClassification.html":{},"interfaces/LoomConfig.html":{},"classes/PedalConfig.html":{},"injectables/PlayerService.html":{}}}],["shifty",{"_index":1826,"title":{},"body":{"interfaces/DraftOperationClassification.html":{},"interfaces/LoomConfig.html":{},"classes/PedalConfig.html":{},"injectables/PlayerService.html":{}}}],["shortdraft",{"_index":3739,"title":{},"body":{"interfaces/PlayerState.html":{},"interfaces/WeavingLog.html":{},"interfaces/WeavingPick.html":{}}}],["shorthand",{"_index":1591,"title":{},"body":{"interfaces/DraftMap.html":{},"interfaces/IOTuple.html":{},"interfaces/Interlacement.html":{},"interfaces/InterlacementVal.html":{},"interfaces/TreeNode.html":{},"miscellaneous/typealiases.html":{}}}],["show",{"_index":200,"title":{},"body":{"classes/AbstractOpFactory.html":{},"classes/BaseOp.html":{},"classes/Branch.html":{},"classes/Bus.html":{},"interfaces/DensityUnits.html":{},"interfaces/DesignMode.html":{},"interfaces/DynamicOperation.html":{},"interfaces/LoomTypes.html":{},"interfaces/MaterialTypes.html":{},"classes/Merge.html":{},"interfaces/OpClassifier.html":{},"interfaces/OpInput.html":{},"interfaces/OperationClassification.html":{},"interfaces/OperationParam.html":{},"interfaces/OperationProperties.html":{},"classes/Params.html":{},"classes/Pipe.html":{},"classes/Seed.html":{},"interfaces/TopologyDef.html":{},"interfaces/TreeOperation.html":{},"interfaces/ViewModes.html":{}}}],["shown",{"_index":1278,"title":{},"body":{"interfaces/DensityUnits.html":{},"interfaces/DesignMode.html":{},"interfaces/LoomTypes.html":{},"interfaces/MaterialTypes.html":{},"interfaces/ViewModes.html":{}}}],["shuttle",{"_index":1637,"title":{"classes/Shuttle.html":{}},"body":{"interfaces/DraftNodeProxy.html":{},"interfaces/FileObj.html":{},"interfaces/FileSaver.html":{},"interfaces/Fileloader.html":{},"interfaces/LoadResponse.html":{},"interfaces/NodeComponentProxy.html":{},"interfaces/OpComponentProxy.html":{},"interfaces/SaveObj.html":{},"classes/Shape.html":{},"classes/Shuttle.html":{},"interfaces/StatusMessage.html":{},"interfaces/TreeNodeProxy.html":{}}}],["shuttledict",{"_index":4054,"title":{},"body":{"classes/Shuttle.html":{}}}],["shuttles",{"_index":1605,"title":{},"body":{"interfaces/DraftMap.html":{},"interfaces/Interlacement.html":{},"interfaces/InterlacementVal.html":{},"classes/Shape.html":{},"miscellaneous/functions.html":{}}}],["si",{"_index":1379,"title":{},"body":{"interfaces/DesignActions.html":{},"interfaces/DraftMap.html":{},"interfaces/Interlacement.html":{},"interfaces/InterlacementVal.html":{},"directives/MarqueeComponent.html":{},"directives/SelectionComponent.html":{}}}],["signature",{"_index":217,"title":{},"body":{"classes/AbstractOpFactory.html":{},"classes/BaseOp.html":{},"classes/Branch.html":{},"classes/Bus.html":{},"classes/Merge.html":{},"interfaces/OpClassifier.html":{},"interfaces/OperationProperties.html":{},"classes/Pipe.html":{},"classes/Seed.html":{},"interfaces/TopologyDef.html":{}}}],["sim",{"_index":892,"title":{},"body":{"interfaces/Crossing.html":{},"interfaces/Vertex.html":{},"interfaces/YarnPath.html":{}}}],["simple",{"_index":2223,"title":{},"body":{"interfaces/DynamicOperation.html":{},"interfaces/OpInput.html":{},"interfaces/OperationClassification.html":{},"interfaces/TreeOperation.html":{}}}],["simplechanges",{"_index":1293,"title":{},"body":{"interfaces/DesignActions.html":{}}}],["simply",{"_index":4571,"title":{},"body":{"index.html":{}}}],["simulated",{"_index":4462,"title":{},"body":{"index.html":{}}}],["simulating",{"_index":4653,"title":{},"body":{"miscellaneous/typealiases.html":{}}}],["simulation",{"_index":891,"title":{},"body":{"interfaces/Crossing.html":{},"interfaces/Vertex.html":{},"interfaces/YarnPath.html":{},"index.html":{},"miscellaneous/typealiases.html":{}}}],["single",{"_index":1700,"title":{},"body":{"interfaces/DraftOperationClassification.html":{},"interfaces/DynamicOperation.html":{},"interfaces/LoomConfig.html":{},"interfaces/OpInput.html":{},"interfaces/OperationClassification.html":{},"classes/PedalConfig.html":{},"injectables/PlayerService.html":{},"interfaces/TreeOperation.html":{},"index.html":{}}}],["singleinlet",{"_index":509,"title":{},"body":{"interfaces/ChainOp.html":{},"interfaces/DraftOperationClassification.html":{},"interfaces/LoomConfig.html":{},"interfaces/PairedOp.html":{},"classes/PedalConfig.html":{},"interfaces/PedalEvent.html":{},"interfaces/PlayerOp.html":{},"injectables/PlayerService.html":{},"miscellaneous/typealiases.html":{}}}],["singleop",{"_index":521,"title":{},"body":{"interfaces/ChainOp.html":{},"injectables/MappingsService.html":{},"interfaces/PairedOp.html":{},"interfaces/PedalEvent.html":{},"interfaces/PlayerOp.html":{},"miscellaneous/typealiases.html":{}}}],["singleop).name",{"_index":2586,"title":{},"body":{"injectables/MappingsService.html":{}}}],["size",{"_index":1647,"title":{},"body":{"interfaces/DraftNodeProxy.html":{},"components/DraftdetailComponent.html":{},"interfaces/FileObj.html":{},"interfaces/FileSaver.html":{},"interfaces/Fileloader.html":{},"interfaces/LoadResponse.html":{},"components/MixerViewComponent.html":{},"interfaces/NodeComponentProxy.html":{},"components/NoteComponent.html":{},"interfaces/OpComponentProxy.html":{},"components/OpHelpModal.html":{},"components/OpSequencerComponent.html":{},"components/OpsComponent.html":{},"components/ParameterComponent.html":{},"interfaces/SaveObj.html":{},"classes/Shape-1.html":{},"interfaces/StatusMessage.html":{},"interfaces/TreeNodeProxy.html":{},"injectables/ViewportService.html":{},"components/WeavingStateComponent.html":{},"miscellaneous/typealiases.html":{}}}],["sized",{"_index":4151,"title":{},"body":{"classes/System.html":{},"miscellaneous/functions.html":{}}}],["slide",{"_index":2855,"title":{},"body":{"components/MixerViewComponent.html":{}}}],["slider",{"_index":2839,"title":{},"body":{"components/MixerViewComponent.html":{},"components/ParameterComponent.html":{}}}],["slope",{"_index":1828,"title":{},"body":{"interfaces/DraftOperationClassification.html":{},"interfaces/LoomConfig.html":{},"classes/PedalConfig.html":{},"injectables/PlayerService.html":{}}}],["slots",{"_index":2244,"title":{},"body":{"interfaces/DynamicOperation.html":{},"interfaces/OpInput.html":{},"interfaces/OperationClassification.html":{},"interfaces/TreeOperation.html":{}}}],["slowly",{"_index":4546,"title":{},"body":{"index.html":{}}}],["small",{"_index":4340,"title":{},"body":{"components/WeavingStateComponent.html":{}}}],["smaller",{"_index":2141,"title":{},"body":{"interfaces/DynamicOperation.html":{},"interfaces/OpInput.html":{},"interfaces/OperationClassification.html":{},"interfaces/TreeOperation.html":{}}}],["snackbar",{"_index":4098,"title":{},"body":{"components/SnackbarComponent.html":{}}}],["snackbar'},{'name",{"_index":855,"title":{},"body":{"components/ConnectionComponent.html":{},"components/DraftdetailComponent.html":{},"components/ImageComponent.html":{},"components/InletComponent.html":{},"components/MixerViewComponent.html":{},"components/NoteComponent.html":{},"components/OpHelpModal.html":{},"components/OpSequencerComponent.html":{},"components/OpsComponent.html":{},"components/ParameterComponent.html":{},"components/PlayerComponent.html":{},"components/SnackbarComponent.html":{},"components/VirtualPedalsComponent.html":{},"components/WeavingStateComponent.html":{}}}],["snackbar.component.html",{"_index":4100,"title":{},"body":{"components/SnackbarComponent.html":{}}}],["snackbar.component.scss",{"_index":4099,"title":{},"body":{"components/SnackbarComponent.html":{}}}],["snackbarcomponent",{"_index":854,"title":{"components/SnackbarComponent.html":{}},"body":{"components/ConnectionComponent.html":{},"components/DraftdetailComponent.html":{},"components/ImageComponent.html":{},"components/InletComponent.html":{},"modules/MixerModule.html":{},"components/MixerViewComponent.html":{},"components/NoteComponent.html":{},"components/OpHelpModal.html":{},"components/OpSequencerComponent.html":{},"components/OpsComponent.html":{},"components/ParameterComponent.html":{},"components/PlayerComponent.html":{},"components/SnackbarComponent.html":{},"components/VirtualPedalsComponent.html":{},"components/WeavingStateComponent.html":{},"overview.html":{}}}],["snapshot",{"_index":1003,"title":{},"body":{"classes/DBListener.html":{},"classes/DBListenerArray.html":{},"classes/DBNode.html":{},"classes/DBNodeArray.html":{},"classes/DBTwoWay.html":{},"classes/DBTwoWayArray.html":{},"classes/DBWriteBuffer.html":{},"classes/DBWriter.html":{},"classes/DBWriterArray.html":{},"interfaces/NodeMethods.html":{},"interfaces/NodeParams.html":{},"classes/OnlineStatus.html":{}}}],["snapshot.val",{"_index":1005,"title":{},"body":{"classes/DBListener.html":{},"classes/DBListenerArray.html":{},"classes/DBNode.html":{},"classes/DBNodeArray.html":{},"classes/DBTwoWay.html":{},"classes/DBTwoWayArray.html":{},"classes/DBWriteBuffer.html":{},"classes/DBWriter.html":{},"classes/DBWriterArray.html":{},"interfaces/NodeMethods.html":{},"interfaces/NodeParams.html":{},"classes/OnlineStatus.html":{}}}],["solid",{"_index":2477,"title":{},"body":{"components/InletComponent.html":{},"components/MixerViewComponent.html":{},"components/NoteComponent.html":{},"components/ParameterComponent.html":{}}}],["someone",{"_index":1971,"title":{},"body":{"components/DraftdetailComponent.html":{}}}],["something",{"_index":1929,"title":{},"body":{"interfaces/DraftOperationClassification.html":{},"interfaces/LoomConfig.html":{},"classes/PedalConfig.html":{},"injectables/PlayerService.html":{}}}],["source",{"_index":4,"title":{},"body":{"classes/AbstractOpFactory.html":{},"classes/BaseOp.html":{},"interfaces/Bounds.html":{},"classes/Branch.html":{},"classes/Bus.html":{},"classes/Cell.html":{},"interfaces/ChainIndex.html":{},"interfaces/ChainOp.html":{},"components/ConnectionComponent.html":{},"interfaces/Crossing.html":{},"classes/DBListener.html":{},"classes/DBListenerArray.html":{},"classes/DBNode.html":{},"classes/DBNodeArray.html":{},"classes/DBTwoWay.html":{},"classes/DBTwoWayArray.html":{},"classes/DBWriteBuffer.html":{},"classes/DBWriter.html":{},"classes/DBWriterArray.html":{},"interfaces/DensityUnits.html":{},"interfaces/DesignActions.html":{},"interfaces/DesignMode.html":{},"interfaces/DraftMap.html":{},"interfaces/DraftNodeProxy.html":{},"interfaces/DraftOperationClassification.html":{},"components/DraftdetailComponent.html":{},"interfaces/DynamicOperation.html":{},"interfaces/FileObj.html":{},"interfaces/FileSaver.html":{},"interfaces/Fileloader.html":{},"interfaces/IOTuple.html":{},"components/ImageComponent.html":{},"interfaces/Ink.html":{},"injectables/InkService.html":{},"components/InletComponent.html":{},"interfaces/Interlacement.html":{},"interfaces/InterlacementVal.html":{},"injectables/LayersService.html":{},"interfaces/LoadResponse.html":{},"interfaces/LoomConfig.html":{},"interfaces/LoomTypes.html":{},"injectables/MappingsService.html":{},"directives/MarqueeComponent.html":{},"interfaces/MaterialTypes.html":{},"classes/Merge.html":{},"modules/MixerModule.html":{},"components/MixerViewComponent.html":{},"interfaces/NodeComponentProxy.html":{},"interfaces/NodeMethods.html":{},"interfaces/NodeParams.html":{},"components/NoteComponent.html":{},"classes/OnlineStatus.html":{},"interfaces/OpClassifier.html":{},"interfaces/OpComponentProxy.html":{},"components/OpHelpModal.html":{},"interfaces/OpInput.html":{},"classes/OpSequencer.html":{},"components/OpSequencerComponent.html":{},"interfaces/OperationClassification.html":{},"interfaces/OperationParam.html":{},"interfaces/OperationProperties.html":{},"components/OpsComponent.html":{},"interfaces/PairedOp.html":{},"components/ParameterComponent.html":{},"classes/Params.html":{},"interfaces/Pedal.html":{},"classes/PedalConfig.html":{},"interfaces/PedalEvent.html":{},"classes/PedalStatus.html":{},"injectables/PedalsService.html":{},"classes/Pipe.html":{},"components/PlayerComponent.html":{},"modules/PlayerModule.html":{},"interfaces/PlayerOp.html":{},"injectables/PlayerService.html":{},"interfaces/PlayerState.html":{},"interfaces/PlayerState-1.html":{},"interfaces/Point.html":{},"classes/Render.html":{},"interfaces/SaveObj.html":{},"classes/Seed.html":{},"classes/Selection.html":{},"directives/SelectionComponent.html":{},"injectables/SequencerService.html":{},"classes/Shape.html":{},"classes/Shape-1.html":{},"classes/Shuttle.html":{},"components/SnackbarComponent.html":{},"interfaces/StatusMessage.html":{},"classes/System.html":{},"interfaces/TopologyDef.html":{},"interfaces/TreeNode.html":{},"interfaces/TreeNodeProxy.html":{},"interfaces/TreeOperation.html":{},"interfaces/Vertex.html":{},"interfaces/ViewModes.html":{},"injectables/ViewportService.html":{},"components/VirtualPedalsComponent.html":{},"interfaces/WeavingLog.html":{},"interfaces/WeavingPick.html":{},"interfaces/WeavingPick-1.html":{},"components/WeavingStateComponent.html":{},"interfaces/YarnPath.html":{},"index.html":{}}}],["space",{"_index":2126,"title":{},"body":{"components/DraftdetailComponent.html":{},"components/MixerViewComponent.html":{},"injectables/ViewportService.html":{},"index.html":{}}}],["sparce",{"_index":878,"title":{},"body":{"interfaces/Crossing.html":{},"interfaces/DraftNodeProxy.html":{},"interfaces/FileObj.html":{},"interfaces/FileSaver.html":{},"interfaces/Fileloader.html":{},"interfaces/LoadResponse.html":{},"interfaces/NodeComponentProxy.html":{},"interfaces/OpComponentProxy.html":{},"interfaces/SaveObj.html":{},"interfaces/StatusMessage.html":{},"interfaces/TreeNodeProxy.html":{},"interfaces/Vertex.html":{},"interfaces/YarnPath.html":{}}}],["special",{"_index":1020,"title":{},"body":{"classes/DBListener.html":{},"classes/DBListenerArray.html":{},"classes/DBNode.html":{},"classes/DBNodeArray.html":{},"classes/DBTwoWay.html":{},"classes/DBTwoWayArray.html":{},"classes/DBWriteBuffer.html":{},"classes/DBWriter.html":{},"classes/DBWriterArray.html":{},"interfaces/DynamicOperation.html":{},"interfaces/NodeMethods.html":{},"interfaces/NodeParams.html":{},"classes/OnlineStatus.html":{},"interfaces/OpInput.html":{},"interfaces/OperationClassification.html":{},"interfaces/TreeOperation.html":{}}}],["specific",{"_index":524,"title":{},"body":{"interfaces/ChainOp.html":{},"interfaces/OperationParam.html":{},"interfaces/PairedOp.html":{},"interfaces/PedalEvent.html":{},"interfaces/PlayerOp.html":{},"index.html":{}}}],["specifically",{"_index":2286,"title":{},"body":{"interfaces/IOTuple.html":{},"interfaces/TreeNode.html":{}}}],["specified",{"_index":2089,"title":{},"body":{"components/DraftdetailComponent.html":{},"interfaces/IOTuple.html":{},"interfaces/Ink.html":{},"injectables/InkService.html":{},"interfaces/TreeNode.html":{}}}],["specifying",{"_index":3025,"title":{},"body":{"classes/OpSequencer.html":{}}}],["splice",{"_index":1368,"title":{},"body":{"interfaces/DesignActions.html":{},"components/WeavingStateComponent.html":{}}}],["square",{"_index":2311,"title":{},"body":{"interfaces/Ink.html":{},"injectables/InkService.html":{},"components/OpSequencerComponent.html":{},"components/PlayerComponent.html":{},"index.html":{}}}],["src",{"_index":2605,"title":{},"body":{"injectables/MappingsService.html":{}}}],["src/.../dbnodes.ts",{"_index":4629,"title":{},"body":{"miscellaneous/typealiases.html":{}}}],["src/.../drafts.ts",{"_index":4627,"title":{},"body":{"miscellaneous/typealiases.html":{}}}],["src/.../formatting.ts",{"_index":4398,"title":{},"body":{"miscellaneous/functions.html":{}}}],["src/.../inlets.ts",{"_index":4628,"title":{},"body":{"miscellaneous/typealiases.html":{}}}],["src/.../looms.ts",{"_index":4630,"title":{},"body":{"miscellaneous/typealiases.html":{}}}],["src/.../mappings.service.ts",{"_index":4410,"title":{},"body":{"miscellaneous/functions.html":{},"miscellaneous/typealiases.html":{}}}],["src/.../op_definitions.ts",{"_index":4397,"title":{},"body":{"miscellaneous/functions.html":{}}}],["src/.../op_mappings.ts",{"_index":4404,"title":{},"body":{"miscellaneous/functions.html":{},"miscellaneous/typealiases.html":{}}}],["src/.../operation.service.ts",{"_index":4632,"title":{},"body":{"miscellaneous/typealiases.html":{}}}],["src/.../operation.ts",{"_index":4393,"title":{},"body":{"miscellaneous/functions.html":{},"miscellaneous/typealiases.html":{}}}],["src/.../parameter.component.ts",{"_index":4412,"title":{},"body":{"miscellaneous/functions.html":{}}}],["src/.../params.ts",{"_index":4402,"title":{},"body":{"miscellaneous/functions.html":{},"miscellaneous/typealiases.html":{}}}],["src/.../player.ts",{"_index":4394,"title":{},"body":{"miscellaneous/functions.html":{}}}],["src/.../sequencer.ts",{"_index":4405,"title":{},"body":{"miscellaneous/functions.html":{}}}],["src/.../state.ts",{"_index":4395,"title":{},"body":{"miscellaneous/functions.html":{}}}],["src/.../system.ts",{"_index":4407,"title":{},"body":{"miscellaneous/functions.html":{}}}],["src/.../topology.ts",{"_index":4409,"title":{},"body":{"miscellaneous/functions.html":{},"miscellaneous/typealiases.html":{}}}],["src/.../tree.ts",{"_index":4625,"title":{},"body":{"miscellaneous/typealiases.html":{}}}],["src/.../yarnpaths.ts",{"_index":4634,"title":{},"body":{"miscellaneous/typealiases.html":{}}}],["src/.../yarnsim.ts",{"_index":4626,"title":{},"body":{"miscellaneous/typealiases.html":{}}}],["src/app",{"_index":4515,"title":{},"body":{"index.html":{}}}],["src/app/core/model/cell.ts",{"_index":367,"title":{},"body":{"classes/Cell.html":{}}}],["src/app/core/model/cell.ts:10",{"_index":389,"title":{},"body":{"classes/Cell.html":{}}}],["src/app/core/model/cell.ts:101",{"_index":408,"title":{},"body":{"classes/Cell.html":{}}}],["src/app/core/model/cell.ts:108",{"_index":395,"title":{},"body":{"classes/Cell.html":{}}}],["src/app/core/model/cell.ts:11",{"_index":382,"title":{},"body":{"classes/Cell.html":{}}}],["src/app/core/model/cell.ts:32",{"_index":397,"title":{},"body":{"classes/Cell.html":{}}}],["src/app/core/model/cell.ts:50",{"_index":394,"title":{},"body":{"classes/Cell.html":{}}}],["src/app/core/model/cell.ts:54",{"_index":406,"title":{},"body":{"classes/Cell.html":{}}}],["src/app/core/model/cell.ts:59",{"_index":405,"title":{},"body":{"classes/Cell.html":{}}}],["src/app/core/model/cell.ts:70",{"_index":404,"title":{},"body":{"classes/Cell.html":{}}}],["src/app/core/model/cell.ts:84",{"_index":390,"title":{},"body":{"classes/Cell.html":{}}}],["src/app/core/model/cell.ts:91",{"_index":407,"title":{},"body":{"classes/Cell.html":{}}}],["src/app/core/model/datatypes/drafts.ts",{"_index":1585,"title":{},"body":{"interfaces/DraftMap.html":{},"interfaces/Interlacement.html":{},"interfaces/InterlacementVal.html":{},"miscellaneous/typealiases.html":{}}}],["src/app/core/model/datatypes/files.ts",{"_index":1631,"title":{},"body":{"interfaces/DraftNodeProxy.html":{},"interfaces/FileObj.html":{},"interfaces/FileSaver.html":{},"interfaces/Fileloader.html":{},"interfaces/LoadResponse.html":{},"interfaces/NodeComponentProxy.html":{},"interfaces/OpComponentProxy.html":{},"interfaces/SaveObj.html":{},"interfaces/StatusMessage.html":{},"interfaces/TreeNodeProxy.html":{}}}],["src/app/core/model/datatypes/looms.ts",{"_index":4639,"title":{},"body":{"miscellaneous/typealiases.html":{}}}],["src/app/core/model/datatypes/screenlayout.ts",{"_index":338,"title":{},"body":{"interfaces/Bounds.html":{},"interfaces/Point.html":{}}}],["src/app/core/model/datatypes/selectlists.ts",{"_index":1264,"title":{},"body":{"interfaces/DensityUnits.html":{},"interfaces/DesignMode.html":{},"interfaces/LoomTypes.html":{},"interfaces/MaterialTypes.html":{},"interfaces/ViewModes.html":{}}}],["src/app/core/model/datatypes/tree.ts",{"_index":2250,"title":{},"body":{"interfaces/IOTuple.html":{},"interfaces/TreeNode.html":{},"miscellaneous/typealiases.html":{}}}],["src/app/core/model/datatypes/yarnpaths.ts",{"_index":4644,"title":{},"body":{"miscellaneous/typealiases.html":{}}}],["src/app/core/model/datatypes/yarnsim.ts",{"_index":868,"title":{},"body":{"interfaces/Crossing.html":{},"interfaces/Vertex.html":{},"interfaces/YarnPath.html":{},"miscellaneous/typealiases.html":{}}}],["src/app/core/model/render.ts",{"_index":3747,"title":{},"body":{"classes/Render.html":{}}}],["src/app/core/model/render.ts:101",{"_index":3784,"title":{},"body":{"classes/Render.html":{}}}],["src/app/core/model/render.ts:116",{"_index":3781,"title":{},"body":{"classes/Render.html":{}}}],["src/app/core/model/render.ts:125",{"_index":3778,"title":{},"body":{"classes/Render.html":{}}}],["src/app/core/model/render.ts:13",{"_index":3772,"title":{},"body":{"classes/Render.html":{}}}],["src/app/core/model/render.ts:15",{"_index":3774,"title":{},"body":{"classes/Render.html":{}}}],["src/app/core/model/render.ts:157",{"_index":3797,"title":{},"body":{"classes/Render.html":{}}}],["src/app/core/model/render.ts:161",{"_index":3787,"title":{},"body":{"classes/Render.html":{}}}],["src/app/core/model/render.ts:165",{"_index":3801,"title":{},"body":{"classes/Render.html":{}}}],["src/app/core/model/render.ts:17",{"_index":3775,"title":{},"body":{"classes/Render.html":{}}}],["src/app/core/model/render.ts:170",{"_index":3800,"title":{},"body":{"classes/Render.html":{}}}],["src/app/core/model/render.ts:176",{"_index":3783,"title":{},"body":{"classes/Render.html":{}}}],["src/app/core/model/render.ts:187",{"_index":3791,"title":{},"body":{"classes/Render.html":{}}}],["src/app/core/model/render.ts:19",{"_index":3776,"title":{},"body":{"classes/Render.html":{}}}],["src/app/core/model/render.ts:191",{"_index":3779,"title":{},"body":{"classes/Render.html":{}}}],["src/app/core/model/render.ts:195",{"_index":3793,"title":{},"body":{"classes/Render.html":{}}}],["src/app/core/model/render.ts:199",{"_index":3790,"title":{},"body":{"classes/Render.html":{}}}],["src/app/core/model/render.ts:203",{"_index":3795,"title":{},"body":{"classes/Render.html":{}}}],["src/app/core/model/render.ts:207",{"_index":3799,"title":{},"body":{"classes/Render.html":{}}}],["src/app/core/model/render.ts:21",{"_index":3771,"title":{},"body":{"classes/Render.html":{}}}],["src/app/core/model/render.ts:30",{"_index":3773,"title":{},"body":{"classes/Render.html":{}}}],["src/app/core/model/render.ts:33",{"_index":3769,"title":{},"body":{"classes/Render.html":{}}}],["src/app/core/model/render.ts:87",{"_index":3789,"title":{},"body":{"classes/Render.html":{}}}],["src/app/core/model/selection.ts",{"_index":3852,"title":{},"body":{"classes/Selection.html":{}}}],["src/app/core/model/selection.ts:10",{"_index":3865,"title":{},"body":{"classes/Selection.html":{}}}],["src/app/core/model/selection.ts:11",{"_index":3862,"title":{},"body":{"classes/Selection.html":{}}}],["src/app/core/model/selection.ts:12",{"_index":3864,"title":{},"body":{"classes/Selection.html":{}}}],["src/app/core/model/selection.ts:15",{"_index":3871,"title":{},"body":{"classes/Selection.html":{}}}],["src/app/core/model/selection.ts:26",{"_index":3874,"title":{},"body":{"classes/Selection.html":{}}}],["src/app/core/model/selection.ts:31",{"_index":3870,"title":{},"body":{"classes/Selection.html":{}}}],["src/app/core/model/selection.ts:35",{"_index":3869,"title":{},"body":{"classes/Selection.html":{}}}],["src/app/core/model/selection.ts:39",{"_index":3866,"title":{},"body":{"classes/Selection.html":{}}}],["src/app/core/model/selection.ts:43",{"_index":3873,"title":{},"body":{"classes/Selection.html":{}}}],["src/app/core/model/selection.ts:47",{"_index":3867,"title":{},"body":{"classes/Selection.html":{}}}],["src/app/core/model/selection.ts:51",{"_index":3868,"title":{},"body":{"classes/Selection.html":{}}}],["src/app/core/model/selection.ts:8",{"_index":3863,"title":{},"body":{"classes/Selection.html":{}}}],["src/app/core/model/selection.ts:9",{"_index":3861,"title":{},"body":{"classes/Selection.html":{}}}],["src/app/core/model/shape.ts",{"_index":3928,"title":{},"body":{"classes/Shape.html":{}}}],["src/app/core/model/shape.ts:11",{"_index":3948,"title":{},"body":{"classes/Shape.html":{}}}],["src/app/core/model/shape.ts:12",{"_index":3949,"title":{},"body":{"classes/Shape.html":{}}}],["src/app/core/model/shape.ts:13",{"_index":3953,"title":{},"body":{"classes/Shape.html":{}}}],["src/app/core/model/shape.ts:14",{"_index":3950,"title":{},"body":{"classes/Shape.html":{}}}],["src/app/core/model/shape.ts:15",{"_index":3947,"title":{},"body":{"classes/Shape.html":{}}}],["src/app/core/model/shape.ts:16",{"_index":3952,"title":{},"body":{"classes/Shape.html":{}}}],["src/app/core/model/shape.ts:17",{"_index":3946,"title":{},"body":{"classes/Shape.html":{}}}],["src/app/core/model/shape.ts:18",{"_index":3951,"title":{},"body":{"classes/Shape.html":{}}}],["src/app/core/model/shape.ts:19",{"_index":3945,"title":{},"body":{"classes/Shape.html":{}}}],["src/app/core/model/shape.ts:31",{"_index":3967,"title":{},"body":{"classes/Shape.html":{}}}],["src/app/core/model/shape.ts:38",{"_index":3971,"title":{},"body":{"classes/Shape.html":{}}}],["src/app/core/model/shape.ts:42",{"_index":3969,"title":{},"body":{"classes/Shape.html":{}}}],["src/app/core/model/shape.ts:46",{"_index":3964,"title":{},"body":{"classes/Shape.html":{}}}],["src/app/core/model/shape.ts:52",{"_index":3961,"title":{},"body":{"classes/Shape.html":{}}}],["src/app/core/model/shape.ts:56",{"_index":3959,"title":{},"body":{"classes/Shape.html":{}}}],["src/app/core/model/shape.ts:60",{"_index":3960,"title":{},"body":{"classes/Shape.html":{}}}],["src/app/core/model/shape.ts:66",{"_index":3962,"title":{},"body":{"classes/Shape.html":{}}}],["src/app/core/model/shape.ts:83",{"_index":3955,"title":{},"body":{"classes/Shape.html":{}}}],["src/app/core/model/shape.ts:90",{"_index":3972,"title":{},"body":{"classes/Shape.html":{}}}],["src/app/core/model/shuttle.ts",{"_index":4037,"title":{},"body":{"classes/Shuttle.html":{}}}],["src/app/core/model/shuttle.ts:10",{"_index":4063,"title":{},"body":{"classes/Shuttle.html":{}}}],["src/app/core/model/shuttle.ts:11",{"_index":4055,"title":{},"body":{"classes/Shuttle.html":{}}}],["src/app/core/model/shuttle.ts:12",{"_index":4061,"title":{},"body":{"classes/Shuttle.html":{}}}],["src/app/core/model/shuttle.ts:13",{"_index":4062,"title":{},"body":{"classes/Shuttle.html":{}}}],["src/app/core/model/shuttle.ts:15",{"_index":4060,"title":{},"body":{"classes/Shuttle.html":{}}}],["src/app/core/model/shuttle.ts:16",{"_index":4056,"title":{},"body":{"classes/Shuttle.html":{}}}],["src/app/core/model/shuttle.ts:17",{"_index":4053,"title":{},"body":{"classes/Shuttle.html":{}}}],["src/app/core/model/shuttle.ts:36",{"_index":4079,"title":{},"body":{"classes/Shuttle.html":{}}}],["src/app/core/model/shuttle.ts:52",{"_index":4071,"title":{},"body":{"classes/Shuttle.html":{}}}],["src/app/core/model/shuttle.ts:59",{"_index":4065,"title":{},"body":{"classes/Shuttle.html":{}}}],["src/app/core/model/shuttle.ts:63",{"_index":4070,"title":{},"body":{"classes/Shuttle.html":{}}}],["src/app/core/model/shuttle.ts:67",{"_index":4073,"title":{},"body":{"classes/Shuttle.html":{}}}],["src/app/core/model/shuttle.ts:7",{"_index":4057,"title":{},"body":{"classes/Shuttle.html":{}}}],["src/app/core/model/shuttle.ts:72",{"_index":4075,"title":{},"body":{"classes/Shuttle.html":{}}}],["src/app/core/model/shuttle.ts:76",{"_index":4077,"title":{},"body":{"classes/Shuttle.html":{}}}],["src/app/core/model/shuttle.ts:8",{"_index":4059,"title":{},"body":{"classes/Shuttle.html":{}}}],["src/app/core/model/shuttle.ts:80",{"_index":4064,"title":{},"body":{"classes/Shuttle.html":{}}}],["src/app/core/model/shuttle.ts:84",{"_index":4067,"title":{},"body":{"classes/Shuttle.html":{}}}],["src/app/core/model/shuttle.ts:88",{"_index":4068,"title":{},"body":{"classes/Shuttle.html":{}}}],["src/app/core/model/shuttle.ts:9",{"_index":4058,"title":{},"body":{"classes/Shuttle.html":{}}}],["src/app/core/model/shuttle.ts:92",{"_index":4066,"title":{},"body":{"classes/Shuttle.html":{}}}],["src/app/core/model/system.ts",{"_index":4120,"title":{},"body":{"classes/System.html":{},"miscellaneous/functions.html":{}}}],["src/app/core/model/system.ts:10",{"_index":4133,"title":{},"body":{"classes/System.html":{}}}],["src/app/core/model/system.ts:11",{"_index":4134,"title":{},"body":{"classes/System.html":{}}}],["src/app/core/model/system.ts:12",{"_index":4135,"title":{},"body":{"classes/System.html":{}}}],["src/app/core/model/system.ts:13",{"_index":4130,"title":{},"body":{"classes/System.html":{}}}],["src/app/core/model/system.ts:27",{"_index":4141,"title":{},"body":{"classes/System.html":{}}}],["src/app/core/model/system.ts:34",{"_index":4138,"title":{},"body":{"classes/System.html":{}}}],["src/app/core/model/system.ts:41",{"_index":4137,"title":{},"body":{"classes/System.html":{}}}],["src/app/core/model/system.ts:45",{"_index":4140,"title":{},"body":{"classes/System.html":{}}}],["src/app/core/model/system.ts:49",{"_index":4136,"title":{},"body":{"classes/System.html":{}}}],["src/app/core/model/system.ts:9",{"_index":4132,"title":{},"body":{"classes/System.html":{}}}],["src/app/core/provider",{"_index":4530,"title":{},"body":{"index.html":{}}}],["src/app/mixer/mixer.module.ts",{"_index":2686,"title":{},"body":{"modules/MixerModule.html":{}}}],["src/app/mixer/modal/draftdetail/draftdetail.component.ts",{"_index":1938,"title":{},"body":{"components/DraftdetailComponent.html":{}}}],["src/app/mixer/modal/draftdetail/draftdetail.component.ts:119",{"_index":1969,"title":{},"body":{"components/DraftdetailComponent.html":{}}}],["src/app/mixer/modal/draftdetail/draftdetail.component.ts:127",{"_index":1968,"title":{},"body":{"components/DraftdetailComponent.html":{}}}],["src/app/mixer/modal/draftdetail/draftdetail.component.ts:135",{"_index":1977,"title":{},"body":{"components/DraftdetailComponent.html":{}}}],["src/app/mixer/modal/draftdetail/draftdetail.component.ts:139",{"_index":1967,"title":{},"body":{"components/DraftdetailComponent.html":{}}}],["src/app/mixer/modal/draftdetail/draftdetail.component.ts:155",{"_index":1982,"title":{},"body":{"components/DraftdetailComponent.html":{}}}],["src/app/mixer/modal/draftdetail/draftdetail.component.ts:159",{"_index":1976,"title":{},"body":{"components/DraftdetailComponent.html":{}}}],["src/app/mixer/modal/draftdetail/draftdetail.component.ts:165",{"_index":1978,"title":{},"body":{"components/DraftdetailComponent.html":{}}}],["src/app/mixer/modal/draftdetail/draftdetail.component.ts:172",{"_index":1986,"title":{},"body":{"components/DraftdetailComponent.html":{}}}],["src/app/mixer/modal/draftdetail/draftdetail.component.ts:176",{"_index":1987,"title":{},"body":{"components/DraftdetailComponent.html":{}}}],["src/app/mixer/modal/draftdetail/draftdetail.component.ts:180",{"_index":1988,"title":{},"body":{"components/DraftdetailComponent.html":{}}}],["src/app/mixer/modal/draftdetail/draftdetail.component.ts:185",{"_index":1974,"title":{},"body":{"components/DraftdetailComponent.html":{}}}],["src/app/mixer/modal/draftdetail/draftdetail.component.ts:190",{"_index":1975,"title":{},"body":{"components/DraftdetailComponent.html":{}}}],["src/app/mixer/modal/draftdetail/draftdetail.component.ts:195",{"_index":1983,"title":{},"body":{"components/DraftdetailComponent.html":{}}}],["src/app/mixer/modal/draftdetail/draftdetail.component.ts:30",{"_index":2002,"title":{},"body":{"components/DraftdetailComponent.html":{}}}],["src/app/mixer/modal/draftdetail/draftdetail.component.ts:33",{"_index":1993,"title":{},"body":{"components/DraftdetailComponent.html":{}}}],["src/app/mixer/modal/draftdetail/draftdetail.component.ts:36",{"_index":1994,"title":{},"body":{"components/DraftdetailComponent.html":{}}}],["src/app/mixer/modal/draftdetail/draftdetail.component.ts:41",{"_index":1990,"title":{},"body":{"components/DraftdetailComponent.html":{}}}],["src/app/mixer/modal/draftdetail/draftdetail.component.ts:48",{"_index":1996,"title":{},"body":{"components/DraftdetailComponent.html":{}}}],["src/app/mixer/modal/draftdetail/draftdetail.component.ts:50",{"_index":1997,"title":{},"body":{"components/DraftdetailComponent.html":{}}}],["src/app/mixer/modal/draftdetail/draftdetail.component.ts:53",{"_index":1998,"title":{},"body":{"components/DraftdetailComponent.html":{}}}],["src/app/mixer/modal/draftdetail/draftdetail.component.ts:55",{"_index":1964,"title":{},"body":{"components/DraftdetailComponent.html":{}}}],["src/app/mixer/modal/draftdetail/draftdetail.component.ts:61",{"_index":1995,"title":{},"body":{"components/DraftdetailComponent.html":{}}}],["src/app/mixer/modal/draftdetail/draftdetail.component.ts:62",{"_index":1989,"title":{},"body":{"components/DraftdetailComponent.html":{}}}],["src/app/mixer/modal/draftdetail/draftdetail.component.ts:65",{"_index":2003,"title":{},"body":{"components/DraftdetailComponent.html":{}}}],["src/app/mixer/modal/draftdetail/draftdetail.component.ts:93",{"_index":1985,"title":{},"body":{"components/DraftdetailComponent.html":{}}}],["src/app/mixer/modal/draftdetail/draftdetail.component.ts:96",{"_index":1981,"title":{},"body":{"components/DraftdetailComponent.html":{}}}],["src/app/mixer/modal/mixerview/mixerview.component.ts",{"_index":2711,"title":{},"body":{"components/MixerViewComponent.html":{}}}],["src/app/mixer/modal/mixerview/mixerview.component.ts:100",{"_index":2751,"title":{},"body":{"components/MixerViewComponent.html":{}}}],["src/app/mixer/modal/mixerview/mixerview.component.ts:106",{"_index":2753,"title":{},"body":{"components/MixerViewComponent.html":{}}}],["src/app/mixer/modal/mixerview/mixerview.component.ts:123",{"_index":2736,"title":{},"body":{"components/MixerViewComponent.html":{}}}],["src/app/mixer/modal/mixerview/mixerview.component.ts:127",{"_index":2740,"title":{},"body":{"components/MixerViewComponent.html":{}}}],["src/app/mixer/modal/mixerview/mixerview.component.ts:13",{"_index":2733,"title":{},"body":{"components/MixerViewComponent.html":{}}}],["src/app/mixer/modal/mixerview/mixerview.component.ts:131",{"_index":2745,"title":{},"body":{"components/MixerViewComponent.html":{}}}],["src/app/mixer/modal/mixerview/mixerview.component.ts:14",{"_index":2732,"title":{},"body":{"components/MixerViewComponent.html":{}}}],["src/app/mixer/modal/mixerview/mixerview.component.ts:142",{"_index":2738,"title":{},"body":{"components/MixerViewComponent.html":{}}}],["src/app/mixer/modal/mixerview/mixerview.component.ts:17",{"_index":2754,"title":{},"body":{"components/MixerViewComponent.html":{}}}],["src/app/mixer/modal/mixerview/mixerview.component.ts:175",{"_index":2734,"title":{},"body":{"components/MixerViewComponent.html":{}}}],["src/app/mixer/modal/mixerview/mixerview.component.ts:20",{"_index":2759,"title":{},"body":{"components/MixerViewComponent.html":{}}}],["src/app/mixer/modal/mixerview/mixerview.component.ts:23",{"_index":2757,"title":{},"body":{"components/MixerViewComponent.html":{}}}],["src/app/mixer/modal/mixerview/mixerview.component.ts:26",{"_index":2755,"title":{},"body":{"components/MixerViewComponent.html":{}}}],["src/app/mixer/modal/mixerview/mixerview.component.ts:29",{"_index":2761,"title":{},"body":{"components/MixerViewComponent.html":{}}}],["src/app/mixer/modal/mixerview/mixerview.component.ts:30",{"_index":2758,"title":{},"body":{"components/MixerViewComponent.html":{}}}],["src/app/mixer/modal/mixerview/mixerview.component.ts:33",{"_index":2762,"title":{},"body":{"components/MixerViewComponent.html":{}}}],["src/app/mixer/modal/mixerview/mixerview.component.ts:35",{"_index":2731,"title":{},"body":{"components/MixerViewComponent.html":{}}}],["src/app/mixer/modal/mixerview/mixerview.component.ts:37",{"_index":2760,"title":{},"body":{"components/MixerViewComponent.html":{}}}],["src/app/mixer/modal/mixerview/mixerview.component.ts:40",{"_index":2756,"title":{},"body":{"components/MixerViewComponent.html":{}}}],["src/app/mixer/modal/mixerview/mixerview.component.ts:68",{"_index":2747,"title":{},"body":{"components/MixerViewComponent.html":{}}}],["src/app/mixer/modal/mixerview/mixerview.component.ts:75",{"_index":2746,"title":{},"body":{"components/MixerViewComponent.html":{}}}],["src/app/mixer/modal/mixerview/mixerview.component.ts:81",{"_index":2742,"title":{},"body":{"components/MixerViewComponent.html":{}}}],["src/app/mixer/modal/mixerview/mixerview.component.ts:88",{"_index":2748,"title":{},"body":{"components/MixerViewComponent.html":{}}}],["src/app/mixer/modal/mixerview/mixerview.component.ts:96",{"_index":2750,"title":{},"body":{"components/MixerViewComponent.html":{}}}],["src/app/mixer/modal/ophelp/ophelp.modal.ts",{"_index":2957,"title":{},"body":{"components/OpHelpModal.html":{}}}],["src/app/mixer/modal/ophelp/ophelp.modal.ts:13",{"_index":2969,"title":{},"body":{"components/OpHelpModal.html":{}}}],["src/app/mixer/modal/ophelp/ophelp.modal.ts:14",{"_index":2973,"title":{},"body":{"components/OpHelpModal.html":{}}}],["src/app/mixer/modal/ophelp/ophelp.modal.ts:15",{"_index":2972,"title":{},"body":{"components/OpHelpModal.html":{}}}],["src/app/mixer/modal/ophelp/ophelp.modal.ts:16",{"_index":2974,"title":{},"body":{"components/OpHelpModal.html":{}}}],["src/app/mixer/modal/ophelp/ophelp.modal.ts:17",{"_index":2971,"title":{},"body":{"components/OpHelpModal.html":{}}}],["src/app/mixer/modal/ophelp/ophelp.modal.ts:18",{"_index":2970,"title":{},"body":{"components/OpHelpModal.html":{}}}],["src/app/mixer/modal/ophelp/ophelp.modal.ts:19",{"_index":2965,"title":{},"body":{"components/OpHelpModal.html":{}}}],["src/app/mixer/modal/ophelp/ophelp.modal.ts:25",{"_index":2968,"title":{},"body":{"components/OpHelpModal.html":{}}}],["src/app/mixer/modal/ophelp/ophelp.modal.ts:42",{"_index":2967,"title":{},"body":{"components/OpHelpModal.html":{}}}],["src/app/mixer/modal/ophelp/ophelp.modal.ts:45",{"_index":2966,"title":{},"body":{"components/OpHelpModal.html":{}}}],["src/app/mixer/modal/ops/ops.component.ts",{"_index":3207,"title":{},"body":{"components/OpsComponent.html":{}}}],["src/app/mixer/modal/ops/ops.component.ts:16",{"_index":3221,"title":{},"body":{"components/OpsComponent.html":{}}}],["src/app/mixer/modal/ops/ops.component.ts:17",{"_index":3220,"title":{},"body":{"components/OpsComponent.html":{}}}],["src/app/mixer/modal/ops/ops.component.ts:19",{"_index":3234,"title":{},"body":{"components/OpsComponent.html":{}}}],["src/app/mixer/modal/ops/ops.component.ts:20",{"_index":3231,"title":{},"body":{"components/OpsComponent.html":{}}}],["src/app/mixer/modal/ops/ops.component.ts:21",{"_index":3233,"title":{},"body":{"components/OpsComponent.html":{}}}],["src/app/mixer/modal/ops/ops.component.ts:22",{"_index":3219,"title":{},"body":{"components/OpsComponent.html":{}}}],["src/app/mixer/modal/ops/ops.component.ts:24",{"_index":3235,"title":{},"body":{"components/OpsComponent.html":{}}}],["src/app/mixer/modal/ops/ops.component.ts:26",{"_index":3230,"title":{},"body":{"components/OpsComponent.html":{}}}],["src/app/mixer/modal/ops/ops.component.ts:28",{"_index":3229,"title":{},"body":{"components/OpsComponent.html":{}}}],["src/app/mixer/modal/ops/ops.component.ts:40",{"_index":3223,"title":{},"body":{"components/OpsComponent.html":{}}}],["src/app/mixer/modal/ops/ops.component.ts:45",{"_index":3228,"title":{},"body":{"components/OpsComponent.html":{}}}],["src/app/mixer/modal/ops/ops.component.ts:51",{"_index":3225,"title":{},"body":{"components/OpsComponent.html":{}}}],["src/app/mixer/modal/ops/ops.component.ts:55",{"_index":3227,"title":{},"body":{"components/OpsComponent.html":{}}}],["src/app/mixer/model/op_definitions.ts",{"_index":4414,"title":{},"body":{"miscellaneous/functions.html":{}}}],["src/app/mixer/model/operation.ts",{"_index":2129,"title":{},"body":{"interfaces/DynamicOperation.html":{},"interfaces/OpInput.html":{},"interfaces/OperationClassification.html":{},"interfaces/TreeOperation.html":{},"miscellaneous/functions.html":{},"miscellaneous/typealiases.html":{}}}],["src/app/mixer/model/operation/formatting.ts",{"_index":4416,"title":{},"body":{"miscellaneous/functions.html":{}}}],["src/app/mixer/model/operation/inlets.ts",{"_index":4637,"title":{},"body":{"miscellaneous/typealiases.html":{}}}],["src/app/mixer/model/operation/params.ts",{"_index":3151,"title":{},"body":{"interfaces/OperationParam.html":{},"classes/Params.html":{},"miscellaneous/functions.html":{},"miscellaneous/typealiases.html":{}}}],["src/app/mixer/model/operation/params.ts:106",{"_index":3354,"title":{},"body":{"classes/Params.html":{}}}],["src/app/mixer/model/operation/params.ts:107",{"_index":3356,"title":{},"body":{"classes/Params.html":{}}}],["src/app/mixer/model/operation/params.ts:114",{"_index":3357,"title":{},"body":{"classes/Params.html":{}}}],["src/app/mixer/model/operation/params.ts:125",{"_index":3358,"title":{},"body":{"classes/Params.html":{}}}],["src/app/mixer/model/operation/params.ts:126",{"_index":3360,"title":{},"body":{"classes/Params.html":{}}}],["src/app/mixer/model/operation/params.ts:133",{"_index":3361,"title":{},"body":{"classes/Params.html":{}}}],["src/app/mixer/model/operation/topology.ts",{"_index":6,"title":{},"body":{"classes/AbstractOpFactory.html":{},"classes/BaseOp.html":{},"classes/Branch.html":{},"classes/Bus.html":{},"classes/Merge.html":{},"interfaces/OpClassifier.html":{},"interfaces/OperationProperties.html":{},"classes/Pipe.html":{},"classes/Seed.html":{},"interfaces/TopologyDef.html":{},"miscellaneous/functions.html":{},"miscellaneous/typealiases.html":{}}}],["src/app/mixer/model/operation/topology.ts:203",{"_index":330,"title":{},"body":{"classes/BaseOp.html":{}}}],["src/app/mixer/model/operation/topology.ts:204",{"_index":331,"title":{},"body":{"classes/BaseOp.html":{}}}],["src/app/mixer/model/operation/topology.ts:205",{"_index":326,"title":{},"body":{"classes/BaseOp.html":{}}}],["src/app/mixer/model/operation/topology.ts:206",{"_index":327,"title":{},"body":{"classes/BaseOp.html":{}}}],["src/app/mixer/model/operation/topology.ts:207",{"_index":332,"title":{},"body":{"classes/BaseOp.html":{}}}],["src/app/mixer/model/operation/topology.ts:208",{"_index":328,"title":{},"body":{"classes/BaseOp.html":{}}}],["src/app/mixer/model/operation/topology.ts:209",{"_index":325,"title":{},"body":{"classes/BaseOp.html":{}}}],["src/app/mixer/model/operation/topology.ts:210",{"_index":329,"title":{},"body":{"classes/BaseOp.html":{}}}],["src/app/mixer/model/operation/topology.ts:211",{"_index":324,"title":{},"body":{"classes/BaseOp.html":{}}}],["src/app/mixer/model/operation/topology.ts:212",{"_index":333,"title":{},"body":{"classes/BaseOp.html":{}}}],["src/app/mixer/model/operation/topology.ts:219",{"_index":322,"title":{},"body":{"classes/BaseOp.html":{}}}],["src/app/mixer/model/operation/topology.ts:249",{"_index":334,"title":{},"body":{"classes/BaseOp.html":{}}}],["src/app/mixer/model/operation/topology.ts:255",{"_index":335,"title":{},"body":{"classes/BaseOp.html":{}}}],["src/app/mixer/model/operation/topology.ts:313",{"_index":36,"title":{},"body":{"classes/AbstractOpFactory.html":{}}}],["src/app/mixer/model/operation/topology.ts:314",{"_index":37,"title":{},"body":{"classes/AbstractOpFactory.html":{}}}],["src/app/mixer/model/operation/topology.ts:315",{"_index":39,"title":{},"body":{"classes/AbstractOpFactory.html":{}}}],["src/app/mixer/model/operation/topology.ts:321",{"_index":41,"title":{},"body":{"classes/AbstractOpFactory.html":{}}}],["src/app/mixer/model/operation/topology.ts:322",{"_index":42,"title":{},"body":{"classes/AbstractOpFactory.html":{}}}],["src/app/mixer/model/operation/topology.ts:323",{"_index":44,"title":{},"body":{"classes/AbstractOpFactory.html":{}}}],["src/app/mixer/model/operation/topology.ts:329",{"_index":31,"title":{},"body":{"classes/AbstractOpFactory.html":{}}}],["src/app/mixer/model/operation/topology.ts:330",{"_index":32,"title":{},"body":{"classes/AbstractOpFactory.html":{}}}],["src/app/mixer/model/operation/topology.ts:331",{"_index":34,"title":{},"body":{"classes/AbstractOpFactory.html":{}}}],["src/app/mixer/model/operation/topology.ts:337",{"_index":46,"title":{},"body":{"classes/AbstractOpFactory.html":{}}}],["src/app/mixer/model/operation/topology.ts:338",{"_index":47,"title":{},"body":{"classes/AbstractOpFactory.html":{}}}],["src/app/mixer/model/operation/topology.ts:339",{"_index":49,"title":{},"body":{"classes/AbstractOpFactory.html":{}}}],["src/app/mixer/model/operation/topology.ts:345",{"_index":17,"title":{},"body":{"classes/AbstractOpFactory.html":{}}}],["src/app/mixer/model/operation/topology.ts:346",{"_index":28,"title":{},"body":{"classes/AbstractOpFactory.html":{}}}],["src/app/mixer/model/operation/topology.ts:347",{"_index":29,"title":{},"body":{"classes/AbstractOpFactory.html":{}}}],["src/app/mixer/model/operation/topology.ts:47",{"_index":3851,"title":{},"body":{"classes/Seed.html":{}}}],["src/app/mixer/model/operation/topology.ts:56",{"_index":3611,"title":{},"body":{"classes/Pipe.html":{}}}],["src/app/mixer/model/operation/topology.ts:65",{"_index":2676,"title":{},"body":{"classes/Merge.html":{}}}],["src/app/mixer/model/operation/topology.ts:74",{"_index":364,"title":{},"body":{"classes/Branch.html":{}}}],["src/app/mixer/model/operation/topology.ts:85",{"_index":365,"title":{},"body":{"classes/Bus.html":{}}}],["src/app/mixer/model/shape.ts",{"_index":3989,"title":{},"body":{"classes/Shape-1.html":{}}}],["src/app/mixer/model/shape.ts:101",{"_index":4010,"title":{},"body":{"classes/Shape-1.html":{}}}],["src/app/mixer/model/shape.ts:12",{"_index":4008,"title":{},"body":{"classes/Shape-1.html":{}}}],["src/app/mixer/model/shape.ts:13",{"_index":4009,"title":{},"body":{"classes/Shape-1.html":{}}}],["src/app/mixer/model/shape.ts:14",{"_index":4006,"title":{},"body":{"classes/Shape-1.html":{}}}],["src/app/mixer/model/shape.ts:15",{"_index":4004,"title":{},"body":{"classes/Shape-1.html":{}}}],["src/app/mixer/model/shape.ts:35",{"_index":4011,"title":{},"body":{"classes/Shape-1.html":{}}}],["src/app/mixer/model/shape.ts:45",{"_index":4015,"title":{},"body":{"classes/Shape-1.html":{}}}],["src/app/mixer/model/shape.ts:78",{"_index":4012,"title":{},"body":{"classes/Shape-1.html":{}}}],["src/app/mixer/palette/connection/connection.component.ts",{"_index":630,"title":{},"body":{"components/ConnectionComponent.html":{}}}],["src/app/mixer/palette/connection/connection.component.ts:119",{"_index":683,"title":{},"body":{"components/ConnectionComponent.html":{}}}],["src/app/mixer/palette/connection/connection.component.ts:141",{"_index":666,"title":{},"body":{"components/ConnectionComponent.html":{}}}],["src/app/mixer/palette/connection/connection.component.ts:16",{"_index":664,"title":{},"body":{"components/ConnectionComponent.html":{}}}],["src/app/mixer/palette/connection/connection.component.ts:167",{"_index":668,"title":{},"body":{"components/ConnectionComponent.html":{}}}],["src/app/mixer/palette/connection/connection.component.ts:17",{"_index":665,"title":{},"body":{"components/ConnectionComponent.html":{}}}],["src/app/mixer/palette/connection/connection.component.ts:18",{"_index":663,"title":{},"body":{"components/ConnectionComponent.html":{}}}],["src/app/mixer/palette/connection/connection.component.ts:185",{"_index":671,"title":{},"body":{"components/ConnectionComponent.html":{}}}],["src/app/mixer/palette/connection/connection.component.ts:207",{"_index":677,"title":{},"body":{"components/ConnectionComponent.html":{}}}],["src/app/mixer/palette/connection/connection.component.ts:21",{"_index":705,"title":{},"body":{"components/ConnectionComponent.html":{}}}],["src/app/mixer/palette/connection/connection.component.ts:22",{"_index":710,"title":{},"body":{"components/ConnectionComponent.html":{}}}],["src/app/mixer/palette/connection/connection.component.ts:23",{"_index":711,"title":{},"body":{"components/ConnectionComponent.html":{}}}],["src/app/mixer/palette/connection/connection.component.ts:25",{"_index":699,"title":{},"body":{"components/ConnectionComponent.html":{}}}],["src/app/mixer/palette/connection/connection.component.ts:26",{"_index":700,"title":{},"body":{"components/ConnectionComponent.html":{}}}],["src/app/mixer/palette/connection/connection.component.ts:29",{"_index":704,"title":{},"body":{"components/ConnectionComponent.html":{}}}],["src/app/mixer/palette/connection/connection.component.ts:30",{"_index":706,"title":{},"body":{"components/ConnectionComponent.html":{}}}],["src/app/mixer/palette/connection/connection.component.ts:31",{"_index":707,"title":{},"body":{"components/ConnectionComponent.html":{}}}],["src/app/mixer/palette/connection/connection.component.ts:33",{"_index":703,"title":{},"body":{"components/ConnectionComponent.html":{}}}],["src/app/mixer/palette/connection/connection.component.ts:39",{"_index":709,"title":{},"body":{"components/ConnectionComponent.html":{}}}],["src/app/mixer/palette/connection/connection.component.ts:41",{"_index":662,"title":{},"body":{"components/ConnectionComponent.html":{}}}],["src/app/mixer/palette/connection/connection.component.ts:43",{"_index":712,"title":{},"body":{"components/ConnectionComponent.html":{}}}],["src/app/mixer/palette/connection/connection.component.ts:47",{"_index":675,"title":{},"body":{"components/ConnectionComponent.html":{}}}],["src/app/mixer/palette/connection/connection.component.ts:59",{"_index":674,"title":{},"body":{"components/ConnectionComponent.html":{}}}],["src/app/mixer/palette/connection/connection.component.ts:75",{"_index":667,"title":{},"body":{"components/ConnectionComponent.html":{}}}],["src/app/mixer/palette/connection/connection.component.ts:79",{"_index":673,"title":{},"body":{"components/ConnectionComponent.html":{}}}],["src/app/mixer/palette/connection/connection.component.ts:89",{"_index":692,"title":{},"body":{"components/ConnectionComponent.html":{}}}],["src/app/mixer/palette/image/image.component.ts",{"_index":2294,"title":{},"body":{"components/ImageComponent.html":{}}}],["src/app/mixer/palette/image/image.component.ts:12",{"_index":2299,"title":{},"body":{"components/ImageComponent.html":{}}}],["src/app/mixer/palette/image/image.component.ts:8",{"_index":2298,"title":{},"body":{"components/ImageComponent.html":{}}}],["src/app/mixer/palette/marquee/marquee.component.ts",{"_index":2653,"title":{},"body":{"directives/MarqueeComponent.html":{}}}],["src/app/mixer/palette/marquee/marquee.component.ts:13",{"_index":2667,"title":{},"body":{"directives/MarqueeComponent.html":{}}}],["src/app/mixer/palette/marquee/marquee.component.ts:14",{"_index":2665,"title":{},"body":{"directives/MarqueeComponent.html":{}}}],["src/app/mixer/palette/marquee/marquee.component.ts:16",{"_index":2663,"title":{},"body":{"directives/MarqueeComponent.html":{}}}],["src/app/mixer/palette/marquee/marquee.component.ts:22",{"_index":2670,"title":{},"body":{"directives/MarqueeComponent.html":{}}}],["src/app/mixer/palette/marquee/marquee.component.ts:23",{"_index":2662,"title":{},"body":{"directives/MarqueeComponent.html":{}}}],["src/app/mixer/palette/marquee/marquee.component.ts:24",{"_index":2668,"title":{},"body":{"directives/MarqueeComponent.html":{}}}],["src/app/mixer/palette/marquee/marquee.component.ts:25",{"_index":2666,"title":{},"body":{"directives/MarqueeComponent.html":{}}}],["src/app/mixer/palette/marquee/marquee.component.ts:27",{"_index":2659,"title":{},"body":{"directives/MarqueeComponent.html":{}}}],["src/app/mixer/palette/marquee/marquee.component.ts:31",{"_index":2658,"title":{},"body":{"directives/MarqueeComponent.html":{}}}],["src/app/mixer/palette/marquee/marquee.component.ts:36",{"_index":2661,"title":{},"body":{"directives/MarqueeComponent.html":{}}}],["src/app/mixer/palette/note/note.component.ts",{"_index":2862,"title":{},"body":{"components/NoteComponent.html":{}}}],["src/app/mixer/palette/note/note.component.ts:109",{"_index":2886,"title":{},"body":{"components/NoteComponent.html":{}}}],["src/app/mixer/palette/note/note.component.ts:118",{"_index":2879,"title":{},"body":{"components/NoteComponent.html":{}}}],["src/app/mixer/palette/note/note.component.ts:15",{"_index":2872,"title":{},"body":{"components/NoteComponent.html":{}}}],["src/app/mixer/palette/note/note.component.ts:16",{"_index":2871,"title":{},"body":{"components/NoteComponent.html":{}}}],["src/app/mixer/palette/note/note.component.ts:19",{"_index":2873,"title":{},"body":{"components/NoteComponent.html":{}}}],["src/app/mixer/palette/note/note.component.ts:20",{"_index":2894,"title":{},"body":{"components/NoteComponent.html":{}}}],["src/app/mixer/palette/note/note.component.ts:24",{"_index":2887,"title":{},"body":{"components/NoteComponent.html":{}}}],["src/app/mixer/palette/note/note.component.ts:26",{"_index":2874,"title":{},"body":{"components/NoteComponent.html":{}}}],["src/app/mixer/palette/note/note.component.ts:27",{"_index":2875,"title":{},"body":{"components/NoteComponent.html":{}}}],["src/app/mixer/palette/note/note.component.ts:29",{"_index":2891,"title":{},"body":{"components/NoteComponent.html":{}}}],["src/app/mixer/palette/note/note.component.ts:30",{"_index":2889,"title":{},"body":{"components/NoteComponent.html":{}}}],["src/app/mixer/palette/note/note.component.ts:37",{"_index":2890,"title":{},"body":{"components/NoteComponent.html":{}}}],["src/app/mixer/palette/note/note.component.ts:38",{"_index":2870,"title":{},"body":{"components/NoteComponent.html":{}}}],["src/app/mixer/palette/note/note.component.ts:44",{"_index":2884,"title":{},"body":{"components/NoteComponent.html":{}}}],["src/app/mixer/palette/note/note.component.ts:59",{"_index":2883,"title":{},"body":{"components/NoteComponent.html":{}}}],["src/app/mixer/palette/note/note.component.ts:66",{"_index":2877,"title":{},"body":{"components/NoteComponent.html":{}}}],["src/app/mixer/palette/note/note.component.ts:71",{"_index":2878,"title":{},"body":{"components/NoteComponent.html":{}}}],["src/app/mixer/palette/note/note.component.ts:85",{"_index":2885,"title":{},"body":{"components/NoteComponent.html":{}}}],["src/app/mixer/palette/operation/inlet/inlet.component.ts",{"_index":2382,"title":{},"body":{"components/InletComponent.html":{}}}],["src/app/mixer/palette/operation/inlet/inlet.component.ts:101",{"_index":2408,"title":{},"body":{"components/InletComponent.html":{}}}],["src/app/mixer/palette/operation/inlet/inlet.component.ts:107",{"_index":2409,"title":{},"body":{"components/InletComponent.html":{}}}],["src/app/mixer/palette/operation/inlet/inlet.component.ts:19",{"_index":2403,"title":{},"body":{"components/InletComponent.html":{}}}],["src/app/mixer/palette/operation/inlet/inlet.component.ts:20",{"_index":2402,"title":{},"body":{"components/InletComponent.html":{}}}],["src/app/mixer/palette/operation/inlet/inlet.component.ts:21",{"_index":2401,"title":{},"body":{"components/InletComponent.html":{}}}],["src/app/mixer/palette/operation/inlet/inlet.component.ts:22",{"_index":2406,"title":{},"body":{"components/InletComponent.html":{}}}],["src/app/mixer/palette/operation/inlet/inlet.component.ts:23",{"_index":2404,"title":{},"body":{"components/InletComponent.html":{}}}],["src/app/mixer/palette/operation/inlet/inlet.component.ts:24",{"_index":2405,"title":{},"body":{"components/InletComponent.html":{}}}],["src/app/mixer/palette/operation/inlet/inlet.component.ts:26",{"_index":2419,"title":{},"body":{"components/InletComponent.html":{}}}],["src/app/mixer/palette/operation/inlet/inlet.component.ts:27",{"_index":2423,"title":{},"body":{"components/InletComponent.html":{}}}],["src/app/mixer/palette/operation/inlet/inlet.component.ts:28",{"_index":2417,"title":{},"body":{"components/InletComponent.html":{}}}],["src/app/mixer/palette/operation/inlet/inlet.component.ts:29",{"_index":2421,"title":{},"body":{"components/InletComponent.html":{}}}],["src/app/mixer/palette/operation/inlet/inlet.component.ts:30",{"_index":2422,"title":{},"body":{"components/InletComponent.html":{}}}],["src/app/mixer/palette/operation/inlet/inlet.component.ts:31",{"_index":2420,"title":{},"body":{"components/InletComponent.html":{}}}],["src/app/mixer/palette/operation/inlet/inlet.component.ts:32",{"_index":2400,"title":{},"body":{"components/InletComponent.html":{}}}],["src/app/mixer/palette/operation/inlet/inlet.component.ts:34",{"_index":2424,"title":{},"body":{"components/InletComponent.html":{}}}],["src/app/mixer/palette/operation/inlet/inlet.component.ts:38",{"_index":2411,"title":{},"body":{"components/InletComponent.html":{}}}],["src/app/mixer/palette/operation/inlet/inlet.component.ts:77",{"_index":2413,"title":{},"body":{"components/InletComponent.html":{}}}],["src/app/mixer/palette/operation/inlet/inlet.component.ts:93",{"_index":2410,"title":{},"body":{"components/InletComponent.html":{}}}],["src/app/mixer/palette/operation/inlet/inlet.component.ts:97",{"_index":2415,"title":{},"body":{"components/InletComponent.html":{}}}],["src/app/mixer/palette/operation/parameter/parameter.component.ts",{"_index":3271,"title":{},"body":{"components/ParameterComponent.html":{},"miscellaneous/functions.html":{}}}],["src/app/mixer/palette/operation/parameter/parameter.component.ts:136",{"_index":3286,"title":{},"body":{"components/ParameterComponent.html":{}}}],["src/app/mixer/palette/operation/parameter/parameter.component.ts:24",{"_index":3291,"title":{},"body":{"components/ParameterComponent.html":{}}}],["src/app/mixer/palette/operation/parameter/parameter.component.ts:25",{"_index":3295,"title":{},"body":{"components/ParameterComponent.html":{}}}],["src/app/mixer/palette/operation/parameter/parameter.component.ts:26",{"_index":3293,"title":{},"body":{"components/ParameterComponent.html":{}}}],["src/app/mixer/palette/operation/parameter/parameter.component.ts:28",{"_index":3281,"title":{},"body":{"components/ParameterComponent.html":{}}}],["src/app/mixer/palette/operation/parameter/parameter.component.ts:30",{"_index":3280,"title":{},"body":{"components/ParameterComponent.html":{}}}],["src/app/mixer/palette/operation/parameter/parameter.component.ts:31",{"_index":3282,"title":{},"body":{"components/ParameterComponent.html":{}}}],["src/app/mixer/palette/operation/parameter/parameter.component.ts:32",{"_index":3284,"title":{},"body":{"components/ParameterComponent.html":{}}}],["src/app/mixer/palette/operation/parameter/parameter.component.ts:33",{"_index":3283,"title":{},"body":{"components/ParameterComponent.html":{}}}],["src/app/mixer/palette/operation/parameter/parameter.component.ts:36",{"_index":3294,"title":{},"body":{"components/ParameterComponent.html":{}}}],["src/app/mixer/palette/operation/parameter/parameter.component.ts:37",{"_index":3290,"title":{},"body":{"components/ParameterComponent.html":{}}}],["src/app/mixer/palette/operation/parameter/parameter.component.ts:38",{"_index":3297,"title":{},"body":{"components/ParameterComponent.html":{}}}],["src/app/mixer/palette/operation/parameter/parameter.component.ts:39",{"_index":3296,"title":{},"body":{"components/ParameterComponent.html":{}}}],["src/app/mixer/palette/operation/parameter/parameter.component.ts:40",{"_index":3292,"title":{},"body":{"components/ParameterComponent.html":{}}}],["src/app/mixer/palette/operation/parameter/parameter.component.ts:41",{"_index":3279,"title":{},"body":{"components/ParameterComponent.html":{}}}],["src/app/mixer/palette/operation/parameter/parameter.component.ts:44",{"_index":3298,"title":{},"body":{"components/ParameterComponent.html":{}}}],["src/app/mixer/palette/operation/parameter/parameter.component.ts:47",{"_index":3287,"title":{},"body":{"components/ParameterComponent.html":{}}}],["src/app/mixer/palette/operation/parameter/parameter.component.ts:97",{"_index":3289,"title":{},"body":{"components/ParameterComponent.html":{}}}],["src/app/mixer/palette/selection/selection.component.ts",{"_index":3885,"title":{},"body":{"directives/SelectionComponent.html":{}}}],["src/app/mixer/palette/selection/selection.component.ts:12",{"_index":3894,"title":{},"body":{"directives/SelectionComponent.html":{}}}],["src/app/mixer/palette/selection/selection.component.ts:13",{"_index":3892,"title":{},"body":{"directives/SelectionComponent.html":{}}}],["src/app/mixer/palette/selection/selection.component.ts:15",{"_index":3890,"title":{},"body":{"directives/SelectionComponent.html":{}}}],["src/app/mixer/palette/selection/selection.component.ts:21",{"_index":3896,"title":{},"body":{"directives/SelectionComponent.html":{}}}],["src/app/mixer/palette/selection/selection.component.ts:22",{"_index":3889,"title":{},"body":{"directives/SelectionComponent.html":{}}}],["src/app/mixer/palette/selection/selection.component.ts:23",{"_index":3895,"title":{},"body":{"directives/SelectionComponent.html":{}}}],["src/app/mixer/palette/selection/selection.component.ts:24",{"_index":3893,"title":{},"body":{"directives/SelectionComponent.html":{}}}],["src/app/mixer/palette/selection/selection.component.ts:26",{"_index":3887,"title":{},"body":{"directives/SelectionComponent.html":{}}}],["src/app/mixer/palette/selection/selection.component.ts:31",{"_index":3886,"title":{},"body":{"directives/SelectionComponent.html":{}}}],["src/app/mixer/palette/selection/selection.component.ts:36",{"_index":3888,"title":{},"body":{"directives/SelectionComponent.html":{}}}],["src/app/mixer/palette/snackbar/snackbar.component.ts",{"_index":4097,"title":{},"body":{"components/SnackbarComponent.html":{}}}],["src/app/mixer/palette/snackbar/snackbar.component.ts:13",{"_index":4104,"title":{},"body":{"components/SnackbarComponent.html":{}}}],["src/app/mixer/palette/snackbar/snackbar.component.ts:14",{"_index":4107,"title":{},"body":{"components/SnackbarComponent.html":{}}}],["src/app/mixer/palette/snackbar/snackbar.component.ts:15",{"_index":4102,"title":{},"body":{"components/SnackbarComponent.html":{}}}],["src/app/mixer/palette/snackbar/snackbar.component.ts:17",{"_index":4106,"title":{},"body":{"components/SnackbarComponent.html":{}}}],["src/app/mixer/palette/snackbar/snackbar.component.ts:23",{"_index":4103,"title":{},"body":{"components/SnackbarComponent.html":{}}}],["src/app/mixer/palette/subdraft/subdraft.component.ts",{"_index":1287,"title":{},"body":{"interfaces/DesignActions.html":{}}}],["src/app/mixer/provider/ink.service.ts",{"_index":2303,"title":{},"body":{"interfaces/Ink.html":{},"injectables/InkService.html":{}}}],["src/app/mixer/provider/ink.service.ts:100",{"_index":2376,"title":{},"body":{"injectables/InkService.html":{}}}],["src/app/mixer/provider/ink.service.ts:109",{"_index":2378,"title":{},"body":{"injectables/InkService.html":{}}}],["src/app/mixer/provider/ink.service.ts:19",{"_index":2381,"title":{},"body":{"injectables/InkService.html":{}}}],["src/app/mixer/provider/ink.service.ts:20",{"_index":2372,"title":{},"body":{"injectables/InkService.html":{}}}],["src/app/mixer/provider/ink.service.ts:41",{"_index":2375,"title":{},"body":{"injectables/InkService.html":{}}}],["src/app/mixer/provider/ink.service.ts:45",{"_index":2380,"title":{},"body":{"injectables/InkService.html":{}}}],["src/app/mixer/provider/ink.service.ts:56",{"_index":2374,"title":{},"body":{"injectables/InkService.html":{}}}],["src/app/mixer/provider/ink.service.ts:68",{"_index":2373,"title":{},"body":{"injectables/InkService.html":{}}}],["src/app/mixer/provider/ink.service.ts:77",{"_index":2379,"title":{},"body":{"injectables/InkService.html":{}}}],["src/app/mixer/provider/layers.service.ts",{"_index":2496,"title":{},"body":{"injectables/LayersService.html":{}}}],["src/app/mixer/provider/layers.service.ts:13",{"_index":2504,"title":{},"body":{"injectables/LayersService.html":{}}}],["src/app/mixer/provider/layers.service.ts:19",{"_index":2506,"title":{},"body":{"injectables/LayersService.html":{}}}],["src/app/mixer/provider/layers.service.ts:24",{"_index":2505,"title":{},"body":{"injectables/LayersService.html":{}}}],["src/app/mixer/provider/layers.service.ts:28",{"_index":2507,"title":{},"body":{"injectables/LayersService.html":{}}}],["src/app/mixer/provider/operation.service.ts",{"_index":4643,"title":{},"body":{"miscellaneous/typealiases.html":{}}}],["src/app/mixer/provider/viewport.service.ts",{"_index":4176,"title":{},"body":{"injectables/ViewportService.html":{}}}],["src/app/mixer/provider/viewport.service.ts:104",{"_index":4211,"title":{},"body":{"injectables/ViewportService.html":{}}}],["src/app/mixer/provider/viewport.service.ts:110",{"_index":4220,"title":{},"body":{"injectables/ViewportService.html":{}}}],["src/app/mixer/provider/viewport.service.ts:114",{"_index":4202,"title":{},"body":{"injectables/ViewportService.html":{}}}],["src/app/mixer/provider/viewport.service.ts:118",{"_index":4197,"title":{},"body":{"injectables/ViewportService.html":{}}}],["src/app/mixer/provider/viewport.service.ts:122",{"_index":4215,"title":{},"body":{"injectables/ViewportService.html":{}}}],["src/app/mixer/provider/viewport.service.ts:126",{"_index":4200,"title":{},"body":{"injectables/ViewportService.html":{}}}],["src/app/mixer/provider/viewport.service.ts:130",{"_index":4196,"title":{},"body":{"injectables/ViewportService.html":{}}}],["src/app/mixer/provider/viewport.service.ts:134",{"_index":4217,"title":{},"body":{"injectables/ViewportService.html":{}}}],["src/app/mixer/provider/viewport.service.ts:138",{"_index":4201,"title":{},"body":{"injectables/ViewportService.html":{}}}],["src/app/mixer/provider/viewport.service.ts:142",{"_index":4198,"title":{},"body":{"injectables/ViewportService.html":{}}}],["src/app/mixer/provider/viewport.service.ts:150",{"_index":4199,"title":{},"body":{"injectables/ViewportService.html":{}}}],["src/app/mixer/provider/viewport.service.ts:162",{"_index":4218,"title":{},"body":{"injectables/ViewportService.html":{}}}],["src/app/mixer/provider/viewport.service.ts:17",{"_index":4224,"title":{},"body":{"injectables/ViewportService.html":{}}}],["src/app/mixer/provider/viewport.service.ts:22",{"_index":4228,"title":{},"body":{"injectables/ViewportService.html":{}}}],["src/app/mixer/provider/viewport.service.ts:28",{"_index":4192,"title":{},"body":{"injectables/ViewportService.html":{}}}],["src/app/mixer/provider/viewport.service.ts:48",{"_index":4195,"title":{},"body":{"injectables/ViewportService.html":{}}}],["src/app/mixer/provider/viewport.service.ts:57",{"_index":4194,"title":{},"body":{"injectables/ViewportService.html":{}}}],["src/app/mixer/provider/viewport.service.ts:65",{"_index":4207,"title":{},"body":{"injectables/ViewportService.html":{}}}],["src/app/mixer/provider/viewport.service.ts:74",{"_index":4222,"title":{},"body":{"injectables/ViewportService.html":{}}}],["src/app/mixer/provider/viewport.service.ts:81",{"_index":4213,"title":{},"body":{"injectables/ViewportService.html":{}}}],["src/app/mixer/provider/viewport.service.ts:91",{"_index":4204,"title":{},"body":{"injectables/ViewportService.html":{}}}],["src/app/player/model/dbnodes.ts",{"_index":921,"title":{},"body":{"classes/DBListener.html":{},"classes/DBListenerArray.html":{},"classes/DBNode.html":{},"classes/DBNodeArray.html":{},"classes/DBTwoWay.html":{},"classes/DBTwoWayArray.html":{},"classes/DBWriteBuffer.html":{},"classes/DBWriter.html":{},"classes/DBWriterArray.html":{},"interfaces/NodeMethods.html":{},"interfaces/NodeParams.html":{},"classes/OnlineStatus.html":{},"miscellaneous/typealiases.html":{}}}],["src/app/player/model/dbnodes.ts:102",{"_index":1195,"title":{},"body":{"classes/DBNode.html":{}}}],["src/app/player/model/dbnodes.ts:109",{"_index":1183,"title":{},"body":{"classes/DBNode.html":{}}}],["src/app/player/model/dbnodes.ts:110",{"_index":1184,"title":{},"body":{"classes/DBNode.html":{}}}],["src/app/player/model/dbnodes.ts:126",{"_index":935,"title":{},"body":{"classes/DBListener.html":{}}}],["src/app/player/model/dbnodes.ts:141",{"_index":953,"title":{},"body":{"classes/DBListener.html":{}}}],["src/app/player/model/dbnodes.ts:169",{"_index":1250,"title":{},"body":{"classes/DBWriter.html":{}}}],["src/app/player/model/dbnodes.ts:171",{"_index":1247,"title":{},"body":{"classes/DBWriter.html":{}}}],["src/app/player/model/dbnodes.ts:181",{"_index":1253,"title":{},"body":{"classes/DBWriter.html":{}}}],["src/app/player/model/dbnodes.ts:201",{"_index":1236,"title":{},"body":{"classes/DBWriteBuffer.html":{}}}],["src/app/player/model/dbnodes.ts:225",{"_index":1208,"title":{},"body":{"classes/DBTwoWay.html":{}}}],["src/app/player/model/dbnodes.ts:23",{"_index":2860,"title":{},"body":{"interfaces/NodeMethods.html":{}}}],["src/app/player/model/dbnodes.ts:24",{"_index":2861,"title":{},"body":{"interfaces/NodeMethods.html":{}}}],["src/app/player/model/dbnodes.ts:240",{"_index":1217,"title":{},"body":{"classes/DBTwoWay.html":{}}}],["src/app/player/model/dbnodes.ts:258",{"_index":1218,"title":{},"body":{"classes/DBTwoWay.html":{}}}],["src/app/player/model/dbnodes.ts:267",{"_index":1198,"title":{},"body":{"classes/DBNodeArray.html":{}}}],["src/app/player/model/dbnodes.ts:268",{"_index":1197,"title":{},"body":{"classes/DBNodeArray.html":{}}}],["src/app/player/model/dbnodes.ts:269",{"_index":1196,"title":{},"body":{"classes/DBNodeArray.html":{}}}],["src/app/player/model/dbnodes.ts:281",{"_index":1203,"title":{},"body":{"classes/DBNodeArray.html":{}}}],["src/app/player/model/dbnodes.ts:283",{"_index":1204,"title":{},"body":{"classes/DBNodeArray.html":{}}}],["src/app/player/model/dbnodes.ts:285",{"_index":1206,"title":{},"body":{"classes/DBNodeArray.html":{}}}],["src/app/player/model/dbnodes.ts:287",{"_index":1199,"title":{},"body":{"classes/DBNodeArray.html":{}}}],["src/app/player/model/dbnodes.ts:294",{"_index":1201,"title":{},"body":{"classes/DBNodeArray.html":{}}}],["src/app/player/model/dbnodes.ts:298",{"_index":1200,"title":{},"body":{"classes/DBNodeArray.html":{}}}],["src/app/player/model/dbnodes.ts:321",{"_index":1163,"title":{},"body":{"classes/DBListenerArray.html":{}}}],["src/app/player/model/dbnodes.ts:33",{"_index":1181,"title":{},"body":{"classes/DBNode.html":{}}}],["src/app/player/model/dbnodes.ts:334",{"_index":1168,"title":{},"body":{"classes/DBListenerArray.html":{}}}],["src/app/player/model/dbnodes.ts:34",{"_index":1182,"title":{},"body":{"classes/DBNode.html":{}}}],["src/app/player/model/dbnodes.ts:35",{"_index":1179,"title":{},"body":{"classes/DBNode.html":{}}}],["src/app/player/model/dbnodes.ts:36",{"_index":1178,"title":{},"body":{"classes/DBNode.html":{}}}],["src/app/player/model/dbnodes.ts:368",{"_index":1170,"title":{},"body":{"classes/DBListenerArray.html":{}}}],["src/app/player/model/dbnodes.ts:37",{"_index":1180,"title":{},"body":{"classes/DBNode.html":{}}}],["src/app/player/model/dbnodes.ts:38",{"_index":1177,"title":{},"body":{"classes/DBNode.html":{}}}],["src/app/player/model/dbnodes.ts:388",{"_index":1167,"title":{},"body":{"classes/DBListenerArray.html":{}}}],["src/app/player/model/dbnodes.ts:404",{"_index":1169,"title":{},"body":{"classes/DBListenerArray.html":{}}}],["src/app/player/model/dbnodes.ts:438",{"_index":1172,"title":{},"body":{"classes/DBListenerArray.html":{}}}],["src/app/player/model/dbnodes.ts:44",{"_index":1176,"title":{},"body":{"classes/DBNode.html":{}}}],["src/app/player/model/dbnodes.ts:460",{"_index":1255,"title":{},"body":{"classes/DBWriterArray.html":{}}}],["src/app/player/model/dbnodes.ts:472",{"_index":1259,"title":{},"body":{"classes/DBWriterArray.html":{}}}],["src/app/player/model/dbnodes.ts:480",{"_index":1260,"title":{},"body":{"classes/DBWriterArray.html":{}}}],["src/app/player/model/dbnodes.ts:486",{"_index":1262,"title":{},"body":{"classes/DBWriterArray.html":{}}}],["src/app/player/model/dbnodes.ts:498",{"_index":1261,"title":{},"body":{"classes/DBWriterArray.html":{}}}],["src/app/player/model/dbnodes.ts:518",{"_index":1222,"title":{},"body":{"classes/DBTwoWayArray.html":{}}}],["src/app/player/model/dbnodes.ts:529",{"_index":1226,"title":{},"body":{"classes/DBTwoWayArray.html":{}}}],["src/app/player/model/dbnodes.ts:538",{"_index":1230,"title":{},"body":{"classes/DBTwoWayArray.html":{}}}],["src/app/player/model/dbnodes.ts:547",{"_index":1232,"title":{},"body":{"classes/DBTwoWayArray.html":{}}}],["src/app/player/model/dbnodes.ts:553",{"_index":1231,"title":{},"body":{"classes/DBTwoWayArray.html":{}}}],["src/app/player/model/dbnodes.ts:559",{"_index":1234,"title":{},"body":{"classes/DBTwoWayArray.html":{}}}],["src/app/player/model/dbnodes.ts:571",{"_index":1233,"title":{},"body":{"classes/DBTwoWayArray.html":{}}}],["src/app/player/model/dbnodes.ts:578",{"_index":1227,"title":{},"body":{"classes/DBTwoWayArray.html":{}}}],["src/app/player/model/dbnodes.ts:612",{"_index":1229,"title":{},"body":{"classes/DBTwoWayArray.html":{}}}],["src/app/player/model/dbnodes.ts:627",{"_index":1228,"title":{},"body":{"classes/DBTwoWayArray.html":{}}}],["src/app/player/model/dbnodes.ts:649",{"_index":2953,"title":{},"body":{"classes/OnlineStatus.html":{}}}],["src/app/player/model/dbnodes.ts:651",{"_index":2950,"title":{},"body":{"classes/OnlineStatus.html":{}}}],["src/app/player/model/dbnodes.ts:663",{"_index":2955,"title":{},"body":{"classes/OnlineStatus.html":{}}}],["src/app/player/model/dbnodes.ts:72",{"_index":1186,"title":{},"body":{"classes/DBNode.html":{}}}],["src/app/player/model/dbnodes.ts:76",{"_index":1188,"title":{},"body":{"classes/DBNode.html":{}}}],["src/app/player/model/dbnodes.ts:80",{"_index":1190,"title":{},"body":{"classes/DBNode.html":{}}}],["src/app/player/model/dbnodes.ts:94",{"_index":1191,"title":{},"body":{"classes/DBNode.html":{}}}],["src/app/player/model/dbnodes.ts:98",{"_index":1193,"title":{},"body":{"classes/DBNode.html":{}}}],["src/app/player/model/op_mappings.ts",{"_index":499,"title":{},"body":{"interfaces/ChainOp.html":{},"interfaces/PairedOp.html":{},"interfaces/PedalEvent.html":{},"interfaces/PlayerOp.html":{},"miscellaneous/functions.html":{},"miscellaneous/typealiases.html":{}}}],["src/app/player/model/player.ts",{"_index":3726,"title":{},"body":{"interfaces/PlayerState.html":{},"interfaces/WeavingLog.html":{},"interfaces/WeavingPick.html":{},"miscellaneous/functions.html":{}}}],["src/app/player/model/sequencer.ts",{"_index":3010,"title":{},"body":{"classes/OpSequencer.html":{},"miscellaneous/functions.html":{}}}],["src/app/player/model/sequencer.ts:104",{"_index":3047,"title":{},"body":{"classes/OpSequencer.html":{}}}],["src/app/player/model/sequencer.ts:12",{"_index":3031,"title":{},"body":{"classes/OpSequencer.html":{}}}],["src/app/player/model/sequencer.ts:13",{"_index":3034,"title":{},"body":{"classes/OpSequencer.html":{}}}],["src/app/player/model/sequencer.ts:14",{"_index":3035,"title":{},"body":{"classes/OpSequencer.html":{}}}],["src/app/player/model/sequencer.ts:15",{"_index":3033,"title":{},"body":{"classes/OpSequencer.html":{}}}],["src/app/player/model/sequencer.ts:16",{"_index":3030,"title":{},"body":{"classes/OpSequencer.html":{}}}],["src/app/player/model/sequencer.ts:17",{"_index":3032,"title":{},"body":{"classes/OpSequencer.html":{}}}],["src/app/player/model/sequencer.ts:18",{"_index":3024,"title":{},"body":{"classes/OpSequencer.html":{}}}],["src/app/player/model/sequencer.ts:43",{"_index":3051,"title":{},"body":{"classes/OpSequencer.html":{}}}],["src/app/player/model/sequencer.ts:48",{"_index":3053,"title":{},"body":{"classes/OpSequencer.html":{}}}],["src/app/player/model/sequencer.ts:52",{"_index":3055,"title":{},"body":{"classes/OpSequencer.html":{}}}],["src/app/player/model/sequencer.ts:56",{"_index":3044,"title":{},"body":{"classes/OpSequencer.html":{}}}],["src/app/player/model/sequencer.ts:69",{"_index":3041,"title":{},"body":{"classes/OpSequencer.html":{}}}],["src/app/player/model/sequencer.ts:74",{"_index":3045,"title":{},"body":{"classes/OpSequencer.html":{}}}],["src/app/player/model/sequencer.ts:81",{"_index":3048,"title":{},"body":{"classes/OpSequencer.html":{}}}],["src/app/player/model/sequencer.ts:88",{"_index":3037,"title":{},"body":{"classes/OpSequencer.html":{}}}],["src/app/player/model/sequencer.ts:94",{"_index":3049,"title":{},"body":{"classes/OpSequencer.html":{}}}],["src/app/player/model/sequencer.ts:99",{"_index":3039,"title":{},"body":{"classes/OpSequencer.html":{}}}],["src/app/player/model/state.ts",{"_index":3740,"title":{},"body":{"interfaces/PlayerState-1.html":{},"interfaces/WeavingPick-1.html":{},"miscellaneous/functions.html":{}}}],["src/app/player/op",{"_index":3081,"title":{},"body":{"components/OpSequencerComponent.html":{}}}],["src/app/player/player.component.ts",{"_index":3612,"title":{},"body":{"components/PlayerComponent.html":{}}}],["src/app/player/player.component.ts:16",{"_index":3635,"title":{},"body":{"components/PlayerComponent.html":{}}}],["src/app/player/player.component.ts:17",{"_index":3630,"title":{},"body":{"components/PlayerComponent.html":{}}}],["src/app/player/player.component.ts:19",{"_index":3623,"title":{},"body":{"components/PlayerComponent.html":{}}}],["src/app/player/player.component.ts:20",{"_index":3624,"title":{},"body":{"components/PlayerComponent.html":{}}}],["src/app/player/player.component.ts:32",{"_index":3632,"title":{},"body":{"components/PlayerComponent.html":{}}}],["src/app/player/player.component.ts:33",{"_index":3631,"title":{},"body":{"components/PlayerComponent.html":{}}}],["src/app/player/player.component.ts:34",{"_index":3622,"title":{},"body":{"components/PlayerComponent.html":{}}}],["src/app/player/player.component.ts:37",{"_index":3633,"title":{},"body":{"components/PlayerComponent.html":{}}}],["src/app/player/player.component.ts:42",{"_index":3627,"title":{},"body":{"components/PlayerComponent.html":{}}}],["src/app/player/player.component.ts:47",{"_index":3626,"title":{},"body":{"components/PlayerComponent.html":{}}}],["src/app/player/player.component.ts:76",{"_index":3628,"title":{},"body":{"components/PlayerComponent.html":{}}}],["src/app/player/player.component.ts:83",{"_index":3625,"title":{},"body":{"components/PlayerComponent.html":{}}}],["src/app/player/player.module.ts",{"_index":3689,"title":{},"body":{"modules/PlayerModule.html":{}}}],["src/app/player/player.service.ts",{"_index":1678,"title":{},"body":{"interfaces/DraftOperationClassification.html":{},"interfaces/LoomConfig.html":{},"classes/PedalConfig.html":{},"injectables/PlayerService.html":{}}}],["src/app/player/player.service.ts:104",{"_index":3520,"title":{},"body":{"classes/PedalConfig.html":{}}}],["src/app/player/player.service.ts:121",{"_index":3521,"title":{},"body":{"classes/PedalConfig.html":{}}}],["src/app/player/player.service.ts:127",{"_index":3524,"title":{},"body":{"classes/PedalConfig.html":{}}}],["src/app/player/player.service.ts:131",{"_index":3523,"title":{},"body":{"classes/PedalConfig.html":{}}}],["src/app/player/player.service.ts:136",{"_index":3525,"title":{},"body":{"classes/PedalConfig.html":{}}}],["src/app/player/player.service.ts:140",{"_index":3527,"title":{},"body":{"classes/PedalConfig.html":{}}}],["src/app/player/player.service.ts:160",{"_index":3720,"title":{},"body":{"injectables/PlayerService.html":{}}}],["src/app/player/player.service.ts:161",{"_index":3715,"title":{},"body":{"injectables/PlayerService.html":{}}}],["src/app/player/player.service.ts:162",{"_index":3718,"title":{},"body":{"injectables/PlayerService.html":{}}}],["src/app/player/player.service.ts:163",{"_index":3703,"title":{},"body":{"injectables/PlayerService.html":{}}}],["src/app/player/player.service.ts:166",{"_index":3717,"title":{},"body":{"injectables/PlayerService.html":{}}}],["src/app/player/player.service.ts:167",{"_index":3716,"title":{},"body":{"injectables/PlayerService.html":{}}}],["src/app/player/player.service.ts:168",{"_index":3719,"title":{},"body":{"injectables/PlayerService.html":{}}}],["src/app/player/player.service.ts:269",{"_index":3721,"title":{},"body":{"injectables/PlayerService.html":{}}}],["src/app/player/player.service.ts:275",{"_index":3723,"title":{},"body":{"injectables/PlayerService.html":{}}}],["src/app/player/player.service.ts:278",{"_index":3725,"title":{},"body":{"injectables/PlayerService.html":{}}}],["src/app/player/player.service.ts:282",{"_index":3707,"title":{},"body":{"injectables/PlayerService.html":{}}}],["src/app/player/player.service.ts:291",{"_index":3709,"title":{},"body":{"injectables/PlayerService.html":{}}}],["src/app/player/player.service.ts:310",{"_index":3711,"title":{},"body":{"injectables/PlayerService.html":{}}}],["src/app/player/player.service.ts:325",{"_index":3710,"title":{},"body":{"injectables/PlayerService.html":{}}}],["src/app/player/player.service.ts:334",{"_index":3708,"title":{},"body":{"injectables/PlayerService.html":{}}}],["src/app/player/player.service.ts:367",{"_index":3706,"title":{},"body":{"injectables/PlayerService.html":{}}}],["src/app/player/player.service.ts:386",{"_index":3713,"title":{},"body":{"injectables/PlayerService.html":{}}}],["src/app/player/player.service.ts:392",{"_index":3705,"title":{},"body":{"injectables/PlayerService.html":{}}}],["src/app/player/player.service.ts:398",{"_index":3714,"title":{},"body":{"injectables/PlayerService.html":{}}}],["src/app/player/player.service.ts:44",{"_index":3516,"title":{},"body":{"classes/PedalConfig.html":{}}}],["src/app/player/player.service.ts:45",{"_index":3515,"title":{},"body":{"classes/PedalConfig.html":{}}}],["src/app/player/player.service.ts:46",{"_index":3514,"title":{},"body":{"classes/PedalConfig.html":{}}}],["src/app/player/player.service.ts:47",{"_index":3513,"title":{},"body":{"classes/PedalConfig.html":{}}}],["src/app/player/player.service.ts:56",{"_index":3529,"title":{},"body":{"classes/PedalConfig.html":{}}}],["src/app/player/player.service.ts:60",{"_index":3531,"title":{},"body":{"classes/PedalConfig.html":{}}}],["src/app/player/player.service.ts:64",{"_index":3518,"title":{},"body":{"classes/PedalConfig.html":{}}}],["src/app/player/player.service.ts:69",{"_index":3526,"title":{},"body":{"classes/PedalConfig.html":{}}}],["src/app/player/player.service.ts:74",{"_index":3517,"title":{},"body":{"classes/PedalConfig.html":{}}}],["src/app/player/player.service.ts:84",{"_index":3522,"title":{},"body":{"classes/PedalConfig.html":{}}}],["src/app/player/player.service.ts:91",{"_index":3519,"title":{},"body":{"classes/PedalConfig.html":{}}}],["src/app/player/provider/mappings.service.ts",{"_index":2511,"title":{},"body":{"injectables/MappingsService.html":{},"miscellaneous/functions.html":{},"miscellaneous/typealiases.html":{}}}],["src/app/player/provider/mappings.service.ts:107",{"_index":2551,"title":{},"body":{"injectables/MappingsService.html":{}}}],["src/app/player/provider/mappings.service.ts:127",{"_index":2553,"title":{},"body":{"injectables/MappingsService.html":{}}}],["src/app/player/provider/mappings.service.ts:141",{"_index":2544,"title":{},"body":{"injectables/MappingsService.html":{}}}],["src/app/player/provider/mappings.service.ts:149",{"_index":2533,"title":{},"body":{"injectables/MappingsService.html":{}}}],["src/app/player/provider/mappings.service.ts:162",{"_index":2535,"title":{},"body":{"injectables/MappingsService.html":{}}}],["src/app/player/provider/mappings.service.ts:183",{"_index":2542,"title":{},"body":{"injectables/MappingsService.html":{}}}],["src/app/player/provider/mappings.service.ts:190",{"_index":2541,"title":{},"body":{"injectables/MappingsService.html":{}}}],["src/app/player/provider/mappings.service.ts:197",{"_index":2548,"title":{},"body":{"injectables/MappingsService.html":{}}}],["src/app/player/provider/mappings.service.ts:202",{"_index":2547,"title":{},"body":{"injectables/MappingsService.html":{}}}],["src/app/player/provider/mappings.service.ts:207",{"_index":2546,"title":{},"body":{"injectables/MappingsService.html":{}}}],["src/app/player/provider/mappings.service.ts:212",{"_index":2549,"title":{},"body":{"injectables/MappingsService.html":{}}}],["src/app/player/provider/mappings.service.ts:40",{"_index":2556,"title":{},"body":{"injectables/MappingsService.html":{}}}],["src/app/player/provider/mappings.service.ts:41",{"_index":2554,"title":{},"body":{"injectables/MappingsService.html":{}}}],["src/app/player/provider/mappings.service.ts:45",{"_index":2530,"title":{},"body":{"injectables/MappingsService.html":{}}}],["src/app/player/provider/mappings.service.ts:48",{"_index":2557,"title":{},"body":{"injectables/MappingsService.html":{}}}],["src/app/player/provider/mappings.service.ts:59",{"_index":2559,"title":{},"body":{"injectables/MappingsService.html":{}}}],["src/app/player/provider/mappings.service.ts:65",{"_index":2539,"title":{},"body":{"injectables/MappingsService.html":{}}}],["src/app/player/provider/mappings.service.ts:90",{"_index":2531,"title":{},"body":{"injectables/MappingsService.html":{}}}],["src/app/player/provider/mappings.service.ts:99",{"_index":2537,"title":{},"body":{"injectables/MappingsService.html":{}}}],["src/app/player/provider/pedals.service.ts",{"_index":3362,"title":{},"body":{"interfaces/Pedal.html":{},"classes/PedalStatus.html":{},"injectables/PedalsService.html":{}}}],["src/app/player/provider/pedals.service.ts:105",{"_index":3545,"title":{},"body":{"classes/PedalStatus.html":{}}}],["src/app/player/provider/pedals.service.ts:128",{"_index":3577,"title":{},"body":{"injectables/PedalsService.html":{}}}],["src/app/player/provider/pedals.service.ts:129",{"_index":3578,"title":{},"body":{"injectables/PedalsService.html":{}}}],["src/app/player/provider/pedals.service.ts:132",{"_index":3580,"title":{},"body":{"injectables/PedalsService.html":{}}}],["src/app/player/provider/pedals.service.ts:142",{"_index":3579,"title":{},"body":{"injectables/PedalsService.html":{}}}],["src/app/player/provider/pedals.service.ts:143",{"_index":3581,"title":{},"body":{"injectables/PedalsService.html":{}}}],["src/app/player/provider/pedals.service.ts:145",{"_index":3582,"title":{},"body":{"injectables/PedalsService.html":{}}}],["src/app/player/provider/pedals.service.ts:147",{"_index":3556,"title":{},"body":{"injectables/PedalsService.html":{}}}],["src/app/player/provider/pedals.service.ts:237",{"_index":3585,"title":{},"body":{"injectables/PedalsService.html":{}}}],["src/app/player/provider/pedals.service.ts:238",{"_index":3587,"title":{},"body":{"injectables/PedalsService.html":{}}}],["src/app/player/provider/pedals.service.ts:241",{"_index":3589,"title":{},"body":{"injectables/PedalsService.html":{}}}],["src/app/player/provider/pedals.service.ts:242",{"_index":3591,"title":{},"body":{"injectables/PedalsService.html":{}}}],["src/app/player/provider/pedals.service.ts:243",{"_index":3593,"title":{},"body":{"injectables/PedalsService.html":{}}}],["src/app/player/provider/pedals.service.ts:244",{"_index":3595,"title":{},"body":{"injectables/PedalsService.html":{}}}],["src/app/player/provider/pedals.service.ts:245",{"_index":3597,"title":{},"body":{"injectables/PedalsService.html":{}}}],["src/app/player/provider/pedals.service.ts:248",{"_index":3599,"title":{},"body":{"injectables/PedalsService.html":{}}}],["src/app/player/provider/pedals.service.ts:249",{"_index":3601,"title":{},"body":{"injectables/PedalsService.html":{}}}],["src/app/player/provider/pedals.service.ts:250",{"_index":3603,"title":{},"body":{"injectables/PedalsService.html":{}}}],["src/app/player/provider/pedals.service.ts:253",{"_index":3605,"title":{},"body":{"injectables/PedalsService.html":{}}}],["src/app/player/provider/pedals.service.ts:254",{"_index":3607,"title":{},"body":{"injectables/PedalsService.html":{}}}],["src/app/player/provider/pedals.service.ts:255",{"_index":3609,"title":{},"body":{"injectables/PedalsService.html":{}}}],["src/app/player/provider/pedals.service.ts:257",{"_index":3610,"title":{},"body":{"injectables/PedalsService.html":{}}}],["src/app/player/provider/pedals.service.ts:260",{"_index":3561,"title":{},"body":{"injectables/PedalsService.html":{}}}],["src/app/player/provider/pedals.service.ts:266",{"_index":3574,"title":{},"body":{"injectables/PedalsService.html":{}}}],["src/app/player/provider/pedals.service.ts:270",{"_index":3557,"title":{},"body":{"injectables/PedalsService.html":{}}}],["src/app/player/provider/pedals.service.ts:274",{"_index":3571,"title":{},"body":{"injectables/PedalsService.html":{}}}],["src/app/player/provider/pedals.service.ts:282",{"_index":3570,"title":{},"body":{"injectables/PedalsService.html":{}}}],["src/app/player/provider/pedals.service.ts:288",{"_index":3565,"title":{},"body":{"injectables/PedalsService.html":{}}}],["src/app/player/provider/pedals.service.ts:293",{"_index":3559,"title":{},"body":{"injectables/PedalsService.html":{}}}],["src/app/player/provider/pedals.service.ts:304",{"_index":3576,"title":{},"body":{"injectables/PedalsService.html":{}}}],["src/app/player/provider/pedals.service.ts:317",{"_index":3572,"title":{},"body":{"injectables/PedalsService.html":{}}}],["src/app/player/provider/pedals.service.ts:327",{"_index":3567,"title":{},"body":{"injectables/PedalsService.html":{}}}],["src/app/player/provider/pedals.service.ts:33",{"_index":3541,"title":{},"body":{"classes/PedalStatus.html":{}}}],["src/app/player/provider/pedals.service.ts:333",{"_index":3563,"title":{},"body":{"injectables/PedalsService.html":{}}}],["src/app/player/provider/pedals.service.ts:34",{"_index":3534,"title":{},"body":{"classes/PedalStatus.html":{}}}],["src/app/player/provider/pedals.service.ts:35",{"_index":3544,"title":{},"body":{"classes/PedalStatus.html":{}}}],["src/app/player/provider/pedals.service.ts:36",{"_index":3535,"title":{},"body":{"classes/PedalStatus.html":{}}}],["src/app/player/provider/pedals.service.ts:38",{"_index":3533,"title":{},"body":{"classes/PedalStatus.html":{}}}],["src/app/player/provider/pedals.service.ts:39",{"_index":3537,"title":{},"body":{"classes/PedalStatus.html":{}}}],["src/app/player/provider/pedals.service.ts:40",{"_index":3542,"title":{},"body":{"classes/PedalStatus.html":{}}}],["src/app/player/provider/pedals.service.ts:42",{"_index":3536,"title":{},"body":{"classes/PedalStatus.html":{}}}],["src/app/player/provider/pedals.service.ts:43",{"_index":3540,"title":{},"body":{"classes/PedalStatus.html":{}}}],["src/app/player/provider/pedals.service.ts:44",{"_index":3539,"title":{},"body":{"classes/PedalStatus.html":{}}}],["src/app/player/provider/pedals.service.ts:46",{"_index":3538,"title":{},"body":{"classes/PedalStatus.html":{}}}],["src/app/player/provider/pedals.service.ts:47",{"_index":3543,"title":{},"body":{"classes/PedalStatus.html":{}}}],["src/app/player/provider/pedals.service.ts:48",{"_index":3532,"title":{},"body":{"classes/PedalStatus.html":{}}}],["src/app/player/provider/sequencer.service.ts",{"_index":423,"title":{},"body":{"interfaces/ChainIndex.html":{},"injectables/SequencerService.html":{}}}],["src/app/player/provider/sequencer.service.ts:26",{"_index":3918,"title":{},"body":{"injectables/SequencerService.html":{}}}],["src/app/player/provider/sequencer.service.ts:31",{"_index":3926,"title":{},"body":{"injectables/SequencerService.html":{}}}],["src/app/player/provider/sequencer.service.ts:32",{"_index":3903,"title":{},"body":{"injectables/SequencerService.html":{}}}],["src/app/player/provider/sequencer.service.ts:39",{"_index":3905,"title":{},"body":{"injectables/SequencerService.html":{}}}],["src/app/player/provider/sequencer.service.ts:47",{"_index":3907,"title":{},"body":{"injectables/SequencerService.html":{}}}],["src/app/player/provider/sequencer.service.ts:57",{"_index":3904,"title":{},"body":{"injectables/SequencerService.html":{}}}],["src/app/player/provider/sequencer.service.ts:63",{"_index":3908,"title":{},"body":{"injectables/SequencerService.html":{}}}],["src/app/player/virtual",{"_index":4259,"title":{},"body":{"components/VirtualPedalsComponent.html":{}}}],["src/app/player/weaving",{"_index":4286,"title":{},"body":{"components/WeavingStateComponent.html":{}}}],["ss",{"_index":3768,"title":{},"body":{"classes/Render.html":{}}}],["stage",{"_index":1625,"title":{},"body":{"interfaces/DraftMap.html":{},"interfaces/Interlacement.html":{},"interfaces/InterlacementVal.html":{}}}],["standard",{"_index":190,"title":{},"body":{"classes/AbstractOpFactory.html":{},"classes/BaseOp.html":{},"classes/Branch.html":{},"classes/Bus.html":{},"interfaces/DynamicOperation.html":{},"classes/Merge.html":{},"components/MixerViewComponent.html":{},"interfaces/OpClassifier.html":{},"interfaces/OpInput.html":{},"interfaces/OperationClassification.html":{},"interfaces/OperationProperties.html":{},"classes/Pipe.html":{},"classes/Seed.html":{},"classes/System.html":{},"interfaces/TopologyDef.html":{},"interfaces/TreeOperation.html":{},"miscellaneous/functions.html":{}}}],["standardize",{"_index":4165,"title":{},"body":{"classes/System.html":{}}}],["star",{"_index":3149,"title":{},"body":{"components/OpSequencerComponent.html":{}}}],["start",{"_index":2484,"title":{},"body":{"components/InletComponent.html":{},"directives/MarqueeComponent.html":{},"components/NoteComponent.html":{},"components/OpSequencerComponent.html":{},"components/ParameterComponent.html":{},"interfaces/Pedal.html":{},"classes/PedalStatus.html":{},"injectables/PedalsService.html":{},"components/PlayerComponent.html":{},"classes/Selection.html":{},"directives/SelectionComponent.html":{},"components/WeavingStateComponent.html":{}}}],["start:interlacement",{"_index":2672,"title":{},"body":{"directives/MarqueeComponent.html":{},"directives/SelectionComponent.html":{}}}],["start_ops",{"_index":2640,"title":{},"body":{"injectables/MappingsService.html":{},"classes/OpSequencer.html":{},"miscellaneous/functions.html":{}}}],["startcol",{"_index":3935,"title":{},"body":{"classes/Shape.html":{}}}],["started",{"_index":4424,"title":{"index.html":{}},"body":{}}],["starting",{"_index":1927,"title":{},"body":{"interfaces/DraftOperationClassification.html":{},"interfaces/LoomConfig.html":{},"classes/PedalConfig.html":{},"injectables/PlayerService.html":{}}}],["startlabel",{"_index":4041,"title":{},"body":{"classes/Shuttle.html":{}}}],["startpattern",{"_index":1791,"title":{},"body":{"interfaces/DraftOperationClassification.html":{},"interfaces/LoomConfig.html":{},"classes/PedalConfig.html":{},"components/PlayerComponent.html":{},"injectables/PlayerService.html":{}}}],["startpattern.perform([]).then((result",{"_index":3650,"title":{},"body":{"components/PlayerComponent.html":{}}}],["startpattern.perform(nullopinput).then((result",{"_index":1794,"title":{},"body":{"interfaces/DraftOperationClassification.html":{},"interfaces/LoomConfig.html":{},"classes/PedalConfig.html":{},"injectables/PlayerService.html":{}}}],["starts",{"_index":3982,"title":{},"body":{"classes/Shape.html":{}}}],["startwith",{"_index":3238,"title":{},"body":{"components/OpsComponent.html":{}}}],["state",{"_index":516,"title":{},"body":{"interfaces/ChainOp.html":{},"components/ConnectionComponent.html":{},"interfaces/DraftNodeProxy.html":{},"interfaces/DraftOperationClassification.html":{},"components/DraftdetailComponent.html":{},"interfaces/FileObj.html":{},"interfaces/FileSaver.html":{},"interfaces/Fileloader.html":{},"components/ImageComponent.html":{},"components/InletComponent.html":{},"interfaces/LoadResponse.html":{},"interfaces/LoomConfig.html":{},"components/MixerViewComponent.html":{},"interfaces/NodeComponentProxy.html":{},"components/NoteComponent.html":{},"interfaces/OpComponentProxy.html":{},"components/OpHelpModal.html":{},"components/OpSequencerComponent.html":{},"components/OpsComponent.html":{},"interfaces/PairedOp.html":{},"components/ParameterComponent.html":{},"interfaces/Pedal.html":{},"classes/PedalConfig.html":{},"interfaces/PedalEvent.html":{},"classes/PedalStatus.html":{},"injectables/PedalsService.html":{},"components/PlayerComponent.html":{},"interfaces/PlayerOp.html":{},"injectables/PlayerService.html":{},"interfaces/PlayerState.html":{},"interfaces/PlayerState-1.html":{},"interfaces/SaveObj.html":{},"components/SnackbarComponent.html":{},"interfaces/StatusMessage.html":{},"interfaces/TreeNodeProxy.html":{},"components/VirtualPedalsComponent.html":{},"interfaces/WeavingLog.html":{},"interfaces/WeavingPick.html":{},"interfaces/WeavingPick-1.html":{},"components/WeavingStateComponent.html":{}}}],["state.component",{"_index":3638,"title":{},"body":{"components/PlayerComponent.html":{},"modules/PlayerModule.html":{}}}],["state.component.html",{"_index":4289,"title":{},"body":{"components/WeavingStateComponent.html":{}}}],["state.component.scss",{"_index":4288,"title":{},"body":{"components/WeavingStateComponent.html":{}}}],["state.component.ts",{"_index":4287,"title":{},"body":{"components/WeavingStateComponent.html":{}}}],["state.component.ts:104",{"_index":4306,"title":{},"body":{"components/WeavingStateComponent.html":{}}}],["state.component.ts:16",{"_index":4294,"title":{},"body":{"components/WeavingStateComponent.html":{}}}],["state.component.ts:17",{"_index":4295,"title":{},"body":{"components/WeavingStateComponent.html":{}}}],["state.component.ts:19",{"_index":4310,"title":{},"body":{"components/WeavingStateComponent.html":{}}}],["state.component.ts:20",{"_index":4314,"title":{},"body":{"components/WeavingStateComponent.html":{}}}],["state.component.ts:21",{"_index":4313,"title":{},"body":{"components/WeavingStateComponent.html":{}}}],["state.component.ts:22",{"_index":4311,"title":{},"body":{"components/WeavingStateComponent.html":{}}}],["state.component.ts:23",{"_index":4309,"title":{},"body":{"components/WeavingStateComponent.html":{}}}],["state.component.ts:24",{"_index":4293,"title":{},"body":{"components/WeavingStateComponent.html":{}}}],["state.component.ts:27",{"_index":4316,"title":{},"body":{"components/WeavingStateComponent.html":{}}}],["state.component.ts:28",{"_index":4315,"title":{},"body":{"components/WeavingStateComponent.html":{}}}],["state.component.ts:29",{"_index":4312,"title":{},"body":{"components/WeavingStateComponent.html":{}}}],["state.component.ts:34",{"_index":4308,"title":{},"body":{"components/WeavingStateComponent.html":{}}}],["state.component.ts:36",{"_index":4307,"title":{},"body":{"components/WeavingStateComponent.html":{}}}],["state.component.ts:55",{"_index":4301,"title":{},"body":{"components/WeavingStateComponent.html":{}}}],["state.component.ts:80",{"_index":4298,"title":{},"body":{"components/WeavingStateComponent.html":{}}}],["state/weaving",{"_index":3637,"title":{},"body":{"components/PlayerComponent.html":{},"modules/PlayerModule.html":{},"components/WeavingStateComponent.html":{}}}],["states",{"_index":3394,"title":{},"body":{"interfaces/Pedal.html":{},"classes/PedalStatus.html":{},"injectables/PedalsService.html":{},"interfaces/PlayerState.html":{},"interfaces/WeavingLog.html":{},"interfaces/WeavingPick.html":{}}}],["static",{"_index":297,"title":{},"body":{"classes/AbstractOpFactory.html":{},"classes/BaseOp.html":{},"classes/Branch.html":{},"classes/Bus.html":{},"components/DraftdetailComponent.html":{},"classes/Merge.html":{},"interfaces/OpClassifier.html":{},"interfaces/OperationParam.html":{},"interfaces/OperationProperties.html":{},"classes/Params.html":{},"classes/Pipe.html":{},"classes/Seed.html":{},"interfaces/TopologyDef.html":{}}}],["status",{"_index":1153,"title":{},"body":{"classes/DBListener.html":{},"classes/DBListenerArray.html":{},"classes/DBNode.html":{},"classes/DBNodeArray.html":{},"classes/DBTwoWay.html":{},"classes/DBTwoWayArray.html":{},"classes/DBWriteBuffer.html":{},"classes/DBWriter.html":{},"classes/DBWriterArray.html":{},"interfaces/DraftNodeProxy.html":{},"interfaces/FileObj.html":{},"interfaces/FileSaver.html":{},"interfaces/Fileloader.html":{},"interfaces/LoadResponse.html":{},"interfaces/NodeComponentProxy.html":{},"interfaces/NodeMethods.html":{},"interfaces/NodeParams.html":{},"classes/OnlineStatus.html":{},"interfaces/OpComponentProxy.html":{},"interfaces/Pedal.html":{},"classes/PedalStatus.html":{},"injectables/PedalsService.html":{},"interfaces/SaveObj.html":{},"interfaces/StatusMessage.html":{},"interfaces/TreeNodeProxy.html":{},"components/WeavingStateComponent.html":{}}}],["statuses",{"_index":3368,"title":{},"body":{"interfaces/Pedal.html":{},"classes/PedalStatus.html":{},"injectables/PedalsService.html":{}}}],["statusmessage",{"_index":1668,"title":{"interfaces/StatusMessage.html":{}},"body":{"interfaces/DraftNodeProxy.html":{},"interfaces/FileObj.html":{},"interfaces/FileSaver.html":{},"interfaces/Fileloader.html":{},"interfaces/LoadResponse.html":{},"interfaces/NodeComponentProxy.html":{},"interfaces/OpComponentProxy.html":{},"interfaces/SaveObj.html":{},"interfaces/StatusMessage.html":{},"interfaces/TreeNodeProxy.html":{}}}],["step",{"_index":1863,"title":{},"body":{"interfaces/DraftOperationClassification.html":{},"interfaces/LoomConfig.html":{},"classes/OpSequencer.html":{},"interfaces/Pedal.html":{},"classes/PedalConfig.html":{},"classes/PedalStatus.html":{},"injectables/PedalsService.html":{},"injectables/PlayerService.html":{}}}],["stepped",{"_index":3367,"title":{},"body":{"interfaces/Pedal.html":{},"classes/PedalStatus.html":{},"injectables/PedalsService.html":{}}}],["stitch",{"_index":4466,"title":{},"body":{"index.html":{}}}],["stop",{"_index":4326,"title":{},"body":{"components/WeavingStateComponent.html":{}}}],["store",{"_index":2251,"title":{},"body":{"interfaces/IOTuple.html":{},"interfaces/TreeNode.html":{},"miscellaneous/typealiases.html":{}}}],["stored",{"_index":971,"title":{},"body":{"classes/DBListener.html":{},"classes/DBListenerArray.html":{},"classes/DBNode.html":{},"classes/DBNodeArray.html":{},"classes/DBTwoWay.html":{},"classes/DBTwoWayArray.html":{},"classes/DBWriteBuffer.html":{},"classes/DBWriter.html":{},"classes/DBWriterArray.html":{},"interfaces/IOTuple.html":{},"interfaces/NodeMethods.html":{},"interfaces/NodeParams.html":{},"classes/OnlineStatus.html":{},"interfaces/TreeNode.html":{},"components/WeavingStateComponent.html":{},"index.html":{}}}],["stores",{"_index":880,"title":{},"body":{"interfaces/Crossing.html":{},"classes/DBListener.html":{},"classes/DBListenerArray.html":{},"classes/DBNode.html":{},"classes/DBNodeArray.html":{},"classes/DBTwoWay.html":{},"classes/DBTwoWayArray.html":{},"classes/DBWriteBuffer.html":{},"classes/DBWriter.html":{},"classes/DBWriterArray.html":{},"interfaces/DensityUnits.html":{},"interfaces/DesignMode.html":{},"interfaces/DraftMap.html":{},"interfaces/DraftNodeProxy.html":{},"interfaces/FileObj.html":{},"interfaces/FileSaver.html":{},"interfaces/Fileloader.html":{},"interfaces/IOTuple.html":{},"interfaces/Interlacement.html":{},"interfaces/InterlacementVal.html":{},"interfaces/LoadResponse.html":{},"interfaces/LoomTypes.html":{},"interfaces/MaterialTypes.html":{},"interfaces/NodeComponentProxy.html":{},"interfaces/NodeMethods.html":{},"interfaces/NodeParams.html":{},"classes/OnlineStatus.html":{},"interfaces/OpComponentProxy.html":{},"interfaces/SaveObj.html":{},"interfaces/StatusMessage.html":{},"interfaces/TreeNode.html":{},"interfaces/TreeNodeProxy.html":{},"interfaces/Vertex.html":{},"interfaces/ViewModes.html":{},"interfaces/YarnPath.html":{},"index.html":{},"miscellaneous/typealiases.html":{}}}],["str",{"_index":1114,"title":{},"body":{"classes/DBListener.html":{},"classes/DBListenerArray.html":{},"classes/DBNode.html":{},"classes/DBNodeArray.html":{},"classes/DBTwoWay.html":{},"classes/DBTwoWayArray.html":{},"classes/DBWriteBuffer.html":{},"classes/DBWriter.html":{},"classes/DBWriterArray.html":{},"interfaces/NodeMethods.html":{},"interfaces/NodeParams.html":{},"classes/OnlineStatus.html":{},"interfaces/Pedal.html":{},"classes/PedalStatus.html":{},"injectables/PedalsService.html":{}}}],["stretch",{"_index":1836,"title":{},"body":{"interfaces/DraftOperationClassification.html":{},"interfaces/LoomConfig.html":{},"classes/PedalConfig.html":{},"injectables/PlayerService.html":{}}}],["string",{"_index":187,"title":{},"body":{"classes/AbstractOpFactory.html":{},"classes/BaseOp.html":{},"classes/Branch.html":{},"classes/Bus.html":{},"interfaces/ChainOp.html":{},"classes/DBListener.html":{},"classes/DBListenerArray.html":{},"classes/DBNode.html":{},"classes/DBNodeArray.html":{},"classes/DBTwoWay.html":{},"classes/DBTwoWayArray.html":{},"classes/DBWriteBuffer.html":{},"classes/DBWriter.html":{},"classes/DBWriterArray.html":{},"interfaces/DensityUnits.html":{},"interfaces/DesignActions.html":{},"interfaces/DesignMode.html":{},"interfaces/DraftMap.html":{},"interfaces/DraftNodeProxy.html":{},"interfaces/DraftOperationClassification.html":{},"components/DraftdetailComponent.html":{},"interfaces/DynamicOperation.html":{},"interfaces/FileObj.html":{},"interfaces/FileSaver.html":{},"interfaces/Fileloader.html":{},"interfaces/IOTuple.html":{},"interfaces/Ink.html":{},"injectables/InkService.html":{},"components/InletComponent.html":{},"interfaces/Interlacement.html":{},"interfaces/InterlacementVal.html":{},"interfaces/LoadResponse.html":{},"interfaces/LoomConfig.html":{},"interfaces/LoomTypes.html":{},"injectables/MappingsService.html":{},"directives/MarqueeComponent.html":{},"interfaces/MaterialTypes.html":{},"classes/Merge.html":{},"components/MixerViewComponent.html":{},"interfaces/NodeComponentProxy.html":{},"interfaces/NodeMethods.html":{},"interfaces/NodeParams.html":{},"classes/OnlineStatus.html":{},"interfaces/OpClassifier.html":{},"interfaces/OpComponentProxy.html":{},"components/OpHelpModal.html":{},"interfaces/OpInput.html":{},"classes/OpSequencer.html":{},"interfaces/OperationClassification.html":{},"interfaces/OperationParam.html":{},"interfaces/OperationProperties.html":{},"components/OpsComponent.html":{},"interfaces/PairedOp.html":{},"components/ParameterComponent.html":{},"classes/Params.html":{},"interfaces/Pedal.html":{},"classes/PedalConfig.html":{},"interfaces/PedalEvent.html":{},"classes/PedalStatus.html":{},"injectables/PedalsService.html":{},"classes/Pipe.html":{},"interfaces/PlayerOp.html":{},"injectables/PlayerService.html":{},"interfaces/PlayerState.html":{},"interfaces/PlayerState-1.html":{},"classes/Render.html":{},"interfaces/SaveObj.html":{},"classes/Seed.html":{},"directives/SelectionComponent.html":{},"injectables/SequencerService.html":{},"classes/Shape.html":{},"classes/Shuttle.html":{},"components/SnackbarComponent.html":{},"interfaces/StatusMessage.html":{},"classes/System.html":{},"interfaces/TopologyDef.html":{},"interfaces/TreeNode.html":{},"interfaces/TreeNodeProxy.html":{},"interfaces/TreeOperation.html":{},"interfaces/ViewModes.html":{},"interfaces/WeavingLog.html":{},"interfaces/WeavingPick.html":{},"interfaces/WeavingPick-1.html":{},"components/WeavingStateComponent.html":{},"miscellaneous/functions.html":{},"miscellaneous/typealiases.html":{}}}],["string(name",{"_index":3202,"title":{},"body":{"interfaces/OperationParam.html":{},"classes/Params.html":{}}}],["string(objorname",{"_index":3203,"title":{},"body":{"interfaces/OperationParam.html":{},"classes/Params.html":{}}}],["string(undefined",{"_index":3359,"title":{},"body":{"classes/Params.html":{}}}],["string.fromcharcode(97",{"_index":4145,"title":{},"body":{"classes/System.html":{}}}],["stringparam",{"_index":3179,"title":{},"body":{"interfaces/OperationParam.html":{},"components/ParameterComponent.html":{},"classes/Params.html":{},"miscellaneous/typealiases.html":{}}}],["strings",{"_index":185,"title":{},"body":{"classes/AbstractOpFactory.html":{},"classes/BaseOp.html":{},"classes/Branch.html":{},"classes/Bus.html":{},"classes/Merge.html":{},"interfaces/OpClassifier.html":{},"interfaces/OperationParam.html":{},"interfaces/OperationProperties.html":{},"classes/Params.html":{},"classes/Pipe.html":{},"classes/Seed.html":{},"interfaces/TopologyDef.html":{},"miscellaneous/typealiases.html":{}}}],["stroked",{"_index":3266,"title":{},"body":{"components/OpsComponent.html":{}}}],["struct_id",{"_index":517,"title":{},"body":{"interfaces/ChainOp.html":{},"interfaces/DraftOperationClassification.html":{},"interfaces/LoomConfig.html":{},"interfaces/PairedOp.html":{},"classes/PedalConfig.html":{},"interfaces/PedalEvent.html":{},"interfaces/PlayerOp.html":{},"injectables/PlayerService.html":{}}}],["structop",{"_index":1900,"title":{},"body":{"interfaces/DraftOperationClassification.html":{},"interfaces/LoomConfig.html":{},"classes/PedalConfig.html":{},"injectables/PlayerService.html":{}}}],["structops",{"_index":1893,"title":{},"body":{"interfaces/DraftOperationClassification.html":{},"interfaces/LoomConfig.html":{},"classes/PedalConfig.html":{},"injectables/PlayerService.html":{}}}],["structops.push(op",{"_index":1895,"title":{},"body":{"interfaces/DraftOperationClassification.html":{},"interfaces/LoomConfig.html":{},"classes/PedalConfig.html":{},"injectables/PlayerService.html":{}}}],["structual",{"_index":1608,"title":{},"body":{"interfaces/DraftMap.html":{},"interfaces/Interlacement.html":{},"interfaces/InterlacementVal.html":{}}}],["structural",{"_index":4121,"title":{},"body":{"classes/System.html":{}}}],["structure",{"_index":1847,"title":{},"body":{"interfaces/DraftOperationClassification.html":{},"interfaces/DynamicOperation.html":{},"interfaces/LoomConfig.html":{},"interfaces/OpInput.html":{},"interfaces/OperationClassification.html":{},"interfaces/OperationParam.html":{},"classes/Params.html":{},"classes/PedalConfig.html":{},"injectables/PlayerService.html":{},"interfaces/TreeOperation.html":{}}}],["structure\")[0].ops",{"_index":1883,"title":{},"body":{"interfaces/DraftOperationClassification.html":{},"interfaces/LoomConfig.html":{},"classes/PedalConfig.html":{},"injectables/PlayerService.html":{}}}],["structured",{"_index":1061,"title":{},"body":{"classes/DBListener.html":{},"classes/DBListenerArray.html":{},"classes/DBNode.html":{},"classes/DBNodeArray.html":{},"classes/DBTwoWay.html":{},"classes/DBTwoWayArray.html":{},"classes/DBWriteBuffer.html":{},"classes/DBWriter.html":{},"classes/DBWriterArray.html":{},"interfaces/NodeMethods.html":{},"interfaces/NodeParams.html":{},"classes/OnlineStatus.html":{},"index.html":{}}}],["structureopfromdraft",{"_index":3701,"title":{},"body":{"injectables/PlayerService.html":{}}}],["structureopfromdraft(d",{"_index":1899,"title":{},"body":{"interfaces/DraftOperationClassification.html":{},"interfaces/LoomConfig.html":{},"classes/PedalConfig.html":{},"injectables/PlayerService.html":{}}}],["structures",{"_index":1850,"title":{},"body":{"interfaces/DraftOperationClassification.html":{},"interfaces/LoomConfig.html":{},"classes/PedalConfig.html":{},"injectables/PlayerService.html":{},"classes/System.html":{},"index.html":{}}}],["styles",{"_index":627,"title":{},"body":{"components/ConnectionComponent.html":{},"components/DraftdetailComponent.html":{},"components/ImageComponent.html":{},"components/InletComponent.html":{},"components/MixerViewComponent.html":{},"components/NoteComponent.html":{},"components/OpHelpModal.html":{},"components/OpSequencerComponent.html":{},"components/OpsComponent.html":{},"components/ParameterComponent.html":{},"components/PlayerComponent.html":{},"components/SnackbarComponent.html":{},"components/VirtualPedalsComponent.html":{},"components/WeavingStateComponent.html":{},"index.html":{}}}],["styleurls",{"_index":635,"title":{},"body":{"components/ConnectionComponent.html":{},"interfaces/DesignActions.html":{},"components/DraftdetailComponent.html":{},"components/ImageComponent.html":{},"components/InletComponent.html":{},"components/MixerViewComponent.html":{},"components/NoteComponent.html":{},"components/OpHelpModal.html":{},"components/OpSequencerComponent.html":{},"components/OpsComponent.html":{},"components/ParameterComponent.html":{},"components/PlayerComponent.html":{},"components/SnackbarComponent.html":{},"components/VirtualPedalsComponent.html":{},"components/WeavingStateComponent.html":{}}}],["subdirectory",{"_index":4529,"title":{},"body":{"index.html":{}}}],["subdraft",{"_index":680,"title":{},"body":{"components/ConnectionComponent.html":{},"interfaces/DesignActions.html":{},"components/NoteComponent.html":{},"injectables/ViewportService.html":{},"index.html":{}}}],["subdraft'},{'name",{"_index":856,"title":{},"body":{"components/ConnectionComponent.html":{},"components/DraftdetailComponent.html":{},"components/ImageComponent.html":{},"components/InletComponent.html":{},"components/MixerViewComponent.html":{},"components/NoteComponent.html":{},"components/OpHelpModal.html":{},"components/OpSequencerComponent.html":{},"components/OpsComponent.html":{},"components/ParameterComponent.html":{},"components/PlayerComponent.html":{},"components/SnackbarComponent.html":{},"components/VirtualPedalsComponent.html":{},"components/WeavingStateComponent.html":{}}}],["subdraft.component.html",{"_index":1322,"title":{},"body":{"interfaces/DesignActions.html":{}}}],["subdraft.component.scss",{"_index":1323,"title":{},"body":{"interfaces/DesignActions.html":{}}}],["subdraft/subdraft.component",{"_index":716,"title":{},"body":{"components/ConnectionComponent.html":{}}}],["subdraftcomponent",{"_index":691,"title":{},"body":{"components/ConnectionComponent.html":{},"interfaces/DesignActions.html":{},"components/DraftdetailComponent.html":{},"interfaces/IOTuple.html":{},"components/ImageComponent.html":{},"components/InletComponent.html":{},"modules/MixerModule.html":{},"components/MixerViewComponent.html":{},"components/NoteComponent.html":{},"components/OpHelpModal.html":{},"components/OpSequencerComponent.html":{},"components/OpsComponent.html":{},"components/ParameterComponent.html":{},"components/PlayerComponent.html":{},"components/SnackbarComponent.html":{},"interfaces/TreeNode.html":{},"components/VirtualPedalsComponent.html":{},"components/WeavingStateComponent.html":{},"overview.html":{}}}],["subdrafts",{"_index":2292,"title":{},"body":{"interfaces/IOTuple.html":{},"interfaces/TreeNode.html":{}}}],["subfolder",{"_index":4524,"title":{},"body":{"index.html":{}}}],["subscribe((data",{"_index":2018,"title":{},"body":{"components/DraftdetailComponent.html":{}}}],["subtypes",{"_index":4591,"title":{},"body":{"index.html":{}}}],["success",{"_index":1670,"title":{},"body":{"interfaces/DraftNodeProxy.html":{},"interfaces/FileObj.html":{},"interfaces/FileSaver.html":{},"interfaces/Fileloader.html":{},"interfaces/LoadResponse.html":{},"interfaces/NodeComponentProxy.html":{},"interfaces/OpComponentProxy.html":{},"interfaces/SaveObj.html":{},"interfaces/StatusMessage.html":{},"interfaces/TreeNodeProxy.html":{}}}],["such",{"_index":589,"title":{},"body":{"interfaces/ChainOp.html":{},"classes/DBListener.html":{},"classes/DBListenerArray.html":{},"classes/DBNode.html":{},"classes/DBNodeArray.html":{},"classes/DBTwoWay.html":{},"classes/DBTwoWayArray.html":{},"classes/DBWriteBuffer.html":{},"classes/DBWriter.html":{},"classes/DBWriterArray.html":{},"interfaces/DraftMap.html":{},"interfaces/DynamicOperation.html":{},"interfaces/Interlacement.html":{},"interfaces/InterlacementVal.html":{},"interfaces/NodeMethods.html":{},"interfaces/NodeParams.html":{},"classes/OnlineStatus.html":{},"interfaces/OpInput.html":{},"interfaces/OperationClassification.html":{},"interfaces/PairedOp.html":{},"interfaces/PedalEvent.html":{},"interfaces/PlayerOp.html":{},"interfaces/TreeOperation.html":{},"index.html":{}}}],["super",{"_index":463,"title":{},"body":{"interfaces/ChainIndex.html":{},"classes/DBListener.html":{},"classes/DBListenerArray.html":{},"classes/DBNode.html":{},"classes/DBNodeArray.html":{},"classes/DBTwoWay.html":{},"classes/DBTwoWayArray.html":{},"classes/DBWriteBuffer.html":{},"classes/DBWriter.html":{},"classes/DBWriterArray.html":{},"injectables/MappingsService.html":{},"interfaces/NodeMethods.html":{},"interfaces/NodeParams.html":{},"classes/OnlineStatus.html":{},"interfaces/Pedal.html":{},"classes/PedalStatus.html":{},"injectables/PedalsService.html":{},"injectables/SequencerService.html":{}}}],["super(lengthnode",{"_index":1064,"title":{},"body":{"classes/DBListener.html":{},"classes/DBListenerArray.html":{},"classes/DBNode.html":{},"classes/DBNodeArray.html":{},"classes/DBTwoWay.html":{},"classes/DBTwoWayArray.html":{},"classes/DBWriteBuffer.html":{},"classes/DBWriter.html":{},"classes/DBWriterArray.html":{},"interfaces/NodeMethods.html":{},"interfaces/NodeParams.html":{},"classes/OnlineStatus.html":{}}}],["super(params",{"_index":1000,"title":{},"body":{"classes/DBListener.html":{},"classes/DBListenerArray.html":{},"classes/DBNode.html":{},"classes/DBNodeArray.html":{},"classes/DBTwoWay.html":{},"classes/DBTwoWayArray.html":{},"classes/DBWriteBuffer.html":{},"classes/DBWriter.html":{},"classes/DBWriterArray.html":{},"interfaces/NodeMethods.html":{},"interfaces/NodeParams.html":{},"classes/OnlineStatus.html":{}}}],["super.setval(x",{"_index":1030,"title":{},"body":{"classes/DBListener.html":{},"classes/DBListenerArray.html":{},"classes/DBNode.html":{},"classes/DBNodeArray.html":{},"classes/DBTwoWay.html":{},"classes/DBTwoWayArray.html":{},"classes/DBWriteBuffer.html":{},"classes/DBWriter.html":{},"classes/DBWriterArray.html":{},"interfaces/NodeMethods.html":{},"interfaces/NodeParams.html":{},"classes/OnlineStatus.html":{}}}],["supplemental",{"_index":2923,"title":{},"body":{"components/NoteComponent.html":{}}}],["supplied",{"_index":2881,"title":{},"body":{"components/NoteComponent.html":{}}}],["support",{"_index":4613,"title":{},"body":{"modules.html":{}}}],["supports",{"_index":4427,"title":{},"body":{"index.html":{}}}],["sure",{"_index":1565,"title":{},"body":{"interfaces/DesignActions.html":{},"interfaces/Pedal.html":{},"classes/PedalStatus.html":{},"injectables/PedalsService.html":{},"classes/System.html":{},"miscellaneous/functions.html":{}}}],["svg",{"_index":645,"title":{},"body":{"components/ConnectionComponent.html":{},"components/MixerViewComponent.html":{},"components/NoteComponent.html":{},"modules.html":{}}}],["swapeditingstyle",{"_index":1958,"title":{},"body":{"components/DraftdetailComponent.html":{}}}],["switch",{"_index":2451,"title":{},"body":{"components/InletComponent.html":{},"classes/OpSequencer.html":{}}}],["switch(event.key",{"_index":4275,"title":{},"body":{"components/VirtualPedalsComponent.html":{}}}],["switch(this.inlet.type",{"_index":2465,"title":{},"body":{"components/InletComponent.html":{}}}],["switch(this.param.type",{"_index":3312,"title":{},"body":{"components/ParameterComponent.html":{}}}],["symm",{"_index":1834,"title":{},"body":{"interfaces/DraftOperationClassification.html":{},"interfaces/LoomConfig.html":{},"classes/PedalConfig.html":{},"injectables/PlayerService.html":{}}}],["sys",{"_index":4164,"title":{},"body":{"classes/System.html":{}}}],["sys.code",{"_index":2472,"title":{},"body":{"components/InletComponent.html":{}}}],["sys.map(el",{"_index":4163,"title":{},"body":{"classes/System.html":{}}}],["system",{"_index":2452,"title":{"classes/System.html":{}},"body":{"components/InletComponent.html":{},"classes/System.html":{},"miscellaneous/functions.html":{}}}],["system_id",{"_index":4568,"title":{},"body":{"index.html":{}}}],["systemdict",{"_index":4131,"title":{},"body":{"classes/System.html":{}}}],["systems",{"_index":1607,"title":{},"body":{"interfaces/DraftMap.html":{},"components/DraftdetailComponent.html":{},"components/InletComponent.html":{},"interfaces/Interlacement.html":{},"interfaces/InterlacementVal.html":{},"classes/Selection.html":{},"classes/System.html":{},"miscellaneous/functions.html":{}}}],["systems.length",{"_index":4154,"title":{},"body":{"classes/System.html":{}}}],["systems.map((sys",{"_index":4160,"title":{},"body":{"classes/System.html":{}}}],["systems.map(el",{"_index":4156,"title":{},"body":{"classes/System.html":{}}}],["systemsservice",{"_index":2399,"title":{},"body":{"components/InletComponent.html":{},"classes/Render.html":{}}}],["t",{"_index":264,"title":{},"body":{"classes/AbstractOpFactory.html":{},"classes/BaseOp.html":{},"classes/Branch.html":{},"classes/Bus.html":{},"classes/Merge.html":{},"interfaces/OpClassifier.html":{},"interfaces/OperationProperties.html":{},"classes/Pipe.html":{},"components/PlayerComponent.html":{},"classes/Seed.html":{},"classes/Selection.html":{},"interfaces/TopologyDef.html":{}}}],["t:boolean",{"_index":905,"title":{},"body":{"interfaces/Crossing.html":{},"interfaces/Vertex.html":{},"interfaces/YarnPath.html":{}}}],["t:false",{"_index":916,"title":{},"body":{"interfaces/Crossing.html":{},"interfaces/Vertex.html":{},"interfaces/YarnPath.html":{}}}],["t:null",{"_index":907,"title":{},"body":{"interfaces/Crossing.html":{},"interfaces/Vertex.html":{},"interfaces/YarnPath.html":{}}}],["t:true",{"_index":914,"title":{},"body":{"interfaces/Crossing.html":{},"interfaces/Vertex.html":{},"interfaces/YarnPath.html":{}}}],["tabby",{"_index":1807,"title":{},"body":{"interfaces/DraftOperationClassification.html":{},"interfaces/LoomConfig.html":{},"classes/PedalConfig.html":{},"injectables/PlayerService.html":{}}}],["take",{"_index":72,"title":{},"body":{"classes/AbstractOpFactory.html":{},"classes/BaseOp.html":{},"classes/Branch.html":{},"classes/Bus.html":{},"interfaces/DynamicOperation.html":{},"classes/Merge.html":{},"interfaces/OpClassifier.html":{},"components/OpHelpModal.html":{},"interfaces/OpInput.html":{},"interfaces/OperationClassification.html":{},"interfaces/OperationProperties.html":{},"classes/Pipe.html":{},"classes/Seed.html":{},"interfaces/TopologyDef.html":{},"interfaces/TreeOperation.html":{},"index.html":{},"miscellaneous/typealiases.html":{}}}],["takes",{"_index":115,"title":{},"body":{"classes/AbstractOpFactory.html":{},"classes/BaseOp.html":{},"classes/Branch.html":{},"classes/Bus.html":{},"classes/Cell.html":{},"interfaces/ChainOp.html":{},"interfaces/DesignActions.html":{},"interfaces/DynamicOperation.html":{},"interfaces/IOTuple.html":{},"classes/Merge.html":{},"interfaces/OpClassifier.html":{},"interfaces/OpInput.html":{},"interfaces/OperationClassification.html":{},"interfaces/OperationProperties.html":{},"interfaces/PairedOp.html":{},"interfaces/PedalEvent.html":{},"classes/Pipe.html":{},"interfaces/PlayerOp.html":{},"classes/Seed.html":{},"classes/Shape-1.html":{},"classes/System.html":{},"interfaces/TopologyDef.html":{},"interfaces/TreeNode.html":{},"interfaces/TreeOperation.html":{},"miscellaneous/functions.html":{}}}],["tar",{"_index":4385,"title":{},"body":{"dependencies.html":{}}}],["target",{"_index":2041,"title":{},"body":{"components/DraftdetailComponent.html":{},"classes/Selection.html":{}}}],["target.classname",{"_index":2043,"title":{},"body":{"components/DraftdetailComponent.html":{}}}],["targetlength",{"_index":1933,"title":{},"body":{"interfaces/DraftOperationClassification.html":{},"interfaces/LoomConfig.html":{},"classes/PedalConfig.html":{},"injectables/PlayerService.html":{}}}],["tc2",{"_index":3729,"title":{},"body":{"interfaces/PlayerState.html":{},"interfaces/PlayerState-1.html":{},"interfaces/WeavingLog.html":{},"interfaces/WeavingPick.html":{},"interfaces/WeavingPick-1.html":{}}}],["teh",{"_index":4166,"title":{},"body":{"classes/System.html":{},"miscellaneous/typealiases.html":{}}}],["tell",{"_index":1357,"title":{},"body":{"interfaces/DesignActions.html":{},"index.html":{}}}],["template",{"_index":626,"title":{},"body":{"components/ConnectionComponent.html":{},"components/DraftdetailComponent.html":{},"components/ImageComponent.html":{},"components/InletComponent.html":{},"components/MixerViewComponent.html":{},"components/NoteComponent.html":{},"components/OpHelpModal.html":{},"components/OpSequencerComponent.html":{},"components/OpsComponent.html":{},"components/ParameterComponent.html":{},"components/PlayerComponent.html":{},"components/SnackbarComponent.html":{},"components/VirtualPedalsComponent.html":{},"components/WeavingStateComponent.html":{}}}],["templateurl",{"_index":637,"title":{},"body":{"components/ConnectionComponent.html":{},"interfaces/DesignActions.html":{},"components/DraftdetailComponent.html":{},"components/ImageComponent.html":{},"components/InletComponent.html":{},"components/MixerViewComponent.html":{},"components/NoteComponent.html":{},"components/OpHelpModal.html":{},"components/OpSequencerComponent.html":{},"components/OpsComponent.html":{},"components/ParameterComponent.html":{},"components/PlayerComponent.html":{},"components/SnackbarComponent.html":{},"components/VirtualPedalsComponent.html":{},"components/WeavingStateComponent.html":{}}}],["terminal",{"_index":4496,"title":{},"body":{"index.html":{}}}],["terms",{"_index":93,"title":{},"body":{"classes/AbstractOpFactory.html":{},"classes/BaseOp.html":{},"classes/Branch.html":{},"classes/Bus.html":{},"classes/Merge.html":{},"interfaces/OpClassifier.html":{},"interfaces/OperationProperties.html":{},"classes/Pipe.html":{},"classes/Seed.html":{},"interfaces/TopologyDef.html":{}}}],["test",{"_index":1856,"title":{},"body":{"interfaces/DraftOperationClassification.html":{},"interfaces/LoomConfig.html":{},"interfaces/OperationParam.html":{},"classes/Params.html":{},"classes/PedalConfig.html":{},"injectables/PlayerService.html":{}}}],["testing",{"_index":3648,"title":{},"body":{"components/PlayerComponent.html":{}}}],["text",{"_index":1277,"title":{},"body":{"interfaces/DensityUnits.html":{},"interfaces/DesignMode.html":{},"components/InletComponent.html":{},"interfaces/LoomTypes.html":{},"interfaces/MaterialTypes.html":{},"components/NoteComponent.html":{},"components/OpsComponent.html":{},"components/ParameterComponent.html":{},"interfaces/ViewModes.html":{}}}],["text_vals.map(el",{"_index":2811,"title":{},"body":{"components/MixerViewComponent.html":{}}}],["text_vals:array",{"_index":2809,"title":{},"body":{"components/MixerViewComponent.html":{}}}],["textvalidate",{"_index":2389,"title":{},"body":{"components/InletComponent.html":{}}}],["tf",{"_index":994,"title":{},"body":{"classes/DBListener.html":{},"classes/DBListenerArray.html":{},"classes/DBNode.html":{},"classes/DBNodeArray.html":{},"classes/DBTwoWay.html":{},"classes/DBTwoWayArray.html":{},"classes/DBWriteBuffer.html":{},"classes/DBWriter.html":{},"classes/DBWriterArray.html":{},"interfaces/NodeMethods.html":{},"interfaces/NodeParams.html":{},"classes/OnlineStatus.html":{}}}],["then((snapshot",{"_index":1009,"title":{},"body":{"classes/DBListener.html":{},"classes/DBListenerArray.html":{},"classes/DBNode.html":{},"classes/DBNodeArray.html":{},"classes/DBTwoWay.html":{},"classes/DBTwoWayArray.html":{},"classes/DBWriteBuffer.html":{},"classes/DBWriter.html":{},"classes/DBWriterArray.html":{},"interfaces/NodeMethods.html":{},"interfaces/NodeParams.html":{},"classes/OnlineStatus.html":{}}}],["then((state",{"_index":1917,"title":{},"body":{"interfaces/DraftOperationClassification.html":{},"interfaces/LoomConfig.html":{},"classes/PedalConfig.html":{},"injectables/PlayerService.html":{}}}],["then(href",{"_index":1524,"title":{},"body":{"interfaces/DesignActions.html":{}}}],["thickness",{"_index":4042,"title":{},"body":{"classes/Shuttle.html":{}}}],["thin",{"_index":2476,"title":{},"body":{"components/InletComponent.html":{},"components/MixerViewComponent.html":{},"components/NoteComponent.html":{},"components/ParameterComponent.html":{}}}],["thing",{"_index":588,"title":{},"body":{"interfaces/ChainOp.html":{},"injectables/MappingsService.html":{},"interfaces/PairedOp.html":{},"interfaces/PedalEvent.html":{},"interfaces/PlayerOp.html":{}}}],["things",{"_index":582,"title":{},"body":{"interfaces/ChainOp.html":{},"interfaces/IOTuple.html":{},"injectables/MappingsService.html":{},"interfaces/PairedOp.html":{},"interfaces/PedalEvent.html":{},"interfaces/PlayerOp.html":{},"interfaces/TreeNode.html":{},"index.html":{}}}],["this._active",{"_index":992,"title":{},"body":{"classes/DBListener.html":{},"classes/DBListenerArray.html":{},"classes/DBNode.html":{},"classes/DBNodeArray.html":{},"classes/DBTwoWay.html":{},"classes/DBTwoWayArray.html":{},"classes/DBWriteBuffer.html":{},"classes/DBWriter.html":{},"classes/DBWriterArray.html":{},"interfaces/NodeMethods.html":{},"interfaces/NodeParams.html":{},"classes/OnlineStatus.html":{}}}],["this._active_draft",{"_index":3643,"title":{},"body":{"components/PlayerComponent.html":{}}}],["this._bounds",{"_index":1336,"title":{},"body":{"interfaces/DesignActions.html":{}}}],["this._dbref",{"_index":977,"title":{},"body":{"classes/DBListener.html":{},"classes/DBListenerArray.html":{},"classes/DBNode.html":{},"classes/DBNodeArray.html":{},"classes/DBTwoWay.html":{},"classes/DBTwoWayArray.html":{},"classes/DBWriteBuffer.html":{},"classes/DBWriter.html":{},"classes/DBWriterArray.html":{},"interfaces/NodeMethods.html":{},"interfaces/NodeParams.html":{},"classes/OnlineStatus.html":{}}}],["this._draft",{"_index":1332,"title":{},"body":{"interfaces/DesignActions.html":{}}}],["this._filter(value",{"_index":3253,"title":{},"body":{"components/OpsComponent.html":{}}}],["this._name",{"_index":975,"title":{},"body":{"classes/DBListener.html":{},"classes/DBListenerArray.html":{},"classes/DBNode.html":{},"classes/DBNodeArray.html":{},"classes/DBTwoWay.html":{},"classes/DBTwoWayArray.html":{},"classes/DBWriteBuffer.html":{},"classes/DBWriter.html":{},"classes/DBWriterArray.html":{},"interfaces/NodeMethods.html":{},"interfaces/NodeParams.html":{},"classes/OnlineStatus.html":{}}}],["this._pos",{"_index":462,"title":{},"body":{"interfaces/ChainIndex.html":{},"classes/OpSequencer.html":{},"injectables/SequencerService.html":{}}}],["this._scale",{"_index":1326,"title":{},"body":{"interfaces/DesignActions.html":{},"components/NoteComponent.html":{}}}],["this._val",{"_index":980,"title":{},"body":{"classes/DBListener.html":{},"classes/DBListenerArray.html":{},"classes/DBNode.html":{},"classes/DBNodeArray.html":{},"classes/DBTwoWay.html":{},"classes/DBTwoWayArray.html":{},"classes/DBWriteBuffer.html":{},"classes/DBWriter.html":{},"classes/DBWriterArray.html":{},"interfaces/NodeMethods.html":{},"interfaces/NodeParams.html":{},"classes/OnlineStatus.html":{}}}],["this.absolute",{"_index":4230,"title":{},"body":{"injectables/ViewportService.html":{}}}],["this.absolute.height",{"_index":4241,"title":{},"body":{"injectables/ViewportService.html":{}}}],["this.absolute.height/2",{"_index":4258,"title":{},"body":{"injectables/ViewportService.html":{}}}],["this.absolute.width",{"_index":4240,"title":{},"body":{"injectables/ViewportService.html":{}}}],["this.absolute.width/2",{"_index":4257,"title":{},"body":{"injectables/ViewportService.html":{}}}],["this.active",{"_index":475,"title":{},"body":{"interfaces/ChainIndex.html":{},"classes/DBListener.html":{},"classes/DBListenerArray.html":{},"classes/DBNode.html":{},"classes/DBNodeArray.html":{},"classes/DBTwoWay.html":{},"classes/DBTwoWayArray.html":{},"classes/DBWriteBuffer.html":{},"classes/DBWriter.html":{},"classes/DBWriterArray.html":{},"interfaces/NodeMethods.html":{},"interfaces/NodeParams.html":{},"classes/OnlineStatus.html":{},"injectables/SequencerService.html":{}}}],["this.active_draft.val",{"_index":3430,"title":{},"body":{"interfaces/Pedal.html":{},"classes/PedalStatus.html":{},"injectables/PedalsService.html":{}}}],["this.addnode(snapshot.key",{"_index":1075,"title":{},"body":{"classes/DBListener.html":{},"classes/DBListenerArray.html":{},"classes/DBNode.html":{},"classes/DBNodeArray.html":{},"classes/DBTwoWay.html":{},"classes/DBTwoWayArray.html":{},"classes/DBWriteBuffer.html":{},"classes/DBWriter.html":{},"classes/DBWriterArray.html":{},"interfaces/NodeMethods.html":{},"interfaces/NodeParams.html":{},"classes/OnlineStatus.html":{}}}],["this.addop(ch",{"_index":487,"title":{},"body":{"interfaces/ChainIndex.html":{},"injectables/SequencerService.html":{}}}],["this.addop(o",{"_index":476,"title":{},"body":{"interfaces/ChainIndex.html":{},"injectables/SequencerService.html":{}}}],["this.all_system_codes",{"_index":2433,"title":{},"body":{"components/InletComponent.html":{}}}],["this.array",{"_index":2575,"title":{},"body":{"injectables/MappingsService.html":{}}}],["this.array[dst",{"_index":2609,"title":{},"body":{"injectables/MappingsService.html":{}}}],["this.array[id",{"_index":2599,"title":{},"body":{"injectables/MappingsService.html":{}}}],["this.array[p",{"_index":2614,"title":{},"body":{"injectables/MappingsService.html":{}}}],["this.array[src",{"_index":2610,"title":{},"body":{"injectables/MappingsService.html":{}}}],["this.attach",{"_index":1155,"title":{},"body":{"classes/DBListener.html":{},"classes/DBListenerArray.html":{},"classes/DBNode.html":{},"classes/DBNodeArray.html":{},"classes/DBTwoWay.html":{},"classes/DBTwoWayArray.html":{},"classes/DBWriteBuffer.html":{},"classes/DBWriter.html":{},"classes/DBWriterArray.html":{},"interfaces/NodeMethods.html":{},"interfaces/NodeParams.html":{},"classes/OnlineStatus.html":{}}}],["this.attachchildnode(childnode",{"_index":1089,"title":{},"body":{"classes/DBListener.html":{},"classes/DBListenerArray.html":{},"classes/DBNode.html":{},"classes/DBNodeArray.html":{},"classes/DBTwoWay.html":{},"classes/DBTwoWayArray.html":{},"classes/DBWriteBuffer.html":{},"classes/DBWriter.html":{},"classes/DBWriterArray.html":{},"interfaces/NodeMethods.html":{},"interfaces/NodeParams.html":{},"classes/OnlineStatus.html":{}}}],["this.attachchildnode(node",{"_index":1071,"title":{},"body":{"classes/DBListener.html":{},"classes/DBListenerArray.html":{},"classes/DBNode.html":{},"classes/DBNodeArray.html":{},"classes/DBTwoWay.html":{},"classes/DBTwoWayArray.html":{},"classes/DBWriteBuffer.html":{},"classes/DBWriter.html":{},"classes/DBWriterArray.html":{},"interfaces/NodeMethods.html":{},"interfaces/NodeParams.html":{},"classes/OnlineStatus.html":{}}}],["this.availpedals",{"_index":1714,"title":{},"body":{"interfaces/DraftOperationClassification.html":{},"interfaces/LoomConfig.html":{},"injectables/MappingsService.html":{},"classes/PedalConfig.html":{},"injectables/PlayerService.html":{}}}],["this.availpedals.filter((id",{"_index":1726,"title":{},"body":{"interfaces/DraftOperationClassification.html":{},"interfaces/LoomConfig.html":{},"injectables/MappingsService.html":{},"classes/PedalConfig.html":{},"injectables/PlayerService.html":{}}}],["this.availpedals.push(p.id",{"_index":1723,"title":{},"body":{"interfaces/DraftOperationClassification.html":{},"interfaces/LoomConfig.html":{},"injectables/MappingsService.html":{},"classes/PedalConfig.html":{},"injectables/PlayerService.html":{}}}],["this.b_from",{"_index":775,"title":{},"body":{"components/ConnectionComponent.html":{}}}],["this.b_to",{"_index":738,"title":{},"body":{"components/ConnectionComponent.html":{}}}],["this.base.allrequired(...args).type(topo",{"_index":303,"title":{},"body":{"classes/AbstractOpFactory.html":{},"classes/BaseOp.html":{},"classes/Branch.html":{},"classes/Bus.html":{},"classes/Merge.html":{},"interfaces/OpClassifier.html":{},"interfaces/OperationProperties.html":{},"classes/Pipe.html":{},"classes/Seed.html":{},"interfaces/TopologyDef.html":{}}}],["this.base.draftsoptional(...args).type(topo",{"_index":301,"title":{},"body":{"classes/AbstractOpFactory.html":{},"classes/BaseOp.html":{},"classes/Branch.html":{},"classes/Bus.html":{},"classes/Merge.html":{},"interfaces/OpClassifier.html":{},"interfaces/OperationProperties.html":{},"classes/Pipe.html":{},"classes/Seed.html":{},"interfaces/TopologyDef.html":{}}}],["this.base.nodrafts(...args).type(topo",{"_index":299,"title":{},"body":{"classes/AbstractOpFactory.html":{},"classes/BaseOp.html":{},"classes/Branch.html":{},"classes/Bus.html":{},"classes/Merge.html":{},"interfaces/OpClassifier.html":{},"interfaces/OperationProperties.html":{},"classes/Pipe.html":{},"classes/Seed.html":{},"interfaces/TopologyDef.html":{}}}],["this.base.noparams(...args).type(topo",{"_index":300,"title":{},"body":{"classes/AbstractOpFactory.html":{},"classes/BaseOp.html":{},"classes/Branch.html":{},"classes/Bus.html":{},"classes/Merge.html":{},"interfaces/OpClassifier.html":{},"interfaces/OperationProperties.html":{},"classes/Pipe.html":{},"classes/Seed.html":{},"interfaces/TopologyDef.html":{}}}],["this.base.paramsoptional(...args).type(topo",{"_index":302,"title":{},"body":{"classes/AbstractOpFactory.html":{},"classes/BaseOp.html":{},"classes/Branch.html":{},"classes/Bus.html":{},"classes/Merge.html":{},"interfaces/OpClassifier.html":{},"interfaces/OperationProperties.html":{},"classes/Pipe.html":{},"classes/Seed.html":{},"interfaces/TopologyDef.html":{}}}],["this.base_cell.h.max",{"_index":3830,"title":{},"body":{"classes/Render.html":{}}}],["this.base_cell.h.min",{"_index":3825,"title":{},"body":{"classes/Render.html":{}}}],["this.base_cell.margin_clear_x.min",{"_index":3838,"title":{},"body":{"classes/Render.html":{}}}],["this.base_cell.margin_clear_y.min",{"_index":3840,"title":{},"body":{"classes/Render.html":{}}}],["this.base_cell.margin_fill_x.min",{"_index":3842,"title":{},"body":{"classes/Render.html":{}}}],["this.base_cell.margin_fill_y.min",{"_index":3844,"title":{},"body":{"classes/Render.html":{}}}],["this.base_cell.w.max",{"_index":3828,"title":{},"body":{"classes/Render.html":{}}}],["this.base_cell.w.min",{"_index":3824,"title":{},"body":{"classes/Render.html":{}}}],["this.bitmap.nativeelement",{"_index":1513,"title":{},"body":{"interfaces/DesignActions.html":{}}}],["this.boolparam",{"_index":3316,"title":{},"body":{"components/ParameterComponent.html":{}}}],["this.bounds",{"_index":2675,"title":{},"body":{"directives/MarqueeComponent.html":{},"components/MixerViewComponent.html":{},"directives/SelectionComponent.html":{},"classes/Shape.html":{},"components/SnackbarComponent.html":{}}}],["this.bounds.height",{"_index":799,"title":{},"body":{"components/ConnectionComponent.html":{},"interfaces/DesignActions.html":{}}}],["this.bounds.length",{"_index":3987,"title":{},"body":{"classes/Shape.html":{}}}],["this.bounds.topleft",{"_index":1452,"title":{},"body":{"interfaces/DesignActions.html":{},"components/NoteComponent.html":{}}}],["this.bounds.topleft.x",{"_index":804,"title":{},"body":{"components/ConnectionComponent.html":{},"interfaces/DesignActions.html":{}}}],["this.bounds.topleft.y",{"_index":802,"title":{},"body":{"components/ConnectionComponent.html":{},"interfaces/DesignActions.html":{}}}],["this.bounds.topleft.y+this.bounds.height",{"_index":2930,"title":{},"body":{"components/NoteComponent.html":{}}}],["this.bounds.width",{"_index":798,"title":{},"body":{"components/ConnectionComponent.html":{},"interfaces/DesignActions.html":{}}}],["this.calculatebounds",{"_index":767,"title":{},"body":{"components/ConnectionComponent.html":{}}}],["this.canvas",{"_index":1419,"title":{},"body":{"interfaces/DesignActions.html":{},"components/NoteComponent.html":{}}}],["this.canvas.getcontext(\"2d",{"_index":1422,"title":{},"body":{"interfaces/DesignActions.html":{},"components/NoteComponent.html":{}}}],["this.canvas.height",{"_index":1483,"title":{},"body":{"interfaces/DesignActions.html":{}}}],["this.canvas.width",{"_index":1481,"title":{},"body":{"interfaces/DesignActions.html":{}}}],["this.cell_factor",{"_index":2787,"title":{},"body":{"components/MixerViewComponent.html":{}}}],["this.chains.length",{"_index":485,"title":{},"body":{"interfaces/ChainIndex.html":{},"injectables/SequencerService.html":{}}}],["this.chains.push({id",{"_index":486,"title":{},"body":{"interfaces/ChainIndex.html":{},"injectables/SequencerService.html":{}}}],["this.classifier",{"_index":241,"title":{},"body":{"classes/AbstractOpFactory.html":{},"classes/BaseOp.html":{},"classes/Branch.html":{},"classes/Bus.html":{},"classes/Merge.html":{},"interfaces/OpClassifier.html":{},"interfaces/OperationProperties.html":{},"classes/Pipe.html":{},"classes/Seed.html":{},"interfaces/TopologyDef.html":{}}}],["this.classifier.input_drafts",{"_index":260,"title":{},"body":{"classes/AbstractOpFactory.html":{},"classes/BaseOp.html":{},"classes/Branch.html":{},"classes/Bus.html":{},"classes/Merge.html":{},"interfaces/OpClassifier.html":{},"interfaces/OperationProperties.html":{},"classes/Pipe.html":{},"classes/Seed.html":{},"interfaces/TopologyDef.html":{}}}],["this.classifier.input_params",{"_index":261,"title":{},"body":{"classes/AbstractOpFactory.html":{},"classes/BaseOp.html":{},"classes/Branch.html":{},"classes/Bus.html":{},"classes/Merge.html":{},"interfaces/OpClassifier.html":{},"interfaces/OperationProperties.html":{},"classes/Pipe.html":{},"classes/Seed.html":{},"interfaces/TopologyDef.html":{}}}],["this.classifier.type",{"_index":263,"title":{},"body":{"classes/AbstractOpFactory.html":{},"classes/BaseOp.html":{},"classes/Branch.html":{},"classes/Bus.html":{},"classes/Merge.html":{},"interfaces/OpClassifier.html":{},"interfaces/OperationProperties.html":{},"classes/Pipe.html":{},"classes/Seed.html":{},"interfaces/TopologyDef.html":{}}}],["this.clearselection",{"_index":2356,"title":{},"body":{"interfaces/Ink.html":{},"injectables/InkService.html":{}}}],["this.color",{"_index":4089,"title":{},"body":{"classes/Shuttle.html":{}}}],["this.color=\"#666666",{"_index":4083,"title":{},"body":{"classes/Shuttle.html":{}}}],["this.count",{"_index":2508,"title":{},"body":{"injectables/LayersService.html":{}}}],["this.current",{"_index":3066,"title":{},"body":{"classes/OpSequencer.html":{}}}],["this.current.perform(res",{"_index":3074,"title":{},"body":{"classes/OpSequencer.html":{}}}],["this.current_view",{"_index":3812,"title":{},"body":{"classes/Render.html":{}}}],["this.cx",{"_index":1421,"title":{},"body":{"interfaces/DesignActions.html":{},"components/NoteComponent.html":{},"components/PlayerComponent.html":{},"components/WeavingStateComponent.html":{}}}],["this.cx.strokerect(0,0",{"_index":797,"title":{},"body":{"components/ConnectionComponent.html":{}}}],["this.db",{"_index":3437,"title":{},"body":{"interfaces/Pedal.html":{},"classes/PedalStatus.html":{},"injectables/PedalsService.html":{}}}],["this.default_cell",{"_index":1482,"title":{},"body":{"interfaces/DesignActions.html":{},"components/WeavingStateComponent.html":{}}}],["this.default_params",{"_index":255,"title":{},"body":{"classes/AbstractOpFactory.html":{},"classes/BaseOp.html":{},"classes/Branch.html":{},"classes/Bus.html":{},"classes/Merge.html":{},"interfaces/OpClassifier.html":{},"interfaces/OperationProperties.html":{},"classes/Pipe.html":{},"classes/Seed.html":{},"interfaces/TopologyDef.html":{}}}],["this.deletenote.emit(id",{"_index":2908,"title":{},"body":{"components/NoteComponent.html":{}}}],["this.dialog.open(draftdetailcomponent",{"_index":1556,"title":{},"body":{"interfaces/DesignActions.html":{}}}],["this.dialogref.close",{"_index":2986,"title":{},"body":{"components/OpHelpModal.html":{}}}],["this.dialogref.close(null",{"_index":2059,"title":{},"body":{"components/DraftdetailComponent.html":{},"components/MixerViewComponent.html":{},"components/OpsComponent.html":{}}}],["this.dialogref.close(this.draft",{"_index":2060,"title":{},"body":{"components/DraftdetailComponent.html":{}}}],["this.disable_drag",{"_index":744,"title":{},"body":{"components/ConnectionComponent.html":{}}}],["this.displayname",{"_index":245,"title":{},"body":{"classes/AbstractOpFactory.html":{},"classes/BaseOp.html":{},"classes/Branch.html":{},"classes/Bus.html":{},"classes/Merge.html":{},"interfaces/OpClassifier.html":{},"interfaces/OperationProperties.html":{},"classes/Pipe.html":{},"classes/Seed.html":{},"interfaces/TopologyDef.html":{}}}],["this.displaynames",{"_index":3248,"title":{},"body":{"components/OpsComponent.html":{}}}],["this.displaynames.filter(option",{"_index":3256,"title":{},"body":{"components/OpsComponent.html":{}}}],["this.displaynames.findindex(el",{"_index":3260,"title":{},"body":{"components/OpsComponent.html":{}}}],["this.div",{"_index":2790,"title":{},"body":{"components/MixerViewComponent.html":{}}}],["this.div.scrollleft",{"_index":2796,"title":{},"body":{"components/MixerViewComponent.html":{}}}],["this.div.scrolltop",{"_index":2797,"title":{},"body":{"components/MixerViewComponent.html":{}}}],["this.dm.selectdesignmode('drawdown",{"_index":2027,"title":{},"body":{"components/DraftdetailComponent.html":{}}}],["this.dm.selectdesignmode('loom",{"_index":2029,"title":{},"body":{"components/DraftdetailComponent.html":{}}}],["this.draft",{"_index":1567,"title":{},"body":{"interfaces/DesignActions.html":{},"interfaces/DraftOperationClassification.html":{},"components/DraftdetailComponent.html":{},"interfaces/LoomConfig.html":{},"classes/PedalConfig.html":{},"injectables/PlayerService.html":{},"classes/Shape-1.html":{}}}],["this.draft.id",{"_index":2674,"title":{},"body":{"directives/MarqueeComponent.html":{},"directives/SelectionComponent.html":{}}}],["this.draft.reload(draft",{"_index":2053,"title":{},"body":{"components/DraftdetailComponent.html":{}}}],["this.draft.wefts+20",{"_index":2031,"title":{},"body":{"components/DraftdetailComponent.html":{}}}],["this.draft_set",{"_index":4321,"title":{},"body":{"components/WeavingStateComponent.html":{}}}],["this.draftcanvas",{"_index":3659,"title":{},"body":{"components/PlayerComponent.html":{},"components/WeavingStateComponent.html":{}}}],["this.draftcanvas.getcontext(\"2d",{"_index":3661,"title":{},"body":{"components/PlayerComponent.html":{},"components/WeavingStateComponent.html":{}}}],["this.draftcanvas.height",{"_index":4320,"title":{},"body":{"components/WeavingStateComponent.html":{}}}],["this.draftcanvas.width",{"_index":4319,"title":{},"body":{"components/WeavingStateComponent.html":{}}}],["this.draftclassification.filter((c",{"_index":1881,"title":{},"body":{"interfaces/DraftOperationClassification.html":{},"interfaces/LoomConfig.html":{},"classes/PedalConfig.html":{},"injectables/PlayerService.html":{}}}],["this.draftclassification.push",{"_index":1846,"title":{},"body":{"interfaces/DraftOperationClassification.html":{},"interfaces/LoomConfig.html":{},"classes/PedalConfig.html":{},"injectables/PlayerService.html":{}}}],["this.draftparam",{"_index":3323,"title":{},"body":{"components/ParameterComponent.html":{}}}],["this.drawconnection",{"_index":768,"title":{},"body":{"components/ConnectionComponent.html":{}}}],["this.drawdraft",{"_index":3652,"title":{},"body":{"components/PlayerComponent.html":{},"components/WeavingStateComponent.html":{}}}],["this.drawdraft(draft",{"_index":1531,"title":{},"body":{"interfaces/DesignActions.html":{}}}],["this.drawdraft(this.draft",{"_index":1423,"title":{},"body":{"interfaces/DesignActions.html":{}}}],["this.drawdraft(value",{"_index":1334,"title":{},"body":{"interfaces/DesignActions.html":{}}}],["this.dv.redraw",{"_index":2055,"title":{},"body":{"components/DraftdetailComponent.html":{}}}],["this.dv.redraw({drawdown:true",{"_index":2054,"title":{},"body":{"components/DraftdetailComponent.html":{}}}],["this.dv.reposition(scrolltop",{"_index":2037,"title":{},"body":{"components/DraftdetailComponent.html":{}}}],["this.dx",{"_index":247,"title":{},"body":{"classes/AbstractOpFactory.html":{},"classes/BaseOp.html":{},"classes/Branch.html":{},"classes/Bus.html":{},"classes/Merge.html":{},"interfaces/OpClassifier.html":{},"interfaces/OperationProperties.html":{},"classes/Pipe.html":{},"classes/Seed.html":{},"interfaces/TopologyDef.html":{}}}],["this.dynamic",{"_index":2441,"title":{},"body":{"components/InletComponent.html":{}}}],["this.dynamic_param_id",{"_index":2982,"title":{},"body":{"components/OpHelpModal.html":{}}}],["this.dynamic_param_name",{"_index":2984,"title":{},"body":{"components/OpHelpModal.html":{}}}],["this.dynamic_type",{"_index":2981,"title":{},"body":{"components/OpHelpModal.html":{}}}],["this.emit('change",{"_index":1006,"title":{},"body":{"classes/DBListener.html":{},"classes/DBListenerArray.html":{},"classes/DBNode.html":{},"classes/DBNodeArray.html":{},"classes/DBTwoWay.html":{},"classes/DBTwoWayArray.html":{},"classes/DBWriteBuffer.html":{},"classes/DBWriter.html":{},"classes/DBWriterArray.html":{},"interfaces/NodeMethods.html":{},"interfaces/NodeParams.html":{},"classes/OnlineStatus.html":{}}}],["this.emit('child",{"_index":1081,"title":{},"body":{"classes/DBListener.html":{},"classes/DBListenerArray.html":{},"classes/DBNode.html":{},"classes/DBNodeArray.html":{},"classes/DBTwoWay.html":{},"classes/DBTwoWayArray.html":{},"classes/DBWriteBuffer.html":{},"classes/DBWriter.html":{},"classes/DBWriterArray.html":{},"interfaces/NodeMethods.html":{},"interfaces/NodeParams.html":{},"classes/OnlineStatus.html":{}}}],["this.emit('pedal",{"_index":3460,"title":{},"body":{"interfaces/Pedal.html":{},"classes/PedalStatus.html":{},"injectables/PedalsService.html":{}}}],["this.emit('ready",{"_index":1067,"title":{},"body":{"classes/DBListener.html":{},"classes/DBListenerArray.html":{},"classes/DBNode.html":{},"classes/DBNodeArray.html":{},"classes/DBTwoWay.html":{},"classes/DBTwoWayArray.html":{},"classes/DBWriteBuffer.html":{},"classes/DBWriter.html":{},"classes/DBWriterArray.html":{},"interfaces/NodeMethods.html":{},"interfaces/NodeParams.html":{},"classes/OnlineStatus.html":{}}}],["this.emit('set",{"_index":1157,"title":{},"body":{"classes/DBListener.html":{},"classes/DBListenerArray.html":{},"classes/DBNode.html":{},"classes/DBNodeArray.html":{},"classes/DBTwoWay.html":{},"classes/DBTwoWayArray.html":{},"classes/DBWriteBuffer.html":{},"classes/DBWriter.html":{},"classes/DBWriterArray.html":{},"interfaces/NodeMethods.html":{},"interfaces/NodeParams.html":{},"classes/OnlineStatus.html":{}}}],["this.end.j",{"_index":3876,"title":{},"body":{"classes/Selection.html":{}}}],["this.end.si",{"_index":3878,"title":{},"body":{"classes/Selection.html":{}}}],["this.endcol",{"_index":3985,"title":{},"body":{"classes/Shape.html":{}}}],["this.endlabel",{"_index":4094,"title":{},"body":{"classes/Shuttle.html":{}}}],["this.factor",{"_index":2783,"title":{},"body":{"components/MixerViewComponent.html":{}}}],["this.fc",{"_index":2449,"title":{},"body":{"components/InletComponent.html":{},"components/ParameterComponent.html":{}}}],["this.fc.setvalue(obj.data.name",{"_index":3329,"title":{},"body":{"components/ParameterComponent.html":{}}}],["this.fc.setvalue(value",{"_index":2466,"title":{},"body":{"components/InletComponent.html":{},"components/ParameterComponent.html":{}}}],["this.fileparam",{"_index":3318,"title":{},"body":{"components/ParameterComponent.html":{}}}],["this.filter((m",{"_index":2577,"title":{},"body":{"injectables/MappingsService.html":{}}}],["this.filteredoptions",{"_index":3250,"title":{},"body":{"components/OpsComponent.html":{}}}],["this.from",{"_index":725,"title":{},"body":{"components/ConnectionComponent.html":{}}}],["this.fs.saver.ada('draft",{"_index":1534,"title":{},"body":{"interfaces/DesignActions.html":{}}}],["this.fs.saver.bmp(b",{"_index":1523,"title":{},"body":{"interfaces/DesignActions.html":{}}}],["this.fs.saver.jpg(b",{"_index":1546,"title":{},"body":{"interfaces/DesignActions.html":{}}}],["this.fs.saver.wif(draft",{"_index":1542,"title":{},"body":{"interfaces/DesignActions.html":{}}}],["this.getink(this.getselected",{"_index":2339,"title":{},"body":{"interfaces/Ink.html":{},"injectables/InkService.html":{}}}],["this.getmap(dst",{"_index":2607,"title":{},"body":{"injectables/MappingsService.html":{}}}],["this.getmap(id",{"_index":2649,"title":{},"body":{"injectables/MappingsService.html":{}}}],["this.getmap(id)).op",{"_index":2636,"title":{},"body":{"injectables/MappingsService.html":{}}}],["this.getmap(id)).ops",{"_index":2634,"title":{},"body":{"injectables/MappingsService.html":{}}}],["this.getmap(p",{"_index":2585,"title":{},"body":{"injectables/MappingsService.html":{}}}],["this.getmap[p",{"_index":2602,"title":{},"body":{"injectables/MappingsService.html":{}}}],["this.getmatrix(overlay",{"_index":2824,"title":{},"body":{"components/MixerViewComponent.html":{}}}],["this.getoffset(type+\"_x",{"_index":3822,"title":{},"body":{"classes/Render.html":{}}}],["this.getoffset(type+\"_y",{"_index":3823,"title":{},"body":{"classes/Render.html":{}}}],["this.getop(opname",{"_index":2631,"title":{},"body":{"injectables/MappingsService.html":{}}}],["this.hascustomstructure(d",{"_index":1891,"title":{},"body":{"interfaces/DraftOperationClassification.html":{},"interfaces/LoomConfig.html":{},"classes/PedalConfig.html":{},"injectables/PlayerService.html":{}}}],["this.height",{"_index":2781,"title":{},"body":{"components/MixerViewComponent.html":{},"classes/Selection.html":{},"classes/Shape.html":{}}}],["this.id",{"_index":759,"title":{},"body":{"components/ConnectionComponent.html":{},"classes/DBListener.html":{},"classes/DBListenerArray.html":{},"classes/DBNode.html":{},"classes/DBNodeArray.html":{},"classes/DBTwoWay.html":{},"classes/DBTwoWayArray.html":{},"classes/DBWriteBuffer.html":{},"classes/DBWriter.html":{},"classes/DBWriterArray.html":{},"interfaces/DesignActions.html":{},"components/DraftdetailComponent.html":{},"interfaces/NodeMethods.html":{},"interfaces/NodeParams.html":{},"components/NoteComponent.html":{},"classes/OnlineStatus.html":{},"classes/Shape.html":{},"classes/Shuttle.html":{},"classes/System.html":{}}}],["this.id.tostring",{"_index":734,"title":{},"body":{"components/ConnectionComponent.html":{},"interfaces/DesignActions.html":{}}}],["this.image",{"_index":4092,"title":{},"body":{"classes/Shuttle.html":{}}}],["this.img_data",{"_index":4025,"title":{},"body":{"classes/Shape-1.html":{}}}],["this.in_use",{"_index":4143,"title":{},"body":{"classes/System.html":{}}}],["this.index",{"_index":2576,"title":{},"body":{"injectables/MappingsService.html":{}}}],["this.index[\"pairing",{"_index":2645,"title":{},"body":{"injectables/MappingsService.html":{}}}],["this.index[\"roulette\"].concat(this.index[\"chain",{"_index":2644,"title":{},"body":{"injectables/MappingsService.html":{}}}],["this.index[m.type].splice(m.i",{"_index":2624,"title":{},"body":{"injectables/MappingsService.html":{}}}],["this.index[type].push(m",{"_index":2613,"title":{},"body":{"injectables/MappingsService.html":{}}}],["this.index[x.type][x.i",{"_index":2600,"title":{},"body":{"injectables/MappingsService.html":{}}}],["this.ink",{"_index":2021,"title":{},"body":{"components/DraftdetailComponent.html":{}}}],["this.inks",{"_index":2305,"title":{},"body":{"interfaces/Ink.html":{},"injectables/InkService.html":{}}}],["this.inks.foreach",{"_index":2345,"title":{},"body":{"interfaces/Ink.html":{},"injectables/InkService.html":{}}}],["this.inks.foreach(ink",{"_index":2357,"title":{},"body":{"interfaces/Ink.html":{},"injectables/InkService.html":{}}}],["this.inks.getink(this.ink).viewvalue",{"_index":1559,"title":{},"body":{"interfaces/DesignActions.html":{}}}],["this.inlet",{"_index":2443,"title":{},"body":{"components/InletComponent.html":{}}}],["this.inletid",{"_index":2459,"title":{},"body":{"components/InletComponent.html":{}}}],["this.inlets",{"_index":254,"title":{},"body":{"classes/AbstractOpFactory.html":{},"classes/BaseOp.html":{},"classes/Branch.html":{},"classes/Bus.html":{},"classes/Merge.html":{},"interfaces/OpClassifier.html":{},"interfaces/OperationProperties.html":{},"classes/Pipe.html":{},"classes/Seed.html":{},"interfaces/TopologyDef.html":{}}}],["this.insert",{"_index":4081,"title":{},"body":{"classes/Shuttle.html":{}}}],["this.interlacement",{"_index":1410,"title":{},"body":{"interfaces/DesignActions.html":{}}}],["this.interlacement.i",{"_index":1454,"title":{},"body":{"interfaces/DesignActions.html":{}}}],["this.interlacement.j",{"_index":1453,"title":{},"body":{"interfaces/DesignActions.html":{}}}],["this.interpolate({max",{"_index":3827,"title":{},"body":{"classes/Render.html":{}}}],["this.is_dynamic_op",{"_index":2978,"title":{},"body":{"components/OpHelpModal.html":{}}}],["this.is_set",{"_index":410,"title":{},"body":{"classes/Cell.html":{}}}],["this.is_up",{"_index":411,"title":{},"body":{"classes/Cell.html":{}}}],["this.length",{"_index":1088,"title":{},"body":{"classes/DBListener.html":{},"classes/DBListenerArray.html":{},"classes/DBNode.html":{},"classes/DBNodeArray.html":{},"classes/DBTwoWay.html":{},"classes/DBTwoWayArray.html":{},"classes/DBWriteBuffer.html":{},"classes/DBWriter.html":{},"classes/DBWriterArray.html":{},"interfaces/NodeMethods.html":{},"interfaces/NodeParams.html":{},"classes/OnlineStatus.html":{}}}],["this.lengthnode",{"_index":1037,"title":{},"body":{"classes/DBListener.html":{},"classes/DBListenerArray.html":{},"classes/DBNode.html":{},"classes/DBNodeArray.html":{},"classes/DBTwoWay.html":{},"classes/DBTwoWayArray.html":{},"classes/DBWriteBuffer.html":{},"classes/DBWriter.html":{},"classes/DBWriterArray.html":{},"interfaces/NodeMethods.html":{},"interfaces/NodeParams.html":{},"classes/OnlineStatus.html":{}}}],["this.lengthnode.active",{"_index":1042,"title":{},"body":{"classes/DBListener.html":{},"classes/DBListenerArray.html":{},"classes/DBNode.html":{},"classes/DBNodeArray.html":{},"classes/DBTwoWay.html":{},"classes/DBTwoWayArray.html":{},"classes/DBWriteBuffer.html":{},"classes/DBWriter.html":{},"classes/DBWriterArray.html":{},"interfaces/NodeMethods.html":{},"interfaces/NodeParams.html":{},"classes/OnlineStatus.html":{}}}],["this.lengthnode.attach",{"_index":1065,"title":{},"body":{"classes/DBListener.html":{},"classes/DBListenerArray.html":{},"classes/DBNode.html":{},"classes/DBNodeArray.html":{},"classes/DBTwoWay.html":{},"classes/DBTwoWayArray.html":{},"classes/DBWriteBuffer.html":{},"classes/DBWriter.html":{},"classes/DBWriterArray.html":{},"interfaces/NodeMethods.html":{},"interfaces/NodeParams.html":{},"classes/OnlineStatus.html":{}}}],["this.lengthnode.on('change",{"_index":1066,"title":{},"body":{"classes/DBListener.html":{},"classes/DBListenerArray.html":{},"classes/DBNode.html":{},"classes/DBNodeArray.html":{},"classes/DBTwoWay.html":{},"classes/DBTwoWayArray.html":{},"classes/DBWriteBuffer.html":{},"classes/DBWriter.html":{},"classes/DBWriterArray.html":{},"interfaces/NodeMethods.html":{},"interfaces/NodeParams.html":{},"classes/OnlineStatus.html":{}}}],["this.lengthnode.setval(0",{"_index":1116,"title":{},"body":{"classes/DBListener.html":{},"classes/DBListenerArray.html":{},"classes/DBNode.html":{},"classes/DBNodeArray.html":{},"classes/DBTwoWay.html":{},"classes/DBTwoWayArray.html":{},"classes/DBWriteBuffer.html":{},"classes/DBWriter.html":{},"classes/DBWriterArray.html":{},"interfaces/NodeMethods.html":{},"interfaces/NodeParams.html":{},"classes/OnlineStatus.html":{}}}],["this.lengthnode.setval(this.length",{"_index":1091,"title":{},"body":{"classes/DBListener.html":{},"classes/DBListenerArray.html":{},"classes/DBNode.html":{},"classes/DBNodeArray.html":{},"classes/DBTwoWay.html":{},"classes/DBTwoWayArray.html":{},"classes/DBWriteBuffer.html":{},"classes/DBWriter.html":{},"classes/DBWriterArray.html":{},"interfaces/NodeMethods.html":{},"interfaces/NodeParams.html":{},"classes/OnlineStatus.html":{}}}],["this.lengthnode.val",{"_index":1045,"title":{},"body":{"classes/DBListener.html":{},"classes/DBListenerArray.html":{},"classes/DBNode.html":{},"classes/DBNodeArray.html":{},"classes/DBTwoWay.html":{},"classes/DBTwoWayArray.html":{},"classes/DBWriteBuffer.html":{},"classes/DBWriter.html":{},"classes/DBWriterArray.html":{},"interfaces/NodeMethods.html":{},"interfaces/NodeParams.html":{},"classes/OnlineStatus.html":{}}}],["this.local_view",{"_index":2772,"title":{},"body":{"components/MixerViewComponent.html":{}}}],["this.local_view.topleft",{"_index":2795,"title":{},"body":{"components/MixerViewComponent.html":{}}}],["this.local_view.topleft.x",{"_index":2803,"title":{},"body":{"components/MixerViewComponent.html":{}}}],["this.local_view.topleft.y",{"_index":2804,"title":{},"body":{"components/MixerViewComponent.html":{}}}],["this.loom",{"_index":1799,"title":{},"body":{"interfaces/DraftOperationClassification.html":{},"components/DraftdetailComponent.html":{},"interfaces/LoomConfig.html":{},"classes/PedalConfig.html":{},"injectables/PlayerService.html":{}}}],["this.loom.drafttiling",{"_index":1934,"title":{},"body":{"interfaces/DraftOperationClassification.html":{},"interfaces/LoomConfig.html":{},"classes/PedalConfig.html":{},"injectables/PlayerService.html":{}}}],["this.loom.warps",{"_index":1935,"title":{},"body":{"interfaces/DraftOperationClassification.html":{},"interfaces/LoomConfig.html":{},"classes/PedalConfig.html":{},"injectables/PlayerService.html":{}}}],["this.loom_online",{"_index":3402,"title":{},"body":{"interfaces/Pedal.html":{},"classes/PedalStatus.html":{},"injectables/PedalsService.html":{}}}],["this.loom_online.attach",{"_index":3444,"title":{},"body":{"interfaces/Pedal.html":{},"classes/PedalStatus.html":{},"injectables/PedalsService.html":{}}}],["this.loom_online.on('change",{"_index":3451,"title":{},"body":{"interfaces/Pedal.html":{},"classes/PedalStatus.html":{},"injectables/PedalsService.html":{}}}],["this.loom_online.val",{"_index":3427,"title":{},"body":{"interfaces/Pedal.html":{},"classes/PedalStatus.html":{},"injectables/PedalsService.html":{}}}],["this.loom_ready.on('change",{"_index":3470,"title":{},"body":{"interfaces/Pedal.html":{},"classes/PedalStatus.html":{},"injectables/PedalsService.html":{}}}],["this.loom_settings",{"_index":1414,"title":{},"body":{"interfaces/DesignActions.html":{},"components/DraftdetailComponent.html":{}}}],["this.loom_settings.epi",{"_index":2065,"title":{},"body":{"components/DraftdetailComponent.html":{}}}],["this.loomlisteners(state",{"_index":3452,"title":{},"body":{"interfaces/Pedal.html":{},"classes/PedalStatus.html":{},"injectables/PedalsService.html":{}}}],["this.loompedals(false",{"_index":3446,"title":{},"body":{"interfaces/Pedal.html":{},"classes/PedalStatus.html":{},"injectables/PedalsService.html":{}}}],["this.loompedals(state",{"_index":3450,"title":{},"body":{"interfaces/Pedal.html":{},"classes/PedalStatus.html":{},"injectables/PedalsService.html":{}}}],["this.mappedal(fwd_pedal",{"_index":467,"title":{},"body":{"interfaces/ChainIndex.html":{},"injectables/SequencerService.html":{}}}],["this.mappedal(select_pedal_a",{"_index":469,"title":{},"body":{"interfaces/ChainIndex.html":{},"injectables/SequencerService.html":{}}}],["this.mappedal(select_pedal_b",{"_index":472,"title":{},"body":{"interfaces/ChainIndex.html":{},"injectables/SequencerService.html":{}}}],["this.mapping",{"_index":1717,"title":{},"body":{"interfaces/DraftOperationClassification.html":{},"interfaces/LoomConfig.html":{},"classes/PedalConfig.html":{},"injectables/PlayerService.html":{}}}],["this.mapping.filter((m",{"_index":1764,"title":{},"body":{"interfaces/DraftOperationClassification.html":{},"interfaces/LoomConfig.html":{},"classes/PedalConfig.html":{},"injectables/PlayerService.html":{}}}],["this.mapping[id",{"_index":1767,"title":{},"body":{"interfaces/DraftOperationClassification.html":{},"interfaces/LoomConfig.html":{},"classes/PedalConfig.html":{},"injectables/PlayerService.html":{}}}],["this.mapping[id].name.startswith('ch",{"_index":1770,"title":{},"body":{"interfaces/DraftOperationClassification.html":{},"interfaces/LoomConfig.html":{},"classes/PedalConfig.html":{},"injectables/PlayerService.html":{}}}],["this.mapping[pedalid",{"_index":1738,"title":{},"body":{"interfaces/DraftOperationClassification.html":{},"interfaces/LoomConfig.html":{},"classes/PedalConfig.html":{},"injectables/PlayerService.html":{}}}],["this.mapping[pedalid]).op",{"_index":1750,"title":{},"body":{"interfaces/DraftOperationClassification.html":{},"interfaces/LoomConfig.html":{},"classes/PedalConfig.html":{},"injectables/PlayerService.html":{}}}],["this.mapping[pedalid]).ops",{"_index":1745,"title":{},"body":{"interfaces/DraftOperationClassification.html":{},"interfaces/LoomConfig.html":{},"classes/PedalConfig.html":{},"injectables/PlayerService.html":{}}}],["this.mappings",{"_index":1910,"title":{},"body":{"interfaces/DraftOperationClassification.html":{},"interfaces/LoomConfig.html":{},"classes/PedalConfig.html":{},"injectables/PlayerService.html":{}}}],["this.mappings.addoperation(op",{"_index":1896,"title":{},"body":{"interfaces/DraftOperationClassification.html":{},"interfaces/LoomConfig.html":{},"classes/PedalConfig.html":{},"injectables/PlayerService.html":{}}}],["this.mappings.getmap(id",{"_index":1913,"title":{},"body":{"interfaces/DraftOperationClassification.html":{},"interfaces/LoomConfig.html":{},"classes/PedalConfig.html":{},"injectables/PlayerService.html":{}}}],["this.mappings.opismapped('forward",{"_index":1876,"title":{},"body":{"interfaces/DraftOperationClassification.html":{},"interfaces/LoomConfig.html":{},"classes/PedalConfig.html":{},"injectables/PlayerService.html":{}}}],["this.mappings.opismapped('reverse",{"_index":1877,"title":{},"body":{"interfaces/DraftOperationClassification.html":{},"interfaces/LoomConfig.html":{},"classes/PedalConfig.html":{},"injectables/PlayerService.html":{}}}],["this.mappings.pair(p.id",{"_index":1908,"title":{},"body":{"interfaces/DraftOperationClassification.html":{},"interfaces/LoomConfig.html":{},"classes/PedalConfig.html":{},"injectables/PlayerService.html":{}}}],["this.mappings.pedalispaired(p.id",{"_index":1906,"title":{},"body":{"interfaces/DraftOperationClassification.html":{},"interfaces/LoomConfig.html":{},"classes/PedalConfig.html":{},"injectables/PlayerService.html":{}}}],["this.mappings.unmap(p.id",{"_index":1907,"title":{},"body":{"interfaces/DraftOperationClassification.html":{},"interfaces/LoomConfig.html":{},"classes/PedalConfig.html":{},"injectables/PlayerService.html":{}}}],["this.max_inputs",{"_index":259,"title":{},"body":{"classes/AbstractOpFactory.html":{},"classes/BaseOp.html":{},"classes/Branch.html":{},"classes/Bus.html":{},"classes/Merge.html":{},"interfaces/OpClassifier.html":{},"interfaces/OperationProperties.html":{},"classes/Pipe.html":{},"classes/Seed.html":{},"interfaces/TopologyDef.html":{}}}],["this.message",{"_index":4113,"title":{},"body":{"components/SnackbarComponent.html":{}}}],["this.mixerelement",{"_index":3655,"title":{},"body":{"components/PlayerComponent.html":{},"components/WeavingStateComponent.html":{}}}],["this.mixerelement.style.height",{"_index":3675,"title":{},"body":{"components/PlayerComponent.html":{}}}],["this.modal",{"_index":1555,"title":{},"body":{"interfaces/DesignActions.html":{}}}],["this.modal.afterclosed().subscribe(result",{"_index":1560,"title":{},"body":{"interfaces/DesignActions.html":{}}}],["this.modal.componentinstance",{"_index":1554,"title":{},"body":{"interfaces/DesignActions.html":{}}}],["this.modal_height",{"_index":2030,"title":{},"body":{"components/DraftdetailComponent.html":{}}}],["this.mycontrol.valuechanges.pipe",{"_index":3251,"title":{},"body":{"components/OpsComponent.html":{}}}],["this.name",{"_index":243,"title":{},"body":{"classes/AbstractOpFactory.html":{},"classes/BaseOp.html":{},"classes/Branch.html":{},"classes/Bus.html":{},"classes/Merge.html":{},"interfaces/OpClassifier.html":{},"components/OpHelpModal.html":{},"classes/OpSequencer.html":{},"interfaces/OperationProperties.html":{},"classes/Pipe.html":{},"classes/Seed.html":{},"classes/Shape.html":{},"classes/Shuttle.html":{},"classes/System.html":{},"interfaces/TopologyDef.html":{}}}],["this.no_draw",{"_index":729,"title":{},"body":{"components/ConnectionComponent.html":{}}}],["this.nodeat(this.length",{"_index":1136,"title":{},"body":{"classes/DBListener.html":{},"classes/DBListenerArray.html":{},"classes/DBNode.html":{},"classes/DBNodeArray.html":{},"classes/DBTwoWay.html":{},"classes/DBTwoWayArray.html":{},"classes/DBWriteBuffer.html":{},"classes/DBWriter.html":{},"classes/DBWriterArray.html":{},"interfaces/NodeMethods.html":{},"interfaces/NodeParams.html":{},"classes/OnlineStatus.html":{}}}],["this.nodes",{"_index":1039,"title":{},"body":{"classes/DBListener.html":{},"classes/DBListenerArray.html":{},"classes/DBNode.html":{},"classes/DBNodeArray.html":{},"classes/DBTwoWay.html":{},"classes/DBTwoWayArray.html":{},"classes/DBWriteBuffer.html":{},"classes/DBWriter.html":{},"classes/DBWriterArray.html":{},"interfaces/NodeMethods.html":{},"interfaces/NodeParams.html":{},"classes/OnlineStatus.html":{}}}],["this.nodes.length",{"_index":1041,"title":{},"body":{"classes/DBListener.html":{},"classes/DBListenerArray.html":{},"classes/DBNode.html":{},"classes/DBNodeArray.html":{},"classes/DBTwoWay.html":{},"classes/DBTwoWayArray.html":{},"classes/DBWriteBuffer.html":{},"classes/DBWriter.html":{},"classes/DBWriterArray.html":{},"interfaces/NodeMethods.html":{},"interfaces/NodeParams.html":{},"classes/OnlineStatus.html":{}}}],["this.nodes.pop",{"_index":1055,"title":{},"body":{"classes/DBListener.html":{},"classes/DBListenerArray.html":{},"classes/DBNode.html":{},"classes/DBNodeArray.html":{},"classes/DBTwoWay.html":{},"classes/DBTwoWayArray.html":{},"classes/DBWriteBuffer.html":{},"classes/DBWriter.html":{},"classes/DBWriterArray.html":{},"interfaces/NodeMethods.html":{},"interfaces/NodeParams.html":{},"classes/OnlineStatus.html":{}}}],["this.nodes.push(n",{"_index":1053,"title":{},"body":{"classes/DBListener.html":{},"classes/DBListenerArray.html":{},"classes/DBNode.html":{},"classes/DBNodeArray.html":{},"classes/DBTwoWay.html":{},"classes/DBTwoWayArray.html":{},"classes/DBWriteBuffer.html":{},"classes/DBWriter.html":{},"classes/DBWriterArray.html":{},"interfaces/NodeMethods.html":{},"interfaces/NodeParams.html":{},"classes/OnlineStatus.html":{}}}],["this.nodes[i].setval(x",{"_index":1124,"title":{},"body":{"classes/DBListener.html":{},"classes/DBListenerArray.html":{},"classes/DBNode.html":{},"classes/DBNodeArray.html":{},"classes/DBTwoWay.html":{},"classes/DBTwoWayArray.html":{},"classes/DBWriteBuffer.html":{},"classes/DBWriter.html":{},"classes/DBWriterArray.html":{},"interfaces/NodeMethods.html":{},"interfaces/NodeParams.html":{},"classes/OnlineStatus.html":{}}}],["this.nodes[n",{"_index":1051,"title":{},"body":{"classes/DBListener.html":{},"classes/DBListenerArray.html":{},"classes/DBNode.html":{},"classes/DBNodeArray.html":{},"classes/DBTwoWay.html":{},"classes/DBTwoWayArray.html":{},"classes/DBWriteBuffer.html":{},"classes/DBWriter.html":{},"classes/DBWriterArray.html":{},"interfaces/NodeMethods.html":{},"interfaces/NodeParams.html":{},"classes/OnlineStatus.html":{}}}],["this.nodetopedal(newnode",{"_index":3476,"title":{},"body":{"interfaces/Pedal.html":{},"classes/PedalStatus.html":{},"injectables/PedalsService.html":{}}}],["this.note",{"_index":2898,"title":{},"body":{"components/NoteComponent.html":{}}}],["this.note.id",{"_index":2920,"title":{},"body":{"components/NoteComponent.html":{}}}],["this.note.id.tostring",{"_index":2907,"title":{},"body":{"components/NoteComponent.html":{}}}],["this.note.interlacement",{"_index":2916,"title":{},"body":{"components/NoteComponent.html":{}}}],["this.note.interlacement.i",{"_index":2905,"title":{},"body":{"components/NoteComponent.html":{}}}],["this.note.interlacement.j",{"_index":2904,"title":{},"body":{"components/NoteComponent.html":{}}}],["this.notes",{"_index":4086,"title":{},"body":{"classes/Shuttle.html":{},"classes/System.html":{}}}],["this.notes.get(this.id",{"_index":2899,"title":{},"body":{"components/NoteComponent.html":{}}}],["this.notes.notes",{"_index":2903,"title":{},"body":{"components/NoteComponent.html":{}}}],["this.num_pedals.val",{"_index":3431,"title":{},"body":{"interfaces/Pedal.html":{},"classes/PedalStatus.html":{},"injectables/PedalsService.html":{}}}],["this.num_v_pedals",{"_index":3420,"title":{},"body":{"interfaces/Pedal.html":{},"classes/PedalStatus.html":{},"injectables/PedalsService.html":{}}}],["this.number_opts",{"_index":2439,"title":{},"body":{"components/InletComponent.html":{}}}],["this.numparam",{"_index":3313,"title":{},"body":{"components/ParameterComponent.html":{}}}],["this.objs",{"_index":4231,"title":{},"body":{"injectables/ViewportService.html":{}}}],["this.objs.filter(el",{"_index":4234,"title":{},"body":{"injectables/ViewportService.html":{}}}],["this.objs.map(el",{"_index":4237,"title":{},"body":{"injectables/ViewportService.html":{}}}],["this.objs.push({id",{"_index":4232,"title":{},"body":{"injectables/ViewportService.html":{}}}],["this.onconnectionremoved.emit({from",{"_index":2457,"title":{},"body":{"components/InletComponent.html":{}}}],["this.ondesignaction.emit({id",{"_index":1584,"title":{},"body":{"interfaces/DesignActions.html":{}}}],["this.ondrafttoplayer.emit(this._draft",{"_index":1431,"title":{},"body":{"interfaces/DesignActions.html":{}}}],["this.onfileupload.emit({id",{"_index":3332,"title":{},"body":{"components/ParameterComponent.html":{}}}],["this.oninletchange.emit({id",{"_index":2468,"title":{},"body":{"components/InletComponent.html":{}}}],["this.oninputselected.emit(this.inletid",{"_index":2456,"title":{},"body":{"components/InletComponent.html":{}}}],["this.onnamechange.emit(this.id",{"_index":1433,"title":{},"body":{"interfaces/DesignActions.html":{}}}],["this.onnodeadded(snapshot.key",{"_index":1139,"title":{},"body":{"classes/DBListener.html":{},"classes/DBListenerArray.html":{},"classes/DBNode.html":{},"classes/DBNodeArray.html":{},"classes/DBTwoWay.html":{},"classes/DBTwoWayArray.html":{},"classes/DBWriteBuffer.html":{},"classes/DBWriter.html":{},"classes/DBWriterArray.html":{},"interfaces/NodeMethods.html":{},"interfaces/NodeParams.html":{},"classes/OnlineStatus.html":{}}}],["this.onnoderemoved",{"_index":1140,"title":{},"body":{"classes/DBListener.html":{},"classes/DBListenerArray.html":{},"classes/DBNode.html":{},"classes/DBNodeArray.html":{},"classes/DBTwoWay.html":{},"classes/DBTwoWayArray.html":{},"classes/DBWriteBuffer.html":{},"classes/DBWriter.html":{},"classes/DBWriterArray.html":{},"interfaces/NodeMethods.html":{},"interfaces/NodeParams.html":{},"classes/OnlineStatus.html":{}}}],["this.onoperationadded.emit(name",{"_index":3258,"title":{},"body":{"components/OpsComponent.html":{}}}],["this.onoperationadded.emit(this.opnames[ndx",{"_index":3262,"title":{},"body":{"components/OpsComponent.html":{}}}],["this.onoperationparamchange.emit({id",{"_index":3326,"title":{},"body":{"components/ParameterComponent.html":{}}}],["this.onpedal(id",{"_index":1864,"title":{},"body":{"interfaces/DraftOperationClassification.html":{},"interfaces/LoomConfig.html":{},"classes/PedalConfig.html":{},"injectables/PlayerService.html":{}}}],["this.onsave",{"_index":2047,"title":{},"body":{"components/DraftdetailComponent.html":{}}}],["this.onviewportmove.emit(adjusted",{"_index":2805,"title":{},"body":{"components/MixerViewComponent.html":{}}}],["this.onwindowscroll(data",{"_index":2019,"title":{},"body":{"components/DraftdetailComponent.html":{}}}],["this.onzoomchange.emit(e",{"_index":2801,"title":{},"body":{"components/MixerViewComponent.html":{}}}],["this.opid",{"_index":2458,"title":{},"body":{"components/InletComponent.html":{}}}],["this.opispaired(name",{"_index":1780,"title":{},"body":{"interfaces/DraftOperationClassification.html":{},"interfaces/LoomConfig.html":{},"classes/PedalConfig.html":{},"injectables/PlayerService.html":{}}}],["this.opnames",{"_index":3246,"title":{},"body":{"components/OpsComponent.html":{}}}],["this.opnode",{"_index":2431,"title":{},"body":{"components/InletComponent.html":{},"components/ParameterComponent.html":{}}}],["this.opnode.inlets[this.inletid",{"_index":2445,"title":{},"body":{"components/InletComponent.html":{}}}],["this.opnode.params[this.paramid",{"_index":3330,"title":{},"body":{"components/ParameterComponent.html":{}}}],["this.ops",{"_index":1713,"title":{},"body":{"interfaces/DraftOperationClassification.html":{},"interfaces/LoomConfig.html":{},"injectables/MappingsService.html":{},"classes/OpSequencer.html":{},"classes/PedalConfig.html":{},"injectables/PlayerService.html":{}}}],["this.ops.filter((op",{"_index":2647,"title":{},"body":{"injectables/MappingsService.html":{}}}],["this.ops.filter(op",{"_index":2584,"title":{},"body":{"injectables/MappingsService.html":{}}}],["this.ops.findindex((op",{"_index":1735,"title":{},"body":{"interfaces/DraftOperationClassification.html":{},"interfaces/LoomConfig.html":{},"classes/PedalConfig.html":{},"injectables/PlayerService.html":{}}}],["this.ops.getop(data.op.name",{"_index":2976,"title":{},"body":{"components/OpHelpModal.html":{}}}],["this.ops.getop(e).perform([this.draft",{"_index":2051,"title":{},"body":{"components/DraftdetailComponent.html":{}}}],["this.ops.getop(this.opnode.name",{"_index":2438,"title":{},"body":{"components/InletComponent.html":{}}}],["this.ops.isdynamic(this.name",{"_index":2979,"title":{},"body":{"components/OpHelpModal.html":{}}}],["this.ops.length",{"_index":1729,"title":{},"body":{"interfaces/DraftOperationClassification.html":{},"interfaces/LoomConfig.html":{},"injectables/MappingsService.html":{},"classes/OpSequencer.html":{},"classes/PedalConfig.html":{},"injectables/PlayerService.html":{}}}],["this.ops.ops.concat(this.ops.dynamic_ops",{"_index":3245,"title":{},"body":{"components/OpsComponent.html":{}}}],["this.ops.push(o",{"_index":1730,"title":{},"body":{"interfaces/DraftOperationClassification.html":{},"interfaces/LoomConfig.html":{},"injectables/MappingsService.html":{},"classes/OpSequencer.html":{},"classes/PedalConfig.html":{},"injectables/PlayerService.html":{}}}],["this.ops[this._pos",{"_index":3065,"title":{},"body":{"classes/OpSequencer.html":{}}}],["this.ops[this.chains[ch_id].pos",{"_index":490,"title":{},"body":{"interfaces/ChainIndex.html":{},"injectables/SequencerService.html":{}}}],["this.ops[this.ops.findindex((op",{"_index":1742,"title":{},"body":{"interfaces/DraftOperationClassification.html":{},"interfaces/LoomConfig.html":{},"injectables/MappingsService.html":{},"classes/PedalConfig.html":{},"injectables/PlayerService.html":{}}}],["this.orientation_x",{"_index":786,"title":{},"body":{"components/ConnectionComponent.html":{}}}],["this.orientation_y",{"_index":787,"title":{},"body":{"components/ConnectionComponent.html":{}}}],["this.oss.getop('germanify",{"_index":1860,"title":{},"body":{"interfaces/DraftOperationClassification.html":{},"interfaces/LoomConfig.html":{},"classes/PedalConfig.html":{},"injectables/PlayerService.html":{}}}],["this.oss.getop('tabby",{"_index":3649,"title":{},"body":{"components/PlayerComponent.html":{}}}],["this.ownelement",{"_index":3653,"title":{},"body":{"components/PlayerComponent.html":{},"components/WeavingStateComponent.html":{}}}],["this.ownelement.getboundingclientrect().height",{"_index":3671,"title":{},"body":{"components/PlayerComponent.html":{}}}],["this.p_pedal_array.attach",{"_index":3500,"title":{},"body":{"interfaces/Pedal.html":{},"classes/PedalStatus.html":{},"injectables/PedalsService.html":{}}}],["this.p_pedal_array.detach",{"_index":3501,"title":{},"body":{"interfaces/Pedal.html":{},"classes/PedalStatus.html":{},"injectables/PedalsService.html":{}}}],["this.p_pedal_array.on('child",{"_index":3455,"title":{},"body":{"interfaces/Pedal.html":{},"classes/PedalStatus.html":{},"injectables/PedalsService.html":{}}}],["this.p_pedal_array.on('ready",{"_index":3453,"title":{},"body":{"interfaces/Pedal.html":{},"classes/PedalStatus.html":{},"injectables/PedalsService.html":{}}}],["this.p_pedal_array.ready",{"_index":3497,"title":{},"body":{"interfaces/Pedal.html":{},"classes/PedalStatus.html":{},"injectables/PedalsService.html":{}}}],["this.p_pedals.concat(this.v_pedals",{"_index":3436,"title":{},"body":{"interfaces/Pedal.html":{},"classes/PedalStatus.html":{},"injectables/PedalsService.html":{}}}],["this.p_pedals.length",{"_index":3461,"title":{},"body":{"interfaces/Pedal.html":{},"classes/PedalStatus.html":{},"injectables/PedalsService.html":{}}}],["this.p_pedals.pop",{"_index":3462,"title":{},"body":{"interfaces/Pedal.html":{},"classes/PedalStatus.html":{},"injectables/PedalsService.html":{}}}],["this.p_pedals.push(this.nodetopedal(newnode",{"_index":3458,"title":{},"body":{"interfaces/Pedal.html":{},"classes/PedalStatus.html":{},"injectables/PedalsService.html":{}}}],["this.p_pedals[e.id].state",{"_index":3463,"title":{},"body":{"interfaces/Pedal.html":{},"classes/PedalStatus.html":{},"injectables/PedalsService.html":{}}}],["this.p_prog",{"_index":3058,"title":{},"body":{"classes/OpSequencer.html":{}}}],["this.p_select_a",{"_index":3060,"title":{},"body":{"classes/OpSequencer.html":{}}}],["this.p_select_b",{"_index":3063,"title":{},"body":{"classes/OpSequencer.html":{}}}],["this.pairs[id",{"_index":1775,"title":{},"body":{"interfaces/DraftOperationClassification.html":{},"interfaces/LoomConfig.html":{},"injectables/MappingsService.html":{},"classes/PedalConfig.html":{},"injectables/PlayerService.html":{}}}],["this.param",{"_index":3314,"title":{},"body":{"components/ParameterComponent.html":{}}}],["this.paramid",{"_index":3327,"title":{},"body":{"components/ParameterComponent.html":{}}}],["this.params",{"_index":252,"title":{},"body":{"classes/AbstractOpFactory.html":{},"classes/BaseOp.html":{},"classes/Branch.html":{},"classes/Bus.html":{},"classes/Merge.html":{},"interfaces/OpClassifier.html":{},"components/OpHelpModal.html":{},"interfaces/OperationProperties.html":{},"classes/Pipe.html":{},"classes/Seed.html":{},"interfaces/TopologyDef.html":{}}}],["this.params[this.dynamic_param_id].name",{"_index":2985,"title":{},"body":{"components/OpHelpModal.html":{}}}],["this.parent_id",{"_index":1400,"title":{},"body":{"interfaces/DesignActions.html":{}}}],["this.parentnode",{"_index":1038,"title":{},"body":{"classes/DBListener.html":{},"classes/DBListenerArray.html":{},"classes/DBNode.html":{},"classes/DBNodeArray.html":{},"classes/DBTwoWay.html":{},"classes/DBTwoWayArray.html":{},"classes/DBWriteBuffer.html":{},"classes/DBWriter.html":{},"classes/DBWriterArray.html":{},"interfaces/NodeMethods.html":{},"interfaces/NodeParams.html":{},"classes/OnlineStatus.html":{}}}],["this.parentnode.active",{"_index":1043,"title":{},"body":{"classes/DBListener.html":{},"classes/DBListenerArray.html":{},"classes/DBNode.html":{},"classes/DBNodeArray.html":{},"classes/DBTwoWay.html":{},"classes/DBTwoWayArray.html":{},"classes/DBWriteBuffer.html":{},"classes/DBWriter.html":{},"classes/DBWriterArray.html":{},"interfaces/NodeMethods.html":{},"interfaces/NodeParams.html":{},"classes/OnlineStatus.html":{}}}],["this.parentnode.attach",{"_index":1069,"title":{},"body":{"classes/DBListener.html":{},"classes/DBListenerArray.html":{},"classes/DBNode.html":{},"classes/DBNodeArray.html":{},"classes/DBTwoWay.html":{},"classes/DBTwoWayArray.html":{},"classes/DBWriteBuffer.html":{},"classes/DBWriter.html":{},"classes/DBWriterArray.html":{},"interfaces/NodeMethods.html":{},"interfaces/NodeParams.html":{},"classes/OnlineStatus.html":{}}}],["this.parentnode.getnow",{"_index":1106,"title":{},"body":{"classes/DBListener.html":{},"classes/DBListenerArray.html":{},"classes/DBNode.html":{},"classes/DBNodeArray.html":{},"classes/DBTwoWay.html":{},"classes/DBTwoWayArray.html":{},"classes/DBWriteBuffer.html":{},"classes/DBWriter.html":{},"classes/DBWriterArray.html":{},"interfaces/NodeMethods.html":{},"interfaces/NodeParams.html":{},"classes/OnlineStatus.html":{}}}],["this.parentnode.once('change",{"_index":1070,"title":{},"body":{"classes/DBListener.html":{},"classes/DBListenerArray.html":{},"classes/DBNode.html":{},"classes/DBNodeArray.html":{},"classes/DBTwoWay.html":{},"classes/DBTwoWayArray.html":{},"classes/DBWriteBuffer.html":{},"classes/DBWriter.html":{},"classes/DBWriterArray.html":{},"interfaces/NodeMethods.html":{},"interfaces/NodeParams.html":{},"classes/OnlineStatus.html":{}}}],["this.parentnode.setval(empty_node_array",{"_index":1117,"title":{},"body":{"classes/DBListener.html":{},"classes/DBListenerArray.html":{},"classes/DBNode.html":{},"classes/DBNodeArray.html":{},"classes/DBTwoWay.html":{},"classes/DBTwoWayArray.html":{},"classes/DBWriteBuffer.html":{},"classes/DBWriter.html":{},"classes/DBWriterArray.html":{},"interfaces/NodeMethods.html":{},"interfaces/NodeParams.html":{},"classes/OnlineStatus.html":{}}}],["this.parentnode.val",{"_index":1046,"title":{},"body":{"classes/DBListener.html":{},"classes/DBListenerArray.html":{},"classes/DBNode.html":{},"classes/DBNodeArray.html":{},"classes/DBTwoWay.html":{},"classes/DBTwoWayArray.html":{},"classes/DBWriteBuffer.html":{},"classes/DBWriter.html":{},"classes/DBWriterArray.html":{},"interfaces/NodeMethods.html":{},"interfaces/NodeParams.html":{},"classes/OnlineStatus.html":{}}}],["this.parsedefaultinletvalue(type",{"_index":2444,"title":{},"body":{"components/InletComponent.html":{}}}],["this.pds.togglepedalbyid(0",{"_index":4276,"title":{},"body":{"components/VirtualPedalsComponent.html":{}}}],["this.pds.togglepedalbyid(10",{"_index":4281,"title":{},"body":{"components/VirtualPedalsComponent.html":{}}}],["this.pds.togglepedalbyid(parseint(event.key",{"_index":4280,"title":{},"body":{"components/VirtualPedalsComponent.html":{}}}],["this.pedal_array",{"_index":3417,"title":{},"body":{"interfaces/Pedal.html":{},"classes/PedalStatus.html":{},"injectables/PedalsService.html":{}}}],["this.pedal_states",{"_index":3419,"title":{},"body":{"interfaces/Pedal.html":{},"classes/PedalStatus.html":{},"injectables/PedalsService.html":{}}}],["this.pedalinsequencer(id",{"_index":2652,"title":{},"body":{"injectables/MappingsService.html":{}}}],["this.pedalischained(id",{"_index":1772,"title":{},"body":{"interfaces/DraftOperationClassification.html":{},"interfaces/LoomConfig.html":{},"injectables/MappingsService.html":{},"classes/PedalConfig.html":{},"injectables/PlayerService.html":{}}}],["this.pedalischained(pedalid",{"_index":1743,"title":{},"body":{"interfaces/DraftOperationClassification.html":{},"interfaces/LoomConfig.html":{},"classes/PedalConfig.html":{},"injectables/PlayerService.html":{}}}],["this.pedalismapped(id",{"_index":1769,"title":{},"body":{"interfaces/DraftOperationClassification.html":{},"interfaces/LoomConfig.html":{},"injectables/MappingsService.html":{},"classes/PedalConfig.html":{},"injectables/PlayerService.html":{}}}],["this.pedalispaired(id",{"_index":2635,"title":{},"body":{"injectables/MappingsService.html":{}}}],["this.pedalispaired(p",{"_index":2581,"title":{},"body":{"injectables/MappingsService.html":{}}}],["this.pedalispaired(pedalid",{"_index":1748,"title":{},"body":{"interfaces/DraftOperationClassification.html":{},"interfaces/LoomConfig.html":{},"classes/PedalConfig.html":{},"injectables/PlayerService.html":{}}}],["this.pedalops.addoperation(playeropfromtree",{"_index":1859,"title":{},"body":{"interfaces/DraftOperationClassification.html":{},"interfaces/LoomConfig.html":{},"classes/PedalConfig.html":{},"injectables/PlayerService.html":{}}}],["this.pedals",{"_index":1711,"title":{},"body":{"interfaces/DraftOperationClassification.html":{},"interfaces/LoomConfig.html":{},"classes/PedalConfig.html":{},"injectables/PlayerService.html":{}}}],["this.pedals.active_draft.val",{"_index":1879,"title":{},"body":{"interfaces/DraftOperationClassification.html":{},"interfaces/LoomConfig.html":{},"classes/PedalConfig.html":{},"injectables/PlayerService.html":{}}}],["this.pedals.length",{"_index":1718,"title":{},"body":{"interfaces/DraftOperationClassification.html":{},"interfaces/LoomConfig.html":{},"injectables/MappingsService.html":{},"classes/PedalConfig.html":{},"injectables/PlayerService.html":{}}}],["this.pedals.pop",{"_index":1725,"title":{},"body":{"interfaces/DraftOperationClassification.html":{},"interfaces/LoomConfig.html":{},"injectables/MappingsService.html":{},"classes/PedalConfig.html":{},"injectables/PlayerService.html":{}}}],["this.pedals.push(p",{"_index":1722,"title":{},"body":{"interfaces/DraftOperationClassification.html":{},"interfaces/LoomConfig.html":{},"classes/PedalConfig.html":{},"injectables/PlayerService.html":{}}}],["this.pedals.readytoweave",{"_index":1875,"title":{},"body":{"interfaces/DraftOperationClassification.html":{},"interfaces/LoomConfig.html":{},"classes/PedalConfig.html":{},"injectables/PlayerService.html":{}}}],["this.pedals.senddraftrow(this.currentrow",{"_index":1923,"title":{},"body":{"interfaces/DraftOperationClassification.html":{},"interfaces/LoomConfig.html":{},"classes/PedalConfig.html":{},"injectables/PlayerService.html":{}}}],["this.perform",{"_index":249,"title":{},"body":{"classes/AbstractOpFactory.html":{},"classes/BaseOp.html":{},"classes/Branch.html":{},"classes/Bus.html":{},"classes/Merge.html":{},"interfaces/OpClassifier.html":{},"interfaces/OperationProperties.html":{},"classes/Pipe.html":{},"classes/Seed.html":{},"interfaces/TopologyDef.html":{}}}],["this.pi_online",{"_index":3399,"title":{},"body":{"interfaces/Pedal.html":{},"classes/PedalStatus.html":{},"injectables/PedalsService.html":{}}}],["this.pi_online.attach",{"_index":3401,"title":{},"body":{"interfaces/Pedal.html":{},"classes/PedalStatus.html":{},"injectables/PedalsService.html":{}}}],["this.pi_online.checkalive",{"_index":3443,"title":{},"body":{"interfaces/Pedal.html":{},"classes/PedalStatus.html":{},"injectables/PedalsService.html":{}}}],["this.pi_online.on('change",{"_index":3449,"title":{},"body":{"interfaces/Pedal.html":{},"classes/PedalStatus.html":{},"injectables/PedalsService.html":{}}}],["this.pi_online.val",{"_index":3426,"title":{},"body":{"interfaces/Pedal.html":{},"classes/PedalStatus.html":{},"injectables/PedalsService.html":{}}}],["this.player.onpedal(e.id",{"_index":3469,"title":{},"body":{"interfaces/Pedal.html":{},"classes/PedalStatus.html":{},"injectables/PedalsService.html":{}}}],["this.playopen",{"_index":3665,"title":{},"body":{"components/PlayerComponent.html":{}}}],["this.pls.draft",{"_index":3641,"title":{},"body":{"components/PlayerComponent.html":{},"components/WeavingStateComponent.html":{}}}],["this.pls.pedals",{"_index":3647,"title":{},"body":{"components/PlayerComponent.html":{}}}],["this.pls.redraw.on('redraw",{"_index":3667,"title":{},"body":{"components/PlayerComponent.html":{},"components/WeavingStateComponent.html":{}}}],["this.pls.setdraft(result[0",{"_index":3651,"title":{},"body":{"components/PlayerComponent.html":{}}}],["this.pls.state",{"_index":3669,"title":{},"body":{"components/PlayerComponent.html":{},"components/WeavingStateComponent.html":{}}}],["this.popnode",{"_index":1080,"title":{},"body":{"classes/DBListener.html":{},"classes/DBListenerArray.html":{},"classes/DBNode.html":{},"classes/DBNodeArray.html":{},"classes/DBTwoWay.html":{},"classes/DBTwoWayArray.html":{},"classes/DBWriteBuffer.html":{},"classes/DBWriter.html":{},"classes/DBWriterArray.html":{},"interfaces/NodeMethods.html":{},"interfaces/NodeParams.html":{},"classes/OnlineStatus.html":{}}}],["this.pushnode(childnode",{"_index":1090,"title":{},"body":{"classes/DBListener.html":{},"classes/DBListenerArray.html":{},"classes/DBNode.html":{},"classes/DBNodeArray.html":{},"classes/DBTwoWay.html":{},"classes/DBTwoWayArray.html":{},"classes/DBWriteBuffer.html":{},"classes/DBWriter.html":{},"classes/DBWriterArray.html":{},"interfaces/NodeMethods.html":{},"interfaces/NodeParams.html":{},"classes/OnlineStatus.html":{}}}],["this.ready",{"_index":1068,"title":{},"body":{"classes/DBListener.html":{},"classes/DBListenerArray.html":{},"classes/DBNode.html":{},"classes/DBNodeArray.html":{},"classes/DBTwoWay.html":{},"classes/DBTwoWayArray.html":{},"classes/DBWriteBuffer.html":{},"classes/DBWriter.html":{},"classes/DBWriterArray.html":{},"interfaces/NodeMethods.html":{},"interfaces/NodeParams.html":{},"classes/OnlineStatus.html":{}}}],["this.readytoweave",{"_index":461,"title":{},"body":{"interfaces/ChainIndex.html":{},"injectables/SequencerService.html":{}}}],["this.redraw.emit('redraw",{"_index":1920,"title":{},"body":{"interfaces/DraftOperationClassification.html":{},"interfaces/LoomConfig.html":{},"classes/PedalConfig.html":{},"injectables/PlayerService.html":{}}}],["this.remnode",{"_index":1122,"title":{},"body":{"classes/DBListener.html":{},"classes/DBListenerArray.html":{},"classes/DBNode.html":{},"classes/DBNodeArray.html":{},"classes/DBTwoWay.html":{},"classes/DBTwoWayArray.html":{},"classes/DBWriteBuffer.html":{},"classes/DBWriter.html":{},"classes/DBWriterArray.html":{},"interfaces/NodeMethods.html":{},"interfaces/NodeParams.html":{},"classes/OnlineStatus.html":{}}}],["this.render.getcelldims('base').h",{"_index":2032,"title":{},"body":{"components/DraftdetailComponent.html":{}}}],["this.resample(math.floor(bounds.height/scale",{"_index":4030,"title":{},"body":{"classes/Shape-1.html":{}}}],["this.rescale",{"_index":1328,"title":{},"body":{"interfaces/DesignActions.html":{},"components/NoteComponent.html":{}}}],["this.rescaleforbitmap",{"_index":1511,"title":{},"body":{"interfaces/DesignActions.html":{}}}],["this.resizecontainer",{"_index":3666,"title":{},"body":{"components/PlayerComponent.html":{},"components/WeavingStateComponent.html":{}}}],["this.resolvepointtondx(p",{"_index":1509,"title":{},"body":{"interfaces/DesignActions.html":{}}}],["this.savenotetext.emit",{"_index":2921,"title":{},"body":{"components/NoteComponent.html":{}}}],["this.scale",{"_index":814,"title":{},"body":{"components/ConnectionComponent.html":{},"interfaces/DesignActions.html":{},"components/NoteComponent.html":{},"classes/Shape-1.html":{},"components/SnackbarComponent.html":{}}}],["this.scale).then(out",{"_index":1535,"title":{},"body":{"interfaces/DesignActions.html":{}}}],["this.scale/2",{"_index":4033,"title":{},"body":{"classes/Shape-1.html":{}}}],["this.scale/5",{"_index":821,"title":{},"body":{"components/ConnectionComponent.html":{}}}],["this.scale/this.default_cell",{"_index":1447,"title":{},"body":{"interfaces/DesignActions.html":{},"components/NoteComponent.html":{}}}],["this.scale/this.default_cell_size",{"_index":754,"title":{},"body":{"components/ConnectionComponent.html":{}}}],["this.scroll",{"_index":2016,"title":{},"body":{"components/DraftdetailComponent.html":{}}}],["this.scrollingsubscription",{"_index":2015,"title":{},"body":{"components/DraftdetailComponent.html":{}}}],["this.scrollingsubscription.unsubscribe",{"_index":2057,"title":{},"body":{"components/DraftdetailComponent.html":{}}}],["this.select('neq",{"_index":2335,"title":{},"body":{"interfaces/Ink.html":{},"injectables/InkService.html":{}}}],["this.select.offset_x.min",{"_index":3834,"title":{},"body":{"classes/Render.html":{}}}],["this.select.offset_y.min",{"_index":3836,"title":{},"body":{"classes/Render.html":{}}}],["this.selected",{"_index":2348,"title":{},"body":{"interfaces/Ink.html":{},"injectables/InkService.html":{}}}],["this.selected.value",{"_index":2360,"title":{},"body":{"interfaces/Ink.html":{},"injectables/InkService.html":{}}}],["this.selecting",{"_index":3071,"title":{},"body":{"classes/OpSequencer.html":{}}}],["this.selectparam",{"_index":3317,"title":{},"body":{"components/ParameterComponent.html":{}}}],["this.seq",{"_index":1870,"title":{},"body":{"interfaces/DraftOperationClassification.html":{},"interfaces/LoomConfig.html":{},"classes/PedalConfig.html":{},"injectables/PlayerService.html":{}}}],["this.seq.addpedals(0",{"_index":1872,"title":{},"body":{"interfaces/DraftOperationClassification.html":{},"interfaces/LoomConfig.html":{},"classes/PedalConfig.html":{},"injectables/PlayerService.html":{}}}],["this.seq.readytoweave",{"_index":1878,"title":{},"body":{"interfaces/DraftOperationClassification.html":{},"interfaces/LoomConfig.html":{},"classes/PedalConfig.html":{},"injectables/PlayerService.html":{}}}],["this.seq_array",{"_index":456,"title":{},"body":{"interfaces/ChainIndex.html":{},"injectables/SequencerService.html":{}}}],["this.seq_array.current",{"_index":459,"title":{},"body":{"interfaces/ChainIndex.html":{},"injectables/SequencerService.html":{}}}],["this.seq_array.nextop",{"_index":496,"title":{},"body":{"interfaces/ChainIndex.html":{},"injectables/SequencerService.html":{}}}],["this.seq_array.ops",{"_index":457,"title":{},"body":{"interfaces/ChainIndex.html":{},"injectables/SequencerService.html":{}}}],["this.seq_array.pos",{"_index":455,"title":{},"body":{"interfaces/ChainIndex.html":{},"injectables/SequencerService.html":{}}}],["this.seq_array.prevop",{"_index":498,"title":{},"body":{"interfaces/ChainIndex.html":{},"injectables/SequencerService.html":{}}}],["this.seq_array.removeop",{"_index":494,"title":{},"body":{"interfaces/ChainIndex.html":{},"injectables/SequencerService.html":{}}}],["this.set(bleh.x",{"_index":4247,"title":{},"body":{"injectables/ViewportService.html":{}}}],["this.setdraft(result[0",{"_index":1795,"title":{},"body":{"interfaces/DraftOperationClassification.html":{},"interfaces/LoomConfig.html":{},"classes/PedalConfig.html":{},"injectables/PlayerService.html":{}}}],["this.setmap(\"sequencer",{"_index":2641,"title":{},"body":{"injectables/MappingsService.html":{}}}],["this.setmap(id",{"_index":2632,"title":{},"body":{"injectables/MappingsService.html":{}}}],["this.setposition(tl_offset",{"_index":1409,"title":{},"body":{"interfaces/DesignActions.html":{}}}],["this.setposition({x",{"_index":1471,"title":{},"body":{"interfaces/DesignActions.html":{}}}],["this.shuttles",{"_index":3983,"title":{},"body":{"classes/Shape.html":{}}}],["this.ss.weftsystemisvisible(val",{"_index":3849,"title":{},"body":{"classes/Render.html":{}}}],["this.startcol",{"_index":3984,"title":{},"body":{"classes/Shape.html":{}}}],["this.startlabel",{"_index":4093,"title":{},"body":{"classes/Shuttle.html":{}}}],["this.state",{"_index":1796,"title":{},"body":{"interfaces/DraftOperationClassification.html":{},"interfaces/LoomConfig.html":{},"classes/PedalConfig.html":{},"injectables/PlayerService.html":{}}}],["this.state.draft",{"_index":1797,"title":{},"body":{"interfaces/DraftOperationClassification.html":{},"interfaces/LoomConfig.html":{},"classes/PedalConfig.html":{},"injectables/PlayerService.html":{}}}],["this.state.row",{"_index":1897,"title":{},"body":{"interfaces/DraftOperationClassification.html":{},"interfaces/LoomConfig.html":{},"classes/PedalConfig.html":{},"injectables/PlayerService.html":{}}}],["this.state.weaving",{"_index":1921,"title":{},"body":{"interfaces/DraftOperationClassification.html":{},"interfaces/LoomConfig.html":{},"classes/PedalConfig.html":{},"injectables/PlayerService.html":{}}}],["this.status",{"_index":3438,"title":{},"body":{"interfaces/Pedal.html":{},"classes/PedalStatus.html":{},"injectables/PedalsService.html":{}}}],["this.status.active_draft",{"_index":3485,"title":{},"body":{"interfaces/Pedal.html":{},"classes/PedalStatus.html":{},"injectables/PedalsService.html":{}}}],["this.status.loom_online",{"_index":3483,"title":{},"body":{"interfaces/Pedal.html":{},"classes/PedalStatus.html":{},"injectables/PedalsService.html":{}}}],["this.status.loom_ready",{"_index":3486,"title":{},"body":{"interfaces/Pedal.html":{},"classes/PedalStatus.html":{},"injectables/PedalsService.html":{}}}],["this.status.num_pedals",{"_index":3490,"title":{},"body":{"interfaces/Pedal.html":{},"classes/PedalStatus.html":{},"injectables/PedalsService.html":{}}}],["this.status.num_picks",{"_index":3487,"title":{},"body":{"interfaces/Pedal.html":{},"classes/PedalStatus.html":{},"injectables/PedalsService.html":{}}}],["this.status.num_v_pedals",{"_index":3494,"title":{},"body":{"interfaces/Pedal.html":{},"classes/PedalStatus.html":{},"injectables/PedalsService.html":{}}}],["this.status.pedal_array",{"_index":3493,"title":{},"body":{"interfaces/Pedal.html":{},"classes/PedalStatus.html":{},"injectables/PedalsService.html":{}}}],["this.status.pedal_states",{"_index":3491,"title":{},"body":{"interfaces/Pedal.html":{},"classes/PedalStatus.html":{},"injectables/PedalsService.html":{}}}],["this.status.pi_online",{"_index":3482,"title":{},"body":{"interfaces/Pedal.html":{},"classes/PedalStatus.html":{},"injectables/PedalsService.html":{}}}],["this.status.pick_data",{"_index":3488,"title":{},"body":{"interfaces/Pedal.html":{},"classes/PedalStatus.html":{},"injectables/PedalsService.html":{}}}],["this.status.v_pedal_array",{"_index":3496,"title":{},"body":{"interfaces/Pedal.html":{},"classes/PedalStatus.html":{},"injectables/PedalsService.html":{}}}],["this.status.v_pedal_states",{"_index":3495,"title":{},"body":{"interfaces/Pedal.html":{},"classes/PedalStatus.html":{},"injectables/PedalsService.html":{}}}],["this.status.vacuum_on",{"_index":3484,"title":{},"body":{"interfaces/Pedal.html":{},"classes/PedalStatus.html":{},"injectables/PedalsService.html":{}}}],["this.stringparam",{"_index":3319,"title":{},"body":{"components/ParameterComponent.html":{}}}],["this.structureopfromdraft(d",{"_index":1894,"title":{},"body":{"interfaces/DraftOperationClassification.html":{},"interfaces/LoomConfig.html":{},"classes/PedalConfig.html":{},"injectables/PlayerService.html":{}}}],["this.svg",{"_index":732,"title":{},"body":{"components/ConnectionComponent.html":{}}}],["this.svg.innerhtml",{"_index":790,"title":{},"body":{"components/ConnectionComponent.html":{}}}],["this.systems.weft_systems.map(el",{"_index":2434,"title":{},"body":{"components/InletComponent.html":{}}}],["this.target",{"_index":3883,"title":{},"body":{"classes/Selection.html":{}}}],["this.target.id",{"_index":3880,"title":{},"body":{"classes/Selection.html":{}}}],["this.thickness",{"_index":4090,"title":{},"body":{"classes/Shuttle.html":{}}}],["this.thickness=100",{"_index":4084,"title":{},"body":{"classes/Shuttle.html":{}}}],["this.to",{"_index":727,"title":{},"body":{"components/ConnectionComponent.html":{}}}],["this.tree.getcomponent(this.from",{"_index":808,"title":{},"body":{"components/ConnectionComponent.html":{}}}],["this.tree.getcomponent(this.to",{"_index":736,"title":{},"body":{"components/ConnectionComponent.html":{}}}],["this.tree.getdraft(id",{"_index":2461,"title":{},"body":{"components/InletComponent.html":{}}}],["this.tree.getdraft(this.id",{"_index":1413,"title":{},"body":{"interfaces/DesignActions.html":{},"components/DraftdetailComponent.html":{}}}],["this.tree.getinletofcxn(to.id",{"_index":758,"title":{},"body":{"components/ConnectionComponent.html":{}}}],["this.tree.getloom(this.id",{"_index":1541,"title":{},"body":{"interfaces/DesignActions.html":{},"components/DraftdetailComponent.html":{}}}],["this.tree.getloomsettings(this.id",{"_index":1415,"title":{},"body":{"interfaces/DesignActions.html":{},"components/DraftdetailComponent.html":{}}}],["this.tree.getnode(this.opid",{"_index":2464,"title":{},"body":{"components/InletComponent.html":{},"components/ParameterComponent.html":{}}}],["this.tree.getopnode(this.opid",{"_index":2432,"title":{},"body":{"components/InletComponent.html":{},"components/ParameterComponent.html":{}}}],["this.tree.getsubdraftparent(this.id",{"_index":1401,"title":{},"body":{"interfaces/DesignActions.html":{}}}],["this.tree.gettreenode(this.id",{"_index":720,"title":{},"body":{"components/ConnectionComponent.html":{}}}],["this.tree.gettype(this.from",{"_index":730,"title":{},"body":{"components/ConnectionComponent.html":{}}}],["this.tree.hasparent(this.id",{"_index":2024,"title":{},"body":{"components/DraftdetailComponent.html":{}}}],["this.tree.hassinglechild(this.from",{"_index":731,"title":{},"body":{"components/ConnectionComponent.html":{}}}],["this.tree.setdraft(this.id",{"_index":1583,"title":{},"body":{"interfaces/DesignActions.html":{}}}],["this.type",{"_index":4085,"title":{},"body":{"classes/Shuttle.html":{}}}],["this.unmap(dst",{"_index":2608,"title":{},"body":{"injectables/MappingsService.html":{}}}],["this.unmap(p",{"_index":2603,"title":{},"body":{"injectables/MappingsService.html":{}}}],["this.unpairedops.push(o",{"_index":1732,"title":{},"body":{"interfaces/DraftOperationClassification.html":{},"interfaces/LoomConfig.html":{},"classes/PedalConfig.html":{},"injectables/PlayerService.html":{}}}],["this.unpairedops.splice(o",{"_index":1737,"title":{},"body":{"interfaces/DraftOperationClassification.html":{},"interfaces/LoomConfig.html":{},"injectables/MappingsService.html":{},"classes/PedalConfig.html":{},"injectables/PlayerService.html":{}}}],["this.unpairedops.splice(op.id",{"_index":1776,"title":{},"body":{"interfaces/DraftOperationClassification.html":{},"interfaces/LoomConfig.html":{},"injectables/MappingsService.html":{},"classes/PedalConfig.html":{},"injectables/PlayerService.html":{}}}],["this.unpairpedal(pid",{"_index":1781,"title":{},"body":{"interfaces/DraftOperationClassification.html":{},"interfaces/LoomConfig.html":{},"classes/PedalConfig.html":{},"injectables/PlayerService.html":{}}}],["this.unsubscribers",{"_index":973,"title":{},"body":{"classes/DBListener.html":{},"classes/DBListenerArray.html":{},"classes/DBNode.html":{},"classes/DBNodeArray.html":{},"classes/DBTwoWay.html":{},"classes/DBTwoWayArray.html":{},"classes/DBWriteBuffer.html":{},"classes/DBWriter.html":{},"classes/DBWriterArray.html":{},"interfaces/NodeMethods.html":{},"interfaces/NodeParams.html":{},"classes/OnlineStatus.html":{}}}],["this.unsubscribers.length",{"_index":1012,"title":{},"body":{"classes/DBListener.html":{},"classes/DBListenerArray.html":{},"classes/DBNode.html":{},"classes/DBNodeArray.html":{},"classes/DBTwoWay.html":{},"classes/DBTwoWayArray.html":{},"classes/DBWriteBuffer.html":{},"classes/DBWriter.html":{},"classes/DBWriterArray.html":{},"interfaces/NodeMethods.html":{},"interfaces/NodeParams.html":{},"classes/OnlineStatus.html":{}}}],["this.unsubscribers.pop",{"_index":1013,"title":{},"body":{"classes/DBListener.html":{},"classes/DBListenerArray.html":{},"classes/DBNode.html":{},"classes/DBNodeArray.html":{},"classes/DBTwoWay.html":{},"classes/DBTwoWayArray.html":{},"classes/DBWriteBuffer.html":{},"classes/DBWriter.html":{},"classes/DBWriterArray.html":{},"interfaces/NodeMethods.html":{},"interfaces/NodeParams.html":{},"classes/OnlineStatus.html":{}}}],["this.unsubscribers.push",{"_index":1072,"title":{},"body":{"classes/DBListener.html":{},"classes/DBListenerArray.html":{},"classes/DBNode.html":{},"classes/DBNodeArray.html":{},"classes/DBTwoWay.html":{},"classes/DBTwoWayArray.html":{},"classes/DBWriteBuffer.html":{},"classes/DBWriter.html":{},"classes/DBWriterArray.html":{},"interfaces/NodeMethods.html":{},"interfaces/NodeParams.html":{},"classes/OnlineStatus.html":{}}}],["this.unsubscribers.push(unsub",{"_index":1007,"title":{},"body":{"classes/DBListener.html":{},"classes/DBListenerArray.html":{},"classes/DBNode.html":{},"classes/DBNodeArray.html":{},"classes/DBTwoWay.html":{},"classes/DBTwoWayArray.html":{},"classes/DBWriteBuffer.html":{},"classes/DBWriter.html":{},"classes/DBWriterArray.html":{},"interfaces/NodeMethods.html":{},"interfaces/NodeParams.html":{},"classes/OnlineStatus.html":{}}}],["this.updatefromposition(from_comp",{"_index":809,"title":{},"body":{"components/ConnectionComponent.html":{}}}],["this.updatefromposition(this.tree.getcomponent(this.from",{"_index":742,"title":{},"body":{"components/ConnectionComponent.html":{}}}],["this.updatelocaldims",{"_index":2793,"title":{},"body":{"components/MixerViewComponent.html":{}}}],["this.updatetoposition",{"_index":743,"title":{},"body":{"components/ConnectionComponent.html":{}}}],["this.updatetoposition(to_comp",{"_index":810,"title":{},"body":{"components/ConnectionComponent.html":{}}}],["this.updatevariables(shuttledict",{"_index":4087,"title":{},"body":{"classes/Shuttle.html":{}}}],["this.updatevariables(systemdict",{"_index":4144,"title":{},"body":{"classes/System.html":{}}}],["this.updateviewport(this.bounds",{"_index":1429,"title":{},"body":{"interfaces/DesignActions.html":{}}}],["this.updateviewport(value",{"_index":1338,"title":{},"body":{"interfaces/DesignActions.html":{}}}],["this.v_pedal_array",{"_index":3424,"title":{},"body":{"interfaces/Pedal.html":{},"classes/PedalStatus.html":{},"injectables/PedalsService.html":{}}}],["this.v_pedal_array.addnode(false",{"_index":3507,"title":{},"body":{"interfaces/Pedal.html":{},"classes/PedalStatus.html":{},"injectables/PedalsService.html":{}}}],["this.v_pedal_array.attach",{"_index":3504,"title":{},"body":{"interfaces/Pedal.html":{},"classes/PedalStatus.html":{},"injectables/PedalsService.html":{}}}],["this.v_pedal_array.detach",{"_index":3505,"title":{},"body":{"interfaces/Pedal.html":{},"classes/PedalStatus.html":{},"injectables/PedalsService.html":{}}}],["this.v_pedal_array.on('child",{"_index":3475,"title":{},"body":{"interfaces/Pedal.html":{},"classes/PedalStatus.html":{},"injectables/PedalsService.html":{}}}],["this.v_pedal_array.on('ready",{"_index":3473,"title":{},"body":{"interfaces/Pedal.html":{},"classes/PedalStatus.html":{},"injectables/PedalsService.html":{}}}],["this.v_pedal_array.ready",{"_index":3498,"title":{},"body":{"interfaces/Pedal.html":{},"classes/PedalStatus.html":{},"injectables/PedalsService.html":{}}}],["this.v_pedal_states",{"_index":3422,"title":{},"body":{"interfaces/Pedal.html":{},"classes/PedalStatus.html":{},"injectables/PedalsService.html":{}}}],["this.v_pedals.length",{"_index":3479,"title":{},"body":{"interfaces/Pedal.html":{},"classes/PedalStatus.html":{},"injectables/PedalsService.html":{}}}],["this.v_pedals.map((el",{"_index":3459,"title":{},"body":{"interfaces/Pedal.html":{},"classes/PedalStatus.html":{},"injectables/PedalsService.html":{}}}],["this.v_pedals.pop",{"_index":3480,"title":{},"body":{"interfaces/Pedal.html":{},"classes/PedalStatus.html":{},"injectables/PedalsService.html":{}}}],["this.v_pedals.push(v",{"_index":3478,"title":{},"body":{"interfaces/Pedal.html":{},"classes/PedalStatus.html":{},"injectables/PedalsService.html":{}}}],["this.v_pedals[e.id].state",{"_index":3481,"title":{},"body":{"interfaces/Pedal.html":{},"classes/PedalStatus.html":{},"injectables/PedalsService.html":{}}}],["this.vacuum_on.val",{"_index":3429,"title":{},"body":{"interfaces/Pedal.html":{},"classes/PedalStatus.html":{},"injectables/PedalsService.html":{}}}],["this.val",{"_index":1004,"title":{},"body":{"classes/DBListener.html":{},"classes/DBListenerArray.html":{},"classes/DBNode.html":{},"classes/DBNodeArray.html":{},"classes/DBTwoWay.html":{},"classes/DBTwoWayArray.html":{},"classes/DBWriteBuffer.html":{},"classes/DBWriter.html":{},"classes/DBWriterArray.html":{},"interfaces/NodeMethods.html":{},"interfaces/NodeParams.html":{},"classes/OnlineStatus.html":{}}}],["this.view_frames",{"_index":3811,"title":{},"body":{"classes/Render.html":{}}}],["this.view_front",{"_index":3813,"title":{},"body":{"classes/Render.html":{}}}],["this.viewonly",{"_index":2023,"title":{},"body":{"components/DraftdetailComponent.html":{}}}],["this.viewport.addobj(this.id",{"_index":1412,"title":{},"body":{"interfaces/DesignActions.html":{}}}],["this.viewport.getbounds",{"_index":2912,"title":{},"body":{"components/NoteComponent.html":{}}}],["this.viewport.gettopleft",{"_index":1403,"title":{},"body":{"interfaces/DesignActions.html":{}}}],["this.viewport.updatepoint(this.id",{"_index":1463,"title":{},"body":{"interfaces/DesignActions.html":{}}}],["this.virtualpedals(true",{"_index":3445,"title":{},"body":{"interfaces/Pedal.html":{},"classes/PedalStatus.html":{},"injectables/PedalsService.html":{}}}],["this.visible",{"_index":4082,"title":{},"body":{"classes/Shuttle.html":{},"classes/System.html":{}}}],["this.visiblerows",{"_index":3814,"title":{},"body":{"classes/Render.html":{}}}],["this.visiblerows.length",{"_index":3820,"title":{},"body":{"classes/Render.html":{}}}],["this.visiblerows[next",{"_index":3821,"title":{},"body":{"classes/Render.html":{}}}],["this.vp",{"_index":4229,"title":{},"body":{"injectables/ViewportService.html":{}}}],["this.vp.height",{"_index":4250,"title":{},"body":{"injectables/ViewportService.html":{}}}],["this.vp.height/2",{"_index":4255,"title":{},"body":{"injectables/ViewportService.html":{}}}],["this.vp.topleft",{"_index":4251,"title":{},"body":{"injectables/ViewportService.html":{}}}],["this.vp.topleft.x",{"_index":4245,"title":{},"body":{"injectables/ViewportService.html":{}}}],["this.vp.topleft.y",{"_index":4246,"title":{},"body":{"injectables/ViewportService.html":{}}}],["this.vp.width",{"_index":4249,"title":{},"body":{"injectables/ViewportService.html":{}}}],["this.vp.width/2",{"_index":4254,"title":{},"body":{"injectables/ViewportService.html":{}}}],["this.weaver.closeallmodals",{"_index":2058,"title":{},"body":{"components/DraftdetailComponent.html":{}}}],["this.weaver.materialchange",{"_index":2056,"title":{},"body":{"components/DraftdetailComponent.html":{}}}],["this.weaving_state.drawdraft",{"_index":3679,"title":{},"body":{"components/PlayerComponent.html":{}}}],["this.weavingwriters(state",{"_index":3454,"title":{},"body":{"interfaces/Pedal.html":{},"classes/PedalStatus.html":{},"injectables/PedalsService.html":{}}}],["this.width",{"_index":2779,"title":{},"body":{"components/MixerViewComponent.html":{},"classes/Selection.html":{},"classes/Shape.html":{}}}],["this.zndx",{"_index":1397,"title":{},"body":{"interfaces/DesignActions.html":{}}}],["this.zoom",{"_index":2775,"title":{},"body":{"components/MixerViewComponent.html":{},"classes/Render.html":{}}}],["this[id",{"_index":2598,"title":{},"body":{"injectables/MappingsService.html":{}}}],["this[id].name.startswith('ch",{"_index":2650,"title":{},"body":{"injectables/MappingsService.html":{}}}],["this[id].name.startswith('sequencer",{"_index":2651,"title":{},"body":{"injectables/MappingsService.html":{}}}],["this[l].attach",{"_index":3408,"title":{},"body":{"interfaces/Pedal.html":{},"classes/PedalStatus.html":{},"injectables/PedalsService.html":{}}}],["this[p",{"_index":2601,"title":{},"body":{"injectables/MappingsService.html":{}}}],["this[roul.p_select_a",{"_index":2628,"title":{},"body":{"injectables/MappingsService.html":{}}}],["this[roul.p_select_b",{"_index":2630,"title":{},"body":{"injectables/MappingsService.html":{}}}],["this[w].attach",{"_index":3414,"title":{},"body":{"interfaces/Pedal.html":{},"classes/PedalStatus.html":{},"injectables/PedalsService.html":{}}}],["this[w].setval(defaults[w",{"_index":3416,"title":{},"body":{"interfaces/Pedal.html":{},"classes/PedalStatus.html":{},"injectables/PedalsService.html":{}}}],["this_inlet.map((el",{"_index":2161,"title":{},"body":{"interfaces/DynamicOperation.html":{},"interfaces/OpInput.html":{},"interfaces/OperationClassification.html":{},"interfaces/TreeOperation.html":{}}}],["thisop",{"_index":1736,"title":{},"body":{"interfaces/DraftOperationClassification.html":{},"interfaces/LoomConfig.html":{},"injectables/MappingsService.html":{},"classes/PedalConfig.html":{},"injectables/PlayerService.html":{}}}],["thisop[o",{"_index":1740,"title":{},"body":{"interfaces/DraftOperationClassification.html":{},"interfaces/LoomConfig.html":{},"classes/PedalConfig.html":{},"injectables/PlayerService.html":{}}}],["those",{"_index":1587,"title":{},"body":{"interfaces/DraftMap.html":{},"interfaces/Interlacement.html":{},"interfaces/InterlacementVal.html":{}}}],["threading",{"_index":361,"title":{},"body":{"interfaces/Bounds.html":{},"interfaces/Point.html":{},"index.html":{},"miscellaneous/typealiases.html":{}}}],["threadling",{"_index":4572,"title":{},"body":{"index.html":{}}}],["three",{"_index":4451,"title":{},"body":{"index.html":{}}}],["threshold",{"_index":1375,"title":{},"body":{"interfaces/DesignActions.html":{}}}],["through",{"_index":526,"title":{},"body":{"interfaces/ChainOp.html":{},"interfaces/DraftOperationClassification.html":{},"interfaces/LoomConfig.html":{},"interfaces/PairedOp.html":{},"classes/PedalConfig.html":{},"interfaces/PedalEvent.html":{},"interfaces/PlayerOp.html":{},"injectables/PlayerService.html":{},"miscellaneous/typealiases.html":{}}}],["tieup",{"_index":363,"title":{},"body":{"interfaces/Bounds.html":{},"interfaces/Point.html":{},"index.html":{},"miscellaneous/typealiases.html":{}}}],["tile",{"_index":1842,"title":{},"body":{"interfaces/DraftOperationClassification.html":{},"interfaces/LoomConfig.html":{},"classes/PedalConfig.html":{},"injectables/PlayerService.html":{}}}],["tiling",{"_index":4325,"title":{},"body":{"components/WeavingStateComponent.html":{}}}],["time",{"_index":540,"title":{},"body":{"interfaces/ChainOp.html":{},"interfaces/PairedOp.html":{},"interfaces/PedalEvent.html":{},"interfaces/PlayerOp.html":{}}}],["times",{"_index":2326,"title":{},"body":{"interfaces/Ink.html":{},"injectables/InkService.html":{}}}],["tips",{"_index":4598,"title":{},"body":{"index.html":{}}}],["title",{"_index":2117,"title":{},"body":{"components/DraftdetailComponent.html":{},"components/OpSequencerComponent.html":{},"components/PlayerComponent.html":{},"components/WeavingStateComponent.html":{}}}],["titledata",{"_index":2109,"title":{},"body":{"components/DraftdetailComponent.html":{}}}],["tl",{"_index":1402,"title":{},"body":{"interfaces/DesignActions.html":{}}}],["tl.x",{"_index":1405,"title":{},"body":{"interfaces/DesignActions.html":{}}}],["tl.y",{"_index":1407,"title":{},"body":{"interfaces/DesignActions.html":{}}}],["tl_offset",{"_index":1404,"title":{},"body":{"interfaces/DesignActions.html":{}}}],["tn",{"_index":2262,"title":{},"body":{"interfaces/IOTuple.html":{},"interfaces/TreeNode.html":{}}}],["tns",{"_index":3143,"title":{},"body":{"components/OpSequencerComponent.html":{}}}],["to.bounds.topleft.x",{"_index":751,"title":{},"body":{"components/ConnectionComponent.html":{}}}],["to.bounds.topleft.y",{"_index":755,"title":{},"body":{"components/ConnectionComponent.html":{}}}],["to.id",{"_index":750,"title":{},"body":{"components/ConnectionComponent.html":{}}}],["to_comp",{"_index":735,"title":{},"body":{"components/ConnectionComponent.html":{}}}],["to_comp.bounds.topleft.x",{"_index":739,"title":{},"body":{"components/ConnectionComponent.html":{}}}],["to_comp.bounds.topleft.y",{"_index":741,"title":{},"body":{"components/ConnectionComponent.html":{}}}],["to_io",{"_index":723,"title":{},"body":{"components/ConnectionComponent.html":{}}}],["to_io.tn.node.id",{"_index":728,"title":{},"body":{"components/ConnectionComponent.html":{}}}],["to_ndx",{"_index":646,"title":{},"body":{"components/ConnectionComponent.html":{}}}],["todo",{"_index":220,"title":{},"body":{"classes/AbstractOpFactory.html":{},"classes/BaseOp.html":{},"classes/Branch.html":{},"classes/Bus.html":{},"interfaces/ChainOp.html":{},"interfaces/DraftOperationClassification.html":{},"interfaces/DynamicOperation.html":{},"interfaces/LoomConfig.html":{},"injectables/MappingsService.html":{},"classes/Merge.html":{},"interfaces/OpClassifier.html":{},"interfaces/OpInput.html":{},"interfaces/OperationClassification.html":{},"interfaces/OperationProperties.html":{},"interfaces/PairedOp.html":{},"interfaces/Pedal.html":{},"classes/PedalConfig.html":{},"interfaces/PedalEvent.html":{},"classes/PedalStatus.html":{},"injectables/PedalsService.html":{},"classes/Pipe.html":{},"interfaces/PlayerOp.html":{},"injectables/PlayerService.html":{},"classes/Seed.html":{},"interfaces/TopologyDef.html":{},"interfaces/TreeOperation.html":{}}}],["toggle",{"_index":2106,"title":{},"body":{"components/DraftdetailComponent.html":{},"components/MixerViewComponent.html":{},"components/ParameterComponent.html":{}}}],["toggledrafttiling",{"_index":3702,"title":{},"body":{"injectables/PlayerService.html":{}}}],["toggledrafttiling(e",{"_index":3712,"title":{},"body":{"injectables/PlayerService.html":{}}}],["toggleheddle",{"_index":378,"title":{},"body":{"classes/Cell.html":{}}}],["togglepedal",{"_index":3551,"title":{},"body":{"injectables/PedalsService.html":{}}}],["togglepedal(p",{"_index":3569,"title":{},"body":{"injectables/PedalsService.html":{}}}],["togglepedalbyid",{"_index":3552,"title":{},"body":{"injectables/PedalsService.html":{}}}],["togglepedalbyid(id",{"_index":3508,"title":{},"body":{"interfaces/Pedal.html":{},"classes/PedalStatus.html":{},"injectables/PedalsService.html":{}}}],["toggleweaving",{"_index":3553,"title":{},"body":{"injectables/PedalsService.html":{},"injectables/PlayerService.html":{}}}],["toname",{"_index":3259,"title":{},"body":{"components/OpsComponent.html":{}}}],["tool",{"_index":4436,"title":{},"body":{"index.html":{}}}],["toolbars",{"_index":2097,"title":{},"body":{"components/DraftdetailComponent.html":{}}}],["tools",{"_index":4426,"title":{},"body":{"index.html":{}}}],["top",{"_index":818,"title":{},"body":{"components/ConnectionComponent.html":{},"interfaces/Crossing.html":{},"interfaces/DesignActions.html":{},"interfaces/DraftMap.html":{},"interfaces/Interlacement.html":{},"interfaces/InterlacementVal.html":{},"components/MixerViewComponent.html":{},"components/NoteComponent.html":{},"components/OpSequencerComponent.html":{},"components/ParameterComponent.html":{},"components/PlayerComponent.html":{},"interfaces/Vertex.html":{},"components/WeavingStateComponent.html":{},"interfaces/YarnPath.html":{},"index.html":{}}}],["top:0",{"_index":823,"title":{},"body":{"components/ConnectionComponent.html":{}}}],["top:1em",{"_index":3008,"title":{},"body":{"components/OpHelpModal.html":{}}}],["top_offset",{"_index":772,"title":{},"body":{"components/ConnectionComponent.html":{}}}],["top_offset+30)*this.scale/this.default_cell_size",{"_index":779,"title":{},"body":{"components/ConnectionComponent.html":{}}}],["topbar\").getboundingclientrect().height",{"_index":3673,"title":{},"body":{"components/PlayerComponent.html":{}}}],["topleft",{"_index":343,"title":{},"body":{"interfaces/Bounds.html":{},"components/ConnectionComponent.html":{},"interfaces/DesignActions.html":{},"directives/MarqueeComponent.html":{},"components/MixerViewComponent.html":{},"components/NoteComponent.html":{},"interfaces/Point.html":{},"directives/SelectionComponent.html":{},"injectables/ViewportService.html":{}}}],["topleft:{x",{"_index":2777,"title":{},"body":{"components/MixerViewComponent.html":{}}}],["topo",{"_index":175,"title":{},"body":{"classes/AbstractOpFactory.html":{},"classes/BaseOp.html":{},"classes/Branch.html":{},"classes/Bus.html":{},"classes/Merge.html":{},"interfaces/OpClassifier.html":{},"interfaces/OperationProperties.html":{},"classes/Pipe.html":{},"classes/Seed.html":{},"interfaces/TopologyDef.html":{},"miscellaneous/functions.html":{}}}],["topo[\"input",{"_index":170,"title":{},"body":{"classes/AbstractOpFactory.html":{},"classes/BaseOp.html":{},"classes/Branch.html":{},"classes/Bus.html":{},"classes/Merge.html":{},"interfaces/OpClassifier.html":{},"interfaces/OperationProperties.html":{},"classes/Pipe.html":{},"classes/Seed.html":{},"interfaces/TopologyDef.html":{}}}],["topo[\"output",{"_index":168,"title":{},"body":{"classes/AbstractOpFactory.html":{},"classes/BaseOp.html":{},"classes/Branch.html":{},"classes/Bus.html":{},"classes/Merge.html":{},"interfaces/OpClassifier.html":{},"interfaces/OperationProperties.html":{},"classes/Pipe.html":{},"classes/Seed.html":{},"interfaces/TopologyDef.html":{}}}],["topo[\"type",{"_index":180,"title":{},"body":{"classes/AbstractOpFactory.html":{},"classes/BaseOp.html":{},"classes/Branch.html":{},"classes/Bus.html":{},"classes/Merge.html":{},"interfaces/OpClassifier.html":{},"interfaces/OperationProperties.html":{},"classes/Pipe.html":{},"classes/Seed.html":{},"interfaces/TopologyDef.html":{}}}],["topo_op",{"_index":2234,"title":{},"body":{"interfaces/DynamicOperation.html":{},"interfaces/OpInput.html":{},"interfaces/OperationClassification.html":{},"interfaces/TreeOperation.html":{}}}],["topologically",{"_index":2186,"title":{},"body":{"interfaces/DynamicOperation.html":{},"interfaces/OpInput.html":{},"interfaces/OperationClassification.html":{},"interfaces/TreeOperation.html":{}}}],["topology",{"_index":90,"title":{},"body":{"classes/AbstractOpFactory.html":{},"classes/BaseOp.html":{},"classes/Branch.html":{},"classes/Bus.html":{},"classes/Merge.html":{},"interfaces/OpClassifier.html":{},"interfaces/OperationProperties.html":{},"classes/Pipe.html":{},"classes/Seed.html":{},"interfaces/TopologyDef.html":{}}}],["topologydef",{"_index":107,"title":{"interfaces/TopologyDef.html":{}},"body":{"classes/AbstractOpFactory.html":{},"classes/BaseOp.html":{},"classes/Branch.html":{},"classes/Bus.html":{},"classes/Merge.html":{},"interfaces/OpClassifier.html":{},"interfaces/OperationProperties.html":{},"classes/Pipe.html":{},"classes/Seed.html":{},"interfaces/TopologyDef.html":{}}}],["topologyfactory",{"_index":296,"title":{},"body":{"classes/AbstractOpFactory.html":{},"classes/BaseOp.html":{},"classes/Branch.html":{},"classes/Bus.html":{},"classes/Merge.html":{},"interfaces/OpClassifier.html":{},"interfaces/OperationProperties.html":{},"classes/Pipe.html":{},"classes/Seed.html":{},"interfaces/TopologyDef.html":{}}}],["topologyindex",{"_index":124,"title":{},"body":{"classes/AbstractOpFactory.html":{},"classes/BaseOp.html":{},"classes/Branch.html":{},"classes/Bus.html":{},"classes/Merge.html":{},"interfaces/OpClassifier.html":{},"interfaces/OperationProperties.html":{},"classes/Pipe.html":{},"classes/Seed.html":{},"interfaces/TopologyDef.html":{},"miscellaneous/typealiases.html":{}}}],["topologyindex[topologyname",{"_index":126,"title":{},"body":{"classes/AbstractOpFactory.html":{},"classes/BaseOp.html":{},"classes/Branch.html":{},"classes/Bus.html":{},"classes/Merge.html":{},"interfaces/OpClassifier.html":{},"interfaces/OperationProperties.html":{},"classes/Pipe.html":{},"classes/Seed.html":{},"interfaces/TopologyDef.html":{}}}],["topologyname",{"_index":98,"title":{},"body":{"classes/AbstractOpFactory.html":{},"classes/BaseOp.html":{},"classes/Branch.html":{},"classes/Bus.html":{},"classes/Merge.html":{},"interfaces/OpClassifier.html":{},"interfaces/OperationProperties.html":{},"classes/Pipe.html":{},"classes/Seed.html":{},"interfaces/TopologyDef.html":{},"miscellaneous/functions.html":{},"miscellaneous/typealiases.html":{}}}],["topologyopindex",{"_index":314,"title":{},"body":{"classes/AbstractOpFactory.html":{},"classes/BaseOp.html":{},"classes/Branch.html":{},"classes/Bus.html":{},"classes/Merge.html":{},"interfaces/OpClassifier.html":{},"interfaces/OperationProperties.html":{},"classes/Pipe.html":{},"classes/Seed.html":{},"interfaces/TopologyDef.html":{},"miscellaneous/typealiases.html":{}}}],["topologyopindex[topologyname][constraintname",{"_index":316,"title":{},"body":{"classes/AbstractOpFactory.html":{},"classes/BaseOp.html":{},"classes/Branch.html":{},"classes/Bus.html":{},"classes/Merge.html":{},"interfaces/OpClassifier.html":{},"interfaces/OperationProperties.html":{},"classes/Pipe.html":{},"classes/Seed.html":{},"interfaces/TopologyDef.html":{}}}],["toprow",{"_index":2110,"title":{},"body":{"components/DraftdetailComponent.html":{},"components/MixerViewComponent.html":{},"components/OpsComponent.html":{}}}],["tostring",{"_index":1113,"title":{},"body":{"classes/DBListener.html":{},"classes/DBListenerArray.html":{},"classes/DBNode.html":{},"classes/DBNodeArray.html":{},"classes/DBTwoWay.html":{},"classes/DBTwoWayArray.html":{},"classes/DBWriteBuffer.html":{},"classes/DBWriter.html":{},"classes/DBWriterArray.html":{},"interfaces/NodeMethods.html":{},"interfaces/NodeParams.html":{},"classes/OnlineStatus.html":{},"interfaces/Pedal.html":{},"classes/PedalStatus.html":{},"injectables/PedalsService.html":{}}}],["total",{"_index":2782,"title":{},"body":{"components/MixerViewComponent.html":{},"injectables/ViewportService.html":{}}}],["touch",{"_index":4542,"title":{},"body":{"index.html":{}}}],["towards",{"_index":2285,"title":{},"body":{"interfaces/IOTuple.html":{},"interfaces/TreeNode.html":{}}}],["track",{"_index":1371,"title":{},"body":{"interfaces/DesignActions.html":{},"injectables/LayersService.html":{},"classes/Shape.html":{}}}],["tracking",{"_index":1783,"title":{},"body":{"interfaces/DraftOperationClassification.html":{},"interfaces/LoomConfig.html":{},"classes/PedalConfig.html":{},"injectables/PlayerService.html":{}}}],["transfer",{"_index":4420,"title":{},"body":{"miscellaneous/functions.html":{}}}],["transfers",{"_index":4418,"title":{},"body":{"miscellaneous/functions.html":{}}}],["transfersystemsandshuttles",{"_index":4413,"title":{},"body":{"miscellaneous/functions.html":{}}}],["transfersystemsandshuttles(d",{"_index":4417,"title":{},"body":{"miscellaneous/functions.html":{}}}],["transform",{"_index":2823,"title":{},"body":{"components/MixerViewComponent.html":{}}}],["transform[0",{"_index":2831,"title":{},"body":{"components/MixerViewComponent.html":{}}}],["transform[1",{"_index":2835,"title":{},"body":{"components/MixerViewComponent.html":{}}}],["transformation",{"_index":1853,"title":{},"body":{"interfaces/DraftOperationClassification.html":{},"interfaces/LoomConfig.html":{},"classes/PedalConfig.html":{},"injectables/PlayerService.html":{}}}],["transforms",{"_index":1855,"title":{},"body":{"interfaces/DraftOperationClassification.html":{},"interfaces/LoomConfig.html":{},"classes/PedalConfig.html":{},"injectables/PlayerService.html":{}}}],["translate",{"_index":3994,"title":{},"body":{"classes/Shape-1.html":{}}}],["translates",{"_index":1488,"title":{},"body":{"interfaces/DesignActions.html":{}}}],["travels",{"_index":4557,"title":{},"body":{"index.html":{},"miscellaneous/typealiases.html":{}}}],["treadles",{"_index":2086,"title":{},"body":{"components/DraftdetailComponent.html":{}}}],["treadling",{"_index":362,"title":{},"body":{"interfaces/Bounds.html":{},"interfaces/Point.html":{},"index.html":{},"miscellaneous/typealiases.html":{}}}],["tree",{"_index":629,"title":{},"body":{"components/ConnectionComponent.html":{},"interfaces/DesignActions.html":{},"interfaces/DraftNodeProxy.html":{},"components/DraftdetailComponent.html":{},"interfaces/DynamicOperation.html":{},"interfaces/FileObj.html":{},"interfaces/FileSaver.html":{},"interfaces/Fileloader.html":{},"interfaces/IOTuple.html":{},"components/ImageComponent.html":{},"components/InletComponent.html":{},"interfaces/LoadResponse.html":{},"components/MixerViewComponent.html":{},"interfaces/NodeComponentProxy.html":{},"components/NoteComponent.html":{},"interfaces/OpComponentProxy.html":{},"components/OpHelpModal.html":{},"interfaces/OpInput.html":{},"components/OpSequencerComponent.html":{},"interfaces/OperationClassification.html":{},"components/OpsComponent.html":{},"components/ParameterComponent.html":{},"components/PlayerComponent.html":{},"interfaces/SaveObj.html":{},"components/SnackbarComponent.html":{},"interfaces/StatusMessage.html":{},"interfaces/TreeNode.html":{},"interfaces/TreeNodeProxy.html":{},"interfaces/TreeOperation.html":{},"components/VirtualPedalsComponent.html":{},"components/WeavingStateComponent.html":{},"index.html":{},"miscellaneous/typealiases.html":{}}}],["tree_op_perform",{"_index":2184,"title":{},"body":{"interfaces/DynamicOperation.html":{},"interfaces/OpInput.html":{},"interfaces/OperationClassification.html":{},"interfaces/TreeOperation.html":{}}}],["treenode",{"_index":719,"title":{"interfaces/TreeNode.html":{}},"body":{"components/ConnectionComponent.html":{},"interfaces/DraftNodeProxy.html":{},"interfaces/FileObj.html":{},"interfaces/FileSaver.html":{},"interfaces/Fileloader.html":{},"interfaces/IOTuple.html":{},"interfaces/LoadResponse.html":{},"interfaces/NodeComponentProxy.html":{},"interfaces/OpComponentProxy.html":{},"interfaces/SaveObj.html":{},"interfaces/StatusMessage.html":{},"interfaces/TreeNode.html":{},"interfaces/TreeNodeProxy.html":{}}}],["treenode.inputs[0",{"_index":722,"title":{},"body":{"components/ConnectionComponent.html":{}}}],["treenode.outputs[0",{"_index":724,"title":{},"body":{"components/ConnectionComponent.html":{}}}],["treenodeproxy",{"_index":1654,"title":{"interfaces/TreeNodeProxy.html":{}},"body":{"interfaces/DraftNodeProxy.html":{},"interfaces/FileObj.html":{},"interfaces/FileSaver.html":{},"interfaces/Fileloader.html":{},"interfaces/LoadResponse.html":{},"interfaces/NodeComponentProxy.html":{},"interfaces/OpComponentProxy.html":{},"interfaces/SaveObj.html":{},"interfaces/StatusMessage.html":{},"interfaces/TreeNodeProxy.html":{}}}],["treenodes",{"_index":1667,"title":{},"body":{"interfaces/DraftNodeProxy.html":{},"interfaces/FileObj.html":{},"interfaces/FileSaver.html":{},"interfaces/Fileloader.html":{},"interfaces/IOTuple.html":{},"interfaces/LoadResponse.html":{},"interfaces/NodeComponentProxy.html":{},"interfaces/OpComponentProxy.html":{},"interfaces/SaveObj.html":{},"interfaces/StatusMessage.html":{},"interfaces/TreeNode.html":{},"interfaces/TreeNodeProxy.html":{}}}],["treeop",{"_index":508,"title":{},"body":{"interfaces/ChainOp.html":{},"interfaces/DraftOperationClassification.html":{},"interfaces/LoomConfig.html":{},"interfaces/PairedOp.html":{},"classes/PedalConfig.html":{},"interfaces/PedalEvent.html":{},"interfaces/PlayerOp.html":{},"injectables/PlayerService.html":{}}}],["treeoperation",{"_index":507,"title":{"interfaces/TreeOperation.html":{}},"body":{"interfaces/ChainOp.html":{},"interfaces/DraftOperationClassification.html":{},"interfaces/DynamicOperation.html":{},"interfaces/LoomConfig.html":{},"interfaces/OpInput.html":{},"interfaces/OperationClassification.html":{},"interfaces/PairedOp.html":{},"classes/PedalConfig.html":{},"interfaces/PedalEvent.html":{},"interfaces/PlayerOp.html":{},"injectables/PlayerService.html":{},"interfaces/TreeOperation.html":{},"miscellaneous/functions.html":{},"miscellaneous/typealiases.html":{}}}],["treeoperation[\"perform",{"_index":2185,"title":{},"body":{"interfaces/DynamicOperation.html":{},"interfaces/OpInput.html":{},"interfaces/OperationClassification.html":{},"interfaces/TreeOperation.html":{}}}],["treeservice",{"_index":661,"title":{},"body":{"components/ConnectionComponent.html":{},"interfaces/DesignActions.html":{},"components/DraftdetailComponent.html":{},"components/InletComponent.html":{},"components/ParameterComponent.html":{}}}],["trigger",{"_index":3147,"title":{},"body":{"components/OpSequencerComponent.html":{}}}],["trigger.ng",{"_index":3146,"title":{},"body":{"components/OpSequencerComponent.html":{}}}],["triggered",{"_index":3734,"title":{},"body":{"interfaces/PlayerState.html":{},"interfaces/PlayerState-1.html":{},"interfaces/WeavingLog.html":{},"interfaces/WeavingPick.html":{},"interfaces/WeavingPick-1.html":{}}}],["triggers",{"_index":1437,"title":{},"body":{"interfaces/DesignActions.html":{},"components/NoteComponent.html":{}}}],["true",{"_index":392,"title":{},"body":{"classes/Cell.html":{},"interfaces/ChainIndex.html":{},"components/ConnectionComponent.html":{},"classes/DBListener.html":{},"classes/DBListenerArray.html":{},"classes/DBNode.html":{},"classes/DBNodeArray.html":{},"classes/DBTwoWay.html":{},"classes/DBTwoWayArray.html":{},"classes/DBWriteBuffer.html":{},"classes/DBWriter.html":{},"classes/DBWriterArray.html":{},"interfaces/DesignActions.html":{},"interfaces/DraftOperationClassification.html":{},"components/DraftdetailComponent.html":{},"interfaces/Ink.html":{},"injectables/InkService.html":{},"interfaces/LoomConfig.html":{},"injectables/MappingsService.html":{},"interfaces/NodeMethods.html":{},"interfaces/NodeParams.html":{},"classes/OnlineStatus.html":{},"classes/OpSequencer.html":{},"interfaces/Pedal.html":{},"classes/PedalConfig.html":{},"classes/PedalStatus.html":{},"injectables/PedalsService.html":{},"components/PlayerComponent.html":{},"injectables/PlayerService.html":{},"classes/Render.html":{},"injectables/SequencerService.html":{},"classes/Shuttle.html":{},"classes/System.html":{},"components/WeavingStateComponent.html":{}}}],["true/false/or",{"_index":1506,"title":{},"body":{"interfaces/DesignActions.html":{}}}],["truestate",{"_index":3169,"title":{},"body":{"interfaces/OperationParam.html":{},"classes/Params.html":{}}}],["trust",{"_index":2595,"title":{},"body":{"injectables/MappingsService.html":{}}}],["tslib",{"_index":4387,"title":{},"body":{"dependencies.html":{}}}],["tune",{"_index":2071,"title":{},"body":{"components/DraftdetailComponent.html":{},"index.html":{}}}],["turn",{"_index":1757,"title":{},"body":{"interfaces/DraftOperationClassification.html":{},"interfaces/LoomConfig.html":{},"injectables/MappingsService.html":{},"classes/PedalConfig.html":{},"injectables/PlayerService.html":{}}}],["twill",{"_index":1809,"title":{},"body":{"interfaces/DraftOperationClassification.html":{},"interfaces/LoomConfig.html":{},"classes/PedalConfig.html":{},"injectables/PlayerService.html":{}}}],["two",{"_index":213,"title":{},"body":{"classes/AbstractOpFactory.html":{},"classes/BaseOp.html":{},"classes/Branch.html":{},"classes/Bus.html":{},"interfaces/Crossing.html":{},"classes/DBListener.html":{},"classes/DBListenerArray.html":{},"classes/DBNode.html":{},"classes/DBNodeArray.html":{},"classes/DBTwoWay.html":{},"classes/DBTwoWayArray.html":{},"classes/DBWriteBuffer.html":{},"classes/DBWriter.html":{},"classes/DBWriterArray.html":{},"interfaces/DraftOperationClassification.html":{},"interfaces/LoomConfig.html":{},"classes/Merge.html":{},"interfaces/NodeMethods.html":{},"interfaces/NodeParams.html":{},"classes/OnlineStatus.html":{},"interfaces/OpClassifier.html":{},"interfaces/OperationProperties.html":{},"classes/PedalConfig.html":{},"classes/Pipe.html":{},"injectables/PlayerService.html":{},"classes/Seed.html":{},"interfaces/TopologyDef.html":{},"interfaces/Vertex.html":{},"interfaces/YarnPath.html":{},"index.html":{}}}],["type",{"_index":21,"title":{},"body":{"classes/AbstractOpFactory.html":{},"classes/BaseOp.html":{},"interfaces/Bounds.html":{},"classes/Branch.html":{},"classes/Bus.html":{},"classes/Cell.html":{},"interfaces/ChainIndex.html":{},"interfaces/ChainOp.html":{},"components/ConnectionComponent.html":{},"interfaces/Crossing.html":{},"classes/DBListener.html":{},"classes/DBListenerArray.html":{},"classes/DBNode.html":{},"classes/DBNodeArray.html":{},"classes/DBTwoWay.html":{},"classes/DBTwoWayArray.html":{},"classes/DBWriteBuffer.html":{},"classes/DBWriter.html":{},"classes/DBWriterArray.html":{},"interfaces/DensityUnits.html":{},"interfaces/DesignActions.html":{},"interfaces/DesignMode.html":{},"interfaces/DraftMap.html":{},"interfaces/DraftNodeProxy.html":{},"interfaces/DraftOperationClassification.html":{},"components/DraftdetailComponent.html":{},"interfaces/DynamicOperation.html":{},"interfaces/FileObj.html":{},"interfaces/FileSaver.html":{},"interfaces/Fileloader.html":{},"interfaces/IOTuple.html":{},"interfaces/Ink.html":{},"injectables/InkService.html":{},"components/InletComponent.html":{},"interfaces/Interlacement.html":{},"interfaces/InterlacementVal.html":{},"injectables/LayersService.html":{},"interfaces/LoadResponse.html":{},"interfaces/LoomConfig.html":{},"interfaces/LoomTypes.html":{},"injectables/MappingsService.html":{},"directives/MarqueeComponent.html":{},"interfaces/MaterialTypes.html":{},"classes/Merge.html":{},"components/MixerViewComponent.html":{},"interfaces/NodeComponentProxy.html":{},"interfaces/NodeMethods.html":{},"interfaces/NodeParams.html":{},"components/NoteComponent.html":{},"classes/OnlineStatus.html":{},"interfaces/OpClassifier.html":{},"interfaces/OpComponentProxy.html":{},"components/OpHelpModal.html":{},"interfaces/OpInput.html":{},"classes/OpSequencer.html":{},"components/OpSequencerComponent.html":{},"interfaces/OperationClassification.html":{},"interfaces/OperationParam.html":{},"interfaces/OperationProperties.html":{},"components/OpsComponent.html":{},"interfaces/PairedOp.html":{},"components/ParameterComponent.html":{},"classes/Params.html":{},"interfaces/Pedal.html":{},"classes/PedalConfig.html":{},"interfaces/PedalEvent.html":{},"classes/PedalStatus.html":{},"injectables/PedalsService.html":{},"classes/Pipe.html":{},"components/PlayerComponent.html":{},"interfaces/PlayerOp.html":{},"injectables/PlayerService.html":{},"interfaces/PlayerState.html":{},"interfaces/PlayerState-1.html":{},"interfaces/Point.html":{},"classes/Render.html":{},"interfaces/SaveObj.html":{},"classes/Seed.html":{},"classes/Selection.html":{},"directives/SelectionComponent.html":{},"injectables/SequencerService.html":{},"classes/Shape.html":{},"classes/Shape-1.html":{},"classes/Shuttle.html":{},"components/SnackbarComponent.html":{},"interfaces/StatusMessage.html":{},"classes/System.html":{},"interfaces/TopologyDef.html":{},"interfaces/TreeNode.html":{},"interfaces/TreeNodeProxy.html":{},"interfaces/TreeOperation.html":{},"interfaces/Vertex.html":{},"interfaces/ViewModes.html":{},"injectables/ViewportService.html":{},"components/VirtualPedalsComponent.html":{},"interfaces/WeavingLog.html":{},"interfaces/WeavingPick.html":{},"interfaces/WeavingPick-1.html":{},"components/WeavingStateComponent.html":{},"interfaces/YarnPath.html":{},"miscellaneous/functions.html":{},"index.html":{},"miscellaneous/typealiases.html":{}}}],["type(t",{"_index":262,"title":{},"body":{"classes/AbstractOpFactory.html":{},"classes/BaseOp.html":{},"classes/Branch.html":{},"classes/Bus.html":{},"classes/Merge.html":{},"interfaces/OpClassifier.html":{},"interfaces/OperationProperties.html":{},"classes/Pipe.html":{},"classes/Seed.html":{},"interfaces/TopologyDef.html":{}}}],["typealiases",{"_index":4623,"title":{"miscellaneous/typealiases.html":{}},"body":{}}],["typeof",{"_index":105,"title":{},"body":{"classes/AbstractOpFactory.html":{},"classes/BaseOp.html":{},"classes/Branch.html":{},"classes/Bus.html":{},"classes/Merge.html":{},"interfaces/OpClassifier.html":{},"interfaces/OperationProperties.html":{},"classes/Pipe.html":{},"classes/Seed.html":{},"interfaces/TopologyDef.html":{}}}],["typeof(this._val",{"_index":989,"title":{},"body":{"classes/DBListener.html":{},"classes/DBListenerArray.html":{},"classes/DBNode.html":{},"classes/DBNodeArray.html":{},"classes/DBTwoWay.html":{},"classes/DBTwoWayArray.html":{},"classes/DBWriteBuffer.html":{},"classes/DBWriter.html":{},"classes/DBWriterArray.html":{},"interfaces/NodeMethods.html":{},"interfaces/NodeParams.html":{},"classes/OnlineStatus.html":{}}}],["types",{"_index":75,"title":{},"body":{"classes/AbstractOpFactory.html":{},"classes/BaseOp.html":{},"classes/Branch.html":{},"classes/Bus.html":{},"classes/DBListener.html":{},"classes/DBListenerArray.html":{},"classes/DBNode.html":{},"classes/DBNodeArray.html":{},"classes/DBTwoWay.html":{},"classes/DBTwoWayArray.html":{},"classes/DBWriteBuffer.html":{},"classes/DBWriter.html":{},"classes/DBWriterArray.html":{},"interfaces/IOTuple.html":{},"classes/Merge.html":{},"interfaces/NodeMethods.html":{},"interfaces/NodeParams.html":{},"classes/OnlineStatus.html":{},"interfaces/OpClassifier.html":{},"interfaces/OperationProperties.html":{},"classes/Pipe.html":{},"classes/Seed.html":{},"interfaces/TopologyDef.html":{},"interfaces/TreeNode.html":{},"index.html":{},"miscellaneous/typealiases.html":{}}}],["types/lodash",{"_index":4364,"title":{},"body":{"dependencies.html":{}}}],["types/webgl2",{"_index":4366,"title":{},"body":{"dependencies.html":{}}}],["typescript",{"_index":292,"title":{},"body":{"classes/AbstractOpFactory.html":{},"classes/BaseOp.html":{},"classes/Branch.html":{},"classes/Bus.html":{},"classes/Merge.html":{},"interfaces/OpClassifier.html":{},"interfaces/OperationProperties.html":{},"classes/Pipe.html":{},"classes/Seed.html":{},"interfaces/TopologyDef.html":{},"index.html":{}}}],["typescript/javascript",{"_index":2596,"title":{},"body":{"injectables/MappingsService.html":{}}}],["u",{"_index":2623,"title":{},"body":{"injectables/MappingsService.html":{}}}],["u[0",{"_index":2627,"title":{},"body":{"injectables/MappingsService.html":{}}}],["u_name",{"_index":3369,"title":{},"body":{"interfaces/Pedal.html":{},"classes/PedalStatus.html":{},"injectables/PedalsService.html":{}}}],["ud_name",{"_index":1571,"title":{},"body":{"interfaces/DesignActions.html":{},"interfaces/DraftMap.html":{},"interfaces/Interlacement.html":{},"interfaces/InterlacementVal.html":{}}}],["ui",{"_index":4587,"title":{},"body":{"index.html":{}}}],["undefined",{"_index":240,"title":{},"body":{"classes/AbstractOpFactory.html":{},"classes/BaseOp.html":{},"classes/Branch.html":{},"classes/Bus.html":{},"classes/Cell.html":{},"components/ConnectionComponent.html":{},"classes/DBListener.html":{},"classes/DBListenerArray.html":{},"classes/DBNode.html":{},"classes/DBNodeArray.html":{},"classes/DBTwoWay.html":{},"classes/DBTwoWayArray.html":{},"classes/DBWriteBuffer.html":{},"classes/DBWriter.html":{},"classes/DBWriterArray.html":{},"interfaces/DesignActions.html":{},"components/InletComponent.html":{},"injectables/MappingsService.html":{},"classes/Merge.html":{},"interfaces/NodeMethods.html":{},"interfaces/NodeParams.html":{},"components/NoteComponent.html":{},"classes/OnlineStatus.html":{},"interfaces/OpClassifier.html":{},"interfaces/OperationProperties.html":{},"classes/Pipe.html":{},"classes/Seed.html":{},"classes/Selection.html":{},"classes/Shuttle.html":{},"interfaces/TopologyDef.html":{},"injectables/ViewportService.html":{},"components/WeavingStateComponent.html":{}}}],["under",{"_index":2143,"title":{},"body":{"interfaces/DynamicOperation.html":{},"interfaces/Ink.html":{},"injectables/InkService.html":{},"interfaces/OpInput.html":{},"interfaces/OperationClassification.html":{},"interfaces/TreeOperation.html":{}}}],["under_over",{"_index":919,"title":{},"body":{"interfaces/Crossing.html":{},"interfaces/Vertex.html":{},"interfaces/YarnPath.html":{}}}],["under_unset",{"_index":915,"title":{},"body":{"interfaces/Crossing.html":{},"interfaces/Vertex.html":{},"interfaces/YarnPath.html":{}}}],["underneight",{"_index":2308,"title":{},"body":{"interfaces/Ink.html":{},"injectables/InkService.html":{}}}],["underneith",{"_index":2322,"title":{},"body":{"interfaces/Ink.html":{},"injectables/InkService.html":{}}}],["understand",{"_index":4488,"title":{},"body":{"index.html":{}}}],["union",{"_index":79,"title":{},"body":{"classes/AbstractOpFactory.html":{},"classes/BaseOp.html":{},"classes/Branch.html":{},"classes/Bus.html":{},"classes/Merge.html":{},"interfaces/OpClassifier.html":{},"interfaces/OperationProperties.html":{},"classes/Pipe.html":{},"classes/Seed.html":{},"interfaces/TopologyDef.html":{}}}],["unique",{"_index":1596,"title":{},"body":{"interfaces/DraftMap.html":{},"interfaces/IOTuple.html":{},"interfaces/Interlacement.html":{},"interfaces/InterlacementVal.html":{},"components/ParameterComponent.html":{},"classes/System.html":{},"interfaces/TreeNode.html":{},"injectables/ViewportService.html":{},"miscellaneous/functions.html":{},"index.html":{}}}],["unique_systems",{"_index":4159,"title":{},"body":{"classes/System.html":{}}}],["unique_systems.foreach((sys",{"_index":4174,"title":{},"body":{"classes/System.html":{}}}],["unique_systems.reduce((acc",{"_index":4169,"title":{},"body":{"classes/System.html":{}}}],["unit",{"_index":4641,"title":{},"body":{"miscellaneous/typealiases.html":{}}}],["units",{"_index":1609,"title":{},"body":{"interfaces/DraftMap.html":{},"interfaces/Interlacement.html":{},"interfaces/InterlacementVal.html":{}}}],["unless",{"_index":695,"title":{},"body":{"components/ConnectionComponent.html":{}}}],["unmap",{"_index":2528,"title":{},"body":{"injectables/MappingsService.html":{}}}],["unmap(id",{"_index":2552,"title":{},"body":{"injectables/MappingsService.html":{}}}],["unpairop(name",{"_index":1778,"title":{},"body":{"interfaces/DraftOperationClassification.html":{},"interfaces/LoomConfig.html":{},"classes/PedalConfig.html":{},"injectables/PlayerService.html":{}}}],["unpairpedal",{"_index":3512,"title":{},"body":{"classes/PedalConfig.html":{}}}],["unpairpedal(id",{"_index":1773,"title":{},"body":{"interfaces/DraftOperationClassification.html":{},"interfaces/LoomConfig.html":{},"classes/PedalConfig.html":{},"injectables/PlayerService.html":{}}}],["unpredictable",{"_index":3177,"title":{},"body":{"interfaces/OperationParam.html":{},"classes/Params.html":{}}}],["unset",{"_index":388,"title":{},"body":{"classes/Cell.html":{},"interfaces/DesignActions.html":{},"interfaces/Ink.html":{},"injectables/InkService.html":{},"classes/OpSequencer.html":{},"components/OpSequencerComponent.html":{},"components/WeavingStateComponent.html":{}}}],["unset/false",{"_index":4561,"title":{},"body":{"index.html":{}}}],["unset_over",{"_index":913,"title":{},"body":{"interfaces/Crossing.html":{},"interfaces/Vertex.html":{},"interfaces/YarnPath.html":{}}}],["unset_under",{"_index":911,"title":{},"body":{"interfaces/Crossing.html":{},"interfaces/Vertex.html":{},"interfaces/YarnPath.html":{}}}],["unsetheddle",{"_index":379,"title":{},"body":{"classes/Cell.html":{}}}],["unsetparameters",{"_index":3860,"title":{},"body":{"classes/Selection.html":{}}}],["unsub",{"_index":1001,"title":{},"body":{"classes/DBListener.html":{},"classes/DBListenerArray.html":{},"classes/DBNode.html":{},"classes/DBNodeArray.html":{},"classes/DBTwoWay.html":{},"classes/DBTwoWayArray.html":{},"classes/DBWriteBuffer.html":{},"classes/DBWriter.html":{},"classes/DBWriterArray.html":{},"interfaces/NodeMethods.html":{},"interfaces/NodeParams.html":{},"classes/OnlineStatus.html":{}}}],["unsubscribe",{"_index":946,"title":{},"body":{"classes/DBListener.html":{},"classes/DBListenerArray.html":{},"classes/DBNode.html":{},"classes/DBNodeArray.html":{},"classes/DBTwoWay.html":{},"classes/DBTwoWayArray.html":{},"classes/DBWriteBuffer.html":{},"classes/DBWriter.html":{},"classes/DBWriterArray.html":{},"interfaces/NodeMethods.html":{},"interfaces/NodeParams.html":{},"classes/OnlineStatus.html":{}}}],["unsubscribers",{"_index":929,"title":{},"body":{"classes/DBListener.html":{},"classes/DBListenerArray.html":{},"classes/DBNode.html":{},"classes/DBNodeArray.html":{},"classes/DBTwoWay.html":{},"classes/DBTwoWayArray.html":{},"classes/DBWriteBuffer.html":{},"classes/DBWriter.html":{},"classes/DBWriterArray.html":{},"interfaces/NodeMethods.html":{},"interfaces/NodeParams.html":{},"classes/OnlineStatus.html":{}}}],["untested",{"_index":564,"title":{},"body":{"interfaces/ChainOp.html":{},"interfaces/PairedOp.html":{},"interfaces/PedalEvent.html":{},"interfaces/PlayerOp.html":{}}}],["unused",{"_index":120,"title":{},"body":{"classes/AbstractOpFactory.html":{},"classes/BaseOp.html":{},"classes/Branch.html":{},"classes/Bus.html":{},"classes/Merge.html":{},"interfaces/OpClassifier.html":{},"interfaces/OperationParam.html":{},"interfaces/OperationProperties.html":{},"classes/Params.html":{},"classes/Pipe.html":{},"classes/Seed.html":{},"interfaces/TopologyDef.html":{},"miscellaneous/typealiases.html":{}}}],["up",{"_index":386,"title":{},"body":{"classes/Cell.html":{},"interfaces/Ink.html":{},"injectables/InkService.html":{},"injectables/MappingsService.html":{},"components/OpHelpModal.html":{},"interfaces/Pedal.html":{},"classes/PedalStatus.html":{},"injectables/PedalsService.html":{},"components/PlayerComponent.html":{},"index.html":{}}}],["up/raised",{"_index":4554,"title":{},"body":{"index.html":{}}}],["update",{"_index":1438,"title":{},"body":{"interfaces/DesignActions.html":{},"interfaces/DraftOperationClassification.html":{},"interfaces/LoomConfig.html":{},"components/MixerViewComponent.html":{},"components/NoteComponent.html":{},"interfaces/Pedal.html":{},"classes/PedalConfig.html":{},"classes/PedalStatus.html":{},"injectables/PedalsService.html":{},"injectables/PlayerService.html":{},"classes/Shape.html":{},"injectables/ViewportService.html":{}}}],["updatearray",{"_index":1221,"title":{},"body":{"classes/DBTwoWayArray.html":{},"classes/DBWriterArray.html":{}}}],["updatearray(num",{"_index":1105,"title":{},"body":{"classes/DBListener.html":{},"classes/DBListenerArray.html":{},"classes/DBNode.html":{},"classes/DBNodeArray.html":{},"classes/DBTwoWay.html":{},"classes/DBTwoWayArray.html":{},"classes/DBWriteBuffer.html":{},"classes/DBWriter.html":{},"classes/DBWriterArray.html":{},"interfaces/NodeMethods.html":{},"interfaces/NodeParams.html":{},"classes/OnlineStatus.html":{}}}],["updated",{"_index":356,"title":{},"body":{"interfaces/Bounds.html":{},"components/ConnectionComponent.html":{},"interfaces/Point.html":{}}}],["updatefromposition",{"_index":656,"title":{},"body":{"components/ConnectionComponent.html":{}}}],["updatefromposition(from",{"_index":682,"title":{},"body":{"components/ConnectionComponent.html":{}}}],["updateheight",{"_index":3944,"title":{},"body":{"classes/Shape.html":{}}}],["updatelocaldims",{"_index":2724,"title":{},"body":{"components/MixerViewComponent.html":{}}}],["updatepoint",{"_index":4191,"title":{},"body":{"injectables/ViewportService.html":{}}}],["updatepoint(id",{"_index":4221,"title":{},"body":{"injectables/ViewportService.html":{}}}],["updatepoint(id:number",{"_index":4235,"title":{},"body":{"injectables/ViewportService.html":{}}}],["updatepositionfromparent(parent",{"_index":1465,"title":{},"body":{"interfaces/DesignActions.html":{}}}],["updates",{"_index":1457,"title":{},"body":{"interfaces/DesignActions.html":{},"interfaces/DraftMap.html":{},"interfaces/Interlacement.html":{},"interfaces/InterlacementVal.html":{},"components/ParameterComponent.html":{}}}],["updateselection",{"_index":1959,"title":{},"body":{"components/DraftdetailComponent.html":{}}}],["updateselection(event",{"_index":1984,"title":{},"body":{"components/DraftdetailComponent.html":{}}}],["updatesize(parent",{"_index":1475,"title":{},"body":{"interfaces/DesignActions.html":{}}}],["updatetoposition",{"_index":657,"title":{},"body":{"components/ConnectionComponent.html":{}}}],["updatetoposition(to",{"_index":689,"title":{},"body":{"components/ConnectionComponent.html":{}}}],["updatevariables",{"_index":4051,"title":{},"body":{"classes/Shuttle.html":{},"classes/System.html":{}}}],["updatevariables(undefined",{"_index":4078,"title":{},"body":{"classes/Shuttle.html":{},"classes/System.html":{}}}],["updatevariables({id",{"_index":4088,"title":{},"body":{"classes/Shuttle.html":{},"classes/System.html":{}}}],["updateviewport",{"_index":2725,"title":{},"body":{"components/MixerViewComponent.html":{}}}],["updateviewport(bounds",{"_index":1461,"title":{},"body":{"interfaces/DesignActions.html":{}}}],["updateviewport(data",{"_index":2749,"title":{},"body":{"components/MixerViewComponent.html":{}}}],["updateviewportfromzoom",{"_index":2726,"title":{},"body":{"components/MixerViewComponent.html":{}}}],["updatevisible",{"_index":3764,"title":{},"body":{"classes/Render.html":{}}}],["updatevisible(draft",{"_index":3798,"title":{},"body":{"classes/Render.html":{}}}],["updating",{"_index":996,"title":{},"body":{"classes/DBListener.html":{},"classes/DBListenerArray.html":{},"classes/DBNode.html":{},"classes/DBNodeArray.html":{},"classes/DBTwoWay.html":{},"classes/DBTwoWayArray.html":{},"classes/DBWriteBuffer.html":{},"classes/DBWriter.html":{},"classes/DBWriterArray.html":{},"interfaces/DraftOperationClassification.html":{},"interfaces/LoomConfig.html":{},"interfaces/NodeMethods.html":{},"interfaces/NodeParams.html":{},"classes/OnlineStatus.html":{},"interfaces/Pedal.html":{},"classes/PedalConfig.html":{},"classes/PedalStatus.html":{},"injectables/PedalsService.html":{},"injectables/PlayerService.html":{}}}],["upon",{"_index":201,"title":{},"body":{"classes/AbstractOpFactory.html":{},"classes/BaseOp.html":{},"classes/Branch.html":{},"classes/Bus.html":{},"classes/DBListener.html":{},"classes/DBListenerArray.html":{},"classes/DBNode.html":{},"classes/DBNodeArray.html":{},"classes/DBTwoWay.html":{},"classes/DBTwoWayArray.html":{},"classes/DBWriteBuffer.html":{},"classes/DBWriter.html":{},"classes/DBWriterArray.html":{},"interfaces/DynamicOperation.html":{},"classes/Merge.html":{},"interfaces/NodeMethods.html":{},"interfaces/NodeParams.html":{},"classes/OnlineStatus.html":{},"interfaces/OpClassifier.html":{},"interfaces/OpInput.html":{},"interfaces/OperationClassification.html":{},"interfaces/OperationProperties.html":{},"classes/Pipe.html":{},"classes/Seed.html":{},"interfaces/TopologyDef.html":{},"interfaces/TreeOperation.html":{}}}],["use",{"_index":270,"title":{},"body":{"classes/AbstractOpFactory.html":{},"classes/BaseOp.html":{},"classes/Branch.html":{},"classes/Bus.html":{},"interfaces/ChainOp.html":{},"interfaces/DraftMap.html":{},"interfaces/DraftNodeProxy.html":{},"interfaces/DynamicOperation.html":{},"interfaces/FileObj.html":{},"interfaces/FileSaver.html":{},"interfaces/Fileloader.html":{},"interfaces/IOTuple.html":{},"interfaces/Ink.html":{},"injectables/InkService.html":{},"interfaces/Interlacement.html":{},"interfaces/InterlacementVal.html":{},"interfaces/LoadResponse.html":{},"classes/Merge.html":{},"interfaces/NodeComponentProxy.html":{},"interfaces/OpClassifier.html":{},"interfaces/OpComponentProxy.html":{},"interfaces/OpInput.html":{},"interfaces/OperationClassification.html":{},"interfaces/OperationParam.html":{},"interfaces/OperationProperties.html":{},"interfaces/PairedOp.html":{},"classes/Params.html":{},"interfaces/PedalEvent.html":{},"classes/Pipe.html":{},"interfaces/PlayerOp.html":{},"interfaces/SaveObj.html":{},"classes/Seed.html":{},"interfaces/StatusMessage.html":{},"interfaces/TopologyDef.html":{},"interfaces/TreeNode.html":{},"interfaces/TreeNodeProxy.html":{},"interfaces/TreeOperation.html":{},"miscellaneous/functions.html":{},"index.html":{},"miscellaneous/typealiases.html":{}}}],["usecolor",{"_index":4297,"title":{},"body":{"components/WeavingStateComponent.html":{}}}],["used",{"_index":876,"title":{},"body":{"interfaces/Crossing.html":{},"interfaces/DesignActions.html":{},"interfaces/DraftMap.html":{},"interfaces/DynamicOperation.html":{},"interfaces/IOTuple.html":{},"interfaces/Interlacement.html":{},"interfaces/InterlacementVal.html":{},"components/NoteComponent.html":{},"interfaces/OpInput.html":{},"interfaces/OperationClassification.html":{},"interfaces/OperationParam.html":{},"classes/Params.html":{},"interfaces/Point.html":{},"classes/Shape-1.html":{},"classes/System.html":{},"interfaces/TreeNode.html":{},"interfaces/TreeOperation.html":{},"interfaces/Vertex.html":{},"interfaces/YarnPath.html":{},"index.html":{}}}],["useful",{"_index":445,"title":{},"body":{"interfaces/ChainIndex.html":{},"injectables/SequencerService.html":{},"index.html":{}}}],["user",{"_index":183,"title":{},"body":{"classes/AbstractOpFactory.html":{},"classes/BaseOp.html":{},"classes/Branch.html":{},"classes/Bus.html":{},"interfaces/DraftMap.html":{},"interfaces/DraftNodeProxy.html":{},"interfaces/FileObj.html":{},"interfaces/FileSaver.html":{},"interfaces/Fileloader.html":{},"interfaces/IOTuple.html":{},"interfaces/Ink.html":{},"injectables/InkService.html":{},"interfaces/Interlacement.html":{},"interfaces/InterlacementVal.html":{},"interfaces/LoadResponse.html":{},"classes/Merge.html":{},"interfaces/NodeComponentProxy.html":{},"interfaces/OpClassifier.html":{},"interfaces/OpComponentProxy.html":{},"interfaces/OperationParam.html":{},"interfaces/OperationProperties.html":{},"classes/Params.html":{},"classes/Pipe.html":{},"interfaces/SaveObj.html":{},"classes/Seed.html":{},"interfaces/StatusMessage.html":{},"interfaces/TopologyDef.html":{},"interfaces/TreeNode.html":{},"interfaces/TreeNodeProxy.html":{},"index.html":{},"miscellaneous/typealiases.html":{}}}],["user's",{"_index":4518,"title":{},"body":{"index.html":{}}}],["users",{"_index":1279,"title":{},"body":{"interfaces/DensityUnits.html":{},"interfaces/DesignMode.html":{},"interfaces/LoomTypes.html":{},"interfaces/MaterialTypes.html":{},"interfaces/ViewModes.html":{}}}],["uses",{"_index":2181,"title":{},"body":{"interfaces/DynamicOperation.html":{},"interfaces/OpInput.html":{},"interfaces/OperationClassification.html":{},"interfaces/TreeOperation.html":{},"index.html":{}}}],["uses_mask",{"_index":2304,"title":{},"body":{"interfaces/Ink.html":{},"injectables/InkService.html":{}}}],["uses_mask:false",{"_index":2315,"title":{},"body":{"interfaces/Ink.html":{},"injectables/InkService.html":{}}}],["uses_mask:true",{"_index":2331,"title":{},"body":{"interfaces/Ink.html":{},"injectables/InkService.html":{}}}],["using",{"_index":229,"title":{},"body":{"classes/AbstractOpFactory.html":{},"classes/BaseOp.html":{},"classes/Branch.html":{},"classes/Bus.html":{},"interfaces/DraftMap.html":{},"components/DraftdetailComponent.html":{},"interfaces/DynamicOperation.html":{},"interfaces/Interlacement.html":{},"interfaces/InterlacementVal.html":{},"classes/Merge.html":{},"interfaces/OpClassifier.html":{},"interfaces/OpInput.html":{},"interfaces/OperationClassification.html":{},"interfaces/OperationParam.html":{},"interfaces/OperationProperties.html":{},"classes/Params.html":{},"classes/Pipe.html":{},"interfaces/Point.html":{},"classes/Seed.html":{},"interfaces/TopologyDef.html":{},"interfaces/TreeOperation.html":{}}}],["util",{"_index":4142,"title":{},"body":{"classes/System.html":{}}}],["utilinstance",{"_index":1301,"title":{},"body":{"interfaces/DesignActions.html":{},"components/NoteComponent.html":{},"classes/System.html":{}}}],["utilinstance.getadjustedpointerposition(pointer",{"_index":2911,"title":{},"body":{"components/NoteComponent.html":{}}}],["utilinstance.getarraymax(el",{"_index":4157,"title":{},"body":{"classes/System.html":{}}}],["utilinstance.resolvepointtoabsolutendx(adj",{"_index":2917,"title":{},"body":{"components/NoteComponent.html":{}}}],["utilinstance.resolvepointtoabsolutendx(bounds.topleft",{"_index":1462,"title":{},"body":{"interfaces/DesignActions.html":{}}}],["utilinstance.resolvepointtoabsolutendx(this.bounds.topleft",{"_index":1411,"title":{},"body":{"interfaces/DesignActions.html":{}}}],["utilinstance.snaptogrid(relative",{"_index":2914,"title":{},"body":{"components/NoteComponent.html":{}}}],["utility",{"_index":3186,"title":{},"body":{"interfaces/OperationParam.html":{},"classes/Params.html":{},"injectables/PedalsService.html":{},"miscellaneous/functions.html":{},"index.html":{}}}],["v",{"_index":3185,"title":{},"body":{"interfaces/OperationParam.html":{},"classes/Params.html":{},"interfaces/Pedal.html":{},"classes/PedalStatus.html":{},"injectables/PedalsService.html":{}}}],["v.id",{"_index":3477,"title":{},"body":{"interfaces/Pedal.html":{},"classes/PedalStatus.html":{},"injectables/PedalsService.html":{}}}],["v_pedal_array",{"_index":3390,"title":{},"body":{"interfaces/Pedal.html":{},"classes/PedalStatus.html":{},"injectables/PedalsService.html":{}}}],["v_pedal_states",{"_index":3389,"title":{},"body":{"interfaces/Pedal.html":{},"classes/PedalStatus.html":{},"injectables/PedalsService.html":{}}}],["v_pedals",{"_index":3434,"title":{},"body":{"interfaces/Pedal.html":{},"classes/PedalStatus.html":{},"injectables/PedalsService.html":{}}}],["vacuum",{"_index":3379,"title":{},"body":{"interfaces/Pedal.html":{},"classes/PedalStatus.html":{},"injectables/PedalsService.html":{}}}],["vacuum_on",{"_index":3377,"title":{},"body":{"interfaces/Pedal.html":{},"classes/PedalStatus.html":{},"injectables/PedalsService.html":{}}}],["val",{"_index":988,"title":{},"body":{"classes/DBListener.html":{},"classes/DBListenerArray.html":{},"classes/DBNode.html":{},"classes/DBNodeArray.html":{},"classes/DBTwoWay.html":{},"classes/DBTwoWayArray.html":{},"classes/DBWriteBuffer.html":{},"classes/DBWriter.html":{},"classes/DBWriterArray.html":{},"interfaces/DraftMap.html":{},"interfaces/Interlacement.html":{},"interfaces/InterlacementVal.html":{},"interfaces/NodeMethods.html":{},"interfaces/NodeParams.html":{},"classes/OnlineStatus.html":{},"interfaces/Pedal.html":{},"classes/PedalStatus.html":{},"injectables/PedalsService.html":{}}}],["val(x",{"_index":991,"title":{},"body":{"classes/DBListener.html":{},"classes/DBListenerArray.html":{},"classes/DBNode.html":{},"classes/DBNodeArray.html":{},"classes/DBTwoWay.html":{},"classes/DBTwoWayArray.html":{},"classes/DBWriteBuffer.html":{},"classes/DBWriter.html":{},"classes/DBWriterArray.html":{},"interfaces/NodeMethods.html":{},"interfaces/NodeParams.html":{},"classes/OnlineStatus.html":{}}}],["valid",{"_index":3306,"title":{},"body":{"components/ParameterComponent.html":{}}}],["validate",{"_index":3173,"title":{},"body":{"interfaces/OperationParam.html":{},"classes/Params.html":{},"index.html":{}}}],["validation",{"_index":3155,"title":{},"body":{"interfaces/OperationParam.html":{}}}],["validationerrors",{"_index":3300,"title":{},"body":{"components/ParameterComponent.html":{}}}],["validatorfn",{"_index":3301,"title":{},"body":{"components/ParameterComponent.html":{},"miscellaneous/functions.html":{}}}],["validators",{"_index":3302,"title":{},"body":{"components/ParameterComponent.html":{}}}],["validators.required",{"_index":3321,"title":{},"body":{"components/ParameterComponent.html":{}}}],["value",{"_index":178,"title":{},"body":{"classes/AbstractOpFactory.html":{},"classes/BaseOp.html":{},"classes/Branch.html":{},"classes/Bus.html":{},"classes/Cell.html":{},"components/ConnectionComponent.html":{},"classes/DBListener.html":{},"classes/DBListenerArray.html":{},"classes/DBNode.html":{},"classes/DBNodeArray.html":{},"classes/DBTwoWay.html":{},"classes/DBTwoWayArray.html":{},"classes/DBWriteBuffer.html":{},"classes/DBWriter.html":{},"classes/DBWriterArray.html":{},"interfaces/DensityUnits.html":{},"interfaces/DesignActions.html":{},"interfaces/DesignMode.html":{},"interfaces/DraftMap.html":{},"components/DraftdetailComponent.html":{},"interfaces/Ink.html":{},"injectables/InkService.html":{},"components/InletComponent.html":{},"interfaces/Interlacement.html":{},"interfaces/InterlacementVal.html":{},"interfaces/LoomTypes.html":{},"injectables/MappingsService.html":{},"directives/MarqueeComponent.html":{},"interfaces/MaterialTypes.html":{},"classes/Merge.html":{},"interfaces/NodeMethods.html":{},"interfaces/NodeParams.html":{},"components/NoteComponent.html":{},"classes/OnlineStatus.html":{},"interfaces/OpClassifier.html":{},"components/OpHelpModal.html":{},"classes/OpSequencer.html":{},"interfaces/OperationParam.html":{},"interfaces/OperationProperties.html":{},"components/OpsComponent.html":{},"components/ParameterComponent.html":{},"classes/Params.html":{},"interfaces/Pedal.html":{},"classes/PedalStatus.html":{},"injectables/PedalsService.html":{},"classes/Pipe.html":{},"components/PlayerComponent.html":{},"injectables/PlayerService.html":{},"classes/Render.html":{},"classes/Seed.html":{},"directives/SelectionComponent.html":{},"injectables/SequencerService.html":{},"classes/System.html":{},"interfaces/TopologyDef.html":{},"interfaces/ViewModes.html":{},"components/WeavingStateComponent.html":{},"miscellaneous/functions.html":{},"index.html":{},"miscellaneous/typealiases.html":{}}}],["value.slice",{"_index":2455,"title":{},"body":{"components/InletComponent.html":{}}}],["value.tolowercase",{"_index":3255,"title":{},"body":{"components/OpsComponent.html":{}}}],["values",{"_index":155,"title":{},"body":{"classes/AbstractOpFactory.html":{},"classes/BaseOp.html":{},"classes/Branch.html":{},"classes/Bus.html":{},"classes/DBListener.html":{},"classes/DBListenerArray.html":{},"classes/DBNode.html":{},"classes/DBNodeArray.html":{},"classes/DBTwoWay.html":{},"classes/DBTwoWayArray.html":{},"classes/DBWriteBuffer.html":{},"classes/DBWriter.html":{},"classes/DBWriterArray.html":{},"interfaces/DraftNodeProxy.html":{},"interfaces/FileObj.html":{},"interfaces/FileSaver.html":{},"interfaces/Fileloader.html":{},"interfaces/IOTuple.html":{},"interfaces/LoadResponse.html":{},"injectables/MappingsService.html":{},"classes/Merge.html":{},"components/MixerViewComponent.html":{},"interfaces/NodeComponentProxy.html":{},"interfaces/NodeMethods.html":{},"interfaces/NodeParams.html":{},"classes/OnlineStatus.html":{},"interfaces/OpClassifier.html":{},"interfaces/OpComponentProxy.html":{},"interfaces/OperationParam.html":{},"interfaces/OperationProperties.html":{},"components/ParameterComponent.html":{},"classes/Params.html":{},"interfaces/Pedal.html":{},"classes/PedalStatus.html":{},"injectables/PedalsService.html":{},"classes/Pipe.html":{},"classes/Render.html":{},"interfaces/SaveObj.html":{},"classes/Seed.html":{},"interfaces/StatusMessage.html":{},"interfaces/TopologyDef.html":{},"interfaces/TreeNode.html":{},"interfaces/TreeNodeProxy.html":{},"miscellaneous/functions.html":{},"index.html":{}}}],["values[1",{"_index":2807,"title":{},"body":{"components/MixerViewComponent.html":{}}}],["values[1].length",{"_index":2808,"title":{},"body":{"components/MixerViewComponent.html":{}}}],["values[1].split(/,\\s?/g",{"_index":2810,"title":{},"body":{"components/MixerViewComponent.html":{}}}],["var",{"_index":558,"title":{},"body":{"interfaces/ChainOp.html":{},"components/ConnectionComponent.html":{},"classes/DBListener.html":{},"classes/DBListenerArray.html":{},"classes/DBNode.html":{},"classes/DBNodeArray.html":{},"classes/DBTwoWay.html":{},"classes/DBTwoWayArray.html":{},"classes/DBWriteBuffer.html":{},"classes/DBWriter.html":{},"classes/DBWriterArray.html":{},"components/DraftdetailComponent.html":{},"components/ImageComponent.html":{},"components/InletComponent.html":{},"components/MixerViewComponent.html":{},"interfaces/NodeMethods.html":{},"interfaces/NodeParams.html":{},"components/NoteComponent.html":{},"classes/OnlineStatus.html":{},"components/OpHelpModal.html":{},"components/OpSequencerComponent.html":{},"components/OpsComponent.html":{},"interfaces/PairedOp.html":{},"components/ParameterComponent.html":{},"interfaces/Pedal.html":{},"interfaces/PedalEvent.html":{},"classes/PedalStatus.html":{},"injectables/PedalsService.html":{},"components/PlayerComponent.html":{},"interfaces/PlayerOp.html":{},"classes/Render.html":{},"classes/Shape.html":{},"components/SnackbarComponent.html":{},"components/VirtualPedalsComponent.html":{},"components/WeavingStateComponent.html":{}}}],["variables",{"_index":401,"title":{},"body":{"classes/Cell.html":{},"components/DraftdetailComponent.html":{}}}],["vaues",{"_index":4580,"title":{},"body":{"index.html":{}}}],["verdana",{"_index":2928,"title":{},"body":{"components/NoteComponent.html":{}}}],["versa",{"_index":4577,"title":{},"body":{"index.html":{}}}],["version",{"_index":1649,"title":{},"body":{"interfaces/DraftNodeProxy.html":{},"interfaces/FileObj.html":{},"interfaces/FileSaver.html":{},"interfaces/Fileloader.html":{},"interfaces/LoadResponse.html":{},"interfaces/NodeComponentProxy.html":{},"interfaces/OpComponentProxy.html":{},"interfaces/SaveObj.html":{},"interfaces/StatusMessage.html":{},"interfaces/TreeNodeProxy.html":{},"index.html":{},"properties.html":{}}}],["versions",{"_index":199,"title":{},"body":{"classes/AbstractOpFactory.html":{},"classes/BaseOp.html":{},"classes/Branch.html":{},"classes/Bus.html":{},"interfaces/DynamicOperation.html":{},"classes/Merge.html":{},"interfaces/OpClassifier.html":{},"interfaces/OpInput.html":{},"interfaces/OperationClassification.html":{},"interfaces/OperationProperties.html":{},"classes/Pipe.html":{},"classes/Seed.html":{},"interfaces/TopologyDef.html":{},"interfaces/TreeOperation.html":{}}}],["vertex",{"_index":885,"title":{"interfaces/Vertex.html":{}},"body":{"interfaces/Crossing.html":{},"interfaces/Vertex.html":{},"interfaces/YarnPath.html":{}}}],["vertical",{"_index":3338,"title":{},"body":{"components/ParameterComponent.html":{}}}],["verticies",{"_index":896,"title":{},"body":{"interfaces/Crossing.html":{},"interfaces/Vertex.html":{},"interfaces/YarnPath.html":{}}}],["very",{"_index":64,"title":{},"body":{"classes/AbstractOpFactory.html":{},"classes/BaseOp.html":{},"classes/Branch.html":{},"classes/Bus.html":{},"classes/Merge.html":{},"interfaces/OpClassifier.html":{},"interfaces/OperationProperties.html":{},"classes/Pipe.html":{},"classes/Seed.html":{},"interfaces/TopologyDef.html":{},"miscellaneous/typealiases.html":{}}}],["vice",{"_index":4576,"title":{},"body":{"index.html":{}}}],["view",{"_index":1459,"title":{},"body":{"interfaces/DesignActions.html":{},"interfaces/DraftMap.html":{},"components/DraftdetailComponent.html":{},"interfaces/Interlacement.html":{},"interfaces/InterlacementVal.html":{},"components/MixerViewComponent.html":{},"components/ParameterComponent.html":{},"components/PlayerComponent.html":{},"classes/Render.html":{},"injectables/ViewportService.html":{},"index.html":{}}}],["view_frames",{"_index":3770,"title":{},"body":{"classes/Render.html":{}}}],["view_front",{"_index":3750,"title":{},"body":{"classes/Render.html":{}}}],["view_id",{"_index":2267,"title":{},"body":{"interfaces/IOTuple.html":{},"interfaces/TreeNode.html":{}}}],["view_slider",{"_index":2853,"title":{},"body":{"components/MixerViewComponent.html":{}}}],["viewchild",{"_index":1288,"title":{},"body":{"interfaces/DesignActions.html":{},"components/DraftdetailComponent.html":{},"components/NoteComponent.html":{},"components/PlayerComponent.html":{}}}],["viewchild('bitmapimage",{"_index":1352,"title":{},"body":{"interfaces/DesignActions.html":{}}}],["viewchild('weaver",{"_index":2001,"title":{},"body":{"components/DraftdetailComponent.html":{}}}],["viewchild(opsequencercomponent",{"_index":3629,"title":{},"body":{"components/PlayerComponent.html":{}}}],["viewchild(weavingstatecomponent",{"_index":3634,"title":{},"body":{"components/PlayerComponent.html":{}}}],["viewcomponentref",{"_index":2268,"title":{},"body":{"interfaces/IOTuple.html":{},"interfaces/TreeNode.html":{}}}],["viewer",{"_index":1940,"title":{},"body":{"components/DraftdetailComponent.html":{},"interfaces/DynamicOperation.html":{},"interfaces/OpInput.html":{},"interfaces/OperationClassification.html":{},"interfaces/TreeOperation.html":{}}}],["viewing",{"_index":4463,"title":{},"body":{"index.html":{}}}],["viewmodes",{"_index":1268,"title":{"interfaces/ViewModes.html":{}},"body":{"interfaces/DensityUnits.html":{},"interfaces/DesignMode.html":{},"interfaces/LoomTypes.html":{},"interfaces/MaterialTypes.html":{},"interfaces/ViewModes.html":{}}}],["viewonly",{"_index":1950,"title":{},"body":{"components/DraftdetailComponent.html":{}}}],["viewport",{"_index":1394,"title":{},"body":{"interfaces/DesignActions.html":{},"components/MixerViewComponent.html":{},"components/NoteComponent.html":{},"injectables/ViewportService.html":{}}}],["viewport.getabsolutewidth",{"_index":2784,"title":{},"body":{"components/MixerViewComponent.html":{}}}],["viewport:viewportservice",{"_index":2897,"title":{},"body":{"components/NoteComponent.html":{}}}],["viewportservice",{"_index":1307,"title":{"injectables/ViewportService.html":{}},"body":{"interfaces/DesignActions.html":{},"components/MixerViewComponent.html":{},"components/NoteComponent.html":{},"injectables/ViewportService.html":{}}}],["viewref",{"_index":2263,"title":{},"body":{"interfaces/IOTuple.html":{},"interfaces/TreeNode.html":{}}}],["views",{"_index":4522,"title":{},"body":{"index.html":{}}}],["viewvalue",{"_index":1265,"title":{},"body":{"interfaces/DensityUnits.html":{},"interfaces/DesignActions.html":{},"interfaces/DesignMode.html":{},"interfaces/Ink.html":{},"injectables/InkService.html":{},"interfaces/LoomTypes.html":{},"interfaces/MaterialTypes.html":{},"interfaces/ViewModes.html":{}}}],["virtual",{"_index":858,"title":{},"body":{"components/ConnectionComponent.html":{},"classes/DBListener.html":{},"classes/DBListenerArray.html":{},"classes/DBNode.html":{},"classes/DBNodeArray.html":{},"classes/DBTwoWay.html":{},"classes/DBTwoWayArray.html":{},"classes/DBWriteBuffer.html":{},"classes/DBWriter.html":{},"classes/DBWriterArray.html":{},"components/DraftdetailComponent.html":{},"components/ImageComponent.html":{},"components/InletComponent.html":{},"components/MixerViewComponent.html":{},"interfaces/NodeMethods.html":{},"interfaces/NodeParams.html":{},"components/NoteComponent.html":{},"classes/OnlineStatus.html":{},"components/OpHelpModal.html":{},"components/OpSequencerComponent.html":{},"components/OpsComponent.html":{},"components/ParameterComponent.html":{},"interfaces/Pedal.html":{},"classes/PedalStatus.html":{},"injectables/PedalsService.html":{},"components/PlayerComponent.html":{},"modules/PlayerModule.html":{},"components/SnackbarComponent.html":{},"components/VirtualPedalsComponent.html":{},"components/WeavingStateComponent.html":{}}}],["virtualpedals",{"_index":3554,"title":{},"body":{"injectables/PedalsService.html":{}}}],["virtualpedals(state",{"_index":3503,"title":{},"body":{"interfaces/Pedal.html":{},"classes/PedalStatus.html":{},"injectables/PedalsService.html":{}}}],["virtualpedalscomponent",{"_index":857,"title":{"components/VirtualPedalsComponent.html":{}},"body":{"components/ConnectionComponent.html":{},"components/DraftdetailComponent.html":{},"components/ImageComponent.html":{},"components/InletComponent.html":{},"components/MixerViewComponent.html":{},"components/NoteComponent.html":{},"components/OpHelpModal.html":{},"components/OpSequencerComponent.html":{},"components/OpsComponent.html":{},"components/ParameterComponent.html":{},"components/PlayerComponent.html":{},"modules/PlayerModule.html":{},"components/SnackbarComponent.html":{},"components/VirtualPedalsComponent.html":{},"components/WeavingStateComponent.html":{},"overview.html":{}}}],["visible",{"_index":1656,"title":{},"body":{"interfaces/DraftNodeProxy.html":{},"interfaces/FileObj.html":{},"interfaces/FileSaver.html":{},"interfaces/Fileloader.html":{},"interfaces/LoadResponse.html":{},"interfaces/NodeComponentProxy.html":{},"interfaces/OpComponentProxy.html":{},"components/ParameterComponent.html":{},"classes/Render.html":{},"interfaces/SaveObj.html":{},"classes/Shuttle.html":{},"interfaces/StatusMessage.html":{},"classes/System.html":{},"interfaces/TreeNodeProxy.html":{}}}],["visiblerows",{"_index":3751,"title":{},"body":{"classes/Render.html":{}}}],["visibletooltip",{"_index":3268,"title":{},"body":{"components/OpsComponent.html":{}}}],["visit",{"_index":4440,"title":{},"body":{"index.html":{}}}],["visual",{"_index":3845,"title":{},"body":{"classes/Render.html":{},"index.html":{}}}],["visualize",{"_index":2074,"title":{},"body":{"components/DraftdetailComponent.html":{}}}],["vocabulary",{"_index":4537,"title":{},"body":{"index.html":{}}}],["void",{"_index":258,"title":{},"body":{"classes/AbstractOpFactory.html":{},"classes/BaseOp.html":{},"classes/Branch.html":{},"classes/Bus.html":{},"classes/Cell.html":{},"components/ConnectionComponent.html":{},"classes/DBListener.html":{},"classes/DBListenerArray.html":{},"classes/DBNode.html":{},"classes/DBNodeArray.html":{},"classes/DBTwoWay.html":{},"classes/DBTwoWayArray.html":{},"classes/DBWriteBuffer.html":{},"classes/DBWriter.html":{},"classes/DBWriterArray.html":{},"components/DraftdetailComponent.html":{},"components/ImageComponent.html":{},"injectables/InkService.html":{},"components/InletComponent.html":{},"injectables/LayersService.html":{},"injectables/MappingsService.html":{},"directives/MarqueeComponent.html":{},"classes/Merge.html":{},"components/MixerViewComponent.html":{},"interfaces/NodeMethods.html":{},"interfaces/NodeParams.html":{},"components/NoteComponent.html":{},"classes/OnlineStatus.html":{},"interfaces/OpClassifier.html":{},"components/OpHelpModal.html":{},"classes/OpSequencer.html":{},"components/OpSequencerComponent.html":{},"interfaces/OperationProperties.html":{},"components/OpsComponent.html":{},"components/ParameterComponent.html":{},"classes/PedalConfig.html":{},"injectables/PedalsService.html":{},"classes/Pipe.html":{},"components/PlayerComponent.html":{},"injectables/PlayerService.html":{},"classes/Render.html":{},"classes/Seed.html":{},"classes/Selection.html":{},"directives/SelectionComponent.html":{},"injectables/SequencerService.html":{},"classes/Shape.html":{},"classes/Shuttle.html":{},"components/SnackbarComponent.html":{},"classes/System.html":{},"interfaces/TopologyDef.html":{},"injectables/ViewportService.html":{},"components/VirtualPedalsComponent.html":{},"components/WeavingStateComponent.html":{}}}],["vp",{"_index":4178,"title":{},"body":{"injectables/ViewportService.html":{}}}],["w",{"_index":3409,"title":{},"body":{"interfaces/Pedal.html":{},"classes/PedalStatus.html":{},"injectables/PedalsService.html":{},"components/PlayerComponent.html":{},"classes/Render.html":{},"injectables/ViewportService.html":{},"components/WeavingStateComponent.html":{}}}],["waffle",{"_index":1813,"title":{},"body":{"interfaces/DraftOperationClassification.html":{},"interfaces/LoomConfig.html":{},"classes/PedalConfig.html":{},"injectables/PlayerService.html":{}}}],["wait",{"_index":4502,"title":{},"body":{"index.html":{}}}],["want",{"_index":2075,"title":{},"body":{"components/DraftdetailComponent.html":{},"interfaces/OperationParam.html":{},"classes/Params.html":{},"miscellaneous/typealiases.html":{}}}],["warp",{"_index":881,"title":{},"body":{"interfaces/Crossing.html":{},"components/DraftdetailComponent.html":{},"classes/Selection.html":{},"classes/Shape.html":{},"interfaces/Vertex.html":{},"interfaces/YarnPath.html":{},"index.html":{},"miscellaneous/typealiases.html":{}}}],["warp/weft",{"_index":4567,"title":{},"body":{"index.html":{}}}],["warp:weft",{"_index":3976,"title":{},"body":{"classes/Shape.html":{}}}],["warps",{"_index":1321,"title":{},"body":{"interfaces/DesignActions.html":{},"interfaces/DraftOperationClassification.html":{},"components/DraftdetailComponent.html":{},"interfaces/LoomConfig.html":{},"classes/PedalConfig.html":{},"components/PlayerComponent.html":{},"injectables/PlayerService.html":{},"components/WeavingStateComponent.html":{}}}],["warps(draft.drawdown",{"_index":1417,"title":{},"body":{"interfaces/DesignActions.html":{}}}],["warps(this.draft.drawdown",{"_index":1455,"title":{},"body":{"interfaces/DesignActions.html":{},"components/DraftdetailComponent.html":{}}}],["warps(this.pls.draft.drawdown)+2",{"_index":4322,"title":{},"body":{"components/WeavingStateComponent.html":{}}}],["way",{"_index":1125,"title":{},"body":{"classes/DBListener.html":{},"classes/DBListenerArray.html":{},"classes/DBNode.html":{},"classes/DBNodeArray.html":{},"classes/DBTwoWay.html":{},"classes/DBTwoWayArray.html":{},"classes/DBWriteBuffer.html":{},"classes/DBWriter.html":{},"classes/DBWriterArray.html":{},"interfaces/DraftOperationClassification.html":{},"interfaces/LoomConfig.html":{},"injectables/MappingsService.html":{},"interfaces/NodeMethods.html":{},"interfaces/NodeParams.html":{},"classes/OnlineStatus.html":{},"classes/PedalConfig.html":{},"injectables/PlayerService.html":{}}}],["we're",{"_index":1991,"title":{},"body":{"components/DraftdetailComponent.html":{},"interfaces/Ink.html":{},"injectables/InkService.html":{}}}],["we've",{"_index":3072,"title":{},"body":{"classes/OpSequencer.html":{}}}],["weave",{"_index":1849,"title":{},"body":{"interfaces/DraftOperationClassification.html":{},"components/DraftdetailComponent.html":{},"interfaces/LoomConfig.html":{},"classes/PedalConfig.html":{},"injectables/PlayerService.html":{}}}],["weave_stats",{"_index":2121,"title":{},"body":{"components/DraftdetailComponent.html":{}}}],["weaver",{"_index":1784,"title":{},"body":{"interfaces/DraftOperationClassification.html":{},"components/DraftdetailComponent.html":{},"interfaces/LoomConfig.html":{},"classes/PedalConfig.html":{},"injectables/PlayerService.html":{},"interfaces/PlayerState.html":{},"interfaces/PlayerState-1.html":{},"interfaces/WeavingLog.html":{},"interfaces/WeavingPick.html":{},"interfaces/WeavingPick-1.html":{},"index.html":{}}}],["weaver/weaver.component",{"_index":2009,"title":{},"body":{"components/DraftdetailComponent.html":{}}}],["weaver/weaver.module",{"_index":2693,"title":{},"body":{"modules/MixerModule.html":{}}}],["weavercomponent",{"_index":1999,"title":{},"body":{"components/DraftdetailComponent.html":{}}}],["weavermodule",{"_index":2692,"title":{},"body":{"modules/MixerModule.html":{}}}],["weaving",{"_index":573,"title":{},"body":{"interfaces/ChainOp.html":{},"components/ConnectionComponent.html":{},"interfaces/DraftOperationClassification.html":{},"components/DraftdetailComponent.html":{},"components/ImageComponent.html":{},"interfaces/Ink.html":{},"injectables/InkService.html":{},"components/InletComponent.html":{},"interfaces/LoomConfig.html":{},"components/MixerViewComponent.html":{},"components/NoteComponent.html":{},"components/OpHelpModal.html":{},"components/OpSequencerComponent.html":{},"components/OpsComponent.html":{},"interfaces/PairedOp.html":{},"components/ParameterComponent.html":{},"interfaces/Pedal.html":{},"classes/PedalConfig.html":{},"interfaces/PedalEvent.html":{},"classes/PedalStatus.html":{},"injectables/PedalsService.html":{},"components/PlayerComponent.html":{},"modules/PlayerModule.html":{},"interfaces/PlayerOp.html":{},"injectables/PlayerService.html":{},"interfaces/PlayerState.html":{},"interfaces/PlayerState-1.html":{},"components/SnackbarComponent.html":{},"components/VirtualPedalsComponent.html":{},"interfaces/WeavingLog.html":{},"interfaces/WeavingPick.html":{},"interfaces/WeavingPick-1.html":{},"components/WeavingStateComponent.html":{},"index.html":{}}}],["weaving_state",{"_index":3619,"title":{},"body":{"components/PlayerComponent.html":{}}}],["weavinglog",{"_index":3738,"title":{"interfaces/WeavingLog.html":{}},"body":{"interfaces/PlayerState.html":{},"interfaces/WeavingLog.html":{},"interfaces/WeavingPick.html":{}}}],["weavingonly",{"_index":518,"title":{},"body":{"interfaces/ChainOp.html":{},"interfaces/PairedOp.html":{},"interfaces/PedalEvent.html":{},"interfaces/PlayerOp.html":{}}}],["weavingpick",{"_index":1684,"title":{"interfaces/WeavingPick.html":{},"interfaces/WeavingPick-1.html":{}},"body":{"interfaces/DraftOperationClassification.html":{},"interfaces/LoomConfig.html":{},"interfaces/Pedal.html":{},"classes/PedalConfig.html":{},"classes/PedalStatus.html":{},"injectables/PedalsService.html":{},"injectables/PlayerService.html":{},"interfaces/PlayerState.html":{},"interfaces/PlayerState-1.html":{},"interfaces/WeavingLog.html":{},"interfaces/WeavingPick.html":{},"interfaces/WeavingPick-1.html":{}}}],["weavingstatecomponent",{"_index":860,"title":{"components/WeavingStateComponent.html":{}},"body":{"components/ConnectionComponent.html":{},"components/DraftdetailComponent.html":{},"components/ImageComponent.html":{},"components/InletComponent.html":{},"components/MixerViewComponent.html":{},"components/NoteComponent.html":{},"components/OpHelpModal.html":{},"components/OpSequencerComponent.html":{},"components/OpsComponent.html":{},"components/ParameterComponent.html":{},"components/PlayerComponent.html":{},"modules/PlayerModule.html":{},"components/SnackbarComponent.html":{},"components/VirtualPedalsComponent.html":{},"components/WeavingStateComponent.html":{},"overview.html":{}}}],["weavingwriters",{"_index":3555,"title":{},"body":{"injectables/PedalsService.html":{}}}],["weavingwriters(state",{"_index":3575,"title":{},"body":{"injectables/PedalsService.html":{}}}],["web",{"_index":4471,"title":{},"body":{"index.html":{}}}],["website",{"_index":294,"title":{},"body":{"classes/AbstractOpFactory.html":{},"classes/BaseOp.html":{},"classes/Branch.html":{},"classes/Bus.html":{},"classes/Merge.html":{},"interfaces/OpClassifier.html":{},"interfaces/OperationParam.html":{},"interfaces/OperationProperties.html":{},"classes/Params.html":{},"classes/Pipe.html":{},"classes/Seed.html":{},"interfaces/TopologyDef.html":{}}}],["weft",{"_index":901,"title":{},"body":{"interfaces/Crossing.html":{},"classes/Selection.html":{},"classes/System.html":{},"interfaces/Vertex.html":{},"interfaces/YarnPath.html":{},"index.html":{},"miscellaneous/typealiases.html":{}}}],["weft(s",{"_index":3931,"title":{},"body":{"classes/Shape.html":{}}}],["wefts",{"_index":504,"title":{},"body":{"interfaces/ChainOp.html":{},"interfaces/DesignActions.html":{},"interfaces/DraftOperationClassification.html":{},"components/DraftdetailComponent.html":{},"interfaces/LoomConfig.html":{},"interfaces/PairedOp.html":{},"classes/PedalConfig.html":{},"interfaces/PedalEvent.html":{},"components/PlayerComponent.html":{},"interfaces/PlayerOp.html":{},"injectables/PlayerService.html":{},"classes/Render.html":{},"classes/System.html":{},"components/WeavingStateComponent.html":{}}}],["wefts(d.drawdown",{"_index":1902,"title":{},"body":{"interfaces/DraftOperationClassification.html":{},"interfaces/LoomConfig.html":{},"classes/PedalConfig.html":{},"injectables/PlayerService.html":{}}}],["wefts(draft.drawdown",{"_index":1418,"title":{},"body":{"interfaces/DesignActions.html":{},"interfaces/DraftOperationClassification.html":{},"interfaces/LoomConfig.html":{},"classes/PedalConfig.html":{},"injectables/PlayerService.html":{}}}],["wefts(init.draft.drawdown",{"_index":531,"title":{},"body":{"interfaces/ChainOp.html":{},"interfaces/PairedOp.html":{},"interfaces/PedalEvent.html":{},"interfaces/PlayerOp.html":{}}}],["wefts(res.draft.drawdown",{"_index":554,"title":{},"body":{"interfaces/ChainOp.html":{},"interfaces/DraftOperationClassification.html":{},"interfaces/LoomConfig.html":{},"interfaces/PairedOp.html":{},"classes/PedalConfig.html":{},"interfaces/PedalEvent.html":{},"interfaces/PlayerOp.html":{},"injectables/PlayerService.html":{}}}],["wefts(this.draft.drawdown",{"_index":1456,"title":{},"body":{"interfaces/DesignActions.html":{},"components/DraftdetailComponent.html":{}}}],["wefts(this.pls.draft.drawdown",{"_index":4323,"title":{},"body":{"components/WeavingStateComponent.html":{}}}],["weight",{"_index":2937,"title":{},"body":{"components/NoteComponent.html":{},"components/OpSequencerComponent.html":{},"components/OpsComponent.html":{},"components/SnackbarComponent.html":{}}}],["weight:bold",{"_index":3005,"title":{},"body":{"components/OpHelpModal.html":{}}}],["well",{"_index":1623,"title":{},"body":{"interfaces/DraftMap.html":{},"interfaces/Interlacement.html":{},"interfaces/InterlacementVal.html":{},"interfaces/Pedal.html":{},"classes/PedalStatus.html":{},"injectables/PedalsService.html":{},"index.html":{}}}],["whatever",{"_index":3468,"title":{},"body":{"interfaces/Pedal.html":{},"classes/PedalStatus.html":{},"injectables/PedalsService.html":{}}}],["whetever",{"_index":4304,"title":{},"body":{"components/WeavingStateComponent.html":{}}}],["whether",{"_index":1143,"title":{},"body":{"classes/DBListener.html":{},"classes/DBListenerArray.html":{},"classes/DBNode.html":{},"classes/DBNodeArray.html":{},"classes/DBTwoWay.html":{},"classes/DBTwoWayArray.html":{},"classes/DBWriteBuffer.html":{},"classes/DBWriter.html":{},"classes/DBWriterArray.html":{},"interfaces/Ink.html":{},"injectables/InkService.html":{},"interfaces/NodeMethods.html":{},"interfaces/NodeParams.html":{},"classes/OnlineStatus.html":{},"classes/OpSequencer.html":{},"interfaces/Pedal.html":{},"classes/PedalStatus.html":{},"injectables/PedalsService.html":{},"interfaces/PlayerState.html":{},"interfaces/PlayerState-1.html":{},"interfaces/WeavingLog.html":{},"interfaces/WeavingPick.html":{},"interfaces/WeavingPick-1.html":{},"index.html":{}}}],["white",{"_index":1519,"title":{},"body":{"interfaces/DesignActions.html":{},"components/InletComponent.html":{},"components/MixerViewComponent.html":{},"components/OpSequencerComponent.html":{},"components/OpsComponent.html":{},"components/ParameterComponent.html":{},"components/PlayerComponent.html":{},"components/VirtualPedalsComponent.html":{},"components/WeavingStateComponent.html":{}}}],["whole",{"_index":4017,"title":{},"body":{"classes/Shape-1.html":{}}}],["width",{"_index":344,"title":{},"body":{"interfaces/Bounds.html":{},"components/ConnectionComponent.html":{},"interfaces/DesignActions.html":{},"components/DraftdetailComponent.html":{},"components/InletComponent.html":{},"directives/MarqueeComponent.html":{},"components/MixerViewComponent.html":{},"components/NoteComponent.html":{},"components/OpSequencerComponent.html":{},"components/OpsComponent.html":{},"components/ParameterComponent.html":{},"components/PlayerComponent.html":{},"interfaces/Point.html":{},"classes/Selection.html":{},"directives/SelectionComponent.html":{},"classes/Shape.html":{},"components/SnackbarComponent.html":{},"injectables/ViewportService.html":{},"components/VirtualPedalsComponent.html":{},"components/WeavingStateComponent.html":{}}}],["width:30px",{"_index":2480,"title":{},"body":{"components/InletComponent.html":{}}}],["wif",{"_index":1543,"title":{},"body":{"interfaces/DesignActions.html":{},"interfaces/DraftNodeProxy.html":{},"interfaces/FileObj.html":{},"interfaces/FileSaver.html":{},"interfaces/Fileloader.html":{},"interfaces/LoadResponse.html":{},"interfaces/NodeComponentProxy.html":{},"interfaces/OpComponentProxy.html":{},"interfaces/SaveObj.html":{},"interfaces/StatusMessage.html":{},"interfaces/TreeNodeProxy.html":{}}}],["window",{"_index":1943,"title":{},"body":{"components/DraftdetailComponent.html":{},"components/MixerViewComponent.html":{}}}],["window:keydown",{"_index":4265,"title":{},"body":{"components/VirtualPedalsComponent.html":{}}}],["window:keydown(event",{"_index":4267,"title":{},"body":{"components/VirtualPedalsComponent.html":{}}}],["wish",{"_index":4448,"title":{},"body":{"index.html":{}}}],["within",{"_index":877,"title":{},"body":{"interfaces/Crossing.html":{},"interfaces/DensityUnits.html":{},"interfaces/DesignActions.html":{},"interfaces/DesignMode.html":{},"interfaces/DraftMap.html":{},"interfaces/DraftNodeProxy.html":{},"interfaces/FileObj.html":{},"interfaces/FileSaver.html":{},"interfaces/Fileloader.html":{},"interfaces/Ink.html":{},"injectables/InkService.html":{},"interfaces/Interlacement.html":{},"interfaces/InterlacementVal.html":{},"interfaces/LoadResponse.html":{},"interfaces/LoomTypes.html":{},"interfaces/MaterialTypes.html":{},"interfaces/NodeComponentProxy.html":{},"interfaces/OpComponentProxy.html":{},"interfaces/SaveObj.html":{},"classes/Shape-1.html":{},"interfaces/StatusMessage.html":{},"interfaces/TreeNodeProxy.html":{},"interfaces/Vertex.html":{},"interfaces/ViewModes.html":{},"injectables/ViewportService.html":{},"interfaces/YarnPath.html":{},"index.html":{}}}],["without",{"_index":3078,"title":{},"body":{"classes/OpSequencer.html":{},"index.html":{}}}],["working",{"_index":2179,"title":{},"body":{"interfaces/DynamicOperation.html":{},"interfaces/OpInput.html":{},"interfaces/OperationClassification.html":{},"interfaces/TreeOperation.html":{}}}],["workspace",{"_index":1660,"title":{},"body":{"interfaces/DraftNodeProxy.html":{},"interfaces/FileObj.html":{},"interfaces/FileSaver.html":{},"interfaces/Fileloader.html":{},"interfaces/LoadResponse.html":{},"interfaces/NodeComponentProxy.html":{},"interfaces/OpComponentProxy.html":{},"interfaces/SaveObj.html":{},"interfaces/StatusMessage.html":{},"interfaces/TreeNodeProxy.html":{},"index.html":{}}}],["workspaceservice",{"_index":1314,"title":{},"body":{"interfaces/DesignActions.html":{},"components/DraftdetailComponent.html":{}}}],["woven",{"_index":3929,"title":{},"body":{"classes/Shape.html":{},"index.html":{}}}],["wrap",{"_index":3096,"title":{},"body":{"components/OpSequencerComponent.html":{},"components/PlayerComponent.html":{},"components/WeavingStateComponent.html":{}}}],["wrapper",{"_index":969,"title":{},"body":{"classes/DBListener.html":{},"classes/DBListenerArray.html":{},"classes/DBNode.html":{},"classes/DBNodeArray.html":{},"classes/DBTwoWay.html":{},"classes/DBTwoWayArray.html":{},"classes/DBWriteBuffer.html":{},"classes/DBWriter.html":{},"classes/DBWriterArray.html":{},"interfaces/NodeMethods.html":{},"interfaces/NodeParams.html":{},"classes/OnlineStatus.html":{},"interfaces/Pedal.html":{},"classes/PedalStatus.html":{},"injectables/PedalsService.html":{}}}],["write",{"_index":1130,"title":{},"body":{"classes/DBListener.html":{},"classes/DBListenerArray.html":{},"classes/DBNode.html":{},"classes/DBNodeArray.html":{},"classes/DBTwoWay.html":{},"classes/DBTwoWayArray.html":{},"classes/DBWriteBuffer.html":{},"classes/DBWriter.html":{},"classes/DBWriterArray.html":{},"interfaces/NodeMethods.html":{},"interfaces/NodeParams.html":{},"classes/OnlineStatus.html":{}}}],["writers",{"_index":3395,"title":{},"body":{"interfaces/Pedal.html":{},"classes/PedalStatus.html":{},"injectables/PedalsService.html":{}}}],["writes",{"_index":1015,"title":{},"body":{"classes/DBListener.html":{},"classes/DBListenerArray.html":{},"classes/DBNode.html":{},"classes/DBNodeArray.html":{},"classes/DBTwoWay.html":{},"classes/DBTwoWayArray.html":{},"classes/DBWriteBuffer.html":{},"classes/DBWriter.html":{},"classes/DBWriterArray.html":{},"interfaces/NodeMethods.html":{},"interfaces/NodeParams.html":{},"classes/OnlineStatus.html":{}}}],["wrong",{"_index":749,"title":{},"body":{"components/ConnectionComponent.html":{}}}],["ws",{"_index":1396,"title":{},"body":{"interfaces/DesignActions.html":{},"components/DraftdetailComponent.html":{}}}],["ws.min_frames",{"_index":2087,"title":{},"body":{"components/DraftdetailComponent.html":{}}}],["ws.min_treadles",{"_index":2088,"title":{},"body":{"components/DraftdetailComponent.html":{}}}],["x",{"_index":346,"title":{},"body":{"interfaces/Bounds.html":{},"components/ConnectionComponent.html":{},"interfaces/Crossing.html":{},"classes/DBListener.html":{},"classes/DBListenerArray.html":{},"classes/DBNode.html":{},"classes/DBNodeArray.html":{},"classes/DBTwoWay.html":{},"classes/DBTwoWayArray.html":{},"classes/DBWriteBuffer.html":{},"classes/DBWriter.html":{},"classes/DBWriterArray.html":{},"interfaces/DesignActions.html":{},"injectables/MappingsService.html":{},"directives/MarqueeComponent.html":{},"components/MixerViewComponent.html":{},"interfaces/NodeMethods.html":{},"interfaces/NodeParams.html":{},"components/NoteComponent.html":{},"classes/OnlineStatus.html":{},"classes/OpSequencer.html":{},"interfaces/Point.html":{},"classes/Render.html":{},"directives/SelectionComponent.html":{},"injectables/SequencerService.html":{},"interfaces/Vertex.html":{},"injectables/ViewportService.html":{},"components/WeavingStateComponent.html":{},"interfaces/YarnPath.html":{}}}],["x*2",{"_index":3829,"title":{},"body":{"classes/Render.html":{}}}],["x,y",{"_index":3741,"title":{},"body":{"interfaces/Point.html":{}}}],["x:0",{"_index":784,"title":{},"body":{"components/ConnectionComponent.html":{},"components/MixerViewComponent.html":{},"components/NoteComponent.html":{},"injectables/ViewportService.html":{}}}],["x_pcent",{"_index":886,"title":{},"body":{"interfaces/Crossing.html":{},"interfaces/Vertex.html":{},"interfaces/YarnPath.html":{}}}],["y",{"_index":347,"title":{},"body":{"interfaces/Bounds.html":{},"components/ConnectionComponent.html":{},"interfaces/Crossing.html":{},"interfaces/DesignActions.html":{},"components/MixerViewComponent.html":{},"components/NoteComponent.html":{},"interfaces/Point.html":{},"classes/Render.html":{},"interfaces/Vertex.html":{},"injectables/ViewportService.html":{},"interfaces/YarnPath.html":{}}}],["y*2",{"_index":3831,"title":{},"body":{"classes/Render.html":{}}}],["y:0",{"_index":701,"title":{},"body":{"components/ConnectionComponent.html":{},"directives/MarqueeComponent.html":{},"components/MixerViewComponent.html":{},"components/NoteComponent.html":{},"directives/SelectionComponent.html":{},"injectables/ViewportService.html":{}}}],["y:number",{"_index":4242,"title":{},"body":{"injectables/ViewportService.html":{}}}],["y:p.y",{"_index":4253,"title":{},"body":{"injectables/ViewportService.html":{}}}],["y:y",{"_index":1494,"title":{},"body":{"interfaces/DesignActions.html":{},"injectables/ViewportService.html":{}}}],["yarn",{"_index":869,"title":{},"body":{"interfaces/Crossing.html":{},"components/DraftdetailComponent.html":{},"classes/Render.html":{},"interfaces/Vertex.html":{},"interfaces/YarnPath.html":{},"index.html":{},"miscellaneous/typealiases.html":{}}}],["yarncell",{"_index":4633,"title":{},"body":{"miscellaneous/typealiases.html":{}}}],["yarnmap",{"_index":4635,"title":{},"body":{"miscellaneous/typealiases.html":{}}}],["yarnpath",{"_index":899,"title":{"interfaces/YarnPath.html":{}},"body":{"interfaces/Crossing.html":{},"interfaces/Vertex.html":{},"interfaces/YarnPath.html":{}}}],["yarnsim",{"_index":4636,"title":{},"body":{"miscellaneous/typealiases.html":{}}}],["yes",{"_index":323,"title":{},"body":{"classes/BaseOp.html":{},"classes/DBTwoWayArray.html":{},"injectables/MappingsService.html":{},"classes/OpSequencer.html":{},"classes/Params.html":{},"classes/PedalConfig.html":{},"injectables/SequencerService.html":{},"miscellaneous/functions.html":{}}}],["z",{"_index":2847,"title":{},"body":{"components/MixerViewComponent.html":{},"components/NoteComponent.html":{},"classes/Render.html":{}}}],["zero",{"_index":111,"title":{},"body":{"classes/AbstractOpFactory.html":{},"classes/BaseOp.html":{},"classes/Branch.html":{},"classes/Bus.html":{},"interfaces/ChainOp.html":{},"classes/Merge.html":{},"interfaces/OpClassifier.html":{},"interfaces/OperationProperties.html":{},"interfaces/PairedOp.html":{},"interfaces/PedalEvent.html":{},"classes/Pipe.html":{},"interfaces/PlayerOp.html":{},"classes/Seed.html":{},"interfaces/TopologyDef.html":{}}}],["zndx",{"_index":1383,"title":{},"body":{"interfaces/DesignActions.html":{}}}],["zone.js",{"_index":4389,"title":{},"body":{"dependencies.html":{}}}],["zoom",{"_index":1441,"title":{},"body":{"interfaces/DesignActions.html":{},"modules/MixerModule.html":{},"components/MixerViewComponent.html":{},"components/NoteComponent.html":{},"modules/PlayerModule.html":{},"classes/Render.html":{},"overview.html":{}}}],["zoom_factor",{"_index":1451,"title":{},"body":{"interfaces/DesignActions.html":{},"components/NoteComponent.html":{}}}],["zoom_factor:number",{"_index":1446,"title":{},"body":{"interfaces/DesignActions.html":{},"components/NoteComponent.html":{}}}],["zoomchange",{"_index":2727,"title":{},"body":{"components/MixerViewComponent.html":{}}}],["zoomchange(e",{"_index":2752,"title":{},"body":{"components/MixerViewComponent.html":{}}}],["zoomchange(e:any",{"_index":2798,"title":{},"body":{"components/MixerViewComponent.html":{}}}],["zoomed",{"_index":2786,"title":{},"body":{"components/MixerViewComponent.html":{}}}],["zoomin",{"_index":3765,"title":{},"body":{"classes/Render.html":{}}}],["zoomout",{"_index":3766,"title":{},"body":{"classes/Render.html":{}}}]],"pipeline":["stemmer"]},
    "store": {"classes/AbstractOpFactory.html":{"url":"classes/AbstractOpFactory.html","title":"class - AbstractOpFactory","body":"\n                   \n\n\n\n\n\n\n\n\n\n\n\n\n\n  Classes\n  AbstractOpFactory\n\n\n\n        \n            Info\n        \n        \n            Source\n        \n\n\n\n    \n        \n            File\n        \n        \n            src/app/mixer/model/operation/topology.ts\n        \n\n\n\n\n\n\n            \n    Index\n    \n        \n\n                \n                    \n                        Methods\n                    \n                \n                \n                    \n                        \n                            \n                                AllRequired\n                            \n                            \n                                AllRequired\n                            \n                            \n                                AllRequired\n                            \n                            \n                                DraftsOptional\n                            \n                            \n                                DraftsOptional\n                            \n                            \n                                DraftsOptional\n                            \n                            \n                                NoDrafts\n                            \n                            \n                                NoDrafts\n                            \n                            \n                                NoDrafts\n                            \n                            \n                                NoParams\n                            \n                            \n                                NoParams\n                            \n                            \n                                NoParams\n                            \n                            \n                                ParamsOptional\n                            \n                            \n                                ParamsOptional\n                            \n                            \n                                ParamsOptional\n                            \n                        \n                    \n                \n\n\n\n\n\n        \n    \n\n\n\n\n            \n    \n    \n        Methods\n    \n    \n        \n            \n                \n                    \n                    \n                        AllRequired\n                        \n                    \n                \n            \n            \n                \nAllRequired(args: OpConstructorArgKeys)\n                \n            \n\n\n            \n                \n                    Defined in src/app/mixer/model/operation/topology.ts:345\n                \n            \n\n\n            \n                \n\n                    \n                        Parameters :\n                        \n                        \n                            \n                                \n                                    Name\n                                    Type\n                                    Optional\n                                \n                            \n                            \n                                \n                                    args\n                                    \n                                            OpConstructorArgKeys\n                                    \n\n                                    \n                                        No\n                                    \n\n\n                                \n                            \n                        \n                    \n                    \n                    \n                    \n                        Returns :         BaseOp\n\n                    \n                    \n                        \n                    \n                \n            \n        \n    \n    \n        \n            \n                \n                    \n                    \n                        AllRequired\n                        \n                    \n                \n            \n            \n                \nAllRequired(...args: OpConstructorArray)\n                \n            \n\n\n            \n                \n                    Defined in src/app/mixer/model/operation/topology.ts:346\n                \n            \n\n\n            \n                \n\n                    \n                        Parameters :\n                        \n                        \n                            \n                                \n                                    Name\n                                    Type\n                                    Optional\n                                \n                            \n                            \n                                \n                                    args\n                                    \n                                            OpConstructorArray\n                                    \n\n                                    \n                                        No\n                                    \n\n\n                                \n                            \n                        \n                    \n                    \n                    \n                    \n                        Returns :         BaseOp\n\n                    \n                    \n                        \n                    \n                \n            \n        \n    \n    \n        \n            \n                \n                    \n                    \n                        AllRequired\n                        \n                    \n                \n            \n            \n                \nAllRequired(...args: any)\n                \n            \n\n\n            \n                \n                    Defined in src/app/mixer/model/operation/topology.ts:347\n                \n            \n\n\n            \n                \n\n                    \n                        Parameters :\n                        \n                        \n                            \n                                \n                                    Name\n                                    Type\n                                    Optional\n                                \n                            \n                            \n                                \n                                    args\n                                    \n                                                any\n                                    \n\n                                    \n                                        No\n                                    \n\n\n                                \n                            \n                        \n                    \n                    \n                    \n                    \n                        Returns :         BaseOp\n\n                    \n                    \n                        \n                    \n                \n            \n        \n    \n    \n        \n            \n                \n                    \n                    \n                        DraftsOptional\n                        \n                    \n                \n            \n            \n                \nDraftsOptional(args: OpConstructorArgKeys)\n                \n            \n\n\n            \n                \n                    Defined in src/app/mixer/model/operation/topology.ts:329\n                \n            \n\n\n            \n                \n\n                    \n                        Parameters :\n                        \n                        \n                            \n                                \n                                    Name\n                                    Type\n                                    Optional\n                                \n                            \n                            \n                                \n                                    args\n                                    \n                                                OpConstructorArgKeys\n                                    \n\n                                    \n                                        No\n                                    \n\n\n                                \n                            \n                        \n                    \n                    \n                    \n                    \n                        Returns :         BaseOp\n\n                    \n                    \n                        \n                    \n                \n            \n        \n    \n    \n        \n            \n                \n                    \n                    \n                        DraftsOptional\n                        \n                    \n                \n            \n            \n                \nDraftsOptional(args: OpConstructorArray)\n                \n            \n\n\n            \n                \n                    Defined in src/app/mixer/model/operation/topology.ts:330\n                \n            \n\n\n            \n                \n\n                    \n                        Parameters :\n                        \n                        \n                            \n                                \n                                    Name\n                                    Type\n                                    Optional\n                                \n                            \n                            \n                                \n                                    args\n                                    \n                                                OpConstructorArray\n                                    \n\n                                    \n                                        No\n                                    \n\n\n                                \n                            \n                        \n                    \n                    \n                    \n                    \n                        Returns :         BaseOp\n\n                    \n                    \n                        \n                    \n                \n            \n        \n    \n    \n        \n            \n                \n                    \n                    \n                        DraftsOptional\n                        \n                    \n                \n            \n            \n                \nDraftsOptional(...args: any)\n                \n            \n\n\n            \n                \n                    Defined in src/app/mixer/model/operation/topology.ts:331\n                \n            \n\n\n            \n                \n\n                    \n                        Parameters :\n                        \n                        \n                            \n                                \n                                    Name\n                                    Type\n                                    Optional\n                                \n                            \n                            \n                                \n                                    args\n                                    \n                                                any\n                                    \n\n                                    \n                                        No\n                                    \n\n\n                                \n                            \n                        \n                    \n                    \n                    \n                    \n                        Returns :         BaseOp\n\n                    \n                    \n                        \n                    \n                \n            \n        \n    \n    \n        \n            \n                \n                    \n                    \n                        NoDrafts\n                        \n                    \n                \n            \n            \n                \nNoDrafts(args: OpConstructorArgKeys)\n                \n            \n\n\n            \n                \n                    Defined in src/app/mixer/model/operation/topology.ts:313\n                \n            \n\n\n            \n                \n\n                    \n                        Parameters :\n                        \n                        \n                            \n                                \n                                    Name\n                                    Type\n                                    Optional\n                                \n                            \n                            \n                                \n                                    args\n                                    \n                                                OpConstructorArgKeys\n                                    \n\n                                    \n                                        No\n                                    \n\n\n                                \n                            \n                        \n                    \n                    \n                    \n                    \n                        Returns :         BaseOp\n\n                    \n                    \n                        \n                    \n                \n            \n        \n    \n    \n        \n            \n                \n                    \n                    \n                        NoDrafts\n                        \n                    \n                \n            \n            \n                \nNoDrafts(args: OpConstructorArray)\n                \n            \n\n\n            \n                \n                    Defined in src/app/mixer/model/operation/topology.ts:314\n                \n            \n\n\n            \n                \n\n                    \n                        Parameters :\n                        \n                        \n                            \n                                \n                                    Name\n                                    Type\n                                    Optional\n                                \n                            \n                            \n                                \n                                    args\n                                    \n                                                OpConstructorArray\n                                    \n\n                                    \n                                        No\n                                    \n\n\n                                \n                            \n                        \n                    \n                    \n                    \n                    \n                        Returns :         BaseOp\n\n                    \n                    \n                        \n                    \n                \n            \n        \n    \n    \n        \n            \n                \n                    \n                    \n                        NoDrafts\n                        \n                    \n                \n            \n            \n                \nNoDrafts(...args: any)\n                \n            \n\n\n            \n                \n                    Defined in src/app/mixer/model/operation/topology.ts:315\n                \n            \n\n\n            \n                \n\n                    \n                        Parameters :\n                        \n                        \n                            \n                                \n                                    Name\n                                    Type\n                                    Optional\n                                \n                            \n                            \n                                \n                                    args\n                                    \n                                                any\n                                    \n\n                                    \n                                        No\n                                    \n\n\n                                \n                            \n                        \n                    \n                    \n                    \n                    \n                        Returns :         BaseOp\n\n                    \n                    \n                        \n                    \n                \n            \n        \n    \n    \n        \n            \n                \n                    \n                    \n                        NoParams\n                        \n                    \n                \n            \n            \n                \nNoParams(args: OpConstructorArgKeys)\n                \n            \n\n\n            \n                \n                    Defined in src/app/mixer/model/operation/topology.ts:321\n                \n            \n\n\n            \n                \n\n                    \n                        Parameters :\n                        \n                        \n                            \n                                \n                                    Name\n                                    Type\n                                    Optional\n                                \n                            \n                            \n                                \n                                    args\n                                    \n                                                OpConstructorArgKeys\n                                    \n\n                                    \n                                        No\n                                    \n\n\n                                \n                            \n                        \n                    \n                    \n                    \n                    \n                        Returns :         BaseOp\n\n                    \n                    \n                        \n                    \n                \n            \n        \n    \n    \n        \n            \n                \n                    \n                    \n                        NoParams\n                        \n                    \n                \n            \n            \n                \nNoParams(args: OpConstructorArray)\n                \n            \n\n\n            \n                \n                    Defined in src/app/mixer/model/operation/topology.ts:322\n                \n            \n\n\n            \n                \n\n                    \n                        Parameters :\n                        \n                        \n                            \n                                \n                                    Name\n                                    Type\n                                    Optional\n                                \n                            \n                            \n                                \n                                    args\n                                    \n                                                OpConstructorArray\n                                    \n\n                                    \n                                        No\n                                    \n\n\n                                \n                            \n                        \n                    \n                    \n                    \n                    \n                        Returns :         BaseOp\n\n                    \n                    \n                        \n                    \n                \n            \n        \n    \n    \n        \n            \n                \n                    \n                    \n                        NoParams\n                        \n                    \n                \n            \n            \n                \nNoParams(...args: any)\n                \n            \n\n\n            \n                \n                    Defined in src/app/mixer/model/operation/topology.ts:323\n                \n            \n\n\n            \n                \n\n                    \n                        Parameters :\n                        \n                        \n                            \n                                \n                                    Name\n                                    Type\n                                    Optional\n                                \n                            \n                            \n                                \n                                    args\n                                    \n                                                any\n                                    \n\n                                    \n                                        No\n                                    \n\n\n                                \n                            \n                        \n                    \n                    \n                    \n                    \n                        Returns :         BaseOp\n\n                    \n                    \n                        \n                    \n                \n            \n        \n    \n    \n        \n            \n                \n                    \n                    \n                        ParamsOptional\n                        \n                    \n                \n            \n            \n                \nParamsOptional(args: OpConstructorArgKeys)\n                \n            \n\n\n            \n                \n                    Defined in src/app/mixer/model/operation/topology.ts:337\n                \n            \n\n\n            \n                \n\n                    \n                        Parameters :\n                        \n                        \n                            \n                                \n                                    Name\n                                    Type\n                                    Optional\n                                \n                            \n                            \n                                \n                                    args\n                                    \n                                                OpConstructorArgKeys\n                                    \n\n                                    \n                                        No\n                                    \n\n\n                                \n                            \n                        \n                    \n                    \n                    \n                    \n                        Returns :         BaseOp\n\n                    \n                    \n                        \n                    \n                \n            \n        \n    \n    \n        \n            \n                \n                    \n                    \n                        ParamsOptional\n                        \n                    \n                \n            \n            \n                \nParamsOptional(args: OpConstructorArray)\n                \n            \n\n\n            \n                \n                    Defined in src/app/mixer/model/operation/topology.ts:338\n                \n            \n\n\n            \n                \n\n                    \n                        Parameters :\n                        \n                        \n                            \n                                \n                                    Name\n                                    Type\n                                    Optional\n                                \n                            \n                            \n                                \n                                    args\n                                    \n                                                OpConstructorArray\n                                    \n\n                                    \n                                        No\n                                    \n\n\n                                \n                            \n                        \n                    \n                    \n                    \n                    \n                        Returns :         BaseOp\n\n                    \n                    \n                        \n                    \n                \n            \n        \n    \n    \n        \n            \n                \n                    \n                    \n                        ParamsOptional\n                        \n                    \n                \n            \n            \n                \nParamsOptional(...args: any)\n                \n            \n\n\n            \n                \n                    Defined in src/app/mixer/model/operation/topology.ts:339\n                \n            \n\n\n            \n                \n\n                    \n                        Parameters :\n                        \n                        \n                            \n                                \n                                    Name\n                                    Type\n                                    Optional\n                                \n                            \n                            \n                                \n                                    args\n                                    \n                                                any\n                                    \n\n                                    \n                                        No\n                                    \n\n\n                                \n                            \n                        \n                    \n                    \n                    \n                    \n                        Returns :         BaseOp\n\n                    \n                    \n                        \n                    \n                \n            \n        \n    \n\n\n\n\n\n\n    \n\n\n    \n        import { Draft } from \"../../../core/model/datatypes\";\nimport { ParamValue, OperationParam as OpParam, getParamValues } from \"./params\";\nimport { OperationInlet as OpInlet, InletDrafts } from \"./inlets\";\n\n/**\n* At its heart, an Operation is a very fancy function that outputs a Draft or several Drafts.\n* The function itself is perform(), and the Operation can take inputs in the form of \n* Drafts (inlets) or Parameters (params).\n*/\n\n/** \n* Types that an Operation's perform() function can handlle as input/output\n*/\n\n/** @type Union of types that can serve as input to Operation perform() functions. */\nexport type PerformDraftInput = InletDrafts | Array | Draft | null;\n\ntype MultiDraftInput = InletDrafts | Array;\n\n/** @type Union of types that Operation perform() functions can output. */\nexport type PerformOutput = Array | Draft;\n\n/**\n * OPERATION TOPOLOGY\n * Topology refers to the shape of the Operation in terms of its\n * number of input and output Drafts. Classifies Operations.\n */\n\nexport const TopologyName = {\n  pipe: 'pipe', \n  seed: 'seed', \n  merge: 'merge', \n  branch: 'branch', \n  bus: 'bus'\n} as const;\nexport type TopologyName = keyof typeof TopologyName;\n\ninterface TopologyDef { type: TopologyName; input: PerformDraftInput; output: PerformOutput; };\n\n/**\n* @class\n* Operation that can generate a draft with no inputs, may take an optional input\n* @method perform OpPerform function: \n* - INPUT: zero or one Draft\n* - OUTPUT: exactly one Draft\n*/\nexport class Seed implements TopologyDef { type: 'seed'; input: Draft | null; output: Draft; };\n\n/**\n* @class\n* Operation that takes one input and generates one output draft. \n* @method perform OpPerform function: \n* - INPUT: exactly one Draft\n* - OUTPUT: exactly one Draft\n*/\nexport class Pipe implements TopologyDef { type: 'pipe'; input: Draft; output: Draft; };\n\n/**\n* @class\n* Operation that takes many (N) inputs and generates one output draft.\n* @method perform OpPerform function: \n* - INPUT: Array of Drafts\n* - OUTPUT: exactly one Draft\n*/\nexport class Merge implements TopologyDef { type: 'merge'; input: InletDrafts | Array; output: Draft; };\n\n/**\n* @class\n* Operation that takes one input and generates many (N) output drafts.\n* @method perform OpPerform function:\n* - INPUT: exactly one Draft\n* - OUTPUT: Array of Drafts\n*/\nexport class Branch implements TopologyDef { type: 'branch'; input: Draft; output: Array; };\n\n/**\n* CURRENTLY UNUSED\n* @class\n* Operation that takes many (N) inputs and generates many (M) output drafts.\n* Number of inputs does not necessarily match number of outputs (N ?= M).\n* @method perform OpPerform function:  \n* - INPUT: Array of Drafts\n* - OUTPUT: Array of Drafts\n*/\nexport class Bus implements TopologyDef { type: 'bus'; input: Array | InletDrafts; output: Array; };\n\ntype TopologyIndex = {\n  'seed': Seed,\n  'pipe': Pipe,\n  'merge': Merge,\n  'branch': Branch,\n  'bus': Bus\n}\ntype OpTopology = TopologyIndex[TopologyName];\n\n/**\n * OPERATION CONSTRAINT\n * A Constraint on an Operation classifies it based on its\n * input requirements (both Drafts and Params).\n */\n\nexport const ConstraintOptions = {\n  req: 'req', \n  opt: 'opt', \n  none: 'none'\n} as const;\nexport type ConstraintOptions = keyof typeof ConstraintOptions;\n\nexport const ConstraintName = {\n  no_drafts: { input_drafts: 'none', input_params: 'req' }, \n  no_params: { input_drafts: 'req', input_params: 'none' }, \n  drafts_opt: { input_drafts: 'opt', input_params: 'req' }, \n  params_opt: { input_drafts: 'req', input_params: 'opt' }, \n  all_req: {input_drafts: 'req', input_params: 'req' },\n} as const;\ntype ConstraintName = keyof typeof ConstraintName;\n\ntype ConstraintDefs = {\n  [C in keyof typeof ConstraintName]: {\n    constraint: C;\n    input_drafts: typeof ConstraintName[C][\"input_drafts\"];\n    input_params: typeof ConstraintName[C][\"input_params\"];\n  }\n}\n\nexport type NoDrafts = ConstraintDefs[\"no_drafts\"];\nexport type NoParams = ConstraintDefs[\"no_params\"];\nexport type DraftsOptional = ConstraintDefs[\"drafts_opt\"];\nexport type ParamsOptional = ConstraintDefs[\"params_opt\"];\nexport type AllRequired = ConstraintDefs[\"all_req\"];\n\ntype ConstraintIndex = {\n  'no_drafts': NoDrafts, // does not accept input drafts\n  'no_params': NoParams, // does not accept params\n  'drafts_opt': DraftsOptional, // can take no params -- has default values\n  'params_opt': ParamsOptional, // can take zero input drafts\n  'all_req': AllRequired, // both inputs and params required\n}\ntype OpConstraint = ConstraintIndex[ConstraintName]; \n\n/** \n* Generic types for perform() functions, describing options \n* for input draft multiplicity (0, 1, N) and param requirement \n*/\n\ntype NoDraftsPerform = {(params: Array): Topo[\"output\"]};\ntype NoParamsPerform = {(inputs: Topo[\"input\"]): Topo[\"output\"]};\ntype ParamsOptionalPerform = {(inputs: Topo[\"input\"], params?: Array): Topo[\"output\"]}; \ntype DraftsOptionalPerform = {(params: Array, inputs?: Topo[\"input\"]): Topo[\"output\"]};  \ntype AllRequiredPerform = {(inputs: Topo[\"input\"], params: Array): Topo[\"output\"]};  \n\ntype PerformCallSigs = {\n  no_drafts: { [Topo in keyof TopologyIndex]: NoDraftsPerform; },\n  no_params: { [Topo in keyof TopologyIndex]: NoParamsPerform; },\n  drafts_opt: { [Topo in keyof TopologyIndex]: DraftsOptionalPerform; },\n  params_opt: { [Topo in keyof TopologyIndex]: ParamsOptionalPerform; },\n  all_req: { [Topo in keyof TopologyIndex]: AllRequiredPerform; }\n}\n\n/**\n * @interface OpClassifier\n * Key-value pairs for an Operation's Topology and Constraint.\n */\ninterface OpClassifier {\n  type: Topo[\"type\"] | '';\n  input_drafts: Constraint[\"input_drafts\"] | '';\n  input_params: Constraint[\"input_params\"] | '';\n}\n\n/** @type User-defined descriptive strings for any Operation. */\ntype OperationDescriptors = { name: string, displayname: string, dx: string };\n\n/**\n* A standard Operation's metadata -- i.e. everything not the perform() function\n* @param name the internal name of this opearation (CHANGING THESE WILL BREAK LEGACY VERSIONS)\n* @param displayname the name to show upon this operation\n* @param dx the description of this operation\n* @param max_inputs the maximum number of inputs (drafts) allowed directly into this operation\n* @param params the parameters associated with this operation\n* @method perform an OpPerform function\n*/\nexport interface OperationProperties extends OperationDescriptors {\n  max_inputs: number,\n  default_params?: Array;\n  params: Array,\n}\n\n/**\n * @type A function that serves as the perform() method for an Operation. \n * This generic type requires two type parameters:\n * @param Topo one of the PerformInput types\n * @param Constraint one of the PerformOutput types\n *\n * OpPerform to give call signature for perform() function \n * Topo  = Seed | Pipe | Merge | Branch | Bus\n * Constraint = NoDrafts | NoParams | DraftsOptional | ParamsOptional | AllRequired\n */\nexport type OpPerform = PerformCallSigs[Constraint[\"constraint\"]][Topo[\"type\"]];\n// type PerformArgs = Parameters>;\n\n/** TODO doublecheck inlets have been added correctly (fields for input drafts) */\nexport class BaseOp implements OperationProperties {\n  name: string;\n  old_names: Array;\n  displayname: string;\n  dx: string;\n  params: Array;\n  inlets: Array;\n  default_params?: Array;\n  max_inputs: number;\n  classifier: OpClassifier;\n  perform: OpPerform;\n\n  /** @constructor create an Operation using an object literal (keys and values) */\n  constructor (args: OpConstructorArgs);\n  /** @constructor create an Operation using direct arguments in the constructor (values only) */\n  constructor (...args: OpConstructorArray);\n  constructor (name: string, displayname: string, dx: string, perform: OpPerform);\n  constructor (name: string, displayname: string, dx: string, params: Array, perform: OpPerform);\n  constructor (nameOrArgs: any, displayname?: string, dx?: string, performOrParams?: OpPerform | Array, performWithParams?: OpPerform) {\n    // console.log((nameOrArgs.name != undefined));\n    this.classifier = { type: '', input_drafts: '', input_params: '' };\n    if (nameOrArgs.name) {\n      let args = nameOrArgs;\n      this.name = args.name;\n      this.displayname = args.displayname;\n      this.dx = args.dx;\n      this.perform = args.perform;\n      if (args.params) this.params = args.params;\n      else this.params = [];\n      if (args.inlets) this.inlets = args.inlets;\n      else this.inlets = [];\n    } else {\n      this.name = nameOrArgs;\n      this.displayname = displayname;\n      this.dx = dx;\n      if (performWithParams) {\n        let params = > performOrParams;\n        this.params = params;\n        this.default_params = getParamValues(params);\n        this.perform = performWithParams;\n      } else {\n        this.params = [];\n        this.perform = > performOrParams;\n      }\n    }\n  }\n\n  constrain(c: ConstraintName): void {\n    if (c == 'no_drafts') { this.max_inputs = 0; this.inlets = []; }\n    this.classifier.input_drafts = ConstraintName[c][\"input_drafts\"]; \n    this.classifier.input_params = ConstraintName[c][\"input_params\"];\n  }\n\n  type(t: TopologyName): BaseOp {\n    this.classifier.type = t;\n    return this;\n  }\n}\n\ntype ConstructorArgKeysIndex = {\n  [C in keyof ConstraintIndex]: C extends \"no_params\" ? {\n    [T in keyof TopologyIndex]: {\n      name: string, displayname: string, dx: string, old_names: string[],\n      inlets: OpInlet[], perform: OpPerform\n    }\n  } : C extends \"no_drafts\" ? {\n    [T in keyof TopologyIndex]: {\n      name: string, displayname: string, dx: string, old_names: string[],\n      params: OpParam[], perform: OpPerform\n    }\n  } : {\n    [T in keyof TopologyIndex]: {\n      name: string, displayname: string, dx: string, old_names: string[],\n      params: OpParam[], inlets: OpInlet[],\n      perform: OpPerform\n    }\n  }\n}\n\ntype ConstructorArrayIndex = {\n  [C in keyof ConstraintIndex]: C extends \"no_params\" ? {\n    [T in keyof TopologyIndex]: [\n      name: string, displayname: string, dx: string, old_names: string[],\n      inlets: OpInlet[], perform: OpPerform\n    ]\n  } : C extends \"no_drafts\" ? {\n    [T in keyof TopologyIndex]: [\n      name: string, displayname: string, dx: string, old_names: string[],\n      params: OpParam[], perform: OpPerform\n    ]\n  } : {\n    [T in keyof TopologyIndex]: [\n      name: string, displayname: string, dx: string, old_names: string[],\n      params: OpParam[], inlets: OpInlet[],\n      perform: OpPerform\n    ]\n  }\n}\n\ntype OpConstructorArgKeys = \nConstructorArgKeysIndex[Constraint[\"constraint\"]][Topo[\"type\"]];\n\ntype OpConstructorArray = \nConstructorArrayIndex[Constraint[\"constraint\"]][Topo[\"type\"]];\n\ntype OpConstructorArgs = \nOpConstructorArgKeys | OpConstructorArray;\n\n// use factory design pattern to apply classifiers to BaseOp?? Is this too convoluted\n// https://refactoring.guru/design-patterns/abstract-factory/typescript\nclass AbstractOpFactory {\n  NoDrafts(args: OpConstructorArgKeys): BaseOp;\n  NoDrafts(...args: OpConstructorArray): BaseOp;\n  NoDrafts(...args: any) {\n    let op = new BaseOp(...args);\n    op.constrain(\"no_drafts\");\n    return op;\n  }\n\n  NoParams(args: OpConstructorArgKeys): BaseOp;\n  NoParams(...args: OpConstructorArray): BaseOp;\n  NoParams(...args: any) {\n    let op = new BaseOp(...args);\n    op.constrain(\"no_params\");\n    return op;\n  }\n\n  DraftsOptional(args: OpConstructorArgKeys): BaseOp;\n  DraftsOptional(...args: OpConstructorArray): BaseOp;\n  DraftsOptional(...args: any) {\n    let op = new BaseOp(...args);\n    op.constrain(\"drafts_opt\");\n    return op;\n  }\n\n  ParamsOptional(args: OpConstructorArgKeys): BaseOp;\n  ParamsOptional(...args: OpConstructorArray): BaseOp;\n  ParamsOptional(...args: any) {\n    let op = new BaseOp(...args);\n    op.constrain(\"params_opt\");\n    return op;\n  }\n\n  AllRequired(args: OpConstructorArgKeys): BaseOp;\n  AllRequired(...args: OpConstructorArray): BaseOp;\n  AllRequired(...args: any) {\n    let op = new BaseOp(...args);\n    op.constrain(\"all_req\");\n    return op;\n  }\n}\n\n// combine with mix-ins design pattern (link: TypeScript docs website)\nfunction makeTopoFactory(topo: TopologyName) {\n  return class TopologyFactory extends AbstractOpFactory {\n    static base = new AbstractOpFactory();\n    \n    static NoDrafts(args: OpConstructorArgKeys): BaseOp;\n    static NoDrafts(...args: OpConstructorArray): BaseOp;\n    static NoDrafts(...args: any) {\n      return this.base.NoDrafts(...args).type(topo);\n    }\n\n    static NoParams(args: OpConstructorArgKeys): BaseOp;\n    static NoParams(...args: OpConstructorArray): BaseOp;\n    static NoParams(...args: any) {\n      return this.base.NoParams(...args).type(topo);\n    }\n\n    static DraftsOptional(args: OpConstructorArgKeys): BaseOp;\n    static DraftsOptional(...args: OpConstructorArray): BaseOp;\n    static DraftsOptional(...args: any) {\n      return this.base.DraftsOptional(...args).type(topo);\n    }\n\n    static ParamsOptional(args: OpConstructorArgKeys): BaseOp;\n    static ParamsOptional(...args: OpConstructorArray): BaseOp;\n    static ParamsOptional(...args: any) {\n      return this.base.ParamsOptional(...args).type(topo);\n    }\n\n    static AllRequired(args: OpConstructorArgKeys): BaseOp;\n    static AllRequired(...args: OpConstructorArray): BaseOp;\n    static AllRequired(...args: any) {\n      return this.base.AllRequired(...args).type(topo);\n    }\n  }\n}\n\nexport const OpFactories = {\n  Seed: makeTopoFactory(\"seed\"),\n  Pipe: makeTopoFactory(\"pipe\"),\n  Merge: makeTopoFactory(\"merge\"),\n  Branch: makeTopoFactory(\"merge\"),\n  Bus: makeTopoFactory(\"bus\"),\n}\n\n// export const SeedOperation = makeTopoFactory(\"seed\");\n// export const PipeOperation = makeTopoFactory(\"pipe\");\n// export const MergeOperation = makeTopoFactory(\"merge\");\n// export const BranchOperation = makeTopoFactory(\"merge\");\n// export const BusOperation = makeTopoFactory(\"bus\");\n\ntype TopologyOpIndex = {\n  [T in keyof TopologyIndex]: {\n    [C in keyof ConstraintIndex]: BaseOp;\n  }\n}\n\nexport type BuildableOperation = TopologyOpIndex[TopologyName][ConstraintName];\n    \n\n\n\n\n\n\n\n\n\n\n                   \n    \n         results matching \"\"\n        \n    \n    \n        No results matching \"\"\n    \n\n"},"classes/BaseOp.html":{"url":"classes/BaseOp.html","title":"class - BaseOp","body":"\n                   \n\n\n\n\n\n\n\n\n\n\n\n\n\n  Classes\n  BaseOp\n\n\n\n        \n            Info\n        \n        \n            Source\n        \n\n\n\n    \n        \n            File\n        \n        \n            src/app/mixer/model/operation/topology.ts\n        \n\n\n            \n                Description\n            \n            \n                TODO doublecheck inlets have been added correctly (fields for input drafts)\n\n            \n\n\n            \n                Implements\n            \n            \n                            OperationProperties\n            \n\n\n            \n    Index\n    \n        \n                \n                    \n                        Properties\n                    \n                \n                \n                    \n                        \n                            \n                                classifier\n                            \n                            \n                                    Optional\n                                default_params\n                            \n                            \n                                displayname\n                            \n                            \n                                dx\n                            \n                            \n                                inlets\n                            \n                            \n                                max_inputs\n                            \n                            \n                                name\n                            \n                            \n                                old_names\n                            \n                            \n                                params\n                            \n                            \n                                perform\n                            \n                        \n                    \n                \n\n                \n                    \n                        Methods\n                    \n                \n                \n                    \n                        \n                            \n                                constrain\n                            \n                            \n                                type\n                            \n                        \n                    \n                \n\n\n\n\n\n        \n    \n\n\n            \n    Constructor\n        \n            \n                \n                    \nconstructor(nameOrArgs: any, displayname?: string, dx?: string, performOrParams?: OpPerform | Array, performWithParams?: OpPerform)\n                    \n                \n                        \n                            \n                                Defined in src/app/mixer/model/operation/topology.ts:219\n                            \n                        \n\n                \n                    \n                            \n                                    Parameters :\n                                    \n                                        \n                                            \n                                                Name\n                                                    Type\n                                                Optional\n                                            \n                                        \n                                        \n                                                \n                                                        nameOrArgs\n                                                  \n                                                        \n                                                                        any\n                                                        \n                                                  \n                                                    \n                                                            No\n                                                    \n                                                    \n                                                \n                                                \n                                                        displayname\n                                                  \n                                                        \n                                                                        string\n                                                        \n                                                  \n                                                    \n                                                            Yes\n                                                    \n                                                    \n                                                \n                                                \n                                                        dx\n                                                  \n                                                        \n                                                                        string\n                                                        \n                                                  \n                                                    \n                                                            Yes\n                                                    \n                                                    \n                                                \n                                                \n                                                        performOrParams\n                                                  \n                                                        \n                                                                        OpPerform | Array\n                                                        \n                                                  \n                                                    \n                                                            Yes\n                                                    \n                                                    \n                                                \n                                                \n                                                        performWithParams\n                                                  \n                                                        \n                                                                        OpPerform\n                                                        \n                                                  \n                                                    \n                                                            Yes\n                                                    \n                                                    \n                                                \n                                        \n                                    \n                            \n                    \n                \n            \n        \n\n\n            \n    \n    \n        Properties\n    \n    \n        \n            \n                \n                    \n                    \n                        classifier\n                        \n                    \n                \n            \n                \n                    \n                        Type :         OpClassifier\n\n                    \n                \n                    \n                        \n                                Defined in src/app/mixer/model/operation/topology.ts:211\n                        \n                    \n\n\n        \n    \n    \n        \n            \n                \n                    \n                    \n                            Optional\n                        default_params\n                        \n                    \n                \n            \n                \n                    \n                        Type :         Array\n\n                    \n                \n                    \n                        \n                                Defined in src/app/mixer/model/operation/topology.ts:209\n                        \n                    \n\n\n        \n    \n    \n        \n            \n                \n                    \n                    \n                        displayname\n                        \n                    \n                \n            \n                \n                    \n                        Type :         string\n\n                    \n                \n                    \n                        \n                                Defined in src/app/mixer/model/operation/topology.ts:205\n                        \n                    \n\n\n        \n    \n    \n        \n            \n                \n                    \n                    \n                        dx\n                        \n                    \n                \n            \n                \n                    \n                        Type :         string\n\n                    \n                \n                    \n                        \n                                Defined in src/app/mixer/model/operation/topology.ts:206\n                        \n                    \n\n\n        \n    \n    \n        \n            \n                \n                    \n                    \n                        inlets\n                        \n                    \n                \n            \n                \n                    \n                        Type :     Array\n\n                    \n                \n                    \n                        \n                                Defined in src/app/mixer/model/operation/topology.ts:208\n                        \n                    \n\n\n        \n    \n    \n        \n            \n                \n                    \n                    \n                        max_inputs\n                        \n                    \n                \n            \n                \n                    \n                        Type :         number\n\n                    \n                \n                    \n                        \n                                Defined in src/app/mixer/model/operation/topology.ts:210\n                        \n                    \n\n\n        \n    \n    \n        \n            \n                \n                    \n                    \n                        name\n                        \n                    \n                \n            \n                \n                    \n                        Type :         string\n\n                    \n                \n                    \n                        \n                                Defined in src/app/mixer/model/operation/topology.ts:203\n                        \n                    \n\n\n        \n    \n    \n        \n            \n                \n                    \n                    \n                        old_names\n                        \n                    \n                \n            \n                \n                    \n                        Type :     Array\n\n                    \n                \n                    \n                        \n                                Defined in src/app/mixer/model/operation/topology.ts:204\n                        \n                    \n\n\n        \n    \n    \n        \n            \n                \n                    \n                    \n                        params\n                        \n                    \n                \n            \n                \n                    \n                        Type :     Array\n\n                    \n                \n                    \n                        \n                                Defined in src/app/mixer/model/operation/topology.ts:207\n                        \n                    \n\n\n        \n    \n    \n        \n            \n                \n                    \n                    \n                        perform\n                        \n                    \n                \n            \n                \n                    \n                        Type :         OpPerform\n\n                    \n                \n                    \n                        \n                                Defined in src/app/mixer/model/operation/topology.ts:212\n                        \n                    \n\n\n        \n    \n\n\n            \n    \n    \n        Methods\n    \n    \n        \n            \n                \n                    \n                    \n                        constrain\n                        \n                    \n                \n            \n            \n                \nconstrain(c: ConstraintName)\n                \n            \n\n\n            \n                \n                    Defined in src/app/mixer/model/operation/topology.ts:249\n                \n            \n\n\n            \n                \n\n                    \n                        Parameters :\n                        \n                        \n                            \n                                \n                                    Name\n                                    Type\n                                    Optional\n                                \n                            \n                            \n                                \n                                    c\n                                    \n                                                ConstraintName\n                                    \n\n                                    \n                                        No\n                                    \n\n\n                                \n                            \n                        \n                    \n                    \n                    \n                    \n                        Returns :         void\n\n                    \n                    \n                        \n                    \n                \n            \n        \n    \n    \n        \n            \n                \n                    \n                    \n                        type\n                        \n                    \n                \n            \n            \n                \ntype(t: TopologyName)\n                \n            \n\n\n            \n                \n                    Defined in src/app/mixer/model/operation/topology.ts:255\n                \n            \n\n\n            \n                \n\n                    \n                        Parameters :\n                        \n                        \n                            \n                                \n                                    Name\n                                    Type\n                                    Optional\n                                \n                            \n                            \n                                \n                                    t\n                                    \n                                                TopologyName\n                                    \n\n                                    \n                                        No\n                                    \n\n\n                                \n                            \n                        \n                    \n                    \n                    \n                    \n                        Returns :         BaseOp\n\n                    \n                    \n                        \n                    \n                \n            \n        \n    \n\n\n\n\n\n\n    \n\n\n    \n        import { Draft } from \"../../../core/model/datatypes\";\nimport { ParamValue, OperationParam as OpParam, getParamValues } from \"./params\";\nimport { OperationInlet as OpInlet, InletDrafts } from \"./inlets\";\n\n/**\n* At its heart, an Operation is a very fancy function that outputs a Draft or several Drafts.\n* The function itself is perform(), and the Operation can take inputs in the form of \n* Drafts (inlets) or Parameters (params).\n*/\n\n/** \n* Types that an Operation's perform() function can handlle as input/output\n*/\n\n/** @type Union of types that can serve as input to Operation perform() functions. */\nexport type PerformDraftInput = InletDrafts | Array | Draft | null;\n\ntype MultiDraftInput = InletDrafts | Array;\n\n/** @type Union of types that Operation perform() functions can output. */\nexport type PerformOutput = Array | Draft;\n\n/**\n * OPERATION TOPOLOGY\n * Topology refers to the shape of the Operation in terms of its\n * number of input and output Drafts. Classifies Operations.\n */\n\nexport const TopologyName = {\n  pipe: 'pipe', \n  seed: 'seed', \n  merge: 'merge', \n  branch: 'branch', \n  bus: 'bus'\n} as const;\nexport type TopologyName = keyof typeof TopologyName;\n\ninterface TopologyDef { type: TopologyName; input: PerformDraftInput; output: PerformOutput; };\n\n/**\n* @class\n* Operation that can generate a draft with no inputs, may take an optional input\n* @method perform OpPerform function: \n* - INPUT: zero or one Draft\n* - OUTPUT: exactly one Draft\n*/\nexport class Seed implements TopologyDef { type: 'seed'; input: Draft | null; output: Draft; };\n\n/**\n* @class\n* Operation that takes one input and generates one output draft. \n* @method perform OpPerform function: \n* - INPUT: exactly one Draft\n* - OUTPUT: exactly one Draft\n*/\nexport class Pipe implements TopologyDef { type: 'pipe'; input: Draft; output: Draft; };\n\n/**\n* @class\n* Operation that takes many (N) inputs and generates one output draft.\n* @method perform OpPerform function: \n* - INPUT: Array of Drafts\n* - OUTPUT: exactly one Draft\n*/\nexport class Merge implements TopologyDef { type: 'merge'; input: InletDrafts | Array; output: Draft; };\n\n/**\n* @class\n* Operation that takes one input and generates many (N) output drafts.\n* @method perform OpPerform function:\n* - INPUT: exactly one Draft\n* - OUTPUT: Array of Drafts\n*/\nexport class Branch implements TopologyDef { type: 'branch'; input: Draft; output: Array; };\n\n/**\n* CURRENTLY UNUSED\n* @class\n* Operation that takes many (N) inputs and generates many (M) output drafts.\n* Number of inputs does not necessarily match number of outputs (N ?= M).\n* @method perform OpPerform function:  \n* - INPUT: Array of Drafts\n* - OUTPUT: Array of Drafts\n*/\nexport class Bus implements TopologyDef { type: 'bus'; input: Array | InletDrafts; output: Array; };\n\ntype TopologyIndex = {\n  'seed': Seed,\n  'pipe': Pipe,\n  'merge': Merge,\n  'branch': Branch,\n  'bus': Bus\n}\ntype OpTopology = TopologyIndex[TopologyName];\n\n/**\n * OPERATION CONSTRAINT\n * A Constraint on an Operation classifies it based on its\n * input requirements (both Drafts and Params).\n */\n\nexport const ConstraintOptions = {\n  req: 'req', \n  opt: 'opt', \n  none: 'none'\n} as const;\nexport type ConstraintOptions = keyof typeof ConstraintOptions;\n\nexport const ConstraintName = {\n  no_drafts: { input_drafts: 'none', input_params: 'req' }, \n  no_params: { input_drafts: 'req', input_params: 'none' }, \n  drafts_opt: { input_drafts: 'opt', input_params: 'req' }, \n  params_opt: { input_drafts: 'req', input_params: 'opt' }, \n  all_req: {input_drafts: 'req', input_params: 'req' },\n} as const;\ntype ConstraintName = keyof typeof ConstraintName;\n\ntype ConstraintDefs = {\n  [C in keyof typeof ConstraintName]: {\n    constraint: C;\n    input_drafts: typeof ConstraintName[C][\"input_drafts\"];\n    input_params: typeof ConstraintName[C][\"input_params\"];\n  }\n}\n\nexport type NoDrafts = ConstraintDefs[\"no_drafts\"];\nexport type NoParams = ConstraintDefs[\"no_params\"];\nexport type DraftsOptional = ConstraintDefs[\"drafts_opt\"];\nexport type ParamsOptional = ConstraintDefs[\"params_opt\"];\nexport type AllRequired = ConstraintDefs[\"all_req\"];\n\ntype ConstraintIndex = {\n  'no_drafts': NoDrafts, // does not accept input drafts\n  'no_params': NoParams, // does not accept params\n  'drafts_opt': DraftsOptional, // can take no params -- has default values\n  'params_opt': ParamsOptional, // can take zero input drafts\n  'all_req': AllRequired, // both inputs and params required\n}\ntype OpConstraint = ConstraintIndex[ConstraintName]; \n\n/** \n* Generic types for perform() functions, describing options \n* for input draft multiplicity (0, 1, N) and param requirement \n*/\n\ntype NoDraftsPerform = {(params: Array): Topo[\"output\"]};\ntype NoParamsPerform = {(inputs: Topo[\"input\"]): Topo[\"output\"]};\ntype ParamsOptionalPerform = {(inputs: Topo[\"input\"], params?: Array): Topo[\"output\"]}; \ntype DraftsOptionalPerform = {(params: Array, inputs?: Topo[\"input\"]): Topo[\"output\"]};  \ntype AllRequiredPerform = {(inputs: Topo[\"input\"], params: Array): Topo[\"output\"]};  \n\ntype PerformCallSigs = {\n  no_drafts: { [Topo in keyof TopologyIndex]: NoDraftsPerform; },\n  no_params: { [Topo in keyof TopologyIndex]: NoParamsPerform; },\n  drafts_opt: { [Topo in keyof TopologyIndex]: DraftsOptionalPerform; },\n  params_opt: { [Topo in keyof TopologyIndex]: ParamsOptionalPerform; },\n  all_req: { [Topo in keyof TopologyIndex]: AllRequiredPerform; }\n}\n\n/**\n * @interface OpClassifier\n * Key-value pairs for an Operation's Topology and Constraint.\n */\ninterface OpClassifier {\n  type: Topo[\"type\"] | '';\n  input_drafts: Constraint[\"input_drafts\"] | '';\n  input_params: Constraint[\"input_params\"] | '';\n}\n\n/** @type User-defined descriptive strings for any Operation. */\ntype OperationDescriptors = { name: string, displayname: string, dx: string };\n\n/**\n* A standard Operation's metadata -- i.e. everything not the perform() function\n* @param name the internal name of this opearation (CHANGING THESE WILL BREAK LEGACY VERSIONS)\n* @param displayname the name to show upon this operation\n* @param dx the description of this operation\n* @param max_inputs the maximum number of inputs (drafts) allowed directly into this operation\n* @param params the parameters associated with this operation\n* @method perform an OpPerform function\n*/\nexport interface OperationProperties extends OperationDescriptors {\n  max_inputs: number,\n  default_params?: Array;\n  params: Array,\n}\n\n/**\n * @type A function that serves as the perform() method for an Operation. \n * This generic type requires two type parameters:\n * @param Topo one of the PerformInput types\n * @param Constraint one of the PerformOutput types\n *\n * OpPerform to give call signature for perform() function \n * Topo  = Seed | Pipe | Merge | Branch | Bus\n * Constraint = NoDrafts | NoParams | DraftsOptional | ParamsOptional | AllRequired\n */\nexport type OpPerform = PerformCallSigs[Constraint[\"constraint\"]][Topo[\"type\"]];\n// type PerformArgs = Parameters>;\n\n/** TODO doublecheck inlets have been added correctly (fields for input drafts) */\nexport class BaseOp implements OperationProperties {\n  name: string;\n  old_names: Array;\n  displayname: string;\n  dx: string;\n  params: Array;\n  inlets: Array;\n  default_params?: Array;\n  max_inputs: number;\n  classifier: OpClassifier;\n  perform: OpPerform;\n\n  /** @constructor create an Operation using an object literal (keys and values) */\n  constructor (args: OpConstructorArgs);\n  /** @constructor create an Operation using direct arguments in the constructor (values only) */\n  constructor (...args: OpConstructorArray);\n  constructor (name: string, displayname: string, dx: string, perform: OpPerform);\n  constructor (name: string, displayname: string, dx: string, params: Array, perform: OpPerform);\n  constructor (nameOrArgs: any, displayname?: string, dx?: string, performOrParams?: OpPerform | Array, performWithParams?: OpPerform) {\n    // console.log((nameOrArgs.name != undefined));\n    this.classifier = { type: '', input_drafts: '', input_params: '' };\n    if (nameOrArgs.name) {\n      let args = nameOrArgs;\n      this.name = args.name;\n      this.displayname = args.displayname;\n      this.dx = args.dx;\n      this.perform = args.perform;\n      if (args.params) this.params = args.params;\n      else this.params = [];\n      if (args.inlets) this.inlets = args.inlets;\n      else this.inlets = [];\n    } else {\n      this.name = nameOrArgs;\n      this.displayname = displayname;\n      this.dx = dx;\n      if (performWithParams) {\n        let params = > performOrParams;\n        this.params = params;\n        this.default_params = getParamValues(params);\n        this.perform = performWithParams;\n      } else {\n        this.params = [];\n        this.perform = > performOrParams;\n      }\n    }\n  }\n\n  constrain(c: ConstraintName): void {\n    if (c == 'no_drafts') { this.max_inputs = 0; this.inlets = []; }\n    this.classifier.input_drafts = ConstraintName[c][\"input_drafts\"]; \n    this.classifier.input_params = ConstraintName[c][\"input_params\"];\n  }\n\n  type(t: TopologyName): BaseOp {\n    this.classifier.type = t;\n    return this;\n  }\n}\n\ntype ConstructorArgKeysIndex = {\n  [C in keyof ConstraintIndex]: C extends \"no_params\" ? {\n    [T in keyof TopologyIndex]: {\n      name: string, displayname: string, dx: string, old_names: string[],\n      inlets: OpInlet[], perform: OpPerform\n    }\n  } : C extends \"no_drafts\" ? {\n    [T in keyof TopologyIndex]: {\n      name: string, displayname: string, dx: string, old_names: string[],\n      params: OpParam[], perform: OpPerform\n    }\n  } : {\n    [T in keyof TopologyIndex]: {\n      name: string, displayname: string, dx: string, old_names: string[],\n      params: OpParam[], inlets: OpInlet[],\n      perform: OpPerform\n    }\n  }\n}\n\ntype ConstructorArrayIndex = {\n  [C in keyof ConstraintIndex]: C extends \"no_params\" ? {\n    [T in keyof TopologyIndex]: [\n      name: string, displayname: string, dx: string, old_names: string[],\n      inlets: OpInlet[], perform: OpPerform\n    ]\n  } : C extends \"no_drafts\" ? {\n    [T in keyof TopologyIndex]: [\n      name: string, displayname: string, dx: string, old_names: string[],\n      params: OpParam[], perform: OpPerform\n    ]\n  } : {\n    [T in keyof TopologyIndex]: [\n      name: string, displayname: string, dx: string, old_names: string[],\n      params: OpParam[], inlets: OpInlet[],\n      perform: OpPerform\n    ]\n  }\n}\n\ntype OpConstructorArgKeys = \nConstructorArgKeysIndex[Constraint[\"constraint\"]][Topo[\"type\"]];\n\ntype OpConstructorArray = \nConstructorArrayIndex[Constraint[\"constraint\"]][Topo[\"type\"]];\n\ntype OpConstructorArgs = \nOpConstructorArgKeys | OpConstructorArray;\n\n// use factory design pattern to apply classifiers to BaseOp?? Is this too convoluted\n// https://refactoring.guru/design-patterns/abstract-factory/typescript\nclass AbstractOpFactory {\n  NoDrafts(args: OpConstructorArgKeys): BaseOp;\n  NoDrafts(...args: OpConstructorArray): BaseOp;\n  NoDrafts(...args: any) {\n    let op = new BaseOp(...args);\n    op.constrain(\"no_drafts\");\n    return op;\n  }\n\n  NoParams(args: OpConstructorArgKeys): BaseOp;\n  NoParams(...args: OpConstructorArray): BaseOp;\n  NoParams(...args: any) {\n    let op = new BaseOp(...args);\n    op.constrain(\"no_params\");\n    return op;\n  }\n\n  DraftsOptional(args: OpConstructorArgKeys): BaseOp;\n  DraftsOptional(...args: OpConstructorArray): BaseOp;\n  DraftsOptional(...args: any) {\n    let op = new BaseOp(...args);\n    op.constrain(\"drafts_opt\");\n    return op;\n  }\n\n  ParamsOptional(args: OpConstructorArgKeys): BaseOp;\n  ParamsOptional(...args: OpConstructorArray): BaseOp;\n  ParamsOptional(...args: any) {\n    let op = new BaseOp(...args);\n    op.constrain(\"params_opt\");\n    return op;\n  }\n\n  AllRequired(args: OpConstructorArgKeys): BaseOp;\n  AllRequired(...args: OpConstructorArray): BaseOp;\n  AllRequired(...args: any) {\n    let op = new BaseOp(...args);\n    op.constrain(\"all_req\");\n    return op;\n  }\n}\n\n// combine with mix-ins design pattern (link: TypeScript docs website)\nfunction makeTopoFactory(topo: TopologyName) {\n  return class TopologyFactory extends AbstractOpFactory {\n    static base = new AbstractOpFactory();\n    \n    static NoDrafts(args: OpConstructorArgKeys): BaseOp;\n    static NoDrafts(...args: OpConstructorArray): BaseOp;\n    static NoDrafts(...args: any) {\n      return this.base.NoDrafts(...args).type(topo);\n    }\n\n    static NoParams(args: OpConstructorArgKeys): BaseOp;\n    static NoParams(...args: OpConstructorArray): BaseOp;\n    static NoParams(...args: any) {\n      return this.base.NoParams(...args).type(topo);\n    }\n\n    static DraftsOptional(args: OpConstructorArgKeys): BaseOp;\n    static DraftsOptional(...args: OpConstructorArray): BaseOp;\n    static DraftsOptional(...args: any) {\n      return this.base.DraftsOptional(...args).type(topo);\n    }\n\n    static ParamsOptional(args: OpConstructorArgKeys): BaseOp;\n    static ParamsOptional(...args: OpConstructorArray): BaseOp;\n    static ParamsOptional(...args: any) {\n      return this.base.ParamsOptional(...args).type(topo);\n    }\n\n    static AllRequired(args: OpConstructorArgKeys): BaseOp;\n    static AllRequired(...args: OpConstructorArray): BaseOp;\n    static AllRequired(...args: any) {\n      return this.base.AllRequired(...args).type(topo);\n    }\n  }\n}\n\nexport const OpFactories = {\n  Seed: makeTopoFactory(\"seed\"),\n  Pipe: makeTopoFactory(\"pipe\"),\n  Merge: makeTopoFactory(\"merge\"),\n  Branch: makeTopoFactory(\"merge\"),\n  Bus: makeTopoFactory(\"bus\"),\n}\n\n// export const SeedOperation = makeTopoFactory(\"seed\");\n// export const PipeOperation = makeTopoFactory(\"pipe\");\n// export const MergeOperation = makeTopoFactory(\"merge\");\n// export const BranchOperation = makeTopoFactory(\"merge\");\n// export const BusOperation = makeTopoFactory(\"bus\");\n\ntype TopologyOpIndex = {\n  [T in keyof TopologyIndex]: {\n    [C in keyof ConstraintIndex]: BaseOp;\n  }\n}\n\nexport type BuildableOperation = TopologyOpIndex[TopologyName][ConstraintName];\n    \n\n\n\n\n\n\n\n\n\n\n                   \n    \n         results matching \"\"\n        \n    \n    \n        No results matching \"\"\n    \n\n"},"interfaces/Bounds.html":{"url":"interfaces/Bounds.html","title":"interface - Bounds","body":"\n                   \n\n\n\n\n\n\n\n\n\n\n\n\n\n\n  Interfaces\n  \n  Bounds\n\n\n\n        \n            Info\n        \n        \n            Source\n        \n\n\n\n    \n        \n            File\n        \n        \n            src/app/core/model/datatypes/screenlayout.ts\n        \n\n\n            \n                Description\n            \n            \n                Describes a rectangle on the screen.\n\n            \n\n\n        \n            Index\n            \n                \n                    \n                        \n                            Properties\n                        \n                    \n                    \n                        \n                            \n                                \n                                        \n                                            height\n                                        \n                                \n                                \n                                        \n                                            topleft\n                                        \n                                \n                                \n                                        \n                                            width\n                                        \n                                \n                            \n                        \n                    \n                \n            \n        \n\n\n\n            \n                Properties\n                    \n                        \n                                \n                                    \n                                        \n                                        height\n                                            \n                                                \n                                            \n                                        \n                                    \n                                \n                                \n                                    \n                                        height:         number\n\n                                    \n                                \n\n\n                                    \n                                        \n                                            Type :         number\n\n                                        \n                                    \n\n\n\n\n\n                        \n                    \n                    \n                        \n                                \n                                    \n                                        \n                                        topleft\n                                            \n                                                \n                                            \n                                        \n                                    \n                                \n                                \n                                    \n                                        topleft:         Point\n\n                                    \n                                \n\n\n                                    \n                                        \n                                            Type :         Point\n\n                                        \n                                    \n\n\n\n\n\n                        \n                    \n                    \n                        \n                                \n                                    \n                                        \n                                        width\n                                            \n                                                \n                                            \n                                        \n                                    \n                                \n                                \n                                    \n                                        width:         number\n\n                                    \n                                \n\n\n                                    \n                                        \n                                            Type :         number\n\n                                        \n                                    \n\n\n\n\n\n                        \n                    \n            \n    \n\n\n    \n        export interface Point {\n    x: number;\n    y: number;\n  }\n  \n  /**\n   * Describes a rectangle on the screen.\n   * @param topleft - position of this rectanble\n   * @param width - the width of the rectangle\n   * @param height - the height of this rectanble.\n   */\n  export interface Bounds {\n    topleft: Point;  //row on draft\n    width: number;  //column on draft \n    height: number; //corresponding screen row\n  }\n  \n  // /**\n  //  * A type to communicate locations on the loom that have been updated in response to a given action\n  //  */\n  // interface LoomUpdate {\n  //   threading: Array,\n  //   treadling: Array,\n  //   tieup: Array>\n  // }\n    \n\n\n\n\n\n\n\n\n\n                   \n    \n         results matching \"\"\n        \n    \n    \n        No results matching \"\"\n    \n\n"},"classes/Branch.html":{"url":"classes/Branch.html","title":"class - Branch","body":"\n                   \n\n\n\n\n\n\n\n\n\n\n\n\n\n  Classes\n  Branch\n\n\n\n        \n            Info\n        \n        \n            Source\n        \n\n\n\n    \n        \n            File\n        \n        \n            src/app/mixer/model/operation/topology.ts\n        \n\n\n            \n                Description\n            \n            \n                Operation that takes one input and generates many (N) output drafts.\n\nINPUT: exactly one Draft\nOUTPUT: Array of Drafts\n\n\n            \n\n\n            \n                Implements\n            \n            \n                            TopologyDef\n            \n\n\n            \n    Index\n    \n        \n                \n                    \n                        Properties\n                    \n                \n                \n                    \n                        \n                            \n                                input\n                            \n                            \n                                output\n                            \n                            \n                                type\n                            \n                        \n                    \n                \n\n\n\n\n\n\n        \n    \n\n\n\n            \n    \n    \n        Properties\n    \n    \n        \n            \n                \n                    \n                    \n                        input\n                        \n                    \n                \n            \n                \n                    \n                        Type :         Draft\n\n                    \n                \n                    \n                        \n                                Defined in src/app/mixer/model/operation/topology.ts:74\n                        \n                    \n\n\n        \n    \n    \n        \n            \n                \n                    \n                    \n                        output\n                        \n                    \n                \n            \n                \n                    \n                        Type :         Array\n\n                    \n                \n                    \n                        \n                                Defined in src/app/mixer/model/operation/topology.ts:74\n                        \n                    \n\n\n        \n    \n    \n        \n            \n                \n                    \n                    \n                        type\n                        \n                    \n                \n            \n                    \n                        \n                                Defined in src/app/mixer/model/operation/topology.ts:74\n                        \n                    \n\n\n        \n    \n\n\n\n\n\n\n\n\n    \n\n\n    \n        import { Draft } from \"../../../core/model/datatypes\";\nimport { ParamValue, OperationParam as OpParam, getParamValues } from \"./params\";\nimport { OperationInlet as OpInlet, InletDrafts } from \"./inlets\";\n\n/**\n* At its heart, an Operation is a very fancy function that outputs a Draft or several Drafts.\n* The function itself is perform(), and the Operation can take inputs in the form of \n* Drafts (inlets) or Parameters (params).\n*/\n\n/** \n* Types that an Operation's perform() function can handlle as input/output\n*/\n\n/** @type Union of types that can serve as input to Operation perform() functions. */\nexport type PerformDraftInput = InletDrafts | Array | Draft | null;\n\ntype MultiDraftInput = InletDrafts | Array;\n\n/** @type Union of types that Operation perform() functions can output. */\nexport type PerformOutput = Array | Draft;\n\n/**\n * OPERATION TOPOLOGY\n * Topology refers to the shape of the Operation in terms of its\n * number of input and output Drafts. Classifies Operations.\n */\n\nexport const TopologyName = {\n  pipe: 'pipe', \n  seed: 'seed', \n  merge: 'merge', \n  branch: 'branch', \n  bus: 'bus'\n} as const;\nexport type TopologyName = keyof typeof TopologyName;\n\ninterface TopologyDef { type: TopologyName; input: PerformDraftInput; output: PerformOutput; };\n\n/**\n* @class\n* Operation that can generate a draft with no inputs, may take an optional input\n* @method perform OpPerform function: \n* - INPUT: zero or one Draft\n* - OUTPUT: exactly one Draft\n*/\nexport class Seed implements TopologyDef { type: 'seed'; input: Draft | null; output: Draft; };\n\n/**\n* @class\n* Operation that takes one input and generates one output draft. \n* @method perform OpPerform function: \n* - INPUT: exactly one Draft\n* - OUTPUT: exactly one Draft\n*/\nexport class Pipe implements TopologyDef { type: 'pipe'; input: Draft; output: Draft; };\n\n/**\n* @class\n* Operation that takes many (N) inputs and generates one output draft.\n* @method perform OpPerform function: \n* - INPUT: Array of Drafts\n* - OUTPUT: exactly one Draft\n*/\nexport class Merge implements TopologyDef { type: 'merge'; input: InletDrafts | Array; output: Draft; };\n\n/**\n* @class\n* Operation that takes one input and generates many (N) output drafts.\n* @method perform OpPerform function:\n* - INPUT: exactly one Draft\n* - OUTPUT: Array of Drafts\n*/\nexport class Branch implements TopologyDef { type: 'branch'; input: Draft; output: Array; };\n\n/**\n* CURRENTLY UNUSED\n* @class\n* Operation that takes many (N) inputs and generates many (M) output drafts.\n* Number of inputs does not necessarily match number of outputs (N ?= M).\n* @method perform OpPerform function:  \n* - INPUT: Array of Drafts\n* - OUTPUT: Array of Drafts\n*/\nexport class Bus implements TopologyDef { type: 'bus'; input: Array | InletDrafts; output: Array; };\n\ntype TopologyIndex = {\n  'seed': Seed,\n  'pipe': Pipe,\n  'merge': Merge,\n  'branch': Branch,\n  'bus': Bus\n}\ntype OpTopology = TopologyIndex[TopologyName];\n\n/**\n * OPERATION CONSTRAINT\n * A Constraint on an Operation classifies it based on its\n * input requirements (both Drafts and Params).\n */\n\nexport const ConstraintOptions = {\n  req: 'req', \n  opt: 'opt', \n  none: 'none'\n} as const;\nexport type ConstraintOptions = keyof typeof ConstraintOptions;\n\nexport const ConstraintName = {\n  no_drafts: { input_drafts: 'none', input_params: 'req' }, \n  no_params: { input_drafts: 'req', input_params: 'none' }, \n  drafts_opt: { input_drafts: 'opt', input_params: 'req' }, \n  params_opt: { input_drafts: 'req', input_params: 'opt' }, \n  all_req: {input_drafts: 'req', input_params: 'req' },\n} as const;\ntype ConstraintName = keyof typeof ConstraintName;\n\ntype ConstraintDefs = {\n  [C in keyof typeof ConstraintName]: {\n    constraint: C;\n    input_drafts: typeof ConstraintName[C][\"input_drafts\"];\n    input_params: typeof ConstraintName[C][\"input_params\"];\n  }\n}\n\nexport type NoDrafts = ConstraintDefs[\"no_drafts\"];\nexport type NoParams = ConstraintDefs[\"no_params\"];\nexport type DraftsOptional = ConstraintDefs[\"drafts_opt\"];\nexport type ParamsOptional = ConstraintDefs[\"params_opt\"];\nexport type AllRequired = ConstraintDefs[\"all_req\"];\n\ntype ConstraintIndex = {\n  'no_drafts': NoDrafts, // does not accept input drafts\n  'no_params': NoParams, // does not accept params\n  'drafts_opt': DraftsOptional, // can take no params -- has default values\n  'params_opt': ParamsOptional, // can take zero input drafts\n  'all_req': AllRequired, // both inputs and params required\n}\ntype OpConstraint = ConstraintIndex[ConstraintName]; \n\n/** \n* Generic types for perform() functions, describing options \n* for input draft multiplicity (0, 1, N) and param requirement \n*/\n\ntype NoDraftsPerform = {(params: Array): Topo[\"output\"]};\ntype NoParamsPerform = {(inputs: Topo[\"input\"]): Topo[\"output\"]};\ntype ParamsOptionalPerform = {(inputs: Topo[\"input\"], params?: Array): Topo[\"output\"]}; \ntype DraftsOptionalPerform = {(params: Array, inputs?: Topo[\"input\"]): Topo[\"output\"]};  \ntype AllRequiredPerform = {(inputs: Topo[\"input\"], params: Array): Topo[\"output\"]};  \n\ntype PerformCallSigs = {\n  no_drafts: { [Topo in keyof TopologyIndex]: NoDraftsPerform; },\n  no_params: { [Topo in keyof TopologyIndex]: NoParamsPerform; },\n  drafts_opt: { [Topo in keyof TopologyIndex]: DraftsOptionalPerform; },\n  params_opt: { [Topo in keyof TopologyIndex]: ParamsOptionalPerform; },\n  all_req: { [Topo in keyof TopologyIndex]: AllRequiredPerform; }\n}\n\n/**\n * @interface OpClassifier\n * Key-value pairs for an Operation's Topology and Constraint.\n */\ninterface OpClassifier {\n  type: Topo[\"type\"] | '';\n  input_drafts: Constraint[\"input_drafts\"] | '';\n  input_params: Constraint[\"input_params\"] | '';\n}\n\n/** @type User-defined descriptive strings for any Operation. */\ntype OperationDescriptors = { name: string, displayname: string, dx: string };\n\n/**\n* A standard Operation's metadata -- i.e. everything not the perform() function\n* @param name the internal name of this opearation (CHANGING THESE WILL BREAK LEGACY VERSIONS)\n* @param displayname the name to show upon this operation\n* @param dx the description of this operation\n* @param max_inputs the maximum number of inputs (drafts) allowed directly into this operation\n* @param params the parameters associated with this operation\n* @method perform an OpPerform function\n*/\nexport interface OperationProperties extends OperationDescriptors {\n  max_inputs: number,\n  default_params?: Array;\n  params: Array,\n}\n\n/**\n * @type A function that serves as the perform() method for an Operation. \n * This generic type requires two type parameters:\n * @param Topo one of the PerformInput types\n * @param Constraint one of the PerformOutput types\n *\n * OpPerform to give call signature for perform() function \n * Topo  = Seed | Pipe | Merge | Branch | Bus\n * Constraint = NoDrafts | NoParams | DraftsOptional | ParamsOptional | AllRequired\n */\nexport type OpPerform = PerformCallSigs[Constraint[\"constraint\"]][Topo[\"type\"]];\n// type PerformArgs = Parameters>;\n\n/** TODO doublecheck inlets have been added correctly (fields for input drafts) */\nexport class BaseOp implements OperationProperties {\n  name: string;\n  old_names: Array;\n  displayname: string;\n  dx: string;\n  params: Array;\n  inlets: Array;\n  default_params?: Array;\n  max_inputs: number;\n  classifier: OpClassifier;\n  perform: OpPerform;\n\n  /** @constructor create an Operation using an object literal (keys and values) */\n  constructor (args: OpConstructorArgs);\n  /** @constructor create an Operation using direct arguments in the constructor (values only) */\n  constructor (...args: OpConstructorArray);\n  constructor (name: string, displayname: string, dx: string, perform: OpPerform);\n  constructor (name: string, displayname: string, dx: string, params: Array, perform: OpPerform);\n  constructor (nameOrArgs: any, displayname?: string, dx?: string, performOrParams?: OpPerform | Array, performWithParams?: OpPerform) {\n    // console.log((nameOrArgs.name != undefined));\n    this.classifier = { type: '', input_drafts: '', input_params: '' };\n    if (nameOrArgs.name) {\n      let args = nameOrArgs;\n      this.name = args.name;\n      this.displayname = args.displayname;\n      this.dx = args.dx;\n      this.perform = args.perform;\n      if (args.params) this.params = args.params;\n      else this.params = [];\n      if (args.inlets) this.inlets = args.inlets;\n      else this.inlets = [];\n    } else {\n      this.name = nameOrArgs;\n      this.displayname = displayname;\n      this.dx = dx;\n      if (performWithParams) {\n        let params = > performOrParams;\n        this.params = params;\n        this.default_params = getParamValues(params);\n        this.perform = performWithParams;\n      } else {\n        this.params = [];\n        this.perform = > performOrParams;\n      }\n    }\n  }\n\n  constrain(c: ConstraintName): void {\n    if (c == 'no_drafts') { this.max_inputs = 0; this.inlets = []; }\n    this.classifier.input_drafts = ConstraintName[c][\"input_drafts\"]; \n    this.classifier.input_params = ConstraintName[c][\"input_params\"];\n  }\n\n  type(t: TopologyName): BaseOp {\n    this.classifier.type = t;\n    return this;\n  }\n}\n\ntype ConstructorArgKeysIndex = {\n  [C in keyof ConstraintIndex]: C extends \"no_params\" ? {\n    [T in keyof TopologyIndex]: {\n      name: string, displayname: string, dx: string, old_names: string[],\n      inlets: OpInlet[], perform: OpPerform\n    }\n  } : C extends \"no_drafts\" ? {\n    [T in keyof TopologyIndex]: {\n      name: string, displayname: string, dx: string, old_names: string[],\n      params: OpParam[], perform: OpPerform\n    }\n  } : {\n    [T in keyof TopologyIndex]: {\n      name: string, displayname: string, dx: string, old_names: string[],\n      params: OpParam[], inlets: OpInlet[],\n      perform: OpPerform\n    }\n  }\n}\n\ntype ConstructorArrayIndex = {\n  [C in keyof ConstraintIndex]: C extends \"no_params\" ? {\n    [T in keyof TopologyIndex]: [\n      name: string, displayname: string, dx: string, old_names: string[],\n      inlets: OpInlet[], perform: OpPerform\n    ]\n  } : C extends \"no_drafts\" ? {\n    [T in keyof TopologyIndex]: [\n      name: string, displayname: string, dx: string, old_names: string[],\n      params: OpParam[], perform: OpPerform\n    ]\n  } : {\n    [T in keyof TopologyIndex]: [\n      name: string, displayname: string, dx: string, old_names: string[],\n      params: OpParam[], inlets: OpInlet[],\n      perform: OpPerform\n    ]\n  }\n}\n\ntype OpConstructorArgKeys = \nConstructorArgKeysIndex[Constraint[\"constraint\"]][Topo[\"type\"]];\n\ntype OpConstructorArray = \nConstructorArrayIndex[Constraint[\"constraint\"]][Topo[\"type\"]];\n\ntype OpConstructorArgs = \nOpConstructorArgKeys | OpConstructorArray;\n\n// use factory design pattern to apply classifiers to BaseOp?? Is this too convoluted\n// https://refactoring.guru/design-patterns/abstract-factory/typescript\nclass AbstractOpFactory {\n  NoDrafts(args: OpConstructorArgKeys): BaseOp;\n  NoDrafts(...args: OpConstructorArray): BaseOp;\n  NoDrafts(...args: any) {\n    let op = new BaseOp(...args);\n    op.constrain(\"no_drafts\");\n    return op;\n  }\n\n  NoParams(args: OpConstructorArgKeys): BaseOp;\n  NoParams(...args: OpConstructorArray): BaseOp;\n  NoParams(...args: any) {\n    let op = new BaseOp(...args);\n    op.constrain(\"no_params\");\n    return op;\n  }\n\n  DraftsOptional(args: OpConstructorArgKeys): BaseOp;\n  DraftsOptional(...args: OpConstructorArray): BaseOp;\n  DraftsOptional(...args: any) {\n    let op = new BaseOp(...args);\n    op.constrain(\"drafts_opt\");\n    return op;\n  }\n\n  ParamsOptional(args: OpConstructorArgKeys): BaseOp;\n  ParamsOptional(...args: OpConstructorArray): BaseOp;\n  ParamsOptional(...args: any) {\n    let op = new BaseOp(...args);\n    op.constrain(\"params_opt\");\n    return op;\n  }\n\n  AllRequired(args: OpConstructorArgKeys): BaseOp;\n  AllRequired(...args: OpConstructorArray): BaseOp;\n  AllRequired(...args: any) {\n    let op = new BaseOp(...args);\n    op.constrain(\"all_req\");\n    return op;\n  }\n}\n\n// combine with mix-ins design pattern (link: TypeScript docs website)\nfunction makeTopoFactory(topo: TopologyName) {\n  return class TopologyFactory extends AbstractOpFactory {\n    static base = new AbstractOpFactory();\n    \n    static NoDrafts(args: OpConstructorArgKeys): BaseOp;\n    static NoDrafts(...args: OpConstructorArray): BaseOp;\n    static NoDrafts(...args: any) {\n      return this.base.NoDrafts(...args).type(topo);\n    }\n\n    static NoParams(args: OpConstructorArgKeys): BaseOp;\n    static NoParams(...args: OpConstructorArray): BaseOp;\n    static NoParams(...args: any) {\n      return this.base.NoParams(...args).type(topo);\n    }\n\n    static DraftsOptional(args: OpConstructorArgKeys): BaseOp;\n    static DraftsOptional(...args: OpConstructorArray): BaseOp;\n    static DraftsOptional(...args: any) {\n      return this.base.DraftsOptional(...args).type(topo);\n    }\n\n    static ParamsOptional(args: OpConstructorArgKeys): BaseOp;\n    static ParamsOptional(...args: OpConstructorArray): BaseOp;\n    static ParamsOptional(...args: any) {\n      return this.base.ParamsOptional(...args).type(topo);\n    }\n\n    static AllRequired(args: OpConstructorArgKeys): BaseOp;\n    static AllRequired(...args: OpConstructorArray): BaseOp;\n    static AllRequired(...args: any) {\n      return this.base.AllRequired(...args).type(topo);\n    }\n  }\n}\n\nexport const OpFactories = {\n  Seed: makeTopoFactory(\"seed\"),\n  Pipe: makeTopoFactory(\"pipe\"),\n  Merge: makeTopoFactory(\"merge\"),\n  Branch: makeTopoFactory(\"merge\"),\n  Bus: makeTopoFactory(\"bus\"),\n}\n\n// export const SeedOperation = makeTopoFactory(\"seed\");\n// export const PipeOperation = makeTopoFactory(\"pipe\");\n// export const MergeOperation = makeTopoFactory(\"merge\");\n// export const BranchOperation = makeTopoFactory(\"merge\");\n// export const BusOperation = makeTopoFactory(\"bus\");\n\ntype TopologyOpIndex = {\n  [T in keyof TopologyIndex]: {\n    [C in keyof ConstraintIndex]: BaseOp;\n  }\n}\n\nexport type BuildableOperation = TopologyOpIndex[TopologyName][ConstraintName];\n    \n\n\n\n\n\n\n\n\n\n\n                   \n    \n         results matching \"\"\n        \n    \n    \n        No results matching \"\"\n    \n\n"},"classes/Bus.html":{"url":"classes/Bus.html","title":"class - Bus","body":"\n                   \n\n\n\n\n\n\n\n\n\n\n\n\n\n  Classes\n  Bus\n\n\n\n        \n            Info\n        \n        \n            Source\n        \n\n\n\n    \n        \n            File\n        \n        \n            src/app/mixer/model/operation/topology.ts\n        \n\n\n            \n                Description\n            \n            \n                CURRENTLY UNUSED\nOperation that takes many (N) inputs and generates many (M) output drafts.\nNumber of inputs does not necessarily match number of outputs (N ?= M).\n\nINPUT: Array of Drafts\nOUTPUT: Array of Drafts\n\n\n            \n\n\n            \n                Implements\n            \n            \n                            TopologyDef\n            \n\n\n            \n    Index\n    \n        \n                \n                    \n                        Properties\n                    \n                \n                \n                    \n                        \n                            \n                                input\n                            \n                            \n                                output\n                            \n                            \n                                type\n                            \n                        \n                    \n                \n\n\n\n\n\n\n        \n    \n\n\n\n            \n    \n    \n        Properties\n    \n    \n        \n            \n                \n                    \n                    \n                        input\n                        \n                    \n                \n            \n                \n                    \n                        Type :         Array | InletDrafts\n\n                    \n                \n                    \n                        \n                                Defined in src/app/mixer/model/operation/topology.ts:85\n                        \n                    \n\n\n        \n    \n    \n        \n            \n                \n                    \n                    \n                        output\n                        \n                    \n                \n            \n                \n                    \n                        Type :         Array\n\n                    \n                \n                    \n                        \n                                Defined in src/app/mixer/model/operation/topology.ts:85\n                        \n                    \n\n\n        \n    \n    \n        \n            \n                \n                    \n                    \n                        type\n                        \n                    \n                \n            \n                    \n                        \n                                Defined in src/app/mixer/model/operation/topology.ts:85\n                        \n                    \n\n\n        \n    \n\n\n\n\n\n\n\n\n    \n\n\n    \n        import { Draft } from \"../../../core/model/datatypes\";\nimport { ParamValue, OperationParam as OpParam, getParamValues } from \"./params\";\nimport { OperationInlet as OpInlet, InletDrafts } from \"./inlets\";\n\n/**\n* At its heart, an Operation is a very fancy function that outputs a Draft or several Drafts.\n* The function itself is perform(), and the Operation can take inputs in the form of \n* Drafts (inlets) or Parameters (params).\n*/\n\n/** \n* Types that an Operation's perform() function can handlle as input/output\n*/\n\n/** @type Union of types that can serve as input to Operation perform() functions. */\nexport type PerformDraftInput = InletDrafts | Array | Draft | null;\n\ntype MultiDraftInput = InletDrafts | Array;\n\n/** @type Union of types that Operation perform() functions can output. */\nexport type PerformOutput = Array | Draft;\n\n/**\n * OPERATION TOPOLOGY\n * Topology refers to the shape of the Operation in terms of its\n * number of input and output Drafts. Classifies Operations.\n */\n\nexport const TopologyName = {\n  pipe: 'pipe', \n  seed: 'seed', \n  merge: 'merge', \n  branch: 'branch', \n  bus: 'bus'\n} as const;\nexport type TopologyName = keyof typeof TopologyName;\n\ninterface TopologyDef { type: TopologyName; input: PerformDraftInput; output: PerformOutput; };\n\n/**\n* @class\n* Operation that can generate a draft with no inputs, may take an optional input\n* @method perform OpPerform function: \n* - INPUT: zero or one Draft\n* - OUTPUT: exactly one Draft\n*/\nexport class Seed implements TopologyDef { type: 'seed'; input: Draft | null; output: Draft; };\n\n/**\n* @class\n* Operation that takes one input and generates one output draft. \n* @method perform OpPerform function: \n* - INPUT: exactly one Draft\n* - OUTPUT: exactly one Draft\n*/\nexport class Pipe implements TopologyDef { type: 'pipe'; input: Draft; output: Draft; };\n\n/**\n* @class\n* Operation that takes many (N) inputs and generates one output draft.\n* @method perform OpPerform function: \n* - INPUT: Array of Drafts\n* - OUTPUT: exactly one Draft\n*/\nexport class Merge implements TopologyDef { type: 'merge'; input: InletDrafts | Array; output: Draft; };\n\n/**\n* @class\n* Operation that takes one input and generates many (N) output drafts.\n* @method perform OpPerform function:\n* - INPUT: exactly one Draft\n* - OUTPUT: Array of Drafts\n*/\nexport class Branch implements TopologyDef { type: 'branch'; input: Draft; output: Array; };\n\n/**\n* CURRENTLY UNUSED\n* @class\n* Operation that takes many (N) inputs and generates many (M) output drafts.\n* Number of inputs does not necessarily match number of outputs (N ?= M).\n* @method perform OpPerform function:  \n* - INPUT: Array of Drafts\n* - OUTPUT: Array of Drafts\n*/\nexport class Bus implements TopologyDef { type: 'bus'; input: Array | InletDrafts; output: Array; };\n\ntype TopologyIndex = {\n  'seed': Seed,\n  'pipe': Pipe,\n  'merge': Merge,\n  'branch': Branch,\n  'bus': Bus\n}\ntype OpTopology = TopologyIndex[TopologyName];\n\n/**\n * OPERATION CONSTRAINT\n * A Constraint on an Operation classifies it based on its\n * input requirements (both Drafts and Params).\n */\n\nexport const ConstraintOptions = {\n  req: 'req', \n  opt: 'opt', \n  none: 'none'\n} as const;\nexport type ConstraintOptions = keyof typeof ConstraintOptions;\n\nexport const ConstraintName = {\n  no_drafts: { input_drafts: 'none', input_params: 'req' }, \n  no_params: { input_drafts: 'req', input_params: 'none' }, \n  drafts_opt: { input_drafts: 'opt', input_params: 'req' }, \n  params_opt: { input_drafts: 'req', input_params: 'opt' }, \n  all_req: {input_drafts: 'req', input_params: 'req' },\n} as const;\ntype ConstraintName = keyof typeof ConstraintName;\n\ntype ConstraintDefs = {\n  [C in keyof typeof ConstraintName]: {\n    constraint: C;\n    input_drafts: typeof ConstraintName[C][\"input_drafts\"];\n    input_params: typeof ConstraintName[C][\"input_params\"];\n  }\n}\n\nexport type NoDrafts = ConstraintDefs[\"no_drafts\"];\nexport type NoParams = ConstraintDefs[\"no_params\"];\nexport type DraftsOptional = ConstraintDefs[\"drafts_opt\"];\nexport type ParamsOptional = ConstraintDefs[\"params_opt\"];\nexport type AllRequired = ConstraintDefs[\"all_req\"];\n\ntype ConstraintIndex = {\n  'no_drafts': NoDrafts, // does not accept input drafts\n  'no_params': NoParams, // does not accept params\n  'drafts_opt': DraftsOptional, // can take no params -- has default values\n  'params_opt': ParamsOptional, // can take zero input drafts\n  'all_req': AllRequired, // both inputs and params required\n}\ntype OpConstraint = ConstraintIndex[ConstraintName]; \n\n/** \n* Generic types for perform() functions, describing options \n* for input draft multiplicity (0, 1, N) and param requirement \n*/\n\ntype NoDraftsPerform = {(params: Array): Topo[\"output\"]};\ntype NoParamsPerform = {(inputs: Topo[\"input\"]): Topo[\"output\"]};\ntype ParamsOptionalPerform = {(inputs: Topo[\"input\"], params?: Array): Topo[\"output\"]}; \ntype DraftsOptionalPerform = {(params: Array, inputs?: Topo[\"input\"]): Topo[\"output\"]};  \ntype AllRequiredPerform = {(inputs: Topo[\"input\"], params: Array): Topo[\"output\"]};  \n\ntype PerformCallSigs = {\n  no_drafts: { [Topo in keyof TopologyIndex]: NoDraftsPerform; },\n  no_params: { [Topo in keyof TopologyIndex]: NoParamsPerform; },\n  drafts_opt: { [Topo in keyof TopologyIndex]: DraftsOptionalPerform; },\n  params_opt: { [Topo in keyof TopologyIndex]: ParamsOptionalPerform; },\n  all_req: { [Topo in keyof TopologyIndex]: AllRequiredPerform; }\n}\n\n/**\n * @interface OpClassifier\n * Key-value pairs for an Operation's Topology and Constraint.\n */\ninterface OpClassifier {\n  type: Topo[\"type\"] | '';\n  input_drafts: Constraint[\"input_drafts\"] | '';\n  input_params: Constraint[\"input_params\"] | '';\n}\n\n/** @type User-defined descriptive strings for any Operation. */\ntype OperationDescriptors = { name: string, displayname: string, dx: string };\n\n/**\n* A standard Operation's metadata -- i.e. everything not the perform() function\n* @param name the internal name of this opearation (CHANGING THESE WILL BREAK LEGACY VERSIONS)\n* @param displayname the name to show upon this operation\n* @param dx the description of this operation\n* @param max_inputs the maximum number of inputs (drafts) allowed directly into this operation\n* @param params the parameters associated with this operation\n* @method perform an OpPerform function\n*/\nexport interface OperationProperties extends OperationDescriptors {\n  max_inputs: number,\n  default_params?: Array;\n  params: Array,\n}\n\n/**\n * @type A function that serves as the perform() method for an Operation. \n * This generic type requires two type parameters:\n * @param Topo one of the PerformInput types\n * @param Constraint one of the PerformOutput types\n *\n * OpPerform to give call signature for perform() function \n * Topo  = Seed | Pipe | Merge | Branch | Bus\n * Constraint = NoDrafts | NoParams | DraftsOptional | ParamsOptional | AllRequired\n */\nexport type OpPerform = PerformCallSigs[Constraint[\"constraint\"]][Topo[\"type\"]];\n// type PerformArgs = Parameters>;\n\n/** TODO doublecheck inlets have been added correctly (fields for input drafts) */\nexport class BaseOp implements OperationProperties {\n  name: string;\n  old_names: Array;\n  displayname: string;\n  dx: string;\n  params: Array;\n  inlets: Array;\n  default_params?: Array;\n  max_inputs: number;\n  classifier: OpClassifier;\n  perform: OpPerform;\n\n  /** @constructor create an Operation using an object literal (keys and values) */\n  constructor (args: OpConstructorArgs);\n  /** @constructor create an Operation using direct arguments in the constructor (values only) */\n  constructor (...args: OpConstructorArray);\n  constructor (name: string, displayname: string, dx: string, perform: OpPerform);\n  constructor (name: string, displayname: string, dx: string, params: Array, perform: OpPerform);\n  constructor (nameOrArgs: any, displayname?: string, dx?: string, performOrParams?: OpPerform | Array, performWithParams?: OpPerform) {\n    // console.log((nameOrArgs.name != undefined));\n    this.classifier = { type: '', input_drafts: '', input_params: '' };\n    if (nameOrArgs.name) {\n      let args = nameOrArgs;\n      this.name = args.name;\n      this.displayname = args.displayname;\n      this.dx = args.dx;\n      this.perform = args.perform;\n      if (args.params) this.params = args.params;\n      else this.params = [];\n      if (args.inlets) this.inlets = args.inlets;\n      else this.inlets = [];\n    } else {\n      this.name = nameOrArgs;\n      this.displayname = displayname;\n      this.dx = dx;\n      if (performWithParams) {\n        let params = > performOrParams;\n        this.params = params;\n        this.default_params = getParamValues(params);\n        this.perform = performWithParams;\n      } else {\n        this.params = [];\n        this.perform = > performOrParams;\n      }\n    }\n  }\n\n  constrain(c: ConstraintName): void {\n    if (c == 'no_drafts') { this.max_inputs = 0; this.inlets = []; }\n    this.classifier.input_drafts = ConstraintName[c][\"input_drafts\"]; \n    this.classifier.input_params = ConstraintName[c][\"input_params\"];\n  }\n\n  type(t: TopologyName): BaseOp {\n    this.classifier.type = t;\n    return this;\n  }\n}\n\ntype ConstructorArgKeysIndex = {\n  [C in keyof ConstraintIndex]: C extends \"no_params\" ? {\n    [T in keyof TopologyIndex]: {\n      name: string, displayname: string, dx: string, old_names: string[],\n      inlets: OpInlet[], perform: OpPerform\n    }\n  } : C extends \"no_drafts\" ? {\n    [T in keyof TopologyIndex]: {\n      name: string, displayname: string, dx: string, old_names: string[],\n      params: OpParam[], perform: OpPerform\n    }\n  } : {\n    [T in keyof TopologyIndex]: {\n      name: string, displayname: string, dx: string, old_names: string[],\n      params: OpParam[], inlets: OpInlet[],\n      perform: OpPerform\n    }\n  }\n}\n\ntype ConstructorArrayIndex = {\n  [C in keyof ConstraintIndex]: C extends \"no_params\" ? {\n    [T in keyof TopologyIndex]: [\n      name: string, displayname: string, dx: string, old_names: string[],\n      inlets: OpInlet[], perform: OpPerform\n    ]\n  } : C extends \"no_drafts\" ? {\n    [T in keyof TopologyIndex]: [\n      name: string, displayname: string, dx: string, old_names: string[],\n      params: OpParam[], perform: OpPerform\n    ]\n  } : {\n    [T in keyof TopologyIndex]: [\n      name: string, displayname: string, dx: string, old_names: string[],\n      params: OpParam[], inlets: OpInlet[],\n      perform: OpPerform\n    ]\n  }\n}\n\ntype OpConstructorArgKeys = \nConstructorArgKeysIndex[Constraint[\"constraint\"]][Topo[\"type\"]];\n\ntype OpConstructorArray = \nConstructorArrayIndex[Constraint[\"constraint\"]][Topo[\"type\"]];\n\ntype OpConstructorArgs = \nOpConstructorArgKeys | OpConstructorArray;\n\n// use factory design pattern to apply classifiers to BaseOp?? Is this too convoluted\n// https://refactoring.guru/design-patterns/abstract-factory/typescript\nclass AbstractOpFactory {\n  NoDrafts(args: OpConstructorArgKeys): BaseOp;\n  NoDrafts(...args: OpConstructorArray): BaseOp;\n  NoDrafts(...args: any) {\n    let op = new BaseOp(...args);\n    op.constrain(\"no_drafts\");\n    return op;\n  }\n\n  NoParams(args: OpConstructorArgKeys): BaseOp;\n  NoParams(...args: OpConstructorArray): BaseOp;\n  NoParams(...args: any) {\n    let op = new BaseOp(...args);\n    op.constrain(\"no_params\");\n    return op;\n  }\n\n  DraftsOptional(args: OpConstructorArgKeys): BaseOp;\n  DraftsOptional(...args: OpConstructorArray): BaseOp;\n  DraftsOptional(...args: any) {\n    let op = new BaseOp(...args);\n    op.constrain(\"drafts_opt\");\n    return op;\n  }\n\n  ParamsOptional(args: OpConstructorArgKeys): BaseOp;\n  ParamsOptional(...args: OpConstructorArray): BaseOp;\n  ParamsOptional(...args: any) {\n    let op = new BaseOp(...args);\n    op.constrain(\"params_opt\");\n    return op;\n  }\n\n  AllRequired(args: OpConstructorArgKeys): BaseOp;\n  AllRequired(...args: OpConstructorArray): BaseOp;\n  AllRequired(...args: any) {\n    let op = new BaseOp(...args);\n    op.constrain(\"all_req\");\n    return op;\n  }\n}\n\n// combine with mix-ins design pattern (link: TypeScript docs website)\nfunction makeTopoFactory(topo: TopologyName) {\n  return class TopologyFactory extends AbstractOpFactory {\n    static base = new AbstractOpFactory();\n    \n    static NoDrafts(args: OpConstructorArgKeys): BaseOp;\n    static NoDrafts(...args: OpConstructorArray): BaseOp;\n    static NoDrafts(...args: any) {\n      return this.base.NoDrafts(...args).type(topo);\n    }\n\n    static NoParams(args: OpConstructorArgKeys): BaseOp;\n    static NoParams(...args: OpConstructorArray): BaseOp;\n    static NoParams(...args: any) {\n      return this.base.NoParams(...args).type(topo);\n    }\n\n    static DraftsOptional(args: OpConstructorArgKeys): BaseOp;\n    static DraftsOptional(...args: OpConstructorArray): BaseOp;\n    static DraftsOptional(...args: any) {\n      return this.base.DraftsOptional(...args).type(topo);\n    }\n\n    static ParamsOptional(args: OpConstructorArgKeys): BaseOp;\n    static ParamsOptional(...args: OpConstructorArray): BaseOp;\n    static ParamsOptional(...args: any) {\n      return this.base.ParamsOptional(...args).type(topo);\n    }\n\n    static AllRequired(args: OpConstructorArgKeys): BaseOp;\n    static AllRequired(...args: OpConstructorArray): BaseOp;\n    static AllRequired(...args: any) {\n      return this.base.AllRequired(...args).type(topo);\n    }\n  }\n}\n\nexport const OpFactories = {\n  Seed: makeTopoFactory(\"seed\"),\n  Pipe: makeTopoFactory(\"pipe\"),\n  Merge: makeTopoFactory(\"merge\"),\n  Branch: makeTopoFactory(\"merge\"),\n  Bus: makeTopoFactory(\"bus\"),\n}\n\n// export const SeedOperation = makeTopoFactory(\"seed\");\n// export const PipeOperation = makeTopoFactory(\"pipe\");\n// export const MergeOperation = makeTopoFactory(\"merge\");\n// export const BranchOperation = makeTopoFactory(\"merge\");\n// export const BusOperation = makeTopoFactory(\"bus\");\n\ntype TopologyOpIndex = {\n  [T in keyof TopologyIndex]: {\n    [C in keyof ConstraintIndex]: BaseOp;\n  }\n}\n\nexport type BuildableOperation = TopologyOpIndex[TopologyName][ConstraintName];\n    \n\n\n\n\n\n\n\n\n\n\n                   \n    \n         results matching \"\"\n        \n    \n    \n        No results matching \"\"\n    \n\n"},"classes/Cell.html":{"url":"classes/Cell.html","title":"class - Cell","body":"\n                   \n\n\n\n\n\n\n\n\n\n\n\n\n\n  Classes\n  Cell\n\n\n\n        \n            Info\n        \n        \n            Source\n        \n\n\n\n    \n        \n            File\n        \n        \n            src/app/core/model/cell.ts\n        \n\n\n            \n                Description\n            \n            \n                Definition of Cell object.\n\n            \n\n\n\n\n            \n    Index\n    \n        \n                \n                    \n                        Properties\n                    \n                \n                \n                    \n                        \n                            \n                                is_set\n                            \n                            \n                                is_up\n                            \n                        \n                    \n                \n\n                \n                    \n                        Methods\n                    \n                \n                \n                    \n                        \n                            \n                                getHeddle\n                            \n                            \n                                isSet\n                            \n                            \n                                isUp\n                            \n                            \n                                reloadCell\n                            \n                            \n                                setHeddle\n                            \n                            \n                                setHeddleDown\n                            \n                            \n                                setHeddleUp\n                            \n                            \n                                toggleHeddle\n                            \n                            \n                                unsetHeddle\n                            \n                        \n                    \n                \n\n\n\n\n\n        \n    \n\n\n            \n    Constructor\n        \n            \n                \n                    \nconstructor(setting: boolean)\n                    \n                \n                        \n                            \n                                Defined in src/app/core/model/cell.ts:11\n                            \n                        \n\n                \n                    \n                            \n                                    Parameters :\n                                    \n                                        \n                                            \n                                                Name\n                                                    Type\n                                                Optional\n                                                    Description\n                                            \n                                        \n                                        \n                                                \n                                                        setting\n                                                  \n                                                        \n                                                                        boolean\n                                                        \n                                                  \n                                                    \n                                                            No\n                                                    \n                                                    \n                                                        \n                                                                describes if the Cell should be set to heddle up or not. Null value leaves cell unset.\n\n                                                        \n                                                \n                                        \n                                    \n                            \n                    \n                \n            \n        \n\n\n            \n    \n    \n        Properties\n    \n    \n        \n            \n                \n                    \n                    \n                        is_set\n                        \n                    \n                \n            \n                \n                    \n                        Type :         boolean\n\n                    \n                \n                    \n                        \n                                Defined in src/app/core/model/cell.ts:11\n                        \n                    \n\n\n        \n    \n    \n        \n            \n                \n                    \n                    \n                        is_up\n                        \n                    \n                \n            \n                \n                    \n                        Type :         boolean\n\n                    \n                \n                    \n                        \n                                Defined in src/app/core/model/cell.ts:10\n                        \n                    \n\n\n        \n    \n\n\n            \n    \n    \n        Methods\n    \n    \n        \n            \n                \n                    \n                    \n                        getHeddle\n                        \n                    \n                \n            \n            \n                \ngetHeddle()\n                \n            \n\n\n            \n                \n                    Defined in src/app/core/model/cell.ts:84\n                \n            \n\n\n            \n                \n                    sets the value to true or false. If null, will unset the heddle\n\n\n                    \n                        Returns :         boolean\n\n                    \n                \n            \n        \n    \n    \n        \n            \n                \n                    \n                    \n                        isSet\n                        \n                    \n                \n            \n            \n                \nisSet()\n                \n            \n\n\n            \n                \n                    Defined in src/app/core/model/cell.ts:50\n                \n            \n\n\n            \n                \n\n                    \n                        Returns :         boolean\n\n                    \n                \n            \n        \n    \n    \n        \n            \n                \n                    \n                    \n                        isUp\n                        \n                    \n                \n            \n            \n                \nisUp()\n                \n            \n\n\n            \n                \n                    Defined in src/app/core/model/cell.ts:108\n                \n            \n\n\n            \n                \n\n                    \n                        Returns :         boolean\n\n                    \n                \n            \n        \n    \n    \n        \n            \n                \n                    \n                    \n                        reloadCell\n                        \n                    \n                \n            \n            \n                \nreloadCell(params: any)\n                \n            \n\n\n            \n                \n                    Defined in src/app/core/model/cell.ts:32\n                \n            \n\n\n            \n                \n                    this is called from the reload file. it takes a cell in the form of a list of params and sets the variables that are present\n\n\n                    \n                        Parameters :\n                        \n                        \n                            \n                                \n                                    Name\n                                    Type\n                                    Optional\n                                \n                            \n                            \n                                \n                                    params\n                                    \n                                                any\n                                    \n\n                                    \n                                        No\n                                    \n\n\n                                \n                            \n                        \n                    \n                    \n                    \n                    \n                        Returns :         void\n\n                    \n                    \n                        \n                    \n                \n            \n        \n    \n    \n        \n            \n                \n                    \n                    \n                        setHeddle\n                        \n                    \n                \n            \n            \n                \nsetHeddle(value: boolean)\n                \n            \n\n\n            \n                \n                    Defined in src/app/core/model/cell.ts:70\n                \n            \n\n\n            \n                \n                    sets the value to true or false. If null, will unset the heddle\n\n\n                    \n                        Parameters :\n                        \n                        \n                            \n                                \n                                    Name\n                                    Type\n                                    Optional\n                                \n                            \n                            \n                                \n                                    value\n                                    \n                                                boolean\n                                    \n\n                                    \n                                        No\n                                    \n\n\n                                \n                            \n                        \n                    \n                    \n                    \n                    \n                        Returns :         void\n\n                    \n                    \n                        \n                    \n                \n            \n        \n    \n    \n        \n            \n                \n                    \n                    \n                        setHeddleDown\n                        \n                    \n                \n            \n            \n                \nsetHeddleDown()\n                \n            \n\n\n            \n                \n                    Defined in src/app/core/model/cell.ts:59\n                \n            \n\n\n            \n                \n\n                    \n                        Returns :         void\n\n                    \n                \n            \n        \n    \n    \n        \n            \n                \n                    \n                    \n                        setHeddleUp\n                        \n                    \n                \n            \n            \n                \nsetHeddleUp()\n                \n            \n\n\n            \n                \n                    Defined in src/app/core/model/cell.ts:54\n                \n            \n\n\n            \n                \n\n                    \n                        Returns :         void\n\n                    \n                \n            \n        \n    \n    \n        \n            \n                \n                    \n                    \n                        toggleHeddle\n                        \n                    \n                \n            \n            \n                \ntoggleHeddle()\n                \n            \n\n\n            \n                \n                    Defined in src/app/core/model/cell.ts:91\n                \n            \n\n\n            \n                \n\n                    \n                        Returns :         void\n\n                    \n                \n            \n        \n    \n    \n        \n            \n                \n                    \n                    \n                        unsetHeddle\n                        \n                    \n                \n            \n            \n                \nunsetHeddle()\n                \n            \n\n\n            \n                \n                    Defined in src/app/core/model/cell.ts:101\n                \n            \n\n\n            \n                \n\n                    \n                        Returns :         void\n\n                    \n                \n            \n        \n    \n\n\n\n\n\n\n    \n\n\n    \n        export class Cell {\n  is_up: boolean;\n  is_set: boolean;\n  /**\n   * \n   * @param setting describes if the Cell should be set to heddle up or not. Null value leaves cell unset. \n   */\n  constructor(setting: boolean) {\n\n    if(setting === null || setting === undefined){\n      this.is_set = false;\n      this.is_up = false;\n    } \n    else {\n      this.is_set = true;\n      this.is_up = setting;\n    }\n  }\n\n  /**\n   * this is called from the reload file. it takes a cell in the form of a list of params and sets the variables that are present\n   * @param params \n   */\n  reloadCell(params: any){\n\n    if(params.is_up !== undefined){\n      this.is_set = true;\n      this.is_up = params.is_up;\n\n    }else{\n      this.is_set = false;\n      this.is_up = false;\n    }\n\n    if(params.is_set !== undefined){\n      this.is_set = params.is_set;\n    }\n  }\n\n\n  \n  isSet(){\n    return this.is_set;\n  }\n\n  setHeddleUp(){\n    this.is_up = true;\n    this.is_set = true;\n  }\n\n  setHeddleDown(){\n     this.is_set = true;\n     this.is_up = false;\n  }\n\n\n\n  /**\n   * sets the value to true or false. If null, will unset the heddle\n   * @param value \n   */\n  setHeddle(value:boolean){\n    if(value === null){\n      this.is_up = false;\n      this.is_set = false;\n    }else{\n      this.is_up = value;\n      this.is_set = true;\n    }\n  }\n\n    /**\n   * sets the value to true or false. If null, will unset the heddle\n   * @param value \n   */\n    getHeddle():boolean{\n       if(this.is_set){\n        return this.is_up;\n       }\n       return null;\n    }\n\n  toggleHeddle(){\n    if(!this.is_set){\n      this.is_set = true;\n      this.is_up = true;\n    }else{\n      this.is_up = !this.is_up;\n    }\n  }\n\n\n  unsetHeddle(){\n    this.is_up = false;\n    this.is_set = false;\n  }\n\n\n\n  isUp():boolean{\n    return this.is_up;\n  }\n\n\n\n  \n  \n}\n    \n\n\n\n\n\n\n\n\n\n\n                   \n    \n         results matching \"\"\n        \n    \n    \n        No results matching \"\"\n    \n\n"},"interfaces/ChainIndex.html":{"url":"interfaces/ChainIndex.html","title":"interface - ChainIndex","body":"\n                   \n\n\n\n\n\n\n\n\n\n\n\n\n\n\n  Interfaces\n  \n  ChainIndex\n\n\n\n        \n            Info\n        \n        \n            Source\n        \n\n\n\n    \n        \n            File\n        \n        \n            src/app/player/provider/sequencer.service.ts\n        \n\n\n            \n                Description\n            \n            \n                each chain op in the sequencer has an ID and\nits position in the sequencer\n\n            \n\n\n        \n            Index\n            \n                \n                    \n                        \n                            Properties\n                        \n                    \n                    \n                        \n                            \n                                \n                                        \n                                            id\n                                        \n                                \n                                \n                                        \n                                            pos\n                                        \n                                \n                            \n                        \n                    \n                \n            \n        \n\n\n\n            \n                Properties\n                    \n                        \n                                \n                                    \n                                        \n                                        id\n                                            \n                                                \n                                            \n                                        \n                                    \n                                \n                                \n                                    \n                                        id:         number\n\n                                    \n                                \n\n\n                                    \n                                        \n                                            Type :         number\n\n                                        \n                                    \n\n\n\n\n\n                        \n                    \n                    \n                        \n                                \n                                    \n                                        \n                                        pos\n                                            \n                                                \n                                            \n                                        \n                                    \n                                \n                                \n                                    \n                                        pos:         number\n\n                                    \n                                \n\n\n                                    \n                                        \n                                            Type :         number\n\n                                        \n                                    \n\n\n\n\n\n                        \n                    \n            \n    \n\n\n    \n        import { Injectable } from '@angular/core';\nimport { OpSequencer, PlayerOp, ChainOp, makeOpSequencer, makeChainOp } from '../model/op_mappings';\n\n/** \n * each chain op in the sequencer has an ID and \n * its position in the sequencer \n */\ninterface ChainIndex {\n  id: number,\n  pos: number, // position in ops array\n}\n\n/** \n * I separated the sequencer into a generic object class\n * AND an Angular service that extends the class. Hopefully\n * that isn't clunky, but it does let me separate methods\n * that are useful to call in the HTML, from the methods\n * that are less often called in HTML\n */\n@Injectable({\n  providedIn: 'root'\n})\nexport class SequencerService extends OpSequencer {\n  // seq_array: OpSequencer;\n  selecting: boolean = false;\n  chains: Array = []; // a number pointing to index in sequencer ops\n\n  // get pos() { return this.seq_array.pos; }\n  // get ops() { return this.seq_array ? this.seq_array.ops : []; }\n  // get current() { return this.seq_array.current; }\n  get active() { return (this.readyToWeave ? true : false); }\n  get pos() { return this._pos; }\n\n  constructor() {\n    super();\n    // this.seq_array = new OpSequencer();\n  }\n\n  addPedals(fwd_pedal: number, select_pedal_a: number, select_pedal_b?: number) {\n    this.mapPedal(fwd_pedal, 'fwd');\n    this.mapPedal(select_pedal_a, 'sel-next');\n    if (select_pedal_b) {\n      this.mapPedal(select_pedal_b, 'sel-back');\n    }\n  }\n\n  addSingleOp(o: PlayerOp) {\n    if (this.active) {\n      this.addOp(o);\n      // console.log(o);\n      // console.log(this.seq);\n    } else {\n      console.log('no sequencer to add to!');\n    }\n  }\n\n  addChainOp(o: PlayerOp) { \n    let ch = makeChainOp([o]);\n    ch.id = this.chains.length;\n    this.chains.push({id: ch.id, pos: this.addOp(ch)});\n  }\n\n  addToChain(ch_id: number, o: PlayerOp) {\n    let ch = this.ops[this.chains[ch_id].pos] as ChainOp;\n    this.ops[this.chains[ch_id].pos] = makeChainOp(ch.ops.concat([o]));\n    console.log(this.ops);\n  }\n\n  // removeOp() { this.seq_array.removeOp(); }\n  // nextOp() { this.seq_array.nextOp(); }\n  // prevOp() { this.seq_array.prevOp(); }\n}\n\n    \n\n\n\n\n\n\n\n\n\n                   \n    \n         results matching \"\"\n        \n    \n    \n        No results matching \"\"\n    \n\n"},"interfaces/ChainOp.html":{"url":"interfaces/ChainOp.html","title":"interface - ChainOp","body":"\n                   \n\n\n\n\n\n\n\n\n\n\n\n\n\n\n  Interfaces\n  \n  ChainOp\n\n\n\n        \n            Info\n        \n        \n            Source\n        \n\n\n\n    \n        \n            File\n        \n        \n            src/app/player/model/op_mappings.ts\n        \n\n\n            \n                Description\n            \n            \n                Op chain:\n\n1 pedal, multiple operations in a chain (array)\nif pedal, perform() each Op in sequence\n\n\n            \n\n            \n                Extends\n            \n            \n                        PedalEvent\n            \n\n        \n            Index\n            \n                \n                    \n                        \n                            Properties\n                        \n                    \n                    \n                        \n                            \n                                \n                                        \n                                            ops\n                                        \n                                \n                                \n                                        \n                                            pedal\n                                        \n                                \n                            \n                        \n                    \n                \n            \n        \n\n\n\n            \n                Properties\n                    \n                        \n                                \n                                    \n                                        \n                                        ops\n                                            \n                                                \n                                            \n                                        \n                                    \n                                \n                                \n                                    \n                                        ops:         Array\n\n                                    \n                                \n\n\n                                    \n                                        \n                                            Type :         Array\n\n                                        \n                                    \n\n\n\n\n\n                        \n                    \n                    \n                        \n                                \n                                    \n                                        \n                                        pedal\n                                            \n                                                \n                                            \n                                        \n                                    \n                                \n                                \n                                    \n                                        pedal:         number\n\n                                    \n                                \n\n\n                                    \n                                        \n                                            Type :         number\n\n                                        \n                                    \n\n\n\n\n\n                        \n                    \n            \n    \n\n\n    \n        import { Draft } from \"../../core/model/datatypes\";\nimport { wefts } from \"../../core/model/drafts\";\nimport { OpInput, TreeOperation as TreeOp, SingleInlet,\n  BaseOp as Op, BuildableOperation as GenericOp, \n  Seed, Pipe, AllRequired, DraftsOptional, \n  getDefaultParams, \n  ParamValue\n} from \"../../mixer/model/operation\";\nimport { PlayerState, initState, copyState } from \"./state\";\n\nimport { OpSequencer, makeOpSequencer } from \"./sequencer\";\nexport * from \"./sequencer\";\n\nexport interface PlayerOp {\n  id?: number,\n  name: string,\n  struct_id?: number,\n  dx?: string,\n  op?: GenericOp,\n  weavingOnly?: boolean,\n  chain?: boolean,\n  perform: (init: PlayerState) => Promise;\n}\nexport type SingleOp = PlayerOp;\n\n/** @const forward a player-specific function to progress through the draft */\nexport const forward: PlayerOp = {\n  name: 'forward',\n  perform: (init: PlayerState) => { \n    let res = copyState(init);\n    res.row = (init.row+1) % wefts(init.draft.drawdown);\n    res.pedal = 'forward';\n    if (res.weaving) res.numPicks++;\n    return Promise.resolve(res); \n  }\n}\n\n/** @const refresh a player-specific function to progress through the draft (re-sends the row to give more time) */\nexport const refresh: PlayerOp = {\n  name: 'refresh',\n  perform: (init: PlayerState) => { \n    let res = copyState(init);\n    if (res.weaving) res.numPicks++;\n    return Promise.resolve(res);\n  }\n}\n\n/** @const reverse a player-specific function to progress backwards through the draft */\nexport const reverse: PlayerOp = {\n  name: 'reverse',\n  perform: (init: PlayerState) => { \n    let res = copyState(init);\n    res.row = (init.row+wefts(init.draft.drawdown)-1) % wefts(init.draft.drawdown);\n    res.pedal = 'reverse';\n    if (res.weaving) res.numPicks++;\n    return Promise.resolve(res);\n  }\n}\n\nexport function playerOpFrom(op: GenericOp, params?: Array) {\n  // use \"rotate\" op as an example\n  let input_params = params ? params : getDefaultParams(op);\n  let perform;\n  if (op.classifier.type === 'pipe') {\n    const pipeOp = op as Op;\n    perform = function(init: PlayerState) {\n      let res = copyState(init);\n      res.draft = pipeOp.perform(init.draft, input_params);\n      res.row = (init.row) % wefts(res.draft.drawdown);\n      res.pedal = op.name;\n      return Promise.resolve(res);\n    }\n  } else if (op.classifier.type === 'seed') {\n    const seedOp = op as Op;\n    perform = function(init: PlayerState) {\n      let res = copyState(init);\n      res.draft = seedOp.perform(input_params);\n      res.row = (init.row) % wefts(res.draft.drawdown);\n      res.pedal = op.name;\n      return Promise.resolve(res);\n    }\n  }\n  \n  /** @TODO */\n  var p: PlayerOp = { \n    name: op.name,\n    dx: op.dx,\n    perform: perform\n  }\n  return p;\n}\n\n\n/** \n * @type \n * a TreeOperation is compatible with the player if it takes one or zero draft inputs \n * and outputs one draft.\n */\ntype PlayableTreeOp = TreeOp & \n  ( { inlets: [ SingleInlet ] } | \n    { inlets: [] });\n\n/** @function playerOpFromTree (untested) */\nfunction playerOpFromTree(op: PlayableTreeOp) {\n  let perform: PlayerOp[\"perform\"];\n  let param_input: OpInput = { op_name: op.name, drafts: [], params: getDefaultParams(op), inlet: -1 }\n  if (op.inlets.length == 0) {\n    perform = function(init: PlayerState) {\n      return op.perform([param_input]).then((output) => {\n        return { \n          draft: output[0], \n          row: init.row, \n          weaving: init.weaving, \n          pedal: op.name, \n          numPicks: init.numPicks \n        };\n      });\n    }\n  } else {\n    perform = function(init: PlayerState) {\n      let draft_input: OpInput = { op_name: 'child', drafts: [init.draft], params: [], inlet: 0}\n      return op.perform([param_input, draft_input]).then((output) => {\n        return { \n          draft: output[0], \n          row: init.row, \n          weaving: init.weaving,\n          pedal: op.name,\n          numPicks: init.numPicks };\n      });\n    }\n  }\n\n  var p: PlayerOp = { \n    name: op.name,\n    perform: perform\n  }\n  return p;\n}\n\n/** things that can happen in response to a pedal */\nexport interface PedalEvent {\n  id?: number,\n  pedal?: number,\n  name: string\n  perform: (init: PlayerState, ...args) => Promise;\n}\n\n/** \n * Basic combination: \n *  - 1 pedal, 1 operation\n *  - if pedal, then operation perform() \n * @param pedal ID number of pedal\n * @param op    ID number of Operation (assigned in Draft Player service)\n */\nexport interface PairedOp extends PedalEvent {\n  pedal:  number,\n  op:     PlayerOp,\n}\n\n// this ...args thing is such a hack\nexport function makePairedOp(p: number, op: PlayerOp): PairedOp {\n  let jankPerform = (init: PlayerState, ...args) => {\n    return op.perform(init);\n  }\n  return {\n    pedal: p,\n    name: op.name,\n    op: op,\n    perform: jankPerform\n  }\n}\n\n/**\n * Op chain:\n * - 1 pedal, multiple operations in a chain (array)\n * - if pedal, perform() each Op in sequence\n * @param pedal ID number of pedals\n * @param ops   array of Op ID numbers to execute in order\n */\nexport interface ChainOp extends PedalEvent{\n  pedal:  number,\n  ops:    Array,\n}\n\nexport function makeBlankChainOp(p?: number): ChainOp {\n  let res: ChainOp = {\n    pedal: -1,\n    name: \"\",\n    ops: [],\n    perform: (init: PlayerState, ...args) => {return Promise.resolve(init);}\n  }\n  \n  if (p) res.pedal = p;\n  return res;\n}\n\nexport function makeChainOp(ops: Array, p?: number): ChainOp {\n  let res = makeBlankChainOp(p);\n  res.name = \"ch\";\n  for (let o of ops) {\n    res.name += \"-\" + o.name;\n  }\n\n  res.ops = ops;\n  res.perform = (init: PlayerState, ...args) => {\n    let newState = copyState(init);\n    newState.pedal = \"ch\";\n    let d: Draft = init.draft;\n    for (let o of ops) {\n      if (o.op.classifier.type == 'seed') {\n        let base_op = o.op as Op;\n        d = base_op.perform(getDefaultParams(base_op));\n      } else if (o.op.classifier.type == 'pipe') {\n        let base_op = o.op as Op;\n        d = base_op.perform(d, getDefaultParams(base_op));\n      }\n      newState.pedal += \"-\" + o.name;\n    }\n\n    newState.draft = d;\n\n    return Promise.resolve(newState);\n  }\n\n  console.log('op chain: ', res);\n\n  return res;\n}\n\nexport type PedalOpMapping = Array;// & {\n//   [id: number]: PedalAction\n// }\n\nexport type MappingShapes = {\n  'pairing': PairedOp,\n  'chain': ChainOp,\n  'sequencer': OpSequencer\n};\n\nexport type PedalAction = MappingShapes[keyof MappingShapes];\n\nexport type MappingType = 'pairing' | 'chain' | 'sequencer';\n    \n\n\n\n\n\n\n\n\n\n                   \n    \n         results matching \"\"\n        \n    \n    \n        No results matching \"\"\n    \n\n"},"components/ConnectionComponent.html":{"url":"components/ConnectionComponent.html","title":"component - ConnectionComponent","body":"\n                   \n\n\n\n\n\n  Components\n  \n  ConnectionComponent\n\n\n\n        \n            Info\n        \n        \n            Source\n        \n        \n            Template\n        \n        \n            Styles\n        \n        \n            DOM Tree\n        \n\n\n\n    \n    File\n\n\n    src/app/mixer/palette/connection/connection.component.ts\n\n\n\n\n\n    \n        Implements\n    \n    \n                    OnInit\n    \n\n\n\n    Metadata\n    \n        \n\n\n\n\n\n\n\n\n\n\n\n            \n                selector\n                app-connection\n            \n\n            \n                styleUrls\n                ./connection.component.scss\n            \n\n\n\n            \n                templateUrl\n                ./connection.component.html\n            \n\n\n\n\n\n\n\n\n        \n    \n\n\n    \n    Index\n    \n        \n                \n                    \n                        Properties\n                    \n                \n                \n                    \n                        \n                            \n                                b_from\n                            \n                            \n                                b_to\n                            \n                            \n                                bounds\n                            \n                            \n                                disable_drag\n                            \n                            \n                                from\n                            \n                            \n                                no_draw\n                            \n                            \n                                orientation_x\n                            \n                            \n                                orientation_y\n                            \n                            \n                                svg\n                            \n                            \n                                to\n                            \n                            \n                                to_ndx\n                            \n                            \n                                    Public\n                                tree\n                            \n                        \n                    \n                \n\n                \n                    \n                        Methods\n                    \n                \n                \n                    \n                        \n                            \n                                calculateBounds\n                            \n                            \n                                disableDrag\n                            \n                            \n                                drawConnection\n                            \n                            \n                                drawForPrint\n                            \n                            \n                                enableDrag\n                            \n                            \n                                ngAfterViewInit\n                            \n                            \n                                ngOnInit\n                            \n                            \n                                rescale\n                            \n                            \n                                updateFromPosition\n                            \n                            \n                                updateToPosition\n                            \n                        \n                    \n                \n\n                \n                    \n                        Inputs\n                    \n                \n                \n                    \n                        \n                            \n                                default_cell_size\n                            \n                            \n                                id\n                            \n                            \n                                scale\n                            \n                        \n                    \n                \n\n\n\n\n        \n    \n\n\n    \n    Constructor\n        \n            \n                \n                    \nconstructor(tree: TreeService)\n                    \n                \n                        \n                            \n                                Defined in src/app/mixer/palette/connection/connection.component.ts:41\n                            \n                        \n\n                \n                    \n                            \n                                    Parameters :\n                                    \n                                        \n                                            \n                                                Name\n                                                    Type\n                                                Optional\n                                            \n                                        \n                                        \n                                                \n                                                        tree\n                                                  \n                                                        \n                                                                        TreeService\n                                                        \n                                                  \n                                                    \n                                                            No\n                                                    \n                                                    \n                                                \n                                        \n                                    \n                            \n                    \n                \n            \n        \n\n\n    \n    Inputs\n        \n            \n                \n                    \n                        \n                        default_cell_size\n                    \n                \n                \n                    \n                        Type :         number\n\n                    \n                \n                        \n                            \n                                    Defined in src/app/mixer/palette/connection/connection.component.ts:18\n                            \n                        \n            \n        \n        \n            \n                \n                    \n                        \n                        id\n                    \n                \n                \n                    \n                        Type :         number\n\n                    \n                \n                        \n                            \n                                    Defined in src/app/mixer/palette/connection/connection.component.ts:16\n                            \n                        \n            \n        \n        \n            \n                \n                    \n                        \n                        scale\n                    \n                \n                \n                    \n                        Type :         number\n\n                    \n                \n                        \n                            \n                                    Defined in src/app/mixer/palette/connection/connection.component.ts:17\n                            \n                        \n            \n        \n\n\n\n\n    \n    \n    \n        Methods\n    \n    \n        \n            \n                \n                    \n                    \n                        calculateBounds\n                        \n                    \n                \n            \n            \n                \ncalculateBounds()\n                \n            \n\n\n            \n                \n                    Defined in src/app/mixer/palette/connection/connection.component.ts:141\n                \n            \n\n\n            \n                \n\n                    \n                        Returns :         void\n\n                    \n                \n            \n        \n    \n    \n        \n            \n                \n                    \n                    \n                        disableDrag\n                        \n                    \n                \n            \n            \n                \ndisableDrag()\n                \n            \n\n\n            \n                \n                    Defined in src/app/mixer/palette/connection/connection.component.ts:75\n                \n            \n\n\n            \n                \n\n                    \n                        Returns :         void\n\n                    \n                \n            \n        \n    \n    \n        \n            \n                \n                    \n                    \n                        drawConnection\n                        \n                    \n                \n            \n            \n                \ndrawConnection()\n                \n            \n\n\n            \n                \n                    Defined in src/app/mixer/palette/connection/connection.component.ts:167\n                \n            \n\n\n            \n                \n\n                    \n                        Returns :         void\n\n                    \n                \n            \n        \n    \n    \n        \n            \n                \n                    \n                    \n                        drawForPrint\n                        \n                    \n                \n            \n            \n                \ndrawForPrint(canvas, cx, scale: number)\n                \n            \n\n\n            \n                \n                    Defined in src/app/mixer/palette/connection/connection.component.ts:185\n                \n            \n\n\n            \n                \n\n                    \n                        Parameters :\n                        \n                        \n                            \n                                \n                                    Name\n                                    Type\n                                    Optional\n                                \n                            \n                            \n                                \n                                    canvas\n                                    \n                                    \n\n                                    \n                                        No\n                                    \n\n\n                                \n                                \n                                    cx\n                                    \n                                    \n\n                                    \n                                        No\n                                    \n\n\n                                \n                                \n                                    scale\n                                    \n                                                number\n                                    \n\n                                    \n                                        No\n                                    \n\n\n                                \n                            \n                        \n                    \n                    \n                    \n                    \n                        Returns :         void\n\n                    \n                    \n                        \n                    \n                \n            \n        \n    \n    \n        \n            \n                \n                    \n                    \n                        enableDrag\n                        \n                    \n                \n            \n            \n                \nenableDrag()\n                \n            \n\n\n            \n                \n                    Defined in src/app/mixer/palette/connection/connection.component.ts:79\n                \n            \n\n\n            \n                \n\n                    \n                        Returns :         void\n\n                    \n                \n            \n        \n    \n    \n        \n            \n                \n                    \n                    \n                        ngAfterViewInit\n                        \n                    \n                \n            \n            \n                \nngAfterViewInit()\n                \n            \n\n\n            \n                \n                    Defined in src/app/mixer/palette/connection/connection.component.ts:59\n                \n            \n\n\n            \n                \n\n                    \n                        Returns :         void\n\n                    \n                \n            \n        \n    \n    \n        \n            \n                \n                    \n                    \n                        ngOnInit\n                        \n                    \n                \n            \n            \n                \nngOnInit()\n                \n            \n\n\n            \n                \n                    Defined in src/app/mixer/palette/connection/connection.component.ts:47\n                \n            \n\n\n            \n                \n\n                    \n                        Returns :         void\n\n                    \n                \n            \n        \n    \n    \n        \n            \n                \n                    \n                    \n                        rescale\n                        \n                    \n                \n            \n            \n                \nrescale(scale: number)\n                \n            \n\n\n            \n                \n                    Defined in src/app/mixer/palette/connection/connection.component.ts:207\n                \n            \n\n\n            \n                \n                    rescales this compoment.\nCall after the operation and subdraft connections have been updated.\n\n\n                    \n                        Parameters :\n                        \n                        \n                            \n                                \n                                    Name\n                                    Type\n                                    Optional\n                                \n                            \n                            \n                                \n                                    scale\n                                    \n                                                number\n                                    \n\n                                    \n                                        No\n                                    \n\n\n                                \n                            \n                        \n                    \n                    \n                    \n                    \n                        Returns :         void\n\n                    \n                    \n                        \n                    \n                \n            \n        \n    \n    \n        \n            \n                \n                    \n                    \n                        updateFromPosition\n                        \n                    \n                \n            \n            \n                \nupdateFromPosition(from: any)\n                \n            \n\n\n            \n                \n                    Defined in src/app/mixer/palette/connection/connection.component.ts:119\n                \n            \n\n\n            \n                \n                    if every connection goes from one node to another, the from node depends on the kind of object\n\n\n                    \n                        Parameters :\n                        \n                        \n                            \n                                \n                                    Name\n                                    Type\n                                    Optional\n                                    Description\n                                \n                            \n                            \n                                \n                                    from\n                                    \n                                                any\n                                    \n\n                                    \n                                        No\n                                    \n\n\n                                    \n                                        the id of the component this connection goes to\n\n                                    \n                                \n                            \n                        \n                    \n                    \n                    \n                    \n                        Returns :         void\n\n                    \n                    \n                        \n                    \n                \n            \n        \n    \n    \n        \n            \n                \n                    \n                    \n                        updateToPosition\n                        \n                    \n                \n            \n            \n                \nupdateToPosition(to: OperationComponent | SubdraftComponent)\n                \n            \n\n\n            \n                \n                    Defined in src/app/mixer/palette/connection/connection.component.ts:89\n                \n            \n\n\n            \n                \n                    if every connection goes from one node to another, the to node is always the topleft corner\nunless the to node is a dynamic operation, in which case we must move to an inlet.\n\n\n                    \n                        Parameters :\n                        \n                        \n                            \n                                \n                                    Name\n                                    Type\n                                    Optional\n                                    Description\n                                \n                            \n                            \n                                \n                                    to\n                                    \n                                            OperationComponent | SubdraftComponent\n                                    \n\n                                    \n                                        No\n                                    \n\n\n                                    \n                                        the id of the component this connection goes to\n\n                                    \n                                \n                            \n                        \n                    \n                    \n                    \n                    \n                        Returns :         void\n\n                    \n                    \n                        \n                    \n                \n            \n        \n    \n\n    \n    \n    \n        Properties\n    \n    \n        \n            \n                \n                    \n                    \n                        b_from\n                        \n                    \n                \n            \n                \n                    \n                        Type :         Point\n\n                    \n                \n                    \n                        \n                                Defined in src/app/mixer/palette/connection/connection.component.ts:25\n                        \n                    \n\n\n        \n    \n    \n        \n            \n                \n                    \n                    \n                        b_to\n                        \n                    \n                \n            \n                \n                    \n                        Type :         Point\n\n                    \n                \n                    \n                        \n                                Defined in src/app/mixer/palette/connection/connection.component.ts:26\n                        \n                    \n\n\n        \n    \n    \n        \n            \n                \n                    \n                    \n                        bounds\n                        \n                    \n                \n            \n                \n                    \n                        Type :         Bounds\n\n                    \n                \n                \n                    \n                        Default value : {\n    topleft: {x: 0, y:0},\n    width: 0,\n    height:0\n  }\n                    \n                \n                    \n                        \n                                Defined in src/app/mixer/palette/connection/connection.component.ts:33\n                        \n                    \n\n\n        \n    \n    \n        \n            \n                \n                    \n                    \n                        disable_drag\n                        \n                    \n                \n            \n                \n                    \n                        Type :         boolean\n\n                    \n                \n                \n                    \n                        Default value : true\n                    \n                \n                    \n                        \n                                Defined in src/app/mixer/palette/connection/connection.component.ts:29\n                        \n                    \n\n\n        \n    \n    \n        \n            \n                \n                    \n                    \n                        from\n                        \n                    \n                \n            \n                \n                    \n                        Type :         number\n\n                    \n                \n                    \n                        \n                                Defined in src/app/mixer/palette/connection/connection.component.ts:21\n                        \n                    \n\n\n        \n    \n    \n        \n            \n                \n                    \n                    \n                        no_draw\n                        \n                    \n                \n            \n                \n                    \n                        Type :         boolean\n\n                    \n                \n                    \n                        \n                                Defined in src/app/mixer/palette/connection/connection.component.ts:41\n                        \n                    \n\n\n        \n    \n    \n        \n            \n                \n                    \n                    \n                        orientation_x\n                        \n                    \n                \n            \n                \n                    \n                        Type :         boolean\n\n                    \n                \n                \n                    \n                        Default value : true\n                    \n                \n                    \n                        \n                                Defined in src/app/mixer/palette/connection/connection.component.ts:30\n                        \n                    \n\n\n        \n    \n    \n        \n            \n                \n                    \n                    \n                        orientation_y\n                        \n                    \n                \n            \n                \n                    \n                        Type :         boolean\n\n                    \n                \n                \n                    \n                        Default value : true\n                    \n                \n                    \n                        \n                                Defined in src/app/mixer/palette/connection/connection.component.ts:31\n                        \n                    \n\n\n        \n    \n    \n        \n            \n                \n                    \n                    \n                        svg\n                        \n                    \n                \n            \n                \n                    \n                        Type :     HTMLElement\n\n                    \n                \n                    \n                        \n                                Defined in src/app/mixer/palette/connection/connection.component.ts:39\n                        \n                    \n\n\n        \n    \n    \n        \n            \n                \n                    \n                    \n                        to\n                        \n                    \n                \n            \n                \n                    \n                        Type :         number\n\n                    \n                \n                    \n                        \n                                Defined in src/app/mixer/palette/connection/connection.component.ts:22\n                        \n                    \n\n\n        \n    \n    \n        \n            \n                \n                    \n                    \n                        to_ndx\n                        \n                    \n                \n            \n                \n                    \n                        Type :         number\n\n                    \n                \n                    \n                        \n                                Defined in src/app/mixer/palette/connection/connection.component.ts:23\n                        \n                    \n\n\n        \n    \n    \n        \n            \n                \n                    \n                    \n                            Public\n                        tree\n                        \n                    \n                \n            \n                \n                    \n                        Type :         TreeService\n\n                    \n                \n                    \n                        \n                                Defined in src/app/mixer/palette/connection/connection.component.ts:43\n                        \n                    \n\n\n        \n    \n\n\n\n\n\n    \n        import { Component, OnInit, Input } from '@angular/core';\nimport { i } from 'mathjs';\nimport { Bounds, Point } from '../../../core/model/datatypes';\nimport { TreeService } from '../../provider/tree.service';\nimport { OperationComponent } from '../operation/operation.component';\nimport { SubdraftComponent } from '../subdraft/subdraft.component';\n\n@Component({\n  selector: 'app-connection',\n  templateUrl: './connection.component.html',\n  styleUrls: ['./connection.component.scss']\n})\nexport class ConnectionComponent implements OnInit {\n\n\n  @Input() id: number;\n  @Input() scale: number;\n  @Input() default_cell_size: number;\n\n\n  from: number; \n  to: number; \n  to_ndx: number; \n  \n  b_from: Point;\n  b_to: Point;\n\n\n  disable_drag:boolean = true;\n  orientation_x: boolean = true;\n  orientation_y: boolean = true;\n\n  bounds: Bounds = {\n    topleft: {x: 0, y:0},\n    width: 0,\n    height:0\n  };\n\n  svg: HTMLElement;\n\n  no_draw: boolean;\n\n  constructor(public tree: TreeService) { \n\n  }\n\n  ngOnInit() {\n    const treenode = this.tree.getTreeNode(this.id);\n    const from_io = treenode.inputs[0];\n    const to_io = treenode.outputs[0];\n\n    this.from = from_io.tn.node.id;\n    this.to = to_io.tn.node.id;\n\n    this.no_draw = this.tree.getType(this.from) === 'op' && this.tree.hasSingleChild(this.from);\n\n  }\n\n  ngAfterViewInit(){\n\n    this.svg = document.getElementById('svg-'+this.id.toString());\n    const to_comp = this.tree.getComponent(this.to);\n    \n     if(to_comp !== null){\n      this.b_to = {\n        x:  to_comp.bounds.topleft.x + 15*this.scale/this.default_cell_size,\n        y: to_comp.bounds.topleft.y\n      };      this.updateFromPosition(this.tree.getComponent(this.from));\n      this.updateToPosition( to_comp);\n     }\n  }\n\n\n\n  disableDrag(){\n    this.disable_drag = true;\n  }\n\n  enableDrag(){\n    //there is never a case where this should be enabled so set to true\n    this.disable_drag = true;\n  }\n\n  /**\n   * if every connection goes from one node to another, the to node is always the topleft corner\n   * unless the to node is a dynamic operation, in which case we must move to an inlet. \n   * @param to the id of the component this connection goes to\n   */\n  updateToPosition(to: OperationComponent | SubdraftComponent){\n\n    if(to.id != this.to) console.error(\"attempting to move wrong TO connection\", to.id, this.to);\n   \n    this.b_to = {\n      x:  to.bounds.topleft.x + 3*this.scale/this.default_cell_size +  15* this.scale/this.default_cell_size,\n      y: to.bounds.topleft.y\n    };\n\n    if(this.tree.getType(to.id) === 'op'){\n      // get the inlet value \n      const ndx = this.tree.getInletOfCxn(to.id, this.id);\n      if(ndx !== -1){\n        const element = document.getElementById('inlet'+to.id+\"-\"+ndx);\n        if(element !== undefined && element !== null){\n          const left_offset = element.offsetLeft;\n          this.b_to = {x: to.bounds.topleft.x + left_offset*this.scale/this.default_cell_size + 15* this.scale/this.default_cell_size, y: to.bounds.topleft.y}\n        }\n      }\n    }\n\n    this.calculateBounds();\n    this.drawConnection();\n  }\n\n\n  /**\n   * if every connection goes from one node to another, the from node depends on the kind of object\n   * @param from the id of the component this connection goes to\n   */\n  updateFromPosition(from: any){\n\n    if(from.id != this.from) console.error(\"attempting to move wrong FROM connection\", from.id, this.from);\n\n    if((from).draft_visible){\n      const top_offset = document.getElementById(from.id+\"-out\").offsetTop;\n\n      this.b_from = \n      {x: from.bounds.topleft.x+ 3*this.scale, \n       y: from.bounds.topleft.y + (top_offset+30)*this.scale/this.default_cell_size};\n    }else{\n      this.b_from = \n      {x: from.bounds.topleft.x + 3*this.scale, \n       y: from.bounds.topleft.y + 30};\n    }\n\n    this.calculateBounds();\n    this.drawConnection();\n    \n  }\n\n\n  calculateBounds(){\n    \n    let p1: Point = this.b_from;\n    let p2: Point = this.b_to;\n    let bottomright: Point = {x:0, y:0};\n\n    if(p1 === undefined || p2 === undefined) return;\n\n\n    this.orientation_x = true;\n    this.orientation_y = true;\n    \n    if(p2.x  ' ;\n    }else if(!this.orientation_x && !this.orientation_y){\n      this.svg.innerHTML = '  ' ;\n    }else if(!this.orientation_x && this.orientation_y){\n      this.svg.innerHTML = '  ' ;\n    }else{\n      this.svg.innerHTML = '  ' ;\n\n    }\n  \n\n  }\n\n  drawForPrint(canvas, cx, scale: number) {\n\n    // cx.beginPath();\n    // cx.strokeStyle = \"#ff4081\";\n    // cx.setLineDash([scale, 2]);\n    // cx.lineWidth = 2;\n    // // this.cx.strokeRect(0,0, this.bounds.width, this.bounds.height);\n    // if(this.orientation){\n    //   cx.moveTo(this.bounds.topleft.x, this.bounds.topleft.y);\n    //   cx.lineTo(this.bounds.width + this.bounds.topleft.x, this.bounds.topleft.y + this.bounds.height);\n    // }else{\n    //   cx.moveTo(this.bounds.topleft.x, this.bounds.height+ this.bounds.topleft.y);\n    //   cx.lineTo(this.bounds.width + this.bounds.topleft.x, this.bounds.topleft.y);\n    // }\n    // cx.stroke();\n  }\n\n  /**\n   * rescales this compoment. \n   * Call after the operation and subdraft connections have been updated. \n   * @param scale \n   */\n  rescale(scale:number){\n\n    const from_comp: any = this.tree.getComponent(this.from);\n    const to_comp: any = this.tree.getComponent(this.to);\n\n    this.updateFromPosition(from_comp);\n    this.updateToPosition(to_comp);\n   \n    // this.b_from = {x: from_comp.bounds.topleft.x, y: from_comp.bounds.topleft.y + from_comp.bounds.height};\n    // this.b_to = {x: to_comp.bounds.topleft.x, y: to_comp.bounds.topleft.y};\n     \n    this.scale = scale;\n    this.calculateBounds();\n    this.drawConnection();\n\n    // const container: HTMLElement = document.getElementById('cxn-'+this.id);\n    // container.style.transformOrigin = 'top left';\n    // container.style.transform = 'scale(' + this.scale/5 + ')';\n\n  }\n\n\n}\n\n    \n\n    \n        \n\n\n\n  \n\n\n\n\n\n\n    \n\n    \n                \n                    ./connection.component.scss\n                \n                canvas{\n    position: absolute;\n    top:0;\n    left: 0;\n}\n\n.connection-container{\n    position: absolute;\n    top: 0px;\n    left: 0px;\n}\n    \n\n    \n        \n        \n            \n                Legend\n            \n            \n                Html element\n            \n            \n                Component\n            \n            \n                Html element with directive\n            \n        \n    \n\n    \n\n\n\n\n\n\n        var COMPONENT_TEMPLATE = '  '\n    var COMPONENTS = [{'name': 'ConnectionComponent', 'selector': 'app-connection'},{'name': 'DraftdetailComponent', 'selector': 'app-draftdetail'},{'name': 'ImageComponent', 'selector': 'app-image'},{'name': 'InletComponent', 'selector': 'app-inlet'},{'name': 'MixerComponent', 'selector': 'app-mixer'},{'name': 'MixerViewComponent', 'selector': 'app-mixerview'},{'name': 'NoteComponent', 'selector': 'app-note'},{'name': 'OperationComponent', 'selector': 'app-operation'},{'name': 'OpHelpModal', 'selector': 'app-ophelp'},{'name': 'OpsComponent', 'selector': 'app-ops'},{'name': 'OpSequencerComponent', 'selector': 'app-op-sequencer'},{'name': 'PaletteComponent', 'selector': 'app-palette'},{'name': 'ParameterComponent', 'selector': 'app-parameter'},{'name': 'PlayerComponent', 'selector': 'app-player'},{'name': 'SnackbarComponent', 'selector': 'app-snackbar'},{'name': 'SubdraftComponent', 'selector': 'app-subdraft'},{'name': 'VirtualPedalsComponent', 'selector': 'app-virtual-pedals'},{'name': 'WeavingStateComponent', 'selector': 'app-weaving-state'}];\n    var DIRECTIVES = [{'name': 'MarqueeComponent', 'selector': 'app-marquee'},{'name': 'SelectionComponent', 'selector': 'app-selection'}];\n    var ACTUAL_COMPONENT = {'name': 'ConnectionComponent'};\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n                   \n    \n         results matching \"\"\n        \n    \n    \n        No results matching \"\"\n    \n\n"},"interfaces/Crossing.html":{"url":"interfaces/Crossing.html","title":"interface - Crossing","body":"\n                   \n\n\n\n\n\n\n\n\n\n\n\n\n\n\n  Interfaces\n  \n  Crossing\n\n\n\n        \n            Info\n        \n        \n            Source\n        \n\n\n\n    \n        \n            File\n        \n        \n            src/app/core/model/datatypes/yarnsim.ts\n        \n\n\n            \n                Description\n            \n            \n                A yarn cross describes the relationship betwen two draft cells\nread from top to bottom. This is used within the sparce\ndraft representation, stores only \"warp\" crossings\n\n            \n\n\n        \n            Index\n            \n                \n                    \n                        \n                            Properties\n                        \n                    \n                    \n                        \n                            \n                                \n                                        \n                                            j\n                                        \n                                \n                                \n                                        \n                                            type\n                                        \n                                \n                            \n                        \n                    \n                \n            \n        \n\n\n\n            \n                Properties\n                    \n                        \n                                \n                                    \n                                        \n                                        j\n                                            \n                                                \n                                            \n                                        \n                                    \n                                \n                                \n                                    \n                                        j:         number\n\n                                    \n                                \n\n\n                                    \n                                        \n                                            Type :         number\n\n                                        \n                                    \n\n\n\n\n\n                        \n                    \n                    \n                        \n                                \n                                    \n                                        \n                                        type\n                                            \n                                                \n                                            \n                                        \n                                    \n                                \n                                \n                                    \n                                        type:         crossType\n\n                                    \n                                \n\n\n                                    \n                                        \n                                            Type :         crossType\n\n                                        \n                                    \n\n\n\n\n\n                        \n                    \n            \n    \n\n\n    \n        export interface Vertex {\n  x_pcent: number;\n  y: number;\n}\n\n/**\n * Used to draw on screen paths, refers to x, y coordiantes relative to the draft simulation\n * Used only in yarn sim\n * @param draft_ndx - the row id within the draft of this yarn\n * @param material_id the material id at this row\n * @param verticies - list of points that form this path\n */\nexport interface YarnPath {\n\tdraft_ndx: number;\n  material_id: number;\n  verticies: Array;\n}\n\n/**\n * describes the relationship between weft rows along the same warp\n */\nexport type crossType = \n \t{t:boolean, b:boolean} |\n  {t:null, b:null} | //\"FLOAT\",\n  {t:null, b:true} | //\"UNSET_UNDER\"\n  {t:null, b:false} | //\"UNSET_OVER\"\n  {t:true, b:null} | //\"UNDER_UNSET\"\n  {t:false, b:null} | //\"OVER_UNSET\"\n  {t:false, b:true} | //\"OVER_UNDER\",\n  {t:true, b:false}; //\"UNDER_OVER\", \n\n\n/**\n * A yarn cross describes the relationship betwen two draft cells\n * read from top to bottom. This is used within the sparce \n * draft representation, stores only \"warp\" crossings\n */\nexport interface Crossing {\n  j: number, \n  type: crossType;\n}\n    \n\n\n\n\n\n\n\n\n\n                   \n    \n         results matching \"\"\n        \n    \n    \n        No results matching \"\"\n    \n\n"},"classes/DBListener.html":{"url":"classes/DBListener.html","title":"class - DBListener","body":"\n                   \n\n\n\n\n\n\n\n\n\n\n\n\n\n  Classes\n  DBListener\n\n\n\n        \n            Info\n        \n        \n            Source\n        \n\n\n\n    \n        \n            File\n        \n        \n            src/app/player/model/dbnodes.ts\n        \n\n\n            \n                Description\n            \n            \n                When active = true, will emit events on the value changing.\n\n            \n\n            \n                Extends\n            \n            \n                        DBNode\n            \n\n\n\n            \n    Index\n    \n        \n                \n                    \n                        Properties\n                    \n                \n                \n                    \n                        \n                            \n                                _active\n                            \n                            \n                                _dbref\n                            \n                            \n                                _name\n                            \n                            \n                                _val\n                            \n                            \n                                id\n                            \n                            \n                                    Optional\n                                key\n                            \n                            \n                                unsubscribers\n                            \n                        \n                    \n                \n\n                \n                    \n                        Methods\n                    \n                \n                \n                    \n                        \n                            \n                                attach\n                            \n                            \n                                detach\n                            \n                            \n                                getNow\n                            \n                        \n                    \n                \n\n\n\n\n\n        \n    \n\n\n            \n    Constructor\n        \n            \n                \n                    \nconstructor(params: NodeParams)\n                    \n                \n                        \n                            \n                                Defined in src/app/player/model/dbnodes.ts:126\n                            \n                        \n\n                \n                    \n                            \n                                    Parameters :\n                                    \n                                        \n                                            \n                                                Name\n                                                    Type\n                                                Optional\n                                            \n                                        \n                                        \n                                                \n                                                        params\n                                                  \n                                                        \n                                                                        NodeParams\n                                                        \n                                                  \n                                                    \n                                                            No\n                                                    \n                                                    \n                                                \n                                        \n                                    \n                            \n                    \n                \n            \n        \n\n\n            \n    \n    \n        Properties\n    \n    \n        \n            \n                \n                    \n                    \n                        _active\n                        \n                    \n                \n            \n                \n                    \n                        Type :         boolean\n\n                    \n                \n                        \n                            \n                                Inherited from         DBNode\n\n                            \n                        \n                    \n                        \n                                Defined in         DBNode:126\n\n                        \n                    \n\n\n        \n    \n    \n        \n            \n                \n                    \n                    \n                        _dbref\n                        \n                    \n                \n            \n                \n                    \n                        Type :     DatabaseReference\n\n                    \n                \n                        \n                            \n                                Inherited from         DBNode\n\n                            \n                        \n                    \n                        \n                                Defined in         DBNode:124\n\n                        \n                    \n\n\n        \n    \n    \n        \n            \n                \n                    \n                    \n                        _name\n                        \n                    \n                \n            \n                \n                    \n                        Type :         string\n\n                    \n                \n                        \n                            \n                                Inherited from         DBNode\n\n                            \n                        \n                    \n                        \n                                Defined in         DBNode:123\n\n                        \n                    \n\n\n        \n    \n    \n        \n            \n                \n                    \n                    \n                        _val\n                        \n                    \n                \n            \n                \n                    \n                        Type :         any\n\n                    \n                \n                        \n                            \n                                Inherited from         DBNode\n\n                            \n                        \n                    \n                        \n                                Defined in         DBNode:125\n\n                        \n                    \n\n\n        \n    \n    \n        \n            \n                \n                    \n                    \n                        id\n                        \n                    \n                \n            \n                \n                    \n                        Type :         number\n\n                    \n                \n                        \n                            \n                                Inherited from         DBNode\n\n                            \n                        \n                    \n                        \n                                Defined in         DBNode:121\n\n                        \n                    \n\n\n        \n    \n    \n        \n            \n                \n                    \n                    \n                            Optional\n                        key\n                        \n                    \n                \n            \n                \n                    \n                        Type :         string\n\n                    \n                \n                        \n                            \n                                Inherited from         DBNode\n\n                            \n                        \n                    \n                        \n                                Defined in         DBNode:122\n\n                        \n                    \n\n\n        \n    \n    \n        \n            \n                \n                    \n                    \n                        unsubscribers\n                        \n                    \n                \n            \n                \n                    \n                        Type :     Array\n\n                    \n                \n                        \n                            \n                                Inherited from         DBNode\n\n                            \n                        \n                    \n                        \n                                Defined in         DBNode:44\n\n                        \n                    \n\n            \n                \n                    holds the Unsubscribe functions that are returned by\nDB event functions like onValue(...)\n\n                \n            \n\n        \n    \n\n\n            \n    \n    \n        Methods\n    \n    \n        \n            \n                \n                    \n                    \n                        attach\n                        \n                    \n                \n            \n            \n                \nattach()\n                \n            \n\n\n            \n                \n                    Inherited from         DBNode\n\n                \n            \n            \n                \n                        Defined in         DBNode:132\n\n                \n            \n\n\n            \n                \n\n                    \n                        Returns :         void\n\n                    \n                \n            \n        \n    \n    \n        \n            \n                \n                    \n                    \n                        detach\n                        \n                    \n                \n            \n            \n                \ndetach()\n                \n            \n\n\n            \n                \n                    Inherited from         DBNode\n\n                \n            \n            \n                \n                        Defined in         DBNode:149\n\n                \n            \n\n\n            \n                \n\n                    \n                        Returns :         void\n\n                    \n                \n            \n        \n    \n    \n        \n            \n                \n                    \n                    \n                        getNow\n                        \n                    \n                \n            \n            \n                \ngetNow()\n                \n            \n\n\n            \n                \n                    Defined in src/app/player/model/dbnodes.ts:141\n                \n            \n\n\n            \n                \n\n                    \n                        Returns :         void\n\n                    \n                \n            \n        \n    \n\n\n\n\n\n\n    \n\n\n    \n        import { child, ref, set, get, query, \n  onValue, onChildAdded, onChildChanged, onChildRemoved,\n  push, remove,\n  DatabaseReference, \n} from \"firebase/database\";\nimport { Database } from '@angular/fire/database';\nimport { EventEmitter } from 'events';\n\nexport interface NodeParams {\n  db?: Database,\n  name?: string,\n  root?: string,\n  path?: string,\n  key?: string,\n  initVal?: any,\n  ref?: DatabaseReference,\n  id?: number\n}\n\nexport type NodeValue = string | boolean | number | { [key: string]: any };\n\ninterface NodeMethods {\n  attach(): void,\n  detach(): void,\n}\n\n/**\n * @class DBNode\n * @desc Wrapper for a Firebase database ref and\n * the value stored at that DB node.\n */\nabstract class DBNode extends EventEmitter implements NodeMethods {\n  id: number;\n  key?: string;\n  _name: string;\n  _dbref: DatabaseReference;\n  _val: NodeValue;\n  _active: boolean;\n\n  /**\n   * holds the Unsubscribe functions that are returned by\n   * DB event functions like onValue(...)\n   */\n  unsubscribers: Array;\n\n  /**\n   * \n   * @param {*} params \\{ db: Database, path: string, initVal: any }\n   * @param {*} params \\{ ref: DatabaseReference, key: string, initVal: any }\n   */\n\n  constructor(params: NodeParams) {\n    super();\n    this.active = false;\n    this.unsubscribers = [];\n    if (params.db) {\n      this._name = params.path;\n      this._dbref = ref(params.db, params.root + params.path);\n      this._val = params.initVal;\n      // console.log(this);\n    } else if (params.ref) {\n      this._name = params.key;\n      this._dbref = params.ref;\n    }\n\n    if(params.id > -1) {\n      this.id = params.id;\n    }\n    console.log(this.name);\n  }\n\n  get ref() {\n    return this._dbref;\n  }\n\n  get name() {\n    return this._name;\n  }\n\n  get val() {\n    if (!this.active) {\n      return false;\n    }\n\n    if (typeof(this._val) == 'number' || typeof(this._val == 'boolean')) {\n      return this._val;\n    } \n    \n    if (this._val != undefined) {\n      return Object.keys(this._val);\n    }\n  }\n\n  set val(x) {\n    this._val = x;\n  }\n\n  get active() {\n    return this._active;\n  }\n\n  set active(tf: boolean) {\n    this._active = tf;\n  }\n\n  // methods for a node: \n  // attach() means it is updating with the database and emitting events\n  // detach() means it is not updating, no events\n  abstract attach();\n  abstract detach();\n}\n\ntype Keyed = Node & { key: string };\n\n/**\n * @class DBListener\n * @desc A DBNode that only reads from the database.\n * When `active = true`, will emit events on the value changing.\n */\nexport class DBListener extends DBNode {\n  id: number;\n  key?: string;\n  _name: string;\n  _dbref: DatabaseReference;\n  _val: any;\n  _active: boolean;\n\n  constructor(params: NodeParams) {\n    super(params);\n  }\n\n  attach() {\n    this.active = true;\n    let unsub = onValue(this.ref, (snapshot) => {\n      this.val = snapshot.val();\n      this.emit('change', this.val);\n    });\n    this.unsubscribers.push(unsub);\n  }\n\n  getNow() {\n    get(query(this.ref))\n      .then((snapshot) => {\n        this.val = snapshot.val();\n      })\n      .catch(result => console.log(result));\n  }\n\n  detach() {\n    if (this.active) {\n      while (this.unsubscribers.length > 0) {\n        let unsub = this.unsubscribers.pop();\n        unsub();\n      }\n    }\n    this.active = false;\n  }\n}\n\n/**\n * @class DBWriter\n * @desc A DBNode that only writes to the database. \n * When `active = true`, will pass `val` to the database.\n */\nexport class DBWriter extends DBNode {\n  id: number;\n  key?: string;\n  _name: string;\n  _ref: DatabaseReference;\n  _val: any;\n  _active: boolean;\n\n  constructor(params: NodeParams) {\n    super(params);\n  }\n\n  attach() {\n    this.active = true;\n  }\n\n  setVal(x) {\n    this.val = x;\n    if (this.active) {\n      set(this.ref, this.val);\n    }\n  }\n\n  detach() {\n    this.active = false;\n  }\n}\n\n/** Special DBWriter that expects the node to be cleared by the\n * other end upon receipt\n */\nexport class DBWriteBuffer extends DBWriter {\n  id: number;\n  _name: string;\n  _ref: DatabaseReference;\n  _val: any;\n  _active: boolean;\n\n  constructor(params: NodeParams) {\n    super(params);\n  }\n\n  setVal(x) {\n    get(query(this.ref))\n      .then((snapshot) => {\n        if(!snapshot.val()) {\n          console.log(\"overwriting data in buffer\");\n        }\n        super.setVal(x);\n      })\n      .catch(result => console.log(result));\n  }\n}\n\nexport class DBTwoWay extends DBNode {\n  id: number;\n  key?: string;\n  _name: string;\n  _dbref: DatabaseReference;\n  _val: any;\n  _active: boolean;\n\n  constructor(params: NodeParams) {\n    super(params);\n  }\n  \n  attach() {\n    this.active = true;\n    let unsub = onValue(this.ref, (snapshot) => {\n      this.val = snapshot.val();\n      this.emit('change', this.val);\n    });\n    this.unsubscribers.push(unsub);\n  }\n\n  getNow() {\n    get(query(this.ref))\n      .then((snapshot) => {\n        this.val = snapshot.val();\n      })\n      .catch(result => console.log(result));\n  }\n  \n  detach() {\n    if (this.active) {\n      while (this.unsubscribers.length > 0) {\n        let unsub = this.unsubscribers.pop();\n        unsub();\n      }\n    }\n    this.active = false;\n  }\n  \n  setVal(x) {\n    this.val = x;\n    if (this.active) {\n      set(this.ref, this.val);\n    }\n  }\n}\n\nclass DBNodeArray extends EventEmitter {\n  nodes: Array;\n  lengthNode: DBNode;\n  parentNode: DBNode;\n\n  constructor(lengthNode, parentNode, init: any = {}) {\n    super();\n    this.lengthNode = lengthNode;\n    this.parentNode = parentNode;\n    if (init) {\n    } else {\n      this.nodes = [];\n    }\n  }\n\n  get length() { return this.nodes.length; }\n\n  get active() { return (this.lengthNode.active && this.parentNode.active); }\n\n  get ready() { return (this.lengthNode.val > 0 && this.parentNode.val != false); }\n\n  nodeAt(n) {\n    console.log(this.nodes);\n    console.log(\"node at \", n);\n    console.log(this.nodes[n]);\n    return this.nodes[n];\n  }\n\n  pushNode(n) {\n    this.nodes.push(n);\n  }\n\n  popNode() {\n    return this.nodes.pop();\n  }\n}\n\n/**\n * @class `DBListenerArray`\n * @desc Represents a listener to a list of values in the database \n * (generalizes to `DBNodeArray`). Assumes that the data list is\n * structured such that `lengthNode` is a `DBListener` that stores the \n * length of the list, while `parentNode` is a `DBListener` to the parent\n * node of the list. Each item in the list is a child of `parentNode`,\n * which is then stored as a `DBListener` in the array `nodes`.\n */\nexport class DBListenerArray extends DBNodeArray {\n  lengthNode: DBListener;\n  parentNode: DBListener;\n  nodes: Array;\n\n  /**\n  * holds the Unsubscribe functions that are returned by\n  * DB event functions like onValue(...)\n  */\n  unsubscribers: Array;\n\n  constructor(lengthNode: DBListener, parentNode: DBListener) {\n    super(lengthNode, parentNode);\n    this.lengthNode = lengthNode;\n    this.parentNode = parentNode;\n    this.nodes = [];\n    this.unsubscribers = [];\n  }\n\n  /**\n   * @method attach\n   */\n  attach() {\n    this.lengthNode.attach();\n    this.lengthNode.on('change', (val) => {\n        this.emit('ready', this.ready);\n    });\n\n    this.parentNode.attach();\n    this.parentNode.once('change', (val) => {\n      this.emit('ready', this.ready);\n    });\n\n    for (var node of this.nodes) {\n      this.attachChildNode(node);\n    }\n\n    this.unsubscribers.push(\n      onChildAdded(this.parentNode.ref, (snapshot) => {\n        // console.log(\"child added\", snapshot);\n        this.addNode(snapshot.key);\n    }));\n\n    this.unsubscribers.push(\n      onChildChanged(this.parentNode.ref, (snapshot) => {\n        console.log(\"child changed\", snapshot);\n    }));\n\n    this.unsubscribers.push(\n      onChildRemoved(this.parentNode.ref, () => {\n        // console.log(\"child removed\", snapshot);\n        let removed = this.popNode();\n        this.emit('child-removed', removed);\n    }));\n  }\n\n  detach() {\n    if (this.active) {\n      while (this.unsubscribers.length > 0) {\n        let unsub = this.unsubscribers.pop();\n        unsub();\n      }\n    }\n  }\n\n  nodeAt(n: number) {\n    // console.log(this.nodes);\n    // console.log(\"node at \", n);\n    // console.log(this.nodes[n]);\n    return this.nodes[n];\n  }\n\n  /**\n   * Creating a new child node.\n   * @param key \n   */\n  addNode(key: string) {\n    console.log('child key', key);\n    const childRef = child(this.parentNode.ref, key);\n    const childNode = new DBListener({ ref: childRef, key: key, id: this.length });\n    this.attachChildNode(childNode);\n    this.pushNode(childNode);\n    this.emit('child-added', childNode);\n    // this.lengthNode.setVal(this.length);\n  }\n\n  /**\n   * Attaching a child node that was created elsewhere.\n   * Invokes child's `attach()` method and adds event listener\n   * that will emit a `child-change` event.\n   * @param node \n   */\n  attachChildNode(node: DBListener) {\n    node.attach();\n    node.on('change', (val) => {\n      this.emit('child-change', {\n        id: node.id,\n        val: val\n      });\n    });\n  }\n\n  // remNode() {\n  //   const node = this.popNode();\n  //   // remove(node.ref);\n  //   // this.lengthNode.setVal(this.length);\n  // }\n\n  // updateArray(num: number) {\n  //   // this.parentNode.getNow();\n  //   if (num > this.length) {\n  //     let parentKeys = this.parentNode.val;\n  //     // console.log(this.parentNode);\n  //     console.log(parentKeys);\n  //     let childKeys = Object.keys(parentKeys);\n  //     while (this.length  num) {\n  //       this.popNode();\n  //     }\n  //   }\n  //   console.log(this);\n  // }\n\n  toString() {\n    var str = \"\";\n    // str += \"length: \" + this.length + \", \";\n    str += \"[ \\n\";\n    for (var i=0; i ;\n  lengthNode: DBWriter;\n  parentNode: DBWriter;\n\n  constructor(lengthNode, parentNode, init) {\n    super(lengthNode, parentNode, init);\n    if (!init) {\n      this.lengthNode.setVal(0);\n      this.parentNode.setVal(EMPTY_NODE_ARRAY);\n    }\n\n    // console.log(this);\n  }\n\n  addNode(initVal) {\n    const childRef = push(this.parentNode.ref, initVal);\n    const childNode = new DBWriter({ ref: childRef, initVal });\n    childNode.attach();\n    this.pushNode(childNode);\n    this.lengthNode.setVal(this.length);\n  }\n\n  remNode() {\n    const node = this.popNode();\n    remove(node.ref);\n    this.lengthNode.setVal(this.length);\n  }\n\n  updateArray(num, newStates) {\n    if (num > this.length) {\n      while (this.length  num) {\n        this.remNode();\n      }\n    }\n  }\n\n  setNode(i, x) {\n    this.nodes[i].setVal(x);\n  }\n\n}\n\n/**\n * Array of two-way DBNodes where both ends are listening for\n * changes AND may write to the DB -- such as the virtual pedals\n * where both AdaCAD and the Pi/PC can add virtual pedals\n */\nexport class DBTwoWayArray extends DBNodeArray {\n  nodes: Array = [];\n  lengthNode: DBTwoWay;\n  parentNode: DBTwoWay;\n\n  /**\n  * holds the Unsubscribe functions that are returned by\n  * DB event functions like onValue(...)\n  */\n  unsubscribers: Array;\n\n  constructor(lengthNode: DBTwoWay, parentNode: DBTwoWay, init?: Array) {\n    super(lengthNode, parentNode, init);\n    this.unsubscribers = [];\n    if (!init) {\n      this.lengthNode.setVal(0);\n      this.parentNode.setVal(EMPTY_NODE_ARRAY);\n    }\n  }\n\n  addNode(initVal: any) {\n    push(this.parentNode.ref, initVal);\n    // const childNode = new DBTwoWay({ ref: childRef, initVal });\n    // childNode.attach();\n    // this.pushNode(childNode);\n    // this.lengthNode.setVal(this.length);\n    // console.log('child key', key);\n  }\n\n  onNodeAdded(key: string) {\n     const childRef = child(this.parentNode.ref, key);\n     const childNode = new DBTwoWay({ ref: childRef, key: key, id: this.length });\n     this.attachChildNode(childNode);\n     this.pushNode(childNode);\n     this.lengthNode.setVal(this.length);\n     this.emit('child-added', childNode);\n  }\n\n  remNode() {\n    const lastNode = this.nodeAt(this.length-1);\n    remove(lastNode.ref);\n    // this.lengthNode.setVal(this.length);\n  }\n\n  onNodeRemoved() {\n    let removed = this.popNode();\n    this.lengthNode.setVal(this.length);\n    return removed;\n  }\n\n  updateArray(num: number, newStates: Array) {\n    if (num > this.length) {\n      while (this.length  num) {\n        this.remNode();\n      }\n    }\n  }\n\n  setNode(i: number, x: any) {\n    this.nodes[i].setVal(x);\n  }\n\n  /**\n  * @method attach\n  */\n  attach() {\n    this.lengthNode.attach();\n    this.lengthNode.on('change', (val) => {\n        this.emit('ready', this.ready);\n    });\n\n    this.parentNode.attach();\n    this.parentNode.once('change', (val) => {\n      this.emit('ready', this.ready);\n    });\n\n    for (var node of this.nodes) {\n      this.attachChildNode(node);\n    }\n\n    this.unsubscribers.push(\n      onChildAdded(this.parentNode.ref, (snapshot) => {\n        // console.log(\"child added\", snapshot);\n        this.onNodeAdded(snapshot.key);\n    }));\n\n    this.unsubscribers.push(\n      onChildChanged(this.parentNode.ref, (snapshot) => {\n        console.log(\"child changed\", snapshot);\n    }));\n\n    this.unsubscribers.push(\n      onChildRemoved(this.parentNode.ref, () => {\n        // console.log(\"child removed\", snapshot);\n        let removed = this.onNodeRemoved();\n        this.emit('child-removed', removed);\n    }));\n  }\n \n  detach() {\n    if (this.active) {\n      while (this.unsubscribers.length > 0) {\n        let unsub = this.unsubscribers.pop();\n        unsub();\n      }\n    }\n  }\n\n  /**\n  * Attaching a child node that was created elsewhere.\n  * Invokes child's `attach()` method and adds event listener\n  * that will emit a `child-change` event.\n  * @param node \n  */\n  attachChildNode(node: DBListener) {\n    node.attach();\n    node.on('change', (val) => {\n      this.emit('child-change', {\n        id: node.id,\n        val: val\n      });\n    });\n  }\n}\n\n/** special types of DBNodes */\n\n/** @class\n * OnlineStatus representing whether or not the\n * \"host\" device is online. The host device is responsible\n * for keeping the node set to \"true\", while any listener\n * devices check occasionally for the host's status by \n * attempting to set the node to \"false\".\n */\nexport class OnlineStatus extends DBListener {\n  _name: string;\n  _ref: DatabaseReference;\n  _val: boolean;\n  _active: boolean;\n\n  constructor(params) {\n    super(params);\n    this.attach();\n    get(query(this.ref))\n      .then((snapshot) => {\n        this.val = snapshot.val();\n      })\n      .catch(result => console.log(result));\n  }\n\n  checkAlive() {\n    set(this.ref, false)\n      .then(() => { this.emit('set', true); })\n      .catch(() => { this.emit('set', false); });\n  }\n}\n\n\n    \n\n\n\n\n\n\n\n\n\n\n                   \n    \n         results matching \"\"\n        \n    \n    \n        No results matching \"\"\n    \n\n"},"classes/DBListenerArray.html":{"url":"classes/DBListenerArray.html","title":"class - DBListenerArray","body":"\n                   \n\n\n\n\n\n\n\n\n\n\n\n\n\n  Classes\n  DBListenerArray\n\n\n\n        \n            Info\n        \n        \n            Source\n        \n\n\n\n    \n        \n            File\n        \n        \n            src/app/player/model/dbnodes.ts\n        \n\n\n            \n                Description\n            \n            \n                (generalizes to DBNodeArray). Assumes that the data list is\nstructured such that lengthNode is a DBListener that stores the\nlength of the list, while parentNode is a DBListener to the parent\nnode of the list. Each item in the list is a child of parentNode,\nwhich is then stored as a DBListener in the array nodes.\n\n            \n\n            \n                Extends\n            \n            \n                        DBNodeArray\n            \n\n\n\n            \n    Index\n    \n        \n                \n                    \n                        Properties\n                    \n                \n                \n                    \n                        \n                            \n                                lengthNode\n                            \n                            \n                                nodes\n                            \n                            \n                                parentNode\n                            \n                            \n                                unsubscribers\n                            \n                        \n                    \n                \n\n                \n                    \n                        Methods\n                    \n                \n                \n                    \n                        \n                            \n                                addNode\n                            \n                            \n                                attach\n                            \n                            \n                                attachChildNode\n                            \n                            \n                                detach\n                            \n                            \n                                nodeAt\n                            \n                            \n                                toString\n                            \n                            \n                                popNode\n                            \n                            \n                                pushNode\n                            \n                        \n                    \n                \n\n\n\n\n\n        \n    \n\n\n            \n    Constructor\n        \n            \n                \n                    \nconstructor(lengthNode: DBListener, parentNode: DBListener)\n                    \n                \n                        \n                            \n                                Defined in src/app/player/model/dbnodes.ts:321\n                            \n                        \n\n                \n                    \n                            \n                                    Parameters :\n                                    \n                                        \n                                            \n                                                Name\n                                                    Type\n                                                Optional\n                                            \n                                        \n                                        \n                                                \n                                                        lengthNode\n                                                  \n                                                        \n                                                                        DBListener\n                                                        \n                                                  \n                                                    \n                                                            No\n                                                    \n                                                    \n                                                \n                                                \n                                                        parentNode\n                                                  \n                                                        \n                                                                        DBListener\n                                                        \n                                                  \n                                                    \n                                                            No\n                                                    \n                                                    \n                                                \n                                        \n                                    \n                            \n                    \n                \n            \n        \n\n\n            \n    \n    \n        Properties\n    \n    \n        \n            \n                \n                    \n                    \n                        lengthNode\n                        \n                    \n                \n            \n                \n                    \n                        Type :         DBListener\n\n                    \n                \n                        \n                            \n                                Inherited from         DBNodeArray\n\n                            \n                        \n                    \n                        \n                                Defined in         DBNodeArray:313\n\n                        \n                    \n\n\n        \n    \n    \n        \n            \n                \n                    \n                    \n                        nodes\n                        \n                    \n                \n            \n                \n                    \n                        Type :         Array\n\n                    \n                \n                        \n                            \n                                Inherited from         DBNodeArray\n\n                            \n                        \n                    \n                        \n                                Defined in         DBNodeArray:315\n\n                        \n                    \n\n\n        \n    \n    \n        \n            \n                \n                    \n                    \n                        parentNode\n                        \n                    \n                \n            \n                \n                    \n                        Type :         DBListener\n\n                    \n                \n                        \n                            \n                                Inherited from         DBNodeArray\n\n                            \n                        \n                    \n                        \n                                Defined in         DBNodeArray:314\n\n                        \n                    \n\n\n        \n    \n    \n        \n            \n                \n                    \n                    \n                        unsubscribers\n                        \n                    \n                \n            \n                \n                    \n                        Type :     Array\n\n                    \n                \n                    \n                        \n                                Defined in src/app/player/model/dbnodes.ts:321\n                        \n                    \n\n            \n                \n                    holds the Unsubscribe functions that are returned by\nDB event functions like onValue(...)\n\n                \n            \n\n        \n    \n\n\n            \n    \n    \n        Methods\n    \n    \n        \n            \n                \n                    \n                    \n                        addNode\n                        \n                    \n                \n            \n            \n                \naddNode(key: string)\n                \n            \n\n\n            \n                \n                    Defined in src/app/player/model/dbnodes.ts:388\n                \n            \n\n\n            \n                \n                    Creating a new child node.\n\n\n                    \n                        Parameters :\n                        \n                        \n                            \n                                \n                                    Name\n                                    Type\n                                    Optional\n                                \n                            \n                            \n                                \n                                    key\n                                    \n                                                string\n                                    \n\n                                    \n                                        No\n                                    \n\n\n                                \n                            \n                        \n                    \n                    \n                    \n                    \n                        Returns :         void\n\n                    \n                    \n                        \n                    \n                \n            \n        \n    \n    \n        \n            \n                \n                    \n                    \n                        attach\n                        \n                    \n                \n            \n            \n                \nattach()\n                \n            \n\n\n            \n                \n                    Defined in src/app/player/model/dbnodes.ts:334\n                \n            \n\n\n            \n                \n\n                    \n                        Returns :         void\n\n                    \n                \n            \n        \n    \n    \n        \n            \n                \n                    \n                    \n                        attachChildNode\n                        \n                    \n                \n            \n            \n                \nattachChildNode(node: DBListener)\n                \n            \n\n\n            \n                \n                    Defined in src/app/player/model/dbnodes.ts:404\n                \n            \n\n\n            \n                \n                    Attaching a child node that was created elsewhere.\nInvokes child's attach() method and adds event listener\nthat will emit a child-change event.\n\n\n                    \n                        Parameters :\n                        \n                        \n                            \n                                \n                                    Name\n                                    Type\n                                    Optional\n                                \n                            \n                            \n                                \n                                    node\n                                    \n                                                DBListener\n                                    \n\n                                    \n                                        No\n                                    \n\n\n                                \n                            \n                        \n                    \n                    \n                    \n                    \n                        Returns :         void\n\n                    \n                    \n                        \n                    \n                \n            \n        \n    \n    \n        \n            \n                \n                    \n                    \n                        detach\n                        \n                    \n                \n            \n            \n                \ndetach()\n                \n            \n\n\n            \n                \n                    Defined in src/app/player/model/dbnodes.ts:368\n                \n            \n\n\n            \n                \n\n                    \n                        Returns :         void\n\n                    \n                \n            \n        \n    \n    \n        \n            \n                \n                    \n                    \n                        nodeAt\n                        \n                    \n                \n            \n            \n                \nnodeAt(n: number)\n                \n            \n\n\n            \n                \n                    Inherited from         DBNodeArray\n\n                \n            \n            \n                \n                        Defined in         DBNodeArray:377\n\n                \n            \n\n\n            \n                \n\n                    \n                        Parameters :\n                        \n                        \n                            \n                                \n                                    Name\n                                    Type\n                                    Optional\n                                \n                            \n                            \n                                \n                                    n\n                                    \n                                                number\n                                    \n\n                                    \n                                        No\n                                    \n\n\n                                \n                            \n                        \n                    \n                    \n                    \n                    \n                        Returns :         Array\n\n                    \n                    \n                        \n                    \n                \n            \n        \n    \n    \n        \n            \n                \n                    \n                    \n                        toString\n                        \n                    \n                \n            \n            \n                \ntoString()\n                \n            \n\n\n            \n                \n                    Defined in src/app/player/model/dbnodes.ts:438\n                \n            \n\n\n            \n                \n\n                    \n                        Returns :         string\n\n                    \n                \n            \n        \n    \n    \n        \n            \n                \n                    \n                    \n                        popNode\n                        \n                    \n                \n            \n            \n                \npopNode()\n                \n            \n\n\n            \n                \n                    Inherited from         DBNodeArray\n\n                \n            \n            \n                \n                        Defined in         DBNodeArray:298\n\n                \n            \n\n\n            \n                \n\n                    \n                        Returns :         any\n\n                    \n                \n            \n        \n    \n    \n        \n            \n                \n                    \n                    \n                        pushNode\n                        \n                    \n                \n            \n            \n                \npushNode(n)\n                \n            \n\n\n            \n                \n                    Inherited from         DBNodeArray\n\n                \n            \n            \n                \n                        Defined in         DBNodeArray:294\n\n                \n            \n\n\n            \n                \n\n                    \n                        Parameters :\n                        \n                        \n                            \n                                \n                                    Name\n                                    Optional\n                                \n                            \n                            \n                                \n                                    n\n\n                                    \n                                        No\n                                    \n\n\n                                \n                            \n                        \n                    \n                    \n                    \n                    \n                        Returns :         void\n\n                    \n                    \n                        \n                    \n                \n            \n        \n    \n\n\n\n\n\n\n    \n\n\n    \n        import { child, ref, set, get, query, \n  onValue, onChildAdded, onChildChanged, onChildRemoved,\n  push, remove,\n  DatabaseReference, \n} from \"firebase/database\";\nimport { Database } from '@angular/fire/database';\nimport { EventEmitter } from 'events';\n\nexport interface NodeParams {\n  db?: Database,\n  name?: string,\n  root?: string,\n  path?: string,\n  key?: string,\n  initVal?: any,\n  ref?: DatabaseReference,\n  id?: number\n}\n\nexport type NodeValue = string | boolean | number | { [key: string]: any };\n\ninterface NodeMethods {\n  attach(): void,\n  detach(): void,\n}\n\n/**\n * @class DBNode\n * @desc Wrapper for a Firebase database ref and\n * the value stored at that DB node.\n */\nabstract class DBNode extends EventEmitter implements NodeMethods {\n  id: number;\n  key?: string;\n  _name: string;\n  _dbref: DatabaseReference;\n  _val: NodeValue;\n  _active: boolean;\n\n  /**\n   * holds the Unsubscribe functions that are returned by\n   * DB event functions like onValue(...)\n   */\n  unsubscribers: Array;\n\n  /**\n   * \n   * @param {*} params \\{ db: Database, path: string, initVal: any }\n   * @param {*} params \\{ ref: DatabaseReference, key: string, initVal: any }\n   */\n\n  constructor(params: NodeParams) {\n    super();\n    this.active = false;\n    this.unsubscribers = [];\n    if (params.db) {\n      this._name = params.path;\n      this._dbref = ref(params.db, params.root + params.path);\n      this._val = params.initVal;\n      // console.log(this);\n    } else if (params.ref) {\n      this._name = params.key;\n      this._dbref = params.ref;\n    }\n\n    if(params.id > -1) {\n      this.id = params.id;\n    }\n    console.log(this.name);\n  }\n\n  get ref() {\n    return this._dbref;\n  }\n\n  get name() {\n    return this._name;\n  }\n\n  get val() {\n    if (!this.active) {\n      return false;\n    }\n\n    if (typeof(this._val) == 'number' || typeof(this._val == 'boolean')) {\n      return this._val;\n    } \n    \n    if (this._val != undefined) {\n      return Object.keys(this._val);\n    }\n  }\n\n  set val(x) {\n    this._val = x;\n  }\n\n  get active() {\n    return this._active;\n  }\n\n  set active(tf: boolean) {\n    this._active = tf;\n  }\n\n  // methods for a node: \n  // attach() means it is updating with the database and emitting events\n  // detach() means it is not updating, no events\n  abstract attach();\n  abstract detach();\n}\n\ntype Keyed = Node & { key: string };\n\n/**\n * @class DBListener\n * @desc A DBNode that only reads from the database.\n * When `active = true`, will emit events on the value changing.\n */\nexport class DBListener extends DBNode {\n  id: number;\n  key?: string;\n  _name: string;\n  _dbref: DatabaseReference;\n  _val: any;\n  _active: boolean;\n\n  constructor(params: NodeParams) {\n    super(params);\n  }\n\n  attach() {\n    this.active = true;\n    let unsub = onValue(this.ref, (snapshot) => {\n      this.val = snapshot.val();\n      this.emit('change', this.val);\n    });\n    this.unsubscribers.push(unsub);\n  }\n\n  getNow() {\n    get(query(this.ref))\n      .then((snapshot) => {\n        this.val = snapshot.val();\n      })\n      .catch(result => console.log(result));\n  }\n\n  detach() {\n    if (this.active) {\n      while (this.unsubscribers.length > 0) {\n        let unsub = this.unsubscribers.pop();\n        unsub();\n      }\n    }\n    this.active = false;\n  }\n}\n\n/**\n * @class DBWriter\n * @desc A DBNode that only writes to the database. \n * When `active = true`, will pass `val` to the database.\n */\nexport class DBWriter extends DBNode {\n  id: number;\n  key?: string;\n  _name: string;\n  _ref: DatabaseReference;\n  _val: any;\n  _active: boolean;\n\n  constructor(params: NodeParams) {\n    super(params);\n  }\n\n  attach() {\n    this.active = true;\n  }\n\n  setVal(x) {\n    this.val = x;\n    if (this.active) {\n      set(this.ref, this.val);\n    }\n  }\n\n  detach() {\n    this.active = false;\n  }\n}\n\n/** Special DBWriter that expects the node to be cleared by the\n * other end upon receipt\n */\nexport class DBWriteBuffer extends DBWriter {\n  id: number;\n  _name: string;\n  _ref: DatabaseReference;\n  _val: any;\n  _active: boolean;\n\n  constructor(params: NodeParams) {\n    super(params);\n  }\n\n  setVal(x) {\n    get(query(this.ref))\n      .then((snapshot) => {\n        if(!snapshot.val()) {\n          console.log(\"overwriting data in buffer\");\n        }\n        super.setVal(x);\n      })\n      .catch(result => console.log(result));\n  }\n}\n\nexport class DBTwoWay extends DBNode {\n  id: number;\n  key?: string;\n  _name: string;\n  _dbref: DatabaseReference;\n  _val: any;\n  _active: boolean;\n\n  constructor(params: NodeParams) {\n    super(params);\n  }\n  \n  attach() {\n    this.active = true;\n    let unsub = onValue(this.ref, (snapshot) => {\n      this.val = snapshot.val();\n      this.emit('change', this.val);\n    });\n    this.unsubscribers.push(unsub);\n  }\n\n  getNow() {\n    get(query(this.ref))\n      .then((snapshot) => {\n        this.val = snapshot.val();\n      })\n      .catch(result => console.log(result));\n  }\n  \n  detach() {\n    if (this.active) {\n      while (this.unsubscribers.length > 0) {\n        let unsub = this.unsubscribers.pop();\n        unsub();\n      }\n    }\n    this.active = false;\n  }\n  \n  setVal(x) {\n    this.val = x;\n    if (this.active) {\n      set(this.ref, this.val);\n    }\n  }\n}\n\nclass DBNodeArray extends EventEmitter {\n  nodes: Array;\n  lengthNode: DBNode;\n  parentNode: DBNode;\n\n  constructor(lengthNode, parentNode, init: any = {}) {\n    super();\n    this.lengthNode = lengthNode;\n    this.parentNode = parentNode;\n    if (init) {\n    } else {\n      this.nodes = [];\n    }\n  }\n\n  get length() { return this.nodes.length; }\n\n  get active() { return (this.lengthNode.active && this.parentNode.active); }\n\n  get ready() { return (this.lengthNode.val > 0 && this.parentNode.val != false); }\n\n  nodeAt(n) {\n    console.log(this.nodes);\n    console.log(\"node at \", n);\n    console.log(this.nodes[n]);\n    return this.nodes[n];\n  }\n\n  pushNode(n) {\n    this.nodes.push(n);\n  }\n\n  popNode() {\n    return this.nodes.pop();\n  }\n}\n\n/**\n * @class `DBListenerArray`\n * @desc Represents a listener to a list of values in the database \n * (generalizes to `DBNodeArray`). Assumes that the data list is\n * structured such that `lengthNode` is a `DBListener` that stores the \n * length of the list, while `parentNode` is a `DBListener` to the parent\n * node of the list. Each item in the list is a child of `parentNode`,\n * which is then stored as a `DBListener` in the array `nodes`.\n */\nexport class DBListenerArray extends DBNodeArray {\n  lengthNode: DBListener;\n  parentNode: DBListener;\n  nodes: Array;\n\n  /**\n  * holds the Unsubscribe functions that are returned by\n  * DB event functions like onValue(...)\n  */\n  unsubscribers: Array;\n\n  constructor(lengthNode: DBListener, parentNode: DBListener) {\n    super(lengthNode, parentNode);\n    this.lengthNode = lengthNode;\n    this.parentNode = parentNode;\n    this.nodes = [];\n    this.unsubscribers = [];\n  }\n\n  /**\n   * @method attach\n   */\n  attach() {\n    this.lengthNode.attach();\n    this.lengthNode.on('change', (val) => {\n        this.emit('ready', this.ready);\n    });\n\n    this.parentNode.attach();\n    this.parentNode.once('change', (val) => {\n      this.emit('ready', this.ready);\n    });\n\n    for (var node of this.nodes) {\n      this.attachChildNode(node);\n    }\n\n    this.unsubscribers.push(\n      onChildAdded(this.parentNode.ref, (snapshot) => {\n        // console.log(\"child added\", snapshot);\n        this.addNode(snapshot.key);\n    }));\n\n    this.unsubscribers.push(\n      onChildChanged(this.parentNode.ref, (snapshot) => {\n        console.log(\"child changed\", snapshot);\n    }));\n\n    this.unsubscribers.push(\n      onChildRemoved(this.parentNode.ref, () => {\n        // console.log(\"child removed\", snapshot);\n        let removed = this.popNode();\n        this.emit('child-removed', removed);\n    }));\n  }\n\n  detach() {\n    if (this.active) {\n      while (this.unsubscribers.length > 0) {\n        let unsub = this.unsubscribers.pop();\n        unsub();\n      }\n    }\n  }\n\n  nodeAt(n: number) {\n    // console.log(this.nodes);\n    // console.log(\"node at \", n);\n    // console.log(this.nodes[n]);\n    return this.nodes[n];\n  }\n\n  /**\n   * Creating a new child node.\n   * @param key \n   */\n  addNode(key: string) {\n    console.log('child key', key);\n    const childRef = child(this.parentNode.ref, key);\n    const childNode = new DBListener({ ref: childRef, key: key, id: this.length });\n    this.attachChildNode(childNode);\n    this.pushNode(childNode);\n    this.emit('child-added', childNode);\n    // this.lengthNode.setVal(this.length);\n  }\n\n  /**\n   * Attaching a child node that was created elsewhere.\n   * Invokes child's `attach()` method and adds event listener\n   * that will emit a `child-change` event.\n   * @param node \n   */\n  attachChildNode(node: DBListener) {\n    node.attach();\n    node.on('change', (val) => {\n      this.emit('child-change', {\n        id: node.id,\n        val: val\n      });\n    });\n  }\n\n  // remNode() {\n  //   const node = this.popNode();\n  //   // remove(node.ref);\n  //   // this.lengthNode.setVal(this.length);\n  // }\n\n  // updateArray(num: number) {\n  //   // this.parentNode.getNow();\n  //   if (num > this.length) {\n  //     let parentKeys = this.parentNode.val;\n  //     // console.log(this.parentNode);\n  //     console.log(parentKeys);\n  //     let childKeys = Object.keys(parentKeys);\n  //     while (this.length  num) {\n  //       this.popNode();\n  //     }\n  //   }\n  //   console.log(this);\n  // }\n\n  toString() {\n    var str = \"\";\n    // str += \"length: \" + this.length + \", \";\n    str += \"[ \\n\";\n    for (var i=0; i ;\n  lengthNode: DBWriter;\n  parentNode: DBWriter;\n\n  constructor(lengthNode, parentNode, init) {\n    super(lengthNode, parentNode, init);\n    if (!init) {\n      this.lengthNode.setVal(0);\n      this.parentNode.setVal(EMPTY_NODE_ARRAY);\n    }\n\n    // console.log(this);\n  }\n\n  addNode(initVal) {\n    const childRef = push(this.parentNode.ref, initVal);\n    const childNode = new DBWriter({ ref: childRef, initVal });\n    childNode.attach();\n    this.pushNode(childNode);\n    this.lengthNode.setVal(this.length);\n  }\n\n  remNode() {\n    const node = this.popNode();\n    remove(node.ref);\n    this.lengthNode.setVal(this.length);\n  }\n\n  updateArray(num, newStates) {\n    if (num > this.length) {\n      while (this.length  num) {\n        this.remNode();\n      }\n    }\n  }\n\n  setNode(i, x) {\n    this.nodes[i].setVal(x);\n  }\n\n}\n\n/**\n * Array of two-way DBNodes where both ends are listening for\n * changes AND may write to the DB -- such as the virtual pedals\n * where both AdaCAD and the Pi/PC can add virtual pedals\n */\nexport class DBTwoWayArray extends DBNodeArray {\n  nodes: Array = [];\n  lengthNode: DBTwoWay;\n  parentNode: DBTwoWay;\n\n  /**\n  * holds the Unsubscribe functions that are returned by\n  * DB event functions like onValue(...)\n  */\n  unsubscribers: Array;\n\n  constructor(lengthNode: DBTwoWay, parentNode: DBTwoWay, init?: Array) {\n    super(lengthNode, parentNode, init);\n    this.unsubscribers = [];\n    if (!init) {\n      this.lengthNode.setVal(0);\n      this.parentNode.setVal(EMPTY_NODE_ARRAY);\n    }\n  }\n\n  addNode(initVal: any) {\n    push(this.parentNode.ref, initVal);\n    // const childNode = new DBTwoWay({ ref: childRef, initVal });\n    // childNode.attach();\n    // this.pushNode(childNode);\n    // this.lengthNode.setVal(this.length);\n    // console.log('child key', key);\n  }\n\n  onNodeAdded(key: string) {\n     const childRef = child(this.parentNode.ref, key);\n     const childNode = new DBTwoWay({ ref: childRef, key: key, id: this.length });\n     this.attachChildNode(childNode);\n     this.pushNode(childNode);\n     this.lengthNode.setVal(this.length);\n     this.emit('child-added', childNode);\n  }\n\n  remNode() {\n    const lastNode = this.nodeAt(this.length-1);\n    remove(lastNode.ref);\n    // this.lengthNode.setVal(this.length);\n  }\n\n  onNodeRemoved() {\n    let removed = this.popNode();\n    this.lengthNode.setVal(this.length);\n    return removed;\n  }\n\n  updateArray(num: number, newStates: Array) {\n    if (num > this.length) {\n      while (this.length  num) {\n        this.remNode();\n      }\n    }\n  }\n\n  setNode(i: number, x: any) {\n    this.nodes[i].setVal(x);\n  }\n\n  /**\n  * @method attach\n  */\n  attach() {\n    this.lengthNode.attach();\n    this.lengthNode.on('change', (val) => {\n        this.emit('ready', this.ready);\n    });\n\n    this.parentNode.attach();\n    this.parentNode.once('change', (val) => {\n      this.emit('ready', this.ready);\n    });\n\n    for (var node of this.nodes) {\n      this.attachChildNode(node);\n    }\n\n    this.unsubscribers.push(\n      onChildAdded(this.parentNode.ref, (snapshot) => {\n        // console.log(\"child added\", snapshot);\n        this.onNodeAdded(snapshot.key);\n    }));\n\n    this.unsubscribers.push(\n      onChildChanged(this.parentNode.ref, (snapshot) => {\n        console.log(\"child changed\", snapshot);\n    }));\n\n    this.unsubscribers.push(\n      onChildRemoved(this.parentNode.ref, () => {\n        // console.log(\"child removed\", snapshot);\n        let removed = this.onNodeRemoved();\n        this.emit('child-removed', removed);\n    }));\n  }\n \n  detach() {\n    if (this.active) {\n      while (this.unsubscribers.length > 0) {\n        let unsub = this.unsubscribers.pop();\n        unsub();\n      }\n    }\n  }\n\n  /**\n  * Attaching a child node that was created elsewhere.\n  * Invokes child's `attach()` method and adds event listener\n  * that will emit a `child-change` event.\n  * @param node \n  */\n  attachChildNode(node: DBListener) {\n    node.attach();\n    node.on('change', (val) => {\n      this.emit('child-change', {\n        id: node.id,\n        val: val\n      });\n    });\n  }\n}\n\n/** special types of DBNodes */\n\n/** @class\n * OnlineStatus representing whether or not the\n * \"host\" device is online. The host device is responsible\n * for keeping the node set to \"true\", while any listener\n * devices check occasionally for the host's status by \n * attempting to set the node to \"false\".\n */\nexport class OnlineStatus extends DBListener {\n  _name: string;\n  _ref: DatabaseReference;\n  _val: boolean;\n  _active: boolean;\n\n  constructor(params) {\n    super(params);\n    this.attach();\n    get(query(this.ref))\n      .then((snapshot) => {\n        this.val = snapshot.val();\n      })\n      .catch(result => console.log(result));\n  }\n\n  checkAlive() {\n    set(this.ref, false)\n      .then(() => { this.emit('set', true); })\n      .catch(() => { this.emit('set', false); });\n  }\n}\n\n\n    \n\n\n\n\n\n\n\n\n\n\n                   \n    \n         results matching \"\"\n        \n    \n    \n        No results matching \"\"\n    \n\n"},"classes/DBNode.html":{"url":"classes/DBNode.html","title":"class - DBNode","body":"\n                   \n\n\n\n\n\n\n\n\n\n\n\n\n\n  Classes\n  DBNode\n\n\n\n        \n            Info\n        \n        \n            Source\n        \n\n\n\n    \n        \n            File\n        \n        \n            src/app/player/model/dbnodes.ts\n        \n\n\n            \n                Description\n            \n            \n                the value stored at that DB node.\n\n            \n\n            \n                Extends\n            \n            \n                        EventEmitter\n            \n\n            \n                Implements\n            \n            \n                            NodeMethods\n            \n\n\n            \n    Index\n    \n        \n                \n                    \n                        Properties\n                    \n                \n                \n                    \n                        \n                            \n                                _active\n                            \n                            \n                                _dbref\n                            \n                            \n                                _name\n                            \n                            \n                                _val\n                            \n                            \n                                id\n                            \n                            \n                                    Optional\n                                key\n                            \n                            \n                                unsubscribers\n                            \n                        \n                    \n                \n\n                \n                    \n                        Methods\n                    \n                \n                \n                    \n                        \n                            \n                                    Abstract\n                                attach\n                            \n                            \n                                    Abstract\n                                detach\n                            \n                        \n                    \n                \n\n\n\n\n\n                    \n                        \n                            Accessors\n                        \n                    \n                    \n                        \n                            \n                                \n                                    ref\n                                \n                                \n                                    name\n                                \n                                \n                                    val\n                                \n                                \n                                    active\n                                \n                            \n                        \n                    \n        \n    \n\n\n            \n    Constructor\n        \n            \n                \n                    \nconstructor(params: NodeParams)\n                    \n                \n                        \n                            \n                                Defined in src/app/player/model/dbnodes.ts:44\n                            \n                        \n\n                \n                    \n                            \n                                    Parameters :\n                                    \n                                        \n                                            \n                                                Name\n                                                    Type\n                                                Optional\n                                                    Description\n                                            \n                                        \n                                        \n                                                \n                                                        params\n                                                  \n                                                        \n                                                                        NodeParams\n                                                        \n                                                  \n                                                    \n                                                            No\n                                                    \n                                                    \n                                                        \n                                                                { db: Database, path: string, initVal: any }\n\n                                                        \n                                                \n                                        \n                                    \n                            \n                    \n                \n            \n        \n\n\n            \n    \n    \n        Properties\n    \n    \n        \n            \n                \n                    \n                    \n                        _active\n                        \n                    \n                \n            \n                \n                    \n                        Type :         boolean\n\n                    \n                \n                    \n                        \n                                Defined in src/app/player/model/dbnodes.ts:38\n                        \n                    \n\n\n        \n    \n    \n        \n            \n                \n                    \n                    \n                        _dbref\n                        \n                    \n                \n            \n                \n                    \n                        Type :     DatabaseReference\n\n                    \n                \n                    \n                        \n                                Defined in src/app/player/model/dbnodes.ts:36\n                        \n                    \n\n\n        \n    \n    \n        \n            \n                \n                    \n                    \n                        _name\n                        \n                    \n                \n            \n                \n                    \n                        Type :         string\n\n                    \n                \n                    \n                        \n                                Defined in src/app/player/model/dbnodes.ts:35\n                        \n                    \n\n\n        \n    \n    \n        \n            \n                \n                    \n                    \n                        _val\n                        \n                    \n                \n            \n                \n                    \n                        Type :         NodeValue\n\n                    \n                \n                    \n                        \n                                Defined in src/app/player/model/dbnodes.ts:37\n                        \n                    \n\n\n        \n    \n    \n        \n            \n                \n                    \n                    \n                        id\n                        \n                    \n                \n            \n                \n                    \n                        Type :         number\n\n                    \n                \n                    \n                        \n                                Defined in src/app/player/model/dbnodes.ts:33\n                        \n                    \n\n\n        \n    \n    \n        \n            \n                \n                    \n                    \n                            Optional\n                        key\n                        \n                    \n                \n            \n                \n                    \n                        Type :         string\n\n                    \n                \n                    \n                        \n                                Defined in src/app/player/model/dbnodes.ts:34\n                        \n                    \n\n\n        \n    \n    \n        \n            \n                \n                    \n                    \n                        unsubscribers\n                        \n                    \n                \n            \n                \n                    \n                        Type :     Array\n\n                    \n                \n                    \n                        \n                                Defined in src/app/player/model/dbnodes.ts:44\n                        \n                    \n\n            \n                \n                    holds the Unsubscribe functions that are returned by\nDB event functions like onValue(...)\n\n                \n            \n\n        \n    \n\n\n            \n    \n    \n        Methods\n    \n    \n        \n            \n                \n                    \n                    \n                        Abstract\n                        attach\n                        \n                    \n                \n            \n            \n                \n                    \n                    attach()\n                \n            \n\n\n            \n                \n                    Defined in src/app/player/model/dbnodes.ts:109\n                \n            \n\n\n            \n                \n\n                    \n                        Returns :         any\n\n                    \n                \n            \n        \n    \n    \n        \n            \n                \n                    \n                    \n                        Abstract\n                        detach\n                        \n                    \n                \n            \n            \n                \n                    \n                    detach()\n                \n            \n\n\n            \n                \n                    Defined in src/app/player/model/dbnodes.ts:110\n                \n            \n\n\n            \n                \n\n                    \n                        Returns :         any\n\n                    \n                \n            \n        \n    \n\n\n\n\n\n\n            \n    \n        Accessors\n    \n        \n            \n                \n                    \n                        \n                        ref\n                    \n                \n\n                \n                    \n                        getref()\n                    \n                \n                            \n                                \n                                    Defined in src/app/player/model/dbnodes.ts:72\n                                \n                            \n\n            \n        \n        \n            \n                \n                    \n                        \n                        name\n                    \n                \n\n                \n                    \n                        getname()\n                    \n                \n                            \n                                \n                                    Defined in src/app/player/model/dbnodes.ts:76\n                                \n                            \n\n            \n        \n        \n            \n                \n                    \n                        \n                        val\n                    \n                \n\n                \n                    \n                        getval()\n                    \n                \n                            \n                                \n                                    Defined in src/app/player/model/dbnodes.ts:80\n                                \n                            \n\n                \n                    \n                        setval(x)\n                    \n                \n                            \n                                \n                                    Defined in src/app/player/model/dbnodes.ts:94\n                                \n                            \n                    \n                        \n\n                                \n                                        Parameters :\n                                        \n                                            \n                                                \n                                                    Name\n                                                    Optional\n                                                \n                                            \n                                            \n                                                    \n                                                            x\n                                                    \n                                                    \n                                                        \n                                                                No\n                                                        \n                                                        \n                                                    \n                                            \n                                        \n                                \n                                \n                                \n                                \n                                    Returns :         void\n\n                                \n                        \n                    \n            \n        \n        \n            \n                \n                    \n                        \n                        active\n                    \n                \n\n                \n                    \n                        getactive()\n                    \n                \n                            \n                                \n                                    Defined in src/app/player/model/dbnodes.ts:98\n                                \n                            \n\n                \n                    \n                        setactive(tf: boolean)\n                    \n                \n                            \n                                \n                                    Defined in src/app/player/model/dbnodes.ts:102\n                                \n                            \n                    \n                        \n\n                                \n                                        Parameters :\n                                        \n                                            \n                                                \n                                                    Name\n                                                        Type\n                                                    Optional\n                                                \n                                            \n                                            \n                                                    \n                                                            tf\n                                                    \n                                                            \n                                                                            boolean\n                                                            \n                                                    \n                                                        \n                                                                No\n                                                        \n                                                        \n                                                    \n                                            \n                                        \n                                \n                                \n                                \n                                \n                                    Returns :         void\n\n                                \n                        \n                    \n            \n        \n\n    \n\n\n    \n        import { child, ref, set, get, query, \n  onValue, onChildAdded, onChildChanged, onChildRemoved,\n  push, remove,\n  DatabaseReference, \n} from \"firebase/database\";\nimport { Database } from '@angular/fire/database';\nimport { EventEmitter } from 'events';\n\nexport interface NodeParams {\n  db?: Database,\n  name?: string,\n  root?: string,\n  path?: string,\n  key?: string,\n  initVal?: any,\n  ref?: DatabaseReference,\n  id?: number\n}\n\nexport type NodeValue = string | boolean | number | { [key: string]: any };\n\ninterface NodeMethods {\n  attach(): void,\n  detach(): void,\n}\n\n/**\n * @class DBNode\n * @desc Wrapper for a Firebase database ref and\n * the value stored at that DB node.\n */\nabstract class DBNode extends EventEmitter implements NodeMethods {\n  id: number;\n  key?: string;\n  _name: string;\n  _dbref: DatabaseReference;\n  _val: NodeValue;\n  _active: boolean;\n\n  /**\n   * holds the Unsubscribe functions that are returned by\n   * DB event functions like onValue(...)\n   */\n  unsubscribers: Array;\n\n  /**\n   * \n   * @param {*} params \\{ db: Database, path: string, initVal: any }\n   * @param {*} params \\{ ref: DatabaseReference, key: string, initVal: any }\n   */\n\n  constructor(params: NodeParams) {\n    super();\n    this.active = false;\n    this.unsubscribers = [];\n    if (params.db) {\n      this._name = params.path;\n      this._dbref = ref(params.db, params.root + params.path);\n      this._val = params.initVal;\n      // console.log(this);\n    } else if (params.ref) {\n      this._name = params.key;\n      this._dbref = params.ref;\n    }\n\n    if(params.id > -1) {\n      this.id = params.id;\n    }\n    console.log(this.name);\n  }\n\n  get ref() {\n    return this._dbref;\n  }\n\n  get name() {\n    return this._name;\n  }\n\n  get val() {\n    if (!this.active) {\n      return false;\n    }\n\n    if (typeof(this._val) == 'number' || typeof(this._val == 'boolean')) {\n      return this._val;\n    } \n    \n    if (this._val != undefined) {\n      return Object.keys(this._val);\n    }\n  }\n\n  set val(x) {\n    this._val = x;\n  }\n\n  get active() {\n    return this._active;\n  }\n\n  set active(tf: boolean) {\n    this._active = tf;\n  }\n\n  // methods for a node: \n  // attach() means it is updating with the database and emitting events\n  // detach() means it is not updating, no events\n  abstract attach();\n  abstract detach();\n}\n\ntype Keyed = Node & { key: string };\n\n/**\n * @class DBListener\n * @desc A DBNode that only reads from the database.\n * When `active = true`, will emit events on the value changing.\n */\nexport class DBListener extends DBNode {\n  id: number;\n  key?: string;\n  _name: string;\n  _dbref: DatabaseReference;\n  _val: any;\n  _active: boolean;\n\n  constructor(params: NodeParams) {\n    super(params);\n  }\n\n  attach() {\n    this.active = true;\n    let unsub = onValue(this.ref, (snapshot) => {\n      this.val = snapshot.val();\n      this.emit('change', this.val);\n    });\n    this.unsubscribers.push(unsub);\n  }\n\n  getNow() {\n    get(query(this.ref))\n      .then((snapshot) => {\n        this.val = snapshot.val();\n      })\n      .catch(result => console.log(result));\n  }\n\n  detach() {\n    if (this.active) {\n      while (this.unsubscribers.length > 0) {\n        let unsub = this.unsubscribers.pop();\n        unsub();\n      }\n    }\n    this.active = false;\n  }\n}\n\n/**\n * @class DBWriter\n * @desc A DBNode that only writes to the database. \n * When `active = true`, will pass `val` to the database.\n */\nexport class DBWriter extends DBNode {\n  id: number;\n  key?: string;\n  _name: string;\n  _ref: DatabaseReference;\n  _val: any;\n  _active: boolean;\n\n  constructor(params: NodeParams) {\n    super(params);\n  }\n\n  attach() {\n    this.active = true;\n  }\n\n  setVal(x) {\n    this.val = x;\n    if (this.active) {\n      set(this.ref, this.val);\n    }\n  }\n\n  detach() {\n    this.active = false;\n  }\n}\n\n/** Special DBWriter that expects the node to be cleared by the\n * other end upon receipt\n */\nexport class DBWriteBuffer extends DBWriter {\n  id: number;\n  _name: string;\n  _ref: DatabaseReference;\n  _val: any;\n  _active: boolean;\n\n  constructor(params: NodeParams) {\n    super(params);\n  }\n\n  setVal(x) {\n    get(query(this.ref))\n      .then((snapshot) => {\n        if(!snapshot.val()) {\n          console.log(\"overwriting data in buffer\");\n        }\n        super.setVal(x);\n      })\n      .catch(result => console.log(result));\n  }\n}\n\nexport class DBTwoWay extends DBNode {\n  id: number;\n  key?: string;\n  _name: string;\n  _dbref: DatabaseReference;\n  _val: any;\n  _active: boolean;\n\n  constructor(params: NodeParams) {\n    super(params);\n  }\n  \n  attach() {\n    this.active = true;\n    let unsub = onValue(this.ref, (snapshot) => {\n      this.val = snapshot.val();\n      this.emit('change', this.val);\n    });\n    this.unsubscribers.push(unsub);\n  }\n\n  getNow() {\n    get(query(this.ref))\n      .then((snapshot) => {\n        this.val = snapshot.val();\n      })\n      .catch(result => console.log(result));\n  }\n  \n  detach() {\n    if (this.active) {\n      while (this.unsubscribers.length > 0) {\n        let unsub = this.unsubscribers.pop();\n        unsub();\n      }\n    }\n    this.active = false;\n  }\n  \n  setVal(x) {\n    this.val = x;\n    if (this.active) {\n      set(this.ref, this.val);\n    }\n  }\n}\n\nclass DBNodeArray extends EventEmitter {\n  nodes: Array;\n  lengthNode: DBNode;\n  parentNode: DBNode;\n\n  constructor(lengthNode, parentNode, init: any = {}) {\n    super();\n    this.lengthNode = lengthNode;\n    this.parentNode = parentNode;\n    if (init) {\n    } else {\n      this.nodes = [];\n    }\n  }\n\n  get length() { return this.nodes.length; }\n\n  get active() { return (this.lengthNode.active && this.parentNode.active); }\n\n  get ready() { return (this.lengthNode.val > 0 && this.parentNode.val != false); }\n\n  nodeAt(n) {\n    console.log(this.nodes);\n    console.log(\"node at \", n);\n    console.log(this.nodes[n]);\n    return this.nodes[n];\n  }\n\n  pushNode(n) {\n    this.nodes.push(n);\n  }\n\n  popNode() {\n    return this.nodes.pop();\n  }\n}\n\n/**\n * @class `DBListenerArray`\n * @desc Represents a listener to a list of values in the database \n * (generalizes to `DBNodeArray`). Assumes that the data list is\n * structured such that `lengthNode` is a `DBListener` that stores the \n * length of the list, while `parentNode` is a `DBListener` to the parent\n * node of the list. Each item in the list is a child of `parentNode`,\n * which is then stored as a `DBListener` in the array `nodes`.\n */\nexport class DBListenerArray extends DBNodeArray {\n  lengthNode: DBListener;\n  parentNode: DBListener;\n  nodes: Array;\n\n  /**\n  * holds the Unsubscribe functions that are returned by\n  * DB event functions like onValue(...)\n  */\n  unsubscribers: Array;\n\n  constructor(lengthNode: DBListener, parentNode: DBListener) {\n    super(lengthNode, parentNode);\n    this.lengthNode = lengthNode;\n    this.parentNode = parentNode;\n    this.nodes = [];\n    this.unsubscribers = [];\n  }\n\n  /**\n   * @method attach\n   */\n  attach() {\n    this.lengthNode.attach();\n    this.lengthNode.on('change', (val) => {\n        this.emit('ready', this.ready);\n    });\n\n    this.parentNode.attach();\n    this.parentNode.once('change', (val) => {\n      this.emit('ready', this.ready);\n    });\n\n    for (var node of this.nodes) {\n      this.attachChildNode(node);\n    }\n\n    this.unsubscribers.push(\n      onChildAdded(this.parentNode.ref, (snapshot) => {\n        // console.log(\"child added\", snapshot);\n        this.addNode(snapshot.key);\n    }));\n\n    this.unsubscribers.push(\n      onChildChanged(this.parentNode.ref, (snapshot) => {\n        console.log(\"child changed\", snapshot);\n    }));\n\n    this.unsubscribers.push(\n      onChildRemoved(this.parentNode.ref, () => {\n        // console.log(\"child removed\", snapshot);\n        let removed = this.popNode();\n        this.emit('child-removed', removed);\n    }));\n  }\n\n  detach() {\n    if (this.active) {\n      while (this.unsubscribers.length > 0) {\n        let unsub = this.unsubscribers.pop();\n        unsub();\n      }\n    }\n  }\n\n  nodeAt(n: number) {\n    // console.log(this.nodes);\n    // console.log(\"node at \", n);\n    // console.log(this.nodes[n]);\n    return this.nodes[n];\n  }\n\n  /**\n   * Creating a new child node.\n   * @param key \n   */\n  addNode(key: string) {\n    console.log('child key', key);\n    const childRef = child(this.parentNode.ref, key);\n    const childNode = new DBListener({ ref: childRef, key: key, id: this.length });\n    this.attachChildNode(childNode);\n    this.pushNode(childNode);\n    this.emit('child-added', childNode);\n    // this.lengthNode.setVal(this.length);\n  }\n\n  /**\n   * Attaching a child node that was created elsewhere.\n   * Invokes child's `attach()` method and adds event listener\n   * that will emit a `child-change` event.\n   * @param node \n   */\n  attachChildNode(node: DBListener) {\n    node.attach();\n    node.on('change', (val) => {\n      this.emit('child-change', {\n        id: node.id,\n        val: val\n      });\n    });\n  }\n\n  // remNode() {\n  //   const node = this.popNode();\n  //   // remove(node.ref);\n  //   // this.lengthNode.setVal(this.length);\n  // }\n\n  // updateArray(num: number) {\n  //   // this.parentNode.getNow();\n  //   if (num > this.length) {\n  //     let parentKeys = this.parentNode.val;\n  //     // console.log(this.parentNode);\n  //     console.log(parentKeys);\n  //     let childKeys = Object.keys(parentKeys);\n  //     while (this.length  num) {\n  //       this.popNode();\n  //     }\n  //   }\n  //   console.log(this);\n  // }\n\n  toString() {\n    var str = \"\";\n    // str += \"length: \" + this.length + \", \";\n    str += \"[ \\n\";\n    for (var i=0; i ;\n  lengthNode: DBWriter;\n  parentNode: DBWriter;\n\n  constructor(lengthNode, parentNode, init) {\n    super(lengthNode, parentNode, init);\n    if (!init) {\n      this.lengthNode.setVal(0);\n      this.parentNode.setVal(EMPTY_NODE_ARRAY);\n    }\n\n    // console.log(this);\n  }\n\n  addNode(initVal) {\n    const childRef = push(this.parentNode.ref, initVal);\n    const childNode = new DBWriter({ ref: childRef, initVal });\n    childNode.attach();\n    this.pushNode(childNode);\n    this.lengthNode.setVal(this.length);\n  }\n\n  remNode() {\n    const node = this.popNode();\n    remove(node.ref);\n    this.lengthNode.setVal(this.length);\n  }\n\n  updateArray(num, newStates) {\n    if (num > this.length) {\n      while (this.length  num) {\n        this.remNode();\n      }\n    }\n  }\n\n  setNode(i, x) {\n    this.nodes[i].setVal(x);\n  }\n\n}\n\n/**\n * Array of two-way DBNodes where both ends are listening for\n * changes AND may write to the DB -- such as the virtual pedals\n * where both AdaCAD and the Pi/PC can add virtual pedals\n */\nexport class DBTwoWayArray extends DBNodeArray {\n  nodes: Array = [];\n  lengthNode: DBTwoWay;\n  parentNode: DBTwoWay;\n\n  /**\n  * holds the Unsubscribe functions that are returned by\n  * DB event functions like onValue(...)\n  */\n  unsubscribers: Array;\n\n  constructor(lengthNode: DBTwoWay, parentNode: DBTwoWay, init?: Array) {\n    super(lengthNode, parentNode, init);\n    this.unsubscribers = [];\n    if (!init) {\n      this.lengthNode.setVal(0);\n      this.parentNode.setVal(EMPTY_NODE_ARRAY);\n    }\n  }\n\n  addNode(initVal: any) {\n    push(this.parentNode.ref, initVal);\n    // const childNode = new DBTwoWay({ ref: childRef, initVal });\n    // childNode.attach();\n    // this.pushNode(childNode);\n    // this.lengthNode.setVal(this.length);\n    // console.log('child key', key);\n  }\n\n  onNodeAdded(key: string) {\n     const childRef = child(this.parentNode.ref, key);\n     const childNode = new DBTwoWay({ ref: childRef, key: key, id: this.length });\n     this.attachChildNode(childNode);\n     this.pushNode(childNode);\n     this.lengthNode.setVal(this.length);\n     this.emit('child-added', childNode);\n  }\n\n  remNode() {\n    const lastNode = this.nodeAt(this.length-1);\n    remove(lastNode.ref);\n    // this.lengthNode.setVal(this.length);\n  }\n\n  onNodeRemoved() {\n    let removed = this.popNode();\n    this.lengthNode.setVal(this.length);\n    return removed;\n  }\n\n  updateArray(num: number, newStates: Array) {\n    if (num > this.length) {\n      while (this.length  num) {\n        this.remNode();\n      }\n    }\n  }\n\n  setNode(i: number, x: any) {\n    this.nodes[i].setVal(x);\n  }\n\n  /**\n  * @method attach\n  */\n  attach() {\n    this.lengthNode.attach();\n    this.lengthNode.on('change', (val) => {\n        this.emit('ready', this.ready);\n    });\n\n    this.parentNode.attach();\n    this.parentNode.once('change', (val) => {\n      this.emit('ready', this.ready);\n    });\n\n    for (var node of this.nodes) {\n      this.attachChildNode(node);\n    }\n\n    this.unsubscribers.push(\n      onChildAdded(this.parentNode.ref, (snapshot) => {\n        // console.log(\"child added\", snapshot);\n        this.onNodeAdded(snapshot.key);\n    }));\n\n    this.unsubscribers.push(\n      onChildChanged(this.parentNode.ref, (snapshot) => {\n        console.log(\"child changed\", snapshot);\n    }));\n\n    this.unsubscribers.push(\n      onChildRemoved(this.parentNode.ref, () => {\n        // console.log(\"child removed\", snapshot);\n        let removed = this.onNodeRemoved();\n        this.emit('child-removed', removed);\n    }));\n  }\n \n  detach() {\n    if (this.active) {\n      while (this.unsubscribers.length > 0) {\n        let unsub = this.unsubscribers.pop();\n        unsub();\n      }\n    }\n  }\n\n  /**\n  * Attaching a child node that was created elsewhere.\n  * Invokes child's `attach()` method and adds event listener\n  * that will emit a `child-change` event.\n  * @param node \n  */\n  attachChildNode(node: DBListener) {\n    node.attach();\n    node.on('change', (val) => {\n      this.emit('child-change', {\n        id: node.id,\n        val: val\n      });\n    });\n  }\n}\n\n/** special types of DBNodes */\n\n/** @class\n * OnlineStatus representing whether or not the\n * \"host\" device is online. The host device is responsible\n * for keeping the node set to \"true\", while any listener\n * devices check occasionally for the host's status by \n * attempting to set the node to \"false\".\n */\nexport class OnlineStatus extends DBListener {\n  _name: string;\n  _ref: DatabaseReference;\n  _val: boolean;\n  _active: boolean;\n\n  constructor(params) {\n    super(params);\n    this.attach();\n    get(query(this.ref))\n      .then((snapshot) => {\n        this.val = snapshot.val();\n      })\n      .catch(result => console.log(result));\n  }\n\n  checkAlive() {\n    set(this.ref, false)\n      .then(() => { this.emit('set', true); })\n      .catch(() => { this.emit('set', false); });\n  }\n}\n\n\n    \n\n\n\n\n\n\n\n\n\n\n                   \n    \n         results matching \"\"\n        \n    \n    \n        No results matching \"\"\n    \n\n"},"classes/DBNodeArray.html":{"url":"classes/DBNodeArray.html","title":"class - DBNodeArray","body":"\n                   \n\n\n\n\n\n\n\n\n\n\n\n\n\n  Classes\n  DBNodeArray\n\n\n\n        \n            Info\n        \n        \n            Source\n        \n\n\n\n    \n        \n            File\n        \n        \n            src/app/player/model/dbnodes.ts\n        \n\n\n\n            \n                Extends\n            \n            \n                        EventEmitter\n            \n\n\n\n            \n    Index\n    \n        \n                \n                    \n                        Properties\n                    \n                \n                \n                    \n                        \n                            \n                                lengthNode\n                            \n                            \n                                nodes\n                            \n                            \n                                parentNode\n                            \n                        \n                    \n                \n\n                \n                    \n                        Methods\n                    \n                \n                \n                    \n                        \n                            \n                                nodeAt\n                            \n                            \n                                popNode\n                            \n                            \n                                pushNode\n                            \n                        \n                    \n                \n\n\n\n\n\n                    \n                        \n                            Accessors\n                        \n                    \n                    \n                        \n                            \n                                \n                                    length\n                                \n                                \n                                    active\n                                \n                                \n                                    ready\n                                \n                            \n                        \n                    \n        \n    \n\n\n            \n    Constructor\n        \n            \n                \n                    \nconstructor(lengthNode, parentNode, init: any)\n                    \n                \n                        \n                            \n                                Defined in src/app/player/model/dbnodes.ts:269\n                            \n                        \n\n                \n                    \n                            \n                                    Parameters :\n                                    \n                                        \n                                            \n                                                Name\n                                                    Type\n                                                Optional\n                                            \n                                        \n                                        \n                                                \n                                                        lengthNode\n                                                  \n                                                        \n                                                        \n                                                  \n                                                    \n                                                            No\n                                                    \n                                                    \n                                                \n                                                \n                                                        parentNode\n                                                  \n                                                        \n                                                        \n                                                  \n                                                    \n                                                            No\n                                                    \n                                                    \n                                                \n                                                \n                                                        init\n                                                  \n                                                        \n                                                                        any\n                                                        \n                                                  \n                                                    \n                                                            No\n                                                    \n                                                    \n                                                \n                                        \n                                    \n                            \n                    \n                \n            \n        \n\n\n            \n    \n    \n        Properties\n    \n    \n        \n            \n                \n                    \n                    \n                        lengthNode\n                        \n                    \n                \n            \n                \n                    \n                        Type :         DBNode\n\n                    \n                \n                    \n                        \n                                Defined in src/app/player/model/dbnodes.ts:268\n                        \n                    \n\n\n        \n    \n    \n        \n            \n                \n                    \n                    \n                        nodes\n                        \n                    \n                \n            \n                \n                    \n                        Type :         Array\n\n                    \n                \n                    \n                        \n                                Defined in src/app/player/model/dbnodes.ts:267\n                        \n                    \n\n\n        \n    \n    \n        \n            \n                \n                    \n                    \n                        parentNode\n                        \n                    \n                \n            \n                \n                    \n                        Type :         DBNode\n\n                    \n                \n                    \n                        \n                                Defined in src/app/player/model/dbnodes.ts:269\n                        \n                    \n\n\n        \n    \n\n\n            \n    \n    \n        Methods\n    \n    \n        \n            \n                \n                    \n                    \n                        nodeAt\n                        \n                    \n                \n            \n            \n                \nnodeAt(n)\n                \n            \n\n\n            \n                \n                    Defined in src/app/player/model/dbnodes.ts:287\n                \n            \n\n\n            \n                \n\n                    \n                        Parameters :\n                        \n                        \n                            \n                                \n                                    Name\n                                    Optional\n                                \n                            \n                            \n                                \n                                    n\n\n                                    \n                                        No\n                                    \n\n\n                                \n                            \n                        \n                    \n                    \n                    \n                    \n                        Returns :         Array\n\n                    \n                    \n                        \n                    \n                \n            \n        \n    \n    \n        \n            \n                \n                    \n                    \n                        popNode\n                        \n                    \n                \n            \n            \n                \npopNode()\n                \n            \n\n\n            \n                \n                    Defined in src/app/player/model/dbnodes.ts:298\n                \n            \n\n\n            \n                \n\n                    \n                        Returns :         any\n\n                    \n                \n            \n        \n    \n    \n        \n            \n                \n                    \n                    \n                        pushNode\n                        \n                    \n                \n            \n            \n                \npushNode(n)\n                \n            \n\n\n            \n                \n                    Defined in src/app/player/model/dbnodes.ts:294\n                \n            \n\n\n            \n                \n\n                    \n                        Parameters :\n                        \n                        \n                            \n                                \n                                    Name\n                                    Optional\n                                \n                            \n                            \n                                \n                                    n\n\n                                    \n                                        No\n                                    \n\n\n                                \n                            \n                        \n                    \n                    \n                    \n                    \n                        Returns :         void\n\n                    \n                    \n                        \n                    \n                \n            \n        \n    \n\n\n\n\n\n\n            \n    \n        Accessors\n    \n        \n            \n                \n                    \n                        \n                        length\n                    \n                \n\n                \n                    \n                        getlength()\n                    \n                \n                            \n                                \n                                    Defined in src/app/player/model/dbnodes.ts:281\n                                \n                            \n\n            \n        \n        \n            \n                \n                    \n                        \n                        active\n                    \n                \n\n                \n                    \n                        getactive()\n                    \n                \n                            \n                                \n                                    Defined in src/app/player/model/dbnodes.ts:283\n                                \n                            \n\n            \n        \n        \n            \n                \n                    \n                        \n                        ready\n                    \n                \n\n                \n                    \n                        getready()\n                    \n                \n                            \n                                \n                                    Defined in src/app/player/model/dbnodes.ts:285\n                                \n                            \n\n            \n        \n\n    \n\n\n    \n        import { child, ref, set, get, query, \n  onValue, onChildAdded, onChildChanged, onChildRemoved,\n  push, remove,\n  DatabaseReference, \n} from \"firebase/database\";\nimport { Database } from '@angular/fire/database';\nimport { EventEmitter } from 'events';\n\nexport interface NodeParams {\n  db?: Database,\n  name?: string,\n  root?: string,\n  path?: string,\n  key?: string,\n  initVal?: any,\n  ref?: DatabaseReference,\n  id?: number\n}\n\nexport type NodeValue = string | boolean | number | { [key: string]: any };\n\ninterface NodeMethods {\n  attach(): void,\n  detach(): void,\n}\n\n/**\n * @class DBNode\n * @desc Wrapper for a Firebase database ref and\n * the value stored at that DB node.\n */\nabstract class DBNode extends EventEmitter implements NodeMethods {\n  id: number;\n  key?: string;\n  _name: string;\n  _dbref: DatabaseReference;\n  _val: NodeValue;\n  _active: boolean;\n\n  /**\n   * holds the Unsubscribe functions that are returned by\n   * DB event functions like onValue(...)\n   */\n  unsubscribers: Array;\n\n  /**\n   * \n   * @param {*} params \\{ db: Database, path: string, initVal: any }\n   * @param {*} params \\{ ref: DatabaseReference, key: string, initVal: any }\n   */\n\n  constructor(params: NodeParams) {\n    super();\n    this.active = false;\n    this.unsubscribers = [];\n    if (params.db) {\n      this._name = params.path;\n      this._dbref = ref(params.db, params.root + params.path);\n      this._val = params.initVal;\n      // console.log(this);\n    } else if (params.ref) {\n      this._name = params.key;\n      this._dbref = params.ref;\n    }\n\n    if(params.id > -1) {\n      this.id = params.id;\n    }\n    console.log(this.name);\n  }\n\n  get ref() {\n    return this._dbref;\n  }\n\n  get name() {\n    return this._name;\n  }\n\n  get val() {\n    if (!this.active) {\n      return false;\n    }\n\n    if (typeof(this._val) == 'number' || typeof(this._val == 'boolean')) {\n      return this._val;\n    } \n    \n    if (this._val != undefined) {\n      return Object.keys(this._val);\n    }\n  }\n\n  set val(x) {\n    this._val = x;\n  }\n\n  get active() {\n    return this._active;\n  }\n\n  set active(tf: boolean) {\n    this._active = tf;\n  }\n\n  // methods for a node: \n  // attach() means it is updating with the database and emitting events\n  // detach() means it is not updating, no events\n  abstract attach();\n  abstract detach();\n}\n\ntype Keyed = Node & { key: string };\n\n/**\n * @class DBListener\n * @desc A DBNode that only reads from the database.\n * When `active = true`, will emit events on the value changing.\n */\nexport class DBListener extends DBNode {\n  id: number;\n  key?: string;\n  _name: string;\n  _dbref: DatabaseReference;\n  _val: any;\n  _active: boolean;\n\n  constructor(params: NodeParams) {\n    super(params);\n  }\n\n  attach() {\n    this.active = true;\n    let unsub = onValue(this.ref, (snapshot) => {\n      this.val = snapshot.val();\n      this.emit('change', this.val);\n    });\n    this.unsubscribers.push(unsub);\n  }\n\n  getNow() {\n    get(query(this.ref))\n      .then((snapshot) => {\n        this.val = snapshot.val();\n      })\n      .catch(result => console.log(result));\n  }\n\n  detach() {\n    if (this.active) {\n      while (this.unsubscribers.length > 0) {\n        let unsub = this.unsubscribers.pop();\n        unsub();\n      }\n    }\n    this.active = false;\n  }\n}\n\n/**\n * @class DBWriter\n * @desc A DBNode that only writes to the database. \n * When `active = true`, will pass `val` to the database.\n */\nexport class DBWriter extends DBNode {\n  id: number;\n  key?: string;\n  _name: string;\n  _ref: DatabaseReference;\n  _val: any;\n  _active: boolean;\n\n  constructor(params: NodeParams) {\n    super(params);\n  }\n\n  attach() {\n    this.active = true;\n  }\n\n  setVal(x) {\n    this.val = x;\n    if (this.active) {\n      set(this.ref, this.val);\n    }\n  }\n\n  detach() {\n    this.active = false;\n  }\n}\n\n/** Special DBWriter that expects the node to be cleared by the\n * other end upon receipt\n */\nexport class DBWriteBuffer extends DBWriter {\n  id: number;\n  _name: string;\n  _ref: DatabaseReference;\n  _val: any;\n  _active: boolean;\n\n  constructor(params: NodeParams) {\n    super(params);\n  }\n\n  setVal(x) {\n    get(query(this.ref))\n      .then((snapshot) => {\n        if(!snapshot.val()) {\n          console.log(\"overwriting data in buffer\");\n        }\n        super.setVal(x);\n      })\n      .catch(result => console.log(result));\n  }\n}\n\nexport class DBTwoWay extends DBNode {\n  id: number;\n  key?: string;\n  _name: string;\n  _dbref: DatabaseReference;\n  _val: any;\n  _active: boolean;\n\n  constructor(params: NodeParams) {\n    super(params);\n  }\n  \n  attach() {\n    this.active = true;\n    let unsub = onValue(this.ref, (snapshot) => {\n      this.val = snapshot.val();\n      this.emit('change', this.val);\n    });\n    this.unsubscribers.push(unsub);\n  }\n\n  getNow() {\n    get(query(this.ref))\n      .then((snapshot) => {\n        this.val = snapshot.val();\n      })\n      .catch(result => console.log(result));\n  }\n  \n  detach() {\n    if (this.active) {\n      while (this.unsubscribers.length > 0) {\n        let unsub = this.unsubscribers.pop();\n        unsub();\n      }\n    }\n    this.active = false;\n  }\n  \n  setVal(x) {\n    this.val = x;\n    if (this.active) {\n      set(this.ref, this.val);\n    }\n  }\n}\n\nclass DBNodeArray extends EventEmitter {\n  nodes: Array;\n  lengthNode: DBNode;\n  parentNode: DBNode;\n\n  constructor(lengthNode, parentNode, init: any = {}) {\n    super();\n    this.lengthNode = lengthNode;\n    this.parentNode = parentNode;\n    if (init) {\n    } else {\n      this.nodes = [];\n    }\n  }\n\n  get length() { return this.nodes.length; }\n\n  get active() { return (this.lengthNode.active && this.parentNode.active); }\n\n  get ready() { return (this.lengthNode.val > 0 && this.parentNode.val != false); }\n\n  nodeAt(n) {\n    console.log(this.nodes);\n    console.log(\"node at \", n);\n    console.log(this.nodes[n]);\n    return this.nodes[n];\n  }\n\n  pushNode(n) {\n    this.nodes.push(n);\n  }\n\n  popNode() {\n    return this.nodes.pop();\n  }\n}\n\n/**\n * @class `DBListenerArray`\n * @desc Represents a listener to a list of values in the database \n * (generalizes to `DBNodeArray`). Assumes that the data list is\n * structured such that `lengthNode` is a `DBListener` that stores the \n * length of the list, while `parentNode` is a `DBListener` to the parent\n * node of the list. Each item in the list is a child of `parentNode`,\n * which is then stored as a `DBListener` in the array `nodes`.\n */\nexport class DBListenerArray extends DBNodeArray {\n  lengthNode: DBListener;\n  parentNode: DBListener;\n  nodes: Array;\n\n  /**\n  * holds the Unsubscribe functions that are returned by\n  * DB event functions like onValue(...)\n  */\n  unsubscribers: Array;\n\n  constructor(lengthNode: DBListener, parentNode: DBListener) {\n    super(lengthNode, parentNode);\n    this.lengthNode = lengthNode;\n    this.parentNode = parentNode;\n    this.nodes = [];\n    this.unsubscribers = [];\n  }\n\n  /**\n   * @method attach\n   */\n  attach() {\n    this.lengthNode.attach();\n    this.lengthNode.on('change', (val) => {\n        this.emit('ready', this.ready);\n    });\n\n    this.parentNode.attach();\n    this.parentNode.once('change', (val) => {\n      this.emit('ready', this.ready);\n    });\n\n    for (var node of this.nodes) {\n      this.attachChildNode(node);\n    }\n\n    this.unsubscribers.push(\n      onChildAdded(this.parentNode.ref, (snapshot) => {\n        // console.log(\"child added\", snapshot);\n        this.addNode(snapshot.key);\n    }));\n\n    this.unsubscribers.push(\n      onChildChanged(this.parentNode.ref, (snapshot) => {\n        console.log(\"child changed\", snapshot);\n    }));\n\n    this.unsubscribers.push(\n      onChildRemoved(this.parentNode.ref, () => {\n        // console.log(\"child removed\", snapshot);\n        let removed = this.popNode();\n        this.emit('child-removed', removed);\n    }));\n  }\n\n  detach() {\n    if (this.active) {\n      while (this.unsubscribers.length > 0) {\n        let unsub = this.unsubscribers.pop();\n        unsub();\n      }\n    }\n  }\n\n  nodeAt(n: number) {\n    // console.log(this.nodes);\n    // console.log(\"node at \", n);\n    // console.log(this.nodes[n]);\n    return this.nodes[n];\n  }\n\n  /**\n   * Creating a new child node.\n   * @param key \n   */\n  addNode(key: string) {\n    console.log('child key', key);\n    const childRef = child(this.parentNode.ref, key);\n    const childNode = new DBListener({ ref: childRef, key: key, id: this.length });\n    this.attachChildNode(childNode);\n    this.pushNode(childNode);\n    this.emit('child-added', childNode);\n    // this.lengthNode.setVal(this.length);\n  }\n\n  /**\n   * Attaching a child node that was created elsewhere.\n   * Invokes child's `attach()` method and adds event listener\n   * that will emit a `child-change` event.\n   * @param node \n   */\n  attachChildNode(node: DBListener) {\n    node.attach();\n    node.on('change', (val) => {\n      this.emit('child-change', {\n        id: node.id,\n        val: val\n      });\n    });\n  }\n\n  // remNode() {\n  //   const node = this.popNode();\n  //   // remove(node.ref);\n  //   // this.lengthNode.setVal(this.length);\n  // }\n\n  // updateArray(num: number) {\n  //   // this.parentNode.getNow();\n  //   if (num > this.length) {\n  //     let parentKeys = this.parentNode.val;\n  //     // console.log(this.parentNode);\n  //     console.log(parentKeys);\n  //     let childKeys = Object.keys(parentKeys);\n  //     while (this.length  num) {\n  //       this.popNode();\n  //     }\n  //   }\n  //   console.log(this);\n  // }\n\n  toString() {\n    var str = \"\";\n    // str += \"length: \" + this.length + \", \";\n    str += \"[ \\n\";\n    for (var i=0; i ;\n  lengthNode: DBWriter;\n  parentNode: DBWriter;\n\n  constructor(lengthNode, parentNode, init) {\n    super(lengthNode, parentNode, init);\n    if (!init) {\n      this.lengthNode.setVal(0);\n      this.parentNode.setVal(EMPTY_NODE_ARRAY);\n    }\n\n    // console.log(this);\n  }\n\n  addNode(initVal) {\n    const childRef = push(this.parentNode.ref, initVal);\n    const childNode = new DBWriter({ ref: childRef, initVal });\n    childNode.attach();\n    this.pushNode(childNode);\n    this.lengthNode.setVal(this.length);\n  }\n\n  remNode() {\n    const node = this.popNode();\n    remove(node.ref);\n    this.lengthNode.setVal(this.length);\n  }\n\n  updateArray(num, newStates) {\n    if (num > this.length) {\n      while (this.length  num) {\n        this.remNode();\n      }\n    }\n  }\n\n  setNode(i, x) {\n    this.nodes[i].setVal(x);\n  }\n\n}\n\n/**\n * Array of two-way DBNodes where both ends are listening for\n * changes AND may write to the DB -- such as the virtual pedals\n * where both AdaCAD and the Pi/PC can add virtual pedals\n */\nexport class DBTwoWayArray extends DBNodeArray {\n  nodes: Array = [];\n  lengthNode: DBTwoWay;\n  parentNode: DBTwoWay;\n\n  /**\n  * holds the Unsubscribe functions that are returned by\n  * DB event functions like onValue(...)\n  */\n  unsubscribers: Array;\n\n  constructor(lengthNode: DBTwoWay, parentNode: DBTwoWay, init?: Array) {\n    super(lengthNode, parentNode, init);\n    this.unsubscribers = [];\n    if (!init) {\n      this.lengthNode.setVal(0);\n      this.parentNode.setVal(EMPTY_NODE_ARRAY);\n    }\n  }\n\n  addNode(initVal: any) {\n    push(this.parentNode.ref, initVal);\n    // const childNode = new DBTwoWay({ ref: childRef, initVal });\n    // childNode.attach();\n    // this.pushNode(childNode);\n    // this.lengthNode.setVal(this.length);\n    // console.log('child key', key);\n  }\n\n  onNodeAdded(key: string) {\n     const childRef = child(this.parentNode.ref, key);\n     const childNode = new DBTwoWay({ ref: childRef, key: key, id: this.length });\n     this.attachChildNode(childNode);\n     this.pushNode(childNode);\n     this.lengthNode.setVal(this.length);\n     this.emit('child-added', childNode);\n  }\n\n  remNode() {\n    const lastNode = this.nodeAt(this.length-1);\n    remove(lastNode.ref);\n    // this.lengthNode.setVal(this.length);\n  }\n\n  onNodeRemoved() {\n    let removed = this.popNode();\n    this.lengthNode.setVal(this.length);\n    return removed;\n  }\n\n  updateArray(num: number, newStates: Array) {\n    if (num > this.length) {\n      while (this.length  num) {\n        this.remNode();\n      }\n    }\n  }\n\n  setNode(i: number, x: any) {\n    this.nodes[i].setVal(x);\n  }\n\n  /**\n  * @method attach\n  */\n  attach() {\n    this.lengthNode.attach();\n    this.lengthNode.on('change', (val) => {\n        this.emit('ready', this.ready);\n    });\n\n    this.parentNode.attach();\n    this.parentNode.once('change', (val) => {\n      this.emit('ready', this.ready);\n    });\n\n    for (var node of this.nodes) {\n      this.attachChildNode(node);\n    }\n\n    this.unsubscribers.push(\n      onChildAdded(this.parentNode.ref, (snapshot) => {\n        // console.log(\"child added\", snapshot);\n        this.onNodeAdded(snapshot.key);\n    }));\n\n    this.unsubscribers.push(\n      onChildChanged(this.parentNode.ref, (snapshot) => {\n        console.log(\"child changed\", snapshot);\n    }));\n\n    this.unsubscribers.push(\n      onChildRemoved(this.parentNode.ref, () => {\n        // console.log(\"child removed\", snapshot);\n        let removed = this.onNodeRemoved();\n        this.emit('child-removed', removed);\n    }));\n  }\n \n  detach() {\n    if (this.active) {\n      while (this.unsubscribers.length > 0) {\n        let unsub = this.unsubscribers.pop();\n        unsub();\n      }\n    }\n  }\n\n  /**\n  * Attaching a child node that was created elsewhere.\n  * Invokes child's `attach()` method and adds event listener\n  * that will emit a `child-change` event.\n  * @param node \n  */\n  attachChildNode(node: DBListener) {\n    node.attach();\n    node.on('change', (val) => {\n      this.emit('child-change', {\n        id: node.id,\n        val: val\n      });\n    });\n  }\n}\n\n/** special types of DBNodes */\n\n/** @class\n * OnlineStatus representing whether or not the\n * \"host\" device is online. The host device is responsible\n * for keeping the node set to \"true\", while any listener\n * devices check occasionally for the host's status by \n * attempting to set the node to \"false\".\n */\nexport class OnlineStatus extends DBListener {\n  _name: string;\n  _ref: DatabaseReference;\n  _val: boolean;\n  _active: boolean;\n\n  constructor(params) {\n    super(params);\n    this.attach();\n    get(query(this.ref))\n      .then((snapshot) => {\n        this.val = snapshot.val();\n      })\n      .catch(result => console.log(result));\n  }\n\n  checkAlive() {\n    set(this.ref, false)\n      .then(() => { this.emit('set', true); })\n      .catch(() => { this.emit('set', false); });\n  }\n}\n\n\n    \n\n\n\n\n\n\n\n\n\n\n                   \n    \n         results matching \"\"\n        \n    \n    \n        No results matching \"\"\n    \n\n"},"classes/DBTwoWay.html":{"url":"classes/DBTwoWay.html","title":"class - DBTwoWay","body":"\n                   \n\n\n\n\n\n\n\n\n\n\n\n\n\n  Classes\n  DBTwoWay\n\n\n\n        \n            Info\n        \n        \n            Source\n        \n\n\n\n    \n        \n            File\n        \n        \n            src/app/player/model/dbnodes.ts\n        \n\n\n\n            \n                Extends\n            \n            \n                        DBNode\n            \n\n\n\n            \n    Index\n    \n        \n                \n                    \n                        Properties\n                    \n                \n                \n                    \n                        \n                            \n                                _active\n                            \n                            \n                                _dbref\n                            \n                            \n                                _name\n                            \n                            \n                                _val\n                            \n                            \n                                id\n                            \n                            \n                                    Optional\n                                key\n                            \n                            \n                                unsubscribers\n                            \n                        \n                    \n                \n\n                \n                    \n                        Methods\n                    \n                \n                \n                    \n                        \n                            \n                                attach\n                            \n                            \n                                detach\n                            \n                            \n                                getNow\n                            \n                            \n                                setVal\n                            \n                        \n                    \n                \n\n\n\n\n\n        \n    \n\n\n            \n    Constructor\n        \n            \n                \n                    \nconstructor(params: NodeParams)\n                    \n                \n                        \n                            \n                                Defined in src/app/player/model/dbnodes.ts:225\n                            \n                        \n\n                \n                    \n                            \n                                    Parameters :\n                                    \n                                        \n                                            \n                                                Name\n                                                    Type\n                                                Optional\n                                            \n                                        \n                                        \n                                                \n                                                        params\n                                                  \n                                                        \n                                                                        NodeParams\n                                                        \n                                                  \n                                                    \n                                                            No\n                                                    \n                                                    \n                                                \n                                        \n                                    \n                            \n                    \n                \n            \n        \n\n\n            \n    \n    \n        Properties\n    \n    \n        \n            \n                \n                    \n                    \n                        _active\n                        \n                    \n                \n            \n                \n                    \n                        Type :         boolean\n\n                    \n                \n                        \n                            \n                                Inherited from         DBNode\n\n                            \n                        \n                    \n                        \n                                Defined in         DBNode:225\n\n                        \n                    \n\n\n        \n    \n    \n        \n            \n                \n                    \n                    \n                        _dbref\n                        \n                    \n                \n            \n                \n                    \n                        Type :     DatabaseReference\n\n                    \n                \n                        \n                            \n                                Inherited from         DBNode\n\n                            \n                        \n                    \n                        \n                                Defined in         DBNode:223\n\n                        \n                    \n\n\n        \n    \n    \n        \n            \n                \n                    \n                    \n                        _name\n                        \n                    \n                \n            \n                \n                    \n                        Type :         string\n\n                    \n                \n                        \n                            \n                                Inherited from         DBNode\n\n                            \n                        \n                    \n                        \n                                Defined in         DBNode:222\n\n                        \n                    \n\n\n        \n    \n    \n        \n            \n                \n                    \n                    \n                        _val\n                        \n                    \n                \n            \n                \n                    \n                        Type :         any\n\n                    \n                \n                        \n                            \n                                Inherited from         DBNode\n\n                            \n                        \n                    \n                        \n                                Defined in         DBNode:224\n\n                        \n                    \n\n\n        \n    \n    \n        \n            \n                \n                    \n                    \n                        id\n                        \n                    \n                \n            \n                \n                    \n                        Type :         number\n\n                    \n                \n                        \n                            \n                                Inherited from         DBNode\n\n                            \n                        \n                    \n                        \n                                Defined in         DBNode:220\n\n                        \n                    \n\n\n        \n    \n    \n        \n            \n                \n                    \n                    \n                            Optional\n                        key\n                        \n                    \n                \n            \n                \n                    \n                        Type :         string\n\n                    \n                \n                        \n                            \n                                Inherited from         DBNode\n\n                            \n                        \n                    \n                        \n                                Defined in         DBNode:221\n\n                        \n                    \n\n\n        \n    \n    \n        \n            \n                \n                    \n                    \n                        unsubscribers\n                        \n                    \n                \n            \n                \n                    \n                        Type :     Array\n\n                    \n                \n                        \n                            \n                                Inherited from         DBNode\n\n                            \n                        \n                    \n                        \n                                Defined in         DBNode:44\n\n                        \n                    \n\n            \n                \n                    holds the Unsubscribe functions that are returned by\nDB event functions like onValue(...)\n\n                \n            \n\n        \n    \n\n\n            \n    \n    \n        Methods\n    \n    \n        \n            \n                \n                    \n                    \n                        attach\n                        \n                    \n                \n            \n            \n                \nattach()\n                \n            \n\n\n            \n                \n                    Inherited from         DBNode\n\n                \n            \n            \n                \n                        Defined in         DBNode:231\n\n                \n            \n\n\n            \n                \n\n                    \n                        Returns :         void\n\n                    \n                \n            \n        \n    \n    \n        \n            \n                \n                    \n                    \n                        detach\n                        \n                    \n                \n            \n            \n                \ndetach()\n                \n            \n\n\n            \n                \n                    Inherited from         DBNode\n\n                \n            \n            \n                \n                        Defined in         DBNode:248\n\n                \n            \n\n\n            \n                \n\n                    \n                        Returns :         void\n\n                    \n                \n            \n        \n    \n    \n        \n            \n                \n                    \n                    \n                        getNow\n                        \n                    \n                \n            \n            \n                \ngetNow()\n                \n            \n\n\n            \n                \n                    Defined in src/app/player/model/dbnodes.ts:240\n                \n            \n\n\n            \n                \n\n                    \n                        Returns :         void\n\n                    \n                \n            \n        \n    \n    \n        \n            \n                \n                    \n                    \n                        setVal\n                        \n                    \n                \n            \n            \n                \nsetVal(x)\n                \n            \n\n\n            \n                \n                    Defined in src/app/player/model/dbnodes.ts:258\n                \n            \n\n\n            \n                \n\n                    \n                        Parameters :\n                        \n                        \n                            \n                                \n                                    Name\n                                    Optional\n                                \n                            \n                            \n                                \n                                    x\n\n                                    \n                                        No\n                                    \n\n\n                                \n                            \n                        \n                    \n                    \n                    \n                    \n                        Returns :         void\n\n                    \n                    \n                        \n                    \n                \n            \n        \n    \n\n\n\n\n\n\n    \n\n\n    \n        import { child, ref, set, get, query, \n  onValue, onChildAdded, onChildChanged, onChildRemoved,\n  push, remove,\n  DatabaseReference, \n} from \"firebase/database\";\nimport { Database } from '@angular/fire/database';\nimport { EventEmitter } from 'events';\n\nexport interface NodeParams {\n  db?: Database,\n  name?: string,\n  root?: string,\n  path?: string,\n  key?: string,\n  initVal?: any,\n  ref?: DatabaseReference,\n  id?: number\n}\n\nexport type NodeValue = string | boolean | number | { [key: string]: any };\n\ninterface NodeMethods {\n  attach(): void,\n  detach(): void,\n}\n\n/**\n * @class DBNode\n * @desc Wrapper for a Firebase database ref and\n * the value stored at that DB node.\n */\nabstract class DBNode extends EventEmitter implements NodeMethods {\n  id: number;\n  key?: string;\n  _name: string;\n  _dbref: DatabaseReference;\n  _val: NodeValue;\n  _active: boolean;\n\n  /**\n   * holds the Unsubscribe functions that are returned by\n   * DB event functions like onValue(...)\n   */\n  unsubscribers: Array;\n\n  /**\n   * \n   * @param {*} params \\{ db: Database, path: string, initVal: any }\n   * @param {*} params \\{ ref: DatabaseReference, key: string, initVal: any }\n   */\n\n  constructor(params: NodeParams) {\n    super();\n    this.active = false;\n    this.unsubscribers = [];\n    if (params.db) {\n      this._name = params.path;\n      this._dbref = ref(params.db, params.root + params.path);\n      this._val = params.initVal;\n      // console.log(this);\n    } else if (params.ref) {\n      this._name = params.key;\n      this._dbref = params.ref;\n    }\n\n    if(params.id > -1) {\n      this.id = params.id;\n    }\n    console.log(this.name);\n  }\n\n  get ref() {\n    return this._dbref;\n  }\n\n  get name() {\n    return this._name;\n  }\n\n  get val() {\n    if (!this.active) {\n      return false;\n    }\n\n    if (typeof(this._val) == 'number' || typeof(this._val == 'boolean')) {\n      return this._val;\n    } \n    \n    if (this._val != undefined) {\n      return Object.keys(this._val);\n    }\n  }\n\n  set val(x) {\n    this._val = x;\n  }\n\n  get active() {\n    return this._active;\n  }\n\n  set active(tf: boolean) {\n    this._active = tf;\n  }\n\n  // methods for a node: \n  // attach() means it is updating with the database and emitting events\n  // detach() means it is not updating, no events\n  abstract attach();\n  abstract detach();\n}\n\ntype Keyed = Node & { key: string };\n\n/**\n * @class DBListener\n * @desc A DBNode that only reads from the database.\n * When `active = true`, will emit events on the value changing.\n */\nexport class DBListener extends DBNode {\n  id: number;\n  key?: string;\n  _name: string;\n  _dbref: DatabaseReference;\n  _val: any;\n  _active: boolean;\n\n  constructor(params: NodeParams) {\n    super(params);\n  }\n\n  attach() {\n    this.active = true;\n    let unsub = onValue(this.ref, (snapshot) => {\n      this.val = snapshot.val();\n      this.emit('change', this.val);\n    });\n    this.unsubscribers.push(unsub);\n  }\n\n  getNow() {\n    get(query(this.ref))\n      .then((snapshot) => {\n        this.val = snapshot.val();\n      })\n      .catch(result => console.log(result));\n  }\n\n  detach() {\n    if (this.active) {\n      while (this.unsubscribers.length > 0) {\n        let unsub = this.unsubscribers.pop();\n        unsub();\n      }\n    }\n    this.active = false;\n  }\n}\n\n/**\n * @class DBWriter\n * @desc A DBNode that only writes to the database. \n * When `active = true`, will pass `val` to the database.\n */\nexport class DBWriter extends DBNode {\n  id: number;\n  key?: string;\n  _name: string;\n  _ref: DatabaseReference;\n  _val: any;\n  _active: boolean;\n\n  constructor(params: NodeParams) {\n    super(params);\n  }\n\n  attach() {\n    this.active = true;\n  }\n\n  setVal(x) {\n    this.val = x;\n    if (this.active) {\n      set(this.ref, this.val);\n    }\n  }\n\n  detach() {\n    this.active = false;\n  }\n}\n\n/** Special DBWriter that expects the node to be cleared by the\n * other end upon receipt\n */\nexport class DBWriteBuffer extends DBWriter {\n  id: number;\n  _name: string;\n  _ref: DatabaseReference;\n  _val: any;\n  _active: boolean;\n\n  constructor(params: NodeParams) {\n    super(params);\n  }\n\n  setVal(x) {\n    get(query(this.ref))\n      .then((snapshot) => {\n        if(!snapshot.val()) {\n          console.log(\"overwriting data in buffer\");\n        }\n        super.setVal(x);\n      })\n      .catch(result => console.log(result));\n  }\n}\n\nexport class DBTwoWay extends DBNode {\n  id: number;\n  key?: string;\n  _name: string;\n  _dbref: DatabaseReference;\n  _val: any;\n  _active: boolean;\n\n  constructor(params: NodeParams) {\n    super(params);\n  }\n  \n  attach() {\n    this.active = true;\n    let unsub = onValue(this.ref, (snapshot) => {\n      this.val = snapshot.val();\n      this.emit('change', this.val);\n    });\n    this.unsubscribers.push(unsub);\n  }\n\n  getNow() {\n    get(query(this.ref))\n      .then((snapshot) => {\n        this.val = snapshot.val();\n      })\n      .catch(result => console.log(result));\n  }\n  \n  detach() {\n    if (this.active) {\n      while (this.unsubscribers.length > 0) {\n        let unsub = this.unsubscribers.pop();\n        unsub();\n      }\n    }\n    this.active = false;\n  }\n  \n  setVal(x) {\n    this.val = x;\n    if (this.active) {\n      set(this.ref, this.val);\n    }\n  }\n}\n\nclass DBNodeArray extends EventEmitter {\n  nodes: Array;\n  lengthNode: DBNode;\n  parentNode: DBNode;\n\n  constructor(lengthNode, parentNode, init: any = {}) {\n    super();\n    this.lengthNode = lengthNode;\n    this.parentNode = parentNode;\n    if (init) {\n    } else {\n      this.nodes = [];\n    }\n  }\n\n  get length() { return this.nodes.length; }\n\n  get active() { return (this.lengthNode.active && this.parentNode.active); }\n\n  get ready() { return (this.lengthNode.val > 0 && this.parentNode.val != false); }\n\n  nodeAt(n) {\n    console.log(this.nodes);\n    console.log(\"node at \", n);\n    console.log(this.nodes[n]);\n    return this.nodes[n];\n  }\n\n  pushNode(n) {\n    this.nodes.push(n);\n  }\n\n  popNode() {\n    return this.nodes.pop();\n  }\n}\n\n/**\n * @class `DBListenerArray`\n * @desc Represents a listener to a list of values in the database \n * (generalizes to `DBNodeArray`). Assumes that the data list is\n * structured such that `lengthNode` is a `DBListener` that stores the \n * length of the list, while `parentNode` is a `DBListener` to the parent\n * node of the list. Each item in the list is a child of `parentNode`,\n * which is then stored as a `DBListener` in the array `nodes`.\n */\nexport class DBListenerArray extends DBNodeArray {\n  lengthNode: DBListener;\n  parentNode: DBListener;\n  nodes: Array;\n\n  /**\n  * holds the Unsubscribe functions that are returned by\n  * DB event functions like onValue(...)\n  */\n  unsubscribers: Array;\n\n  constructor(lengthNode: DBListener, parentNode: DBListener) {\n    super(lengthNode, parentNode);\n    this.lengthNode = lengthNode;\n    this.parentNode = parentNode;\n    this.nodes = [];\n    this.unsubscribers = [];\n  }\n\n  /**\n   * @method attach\n   */\n  attach() {\n    this.lengthNode.attach();\n    this.lengthNode.on('change', (val) => {\n        this.emit('ready', this.ready);\n    });\n\n    this.parentNode.attach();\n    this.parentNode.once('change', (val) => {\n      this.emit('ready', this.ready);\n    });\n\n    for (var node of this.nodes) {\n      this.attachChildNode(node);\n    }\n\n    this.unsubscribers.push(\n      onChildAdded(this.parentNode.ref, (snapshot) => {\n        // console.log(\"child added\", snapshot);\n        this.addNode(snapshot.key);\n    }));\n\n    this.unsubscribers.push(\n      onChildChanged(this.parentNode.ref, (snapshot) => {\n        console.log(\"child changed\", snapshot);\n    }));\n\n    this.unsubscribers.push(\n      onChildRemoved(this.parentNode.ref, () => {\n        // console.log(\"child removed\", snapshot);\n        let removed = this.popNode();\n        this.emit('child-removed', removed);\n    }));\n  }\n\n  detach() {\n    if (this.active) {\n      while (this.unsubscribers.length > 0) {\n        let unsub = this.unsubscribers.pop();\n        unsub();\n      }\n    }\n  }\n\n  nodeAt(n: number) {\n    // console.log(this.nodes);\n    // console.log(\"node at \", n);\n    // console.log(this.nodes[n]);\n    return this.nodes[n];\n  }\n\n  /**\n   * Creating a new child node.\n   * @param key \n   */\n  addNode(key: string) {\n    console.log('child key', key);\n    const childRef = child(this.parentNode.ref, key);\n    const childNode = new DBListener({ ref: childRef, key: key, id: this.length });\n    this.attachChildNode(childNode);\n    this.pushNode(childNode);\n    this.emit('child-added', childNode);\n    // this.lengthNode.setVal(this.length);\n  }\n\n  /**\n   * Attaching a child node that was created elsewhere.\n   * Invokes child's `attach()` method and adds event listener\n   * that will emit a `child-change` event.\n   * @param node \n   */\n  attachChildNode(node: DBListener) {\n    node.attach();\n    node.on('change', (val) => {\n      this.emit('child-change', {\n        id: node.id,\n        val: val\n      });\n    });\n  }\n\n  // remNode() {\n  //   const node = this.popNode();\n  //   // remove(node.ref);\n  //   // this.lengthNode.setVal(this.length);\n  // }\n\n  // updateArray(num: number) {\n  //   // this.parentNode.getNow();\n  //   if (num > this.length) {\n  //     let parentKeys = this.parentNode.val;\n  //     // console.log(this.parentNode);\n  //     console.log(parentKeys);\n  //     let childKeys = Object.keys(parentKeys);\n  //     while (this.length  num) {\n  //       this.popNode();\n  //     }\n  //   }\n  //   console.log(this);\n  // }\n\n  toString() {\n    var str = \"\";\n    // str += \"length: \" + this.length + \", \";\n    str += \"[ \\n\";\n    for (var i=0; i ;\n  lengthNode: DBWriter;\n  parentNode: DBWriter;\n\n  constructor(lengthNode, parentNode, init) {\n    super(lengthNode, parentNode, init);\n    if (!init) {\n      this.lengthNode.setVal(0);\n      this.parentNode.setVal(EMPTY_NODE_ARRAY);\n    }\n\n    // console.log(this);\n  }\n\n  addNode(initVal) {\n    const childRef = push(this.parentNode.ref, initVal);\n    const childNode = new DBWriter({ ref: childRef, initVal });\n    childNode.attach();\n    this.pushNode(childNode);\n    this.lengthNode.setVal(this.length);\n  }\n\n  remNode() {\n    const node = this.popNode();\n    remove(node.ref);\n    this.lengthNode.setVal(this.length);\n  }\n\n  updateArray(num, newStates) {\n    if (num > this.length) {\n      while (this.length  num) {\n        this.remNode();\n      }\n    }\n  }\n\n  setNode(i, x) {\n    this.nodes[i].setVal(x);\n  }\n\n}\n\n/**\n * Array of two-way DBNodes where both ends are listening for\n * changes AND may write to the DB -- such as the virtual pedals\n * where both AdaCAD and the Pi/PC can add virtual pedals\n */\nexport class DBTwoWayArray extends DBNodeArray {\n  nodes: Array = [];\n  lengthNode: DBTwoWay;\n  parentNode: DBTwoWay;\n\n  /**\n  * holds the Unsubscribe functions that are returned by\n  * DB event functions like onValue(...)\n  */\n  unsubscribers: Array;\n\n  constructor(lengthNode: DBTwoWay, parentNode: DBTwoWay, init?: Array) {\n    super(lengthNode, parentNode, init);\n    this.unsubscribers = [];\n    if (!init) {\n      this.lengthNode.setVal(0);\n      this.parentNode.setVal(EMPTY_NODE_ARRAY);\n    }\n  }\n\n  addNode(initVal: any) {\n    push(this.parentNode.ref, initVal);\n    // const childNode = new DBTwoWay({ ref: childRef, initVal });\n    // childNode.attach();\n    // this.pushNode(childNode);\n    // this.lengthNode.setVal(this.length);\n    // console.log('child key', key);\n  }\n\n  onNodeAdded(key: string) {\n     const childRef = child(this.parentNode.ref, key);\n     const childNode = new DBTwoWay({ ref: childRef, key: key, id: this.length });\n     this.attachChildNode(childNode);\n     this.pushNode(childNode);\n     this.lengthNode.setVal(this.length);\n     this.emit('child-added', childNode);\n  }\n\n  remNode() {\n    const lastNode = this.nodeAt(this.length-1);\n    remove(lastNode.ref);\n    // this.lengthNode.setVal(this.length);\n  }\n\n  onNodeRemoved() {\n    let removed = this.popNode();\n    this.lengthNode.setVal(this.length);\n    return removed;\n  }\n\n  updateArray(num: number, newStates: Array) {\n    if (num > this.length) {\n      while (this.length  num) {\n        this.remNode();\n      }\n    }\n  }\n\n  setNode(i: number, x: any) {\n    this.nodes[i].setVal(x);\n  }\n\n  /**\n  * @method attach\n  */\n  attach() {\n    this.lengthNode.attach();\n    this.lengthNode.on('change', (val) => {\n        this.emit('ready', this.ready);\n    });\n\n    this.parentNode.attach();\n    this.parentNode.once('change', (val) => {\n      this.emit('ready', this.ready);\n    });\n\n    for (var node of this.nodes) {\n      this.attachChildNode(node);\n    }\n\n    this.unsubscribers.push(\n      onChildAdded(this.parentNode.ref, (snapshot) => {\n        // console.log(\"child added\", snapshot);\n        this.onNodeAdded(snapshot.key);\n    }));\n\n    this.unsubscribers.push(\n      onChildChanged(this.parentNode.ref, (snapshot) => {\n        console.log(\"child changed\", snapshot);\n    }));\n\n    this.unsubscribers.push(\n      onChildRemoved(this.parentNode.ref, () => {\n        // console.log(\"child removed\", snapshot);\n        let removed = this.onNodeRemoved();\n        this.emit('child-removed', removed);\n    }));\n  }\n \n  detach() {\n    if (this.active) {\n      while (this.unsubscribers.length > 0) {\n        let unsub = this.unsubscribers.pop();\n        unsub();\n      }\n    }\n  }\n\n  /**\n  * Attaching a child node that was created elsewhere.\n  * Invokes child's `attach()` method and adds event listener\n  * that will emit a `child-change` event.\n  * @param node \n  */\n  attachChildNode(node: DBListener) {\n    node.attach();\n    node.on('change', (val) => {\n      this.emit('child-change', {\n        id: node.id,\n        val: val\n      });\n    });\n  }\n}\n\n/** special types of DBNodes */\n\n/** @class\n * OnlineStatus representing whether or not the\n * \"host\" device is online. The host device is responsible\n * for keeping the node set to \"true\", while any listener\n * devices check occasionally for the host's status by \n * attempting to set the node to \"false\".\n */\nexport class OnlineStatus extends DBListener {\n  _name: string;\n  _ref: DatabaseReference;\n  _val: boolean;\n  _active: boolean;\n\n  constructor(params) {\n    super(params);\n    this.attach();\n    get(query(this.ref))\n      .then((snapshot) => {\n        this.val = snapshot.val();\n      })\n      .catch(result => console.log(result));\n  }\n\n  checkAlive() {\n    set(this.ref, false)\n      .then(() => { this.emit('set', true); })\n      .catch(() => { this.emit('set', false); });\n  }\n}\n\n\n    \n\n\n\n\n\n\n\n\n\n\n                   \n    \n         results matching \"\"\n        \n    \n    \n        No results matching \"\"\n    \n\n"},"classes/DBTwoWayArray.html":{"url":"classes/DBTwoWayArray.html","title":"class - DBTwoWayArray","body":"\n                   \n\n\n\n\n\n\n\n\n\n\n\n\n\n  Classes\n  DBTwoWayArray\n\n\n\n        \n            Info\n        \n        \n            Source\n        \n\n\n\n    \n        \n            File\n        \n        \n            src/app/player/model/dbnodes.ts\n        \n\n\n            \n                Description\n            \n            \n                Array of two-way DBNodes where both ends are listening for\nchanges AND may write to the DB -- such as the virtual pedals\nwhere both AdaCAD and the Pi/PC can add virtual pedals\n\n            \n\n            \n                Extends\n            \n            \n                        DBNodeArray\n            \n\n\n\n            \n    Index\n    \n        \n                \n                    \n                        Properties\n                    \n                \n                \n                    \n                        \n                            \n                                lengthNode\n                            \n                            \n                                nodes\n                            \n                            \n                                parentNode\n                            \n                            \n                                unsubscribers\n                            \n                        \n                    \n                \n\n                \n                    \n                        Methods\n                    \n                \n                \n                    \n                        \n                            \n                                addNode\n                            \n                            \n                                attach\n                            \n                            \n                                attachChildNode\n                            \n                            \n                                detach\n                            \n                            \n                                onNodeAdded\n                            \n                            \n                                onNodeRemoved\n                            \n                            \n                                remNode\n                            \n                            \n                                setNode\n                            \n                            \n                                updateArray\n                            \n                            \n                                nodeAt\n                            \n                            \n                                popNode\n                            \n                            \n                                pushNode\n                            \n                        \n                    \n                \n\n\n\n\n\n        \n    \n\n\n            \n    Constructor\n        \n            \n                \n                    \nconstructor(lengthNode: DBTwoWay, parentNode: DBTwoWay, init?: Array)\n                    \n                \n                        \n                            \n                                Defined in src/app/player/model/dbnodes.ts:518\n                            \n                        \n\n                \n                    \n                            \n                                    Parameters :\n                                    \n                                        \n                                            \n                                                Name\n                                                    Type\n                                                Optional\n                                            \n                                        \n                                        \n                                                \n                                                        lengthNode\n                                                  \n                                                        \n                                                                        DBTwoWay\n                                                        \n                                                  \n                                                    \n                                                            No\n                                                    \n                                                    \n                                                \n                                                \n                                                        parentNode\n                                                  \n                                                        \n                                                                        DBTwoWay\n                                                        \n                                                  \n                                                    \n                                                            No\n                                                    \n                                                    \n                                                \n                                                \n                                                        init\n                                                  \n                                                        \n                                                                        Array\n                                                        \n                                                  \n                                                    \n                                                            Yes\n                                                    \n                                                    \n                                                \n                                        \n                                    \n                            \n                    \n                \n            \n        \n\n\n            \n    \n    \n        Properties\n    \n    \n        \n            \n                \n                    \n                    \n                        lengthNode\n                        \n                    \n                \n            \n                \n                    \n                        Type :         DBTwoWay\n\n                    \n                \n                        \n                            \n                                Inherited from         DBNodeArray\n\n                            \n                        \n                    \n                        \n                                Defined in         DBNodeArray:511\n\n                        \n                    \n\n\n        \n    \n    \n        \n            \n                \n                    \n                    \n                        nodes\n                        \n                    \n                \n            \n                \n                    \n                        Type :         Array\n\n                    \n                \n                \n                    \n                        Default value : []\n                    \n                \n                        \n                            \n                                Inherited from         DBNodeArray\n\n                            \n                        \n                    \n                        \n                                Defined in         DBNodeArray:510\n\n                        \n                    \n\n\n        \n    \n    \n        \n            \n                \n                    \n                    \n                        parentNode\n                        \n                    \n                \n            \n                \n                    \n                        Type :         DBTwoWay\n\n                    \n                \n                        \n                            \n                                Inherited from         DBNodeArray\n\n                            \n                        \n                    \n                        \n                                Defined in         DBNodeArray:512\n\n                        \n                    \n\n\n        \n    \n    \n        \n            \n                \n                    \n                    \n                        unsubscribers\n                        \n                    \n                \n            \n                \n                    \n                        Type :     Array\n\n                    \n                \n                    \n                        \n                                Defined in src/app/player/model/dbnodes.ts:518\n                        \n                    \n\n            \n                \n                    holds the Unsubscribe functions that are returned by\nDB event functions like onValue(...)\n\n                \n            \n\n        \n    \n\n\n            \n    \n    \n        Methods\n    \n    \n        \n            \n                \n                    \n                    \n                        addNode\n                        \n                    \n                \n            \n            \n                \naddNode(initVal: any)\n                \n            \n\n\n            \n                \n                    Defined in src/app/player/model/dbnodes.ts:529\n                \n            \n\n\n            \n                \n\n                    \n                        Parameters :\n                        \n                        \n                            \n                                \n                                    Name\n                                    Type\n                                    Optional\n                                \n                            \n                            \n                                \n                                    initVal\n                                    \n                                                any\n                                    \n\n                                    \n                                        No\n                                    \n\n\n                                \n                            \n                        \n                    \n                    \n                    \n                    \n                        Returns :         void\n\n                    \n                    \n                        \n                    \n                \n            \n        \n    \n    \n        \n            \n                \n                    \n                    \n                        attach\n                        \n                    \n                \n            \n            \n                \nattach()\n                \n            \n\n\n            \n                \n                    Defined in src/app/player/model/dbnodes.ts:578\n                \n            \n\n\n            \n                \n\n                    \n                        Returns :         void\n\n                    \n                \n            \n        \n    \n    \n        \n            \n                \n                    \n                    \n                        attachChildNode\n                        \n                    \n                \n            \n            \n                \nattachChildNode(node: DBListener)\n                \n            \n\n\n            \n                \n                    Defined in src/app/player/model/dbnodes.ts:627\n                \n            \n\n\n            \n                \n                    Attaching a child node that was created elsewhere.\nInvokes child's attach() method and adds event listener\nthat will emit a child-change event.\n\n\n                    \n                        Parameters :\n                        \n                        \n                            \n                                \n                                    Name\n                                    Type\n                                    Optional\n                                \n                            \n                            \n                                \n                                    node\n                                    \n                                                DBListener\n                                    \n\n                                    \n                                        No\n                                    \n\n\n                                \n                            \n                        \n                    \n                    \n                    \n                    \n                        Returns :         void\n\n                    \n                    \n                        \n                    \n                \n            \n        \n    \n    \n        \n            \n                \n                    \n                    \n                        detach\n                        \n                    \n                \n            \n            \n                \ndetach()\n                \n            \n\n\n            \n                \n                    Defined in src/app/player/model/dbnodes.ts:612\n                \n            \n\n\n            \n                \n\n                    \n                        Returns :         void\n\n                    \n                \n            \n        \n    \n    \n        \n            \n                \n                    \n                    \n                        onNodeAdded\n                        \n                    \n                \n            \n            \n                \nonNodeAdded(key: string)\n                \n            \n\n\n            \n                \n                    Defined in src/app/player/model/dbnodes.ts:538\n                \n            \n\n\n            \n                \n\n                    \n                        Parameters :\n                        \n                        \n                            \n                                \n                                    Name\n                                    Type\n                                    Optional\n                                \n                            \n                            \n                                \n                                    key\n                                    \n                                                string\n                                    \n\n                                    \n                                        No\n                                    \n\n\n                                \n                            \n                        \n                    \n                    \n                    \n                    \n                        Returns :         void\n\n                    \n                    \n                        \n                    \n                \n            \n        \n    \n    \n        \n            \n                \n                    \n                    \n                        onNodeRemoved\n                        \n                    \n                \n            \n            \n                \nonNodeRemoved()\n                \n            \n\n\n            \n                \n                    Defined in src/app/player/model/dbnodes.ts:553\n                \n            \n\n\n            \n                \n\n                    \n                        Returns :         any\n\n                    \n                \n            \n        \n    \n    \n        \n            \n                \n                    \n                    \n                        remNode\n                        \n                    \n                \n            \n            \n                \nremNode()\n                \n            \n\n\n            \n                \n                    Defined in src/app/player/model/dbnodes.ts:547\n                \n            \n\n\n            \n                \n\n                    \n                        Returns :         void\n\n                    \n                \n            \n        \n    \n    \n        \n            \n                \n                    \n                    \n                        setNode\n                        \n                    \n                \n            \n            \n                \nsetNode(i: number, x: any)\n                \n            \n\n\n            \n                \n                    Defined in src/app/player/model/dbnodes.ts:571\n                \n            \n\n\n            \n                \n\n                    \n                        Parameters :\n                        \n                        \n                            \n                                \n                                    Name\n                                    Type\n                                    Optional\n                                \n                            \n                            \n                                \n                                    i\n                                    \n                                                number\n                                    \n\n                                    \n                                        No\n                                    \n\n\n                                \n                                \n                                    x\n                                    \n                                                any\n                                    \n\n                                    \n                                        No\n                                    \n\n\n                                \n                            \n                        \n                    \n                    \n                    \n                    \n                        Returns :         void\n\n                    \n                    \n                        \n                    \n                \n            \n        \n    \n    \n        \n            \n                \n                    \n                    \n                        updateArray\n                        \n                    \n                \n            \n            \n                \nupdateArray(num: number, newStates: Array)\n                \n            \n\n\n            \n                \n                    Defined in src/app/player/model/dbnodes.ts:559\n                \n            \n\n\n            \n                \n\n                    \n                        Parameters :\n                        \n                        \n                            \n                                \n                                    Name\n                                    Type\n                                    Optional\n                                \n                            \n                            \n                                \n                                    num\n                                    \n                                                number\n                                    \n\n                                    \n                                        No\n                                    \n\n\n                                \n                                \n                                    newStates\n                                    \n                                            Array\n                                    \n\n                                    \n                                        No\n                                    \n\n\n                                \n                            \n                        \n                    \n                    \n                    \n                    \n                        Returns :         void\n\n                    \n                    \n                        \n                    \n                \n            \n        \n    \n    \n        \n            \n                \n                    \n                    \n                        nodeAt\n                        \n                    \n                \n            \n            \n                \nnodeAt(n)\n                \n            \n\n\n            \n                \n                    Inherited from         DBNodeArray\n\n                \n            \n            \n                \n                        Defined in         DBNodeArray:287\n\n                \n            \n\n\n            \n                \n\n                    \n                        Parameters :\n                        \n                        \n                            \n                                \n                                    Name\n                                    Optional\n                                \n                            \n                            \n                                \n                                    n\n\n                                    \n                                        No\n                                    \n\n\n                                \n                            \n                        \n                    \n                    \n                    \n                    \n                        Returns :         Array\n\n                    \n                    \n                        \n                    \n                \n            \n        \n    \n    \n        \n            \n                \n                    \n                    \n                        popNode\n                        \n                    \n                \n            \n            \n                \npopNode()\n                \n            \n\n\n            \n                \n                    Inherited from         DBNodeArray\n\n                \n            \n            \n                \n                        Defined in         DBNodeArray:298\n\n                \n            \n\n\n            \n                \n\n                    \n                        Returns :         any\n\n                    \n                \n            \n        \n    \n    \n        \n            \n                \n                    \n                    \n                        pushNode\n                        \n                    \n                \n            \n            \n                \npushNode(n)\n                \n            \n\n\n            \n                \n                    Inherited from         DBNodeArray\n\n                \n            \n            \n                \n                        Defined in         DBNodeArray:294\n\n                \n            \n\n\n            \n                \n\n                    \n                        Parameters :\n                        \n                        \n                            \n                                \n                                    Name\n                                    Optional\n                                \n                            \n                            \n                                \n                                    n\n\n                                    \n                                        No\n                                    \n\n\n                                \n                            \n                        \n                    \n                    \n                    \n                    \n                        Returns :         void\n\n                    \n                    \n                        \n                    \n                \n            \n        \n    \n\n\n\n\n\n\n    \n\n\n    \n        import { child, ref, set, get, query, \n  onValue, onChildAdded, onChildChanged, onChildRemoved,\n  push, remove,\n  DatabaseReference, \n} from \"firebase/database\";\nimport { Database } from '@angular/fire/database';\nimport { EventEmitter } from 'events';\n\nexport interface NodeParams {\n  db?: Database,\n  name?: string,\n  root?: string,\n  path?: string,\n  key?: string,\n  initVal?: any,\n  ref?: DatabaseReference,\n  id?: number\n}\n\nexport type NodeValue = string | boolean | number | { [key: string]: any };\n\ninterface NodeMethods {\n  attach(): void,\n  detach(): void,\n}\n\n/**\n * @class DBNode\n * @desc Wrapper for a Firebase database ref and\n * the value stored at that DB node.\n */\nabstract class DBNode extends EventEmitter implements NodeMethods {\n  id: number;\n  key?: string;\n  _name: string;\n  _dbref: DatabaseReference;\n  _val: NodeValue;\n  _active: boolean;\n\n  /**\n   * holds the Unsubscribe functions that are returned by\n   * DB event functions like onValue(...)\n   */\n  unsubscribers: Array;\n\n  /**\n   * \n   * @param {*} params \\{ db: Database, path: string, initVal: any }\n   * @param {*} params \\{ ref: DatabaseReference, key: string, initVal: any }\n   */\n\n  constructor(params: NodeParams) {\n    super();\n    this.active = false;\n    this.unsubscribers = [];\n    if (params.db) {\n      this._name = params.path;\n      this._dbref = ref(params.db, params.root + params.path);\n      this._val = params.initVal;\n      // console.log(this);\n    } else if (params.ref) {\n      this._name = params.key;\n      this._dbref = params.ref;\n    }\n\n    if(params.id > -1) {\n      this.id = params.id;\n    }\n    console.log(this.name);\n  }\n\n  get ref() {\n    return this._dbref;\n  }\n\n  get name() {\n    return this._name;\n  }\n\n  get val() {\n    if (!this.active) {\n      return false;\n    }\n\n    if (typeof(this._val) == 'number' || typeof(this._val == 'boolean')) {\n      return this._val;\n    } \n    \n    if (this._val != undefined) {\n      return Object.keys(this._val);\n    }\n  }\n\n  set val(x) {\n    this._val = x;\n  }\n\n  get active() {\n    return this._active;\n  }\n\n  set active(tf: boolean) {\n    this._active = tf;\n  }\n\n  // methods for a node: \n  // attach() means it is updating with the database and emitting events\n  // detach() means it is not updating, no events\n  abstract attach();\n  abstract detach();\n}\n\ntype Keyed = Node & { key: string };\n\n/**\n * @class DBListener\n * @desc A DBNode that only reads from the database.\n * When `active = true`, will emit events on the value changing.\n */\nexport class DBListener extends DBNode {\n  id: number;\n  key?: string;\n  _name: string;\n  _dbref: DatabaseReference;\n  _val: any;\n  _active: boolean;\n\n  constructor(params: NodeParams) {\n    super(params);\n  }\n\n  attach() {\n    this.active = true;\n    let unsub = onValue(this.ref, (snapshot) => {\n      this.val = snapshot.val();\n      this.emit('change', this.val);\n    });\n    this.unsubscribers.push(unsub);\n  }\n\n  getNow() {\n    get(query(this.ref))\n      .then((snapshot) => {\n        this.val = snapshot.val();\n      })\n      .catch(result => console.log(result));\n  }\n\n  detach() {\n    if (this.active) {\n      while (this.unsubscribers.length > 0) {\n        let unsub = this.unsubscribers.pop();\n        unsub();\n      }\n    }\n    this.active = false;\n  }\n}\n\n/**\n * @class DBWriter\n * @desc A DBNode that only writes to the database. \n * When `active = true`, will pass `val` to the database.\n */\nexport class DBWriter extends DBNode {\n  id: number;\n  key?: string;\n  _name: string;\n  _ref: DatabaseReference;\n  _val: any;\n  _active: boolean;\n\n  constructor(params: NodeParams) {\n    super(params);\n  }\n\n  attach() {\n    this.active = true;\n  }\n\n  setVal(x) {\n    this.val = x;\n    if (this.active) {\n      set(this.ref, this.val);\n    }\n  }\n\n  detach() {\n    this.active = false;\n  }\n}\n\n/** Special DBWriter that expects the node to be cleared by the\n * other end upon receipt\n */\nexport class DBWriteBuffer extends DBWriter {\n  id: number;\n  _name: string;\n  _ref: DatabaseReference;\n  _val: any;\n  _active: boolean;\n\n  constructor(params: NodeParams) {\n    super(params);\n  }\n\n  setVal(x) {\n    get(query(this.ref))\n      .then((snapshot) => {\n        if(!snapshot.val()) {\n          console.log(\"overwriting data in buffer\");\n        }\n        super.setVal(x);\n      })\n      .catch(result => console.log(result));\n  }\n}\n\nexport class DBTwoWay extends DBNode {\n  id: number;\n  key?: string;\n  _name: string;\n  _dbref: DatabaseReference;\n  _val: any;\n  _active: boolean;\n\n  constructor(params: NodeParams) {\n    super(params);\n  }\n  \n  attach() {\n    this.active = true;\n    let unsub = onValue(this.ref, (snapshot) => {\n      this.val = snapshot.val();\n      this.emit('change', this.val);\n    });\n    this.unsubscribers.push(unsub);\n  }\n\n  getNow() {\n    get(query(this.ref))\n      .then((snapshot) => {\n        this.val = snapshot.val();\n      })\n      .catch(result => console.log(result));\n  }\n  \n  detach() {\n    if (this.active) {\n      while (this.unsubscribers.length > 0) {\n        let unsub = this.unsubscribers.pop();\n        unsub();\n      }\n    }\n    this.active = false;\n  }\n  \n  setVal(x) {\n    this.val = x;\n    if (this.active) {\n      set(this.ref, this.val);\n    }\n  }\n}\n\nclass DBNodeArray extends EventEmitter {\n  nodes: Array;\n  lengthNode: DBNode;\n  parentNode: DBNode;\n\n  constructor(lengthNode, parentNode, init: any = {}) {\n    super();\n    this.lengthNode = lengthNode;\n    this.parentNode = parentNode;\n    if (init) {\n    } else {\n      this.nodes = [];\n    }\n  }\n\n  get length() { return this.nodes.length; }\n\n  get active() { return (this.lengthNode.active && this.parentNode.active); }\n\n  get ready() { return (this.lengthNode.val > 0 && this.parentNode.val != false); }\n\n  nodeAt(n) {\n    console.log(this.nodes);\n    console.log(\"node at \", n);\n    console.log(this.nodes[n]);\n    return this.nodes[n];\n  }\n\n  pushNode(n) {\n    this.nodes.push(n);\n  }\n\n  popNode() {\n    return this.nodes.pop();\n  }\n}\n\n/**\n * @class `DBListenerArray`\n * @desc Represents a listener to a list of values in the database \n * (generalizes to `DBNodeArray`). Assumes that the data list is\n * structured such that `lengthNode` is a `DBListener` that stores the \n * length of the list, while `parentNode` is a `DBListener` to the parent\n * node of the list. Each item in the list is a child of `parentNode`,\n * which is then stored as a `DBListener` in the array `nodes`.\n */\nexport class DBListenerArray extends DBNodeArray {\n  lengthNode: DBListener;\n  parentNode: DBListener;\n  nodes: Array;\n\n  /**\n  * holds the Unsubscribe functions that are returned by\n  * DB event functions like onValue(...)\n  */\n  unsubscribers: Array;\n\n  constructor(lengthNode: DBListener, parentNode: DBListener) {\n    super(lengthNode, parentNode);\n    this.lengthNode = lengthNode;\n    this.parentNode = parentNode;\n    this.nodes = [];\n    this.unsubscribers = [];\n  }\n\n  /**\n   * @method attach\n   */\n  attach() {\n    this.lengthNode.attach();\n    this.lengthNode.on('change', (val) => {\n        this.emit('ready', this.ready);\n    });\n\n    this.parentNode.attach();\n    this.parentNode.once('change', (val) => {\n      this.emit('ready', this.ready);\n    });\n\n    for (var node of this.nodes) {\n      this.attachChildNode(node);\n    }\n\n    this.unsubscribers.push(\n      onChildAdded(this.parentNode.ref, (snapshot) => {\n        // console.log(\"child added\", snapshot);\n        this.addNode(snapshot.key);\n    }));\n\n    this.unsubscribers.push(\n      onChildChanged(this.parentNode.ref, (snapshot) => {\n        console.log(\"child changed\", snapshot);\n    }));\n\n    this.unsubscribers.push(\n      onChildRemoved(this.parentNode.ref, () => {\n        // console.log(\"child removed\", snapshot);\n        let removed = this.popNode();\n        this.emit('child-removed', removed);\n    }));\n  }\n\n  detach() {\n    if (this.active) {\n      while (this.unsubscribers.length > 0) {\n        let unsub = this.unsubscribers.pop();\n        unsub();\n      }\n    }\n  }\n\n  nodeAt(n: number) {\n    // console.log(this.nodes);\n    // console.log(\"node at \", n);\n    // console.log(this.nodes[n]);\n    return this.nodes[n];\n  }\n\n  /**\n   * Creating a new child node.\n   * @param key \n   */\n  addNode(key: string) {\n    console.log('child key', key);\n    const childRef = child(this.parentNode.ref, key);\n    const childNode = new DBListener({ ref: childRef, key: key, id: this.length });\n    this.attachChildNode(childNode);\n    this.pushNode(childNode);\n    this.emit('child-added', childNode);\n    // this.lengthNode.setVal(this.length);\n  }\n\n  /**\n   * Attaching a child node that was created elsewhere.\n   * Invokes child's `attach()` method and adds event listener\n   * that will emit a `child-change` event.\n   * @param node \n   */\n  attachChildNode(node: DBListener) {\n    node.attach();\n    node.on('change', (val) => {\n      this.emit('child-change', {\n        id: node.id,\n        val: val\n      });\n    });\n  }\n\n  // remNode() {\n  //   const node = this.popNode();\n  //   // remove(node.ref);\n  //   // this.lengthNode.setVal(this.length);\n  // }\n\n  // updateArray(num: number) {\n  //   // this.parentNode.getNow();\n  //   if (num > this.length) {\n  //     let parentKeys = this.parentNode.val;\n  //     // console.log(this.parentNode);\n  //     console.log(parentKeys);\n  //     let childKeys = Object.keys(parentKeys);\n  //     while (this.length  num) {\n  //       this.popNode();\n  //     }\n  //   }\n  //   console.log(this);\n  // }\n\n  toString() {\n    var str = \"\";\n    // str += \"length: \" + this.length + \", \";\n    str += \"[ \\n\";\n    for (var i=0; i ;\n  lengthNode: DBWriter;\n  parentNode: DBWriter;\n\n  constructor(lengthNode, parentNode, init) {\n    super(lengthNode, parentNode, init);\n    if (!init) {\n      this.lengthNode.setVal(0);\n      this.parentNode.setVal(EMPTY_NODE_ARRAY);\n    }\n\n    // console.log(this);\n  }\n\n  addNode(initVal) {\n    const childRef = push(this.parentNode.ref, initVal);\n    const childNode = new DBWriter({ ref: childRef, initVal });\n    childNode.attach();\n    this.pushNode(childNode);\n    this.lengthNode.setVal(this.length);\n  }\n\n  remNode() {\n    const node = this.popNode();\n    remove(node.ref);\n    this.lengthNode.setVal(this.length);\n  }\n\n  updateArray(num, newStates) {\n    if (num > this.length) {\n      while (this.length  num) {\n        this.remNode();\n      }\n    }\n  }\n\n  setNode(i, x) {\n    this.nodes[i].setVal(x);\n  }\n\n}\n\n/**\n * Array of two-way DBNodes where both ends are listening for\n * changes AND may write to the DB -- such as the virtual pedals\n * where both AdaCAD and the Pi/PC can add virtual pedals\n */\nexport class DBTwoWayArray extends DBNodeArray {\n  nodes: Array = [];\n  lengthNode: DBTwoWay;\n  parentNode: DBTwoWay;\n\n  /**\n  * holds the Unsubscribe functions that are returned by\n  * DB event functions like onValue(...)\n  */\n  unsubscribers: Array;\n\n  constructor(lengthNode: DBTwoWay, parentNode: DBTwoWay, init?: Array) {\n    super(lengthNode, parentNode, init);\n    this.unsubscribers = [];\n    if (!init) {\n      this.lengthNode.setVal(0);\n      this.parentNode.setVal(EMPTY_NODE_ARRAY);\n    }\n  }\n\n  addNode(initVal: any) {\n    push(this.parentNode.ref, initVal);\n    // const childNode = new DBTwoWay({ ref: childRef, initVal });\n    // childNode.attach();\n    // this.pushNode(childNode);\n    // this.lengthNode.setVal(this.length);\n    // console.log('child key', key);\n  }\n\n  onNodeAdded(key: string) {\n     const childRef = child(this.parentNode.ref, key);\n     const childNode = new DBTwoWay({ ref: childRef, key: key, id: this.length });\n     this.attachChildNode(childNode);\n     this.pushNode(childNode);\n     this.lengthNode.setVal(this.length);\n     this.emit('child-added', childNode);\n  }\n\n  remNode() {\n    const lastNode = this.nodeAt(this.length-1);\n    remove(lastNode.ref);\n    // this.lengthNode.setVal(this.length);\n  }\n\n  onNodeRemoved() {\n    let removed = this.popNode();\n    this.lengthNode.setVal(this.length);\n    return removed;\n  }\n\n  updateArray(num: number, newStates: Array) {\n    if (num > this.length) {\n      while (this.length  num) {\n        this.remNode();\n      }\n    }\n  }\n\n  setNode(i: number, x: any) {\n    this.nodes[i].setVal(x);\n  }\n\n  /**\n  * @method attach\n  */\n  attach() {\n    this.lengthNode.attach();\n    this.lengthNode.on('change', (val) => {\n        this.emit('ready', this.ready);\n    });\n\n    this.parentNode.attach();\n    this.parentNode.once('change', (val) => {\n      this.emit('ready', this.ready);\n    });\n\n    for (var node of this.nodes) {\n      this.attachChildNode(node);\n    }\n\n    this.unsubscribers.push(\n      onChildAdded(this.parentNode.ref, (snapshot) => {\n        // console.log(\"child added\", snapshot);\n        this.onNodeAdded(snapshot.key);\n    }));\n\n    this.unsubscribers.push(\n      onChildChanged(this.parentNode.ref, (snapshot) => {\n        console.log(\"child changed\", snapshot);\n    }));\n\n    this.unsubscribers.push(\n      onChildRemoved(this.parentNode.ref, () => {\n        // console.log(\"child removed\", snapshot);\n        let removed = this.onNodeRemoved();\n        this.emit('child-removed', removed);\n    }));\n  }\n \n  detach() {\n    if (this.active) {\n      while (this.unsubscribers.length > 0) {\n        let unsub = this.unsubscribers.pop();\n        unsub();\n      }\n    }\n  }\n\n  /**\n  * Attaching a child node that was created elsewhere.\n  * Invokes child's `attach()` method and adds event listener\n  * that will emit a `child-change` event.\n  * @param node \n  */\n  attachChildNode(node: DBListener) {\n    node.attach();\n    node.on('change', (val) => {\n      this.emit('child-change', {\n        id: node.id,\n        val: val\n      });\n    });\n  }\n}\n\n/** special types of DBNodes */\n\n/** @class\n * OnlineStatus representing whether or not the\n * \"host\" device is online. The host device is responsible\n * for keeping the node set to \"true\", while any listener\n * devices check occasionally for the host's status by \n * attempting to set the node to \"false\".\n */\nexport class OnlineStatus extends DBListener {\n  _name: string;\n  _ref: DatabaseReference;\n  _val: boolean;\n  _active: boolean;\n\n  constructor(params) {\n    super(params);\n    this.attach();\n    get(query(this.ref))\n      .then((snapshot) => {\n        this.val = snapshot.val();\n      })\n      .catch(result => console.log(result));\n  }\n\n  checkAlive() {\n    set(this.ref, false)\n      .then(() => { this.emit('set', true); })\n      .catch(() => { this.emit('set', false); });\n  }\n}\n\n\n    \n\n\n\n\n\n\n\n\n\n\n                   \n    \n         results matching \"\"\n        \n    \n    \n        No results matching \"\"\n    \n\n"},"classes/DBWriteBuffer.html":{"url":"classes/DBWriteBuffer.html","title":"class - DBWriteBuffer","body":"\n                   \n\n\n\n\n\n\n\n\n\n\n\n\n\n  Classes\n  DBWriteBuffer\n\n\n\n        \n            Info\n        \n        \n            Source\n        \n\n\n\n    \n        \n            File\n        \n        \n            src/app/player/model/dbnodes.ts\n        \n\n\n            \n                Description\n            \n            \n                Special DBWriter that expects the node to be cleared by the\nother end upon receipt\n\n            \n\n            \n                Extends\n            \n            \n                        DBWriter\n            \n\n\n\n            \n    Index\n    \n        \n                \n                    \n                        Properties\n                    \n                \n                \n                    \n                        \n                            \n                                _active\n                            \n                            \n                                _name\n                            \n                            \n                                _ref\n                            \n                            \n                                _val\n                            \n                            \n                                id\n                            \n                            \n                                    Optional\n                                key\n                            \n                            \n                                _dbref\n                            \n                            \n                                unsubscribers\n                            \n                        \n                    \n                \n\n                \n                    \n                        Methods\n                    \n                \n                \n                    \n                        \n                            \n                                setVal\n                            \n                            \n                                attach\n                            \n                            \n                                detach\n                            \n                        \n                    \n                \n\n\n\n\n\n        \n    \n\n\n            \n    Constructor\n        \n            \n                \n                    \nconstructor(params: NodeParams)\n                    \n                \n                        \n                            \n                                Defined in src/app/player/model/dbnodes.ts:201\n                            \n                        \n\n                \n                    \n                            \n                                    Parameters :\n                                    \n                                        \n                                            \n                                                Name\n                                                    Type\n                                                Optional\n                                            \n                                        \n                                        \n                                                \n                                                        params\n                                                  \n                                                        \n                                                                        NodeParams\n                                                        \n                                                  \n                                                    \n                                                            No\n                                                    \n                                                    \n                                                \n                                        \n                                    \n                            \n                    \n                \n            \n        \n\n\n            \n    \n    \n        Properties\n    \n    \n        \n            \n                \n                    \n                    \n                        _active\n                        \n                    \n                \n            \n                \n                    \n                        Type :         boolean\n\n                    \n                \n                        \n                            \n                                Inherited from         DBNode\n\n                            \n                        \n                    \n                        \n                                Defined in         DBNode:201\n\n                        \n                    \n\n\n        \n    \n    \n        \n            \n                \n                    \n                    \n                        _name\n                        \n                    \n                \n            \n                \n                    \n                        Type :         string\n\n                    \n                \n                        \n                            \n                                Inherited from         DBNode\n\n                            \n                        \n                    \n                        \n                                Defined in         DBNode:198\n\n                        \n                    \n\n\n        \n    \n    \n        \n            \n                \n                    \n                    \n                        _ref\n                        \n                    \n                \n            \n                \n                    \n                        Type :     DatabaseReference\n\n                    \n                \n                        \n                            \n                                Inherited from         DBWriter\n\n                            \n                        \n                    \n                        \n                                Defined in         DBWriter:199\n\n                        \n                    \n\n\n        \n    \n    \n        \n            \n                \n                    \n                    \n                        _val\n                        \n                    \n                \n            \n                \n                    \n                        Type :         any\n\n                    \n                \n                        \n                            \n                                Inherited from         DBNode\n\n                            \n                        \n                    \n                        \n                                Defined in         DBNode:200\n\n                        \n                    \n\n\n        \n    \n    \n        \n            \n                \n                    \n                    \n                        id\n                        \n                    \n                \n            \n                \n                    \n                        Type :         number\n\n                    \n                \n                        \n                            \n                                Inherited from         DBNode\n\n                            \n                        \n                    \n                        \n                                Defined in         DBNode:197\n\n                        \n                    \n\n\n        \n    \n    \n        \n            \n                \n                    \n                    \n                            Optional\n                        key\n                        \n                    \n                \n            \n                \n                    \n                        Type :         string\n\n                    \n                \n                        \n                            \n                                Inherited from         DBNode\n\n                            \n                        \n                    \n                        \n                                Defined in         DBNode:167\n\n                        \n                    \n\n\n        \n    \n    \n        \n            \n                \n                    \n                    \n                        _dbref\n                        \n                    \n                \n            \n                \n                    \n                        Type :     DatabaseReference\n\n                    \n                \n                        \n                            \n                                Inherited from         DBNode\n\n                            \n                        \n                    \n                        \n                                Defined in         DBNode:36\n\n                        \n                    \n\n\n        \n    \n    \n        \n            \n                \n                    \n                    \n                        unsubscribers\n                        \n                    \n                \n            \n                \n                    \n                        Type :     Array\n\n                    \n                \n                        \n                            \n                                Inherited from         DBNode\n\n                            \n                        \n                    \n                        \n                                Defined in         DBNode:44\n\n                        \n                    \n\n            \n                \n                    holds the Unsubscribe functions that are returned by\nDB event functions like onValue(...)\n\n                \n            \n\n        \n    \n\n\n            \n    \n    \n        Methods\n    \n    \n        \n            \n                \n                    \n                    \n                        setVal\n                        \n                    \n                \n            \n            \n                \nsetVal(x)\n                \n            \n\n\n            \n                \n                    Inherited from         DBWriter\n\n                \n            \n            \n                \n                        Defined in         DBWriter:207\n\n                \n            \n\n\n            \n                \n\n                    \n                        Parameters :\n                        \n                        \n                            \n                                \n                                    Name\n                                    Optional\n                                \n                            \n                            \n                                \n                                    x\n\n                                    \n                                        No\n                                    \n\n\n                                \n                            \n                        \n                    \n                    \n                    \n                    \n                        Returns :         void\n\n                    \n                    \n                        \n                    \n                \n            \n        \n    \n    \n        \n            \n                \n                    \n                    \n                        attach\n                        \n                    \n                \n            \n            \n                \nattach()\n                \n            \n\n\n            \n                \n                    Inherited from         DBNode\n\n                \n            \n            \n                \n                        Defined in         DBNode:177\n\n                \n            \n\n\n            \n                \n\n                    \n                        Returns :         void\n\n                    \n                \n            \n        \n    \n    \n        \n            \n                \n                    \n                    \n                        detach\n                        \n                    \n                \n            \n            \n                \ndetach()\n                \n            \n\n\n            \n                \n                    Inherited from         DBNode\n\n                \n            \n            \n                \n                        Defined in         DBNode:188\n\n                \n            \n\n\n            \n                \n\n                    \n                        Returns :         void\n\n                    \n                \n            \n        \n    \n\n\n\n\n\n\n    \n\n\n    \n        import { child, ref, set, get, query, \n  onValue, onChildAdded, onChildChanged, onChildRemoved,\n  push, remove,\n  DatabaseReference, \n} from \"firebase/database\";\nimport { Database } from '@angular/fire/database';\nimport { EventEmitter } from 'events';\n\nexport interface NodeParams {\n  db?: Database,\n  name?: string,\n  root?: string,\n  path?: string,\n  key?: string,\n  initVal?: any,\n  ref?: DatabaseReference,\n  id?: number\n}\n\nexport type NodeValue = string | boolean | number | { [key: string]: any };\n\ninterface NodeMethods {\n  attach(): void,\n  detach(): void,\n}\n\n/**\n * @class DBNode\n * @desc Wrapper for a Firebase database ref and\n * the value stored at that DB node.\n */\nabstract class DBNode extends EventEmitter implements NodeMethods {\n  id: number;\n  key?: string;\n  _name: string;\n  _dbref: DatabaseReference;\n  _val: NodeValue;\n  _active: boolean;\n\n  /**\n   * holds the Unsubscribe functions that are returned by\n   * DB event functions like onValue(...)\n   */\n  unsubscribers: Array;\n\n  /**\n   * \n   * @param {*} params \\{ db: Database, path: string, initVal: any }\n   * @param {*} params \\{ ref: DatabaseReference, key: string, initVal: any }\n   */\n\n  constructor(params: NodeParams) {\n    super();\n    this.active = false;\n    this.unsubscribers = [];\n    if (params.db) {\n      this._name = params.path;\n      this._dbref = ref(params.db, params.root + params.path);\n      this._val = params.initVal;\n      // console.log(this);\n    } else if (params.ref) {\n      this._name = params.key;\n      this._dbref = params.ref;\n    }\n\n    if(params.id > -1) {\n      this.id = params.id;\n    }\n    console.log(this.name);\n  }\n\n  get ref() {\n    return this._dbref;\n  }\n\n  get name() {\n    return this._name;\n  }\n\n  get val() {\n    if (!this.active) {\n      return false;\n    }\n\n    if (typeof(this._val) == 'number' || typeof(this._val == 'boolean')) {\n      return this._val;\n    } \n    \n    if (this._val != undefined) {\n      return Object.keys(this._val);\n    }\n  }\n\n  set val(x) {\n    this._val = x;\n  }\n\n  get active() {\n    return this._active;\n  }\n\n  set active(tf: boolean) {\n    this._active = tf;\n  }\n\n  // methods for a node: \n  // attach() means it is updating with the database and emitting events\n  // detach() means it is not updating, no events\n  abstract attach();\n  abstract detach();\n}\n\ntype Keyed = Node & { key: string };\n\n/**\n * @class DBListener\n * @desc A DBNode that only reads from the database.\n * When `active = true`, will emit events on the value changing.\n */\nexport class DBListener extends DBNode {\n  id: number;\n  key?: string;\n  _name: string;\n  _dbref: DatabaseReference;\n  _val: any;\n  _active: boolean;\n\n  constructor(params: NodeParams) {\n    super(params);\n  }\n\n  attach() {\n    this.active = true;\n    let unsub = onValue(this.ref, (snapshot) => {\n      this.val = snapshot.val();\n      this.emit('change', this.val);\n    });\n    this.unsubscribers.push(unsub);\n  }\n\n  getNow() {\n    get(query(this.ref))\n      .then((snapshot) => {\n        this.val = snapshot.val();\n      })\n      .catch(result => console.log(result));\n  }\n\n  detach() {\n    if (this.active) {\n      while (this.unsubscribers.length > 0) {\n        let unsub = this.unsubscribers.pop();\n        unsub();\n      }\n    }\n    this.active = false;\n  }\n}\n\n/**\n * @class DBWriter\n * @desc A DBNode that only writes to the database. \n * When `active = true`, will pass `val` to the database.\n */\nexport class DBWriter extends DBNode {\n  id: number;\n  key?: string;\n  _name: string;\n  _ref: DatabaseReference;\n  _val: any;\n  _active: boolean;\n\n  constructor(params: NodeParams) {\n    super(params);\n  }\n\n  attach() {\n    this.active = true;\n  }\n\n  setVal(x) {\n    this.val = x;\n    if (this.active) {\n      set(this.ref, this.val);\n    }\n  }\n\n  detach() {\n    this.active = false;\n  }\n}\n\n/** Special DBWriter that expects the node to be cleared by the\n * other end upon receipt\n */\nexport class DBWriteBuffer extends DBWriter {\n  id: number;\n  _name: string;\n  _ref: DatabaseReference;\n  _val: any;\n  _active: boolean;\n\n  constructor(params: NodeParams) {\n    super(params);\n  }\n\n  setVal(x) {\n    get(query(this.ref))\n      .then((snapshot) => {\n        if(!snapshot.val()) {\n          console.log(\"overwriting data in buffer\");\n        }\n        super.setVal(x);\n      })\n      .catch(result => console.log(result));\n  }\n}\n\nexport class DBTwoWay extends DBNode {\n  id: number;\n  key?: string;\n  _name: string;\n  _dbref: DatabaseReference;\n  _val: any;\n  _active: boolean;\n\n  constructor(params: NodeParams) {\n    super(params);\n  }\n  \n  attach() {\n    this.active = true;\n    let unsub = onValue(this.ref, (snapshot) => {\n      this.val = snapshot.val();\n      this.emit('change', this.val);\n    });\n    this.unsubscribers.push(unsub);\n  }\n\n  getNow() {\n    get(query(this.ref))\n      .then((snapshot) => {\n        this.val = snapshot.val();\n      })\n      .catch(result => console.log(result));\n  }\n  \n  detach() {\n    if (this.active) {\n      while (this.unsubscribers.length > 0) {\n        let unsub = this.unsubscribers.pop();\n        unsub();\n      }\n    }\n    this.active = false;\n  }\n  \n  setVal(x) {\n    this.val = x;\n    if (this.active) {\n      set(this.ref, this.val);\n    }\n  }\n}\n\nclass DBNodeArray extends EventEmitter {\n  nodes: Array;\n  lengthNode: DBNode;\n  parentNode: DBNode;\n\n  constructor(lengthNode, parentNode, init: any = {}) {\n    super();\n    this.lengthNode = lengthNode;\n    this.parentNode = parentNode;\n    if (init) {\n    } else {\n      this.nodes = [];\n    }\n  }\n\n  get length() { return this.nodes.length; }\n\n  get active() { return (this.lengthNode.active && this.parentNode.active); }\n\n  get ready() { return (this.lengthNode.val > 0 && this.parentNode.val != false); }\n\n  nodeAt(n) {\n    console.log(this.nodes);\n    console.log(\"node at \", n);\n    console.log(this.nodes[n]);\n    return this.nodes[n];\n  }\n\n  pushNode(n) {\n    this.nodes.push(n);\n  }\n\n  popNode() {\n    return this.nodes.pop();\n  }\n}\n\n/**\n * @class `DBListenerArray`\n * @desc Represents a listener to a list of values in the database \n * (generalizes to `DBNodeArray`). Assumes that the data list is\n * structured such that `lengthNode` is a `DBListener` that stores the \n * length of the list, while `parentNode` is a `DBListener` to the parent\n * node of the list. Each item in the list is a child of `parentNode`,\n * which is then stored as a `DBListener` in the array `nodes`.\n */\nexport class DBListenerArray extends DBNodeArray {\n  lengthNode: DBListener;\n  parentNode: DBListener;\n  nodes: Array;\n\n  /**\n  * holds the Unsubscribe functions that are returned by\n  * DB event functions like onValue(...)\n  */\n  unsubscribers: Array;\n\n  constructor(lengthNode: DBListener, parentNode: DBListener) {\n    super(lengthNode, parentNode);\n    this.lengthNode = lengthNode;\n    this.parentNode = parentNode;\n    this.nodes = [];\n    this.unsubscribers = [];\n  }\n\n  /**\n   * @method attach\n   */\n  attach() {\n    this.lengthNode.attach();\n    this.lengthNode.on('change', (val) => {\n        this.emit('ready', this.ready);\n    });\n\n    this.parentNode.attach();\n    this.parentNode.once('change', (val) => {\n      this.emit('ready', this.ready);\n    });\n\n    for (var node of this.nodes) {\n      this.attachChildNode(node);\n    }\n\n    this.unsubscribers.push(\n      onChildAdded(this.parentNode.ref, (snapshot) => {\n        // console.log(\"child added\", snapshot);\n        this.addNode(snapshot.key);\n    }));\n\n    this.unsubscribers.push(\n      onChildChanged(this.parentNode.ref, (snapshot) => {\n        console.log(\"child changed\", snapshot);\n    }));\n\n    this.unsubscribers.push(\n      onChildRemoved(this.parentNode.ref, () => {\n        // console.log(\"child removed\", snapshot);\n        let removed = this.popNode();\n        this.emit('child-removed', removed);\n    }));\n  }\n\n  detach() {\n    if (this.active) {\n      while (this.unsubscribers.length > 0) {\n        let unsub = this.unsubscribers.pop();\n        unsub();\n      }\n    }\n  }\n\n  nodeAt(n: number) {\n    // console.log(this.nodes);\n    // console.log(\"node at \", n);\n    // console.log(this.nodes[n]);\n    return this.nodes[n];\n  }\n\n  /**\n   * Creating a new child node.\n   * @param key \n   */\n  addNode(key: string) {\n    console.log('child key', key);\n    const childRef = child(this.parentNode.ref, key);\n    const childNode = new DBListener({ ref: childRef, key: key, id: this.length });\n    this.attachChildNode(childNode);\n    this.pushNode(childNode);\n    this.emit('child-added', childNode);\n    // this.lengthNode.setVal(this.length);\n  }\n\n  /**\n   * Attaching a child node that was created elsewhere.\n   * Invokes child's `attach()` method and adds event listener\n   * that will emit a `child-change` event.\n   * @param node \n   */\n  attachChildNode(node: DBListener) {\n    node.attach();\n    node.on('change', (val) => {\n      this.emit('child-change', {\n        id: node.id,\n        val: val\n      });\n    });\n  }\n\n  // remNode() {\n  //   const node = this.popNode();\n  //   // remove(node.ref);\n  //   // this.lengthNode.setVal(this.length);\n  // }\n\n  // updateArray(num: number) {\n  //   // this.parentNode.getNow();\n  //   if (num > this.length) {\n  //     let parentKeys = this.parentNode.val;\n  //     // console.log(this.parentNode);\n  //     console.log(parentKeys);\n  //     let childKeys = Object.keys(parentKeys);\n  //     while (this.length  num) {\n  //       this.popNode();\n  //     }\n  //   }\n  //   console.log(this);\n  // }\n\n  toString() {\n    var str = \"\";\n    // str += \"length: \" + this.length + \", \";\n    str += \"[ \\n\";\n    for (var i=0; i ;\n  lengthNode: DBWriter;\n  parentNode: DBWriter;\n\n  constructor(lengthNode, parentNode, init) {\n    super(lengthNode, parentNode, init);\n    if (!init) {\n      this.lengthNode.setVal(0);\n      this.parentNode.setVal(EMPTY_NODE_ARRAY);\n    }\n\n    // console.log(this);\n  }\n\n  addNode(initVal) {\n    const childRef = push(this.parentNode.ref, initVal);\n    const childNode = new DBWriter({ ref: childRef, initVal });\n    childNode.attach();\n    this.pushNode(childNode);\n    this.lengthNode.setVal(this.length);\n  }\n\n  remNode() {\n    const node = this.popNode();\n    remove(node.ref);\n    this.lengthNode.setVal(this.length);\n  }\n\n  updateArray(num, newStates) {\n    if (num > this.length) {\n      while (this.length  num) {\n        this.remNode();\n      }\n    }\n  }\n\n  setNode(i, x) {\n    this.nodes[i].setVal(x);\n  }\n\n}\n\n/**\n * Array of two-way DBNodes where both ends are listening for\n * changes AND may write to the DB -- such as the virtual pedals\n * where both AdaCAD and the Pi/PC can add virtual pedals\n */\nexport class DBTwoWayArray extends DBNodeArray {\n  nodes: Array = [];\n  lengthNode: DBTwoWay;\n  parentNode: DBTwoWay;\n\n  /**\n  * holds the Unsubscribe functions that are returned by\n  * DB event functions like onValue(...)\n  */\n  unsubscribers: Array;\n\n  constructor(lengthNode: DBTwoWay, parentNode: DBTwoWay, init?: Array) {\n    super(lengthNode, parentNode, init);\n    this.unsubscribers = [];\n    if (!init) {\n      this.lengthNode.setVal(0);\n      this.parentNode.setVal(EMPTY_NODE_ARRAY);\n    }\n  }\n\n  addNode(initVal: any) {\n    push(this.parentNode.ref, initVal);\n    // const childNode = new DBTwoWay({ ref: childRef, initVal });\n    // childNode.attach();\n    // this.pushNode(childNode);\n    // this.lengthNode.setVal(this.length);\n    // console.log('child key', key);\n  }\n\n  onNodeAdded(key: string) {\n     const childRef = child(this.parentNode.ref, key);\n     const childNode = new DBTwoWay({ ref: childRef, key: key, id: this.length });\n     this.attachChildNode(childNode);\n     this.pushNode(childNode);\n     this.lengthNode.setVal(this.length);\n     this.emit('child-added', childNode);\n  }\n\n  remNode() {\n    const lastNode = this.nodeAt(this.length-1);\n    remove(lastNode.ref);\n    // this.lengthNode.setVal(this.length);\n  }\n\n  onNodeRemoved() {\n    let removed = this.popNode();\n    this.lengthNode.setVal(this.length);\n    return removed;\n  }\n\n  updateArray(num: number, newStates: Array) {\n    if (num > this.length) {\n      while (this.length  num) {\n        this.remNode();\n      }\n    }\n  }\n\n  setNode(i: number, x: any) {\n    this.nodes[i].setVal(x);\n  }\n\n  /**\n  * @method attach\n  */\n  attach() {\n    this.lengthNode.attach();\n    this.lengthNode.on('change', (val) => {\n        this.emit('ready', this.ready);\n    });\n\n    this.parentNode.attach();\n    this.parentNode.once('change', (val) => {\n      this.emit('ready', this.ready);\n    });\n\n    for (var node of this.nodes) {\n      this.attachChildNode(node);\n    }\n\n    this.unsubscribers.push(\n      onChildAdded(this.parentNode.ref, (snapshot) => {\n        // console.log(\"child added\", snapshot);\n        this.onNodeAdded(snapshot.key);\n    }));\n\n    this.unsubscribers.push(\n      onChildChanged(this.parentNode.ref, (snapshot) => {\n        console.log(\"child changed\", snapshot);\n    }));\n\n    this.unsubscribers.push(\n      onChildRemoved(this.parentNode.ref, () => {\n        // console.log(\"child removed\", snapshot);\n        let removed = this.onNodeRemoved();\n        this.emit('child-removed', removed);\n    }));\n  }\n \n  detach() {\n    if (this.active) {\n      while (this.unsubscribers.length > 0) {\n        let unsub = this.unsubscribers.pop();\n        unsub();\n      }\n    }\n  }\n\n  /**\n  * Attaching a child node that was created elsewhere.\n  * Invokes child's `attach()` method and adds event listener\n  * that will emit a `child-change` event.\n  * @param node \n  */\n  attachChildNode(node: DBListener) {\n    node.attach();\n    node.on('change', (val) => {\n      this.emit('child-change', {\n        id: node.id,\n        val: val\n      });\n    });\n  }\n}\n\n/** special types of DBNodes */\n\n/** @class\n * OnlineStatus representing whether or not the\n * \"host\" device is online. The host device is responsible\n * for keeping the node set to \"true\", while any listener\n * devices check occasionally for the host's status by \n * attempting to set the node to \"false\".\n */\nexport class OnlineStatus extends DBListener {\n  _name: string;\n  _ref: DatabaseReference;\n  _val: boolean;\n  _active: boolean;\n\n  constructor(params) {\n    super(params);\n    this.attach();\n    get(query(this.ref))\n      .then((snapshot) => {\n        this.val = snapshot.val();\n      })\n      .catch(result => console.log(result));\n  }\n\n  checkAlive() {\n    set(this.ref, false)\n      .then(() => { this.emit('set', true); })\n      .catch(() => { this.emit('set', false); });\n  }\n}\n\n\n    \n\n\n\n\n\n\n\n\n\n\n                   \n    \n         results matching \"\"\n        \n    \n    \n        No results matching \"\"\n    \n\n"},"classes/DBWriter.html":{"url":"classes/DBWriter.html","title":"class - DBWriter","body":"\n                   \n\n\n\n\n\n\n\n\n\n\n\n\n\n  Classes\n  DBWriter\n\n\n\n        \n            Info\n        \n        \n            Source\n        \n\n\n\n    \n        \n            File\n        \n        \n            src/app/player/model/dbnodes.ts\n        \n\n\n            \n                Description\n            \n            \n                When active = true, will pass val to the database.\n\n            \n\n            \n                Extends\n            \n            \n                        DBNode\n            \n\n\n\n            \n    Index\n    \n        \n                \n                    \n                        Properties\n                    \n                \n                \n                    \n                        \n                            \n                                _active\n                            \n                            \n                                _name\n                            \n                            \n                                _ref\n                            \n                            \n                                _val\n                            \n                            \n                                id\n                            \n                            \n                                    Optional\n                                key\n                            \n                            \n                                _dbref\n                            \n                            \n                                unsubscribers\n                            \n                        \n                    \n                \n\n                \n                    \n                        Methods\n                    \n                \n                \n                    \n                        \n                            \n                                attach\n                            \n                            \n                                detach\n                            \n                            \n                                setVal\n                            \n                        \n                    \n                \n\n\n\n\n\n        \n    \n\n\n            \n    Constructor\n        \n            \n                \n                    \nconstructor(params: NodeParams)\n                    \n                \n                        \n                            \n                                Defined in src/app/player/model/dbnodes.ts:171\n                            \n                        \n\n                \n                    \n                            \n                                    Parameters :\n                                    \n                                        \n                                            \n                                                Name\n                                                    Type\n                                                Optional\n                                            \n                                        \n                                        \n                                                \n                                                        params\n                                                  \n                                                        \n                                                                        NodeParams\n                                                        \n                                                  \n                                                    \n                                                            No\n                                                    \n                                                    \n                                                \n                                        \n                                    \n                            \n                    \n                \n            \n        \n\n\n            \n    \n    \n        Properties\n    \n    \n        \n            \n                \n                    \n                    \n                        _active\n                        \n                    \n                \n            \n                \n                    \n                        Type :         boolean\n\n                    \n                \n                        \n                            \n                                Inherited from         DBNode\n\n                            \n                        \n                    \n                        \n                                Defined in         DBNode:171\n\n                        \n                    \n\n\n        \n    \n    \n        \n            \n                \n                    \n                    \n                        _name\n                        \n                    \n                \n            \n                \n                    \n                        Type :         string\n\n                    \n                \n                        \n                            \n                                Inherited from         DBNode\n\n                            \n                        \n                    \n                        \n                                Defined in         DBNode:168\n\n                        \n                    \n\n\n        \n    \n    \n        \n            \n                \n                    \n                    \n                        _ref\n                        \n                    \n                \n            \n                \n                    \n                        Type :     DatabaseReference\n\n                    \n                \n                    \n                        \n                                Defined in src/app/player/model/dbnodes.ts:169\n                        \n                    \n\n\n        \n    \n    \n        \n            \n                \n                    \n                    \n                        _val\n                        \n                    \n                \n            \n                \n                    \n                        Type :         any\n\n                    \n                \n                        \n                            \n                                Inherited from         DBNode\n\n                            \n                        \n                    \n                        \n                                Defined in         DBNode:170\n\n                        \n                    \n\n\n        \n    \n    \n        \n            \n                \n                    \n                    \n                        id\n                        \n                    \n                \n            \n                \n                    \n                        Type :         number\n\n                    \n                \n                        \n                            \n                                Inherited from         DBNode\n\n                            \n                        \n                    \n                        \n                                Defined in         DBNode:166\n\n                        \n                    \n\n\n        \n    \n    \n        \n            \n                \n                    \n                    \n                            Optional\n                        key\n                        \n                    \n                \n            \n                \n                    \n                        Type :         string\n\n                    \n                \n                        \n                            \n                                Inherited from         DBNode\n\n                            \n                        \n                    \n                        \n                                Defined in         DBNode:167\n\n                        \n                    \n\n\n        \n    \n    \n        \n            \n                \n                    \n                    \n                        _dbref\n                        \n                    \n                \n            \n                \n                    \n                        Type :     DatabaseReference\n\n                    \n                \n                        \n                            \n                                Inherited from         DBNode\n\n                            \n                        \n                    \n                        \n                                Defined in         DBNode:36\n\n                        \n                    \n\n\n        \n    \n    \n        \n            \n                \n                    \n                    \n                        unsubscribers\n                        \n                    \n                \n            \n                \n                    \n                        Type :     Array\n\n                    \n                \n                        \n                            \n                                Inherited from         DBNode\n\n                            \n                        \n                    \n                        \n                                Defined in         DBNode:44\n\n                        \n                    \n\n            \n                \n                    holds the Unsubscribe functions that are returned by\nDB event functions like onValue(...)\n\n                \n            \n\n        \n    \n\n\n            \n    \n    \n        Methods\n    \n    \n        \n            \n                \n                    \n                    \n                        attach\n                        \n                    \n                \n            \n            \n                \nattach()\n                \n            \n\n\n            \n                \n                    Inherited from         DBNode\n\n                \n            \n            \n                \n                        Defined in         DBNode:177\n\n                \n            \n\n\n            \n                \n\n                    \n                        Returns :         void\n\n                    \n                \n            \n        \n    \n    \n        \n            \n                \n                    \n                    \n                        detach\n                        \n                    \n                \n            \n            \n                \ndetach()\n                \n            \n\n\n            \n                \n                    Inherited from         DBNode\n\n                \n            \n            \n                \n                        Defined in         DBNode:188\n\n                \n            \n\n\n            \n                \n\n                    \n                        Returns :         void\n\n                    \n                \n            \n        \n    \n    \n        \n            \n                \n                    \n                    \n                        setVal\n                        \n                    \n                \n            \n            \n                \nsetVal(x)\n                \n            \n\n\n            \n                \n                    Defined in src/app/player/model/dbnodes.ts:181\n                \n            \n\n\n            \n                \n\n                    \n                        Parameters :\n                        \n                        \n                            \n                                \n                                    Name\n                                    Optional\n                                \n                            \n                            \n                                \n                                    x\n\n                                    \n                                        No\n                                    \n\n\n                                \n                            \n                        \n                    \n                    \n                    \n                    \n                        Returns :         void\n\n                    \n                    \n                        \n                    \n                \n            \n        \n    \n\n\n\n\n\n\n    \n\n\n    \n        import { child, ref, set, get, query, \n  onValue, onChildAdded, onChildChanged, onChildRemoved,\n  push, remove,\n  DatabaseReference, \n} from \"firebase/database\";\nimport { Database } from '@angular/fire/database';\nimport { EventEmitter } from 'events';\n\nexport interface NodeParams {\n  db?: Database,\n  name?: string,\n  root?: string,\n  path?: string,\n  key?: string,\n  initVal?: any,\n  ref?: DatabaseReference,\n  id?: number\n}\n\nexport type NodeValue = string | boolean | number | { [key: string]: any };\n\ninterface NodeMethods {\n  attach(): void,\n  detach(): void,\n}\n\n/**\n * @class DBNode\n * @desc Wrapper for a Firebase database ref and\n * the value stored at that DB node.\n */\nabstract class DBNode extends EventEmitter implements NodeMethods {\n  id: number;\n  key?: string;\n  _name: string;\n  _dbref: DatabaseReference;\n  _val: NodeValue;\n  _active: boolean;\n\n  /**\n   * holds the Unsubscribe functions that are returned by\n   * DB event functions like onValue(...)\n   */\n  unsubscribers: Array;\n\n  /**\n   * \n   * @param {*} params \\{ db: Database, path: string, initVal: any }\n   * @param {*} params \\{ ref: DatabaseReference, key: string, initVal: any }\n   */\n\n  constructor(params: NodeParams) {\n    super();\n    this.active = false;\n    this.unsubscribers = [];\n    if (params.db) {\n      this._name = params.path;\n      this._dbref = ref(params.db, params.root + params.path);\n      this._val = params.initVal;\n      // console.log(this);\n    } else if (params.ref) {\n      this._name = params.key;\n      this._dbref = params.ref;\n    }\n\n    if(params.id > -1) {\n      this.id = params.id;\n    }\n    console.log(this.name);\n  }\n\n  get ref() {\n    return this._dbref;\n  }\n\n  get name() {\n    return this._name;\n  }\n\n  get val() {\n    if (!this.active) {\n      return false;\n    }\n\n    if (typeof(this._val) == 'number' || typeof(this._val == 'boolean')) {\n      return this._val;\n    } \n    \n    if (this._val != undefined) {\n      return Object.keys(this._val);\n    }\n  }\n\n  set val(x) {\n    this._val = x;\n  }\n\n  get active() {\n    return this._active;\n  }\n\n  set active(tf: boolean) {\n    this._active = tf;\n  }\n\n  // methods for a node: \n  // attach() means it is updating with the database and emitting events\n  // detach() means it is not updating, no events\n  abstract attach();\n  abstract detach();\n}\n\ntype Keyed = Node & { key: string };\n\n/**\n * @class DBListener\n * @desc A DBNode that only reads from the database.\n * When `active = true`, will emit events on the value changing.\n */\nexport class DBListener extends DBNode {\n  id: number;\n  key?: string;\n  _name: string;\n  _dbref: DatabaseReference;\n  _val: any;\n  _active: boolean;\n\n  constructor(params: NodeParams) {\n    super(params);\n  }\n\n  attach() {\n    this.active = true;\n    let unsub = onValue(this.ref, (snapshot) => {\n      this.val = snapshot.val();\n      this.emit('change', this.val);\n    });\n    this.unsubscribers.push(unsub);\n  }\n\n  getNow() {\n    get(query(this.ref))\n      .then((snapshot) => {\n        this.val = snapshot.val();\n      })\n      .catch(result => console.log(result));\n  }\n\n  detach() {\n    if (this.active) {\n      while (this.unsubscribers.length > 0) {\n        let unsub = this.unsubscribers.pop();\n        unsub();\n      }\n    }\n    this.active = false;\n  }\n}\n\n/**\n * @class DBWriter\n * @desc A DBNode that only writes to the database. \n * When `active = true`, will pass `val` to the database.\n */\nexport class DBWriter extends DBNode {\n  id: number;\n  key?: string;\n  _name: string;\n  _ref: DatabaseReference;\n  _val: any;\n  _active: boolean;\n\n  constructor(params: NodeParams) {\n    super(params);\n  }\n\n  attach() {\n    this.active = true;\n  }\n\n  setVal(x) {\n    this.val = x;\n    if (this.active) {\n      set(this.ref, this.val);\n    }\n  }\n\n  detach() {\n    this.active = false;\n  }\n}\n\n/** Special DBWriter that expects the node to be cleared by the\n * other end upon receipt\n */\nexport class DBWriteBuffer extends DBWriter {\n  id: number;\n  _name: string;\n  _ref: DatabaseReference;\n  _val: any;\n  _active: boolean;\n\n  constructor(params: NodeParams) {\n    super(params);\n  }\n\n  setVal(x) {\n    get(query(this.ref))\n      .then((snapshot) => {\n        if(!snapshot.val()) {\n          console.log(\"overwriting data in buffer\");\n        }\n        super.setVal(x);\n      })\n      .catch(result => console.log(result));\n  }\n}\n\nexport class DBTwoWay extends DBNode {\n  id: number;\n  key?: string;\n  _name: string;\n  _dbref: DatabaseReference;\n  _val: any;\n  _active: boolean;\n\n  constructor(params: NodeParams) {\n    super(params);\n  }\n  \n  attach() {\n    this.active = true;\n    let unsub = onValue(this.ref, (snapshot) => {\n      this.val = snapshot.val();\n      this.emit('change', this.val);\n    });\n    this.unsubscribers.push(unsub);\n  }\n\n  getNow() {\n    get(query(this.ref))\n      .then((snapshot) => {\n        this.val = snapshot.val();\n      })\n      .catch(result => console.log(result));\n  }\n  \n  detach() {\n    if (this.active) {\n      while (this.unsubscribers.length > 0) {\n        let unsub = this.unsubscribers.pop();\n        unsub();\n      }\n    }\n    this.active = false;\n  }\n  \n  setVal(x) {\n    this.val = x;\n    if (this.active) {\n      set(this.ref, this.val);\n    }\n  }\n}\n\nclass DBNodeArray extends EventEmitter {\n  nodes: Array;\n  lengthNode: DBNode;\n  parentNode: DBNode;\n\n  constructor(lengthNode, parentNode, init: any = {}) {\n    super();\n    this.lengthNode = lengthNode;\n    this.parentNode = parentNode;\n    if (init) {\n    } else {\n      this.nodes = [];\n    }\n  }\n\n  get length() { return this.nodes.length; }\n\n  get active() { return (this.lengthNode.active && this.parentNode.active); }\n\n  get ready() { return (this.lengthNode.val > 0 && this.parentNode.val != false); }\n\n  nodeAt(n) {\n    console.log(this.nodes);\n    console.log(\"node at \", n);\n    console.log(this.nodes[n]);\n    return this.nodes[n];\n  }\n\n  pushNode(n) {\n    this.nodes.push(n);\n  }\n\n  popNode() {\n    return this.nodes.pop();\n  }\n}\n\n/**\n * @class `DBListenerArray`\n * @desc Represents a listener to a list of values in the database \n * (generalizes to `DBNodeArray`). Assumes that the data list is\n * structured such that `lengthNode` is a `DBListener` that stores the \n * length of the list, while `parentNode` is a `DBListener` to the parent\n * node of the list. Each item in the list is a child of `parentNode`,\n * which is then stored as a `DBListener` in the array `nodes`.\n */\nexport class DBListenerArray extends DBNodeArray {\n  lengthNode: DBListener;\n  parentNode: DBListener;\n  nodes: Array;\n\n  /**\n  * holds the Unsubscribe functions that are returned by\n  * DB event functions like onValue(...)\n  */\n  unsubscribers: Array;\n\n  constructor(lengthNode: DBListener, parentNode: DBListener) {\n    super(lengthNode, parentNode);\n    this.lengthNode = lengthNode;\n    this.parentNode = parentNode;\n    this.nodes = [];\n    this.unsubscribers = [];\n  }\n\n  /**\n   * @method attach\n   */\n  attach() {\n    this.lengthNode.attach();\n    this.lengthNode.on('change', (val) => {\n        this.emit('ready', this.ready);\n    });\n\n    this.parentNode.attach();\n    this.parentNode.once('change', (val) => {\n      this.emit('ready', this.ready);\n    });\n\n    for (var node of this.nodes) {\n      this.attachChildNode(node);\n    }\n\n    this.unsubscribers.push(\n      onChildAdded(this.parentNode.ref, (snapshot) => {\n        // console.log(\"child added\", snapshot);\n        this.addNode(snapshot.key);\n    }));\n\n    this.unsubscribers.push(\n      onChildChanged(this.parentNode.ref, (snapshot) => {\n        console.log(\"child changed\", snapshot);\n    }));\n\n    this.unsubscribers.push(\n      onChildRemoved(this.parentNode.ref, () => {\n        // console.log(\"child removed\", snapshot);\n        let removed = this.popNode();\n        this.emit('child-removed', removed);\n    }));\n  }\n\n  detach() {\n    if (this.active) {\n      while (this.unsubscribers.length > 0) {\n        let unsub = this.unsubscribers.pop();\n        unsub();\n      }\n    }\n  }\n\n  nodeAt(n: number) {\n    // console.log(this.nodes);\n    // console.log(\"node at \", n);\n    // console.log(this.nodes[n]);\n    return this.nodes[n];\n  }\n\n  /**\n   * Creating a new child node.\n   * @param key \n   */\n  addNode(key: string) {\n    console.log('child key', key);\n    const childRef = child(this.parentNode.ref, key);\n    const childNode = new DBListener({ ref: childRef, key: key, id: this.length });\n    this.attachChildNode(childNode);\n    this.pushNode(childNode);\n    this.emit('child-added', childNode);\n    // this.lengthNode.setVal(this.length);\n  }\n\n  /**\n   * Attaching a child node that was created elsewhere.\n   * Invokes child's `attach()` method and adds event listener\n   * that will emit a `child-change` event.\n   * @param node \n   */\n  attachChildNode(node: DBListener) {\n    node.attach();\n    node.on('change', (val) => {\n      this.emit('child-change', {\n        id: node.id,\n        val: val\n      });\n    });\n  }\n\n  // remNode() {\n  //   const node = this.popNode();\n  //   // remove(node.ref);\n  //   // this.lengthNode.setVal(this.length);\n  // }\n\n  // updateArray(num: number) {\n  //   // this.parentNode.getNow();\n  //   if (num > this.length) {\n  //     let parentKeys = this.parentNode.val;\n  //     // console.log(this.parentNode);\n  //     console.log(parentKeys);\n  //     let childKeys = Object.keys(parentKeys);\n  //     while (this.length  num) {\n  //       this.popNode();\n  //     }\n  //   }\n  //   console.log(this);\n  // }\n\n  toString() {\n    var str = \"\";\n    // str += \"length: \" + this.length + \", \";\n    str += \"[ \\n\";\n    for (var i=0; i ;\n  lengthNode: DBWriter;\n  parentNode: DBWriter;\n\n  constructor(lengthNode, parentNode, init) {\n    super(lengthNode, parentNode, init);\n    if (!init) {\n      this.lengthNode.setVal(0);\n      this.parentNode.setVal(EMPTY_NODE_ARRAY);\n    }\n\n    // console.log(this);\n  }\n\n  addNode(initVal) {\n    const childRef = push(this.parentNode.ref, initVal);\n    const childNode = new DBWriter({ ref: childRef, initVal });\n    childNode.attach();\n    this.pushNode(childNode);\n    this.lengthNode.setVal(this.length);\n  }\n\n  remNode() {\n    const node = this.popNode();\n    remove(node.ref);\n    this.lengthNode.setVal(this.length);\n  }\n\n  updateArray(num, newStates) {\n    if (num > this.length) {\n      while (this.length  num) {\n        this.remNode();\n      }\n    }\n  }\n\n  setNode(i, x) {\n    this.nodes[i].setVal(x);\n  }\n\n}\n\n/**\n * Array of two-way DBNodes where both ends are listening for\n * changes AND may write to the DB -- such as the virtual pedals\n * where both AdaCAD and the Pi/PC can add virtual pedals\n */\nexport class DBTwoWayArray extends DBNodeArray {\n  nodes: Array = [];\n  lengthNode: DBTwoWay;\n  parentNode: DBTwoWay;\n\n  /**\n  * holds the Unsubscribe functions that are returned by\n  * DB event functions like onValue(...)\n  */\n  unsubscribers: Array;\n\n  constructor(lengthNode: DBTwoWay, parentNode: DBTwoWay, init?: Array) {\n    super(lengthNode, parentNode, init);\n    this.unsubscribers = [];\n    if (!init) {\n      this.lengthNode.setVal(0);\n      this.parentNode.setVal(EMPTY_NODE_ARRAY);\n    }\n  }\n\n  addNode(initVal: any) {\n    push(this.parentNode.ref, initVal);\n    // const childNode = new DBTwoWay({ ref: childRef, initVal });\n    // childNode.attach();\n    // this.pushNode(childNode);\n    // this.lengthNode.setVal(this.length);\n    // console.log('child key', key);\n  }\n\n  onNodeAdded(key: string) {\n     const childRef = child(this.parentNode.ref, key);\n     const childNode = new DBTwoWay({ ref: childRef, key: key, id: this.length });\n     this.attachChildNode(childNode);\n     this.pushNode(childNode);\n     this.lengthNode.setVal(this.length);\n     this.emit('child-added', childNode);\n  }\n\n  remNode() {\n    const lastNode = this.nodeAt(this.length-1);\n    remove(lastNode.ref);\n    // this.lengthNode.setVal(this.length);\n  }\n\n  onNodeRemoved() {\n    let removed = this.popNode();\n    this.lengthNode.setVal(this.length);\n    return removed;\n  }\n\n  updateArray(num: number, newStates: Array) {\n    if (num > this.length) {\n      while (this.length  num) {\n        this.remNode();\n      }\n    }\n  }\n\n  setNode(i: number, x: any) {\n    this.nodes[i].setVal(x);\n  }\n\n  /**\n  * @method attach\n  */\n  attach() {\n    this.lengthNode.attach();\n    this.lengthNode.on('change', (val) => {\n        this.emit('ready', this.ready);\n    });\n\n    this.parentNode.attach();\n    this.parentNode.once('change', (val) => {\n      this.emit('ready', this.ready);\n    });\n\n    for (var node of this.nodes) {\n      this.attachChildNode(node);\n    }\n\n    this.unsubscribers.push(\n      onChildAdded(this.parentNode.ref, (snapshot) => {\n        // console.log(\"child added\", snapshot);\n        this.onNodeAdded(snapshot.key);\n    }));\n\n    this.unsubscribers.push(\n      onChildChanged(this.parentNode.ref, (snapshot) => {\n        console.log(\"child changed\", snapshot);\n    }));\n\n    this.unsubscribers.push(\n      onChildRemoved(this.parentNode.ref, () => {\n        // console.log(\"child removed\", snapshot);\n        let removed = this.onNodeRemoved();\n        this.emit('child-removed', removed);\n    }));\n  }\n \n  detach() {\n    if (this.active) {\n      while (this.unsubscribers.length > 0) {\n        let unsub = this.unsubscribers.pop();\n        unsub();\n      }\n    }\n  }\n\n  /**\n  * Attaching a child node that was created elsewhere.\n  * Invokes child's `attach()` method and adds event listener\n  * that will emit a `child-change` event.\n  * @param node \n  */\n  attachChildNode(node: DBListener) {\n    node.attach();\n    node.on('change', (val) => {\n      this.emit('child-change', {\n        id: node.id,\n        val: val\n      });\n    });\n  }\n}\n\n/** special types of DBNodes */\n\n/** @class\n * OnlineStatus representing whether or not the\n * \"host\" device is online. The host device is responsible\n * for keeping the node set to \"true\", while any listener\n * devices check occasionally for the host's status by \n * attempting to set the node to \"false\".\n */\nexport class OnlineStatus extends DBListener {\n  _name: string;\n  _ref: DatabaseReference;\n  _val: boolean;\n  _active: boolean;\n\n  constructor(params) {\n    super(params);\n    this.attach();\n    get(query(this.ref))\n      .then((snapshot) => {\n        this.val = snapshot.val();\n      })\n      .catch(result => console.log(result));\n  }\n\n  checkAlive() {\n    set(this.ref, false)\n      .then(() => { this.emit('set', true); })\n      .catch(() => { this.emit('set', false); });\n  }\n}\n\n\n    \n\n\n\n\n\n\n\n\n\n\n                   \n    \n         results matching \"\"\n        \n    \n    \n        No results matching \"\"\n    \n\n"},"classes/DBWriterArray.html":{"url":"classes/DBWriterArray.html","title":"class - DBWriterArray","body":"\n                   \n\n\n\n\n\n\n\n\n\n\n\n\n\n  Classes\n  DBWriterArray\n\n\n\n        \n            Info\n        \n        \n            Source\n        \n\n\n\n    \n        \n            File\n        \n        \n            src/app/player/model/dbnodes.ts\n        \n\n\n\n            \n                Extends\n            \n            \n                        DBNodeArray\n            \n\n\n\n            \n    Index\n    \n        \n                \n                    \n                        Properties\n                    \n                \n                \n                    \n                        \n                            \n                                lengthNode\n                            \n                            \n                                nodes\n                            \n                            \n                                parentNode\n                            \n                        \n                    \n                \n\n                \n                    \n                        Methods\n                    \n                \n                \n                    \n                        \n                            \n                                addNode\n                            \n                            \n                                remNode\n                            \n                            \n                                setNode\n                            \n                            \n                                updateArray\n                            \n                            \n                                nodeAt\n                            \n                            \n                                popNode\n                            \n                            \n                                pushNode\n                            \n                        \n                    \n                \n\n\n\n\n\n        \n    \n\n\n            \n    Constructor\n        \n            \n                \n                    \nconstructor(lengthNode, parentNode, init)\n                    \n                \n                        \n                            \n                                Defined in src/app/player/model/dbnodes.ts:460\n                            \n                        \n\n                \n                    \n                            \n                                    Parameters :\n                                    \n                                        \n                                            \n                                                Name\n                                                Optional\n                                            \n                                        \n                                        \n                                                \n                                                        lengthNode\n                                                  \n                                                  \n                                                    \n                                                            No\n                                                    \n                                                    \n                                                \n                                                \n                                                        parentNode\n                                                  \n                                                  \n                                                    \n                                                            No\n                                                    \n                                                    \n                                                \n                                                \n                                                        init\n                                                  \n                                                  \n                                                    \n                                                            No\n                                                    \n                                                    \n                                                \n                                        \n                                    \n                            \n                    \n                \n            \n        \n\n\n            \n    \n    \n        Properties\n    \n    \n        \n            \n                \n                    \n                    \n                        lengthNode\n                        \n                    \n                \n            \n                \n                    \n                        Type :         DBWriter\n\n                    \n                \n                        \n                            \n                                Inherited from         DBNodeArray\n\n                            \n                        \n                    \n                        \n                                Defined in         DBNodeArray:459\n\n                        \n                    \n\n\n        \n    \n    \n        \n            \n                \n                    \n                    \n                        nodes\n                        \n                    \n                \n            \n                \n                    \n                        Type :         Array\n\n                    \n                \n                        \n                            \n                                Inherited from         DBNodeArray\n\n                            \n                        \n                    \n                        \n                                Defined in         DBNodeArray:458\n\n                        \n                    \n\n\n        \n    \n    \n        \n            \n                \n                    \n                    \n                        parentNode\n                        \n                    \n                \n            \n                \n                    \n                        Type :         DBWriter\n\n                    \n                \n                        \n                            \n                                Inherited from         DBNodeArray\n\n                            \n                        \n                    \n                        \n                                Defined in         DBNodeArray:460\n\n                        \n                    \n\n\n        \n    \n\n\n            \n    \n    \n        Methods\n    \n    \n        \n            \n                \n                    \n                    \n                        addNode\n                        \n                    \n                \n            \n            \n                \naddNode(initVal)\n                \n            \n\n\n            \n                \n                    Defined in src/app/player/model/dbnodes.ts:472\n                \n            \n\n\n            \n                \n\n                    \n                        Parameters :\n                        \n                        \n                            \n                                \n                                    Name\n                                    Optional\n                                \n                            \n                            \n                                \n                                    initVal\n\n                                    \n                                        No\n                                    \n\n\n                                \n                            \n                        \n                    \n                    \n                    \n                    \n                        Returns :         void\n\n                    \n                    \n                        \n                    \n                \n            \n        \n    \n    \n        \n            \n                \n                    \n                    \n                        remNode\n                        \n                    \n                \n            \n            \n                \nremNode()\n                \n            \n\n\n            \n                \n                    Defined in src/app/player/model/dbnodes.ts:480\n                \n            \n\n\n            \n                \n\n                    \n                        Returns :         void\n\n                    \n                \n            \n        \n    \n    \n        \n            \n                \n                    \n                    \n                        setNode\n                        \n                    \n                \n            \n            \n                \nsetNode(i, x)\n                \n            \n\n\n            \n                \n                    Defined in src/app/player/model/dbnodes.ts:498\n                \n            \n\n\n            \n                \n\n                    \n                        Parameters :\n                        \n                        \n                            \n                                \n                                    Name\n                                    Optional\n                                \n                            \n                            \n                                \n                                    i\n\n                                    \n                                        No\n                                    \n\n\n                                \n                                \n                                    x\n\n                                    \n                                        No\n                                    \n\n\n                                \n                            \n                        \n                    \n                    \n                    \n                    \n                        Returns :         void\n\n                    \n                    \n                        \n                    \n                \n            \n        \n    \n    \n        \n            \n                \n                    \n                    \n                        updateArray\n                        \n                    \n                \n            \n            \n                \nupdateArray(num, newStates)\n                \n            \n\n\n            \n                \n                    Defined in src/app/player/model/dbnodes.ts:486\n                \n            \n\n\n            \n                \n\n                    \n                        Parameters :\n                        \n                        \n                            \n                                \n                                    Name\n                                    Optional\n                                \n                            \n                            \n                                \n                                    num\n\n                                    \n                                        No\n                                    \n\n\n                                \n                                \n                                    newStates\n\n                                    \n                                        No\n                                    \n\n\n                                \n                            \n                        \n                    \n                    \n                    \n                    \n                        Returns :         void\n\n                    \n                    \n                        \n                    \n                \n            \n        \n    \n    \n        \n            \n                \n                    \n                    \n                        nodeAt\n                        \n                    \n                \n            \n            \n                \nnodeAt(n)\n                \n            \n\n\n            \n                \n                    Inherited from         DBNodeArray\n\n                \n            \n            \n                \n                        Defined in         DBNodeArray:287\n\n                \n            \n\n\n            \n                \n\n                    \n                        Parameters :\n                        \n                        \n                            \n                                \n                                    Name\n                                    Optional\n                                \n                            \n                            \n                                \n                                    n\n\n                                    \n                                        No\n                                    \n\n\n                                \n                            \n                        \n                    \n                    \n                    \n                    \n                        Returns :         Array\n\n                    \n                    \n                        \n                    \n                \n            \n        \n    \n    \n        \n            \n                \n                    \n                    \n                        popNode\n                        \n                    \n                \n            \n            \n                \npopNode()\n                \n            \n\n\n            \n                \n                    Inherited from         DBNodeArray\n\n                \n            \n            \n                \n                        Defined in         DBNodeArray:298\n\n                \n            \n\n\n            \n                \n\n                    \n                        Returns :         any\n\n                    \n                \n            \n        \n    \n    \n        \n            \n                \n                    \n                    \n                        pushNode\n                        \n                    \n                \n            \n            \n                \npushNode(n)\n                \n            \n\n\n            \n                \n                    Inherited from         DBNodeArray\n\n                \n            \n            \n                \n                        Defined in         DBNodeArray:294\n\n                \n            \n\n\n            \n                \n\n                    \n                        Parameters :\n                        \n                        \n                            \n                                \n                                    Name\n                                    Optional\n                                \n                            \n                            \n                                \n                                    n\n\n                                    \n                                        No\n                                    \n\n\n                                \n                            \n                        \n                    \n                    \n                    \n                    \n                        Returns :         void\n\n                    \n                    \n                        \n                    \n                \n            \n        \n    \n\n\n\n\n\n\n    \n\n\n    \n        import { child, ref, set, get, query, \n  onValue, onChildAdded, onChildChanged, onChildRemoved,\n  push, remove,\n  DatabaseReference, \n} from \"firebase/database\";\nimport { Database } from '@angular/fire/database';\nimport { EventEmitter } from 'events';\n\nexport interface NodeParams {\n  db?: Database,\n  name?: string,\n  root?: string,\n  path?: string,\n  key?: string,\n  initVal?: any,\n  ref?: DatabaseReference,\n  id?: number\n}\n\nexport type NodeValue = string | boolean | number | { [key: string]: any };\n\ninterface NodeMethods {\n  attach(): void,\n  detach(): void,\n}\n\n/**\n * @class DBNode\n * @desc Wrapper for a Firebase database ref and\n * the value stored at that DB node.\n */\nabstract class DBNode extends EventEmitter implements NodeMethods {\n  id: number;\n  key?: string;\n  _name: string;\n  _dbref: DatabaseReference;\n  _val: NodeValue;\n  _active: boolean;\n\n  /**\n   * holds the Unsubscribe functions that are returned by\n   * DB event functions like onValue(...)\n   */\n  unsubscribers: Array;\n\n  /**\n   * \n   * @param {*} params \\{ db: Database, path: string, initVal: any }\n   * @param {*} params \\{ ref: DatabaseReference, key: string, initVal: any }\n   */\n\n  constructor(params: NodeParams) {\n    super();\n    this.active = false;\n    this.unsubscribers = [];\n    if (params.db) {\n      this._name = params.path;\n      this._dbref = ref(params.db, params.root + params.path);\n      this._val = params.initVal;\n      // console.log(this);\n    } else if (params.ref) {\n      this._name = params.key;\n      this._dbref = params.ref;\n    }\n\n    if(params.id > -1) {\n      this.id = params.id;\n    }\n    console.log(this.name);\n  }\n\n  get ref() {\n    return this._dbref;\n  }\n\n  get name() {\n    return this._name;\n  }\n\n  get val() {\n    if (!this.active) {\n      return false;\n    }\n\n    if (typeof(this._val) == 'number' || typeof(this._val == 'boolean')) {\n      return this._val;\n    } \n    \n    if (this._val != undefined) {\n      return Object.keys(this._val);\n    }\n  }\n\n  set val(x) {\n    this._val = x;\n  }\n\n  get active() {\n    return this._active;\n  }\n\n  set active(tf: boolean) {\n    this._active = tf;\n  }\n\n  // methods for a node: \n  // attach() means it is updating with the database and emitting events\n  // detach() means it is not updating, no events\n  abstract attach();\n  abstract detach();\n}\n\ntype Keyed = Node & { key: string };\n\n/**\n * @class DBListener\n * @desc A DBNode that only reads from the database.\n * When `active = true`, will emit events on the value changing.\n */\nexport class DBListener extends DBNode {\n  id: number;\n  key?: string;\n  _name: string;\n  _dbref: DatabaseReference;\n  _val: any;\n  _active: boolean;\n\n  constructor(params: NodeParams) {\n    super(params);\n  }\n\n  attach() {\n    this.active = true;\n    let unsub = onValue(this.ref, (snapshot) => {\n      this.val = snapshot.val();\n      this.emit('change', this.val);\n    });\n    this.unsubscribers.push(unsub);\n  }\n\n  getNow() {\n    get(query(this.ref))\n      .then((snapshot) => {\n        this.val = snapshot.val();\n      })\n      .catch(result => console.log(result));\n  }\n\n  detach() {\n    if (this.active) {\n      while (this.unsubscribers.length > 0) {\n        let unsub = this.unsubscribers.pop();\n        unsub();\n      }\n    }\n    this.active = false;\n  }\n}\n\n/**\n * @class DBWriter\n * @desc A DBNode that only writes to the database. \n * When `active = true`, will pass `val` to the database.\n */\nexport class DBWriter extends DBNode {\n  id: number;\n  key?: string;\n  _name: string;\n  _ref: DatabaseReference;\n  _val: any;\n  _active: boolean;\n\n  constructor(params: NodeParams) {\n    super(params);\n  }\n\n  attach() {\n    this.active = true;\n  }\n\n  setVal(x) {\n    this.val = x;\n    if (this.active) {\n      set(this.ref, this.val);\n    }\n  }\n\n  detach() {\n    this.active = false;\n  }\n}\n\n/** Special DBWriter that expects the node to be cleared by the\n * other end upon receipt\n */\nexport class DBWriteBuffer extends DBWriter {\n  id: number;\n  _name: string;\n  _ref: DatabaseReference;\n  _val: any;\n  _active: boolean;\n\n  constructor(params: NodeParams) {\n    super(params);\n  }\n\n  setVal(x) {\n    get(query(this.ref))\n      .then((snapshot) => {\n        if(!snapshot.val()) {\n          console.log(\"overwriting data in buffer\");\n        }\n        super.setVal(x);\n      })\n      .catch(result => console.log(result));\n  }\n}\n\nexport class DBTwoWay extends DBNode {\n  id: number;\n  key?: string;\n  _name: string;\n  _dbref: DatabaseReference;\n  _val: any;\n  _active: boolean;\n\n  constructor(params: NodeParams) {\n    super(params);\n  }\n  \n  attach() {\n    this.active = true;\n    let unsub = onValue(this.ref, (snapshot) => {\n      this.val = snapshot.val();\n      this.emit('change', this.val);\n    });\n    this.unsubscribers.push(unsub);\n  }\n\n  getNow() {\n    get(query(this.ref))\n      .then((snapshot) => {\n        this.val = snapshot.val();\n      })\n      .catch(result => console.log(result));\n  }\n  \n  detach() {\n    if (this.active) {\n      while (this.unsubscribers.length > 0) {\n        let unsub = this.unsubscribers.pop();\n        unsub();\n      }\n    }\n    this.active = false;\n  }\n  \n  setVal(x) {\n    this.val = x;\n    if (this.active) {\n      set(this.ref, this.val);\n    }\n  }\n}\n\nclass DBNodeArray extends EventEmitter {\n  nodes: Array;\n  lengthNode: DBNode;\n  parentNode: DBNode;\n\n  constructor(lengthNode, parentNode, init: any = {}) {\n    super();\n    this.lengthNode = lengthNode;\n    this.parentNode = parentNode;\n    if (init) {\n    } else {\n      this.nodes = [];\n    }\n  }\n\n  get length() { return this.nodes.length; }\n\n  get active() { return (this.lengthNode.active && this.parentNode.active); }\n\n  get ready() { return (this.lengthNode.val > 0 && this.parentNode.val != false); }\n\n  nodeAt(n) {\n    console.log(this.nodes);\n    console.log(\"node at \", n);\n    console.log(this.nodes[n]);\n    return this.nodes[n];\n  }\n\n  pushNode(n) {\n    this.nodes.push(n);\n  }\n\n  popNode() {\n    return this.nodes.pop();\n  }\n}\n\n/**\n * @class `DBListenerArray`\n * @desc Represents a listener to a list of values in the database \n * (generalizes to `DBNodeArray`). Assumes that the data list is\n * structured such that `lengthNode` is a `DBListener` that stores the \n * length of the list, while `parentNode` is a `DBListener` to the parent\n * node of the list. Each item in the list is a child of `parentNode`,\n * which is then stored as a `DBListener` in the array `nodes`.\n */\nexport class DBListenerArray extends DBNodeArray {\n  lengthNode: DBListener;\n  parentNode: DBListener;\n  nodes: Array;\n\n  /**\n  * holds the Unsubscribe functions that are returned by\n  * DB event functions like onValue(...)\n  */\n  unsubscribers: Array;\n\n  constructor(lengthNode: DBListener, parentNode: DBListener) {\n    super(lengthNode, parentNode);\n    this.lengthNode = lengthNode;\n    this.parentNode = parentNode;\n    this.nodes = [];\n    this.unsubscribers = [];\n  }\n\n  /**\n   * @method attach\n   */\n  attach() {\n    this.lengthNode.attach();\n    this.lengthNode.on('change', (val) => {\n        this.emit('ready', this.ready);\n    });\n\n    this.parentNode.attach();\n    this.parentNode.once('change', (val) => {\n      this.emit('ready', this.ready);\n    });\n\n    for (var node of this.nodes) {\n      this.attachChildNode(node);\n    }\n\n    this.unsubscribers.push(\n      onChildAdded(this.parentNode.ref, (snapshot) => {\n        // console.log(\"child added\", snapshot);\n        this.addNode(snapshot.key);\n    }));\n\n    this.unsubscribers.push(\n      onChildChanged(this.parentNode.ref, (snapshot) => {\n        console.log(\"child changed\", snapshot);\n    }));\n\n    this.unsubscribers.push(\n      onChildRemoved(this.parentNode.ref, () => {\n        // console.log(\"child removed\", snapshot);\n        let removed = this.popNode();\n        this.emit('child-removed', removed);\n    }));\n  }\n\n  detach() {\n    if (this.active) {\n      while (this.unsubscribers.length > 0) {\n        let unsub = this.unsubscribers.pop();\n        unsub();\n      }\n    }\n  }\n\n  nodeAt(n: number) {\n    // console.log(this.nodes);\n    // console.log(\"node at \", n);\n    // console.log(this.nodes[n]);\n    return this.nodes[n];\n  }\n\n  /**\n   * Creating a new child node.\n   * @param key \n   */\n  addNode(key: string) {\n    console.log('child key', key);\n    const childRef = child(this.parentNode.ref, key);\n    const childNode = new DBListener({ ref: childRef, key: key, id: this.length });\n    this.attachChildNode(childNode);\n    this.pushNode(childNode);\n    this.emit('child-added', childNode);\n    // this.lengthNode.setVal(this.length);\n  }\n\n  /**\n   * Attaching a child node that was created elsewhere.\n   * Invokes child's `attach()` method and adds event listener\n   * that will emit a `child-change` event.\n   * @param node \n   */\n  attachChildNode(node: DBListener) {\n    node.attach();\n    node.on('change', (val) => {\n      this.emit('child-change', {\n        id: node.id,\n        val: val\n      });\n    });\n  }\n\n  // remNode() {\n  //   const node = this.popNode();\n  //   // remove(node.ref);\n  //   // this.lengthNode.setVal(this.length);\n  // }\n\n  // updateArray(num: number) {\n  //   // this.parentNode.getNow();\n  //   if (num > this.length) {\n  //     let parentKeys = this.parentNode.val;\n  //     // console.log(this.parentNode);\n  //     console.log(parentKeys);\n  //     let childKeys = Object.keys(parentKeys);\n  //     while (this.length  num) {\n  //       this.popNode();\n  //     }\n  //   }\n  //   console.log(this);\n  // }\n\n  toString() {\n    var str = \"\";\n    // str += \"length: \" + this.length + \", \";\n    str += \"[ \\n\";\n    for (var i=0; i ;\n  lengthNode: DBWriter;\n  parentNode: DBWriter;\n\n  constructor(lengthNode, parentNode, init) {\n    super(lengthNode, parentNode, init);\n    if (!init) {\n      this.lengthNode.setVal(0);\n      this.parentNode.setVal(EMPTY_NODE_ARRAY);\n    }\n\n    // console.log(this);\n  }\n\n  addNode(initVal) {\n    const childRef = push(this.parentNode.ref, initVal);\n    const childNode = new DBWriter({ ref: childRef, initVal });\n    childNode.attach();\n    this.pushNode(childNode);\n    this.lengthNode.setVal(this.length);\n  }\n\n  remNode() {\n    const node = this.popNode();\n    remove(node.ref);\n    this.lengthNode.setVal(this.length);\n  }\n\n  updateArray(num, newStates) {\n    if (num > this.length) {\n      while (this.length  num) {\n        this.remNode();\n      }\n    }\n  }\n\n  setNode(i, x) {\n    this.nodes[i].setVal(x);\n  }\n\n}\n\n/**\n * Array of two-way DBNodes where both ends are listening for\n * changes AND may write to the DB -- such as the virtual pedals\n * where both AdaCAD and the Pi/PC can add virtual pedals\n */\nexport class DBTwoWayArray extends DBNodeArray {\n  nodes: Array = [];\n  lengthNode: DBTwoWay;\n  parentNode: DBTwoWay;\n\n  /**\n  * holds the Unsubscribe functions that are returned by\n  * DB event functions like onValue(...)\n  */\n  unsubscribers: Array;\n\n  constructor(lengthNode: DBTwoWay, parentNode: DBTwoWay, init?: Array) {\n    super(lengthNode, parentNode, init);\n    this.unsubscribers = [];\n    if (!init) {\n      this.lengthNode.setVal(0);\n      this.parentNode.setVal(EMPTY_NODE_ARRAY);\n    }\n  }\n\n  addNode(initVal: any) {\n    push(this.parentNode.ref, initVal);\n    // const childNode = new DBTwoWay({ ref: childRef, initVal });\n    // childNode.attach();\n    // this.pushNode(childNode);\n    // this.lengthNode.setVal(this.length);\n    // console.log('child key', key);\n  }\n\n  onNodeAdded(key: string) {\n     const childRef = child(this.parentNode.ref, key);\n     const childNode = new DBTwoWay({ ref: childRef, key: key, id: this.length });\n     this.attachChildNode(childNode);\n     this.pushNode(childNode);\n     this.lengthNode.setVal(this.length);\n     this.emit('child-added', childNode);\n  }\n\n  remNode() {\n    const lastNode = this.nodeAt(this.length-1);\n    remove(lastNode.ref);\n    // this.lengthNode.setVal(this.length);\n  }\n\n  onNodeRemoved() {\n    let removed = this.popNode();\n    this.lengthNode.setVal(this.length);\n    return removed;\n  }\n\n  updateArray(num: number, newStates: Array) {\n    if (num > this.length) {\n      while (this.length  num) {\n        this.remNode();\n      }\n    }\n  }\n\n  setNode(i: number, x: any) {\n    this.nodes[i].setVal(x);\n  }\n\n  /**\n  * @method attach\n  */\n  attach() {\n    this.lengthNode.attach();\n    this.lengthNode.on('change', (val) => {\n        this.emit('ready', this.ready);\n    });\n\n    this.parentNode.attach();\n    this.parentNode.once('change', (val) => {\n      this.emit('ready', this.ready);\n    });\n\n    for (var node of this.nodes) {\n      this.attachChildNode(node);\n    }\n\n    this.unsubscribers.push(\n      onChildAdded(this.parentNode.ref, (snapshot) => {\n        // console.log(\"child added\", snapshot);\n        this.onNodeAdded(snapshot.key);\n    }));\n\n    this.unsubscribers.push(\n      onChildChanged(this.parentNode.ref, (snapshot) => {\n        console.log(\"child changed\", snapshot);\n    }));\n\n    this.unsubscribers.push(\n      onChildRemoved(this.parentNode.ref, () => {\n        // console.log(\"child removed\", snapshot);\n        let removed = this.onNodeRemoved();\n        this.emit('child-removed', removed);\n    }));\n  }\n \n  detach() {\n    if (this.active) {\n      while (this.unsubscribers.length > 0) {\n        let unsub = this.unsubscribers.pop();\n        unsub();\n      }\n    }\n  }\n\n  /**\n  * Attaching a child node that was created elsewhere.\n  * Invokes child's `attach()` method and adds event listener\n  * that will emit a `child-change` event.\n  * @param node \n  */\n  attachChildNode(node: DBListener) {\n    node.attach();\n    node.on('change', (val) => {\n      this.emit('child-change', {\n        id: node.id,\n        val: val\n      });\n    });\n  }\n}\n\n/** special types of DBNodes */\n\n/** @class\n * OnlineStatus representing whether or not the\n * \"host\" device is online. The host device is responsible\n * for keeping the node set to \"true\", while any listener\n * devices check occasionally for the host's status by \n * attempting to set the node to \"false\".\n */\nexport class OnlineStatus extends DBListener {\n  _name: string;\n  _ref: DatabaseReference;\n  _val: boolean;\n  _active: boolean;\n\n  constructor(params) {\n    super(params);\n    this.attach();\n    get(query(this.ref))\n      .then((snapshot) => {\n        this.val = snapshot.val();\n      })\n      .catch(result => console.log(result));\n  }\n\n  checkAlive() {\n    set(this.ref, false)\n      .then(() => { this.emit('set', true); })\n      .catch(() => { this.emit('set', false); });\n  }\n}\n\n\n    \n\n\n\n\n\n\n\n\n\n\n                   \n    \n         results matching \"\"\n        \n    \n    \n        No results matching \"\"\n    \n\n"},"interfaces/DensityUnits.html":{"url":"interfaces/DensityUnits.html","title":"interface - DensityUnits","body":"\n                   \n\n\n\n\n\n\n\n\n\n\n\n\n\n\n  Interfaces\n  \n  DensityUnits\n\n\n\n        \n            Info\n        \n        \n            Source\n        \n\n\n\n    \n        \n            File\n        \n        \n            src/app/core/model/datatypes/selectlists.ts\n        \n\n\n\n\n        \n            Index\n            \n                \n                    \n                        \n                            Properties\n                        \n                    \n                    \n                        \n                            \n                                \n                                        \n                                            value\n                                        \n                                \n                                \n                                        \n                                            viewValue\n                                        \n                                \n                            \n                        \n                    \n                \n            \n        \n\n\n\n            \n                Properties\n                    \n                        \n                                \n                                    \n                                        \n                                        value\n                                            \n                                                \n                                            \n                                        \n                                    \n                                \n                                \n                                    \n                                        value:         string\n\n                                    \n                                \n\n\n                                    \n                                        \n                                            Type :         string\n\n                                        \n                                    \n\n\n\n\n\n                        \n                    \n                    \n                        \n                                \n                                    \n                                        \n                                        viewValue\n                                            \n                                                \n                                            \n                                        \n                                    \n                                \n                                \n                                    \n                                        viewValue:         string\n\n                                    \n                                \n\n\n                                    \n                                        \n                                            Type :         string\n\n                                        \n                                    \n\n\n\n\n\n                        \n                    \n            \n    \n\n\n    \n        export interface LoomTypes {\n    value: string;\n    viewValue: string;\n  }\n  \n  export interface MaterialTypes {\n    value: number;\n    viewValue: string;\n  }\n  \n  export interface DensityUnits {\n    value: string;\n    viewValue: string;\n  }\n  \n  export interface ViewModes {\n    value: string;\n    viewValue: string;\n  }\n  \n  \n  /**\n   * Stores the icons and language for determining different \n   * modes within which the mouse points are handled\n   * @param value - reference \n   * @param viewValue - text shown to users\n   * @param icon\n   * @param children, menu to nest within this\n   * @param selected boolean to show if it is selected\n   */\n  export interface DesignMode {\n    value: string;\n    viewValue: string;\n    icon: string;\n    children: Array;\n    selected: boolean;\n  }\n  \n    \n\n\n\n\n\n\n\n\n\n                   \n    \n         results matching \"\"\n        \n    \n    \n        No results matching \"\"\n    \n\n"},"interfaces/DesignActions.html":{"url":"interfaces/DesignActions.html","title":"interface - DesignActions","body":"\n                   \n\n\n\n\n\n\n\n\n\n\n\n\n\n\n  Interfaces\n  \n  DesignActions\n\n\n\n        \n            Info\n        \n        \n            Source\n        \n\n\n\n    \n        \n            File\n        \n        \n            src/app/mixer/palette/subdraft/subdraft.component.ts\n        \n\n\n\n\n        \n            Index\n            \n                \n                    \n                        \n                            Properties\n                        \n                    \n                    \n                        \n                            \n                                \n                                        \n                                            icon\n                                        \n                                \n                                \n                                        \n                                            value\n                                        \n                                \n                                \n                                        \n                                            viewValue\n                                        \n                                \n                            \n                        \n                    \n                \n            \n        \n\n\n\n            \n                Properties\n                    \n                        \n                                \n                                    \n                                        \n                                        icon\n                                            \n                                                \n                                            \n                                        \n                                    \n                                \n                                \n                                    \n                                        icon:         string\n\n                                    \n                                \n\n\n                                    \n                                        \n                                            Type :         string\n\n                                        \n                                    \n\n\n\n\n\n                        \n                    \n                    \n                        \n                                \n                                    \n                                        \n                                        value\n                                            \n                                                \n                                            \n                                        \n                                    \n                                \n                                \n                                    \n                                        value:         string\n\n                                    \n                                \n\n\n                                    \n                                        \n                                            Type :         string\n\n                                        \n                                    \n\n\n\n\n\n                        \n                    \n                    \n                        \n                                \n                                    \n                                        \n                                        viewValue\n                                            \n                                                \n                                            \n                                        \n                                    \n                                \n                                \n                                    \n                                        viewValue:         string\n\n                                    \n                                \n\n\n                                    \n                                        \n                                            Type :         string\n\n                                        \n                                    \n\n\n\n\n\n                        \n                    \n            \n    \n\n\n    \n        import { Component, OnInit, Input, Output, ViewChild, ElementRef, EventEmitter, HostListener, OnChanges, ChangeDetectionStrategy, SimpleChanges} from '@angular/core';\nimport { Point, Interlacement, Bounds, DraftMap, Draft, LoomSettings } from '../../../core/model/datatypes';\nimport { InkService } from '../../provider/ink.service';\nimport { LayersService } from '../../provider/layers.service';\nimport utilInstance from '../../../core/model/util';\nimport { OperationService } from '../../provider/operation.service';\nimport { TreeService } from '../../provider/tree.service';\nimport { FileService } from '../../../core/provider/file.service';\nimport { ViewportService } from '../../provider/viewport.service';\nimport { MatDialog, MatDialogRef } from '@angular/material/dialog';\nimport { DraftdetailComponent } from '../../modal/draftdetail/draftdetail.component';\nimport { Cell } from '../../../core/model/cell';\nimport { OperationComponent } from '../operation/operation.component';\nimport { WorkspaceService } from '../../../core/provider/workspace.service';\nimport { MaterialsService } from '../../../core/provider/materials.service';\nimport { createDraft, getDraftName, initDraftWithParams, isSet, isUp, warps, wefts } from '../../../core/model/drafts';\n\n\n\n\ninterface DesignActions{\n  value: string;\n  viewValue: string;\n  icon: string;\n}\n\n@Component({\n  selector: 'app-subdraft',\n  templateUrl: './subdraft.component.html',\n  styleUrls: ['./subdraft.component.scss']\n})\n\n\n\nexport class SubdraftComponent implements OnInit {\n\n  @Input()  id: number; //generated by the tree service\n  @Input()  default_cell: number;\n\n\n  @Input()\n  get scale(): number { return this._scale; }\n  set scale(value: number) {\n    this._scale = value;\n    this.rescale();\n  }\n  private _scale:number = 5;\n\n  @Input()\n  get draft(): Draft { return this._draft; }\n  set draft(value: Draft) {\n    this._draft = value;\n    this.drawDraft(value);\n  }\n\n  private _draft:Draft = null;\n\n  @Input()\n  get bounds(): Bounds { return this._bounds; }\n  set bounds(value: Bounds) {\n    this.updateViewport(value);\n    this._bounds = value;\n    ;\n  }\n\n  private _bounds:Bounds = {\n    topleft: {x: 0, y: 0},\n    width: 0, \n    height: 0\n  };\n\n  \n\n  @Output() onSubdraftMove = new EventEmitter (); \n  @Output() onSubdraftDrop = new EventEmitter (); \n  @Output() onSubdraftStart = new EventEmitter (); \n  @Output() onDeleteCalled = new EventEmitter (); \n  @Output() onDuplicateCalled = new EventEmitter (); \n  @Output() onConnectionMade = new EventEmitter (); \n  @Output() onConnectionRemoved = new EventEmitter (); \n  @Output() onDesignAction = new  EventEmitter ();\n  @Output() onConnectionStarted:any = new EventEmitter();\n  @Output() onSubdraftViewChange:any = new EventEmitter();\n  @Output() onNameChange:any = new EventEmitter();\n  @Output() onDraftToPlayer = new EventEmitter();\n\n  @ViewChild('bitmapImage') bitmap: any;\n\n\n\n  canvas: HTMLCanvasElement;\n  cx: any;\n\n  parent_id: number = -1;\n\n  /**\n  * flag to tell if this is in a mode where it is looking foor a connectino\n  */\n  selecting_connection: boolean = false;\n\n\n  /**\n   * hold the top left point as an interlacement, independent of scale\n   */\n  interlacement: Interlacement;\n\n  // private _scale: number; \n\n  ink = 'neq'; //can be or, and, neq, not, splice\n\n  counter:number  =  0; // keeps track of how frequently to call the move functions\n \n  counter_limit: number = 50;  //this sets the threshold for move calls, lower number == more calls\n \n  last_ndx:Interlacement = {i: -1, j:-1, si: -1}; //used to check if we should recalculate a move operation\n\n  moving: boolean  = false;\n \n  disable_drag: boolean = false;\n\n  is_preview: boolean = false;\n \n  zndx = 0;\n\n  has_active_connection: boolean = false;\n\n  set_connectable:boolean = false;\n\n  modal: MatDialogRef;\n\n  draft_visible: boolean = true;\n\n  loom_settings: LoomSettings;\n\n  constructor(private inks: InkService, \n    private layer: LayersService, \n    private ms: MaterialsService, \n    public tree: TreeService,\n    private fs: FileService,\n    private viewport: ViewportService,\n    private dialog: MatDialog,\n    private ws: WorkspaceService) { \n\n      this.zndx = layer.createLayer();\n\n  }\n\n  ngOnInit(){\n\n    if(!this.is_preview) this.parent_id = this.tree.getSubdraftParent(this.id);\n    const tl: Point = this.viewport.getTopLeft();\n    const tl_offset = {x: tl.x + 60, y: tl.y};\n\n\n    if(this.bounds.topleft.x === 0 && this.bounds.topleft.y === 0) this.setPosition(tl_offset);\n    this.interlacement = utilInstance.resolvePointToAbsoluteNdx(this.bounds.topleft, this.scale);\n\n    if(!this.is_preview) this.viewport.addObj(this.id, this.interlacement);\n\n    const draft = this.tree.getDraft(this.id);\n    this.loom_settings = this.tree.getLoomSettings(this.id);\n\n    if(draft !== undefined){\n      this.bounds.width = warps(draft.drawdown) * this.scale;\n      this.bounds.height = wefts(draft.drawdown) * this.scale;\n    }else{\n      this.bounds.width = warps(draft.drawdown) * this.scale;\n      this.bounds.height = wefts(draft.drawdown) * this.scale;\n    }\n\n  }\n\n\n  ngAfterViewInit() {\n\n\n    this.canvas =  document.getElementById(this.id.toString());\n    this.cx = this.canvas.getContext(\"2d\");\n    this.drawDraft(this.draft); //force call here because it likely didn't render previously. \n\n    this.rescale();\n    this.updateViewport(this.bounds);\n\n  }\n\n  sendDraftToPlayer() {\n    this.onDraftToPlayer.emit(this._draft);\n  }\n\n  nameFocusOut(){\n    this.onNameChange.emit(this.id);\n  }\n\n\n  /**\n   * Called when main palette is rescaled and triggers call to rescale this element, and update its position \n   * so it remains at the same coords. \n   * @param scale - the zoom scale of the iterface (e.g. the number of pixels to render each cell)\n   */\n  rescale(){\n\n    \n\n    if(this.draft === null){\n      return;\n    } \n\n    const zoom_factor:number = this.scale/this.default_cell;\n\n    //redraw at scale\n    const container: HTMLElement = document.getElementById('scale-'+this.id.toString());\n   \n    if(container === null) return;\n\n\n    container.style.transformOrigin = 'top left';\n    container.style.transform = 'scale(' + zoom_factor + ')';\n\n   \n    this.bounds.topleft = {\n      x: this.interlacement.j * this.scale,\n      y: this.interlacement.i * this.scale\n    };\n\n    this.bounds.width = warps(this.draft.drawdown) * this.scale;\n    this.bounds.height = wefts(this.draft.drawdown) * this.scale;\n\n  }\n\n  /**called when bounds change, updates the global view port */\n  updateViewport(bounds: Bounds){\n    this.interlacement = utilInstance.resolvePointToAbsoluteNdx(bounds.topleft, this.scale);\n    this.viewport.updatePoint(this.id, this.interlacement);\n\n  }\n\n  /**\n   * updates this components position based on the input component's position\n   * */\n  updatePositionFromParent(parent: OperationComponent){\n\n    if(this.parent_id !== parent.id){\n      console.error(\"attempitng to update subdraft position from non-parent operation\", this.parent_id, parent.id);\n      return;\n    }\n\n    const container =  document.getElementById(\"scale-\"+this.parent_id);\n    this.setPosition({x: parent.bounds.topleft.x, y: parent.bounds.topleft.y + (container.offsetHeight * this.scale/this.default_cell) });\n\n\n  }\n\n\n\n  updateSize(parent: OperationComponent){\n\n    const draft = this.tree.getDraft(this.id);\n\n    this.bounds.width = warps(draft.drawdown) * this.scale;\n    this.bounds.height = wefts(draft.drawdown) * this.scale;\n\n    if(this.parent_id !== parent.id){\n      console.error(\"attempitng to update subdraft position from non-parent operation\", this.parent_id, parent.id);\n      console.log(\"attempitng to update subdraft position from non-parent operation\", this.parent_id, parent.id);\n      return;\n    }\n\n    this.bounds.width = Math.max(parent.bounds.width, this.bounds.width);\n    this.bounds.height = Math.max(parent.bounds.height, this.bounds.height);\n\n  }\n  \n\n\n\n  /**\n   * Called when main palette is rescaled and triggers call to rescale this element, and update its position \n   * so it remains at the same coords. \n   * @param scale - the zoom scale of the iterface (e.g. the number of pixels to render each cell)\n   */\n   rescaleForBitmap(){\n\n    \n    if(this.canvas === undefined) return;\n    const draft = this.tree.getDraft(this.id);\n\n\n    this.canvas.width = warps(draft.drawdown) * this.default_cell;\n    this.canvas.height = wefts(draft.drawdown) * this.default_cell;\n\n    for (let i = 0; i  endPosition.x) return false;\n      if(p.y  endPosition.y) return false;\n\n    \n    return true;\n\n  }\n\n\n/**\n * Takes row/column position in this subdraft and translates it to an absolution position  \n * @param ndx the index\n * @returns the absolute position as nxy\n */\n public resolveNdxToPoint(ndx:Interlacement) : Point{\n  \n  let y = this.bounds.topleft.y + ndx.i * this.scale;\n  let x = this.bounds.topleft.x + ndx.j * this.scale;\n  return {x: x, y:y};\n\n}\n\n/**\n * Takes an absolute coordinate and translates it to the row/column position Relative to this subdraft\n * @param p the screen coordinate\n * @returns the row and column within the draft (i = row, j=col), returns -1 if out of bounds\n */\n  public resolvePointToNdx(p:Point) : Interlacement{\n    const draft = this.tree.getDraft(this.id);\n\n    let i = Math.floor((p.y -this.bounds.topleft.y) / this.scale);\n    let j = Math.floor((p.x - this.bounds.topleft.x) / this.scale);\n\n    if(i = wefts(draft.drawdown)) i = -1;\n    if(j = warps(draft.drawdown)) j = -1;\n\n    return {i: i, j:j, si: i};\n\n  }\n\n\n\n/**\n * takes an absolute reference and returns the value at that cell boolean or null if its unset\n * @param p a point of the absolute poistion of coordinate in question\n * @returns true/false/or null representing the eddle value at this point\n */\n  public resolveToValue(p:Point) : boolean{\n\n    const coords = this.resolvePointToNdx(p);\n\n    if(coords.i  {\n\n    draft = this.tree.getDraft(this.id);\n\n    if(this.canvas === undefined) return;\n    this.cx = this.canvas.getContext(\"2d\");\n   \n    if(draft === null){\n      this.canvas.width = 0;\n      this.canvas.height = 0;\n\n    }else{\n      this.canvas.width = warps(draft.drawdown) * this.default_cell;\n      this.canvas.height = wefts(draft.drawdown) * this.default_cell;\n\n      for (let i = 0; i  {\n\n    this.rescaleForBitmap();\n\n    let b = this.bitmap.nativeElement;\n    let context = b.getContext('2d');\n    const draft = this.tree.getDraft(this.id);\n\n    b.width = (warps(draft.drawdown));\n    b.height = (wefts(draft.drawdown));\n    \n    context.fillStyle = \"white\";\n    context.fillRect(0,0,b.width,b.height);\n    context.drawImage(this.canvas, 0, 0);\n\n    const a = document.createElement('a')\n    return this.fs.saver.bmp(b)\n    .then(href => {\n      a.href =  href;\n      a.download = getDraftName(draft) + \"_bitmap.jpg\";\n      a.click();\n      this.drawDraft(draft);\n\n    });\n    \n\n\n      \n  }\n  \n    async saveAsAda() : Promise{\n      const draft = this.tree.getDraft(this.id);\n\n      const a = document.createElement('a');\n      return this.fs.saver.ada('draft', false, this.scale).then(out => {\n        a.href = \"data:application/json;charset=UTF-8,\" + encodeURIComponent(out.json);\n        a.download = getDraftName(draft) + \".ada\";\n        a.click();\n      }); \n    }\n  \n    async saveAsWif() {\n\n      // const draft = this.tree.getDraft(this.id);\n      // const loom = this.tree.getLoom(this.id);\n\n      \n      \n\n      // const a = document.createElement('a');\n      // return this.fs.saver.wif(draft, loom)\n      // .then(href => {\n      //   a.href = href;\n      //   a.download  = getDraftName(draft) +\".wif\";\n      //   a.click();\n      // });\n    \n    }\n  \n    async saveAsPrint() {\n     \n      let dims = this.scale;\n      let b = this.bitmap.nativeElement;\n      let context = b.getContext('2d');\n\n      const draft = this.tree.getDraft(this.id);\n\n\n      b.width = warps(draft.drawdown) * dims;\n      b.height = wefts(draft.drawdown) * dims;\n      \n      context.fillStyle = \"white\";\n      context.fillRect(0,0,b.width,b.height);\n      \n\n      context.drawImage(this.canvas, 0, 0);\n\n      const a = document.createElement('a')\n      return this.fs.saver.jpg(b)\n        .then(href => {\n          a.href =  href;\n          a.download = getDraftName(draft) + \".jpg\";\n          a.click();\n      \n        });\n    }\n\n    warps(){\n      return warps(this.draft.drawdown);\n    }\n\n    wefts(){\n      return wefts(this.draft.drawdown);\n    }\n\n    finetune(){\n\n      //if this is already open, don't reopen it\n      if(this.modal != undefined && this.modal.componentInstance != null) return;\n      const draft = this.tree.getDraft(this.id);\n      const loom = this.tree.getLoom(this.id);\n      const loom_settings = this.tree.getLoomSettings(this.id);\n\n      this.modal = this.dialog.open(DraftdetailComponent,\n        {disableClose: true,\n          hasBackdrop: false,\n          data: {\n            id: this.id,\n            ink: this.inks.getInk(this.ink).viewValue\n          }\n        });\n\n\n\n        this.modal.afterClosed().subscribe(result => {\n          if(result != null){\n            if(this.parent_id == -1){\n\n              console.log(\"RESULT\", result);\n              //create a new draft here and make sure its assigned\n              //this should be happening directly in the tree, and not here\n              // this.draft = initDraftWithParams({\n              //   id: result.id,\n              //   gen_name: result.gen_name,\n              //   ud_name: result.ud_name,\n              //   drawdown: result.drawdown,\n              //   rowShuttleMapping: result.rowShuttleMapping,\n              //   rowSystemMapping: result.rowSystemMapping,\n              //   colSystemMapping: result.colSystemMapping,\n              //   colShuttleMapping: result.colShuttleMapping\n              // });\n\n              \n              // this.tree.setDraft(this.id, this.draft, this.loom_settings);\n              this.draft = this.tree.getDraft(this.id);\n\n              this.onDesignAction.emit({id: this.id});\n            }\n          }\n        })   \n       }\n\n \n\n\n}\n\n    \n\n\n\n\n\n\n\n\n\n                   \n    \n         results matching \"\"\n        \n    \n    \n        No results matching \"\"\n    \n\n"},"interfaces/DesignMode.html":{"url":"interfaces/DesignMode.html","title":"interface - DesignMode","body":"\n                   \n\n\n\n\n\n\n\n\n\n\n\n\n\n\n  Interfaces\n  \n  DesignMode\n\n\n\n        \n            Info\n        \n        \n            Source\n        \n\n\n\n    \n        \n            File\n        \n        \n            src/app/core/model/datatypes/selectlists.ts\n        \n\n\n            \n                Description\n            \n            \n                Stores the icons and language for determining different\nmodes within which the mouse points are handled\n\n            \n\n\n        \n            Index\n            \n                \n                    \n                        \n                            Properties\n                        \n                    \n                    \n                        \n                            \n                                \n                                        \n                                            children\n                                        \n                                \n                                \n                                        \n                                            icon\n                                        \n                                \n                                \n                                        \n                                            selected\n                                        \n                                \n                                \n                                        \n                                            value\n                                        \n                                \n                                \n                                        \n                                            viewValue\n                                        \n                                \n                            \n                        \n                    \n                \n            \n        \n\n\n\n            \n                Properties\n                    \n                        \n                                \n                                    \n                                        \n                                        children\n                                            \n                                                \n                                            \n                                        \n                                    \n                                \n                                \n                                    \n                                        children:         Array\n\n                                    \n                                \n\n\n                                    \n                                        \n                                            Type :         Array\n\n                                        \n                                    \n\n\n\n\n\n                        \n                    \n                    \n                        \n                                \n                                    \n                                        \n                                        icon\n                                            \n                                                \n                                            \n                                        \n                                    \n                                \n                                \n                                    \n                                        icon:         string\n\n                                    \n                                \n\n\n                                    \n                                        \n                                            Type :         string\n\n                                        \n                                    \n\n\n\n\n\n                        \n                    \n                    \n                        \n                                \n                                    \n                                        \n                                        selected\n                                            \n                                                \n                                            \n                                        \n                                    \n                                \n                                \n                                    \n                                        selected:         boolean\n\n                                    \n                                \n\n\n                                    \n                                        \n                                            Type :         boolean\n\n                                        \n                                    \n\n\n\n\n\n                        \n                    \n                    \n                        \n                                \n                                    \n                                        \n                                        value\n                                            \n                                                \n                                            \n                                        \n                                    \n                                \n                                \n                                    \n                                        value:         string\n\n                                    \n                                \n\n\n                                    \n                                        \n                                            Type :         string\n\n                                        \n                                    \n\n\n\n\n\n                        \n                    \n                    \n                        \n                                \n                                    \n                                        \n                                        viewValue\n                                            \n                                                \n                                            \n                                        \n                                    \n                                \n                                \n                                    \n                                        viewValue:         string\n\n                                    \n                                \n\n\n                                    \n                                        \n                                            Type :         string\n\n                                        \n                                    \n\n\n\n\n\n                        \n                    \n            \n    \n\n\n    \n        export interface LoomTypes {\n    value: string;\n    viewValue: string;\n  }\n  \n  export interface MaterialTypes {\n    value: number;\n    viewValue: string;\n  }\n  \n  export interface DensityUnits {\n    value: string;\n    viewValue: string;\n  }\n  \n  export interface ViewModes {\n    value: string;\n    viewValue: string;\n  }\n  \n  \n  /**\n   * Stores the icons and language for determining different \n   * modes within which the mouse points are handled\n   * @param value - reference \n   * @param viewValue - text shown to users\n   * @param icon\n   * @param children, menu to nest within this\n   * @param selected boolean to show if it is selected\n   */\n  export interface DesignMode {\n    value: string;\n    viewValue: string;\n    icon: string;\n    children: Array;\n    selected: boolean;\n  }\n  \n    \n\n\n\n\n\n\n\n\n\n                   \n    \n         results matching \"\"\n        \n    \n    \n        No results matching \"\"\n    \n\n"},"interfaces/DraftMap.html":{"url":"interfaces/DraftMap.html","title":"interface - DraftMap","body":"\n                   \n\n\n\n\n\n\n\n\n\n\n\n\n\n\n  Interfaces\n  \n  DraftMap\n\n\n\n        \n            Info\n        \n        \n            Source\n        \n\n\n\n    \n        \n            File\n        \n        \n            src/app/core/model/datatypes/drafts.ts\n        \n\n\n            \n                Description\n            \n            \n                this stores a list of drafts created with associated component ids for those drafts,\nor -1 if the component for this draft has not been generated yet.\n\n            \n\n\n        \n            Index\n            \n                \n                    \n                        \n                            Properties\n                        \n                    \n                    \n                        \n                            \n                                \n                                        \n                                            component_id\n                                        \n                                \n                                \n                                        \n                                            draft\n                                        \n                                \n                            \n                        \n                    \n                \n            \n        \n\n\n\n            \n                Properties\n                    \n                        \n                                \n                                    \n                                        \n                                        component_id\n                                            \n                                                \n                                            \n                                        \n                                    \n                                \n                                \n                                    \n                                        component_id:         number\n\n                                    \n                                \n\n\n                                    \n                                        \n                                            Type :         number\n\n                                        \n                                    \n\n\n\n\n\n                        \n                    \n                    \n                        \n                                \n                                    \n                                        \n                                        draft\n                                            \n                                                \n                                            \n                                        \n                                    \n                                \n                                \n                                    \n                                        draft:         any\n\n                                    \n                                \n\n\n                                    \n                                        \n                                            Type :         any\n\n                                        \n                                    \n\n\n\n\n\n                        \n                    \n            \n    \n\n\n    \n        import { Cell } from '../cell';\n\n/*****   OBJECTS/TYPES RELATED TO DRAFTS  *******/\n\n/**\n * Drawdown can be used as shorthand for drafts, which are just 2D arrays of Cells\n */\n export type Drawdown = Array>;\n\n\n /**\n  * stores a drawdown along with broader information a draft such\n  * @param id a unique id to refer to this draft, used for linking the draft to screen components\n  * @param gen_name a automatically generated name for this draft (from parent operation)\n  * @param ud_name a user defined name for this draft, which, if it exists, will be used instead of the generated name\n  * @param drawdown the drawdown/interlacement pattern used in this draft\n  * @param rowShuttleMapping the repeating pattern to use to assign draft rows to shuttles (materials)\n  * @param rowSystemMapping the repeating pattern to use to assign draft rows to systems (structual units like layers for instance)\n  * @param colShuttleMapping the repeating pattern to use to assign draft columns to shuttles (materials)\n  * @param colSystemMapping the repeating pattern to use to assign draft columns to systems (structual units like layers for instance)\n  */\n export interface Draft {\n   id: number,\n   gen_name: string,\n   ud_name: string,\n   drawdown: Drawdown,\n   rowShuttleMapping: Array,\n   rowSystemMapping: Array,\n   colShuttleMapping: Array,\n   colSystemMapping: Array,\n }\n \n /**\n  * represents a location within a draft.\n  * @param i is the row/weft number (0 being at the top of the drawdown)\n  * @param j is the column/warp number (0 being at the far left of the drawdown)\n  * @param si is the location of this cell within the current view (where the view may be hiding some rows)\n  *        this value can be de-indexed to absolute position in the rows using draft.visibleRows array\n  * @example const i: number = draft.visibleRows[si];\n  */\n export interface Interlacement {\n   i: number;  \n   j: number;  \n   si: number; \n }\n \n /**\n  * represents a location within a draft as well as the value to be placed at that location\n  * used by Loom to stage updates before settting them\n  * @param i is the row/weft number (0 being at the top of the drawdown)\n  * @param j is the column/warp number (0 being at the far left of the drawdown)\n  * @param val the value to be assigned at the given location\n  */\n \n export interface InterlacementVal {\n   i: number;  \n   j: number \n   val: boolean; \n }\n \n \n /***** OBJECTS/TYPES RELATED TO MIXER COMPONENTS ****/\n \n /**\n  * this stores a list of drafts created with associated component ids for those drafts, \n  * or -1 if the component for this draft has not been generated yet. \n  */\n export interface DraftMap {\n   component_id: number;\n   draft: any;\n }\n    \n\n\n\n\n\n\n\n\n\n                   \n    \n         results matching \"\"\n        \n    \n    \n        No results matching \"\"\n    \n\n"},"interfaces/DraftNodeProxy.html":{"url":"interfaces/DraftNodeProxy.html","title":"interface - DraftNodeProxy","body":"\n                   \n\n\n\n\n\n\n\n\n\n\n\n\n\n\n  Interfaces\n  \n  DraftNodeProxy\n\n\n\n        \n            Info\n        \n        \n            Source\n        \n\n\n\n    \n        \n            File\n        \n        \n            src/app/core/model/datatypes/files.ts\n        \n\n\n            \n                Description\n            \n            \n                holds data about each draft component in a compressed form\n\n            \n\n\n        \n            Index\n            \n                \n                    \n                        \n                            Properties\n                        \n                    \n                    \n                        \n                            \n                                \n                                        \n                                            draft\n                                        \n                                \n                                \n                                        \n                                            draft_id\n                                        \n                                \n                                \n                                        \n                                            draft_name\n                                        \n                                \n                                \n                                        \n                                            draft_visible\n                                        \n                                \n                                \n                                        \n                                            loom\n                                        \n                                \n                                \n                                        \n                                            loom_settings\n                                        \n                                \n                                \n                                        \n                                            node_id\n                                        \n                                \n                            \n                        \n                    \n                \n            \n        \n\n\n\n            \n                Properties\n                    \n                        \n                                \n                                    \n                                        \n                                        draft\n                                            \n                                                \n                                            \n                                        \n                                    \n                                \n                                \n                                    \n                                        draft:         Draft\n\n                                    \n                                \n\n\n                                    \n                                        \n                                            Type :         Draft\n\n                                        \n                                    \n\n\n\n\n\n                        \n                    \n                    \n                        \n                                \n                                    \n                                        \n                                        draft_id\n                                            \n                                                \n                                            \n                                        \n                                    \n                                \n                                \n                                    \n                                        draft_id:         number\n\n                                    \n                                \n\n\n                                    \n                                        \n                                            Type :         number\n\n                                        \n                                    \n\n\n\n\n\n                        \n                    \n                    \n                        \n                                \n                                    \n                                        \n                                        draft_name\n                                            \n                                                \n                                            \n                                        \n                                    \n                                \n                                \n                                    \n                                        draft_name:         string\n\n                                    \n                                \n\n\n                                    \n                                        \n                                            Type :         string\n\n                                        \n                                    \n\n\n\n\n\n                        \n                    \n                    \n                        \n                                \n                                    \n                                        \n                                        draft_visible\n                                            \n                                                \n                                            \n                                        \n                                    \n                                \n                                \n                                    \n                                        draft_visible:         boolean\n\n                                    \n                                \n\n\n                                    \n                                        \n                                            Type :         boolean\n\n                                        \n                                    \n\n\n\n\n\n                        \n                    \n                    \n                        \n                                \n                                    \n                                        \n                                        loom\n                                            \n                                                \n                                            \n                                        \n                                    \n                                \n                                \n                                    \n                                        loom:         Loom\n\n                                    \n                                \n\n\n                                    \n                                        \n                                            Type :         Loom\n\n                                        \n                                    \n\n\n\n\n\n                        \n                    \n                    \n                        \n                                \n                                    \n                                        \n                                        loom_settings\n                                            \n                                                \n                                            \n                                        \n                                    \n                                \n                                \n                                    \n                                        loom_settings:         LoomSettings\n\n                                    \n                                \n\n\n                                    \n                                        \n                                            Type :         LoomSettings\n\n                                        \n                                    \n\n\n\n\n\n                        \n                    \n                    \n                        \n                                \n                                    \n                                        \n                                        node_id\n                                            \n                                                \n                                            \n                                        \n                                    \n                                \n                                \n                                    \n                                        node_id:         number\n\n                                    \n                                \n\n\n                                    \n                                        \n                                            Type :         number\n\n                                        \n                                    \n\n\n\n\n\n                        \n                    \n            \n    \n\n\n    \n        import { Draft } from './drafts';\nimport { Loom, LoomSettings } from './looms';\nimport { Shuttle } from '../shuttle';\nimport { Note } from '../../provider/notes.service';\nimport { Bounds } from './screenlayout';\n\n/****** OBJECTS/TYPES FOR LOADING AND SAVING FILES *****/\n\n/**\n * holds data about each node/component in a form to easily load.\n * @param node_id the id of this node within the tree\n * @param type the type of node\n * @param bounds the screen position and size data for this node\n */\nexport interface NodeComponentProxy {\n    node_id: number,\n    type: string,\n    bounds: Bounds\n  }\n  \n  /**\n   * stores a sparce version of a tree node for easy reloading\n   * @param node the node id this treenode refers too\n   * @param parent the node id of the parent node for this treenode\n   * @param inputs an array of treenode ids for all values coming into this node\n   * @param outputs an array of treenode ids for all downstream functions \n   */\n   export interface TreeNodeProxy {\n    node: number,\n    parent: number; \n    inputs: Array;\n    outputs: Array; \n   }\n  \n    /**\n    * holds data about each draft component in a compressed form \n    * @param draft_id the draft id associated with this node (if available)\n   * @param draft_visible a boolean to state if this node is visible or not. \n   * @param draft_name a string representing a user defined name\n   * @param draft this will only export if the draft is a seed draft\n   * @param loom this will only export if the draft is a seed draft \n   * @param loom_settings the associated loom settings on this node, if present\n    */\n  \n    export interface DraftNodeProxy {\n      node_id: number;\n      draft_id: number;\n      draft_name: string;\n      draft: Draft;\n      draft_visible: boolean;\n      loom: Loom,\n      loom_settings: LoomSettings;\n    }\n  \n  /**\n    * a sparce form of an operaction component to use for saving\n    * @param node_id the node id this object refers too\n    * @param name the name of the operation at this node\n    * @param params the list of input parameters to this operation\n    * @param inlets the let of inlets and associated values \n    */\n  export interface OpComponentProxy {\n    node_id: number,\n    name: string,\n    params: Array, \n    inlets: Array;\n  }\n  \n  \n   /**\n    * describes the data from the workspace that is saved.\n    */\n   export interface SaveObj {\n    version: string,\n    workspace: any,\n    type: string,\n    nodes: Array,\n    tree: Array,\n    draft_nodes: Array,\n    ops: Array,\n    notes: Array,\n    materials: Array,\n    scale: number\n   }\n  \n  export interface FileObj {\n   version: string,\n   workspace: any,\n   filename: string,\n   nodes: Array,\n   treenodes: Array,\n   draft_nodes: Array,\n   ops: Array\n   scale: number\n  }\n  \n  export interface StatusMessage {\n    id: number,\n    message: string,\n    success: boolean\n  }\n  \n  export interface LoadResponse {\n    data: FileObj,\n    status: number;\n  }\n  \n  export interface Fileloader {\n    ada: (filename: string, data: any) => Promise,\n    //wif: (filename: string, data: any) => Promise,\n    //bmp: (filename: string, data: any) => Promise,\n    //jpg: (filename: string, data: any) => Promise,\n    form: (data: any) => Promise}\n  \n  export interface FileSaver {\n    ada: (type: string, for_timeline:boolean, current_scale: number) => Promise,\n    //wif: (draft: Draft, loom: Loom) => Promise,\n    bmp: (canvas: HTMLCanvasElement) => Promise,\n    jpg: (canvas: HTMLCanvasElement) => Promise\n  }\n    \n\n\n\n\n\n\n\n\n\n                   \n    \n         results matching \"\"\n        \n    \n    \n        No results matching \"\"\n    \n\n"},"interfaces/DraftOperationClassification.html":{"url":"interfaces/DraftOperationClassification.html","title":"interface - DraftOperationClassification","body":"\n                   \n\n\n\n\n\n\n\n\n\n\n\n\n\n\n  Interfaces\n  \n  DraftOperationClassification\n\n\n\n        \n            Info\n        \n        \n            Source\n        \n\n\n\n    \n        \n            File\n        \n        \n            src/app/player/player.service.ts\n        \n\n\n\n\n        \n            Index\n            \n                \n                    \n                        \n                            Properties\n                        \n                    \n                    \n                        \n                            \n                                \n                                        \n                                            category\n                                        \n                                \n                                \n                                        \n                                            dx\n                                        \n                                \n                                \n                                        \n                                            ops\n                                        \n                                \n                            \n                        \n                    \n                \n            \n        \n\n\n\n            \n                Properties\n                    \n                        \n                                \n                                    \n                                        \n                                        category\n                                            \n                                                \n                                            \n                                        \n                                    \n                                \n                                \n                                    \n                                        category:         string\n\n                                    \n                                \n\n\n                                    \n                                        \n                                            Type :         string\n\n                                        \n                                    \n\n\n\n\n\n                        \n                    \n                    \n                        \n                                \n                                    \n                                        \n                                        dx\n                                            \n                                                \n                                            \n                                        \n                                    \n                                \n                                \n                                    \n                                        dx:         string\n\n                                    \n                                \n\n\n                                    \n                                        \n                                            Type :         string\n\n                                        \n                                    \n\n\n\n\n\n                        \n                    \n                    \n                        \n                                \n                                    \n                                        \n                                        ops\n                                            \n                                                \n                                            \n                                        \n                                    \n                                \n                                \n                                    \n                                        ops:         Array\n\n                                    \n                                \n\n\n                                    \n                                        \n                                            Type :         Array\n\n                                        \n                                    \n\n\n\n\n\n                        \n                    \n            \n    \n\n\n    \n        import { Injectable} from '@angular/core';\nimport { EventEmitter } from 'events';\nimport { wefts } from '../core/model/drafts';\nimport { Draft } from '../core/model/datatypes';\nimport { BaseOp, BuildableOperation as GenericOp, \n  TreeOperation as TreeOp,\n  Seed, Pipe, DraftsOptional, AllRequired, getDefaultParams,\n  SingleInlet, OpInput\n} from '../mixer/model/operation';\nimport * as defs from '../mixer/model/op_definitions';\nimport { PlayerOp, playerOpFrom, \n  ChainOp, OpSequencer, PairedOp, PedalOpMapping,\n  makePairedOp, makeChainOp, makeOpSequencer,\n  forward, refresh, reverse\n} from './model/op_mappings';\nimport { PlayerState, WeavingPick, copyState, initState } from './model/state';\nimport { MappingsService } from './provider/mappings.service';\nimport { PedalsService, PedalStatus, Pedal } from './provider/pedals.service';\nimport { SequencerService } from './provider/sequencer.service';\n// import { OperationService } from '../mixer/provider/operation.service';\n\nexport interface DraftOperationClassification {\n  category: string,\n  dx: string,\n  ops: Array \n }\n\ninterface LoomConfig {\n  warps: number,\n  draftTiling: boolean\n}\n\n/**\n * @class PedalConfig\n * @desc OLD, UPDATE THIS ---> \n * Represents a set of two-way bindings between a set of Pedals\n * and a set of (Player)Operations. A pedal can only be bound to one\n * Action (a single Op, a chain of Ops, or to control an OpRoulette)\n * @todo The second restriction may change, it might make sense for pedals to\n * get bound to a sequence of operations.\n */\nclass PedalConfig {\n  // numPedals: number;\n  pedals: Array;\n  ops: Array;\n  availPedals: Array;\n  mapping: PedalOpMapping;\n\n  constructor(pedalArray: Array, loadConfig = false) {\n    this.pedals = pedalArray;\n    this.ops = []\n    this.availPedals = pedalArray.map((p) => p.id);\n    this.mapping = [];\n  }\n\n  get numPedals() {\n    return this.pedals.length;\n  }\n\n  get numMappings() {\n    return Object.entries(this.mapping).length;\n  }\n\n  addPedal(p: Pedal) {\n    // this.pedals.push(p);\n    this.availPedals.push(p.id);\n  }\n\n  remPedal() {\n    // this.pedals.pop();\n    this.availPedals.filter((id) => id != this.pedals.length);\n  }\n\n  addOperation(o: PlayerOp, chain?: boolean) {\n    o.id = this.ops.length;\n    this.ops.push(o);\n    if (chain) {\n      o.chain = chain;\n    }\n    // this.unpairedOps.push(o);\n    // console.log(this.ops);\n  }\n\n  pair(pedalId: number, opName: string) {\n    let o = this.ops.findIndex((op) => op.name == opName);\n    // let thisOp = this.unpairedOps.splice(o, 1);\n    let thisOp = this.ops;\n    this.mapping[pedalId] = makePairedOp(pedalId, thisOp[o]); \n  }\n\n  chain(pedalId: number, opName: string) {\n    let o = this.ops[this.ops.findIndex((op) => op.name == opName)];\n    if (this.pedalIsChained(pedalId)) {\n      let curr_ops = ( this.mapping[pedalId]).ops;\n      this.mapping[pedalId] = makeChainOp(curr_ops.concat([o]), pedalId);\n    } else if (this.pedalIsPaired(pedalId)) {\n      let first_op = ( this.mapping[pedalId]).op;\n      this.mapping[pedalId] = makeChainOp([first_op].concat([o]), pedalId);\n    } else {\n      this.mapping[pedalId] = makeChainOp([o], pedalId);\n    }\n  }\n\n  chainToPedal(pedalId: number, ops: Array) {\n    let op_array = ops.map((name) => this.ops[this.ops.findIndex((op) => op.name == name)]);\n    if (this.pedalIsChained(pedalId)) { \n      // if pedal already has a chain, add ops to the chain\n      let curr_ops = ( this.mapping[pedalId]).ops;\n      this.mapping[pedalId] = makeChainOp(curr_ops.concat(op_array), pedalId);\n    } else if (this.pedalIsPaired(pedalId)) {\n      // if pedal is paired, you can turn it into a chain\n      let first_op = ( this.mapping[pedalId]).op;\n      this.mapping[pedalId] = makeChainOp([first_op].concat(op_array), pedalId);\n    } else {\n      // pedal doesn't have anything mapped, just add a new chain\n      this.mapping[pedalId] = makeChainOp(op_array, pedalId);\n    }\n  }\n\n  // will return true if an op is mapped to a pedal in any way\n  opIsMapped(opName: string): boolean {\n    if (this.mapping.filter((m) => m.name.includes(opName)).length > 0) {\n      return true;\n    } else return false;\n  }\n\n  pedalIsMapped(id: number) {\n    return (this.mapping[id]);\n  }\n\n  pedalIsChained(id: number) {\n    if (this.pedalIsMapped(id) && this.mapping[id].name.startsWith('ch')) { return true; }\n    else {return false; }\n  }\n\n  pedalIsPaired(id: number) {\n    return (this.pedalIsMapped(id) && !this.pedalIsChained(id));\n  }\n\n  unpairPedal(id: number) {\n    console.log(`unpairing pedal ${id}`);\n    // let op = this.pairs[id];\n    // this.unpairedOps.splice(op.id, 0, op);\n    delete this.mapping[id];\n  }\n\n  // unpairOp(name: string) {\n  //   let pid = this.opIsPaired(name);\n  //   this.unpairPedal(pid);\n  // }\n}\n\n/**\n * The Draft Player Service is in charge of updating the the global PlayerState and tracking where the weaver is in the draft.\n */\n@Injectable({\n  providedIn: 'root'\n})\nexport class PlayerService {\n  state: PlayerState;\n  loom: LoomConfig;\n  redraw = new EventEmitter();\n  draftClassification: Array = [];\n\n  constructor(\n    public pedals: PedalsService,\n    public mappings: MappingsService,\n    public seq: SequencerService,\n    // private oss: OperationService\n  ) {\n    // this.draft = null; \n    console.log(\"draft player constructor\");\n    // const startPattern = playerOpFrom(defs.tabby);\n    // console.log(startPattern);\n    // startPattern.perform(nullOpInput).then((result) => {\n    //   console.log(result);\n    //   this.setDraft(result[0]);\n    // });\n\n    this.state = initState();\n    this.state.draft = defs.tabby.perform([1]);\n\n    this.loom = { warps: 2640, draftTiling: true };\n\n    // load the draft progress ops\n    mappings.addOperation(forward);\n    mappings.addOperation(refresh);\n    mappings.addOperation(reverse);\n\n    function addOp(op: GenericOp, params?: Array) {\n      let p_op = params ? playerOpFrom(op, params) : playerOpFrom(op);\n      mappings.addOperation(p_op);\n      return p_op;\n    }\n\n    // load ops from the main mixer\n    const tabby = addOp(defs.tabby);\n    const twill = addOp(defs.twill);\n    const satin = addOp(defs.satin);\n    const waffle = addOp(defs.waffle);\n    const basket = addOp(defs.basket);\n    const rib = addOp(defs.rib);\n    const random = addOp(defs.random);\n    const rotate = addOp(defs.rotate);\n    const invert = addOp(defs.invert);\n    const shiftx = addOp(defs.shiftx);\n    const shifty = addOp(defs.shifty);\n    const slope = addOp(defs.slope);\n    const flipx = addOp(defs.flipx);\n    const flipy = addOp(defs.flipy);\n    const symm = addOp(defs.makesymmetric);\n    const stretch = addOp(defs.stretch);\n    const bindweft = addOp(defs.bindweftfloats);\n    const bindwarp = addOp(defs.bindwarpfloats);\n\n    const tile: PlayerOp = {\n      name: defs.tile.name,\n      perform: (init: PlayerState) => {\n        let res = copyState(init);\n        res.draft = defs.tile.perform([init.draft], [2, 2]);\n        res.row = init.row % wefts(res.draft.drawdown);\n        res.pedal = defs.tile.name;\n        return Promise.resolve(res);\n      }\n    }\n    mappings.addOperation(tile);\n\n    this.draftClassification.push(\n      {category: 'structure',\n      dx: \"0-1 input, 1 output, algorithmically generates weave structures based on parameters\",\n      ops: [tabby, twill, satin, waffle, random]}\n    );\n\n    this.draftClassification.push(\n      { category: 'custom structure',\n        dx: \"custom structures loaded from the Mixer\",\n        ops: []\n      }\n    );\n\n    this.draftClassification.push(\n      {category: 'transformation',\n      dx: \"1 input, 1 output, applies an operation to the input that transforms it in some way\",\n      ops: [invert, flipx, flipy, shiftx, shifty, rotate, slope, stretch, symm, tile]}\n    );\n\n    // //test this\n    // console.log(this.oss.getOp('germanify'));\n    // const germanify = this.pedalOps.addOperation(playerOpFromTree( this.oss.getOp('germanify')));\n    \n    console.log('pedal ops added');\n\n    pedals.on('pedal-step', (id) => this.onPedal(id));\n\n    pedals.on('pedal-added', (n) => {\n      if (n == 1) {\n        mappings.pair(0, 'forward');\n        console.log(\"pedals mapping\", mappings);\n      } else if (n == 2) {\n      //   if (mappings.pedalIsMapped(0)) mappings.unmap(0);\n      //   mappings[0] = this.seq;\n      //   mappings[1] = this.seq;\n      //   this.seq.addPedals(0, 1);\n      //   console.log(\"pedals mapping\", mappings);\n      }\n    })\n  }\n\n  get readyToWeave() {  // need either one pedal forward or one pedal reverse, in order to progress through draft\n    return (this.pedals.readyToWeave && \n      (this.mappings.opIsMapped('forward') || this.mappings.opIsMapped('reverse') || this.seq.readyToWeave)\n    );\n  }\n\n  get weaving() {\n    return this.pedals.active_draft.val;\n  }\n  get draft() {\n    return this.state.draft;\n  }\n\n  hasCustomStructure(d: Draft): boolean {\n    let ops = this.draftClassification.filter((c) => c.category == \"custom structure\")[0].ops;\n    console.log(ops);\n    if (ops.length == 0) return false;\n    return ops\n      .map((el) => { return el.struct_id == d.id})\n      .reduce((a, b) => { return a || b; });\n  }\n\n  setDraft(d: Draft) {\n    if (!this.hasCustomStructure(d)) {\n      console.log(\"a new structure!\");\n      let structOps = this.draftClassification.filter((c) => c.category == \"custom structure\")[0].ops;\n      let op = this.structureOpFromDraft(d);\n      structOps.push(op);\n      this.mappings.addOperation(op);\n    }\n    this.state.draft = d;\n    this.state.row = 0;\n    // console.log(\"player has active draft\");\n    // console.log(\"draft is \", this.draft);\n    console.log(\"draft set \", this.state);\n  }\n\n  /**\n   * \n   * @param d the Draft to turn into a custom structure Operation\n   */\n  structureOpFromDraft(d: Draft) {\n    let structOp: PlayerOp = {\n      name: d.gen_name,\n      struct_id: d.id,\n      perform: (init: PlayerState) => {\n        let res = copyState(init);\n        res.draft = d;\n        res.row = init.row % wefts(d.drawdown);\n        return Promise.resolve(res);\n      }\n    };\n    return structOp;\n  }\n\n  // e is a string = op.name\n  setPedalOp(e: any, p: Pedal) {\n    console.log(e, p);\n    if (this.mappings.pedalIsPaired(p.id)) {\n      this.mappings.unmap(p.id);\n    }\n    this.mappings.pair(p.id, e);\n    console.log(\"pedals map\", this.mappings);\n  }\n\n  onPedal(id: number) {\n    console.log('player service: pedal ', id);\n    let mapped = this.mappings.getMap(id);\n    // console.log(this.mappings);\n    // console.log(this.seq);\n    if (mapped) {\n      console.log('mapping exists for pedal');\n      mapped.perform(this.state, id)\n      .then((state: PlayerState) => {\n        this.state = copyState(state);\n        console.log(this.state);\n        this.redraw.emit('redraw');\n        if (this.state.weaving) {\n          console.log(\"draft player: sending row\");\n          this.pedals.sendDraftRow(this.currentRow());\n        }\n      });\n    }\n  }\n\n  // compound pedal operations\n  // normal pedal -> op\n  // compound pedal -> Op sequence\n  // if (compound pedal change) {\n      // sequence of operations: [Op, Op, Op]\n      // let finaldraft = starting Draft;\n      // for op in sequence:\n      //   finaldraft = finaldraft.perform(op);\n      // }\n      // do something with finaldraft\n  // }\n\n\n  currentRow() {\n    let {draft, row} = this.state;\n    let draftRow = draft.drawdown[row % wefts(draft.drawdown)];\n    let data = \"\";\n\n    let targetLength = (this.loom.draftTiling ? this.loom.warps : draftRow.length);\n    while (data.length  {\n    //   if (state) {\n    //   }\n    // });\n  }\n}\n\n    \n\n\n\n\n\n\n\n\n\n                   \n    \n         results matching \"\"\n        \n    \n    \n        No results matching \"\"\n    \n\n"},"components/DraftdetailComponent.html":{"url":"components/DraftdetailComponent.html","title":"component - DraftdetailComponent","body":"\n                   \n\n\n\n\n\n  Components\n  \n  DraftdetailComponent\n\n\n\n        \n            Info\n        \n        \n            Source\n        \n        \n            Template\n        \n        \n            Styles\n        \n        \n            DOM Tree\n        \n\n\n\n    \n    File\n\n\n    src/app/mixer/modal/draftdetail/draftdetail.component.ts\n\n\n\n    \n        Description\n    \n    \n        this component initatites the draft viewer with custom options.\na copy of the draft is passed to the window and passed back to the parent on close (or null if changes not saved)\n\n    \n\n\n    \n        Implements\n    \n    \n                    OnInit\n    \n\n\n\n    Metadata\n    \n        \n\n\n\n\n\n\n\n\n\n\n\n            \n                selector\n                app-draftdetail\n            \n\n            \n                styleUrls\n                ./draftdetail.component.scss\n            \n\n\n\n            \n                templateUrl\n                ./draftdetail.component.html\n            \n\n\n\n\n\n\n\n\n        \n    \n\n\n    \n    Index\n    \n        \n                \n                    \n                        Properties\n                    \n                \n                \n                    \n                        \n                            \n                                    Public\n                                dm\n                            \n                            \n                                draft\n                            \n                            \n                                id\n                            \n                            \n                                ink\n                            \n                            \n                                    Public\n                                inks\n                            \n                            \n                                loom\n                            \n                            \n                                loom_settings\n                            \n                            \n                                scrollingSubscription\n                            \n                            \n                                viewonly\n                            \n                            \n                                weaver\n                            \n                            \n                                    Public\n                                ws\n                            \n                        \n                    \n                \n\n                \n                    \n                        Methods\n                    \n                \n                \n                    \n                        \n                            \n                                    Public\n                                inkActionChange\n                            \n                            \n                                ngAfterViewInit\n                            \n                            \n                                ngOnInit\n                            \n                            \n                                numFrames\n                            \n                            \n                                numTreadles\n                            \n                            \n                                    Public\n                                onCancel\n                            \n                            \n                                onNoClick\n                            \n                            \n                                    Public\n                                onSave\n                            \n                            \n                                    Private\n                                onWindowScroll\n                            \n                            \n                                    Public\n                                redraw\n                            \n                            \n                                swapEditingStyle\n                            \n                            \n                                updateSelection\n                            \n                            \n                                warps\n                            \n                            \n                                wefts\n                            \n                            \n                                width\n                            \n                        \n                    \n                \n\n\n\n\n\n        \n    \n\n\n    \n    Constructor\n        \n            \n                \n                    \nconstructor(dialogRef: MatDialogRef, data: any, scroll: ScrollDispatcher, inks: InkService, dm: DesignmodesService, ops: OperationService, ms: MaterialsService, ws: WorkspaceService, tree: TreeService)\n                    \n                \n                        \n                            \n                                Defined in src/app/mixer/modal/draftdetail/draftdetail.component.ts:55\n                            \n                        \n\n                \n                    \n                            \n                                    Parameters :\n                                    \n                                        \n                                            \n                                                Name\n                                                    Type\n                                                Optional\n                                            \n                                        \n                                        \n                                                \n                                                        dialogRef\n                                                  \n                                                        \n                                                                        MatDialogRef\n                                                        \n                                                  \n                                                    \n                                                            No\n                                                    \n                                                    \n                                                \n                                                \n                                                        data\n                                                  \n                                                        \n                                                                        any\n                                                        \n                                                  \n                                                    \n                                                            No\n                                                    \n                                                    \n                                                \n                                                \n                                                        scroll\n                                                  \n                                                        \n                                                                    ScrollDispatcher\n                                                        \n                                                  \n                                                    \n                                                            No\n                                                    \n                                                    \n                                                \n                                                \n                                                        inks\n                                                  \n                                                        \n                                                                        InkService\n                                                        \n                                                  \n                                                    \n                                                            No\n                                                    \n                                                    \n                                                \n                                                \n                                                        dm\n                                                  \n                                                        \n                                                                    DesignmodesService\n                                                        \n                                                  \n                                                    \n                                                            No\n                                                    \n                                                    \n                                                \n                                                \n                                                        ops\n                                                  \n                                                        \n                                                                        OperationService\n                                                        \n                                                  \n                                                    \n                                                            No\n                                                    \n                                                    \n                                                \n                                                \n                                                        ms\n                                                  \n                                                        \n                                                                    MaterialsService\n                                                        \n                                                  \n                                                    \n                                                            No\n                                                    \n                                                    \n                                                \n                                                \n                                                        ws\n                                                  \n                                                        \n                                                                    WorkspaceService\n                                                        \n                                                  \n                                                    \n                                                            No\n                                                    \n                                                    \n                                                \n                                                \n                                                        tree\n                                                  \n                                                        \n                                                                        TreeService\n                                                        \n                                                  \n                                                    \n                                                            No\n                                                    \n                                                    \n                                                \n                                        \n                                    \n                            \n                    \n                \n            \n        \n\n\n\n\n\n\n    \n    \n    \n        Methods\n    \n    \n        \n            \n                \n                    \n                    \n                        Public\n                        inkActionChange\n                        \n                    \n                \n            \n            \n                \n                    \n                    inkActionChange(name: string)\n                \n            \n\n\n            \n                \n                    Defined in src/app/mixer/modal/draftdetail/draftdetail.component.ts:139\n                \n            \n\n\n            \n                \n\n                    \n                        Parameters :\n                        \n                        \n                            \n                                \n                                    Name\n                                    Type\n                                    Optional\n                                \n                            \n                            \n                                \n                                    name\n                                    \n                                                string\n                                    \n\n                                    \n                                        No\n                                    \n\n\n                                \n                            \n                        \n                    \n                    \n                    \n                    \n                        Returns :         void\n\n                    \n                    \n                        \n                    \n                \n            \n        \n    \n    \n        \n            \n                \n                    \n                    \n                        ngAfterViewInit\n                        \n                    \n                \n            \n            \n                \nngAfterViewInit()\n                \n            \n\n\n            \n                \n                    Defined in src/app/mixer/modal/draftdetail/draftdetail.component.ts:127\n                \n            \n\n\n            \n                \n\n                    \n                        Returns :         void\n\n                    \n                \n            \n        \n    \n    \n        \n            \n                \n                    \n                    \n                        ngOnInit\n                        \n                    \n                \n            \n            \n                \nngOnInit()\n                \n            \n\n\n            \n                \n                    Defined in src/app/mixer/modal/draftdetail/draftdetail.component.ts:119\n                \n            \n\n\n            \n                \n                    this handles the case where someone clicks outside of the modal window\n\n\n                    \n                        Returns :         void\n\n                    \n                \n            \n        \n    \n    \n        \n            \n                \n                    \n                    \n                        numFrames\n                        \n                    \n                \n            \n            \n                \nnumFrames()\n                \n            \n\n\n            \n                \n                    Defined in src/app/mixer/modal/draftdetail/draftdetail.component.ts:185\n                \n            \n\n\n            \n                \n\n                    \n                        Returns :         any\n\n                    \n                \n            \n        \n    \n    \n        \n            \n                \n                    \n                    \n                        numTreadles\n                        \n                    \n                \n            \n            \n                \nnumTreadles()\n                \n            \n\n\n            \n                \n                    Defined in src/app/mixer/modal/draftdetail/draftdetail.component.ts:190\n                \n            \n\n\n            \n                \n\n                    \n                        Returns :         any\n\n                    \n                \n            \n        \n    \n    \n        \n            \n                \n                    \n                    \n                        Public\n                        onCancel\n                        \n                    \n                \n            \n            \n                \n                    \n                    onCancel()\n                \n            \n\n\n            \n                \n                    Defined in src/app/mixer/modal/draftdetail/draftdetail.component.ts:159\n                \n            \n\n\n            \n                \n\n                    \n                        Returns :         void\n\n                    \n                \n            \n        \n    \n    \n        \n            \n                \n                    \n                    \n                        onNoClick\n                        \n                    \n                \n            \n            \n                \nonNoClick()\n                \n            \n\n\n            \n                \n                    Defined in src/app/mixer/modal/draftdetail/draftdetail.component.ts:135\n                \n            \n\n\n            \n                \n\n                    \n                        Returns :         void\n\n                    \n                \n            \n        \n    \n    \n        \n            \n                \n                    \n                    \n                        Public\n                        onSave\n                        \n                    \n                \n            \n            \n                \n                    \n                    onSave()\n                \n            \n\n\n            \n                \n                    Defined in src/app/mixer/modal/draftdetail/draftdetail.component.ts:165\n                \n            \n\n\n            \n                \n\n                    \n                        Returns :         void\n\n                    \n                \n            \n        \n    \n    \n        \n            \n                \n                    \n                    \n                        Private\n                        onWindowScroll\n                        \n                    \n                \n            \n            \n                \n                    \n                    onWindowScroll(data: CdkScrollable)\n                \n            \n\n\n            \n                \n                    Defined in src/app/mixer/modal/draftdetail/draftdetail.component.ts:96\n                \n            \n\n\n            \n                \n\n                    \n                        Parameters :\n                        \n                        \n                            \n                                \n                                    Name\n                                    Type\n                                    Optional\n                                \n                            \n                            \n                                \n                                    data\n                                    \n                                            CdkScrollable\n                                    \n\n                                    \n                                        No\n                                    \n\n\n                                \n                            \n                        \n                    \n                    \n                    \n                    \n                        Returns :         void\n\n                    \n                    \n                        \n                    \n                \n            \n        \n    \n    \n        \n            \n                \n                    \n                    \n                        Public\n                        redraw\n                        \n                    \n                \n            \n            \n                \n                    \n                    redraw()\n                \n            \n\n\n            \n                \n                    Defined in src/app/mixer/modal/draftdetail/draftdetail.component.ts:155\n                \n            \n\n\n            \n                \n\n                    \n                        Returns :         void\n\n                    \n                \n            \n        \n    \n    \n        \n            \n                \n                    \n                    \n                        swapEditingStyle\n                        \n                    \n                \n            \n            \n                \nswapEditingStyle()\n                \n            \n\n\n            \n                \n                    Defined in src/app/mixer/modal/draftdetail/draftdetail.component.ts:195\n                \n            \n\n\n            \n                \n\n                    \n                        Returns :         void\n\n                    \n                \n            \n        \n    \n    \n        \n            \n                \n                    \n                    \n                        updateSelection\n                        \n                    \n                \n            \n            \n                \nupdateSelection(event: any)\n                \n            \n\n\n            \n                \n                    Defined in src/app/mixer/modal/draftdetail/draftdetail.component.ts:93\n                \n            \n\n\n            \n                \n\n                    \n                        Parameters :\n                        \n                        \n                            \n                                \n                                    Name\n                                    Type\n                                    Optional\n                                \n                            \n                            \n                                \n                                    event\n                                    \n                                                any\n                                    \n\n                                    \n                                        No\n                                    \n\n\n                                \n                            \n                        \n                    \n                    \n                    \n                    \n                        Returns :         void\n\n                    \n                    \n                        \n                    \n                \n            \n        \n    \n    \n        \n            \n                \n                    \n                    \n                        warps\n                        \n                    \n                \n            \n            \n                \nwarps()\n                \n            \n\n\n            \n                \n                    Defined in src/app/mixer/modal/draftdetail/draftdetail.component.ts:172\n                \n            \n\n\n            \n                \n\n                    \n                        Returns :         any\n\n                    \n                \n            \n        \n    \n    \n        \n            \n                \n                    \n                    \n                        wefts\n                        \n                    \n                \n            \n            \n                \nwefts()\n                \n            \n\n\n            \n                \n                    Defined in src/app/mixer/modal/draftdetail/draftdetail.component.ts:176\n                \n            \n\n\n            \n                \n\n                    \n                        Returns :         any\n\n                    \n                \n            \n        \n    \n    \n        \n            \n                \n                    \n                    \n                        width\n                        \n                    \n                \n            \n            \n                \nwidth()\n                \n            \n\n\n            \n                \n                    Defined in src/app/mixer/modal/draftdetail/draftdetail.component.ts:180\n                \n            \n\n\n            \n                \n\n                    \n                        Returns :         number\n\n                    \n                \n            \n        \n    \n\n    \n    \n    \n        Properties\n    \n    \n        \n            \n                \n                    \n                    \n                            Public\n                        dm\n                        \n                    \n                \n            \n                \n                    \n                        Type :     DesignmodesService\n\n                    \n                \n                    \n                        \n                                Defined in src/app/mixer/modal/draftdetail/draftdetail.component.ts:62\n                        \n                    \n\n\n        \n    \n    \n        \n            \n                \n                    \n                    \n                        draft\n                        \n                    \n                \n            \n                \n                    \n                        Type :         Draft\n\n                    \n                \n                    \n                        \n                                Defined in src/app/mixer/modal/draftdetail/draftdetail.component.ts:41\n                        \n                    \n\n            \n                \n                    a reference to the draft that we're modifying\n\n                \n            \n\n        \n    \n    \n        \n            \n                \n                    \n                    \n                        id\n                        \n                    \n                \n            \n                \n                    \n                        Type :         number\n\n                    \n                \n                    \n                        \n                                Defined in src/app/mixer/modal/draftdetail/draftdetail.component.ts:33\n                        \n                    \n\n\n        \n    \n    \n        \n            \n                \n                    \n                    \n                        ink\n                        \n                    \n                \n            \n                \n                    \n                        Type :         String\n\n                    \n                \n                    \n                        \n                                Defined in src/app/mixer/modal/draftdetail/draftdetail.component.ts:36\n                        \n                    \n\n\n        \n    \n    \n        \n            \n                \n                    \n                    \n                            Public\n                        inks\n                        \n                    \n                \n            \n                \n                    \n                        Type :         InkService\n\n                    \n                \n                    \n                        \n                                Defined in src/app/mixer/modal/draftdetail/draftdetail.component.ts:61\n                        \n                    \n\n\n        \n    \n    \n        \n            \n                \n                    \n                    \n                        loom\n                        \n                    \n                \n            \n                \n                    \n                        Type :         Loom\n\n                    \n                \n                    \n                        \n                                Defined in src/app/mixer/modal/draftdetail/draftdetail.component.ts:48\n                        \n                    \n\n            \n                \n                    The weave Loom object.\n\n                \n            \n\n        \n    \n    \n        \n            \n                \n                    \n                    \n                        loom_settings\n                        \n                    \n                \n            \n                \n                    \n                        Type :         LoomSettings\n\n                    \n                \n                    \n                        \n                                Defined in src/app/mixer/modal/draftdetail/draftdetail.component.ts:50\n                        \n                    \n\n\n        \n    \n    \n        \n            \n                \n                    \n                    \n                        scrollingSubscription\n                        \n                    \n                \n            \n                \n                    \n                        Type :         any\n\n                    \n                \n                    \n                        \n                                Defined in src/app/mixer/modal/draftdetail/draftdetail.component.ts:53\n                        \n                    \n\n\n        \n    \n    \n        \n            \n                \n                    \n                    \n                        viewonly\n                        \n                    \n                \n            \n                \n                    \n                        Type :         boolean\n\n                    \n                \n                \n                    \n                        Default value : false\n                    \n                \n                    \n                        \n                                Defined in src/app/mixer/modal/draftdetail/draftdetail.component.ts:55\n                        \n                    \n\n\n        \n    \n    \n        \n            \n                \n                    \n                    \n                        weaver\n                        \n                    \n                \n            \n                \n                    \n                        Type :     WeaverComponent\n\n                    \n                \n                \n                    \n                        Decorators : \n                        \n                        \n                            @ViewChild('weaver', {read: WeaverComponent, static: true})\n                        \n                    \n                \n                    \n                        \n                                Defined in src/app/mixer/modal/draftdetail/draftdetail.component.ts:30\n                        \n                    \n\n\n        \n    \n    \n        \n            \n                \n                    \n                    \n                            Public\n                        ws\n                        \n                    \n                \n            \n                \n                    \n                        Type :     WorkspaceService\n\n                    \n                \n                    \n                        \n                                Defined in src/app/mixer/modal/draftdetail/draftdetail.component.ts:65\n                        \n                    \n\n\n        \n    \n\n\n\n\n\n    \n        import { Component, HostListener, Inject, OnInit, ViewChild } from '@angular/core';\nimport { MatDialogRef, MAT_DIALOG_DATA } from '@angular/material/dialog';\nimport { Draft, Loom, LoomSettings } from '../../../core/model/datatypes';\nimport { numFrames, numTreadles } from '../../../core/model/looms';\nimport {wefts, warps} from '../../../core/model/drafts'\nimport { CdkScrollable, ScrollDispatcher } from '@angular/cdk/scrolling';\nimport { InkService } from '../../provider/ink.service';\nimport { OperationService } from '../../provider/operation.service';\nimport { DesignmodesService } from '../../../core/provider/designmodes.service';\nimport { WeaverComponent } from '../../../weaver/weaver.component';\nimport { MaterialsService } from '../../../core/provider/materials.service';\nimport { WorkspaceService } from '../../../core/provider/workspace.service';\nimport { from } from 'rxjs';\nimport { TreeService } from '../../provider/tree.service';\n\n\n/**\n * this component initatites the draft viewer with custom options. \n * a copy of the draft is passed to the window and passed back to the parent on close (or null if changes not saved) \n */\n@Component({\n  selector: 'app-draftdetail',\n  templateUrl: './draftdetail.component.html',\n  styleUrls: ['./draftdetail.component.scss']\n})\nexport class DraftdetailComponent implements OnInit {\n\n \n  //the draft view shared by this and weaver\n  @ViewChild('weaver', {read: WeaverComponent, static: true}) weaver: WeaverComponent;\n\n\n  id: number;\n\n\n  ink: String; //the name of the selected ink.\n\n  /**\n   * a reference to the draft that we're modifying\n   */\n  draft:Draft;\n\n\n  /**\n   * The weave Loom object.\n   * @property {Loom}\n   */\n   loom: Loom;\n\n   loom_settings: LoomSettings;\n\n\n  scrollingSubscription: any;\n\n  viewonly: boolean = false;\n\n\n  constructor(private dialogRef: MatDialogRef,\n             @Inject(MAT_DIALOG_DATA) private data: any, \n             private scroll: ScrollDispatcher,\n             public inks: InkService,\n             public dm: DesignmodesService,\n             private ops: OperationService,\n             private ms: MaterialsService,\n             public ws: WorkspaceService,\n             private tree: TreeService) { \n\n              this.scrollingSubscription = this.scroll\n              .scrolled()\n              .subscribe((data: any) => {\n                 this.onWindowScroll(data);\n               });\n\n               this.id = data.id;\n               this.draft = this.tree.getDraft(this.id);\n               this.loom = this.tree.getLoom(this.id);\n               this.loom_settings = this.tree.getLoomSettings(this.id);\n               this.ink = data.ink;\n               this.viewonly = this.tree.hasParent(this.id);\n\n               if(this.loom_settings.type == 'jacquard'){\n                this.dm.selectDesignMode('drawdown', 'drawdown_editing_style')\n              }else{\n                this.dm.selectDesignMode('loom', 'drawdown_editing_style')\n\n               }\n                            \n\n              // this.modal_height = (this.draft.wefts+20) * this.render.getCellDims('base').h;\n\n  }\n\n  updateSelection(event: any){\n  }\n\n  private onWindowScroll(data: CdkScrollable) {\n    const scrollTop = data.measureScrollOffset(\"top\");\n    const scrollLeft = data.measureScrollOffset(\"left\");\n\n    // this.dv.reposition(scrollTop, scrollLeft);\n  }\n\n  /**\n   * this handles the case where someone clicks outside of the modal window \n   * @param $event \n   */\n  // @HostListener('document:click', ['$event']) click($event){\n  //   // here you can hide your menu\n  //   const target: HTMLElement = $event.target;\n  //   const name: string = target.className;\n  //   if(name.includes(\"cdk-overlay-backdrop\")){\n  //       this.onSave();\n  //   }\n  //   console.log(\"anywhere click\", target.className);\n  // }\n\n\n\n  ngOnInit() {\n\n\n  }\n\n  \n\n\n  ngAfterViewInit(){\n\n\n   \n  }\n\n\n  \n  onNoClick(){\n    this.onSave();\n  }\n\n  public inkActionChange(name: string){\n    this.ink = name;\n  }\n\n  // designActionChange(e){\n\n  // const drafts: Array = this.ops.getOp(e).perform([this.draft], []);\n  //       drafts.forEach(draft => {\n  //         this.draft.reload(draft);\n  //         this.dv.redraw({drawdown:true});  \n  //       }); \n  //   this.dv.redraw({\n  //     drawdown: true\n  //   });   \n  // }\n\n  public redraw(){\n    this.weaver.materialChange();\n  }\n\n  public onCancel(){\n    this.scrollingSubscription.unsubscribe();\n    this.weaver.closeAllModals();\n    this.dialogRef.close(null);\n  }\n\n  public onSave(){\n    this.scrollingSubscription.unsubscribe();\n    this.weaver.closeAllModals();\n    this.dialogRef.close(this.draft);\n  }\n\n  //HELPER FUNCTIONS TO AID VARIABLES CALLED FROM HTML\n warps(){\n    return warps(this.draft.drawdown);\n  }\n\n wefts(){\n    return wefts(this.draft.drawdown);\n  }\n\n width(){\n    if(this.loom_settings.units == 'cm') return warps(this.draft.drawdown) / this.loom_settings.epi * 10;\n    else return warps(this.draft.drawdown) / this.loom_settings.epi;\n  }\n\n  numFrames(){\n    const loom = this.tree.getLoom(this.id);\n    return numFrames(loom);\n  }\n  \n  numTreadles(){\n    const loom = this.tree.getLoom(this.id);\n    return numTreadles(loom);\n  }\n\n  swapEditingStyle(){\n    if(this.dm.getSelectedDesignMode('drawdown_editing_style').value === 'drawdown'){\n      this.dm.selectDesignMode('loom', 'drawdown_editing_style')\n    }else{\n      this.dm.selectDesignMode('drawdown', 'drawdown_editing_style')\n    }\n\n  }\n  \n}\n    \n\n    \n        \n\n\n  \n    \n    \n    \n    Fine Tune this Draft\n\n      You are in View Only Mode because this draft has been generated by an operation. In viewonly mode, you may only adjust colors and warp systems and visualize yarn paths. If you want to modify the draft, you must go back to the mixer and duplicate it to remove it from the parent operation\n    \n    \n  \n\n  \n\n\n  \n\n    \n       loom type: {{loom_settings.type}}\n       size: {{warps()}} ends, {{wefts()}} pics\n       width: {{width()}} {{loom_settings.units}}\n       epi: {{loom_settings.epi}}\n       ep10cm: {{loom_settings.epi}}\n      requires {{numFrames()}} frames, {{numTreadles()}} treadles\n      \n         This draft requires more than the {{ws.min_frames}} frames or {{ws.min_treadles}} treadles than you have specified for your loom -->\n     \n\n\n    \n      Using Ink\n      \n        \n          {{i.viewValue}}\n        \n       \n    \n\n    \n      Editing Mode: \n      \n      \n      {{dm.getSelectedDesignMode('drawdown_editing_style').viewValue}}\n\n      \n -->\n\n\n    \n\n    \n                \n                    ./draftdetail.component.scss\n                \n                .draft-detail-modal{\n  display: flex;\n  flex-direction: column;\n}\n\n.toolbars{\n  display: flex;\n  flex: row;\n}\n\n.draft-drawer{\n  background: #3d3d3d;\n}\n\n.draft-detail-body{\n  display: flex;\n  flex-direction: row;\n}\n\n.draft-viewer{\n  overflow: scroll;\n}\n\n.options{\n  margin-left: 18px;\n  width: 200px;\n}\n\n.toggle-row{\n  font-size: .8em;\n}\n\n.titledata{\n  display: flex;\n  flex-direction: column;\n}\n\n.toprow{\n  display: flex;\n  flex-direction: row;\n  line-height: 1em;\n  margin-bottom: 20px;\n}\n\n.ink-block{\n  display: flex;\n  flex-direction: column;\n  width: 42%;\n}\n\n.mat-dialog-title {\n  margin: 0px;\n  display: block;\n}\n\n.error{\n  color: #ff3860;\n}\n\n.viewonly{\n  font-size: .8em;\n}\n\n.weave_stats{\n  display: flex;\n  flex-direction: column;\n}\n\n.draft-detail-footer{\n  width: 80%;\n  font-size: .8em;\n  display: flex;\n  flex-direction: row;\n  justify-content: space-between;\n}\n\n\n\n\n\n    \n\n    \n        \n        \n            \n                Legend\n            \n            \n                Html element\n            \n            \n                Component\n            \n            \n                Html element with directive\n            \n        \n    \n\n    \n\n\n\n\n\n\n        var COMPONENT_TEMPLATE = '                  Fine Tune this Draft      You are in View Only Mode because this draft has been generated by an operation. In viewonly mode, you may only adjust colors and warp systems and visualize yarn paths. If you want to modify the draft, you must go back to the mixer and duplicate it to remove it from the parent operation                         loom type: {{loom_settings.type}}       size: {{warps()}} ends, {{wefts()}} pics       width: {{width()}} {{loom_settings.units}}       epi: {{loom_settings.epi}}       ep10cm: {{loom_settings.epi}}      requires {{numFrames()}} frames, {{numTreadles()}} treadles               This draft requires more than the {{ws.min_frames}} frames or {{ws.min_treadles}} treadles than you have specified for your loom -->               Using Ink                        {{i.viewValue}}                             Editing Mode:                   {{dm.getSelectedDesignMode(\\'drawdown_editing_style\\').viewValue}}       -->'\n    var COMPONENTS = [{'name': 'ConnectionComponent', 'selector': 'app-connection'},{'name': 'DraftdetailComponent', 'selector': 'app-draftdetail'},{'name': 'ImageComponent', 'selector': 'app-image'},{'name': 'InletComponent', 'selector': 'app-inlet'},{'name': 'MixerComponent', 'selector': 'app-mixer'},{'name': 'MixerViewComponent', 'selector': 'app-mixerview'},{'name': 'NoteComponent', 'selector': 'app-note'},{'name': 'OperationComponent', 'selector': 'app-operation'},{'name': 'OpHelpModal', 'selector': 'app-ophelp'},{'name': 'OpsComponent', 'selector': 'app-ops'},{'name': 'OpSequencerComponent', 'selector': 'app-op-sequencer'},{'name': 'PaletteComponent', 'selector': 'app-palette'},{'name': 'ParameterComponent', 'selector': 'app-parameter'},{'name': 'PlayerComponent', 'selector': 'app-player'},{'name': 'SnackbarComponent', 'selector': 'app-snackbar'},{'name': 'SubdraftComponent', 'selector': 'app-subdraft'},{'name': 'VirtualPedalsComponent', 'selector': 'app-virtual-pedals'},{'name': 'WeavingStateComponent', 'selector': 'app-weaving-state'}];\n    var DIRECTIVES = [{'name': 'MarqueeComponent', 'selector': 'app-marquee'},{'name': 'SelectionComponent', 'selector': 'app-selection'}];\n    var ACTUAL_COMPONENT = {'name': 'DraftdetailComponent'};\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n                   \n    \n         results matching \"\"\n        \n    \n    \n        No results matching \"\"\n    \n\n"},"interfaces/DynamicOperation.html":{"url":"interfaces/DynamicOperation.html","title":"interface - DynamicOperation","body":"\n                   \n\n\n\n\n\n\n\n\n\n\n\n\n\n\n  Interfaces\n  \n  DynamicOperation\n\n\n\n        \n            Info\n        \n        \n            Source\n        \n\n\n\n    \n        \n            File\n        \n        \n            src/app/mixer/model/operation.ts\n        \n\n\n            \n                Description\n            \n            \n                A container operation that takes drafts with some parameter assigned to them\n\n            \n\n            \n                Extends\n            \n            \n                        TreeOperation\n            \n\n        \n            Index\n            \n                \n                    \n                        \n                            Properties\n                        \n                    \n                    \n                        \n                            \n                                \n                                        \n                                            displayname\n                                        \n                                \n                                \n                                        \n                                            dx\n                                        \n                                \n                                \n                                        \n                                            dynamic_param_id\n                                        \n                                \n                                \n                                        \n                                            dynamic_param_type\n                                        \n                                \n                                \n                                        \n                                            inlets\n                                        \n                                \n                                \n                                        \n                                            name\n                                        \n                                \n                                \n                                        \n                                            old_names\n                                        \n                                \n                                \n                                        \n                                            params\n                                        \n                                \n                                \n                                        \n                                            perform\n                                        \n                                \n                            \n                        \n                    \n                \n            \n        \n\n\n\n            \n                Properties\n                    \n                        \n                                \n                                    \n                                        \n                                        displayname\n                                            \n                                                \n                                            \n                                        \n                                    \n                                \n                                \n                                    \n                                        displayname:         string\n\n                                    \n                                \n\n\n                                    \n                                        \n                                            Type :         string\n\n                                        \n                                    \n\n\n\n\n\n                        \n                    \n                    \n                        \n                                \n                                    \n                                        \n                                        dx\n                                            \n                                                \n                                            \n                                        \n                                    \n                                \n                                \n                                    \n                                        dx:         string\n\n                                    \n                                \n\n\n                                    \n                                        \n                                            Type :         string\n\n                                        \n                                    \n\n\n\n\n\n                        \n                    \n                    \n                        \n                                \n                                    \n                                        \n                                        dynamic_param_id\n                                            \n                                                \n                                            \n                                        \n                                    \n                                \n                                \n                                    \n                                        dynamic_param_id:         number\n\n                                    \n                                \n\n\n                                    \n                                        \n                                            Type :         number\n\n                                        \n                                    \n\n\n\n\n\n                        \n                    \n                    \n                        \n                                \n                                    \n                                        \n                                        dynamic_param_type\n                                            \n                                                \n                                            \n                                        \n                                    \n                                \n                                \n                                    \n                                        dynamic_param_type:         string\n\n                                    \n                                \n\n\n                                    \n                                        \n                                            Type :         string\n\n                                        \n                                    \n\n\n\n\n\n                        \n                    \n                    \n                        \n                                \n                                    \n                                        \n                                        inlets\n                                            \n                                                \n                                            \n                                        \n                                    \n                                \n                                \n                                    \n                                        inlets:     Array\n\n                                    \n                                \n\n\n                                    \n                                        \n                                            Type :     Array\n\n                                        \n                                    \n\n\n\n\n\n                        \n                    \n                    \n                        \n                                \n                                    \n                                        \n                                        name\n                                            \n                                                \n                                            \n                                        \n                                    \n                                \n                                \n                                    \n                                        name:         string\n\n                                    \n                                \n\n\n                                    \n                                        \n                                            Type :         string\n\n                                        \n                                    \n\n\n\n\n\n                        \n                    \n                    \n                        \n                                \n                                    \n                                        \n                                        old_names\n                                            \n                                                \n                                            \n                                        \n                                    \n                                \n                                \n                                    \n                                        old_names:     Array\n\n                                    \n                                \n\n\n                                    \n                                        \n                                            Type :     Array\n\n                                        \n                                    \n\n\n\n\n\n                        \n                    \n                    \n                        \n                                \n                                    \n                                        \n                                        params\n                                            \n                                                \n                                            \n                                        \n                                    \n                                \n                                \n                                    \n                                        params:         Array\n\n                                    \n                                \n\n\n                                    \n                                        \n                                            Type :         Array\n\n                                        \n                                    \n\n\n\n\n\n                        \n                    \n                    \n                        \n                                \n                                    \n                                        \n                                        perform\n                                            \n                                                \n                                            \n                                        \n                                    \n                                \n                                \n                                    \n                                        perform:         function\n\n                                    \n                                \n\n\n                                    \n                                        \n                                            Type :         function\n\n                                        \n                                    \n\n\n\n\n\n                        \n                    \n            \n    \n\n\n    \n        import { Draft } from '../../core/model/datatypes';\nimport { OperationParam, ParamValue } from './operation/params';\nimport { InletDrafts, OperationInlet } from './operation/inlets';\nimport { BaseOp as Op, BuildableOperation as GenericOp,\n  Seed, Pipe, Merge, Branch, Bus,\n  NoDrafts, NoParams, DraftsOptional, ParamsOptional, AllRequired\n} from './operation/topology';\n\n\n/** ALL OBJECTS/TYPES/UTILITY FUNCTIONS RELATED to OPERATIONS *****************/\n\nexport * from './operation/inlets';\nexport * from './operation/params';\nexport * from './operation/topology';\nexport * as format from './operation/formatting';\n\n/**** USING OPERATIONS with the MIXER TREE **************/\n\n/**\n * this is a type that contains a series of smaller operations held under the banner of one larger operation (such as layer)\n * @param op_name the name of the operation or \"child\" if this is an assignment to an input parameter\n * @param drafts the drafts associated with this input\n * @param params the parameters associated with this operation OR child input\n * @param inlets the index of the inlet for which the draft is entering upon\n */\n export interface OpInput {\n  op_name: string,\n  drafts: Array,\n  params: Array,\n  inlet: number | null\n}\n\nfunction getParamsFromInputs(inputs: Array): Array {\n  let res = inputs.map((el) => el.params).reduce((acc, el) => acc.concat(el), []);\n  console.log(res);\n  return res;\n}\n\nfunction getDraftsFromInputs(inputs: Array): Array {\n  return inputs.map((el) => el.drafts).reduce((acc, ds) => acc.concat(ds), []);\n}\n\nfunction getInletsFromInputs(inputs: Array, n: number): InletDrafts {\n  let res: InletDrafts = {};\n  for (let i = 0; i  el.inlet == i);\n    let inlet_drafts = this_inlet.map((el) => el.drafts);\n    res[i] = inlet_drafts.reduce((acc, ds) => acc.concat(ds), []);\n  }\n  return res;\n}\n  \n/**\n * a standard operation used by the tree\n * @param name the internal name of this opearation (CHANGING THESE WILL BREAK LEGACY VERSIONS)\n * @param displayname the name to show upon this operation in the interface\n * @param dx the description of this operation\n * @param params the parameters associated with this operation\n * @param inets the inlets associated with this operation\n * @param old_names referes to any prior name of this operation to aid when loading old files\n * @param perform a function that executes when this operation is performed, takes a series of inputs and resturns an array of drafts\n */\nexport interface TreeOperation {\n  name: string,\n  displayname: string,\n  dx: string,\n  params: Array,\n  inlets: Array,\n  old_names: Array,\n  perform: (op_inputs: Array) => Promise>\n}\n\nexport function getDefaultParams(op: TreeOperation | GenericOp): Array {\n  if (!op.params || op.params.length == 0) {\n    return [] as Array;\n  }\n  return op.params.map((el) => el.value);\n}\n\n/** \n * @function \n * The big function to pack an operation from op_definitions (working directly with params and drafts)\n * into an operation that the tree can recognize (uses OpInputs)\n */\nexport function buildTreeOp(base: GenericOp): TreeOperation {\n  let tree_op_perform: TreeOperation[\"perform\"];\n  // check what type of op, topologically with I/O (seed, pipe, merge, branch, bus, dynamic)\n    // convert perform args to Array\n  // check for special case of args (no drafts, no params, everything else is ok)\n    // only seed -> no drafts, everything else\n    // pipe/merge/branch/bus -> no params, everything else\n  // check if there is a param or draft in op_inputs[0] to put into an optional arg\n  if (base.classifier.type === 'seed') {\n    if (base.classifier.input_drafts === 'none') {\n      let seedOp = base as Op;\n      tree_op_perform = (op_inputs: Array) => {\n        return Promise.resolve([seedOp.perform(op_inputs[0].params)]);\n      }\n    } else {\n      let seedOp = base as Op;\n      tree_op_perform = (op_inputs: Array) => {\n        console.log(\"op inputs: \", base.name, op_inputs);\n        let res: Draft;\n        if (op_inputs.filter((el) => (el.op_name == 'child')).length > 0) {\n          res = seedOp.perform(op_inputs[0].params, getDraftsFromInputs(op_inputs)[0]);\n        } else {\n          res = seedOp.perform(op_inputs[0].params);\n        }\n        console.log(\"tree op call: \", res);\n        return Promise.resolve([res]);\n      }\n    }\n  } else if (base.classifier.type === 'pipe') {\n    // let pipeOp;\n    if (base.classifier.input_params === 'none') {\n      let pipeOp = base as Op ;\n      tree_op_perform = (op_inputs: Array) => {\n        if (op_inputs.filter((el) => (el.op_name == 'child')).length == 0) {\n          return Promise.resolve([]) as Promise>;\n        }\n        return Promise.resolve([pipeOp.perform(getDraftsFromInputs(op_inputs)[0])]);\n      }\n    } else if (base.classifier.input_params === 'req') {\n      let pipeOp = base as Op;\n      console.log(\"perform op, pipe all required\");\n      tree_op_perform = (op_inputs: Array) => {\n        if (op_inputs.filter((el) => (el.op_name == 'child')).length == 0) {\n          return Promise.resolve([]) as Promise>;\n        }\n        return Promise.resolve([pipeOp.perform(getDraftsFromInputs(op_inputs)[0], op_inputs[0].params)]);\n      }\n    } else {\n      let pipeOp = base as Op;\n      tree_op_perform = (op_inputs: Array) => {\n        if (op_inputs[0].params.length > 0) {\n          return Promise.resolve([pipeOp.perform(op_inputs[0].drafts[0], op_inputs[0].params)]);\n        } else {\n          return Promise.resolve([pipeOp.perform(op_inputs[0].drafts[0])]);\n        }\n      }\n    }\n  } else if (base.classifier.type === 'merge') {\n    if (base.classifier.input_params === 'none') {\n      let mergeOp = base as Op;\n      if (base.inlets.filter((i) => i.num_drafts != 1).length) {\n        // complex merge, at least one inlet can take multiple drafts, so we have to prepare\n        // the inputs a little differently\n        tree_op_perform = (op_inputs: Array) => {\n          if (op_inputs.filter((el) => (el.op_name == 'child')).length >;\n          }\n          let inputs: InletDrafts = {};\n          for (let i = 0; i  el.inlet == i);\n            let inlet_drafts = this_inlet.map((el) => el.drafts);\n            inputs[i] = inlet_drafts.reduce((acc, ds) => acc.concat(ds), []);\n          }\n          return Promise.resolve([mergeOp.perform(inputs)]);\n        }\n      } else {\n        // simple merge, either 1 multi-inlet or mulitple single inlets\n        tree_op_perform = (op_inputs: Array) => {\n          if (op_inputs.filter((el) => (el.op_name == 'child')).length == 0) {\n            return Promise.resolve([]) as Promise>;\n          }\n          let inputs: Array;\n          inputs = op_inputs.map((el) => el.drafts).reduce((acc, ds) => acc.concat(ds), []);\n          return Promise.resolve([mergeOp.perform(inputs)]);\n        }\n      }\n    } else if (base.classifier.input_params === 'req') {\n      let mergeOp = base as Op;\n      if (base.inlets.length > 1 && base.inlets.filter((i) => i.num_drafts != 1).length) {\n        // complex merge, more than one inlet and at least one inlet can take multiple drafts, so we have to prepare\n        // the inputs a little differently\n        tree_op_perform = (op_inputs: Array) => {\n          if (op_inputs.filter((el) => (el.op_name == 'child')).length == 0) {\n            return Promise.resolve([]) as Promise>;\n          }\n          let inputs: InletDrafts = {};\n          for (let i = 0; i  el.inlet == i);\n            let inlet_drafts = this_inlet.map((el) => el.drafts);\n            inputs[i] = inlet_drafts.reduce((acc, ds) => acc.concat(ds), []);\n          }\n          return Promise.resolve([mergeOp.perform(inputs, op_inputs[0].params)]);\n        }\n      } else {\n        // simple merge, either 1 multi-inlet or multple single inlets\n        tree_op_perform = (op_inputs: Array) => {\n          if (op_inputs.filter((el) => (el.op_name == 'child')).length == 0) {\n            return Promise.resolve([]) as Promise>;\n          }\n          let inputs: Array;\n          inputs = op_inputs.map((el) => el.drafts).reduce((acc, ds) => acc.concat(ds));\n          return Promise.resolve([mergeOp.perform(inputs, op_inputs[0].params)]);\n        }\n      }\n    }\n  } else if (base.classifier.type === 'branch') { \n    if (base.classifier.input_params === 'req') {\n      let branchOp = base as Op;\n      tree_op_perform = (op_inputs: Array) => {\n        return Promise.resolve(branchOp.perform(op_inputs[1].drafts[0], getParamsFromInputs(op_inputs))) as Promise>;\n      }\n    } else {\n      let branchOp = base as Op;\n      tree_op_perform = (op_inputs: Array) => {\n        if (op_inputs.filter((el) => (el.op_name == 'child')).length == 0) {\n          return Promise.resolve([]) as Promise>;\n        }\n        return Promise.resolve(branchOp.perform(op_inputs[1].drafts[0])) as Promise>;\n      }\n    }\n  } else { /** @todo bus ops, but there aren't any operations in this category currently */\n    tree_op_perform = (op_inputs: Array) => {\n      return Promise.resolve([]) as Promise>;\n    }\n  }\n\n  let new_op = {\n    name: base.name,\n    topo_op: base,\n    old_names: base.old_names,\n    inlets: base.inlets,\n    displayname: base.displayname,\n    dx: base.dx,\n    max_inputs: base.max_inputs,\n    params: base.params,\n    perform: tree_op_perform\n  } as TreeOperation;\n\n  return new_op;\n}\n\n/**\n * A container operation that takes drafts with some parameter assigned to them \n * @param name the internal name of this operation used for index (DO NOT CHANGE THESE NAMES!)\n * @param displayname the name to show the viewer \n * @param params the parameters that one can directly input to the parent\n * @param dynamic_param_id which parameter id should we use to dynamically create paramaterized input slots\n * @param dynamic_param_type the type of parameter that we look to generate\n * @param inlets the inlets available for input by default on this operation\n * @param dx the description of this operation\n * @param old_names referes to any prior name of this operation to aid when loading old files\n * @param perform a function that executes when this operation is performed, takes a series of inputs and resturns an array of drafts\n */\nexport interface DynamicOperation extends TreeOperation {\n  name: string,\n  displayname: string,\n  params: Array, \n  dynamic_param_id: number,\n  dynamic_param_type: string,\n  inlets: Array,\n  dx: string,\n  old_names: Array,\n  perform: (op_inputs: Array) => Promise>;\n}\n\n /**\n  * this type is used to classify operations in the dropdown menu\n  * @param category the name of the category for all associated operations (e.g. block, structure)\n  * @param dx a description of that category to show on screen\n  * @param ops an array of all the operations associated with this category\n  */\n export interface OperationClassification {\n  category: string,\n  dx: string,\n  ops: Array \n }\n\n export type Operation = TreeOperation; // default: export operations to interface with Tree\n\n \n    \n\n\n\n\n\n\n\n\n\n                   \n    \n         results matching \"\"\n        \n    \n    \n        No results matching \"\"\n    \n\n"},"interfaces/FileObj.html":{"url":"interfaces/FileObj.html","title":"interface - FileObj","body":"\n                   \n\n\n\n\n\n\n\n\n\n\n\n\n\n\n  Interfaces\n  \n  FileObj\n\n\n\n        \n            Info\n        \n        \n            Source\n        \n\n\n\n    \n        \n            File\n        \n        \n            src/app/core/model/datatypes/files.ts\n        \n\n\n\n\n        \n            Index\n            \n                \n                    \n                        \n                            Properties\n                        \n                    \n                    \n                        \n                            \n                                \n                                        \n                                            draft_nodes\n                                        \n                                \n                                \n                                        \n                                            filename\n                                        \n                                \n                                \n                                        \n                                            nodes\n                                        \n                                \n                                \n                                        \n                                            ops\n                                        \n                                \n                                \n                                        \n                                            scale\n                                        \n                                \n                                \n                                        \n                                            treenodes\n                                        \n                                \n                                \n                                        \n                                            version\n                                        \n                                \n                                \n                                        \n                                            workspace\n                                        \n                                \n                            \n                        \n                    \n                \n            \n        \n\n\n\n            \n                Properties\n                    \n                        \n                                \n                                    \n                                        \n                                        draft_nodes\n                                            \n                                                \n                                            \n                                        \n                                    \n                                \n                                \n                                    \n                                        draft_nodes:         Array\n\n                                    \n                                \n\n\n                                    \n                                        \n                                            Type :         Array\n\n                                        \n                                    \n\n\n\n\n\n                        \n                    \n                    \n                        \n                                \n                                    \n                                        \n                                        filename\n                                            \n                                                \n                                            \n                                        \n                                    \n                                \n                                \n                                    \n                                        filename:         string\n\n                                    \n                                \n\n\n                                    \n                                        \n                                            Type :         string\n\n                                        \n                                    \n\n\n\n\n\n                        \n                    \n                    \n                        \n                                \n                                    \n                                        \n                                        nodes\n                                            \n                                                \n                                            \n                                        \n                                    \n                                \n                                \n                                    \n                                        nodes:         Array\n\n                                    \n                                \n\n\n                                    \n                                        \n                                            Type :         Array\n\n                                        \n                                    \n\n\n\n\n\n                        \n                    \n                    \n                        \n                                \n                                    \n                                        \n                                        ops\n                                            \n                                                \n                                            \n                                        \n                                    \n                                \n                                \n                                    \n                                        ops:         Array\n\n                                    \n                                \n\n\n                                    \n                                        \n                                            Type :         Array\n\n                                        \n                                    \n\n\n\n\n\n                        \n                    \n                    \n                        \n                                \n                                    \n                                        \n                                        scale\n                                            \n                                                \n                                            \n                                        \n                                    \n                                \n                                \n                                    \n                                        scale:         number\n\n                                    \n                                \n\n\n                                    \n                                        \n                                            Type :         number\n\n                                        \n                                    \n\n\n\n\n\n                        \n                    \n                    \n                        \n                                \n                                    \n                                        \n                                        treenodes\n                                            \n                                                \n                                            \n                                        \n                                    \n                                \n                                \n                                    \n                                        treenodes:         Array\n\n                                    \n                                \n\n\n                                    \n                                        \n                                            Type :         Array\n\n                                        \n                                    \n\n\n\n\n\n                        \n                    \n                    \n                        \n                                \n                                    \n                                        \n                                        version\n                                            \n                                                \n                                            \n                                        \n                                    \n                                \n                                \n                                    \n                                        version:         string\n\n                                    \n                                \n\n\n                                    \n                                        \n                                            Type :         string\n\n                                        \n                                    \n\n\n\n\n\n                        \n                    \n                    \n                        \n                                \n                                    \n                                        \n                                        workspace\n                                            \n                                                \n                                            \n                                        \n                                    \n                                \n                                \n                                    \n                                        workspace:         any\n\n                                    \n                                \n\n\n                                    \n                                        \n                                            Type :         any\n\n                                        \n                                    \n\n\n\n\n\n                        \n                    \n            \n    \n\n\n    \n        import { Draft } from './drafts';\nimport { Loom, LoomSettings } from './looms';\nimport { Shuttle } from '../shuttle';\nimport { Note } from '../../provider/notes.service';\nimport { Bounds } from './screenlayout';\n\n/****** OBJECTS/TYPES FOR LOADING AND SAVING FILES *****/\n\n/**\n * holds data about each node/component in a form to easily load.\n * @param node_id the id of this node within the tree\n * @param type the type of node\n * @param bounds the screen position and size data for this node\n */\nexport interface NodeComponentProxy {\n    node_id: number,\n    type: string,\n    bounds: Bounds\n  }\n  \n  /**\n   * stores a sparce version of a tree node for easy reloading\n   * @param node the node id this treenode refers too\n   * @param parent the node id of the parent node for this treenode\n   * @param inputs an array of treenode ids for all values coming into this node\n   * @param outputs an array of treenode ids for all downstream functions \n   */\n   export interface TreeNodeProxy {\n    node: number,\n    parent: number; \n    inputs: Array;\n    outputs: Array; \n   }\n  \n    /**\n    * holds data about each draft component in a compressed form \n    * @param draft_id the draft id associated with this node (if available)\n   * @param draft_visible a boolean to state if this node is visible or not. \n   * @param draft_name a string representing a user defined name\n   * @param draft this will only export if the draft is a seed draft\n   * @param loom this will only export if the draft is a seed draft \n   * @param loom_settings the associated loom settings on this node, if present\n    */\n  \n    export interface DraftNodeProxy {\n      node_id: number;\n      draft_id: number;\n      draft_name: string;\n      draft: Draft;\n      draft_visible: boolean;\n      loom: Loom,\n      loom_settings: LoomSettings;\n    }\n  \n  /**\n    * a sparce form of an operaction component to use for saving\n    * @param node_id the node id this object refers too\n    * @param name the name of the operation at this node\n    * @param params the list of input parameters to this operation\n    * @param inlets the let of inlets and associated values \n    */\n  export interface OpComponentProxy {\n    node_id: number,\n    name: string,\n    params: Array, \n    inlets: Array;\n  }\n  \n  \n   /**\n    * describes the data from the workspace that is saved.\n    */\n   export interface SaveObj {\n    version: string,\n    workspace: any,\n    type: string,\n    nodes: Array,\n    tree: Array,\n    draft_nodes: Array,\n    ops: Array,\n    notes: Array,\n    materials: Array,\n    scale: number\n   }\n  \n  export interface FileObj {\n   version: string,\n   workspace: any,\n   filename: string,\n   nodes: Array,\n   treenodes: Array,\n   draft_nodes: Array,\n   ops: Array\n   scale: number\n  }\n  \n  export interface StatusMessage {\n    id: number,\n    message: string,\n    success: boolean\n  }\n  \n  export interface LoadResponse {\n    data: FileObj,\n    status: number;\n  }\n  \n  export interface Fileloader {\n    ada: (filename: string, data: any) => Promise,\n    //wif: (filename: string, data: any) => Promise,\n    //bmp: (filename: string, data: any) => Promise,\n    //jpg: (filename: string, data: any) => Promise,\n    form: (data: any) => Promise}\n  \n  export interface FileSaver {\n    ada: (type: string, for_timeline:boolean, current_scale: number) => Promise,\n    //wif: (draft: Draft, loom: Loom) => Promise,\n    bmp: (canvas: HTMLCanvasElement) => Promise,\n    jpg: (canvas: HTMLCanvasElement) => Promise\n  }\n    \n\n\n\n\n\n\n\n\n\n                   \n    \n         results matching \"\"\n        \n    \n    \n        No results matching \"\"\n    \n\n"},"interfaces/FileSaver.html":{"url":"interfaces/FileSaver.html","title":"interface - FileSaver","body":"\n                   \n\n\n\n\n\n\n\n\n\n\n\n\n\n\n  Interfaces\n  \n  FileSaver\n\n\n\n        \n            Info\n        \n        \n            Source\n        \n\n\n\n    \n        \n            File\n        \n        \n            src/app/core/model/datatypes/files.ts\n        \n\n\n\n\n        \n            Index\n            \n                \n                    \n                        \n                            Properties\n                        \n                    \n                    \n                        \n                            \n                                \n                                        \n                                            ada\n                                        \n                                \n                                \n                                        \n                                            bmp\n                                        \n                                \n                                \n                                        \n                                            jpg\n                                        \n                                \n                            \n                        \n                    \n                \n            \n        \n\n\n\n            \n                Properties\n                    \n                        \n                                \n                                    \n                                        \n                                        ada\n                                            \n                                                \n                                            \n                                        \n                                    \n                                \n                                \n                                    \n                                        ada:         function\n\n                                    \n                                \n\n\n                                    \n                                        \n                                            Type :         function\n\n                                        \n                                    \n\n\n\n\n\n                        \n                    \n                    \n                        \n                                \n                                    \n                                        \n                                        bmp\n                                            \n                                                \n                                            \n                                        \n                                    \n                                \n                                \n                                    \n                                        bmp:         function\n\n                                    \n                                \n\n\n                                    \n                                        \n                                            Type :         function\n\n                                        \n                                    \n\n\n\n\n\n                        \n                    \n                    \n                        \n                                \n                                    \n                                        \n                                        jpg\n                                            \n                                                \n                                            \n                                        \n                                    \n                                \n                                \n                                    \n                                        jpg:         function\n\n                                    \n                                \n\n\n                                    \n                                        \n                                            Type :         function\n\n                                        \n                                    \n\n\n\n\n\n                        \n                    \n            \n    \n\n\n    \n        import { Draft } from './drafts';\nimport { Loom, LoomSettings } from './looms';\nimport { Shuttle } from '../shuttle';\nimport { Note } from '../../provider/notes.service';\nimport { Bounds } from './screenlayout';\n\n/****** OBJECTS/TYPES FOR LOADING AND SAVING FILES *****/\n\n/**\n * holds data about each node/component in a form to easily load.\n * @param node_id the id of this node within the tree\n * @param type the type of node\n * @param bounds the screen position and size data for this node\n */\nexport interface NodeComponentProxy {\n    node_id: number,\n    type: string,\n    bounds: Bounds\n  }\n  \n  /**\n   * stores a sparce version of a tree node for easy reloading\n   * @param node the node id this treenode refers too\n   * @param parent the node id of the parent node for this treenode\n   * @param inputs an array of treenode ids for all values coming into this node\n   * @param outputs an array of treenode ids for all downstream functions \n   */\n   export interface TreeNodeProxy {\n    node: number,\n    parent: number; \n    inputs: Array;\n    outputs: Array; \n   }\n  \n    /**\n    * holds data about each draft component in a compressed form \n    * @param draft_id the draft id associated with this node (if available)\n   * @param draft_visible a boolean to state if this node is visible or not. \n   * @param draft_name a string representing a user defined name\n   * @param draft this will only export if the draft is a seed draft\n   * @param loom this will only export if the draft is a seed draft \n   * @param loom_settings the associated loom settings on this node, if present\n    */\n  \n    export interface DraftNodeProxy {\n      node_id: number;\n      draft_id: number;\n      draft_name: string;\n      draft: Draft;\n      draft_visible: boolean;\n      loom: Loom,\n      loom_settings: LoomSettings;\n    }\n  \n  /**\n    * a sparce form of an operaction component to use for saving\n    * @param node_id the node id this object refers too\n    * @param name the name of the operation at this node\n    * @param params the list of input parameters to this operation\n    * @param inlets the let of inlets and associated values \n    */\n  export interface OpComponentProxy {\n    node_id: number,\n    name: string,\n    params: Array, \n    inlets: Array;\n  }\n  \n  \n   /**\n    * describes the data from the workspace that is saved.\n    */\n   export interface SaveObj {\n    version: string,\n    workspace: any,\n    type: string,\n    nodes: Array,\n    tree: Array,\n    draft_nodes: Array,\n    ops: Array,\n    notes: Array,\n    materials: Array,\n    scale: number\n   }\n  \n  export interface FileObj {\n   version: string,\n   workspace: any,\n   filename: string,\n   nodes: Array,\n   treenodes: Array,\n   draft_nodes: Array,\n   ops: Array\n   scale: number\n  }\n  \n  export interface StatusMessage {\n    id: number,\n    message: string,\n    success: boolean\n  }\n  \n  export interface LoadResponse {\n    data: FileObj,\n    status: number;\n  }\n  \n  export interface Fileloader {\n    ada: (filename: string, data: any) => Promise,\n    //wif: (filename: string, data: any) => Promise,\n    //bmp: (filename: string, data: any) => Promise,\n    //jpg: (filename: string, data: any) => Promise,\n    form: (data: any) => Promise}\n  \n  export interface FileSaver {\n    ada: (type: string, for_timeline:boolean, current_scale: number) => Promise,\n    //wif: (draft: Draft, loom: Loom) => Promise,\n    bmp: (canvas: HTMLCanvasElement) => Promise,\n    jpg: (canvas: HTMLCanvasElement) => Promise\n  }\n    \n\n\n\n\n\n\n\n\n\n                   \n    \n         results matching \"\"\n        \n    \n    \n        No results matching \"\"\n    \n\n"},"interfaces/Fileloader.html":{"url":"interfaces/Fileloader.html","title":"interface - Fileloader","body":"\n                   \n\n\n\n\n\n\n\n\n\n\n\n\n\n\n  Interfaces\n  \n  Fileloader\n\n\n\n        \n            Info\n        \n        \n            Source\n        \n\n\n\n    \n        \n            File\n        \n        \n            src/app/core/model/datatypes/files.ts\n        \n\n\n\n\n        \n            Index\n            \n                \n                    \n                        \n                            Properties\n                        \n                    \n                    \n                        \n                            \n                                \n                                        \n                                            ada\n                                        \n                                \n                                \n                                        \n                                            form\n                                        \n                                \n                            \n                        \n                    \n                \n            \n        \n\n\n\n            \n                Properties\n                    \n                        \n                                \n                                    \n                                        \n                                        ada\n                                            \n                                                \n                                            \n                                        \n                                    \n                                \n                                \n                                    \n                                        ada:         function\n\n                                    \n                                \n\n\n                                    \n                                        \n                                            Type :         function\n\n                                        \n                                    \n\n\n\n\n\n                        \n                    \n                    \n                        \n                                \n                                    \n                                        \n                                        form\n                                            \n                                                \n                                            \n                                        \n                                    \n                                \n                                \n                                    \n                                        form:         function\n\n                                    \n                                \n\n\n                                    \n                                        \n                                            Type :         function\n\n                                        \n                                    \n\n\n\n\n\n                        \n                    \n            \n    \n\n\n    \n        import { Draft } from './drafts';\nimport { Loom, LoomSettings } from './looms';\nimport { Shuttle } from '../shuttle';\nimport { Note } from '../../provider/notes.service';\nimport { Bounds } from './screenlayout';\n\n/****** OBJECTS/TYPES FOR LOADING AND SAVING FILES *****/\n\n/**\n * holds data about each node/component in a form to easily load.\n * @param node_id the id of this node within the tree\n * @param type the type of node\n * @param bounds the screen position and size data for this node\n */\nexport interface NodeComponentProxy {\n    node_id: number,\n    type: string,\n    bounds: Bounds\n  }\n  \n  /**\n   * stores a sparce version of a tree node for easy reloading\n   * @param node the node id this treenode refers too\n   * @param parent the node id of the parent node for this treenode\n   * @param inputs an array of treenode ids for all values coming into this node\n   * @param outputs an array of treenode ids for all downstream functions \n   */\n   export interface TreeNodeProxy {\n    node: number,\n    parent: number; \n    inputs: Array;\n    outputs: Array; \n   }\n  \n    /**\n    * holds data about each draft component in a compressed form \n    * @param draft_id the draft id associated with this node (if available)\n   * @param draft_visible a boolean to state if this node is visible or not. \n   * @param draft_name a string representing a user defined name\n   * @param draft this will only export if the draft is a seed draft\n   * @param loom this will only export if the draft is a seed draft \n   * @param loom_settings the associated loom settings on this node, if present\n    */\n  \n    export interface DraftNodeProxy {\n      node_id: number;\n      draft_id: number;\n      draft_name: string;\n      draft: Draft;\n      draft_visible: boolean;\n      loom: Loom,\n      loom_settings: LoomSettings;\n    }\n  \n  /**\n    * a sparce form of an operaction component to use for saving\n    * @param node_id the node id this object refers too\n    * @param name the name of the operation at this node\n    * @param params the list of input parameters to this operation\n    * @param inlets the let of inlets and associated values \n    */\n  export interface OpComponentProxy {\n    node_id: number,\n    name: string,\n    params: Array, \n    inlets: Array;\n  }\n  \n  \n   /**\n    * describes the data from the workspace that is saved.\n    */\n   export interface SaveObj {\n    version: string,\n    workspace: any,\n    type: string,\n    nodes: Array,\n    tree: Array,\n    draft_nodes: Array,\n    ops: Array,\n    notes: Array,\n    materials: Array,\n    scale: number\n   }\n  \n  export interface FileObj {\n   version: string,\n   workspace: any,\n   filename: string,\n   nodes: Array,\n   treenodes: Array,\n   draft_nodes: Array,\n   ops: Array\n   scale: number\n  }\n  \n  export interface StatusMessage {\n    id: number,\n    message: string,\n    success: boolean\n  }\n  \n  export interface LoadResponse {\n    data: FileObj,\n    status: number;\n  }\n  \n  export interface Fileloader {\n    ada: (filename: string, data: any) => Promise,\n    //wif: (filename: string, data: any) => Promise,\n    //bmp: (filename: string, data: any) => Promise,\n    //jpg: (filename: string, data: any) => Promise,\n    form: (data: any) => Promise}\n  \n  export interface FileSaver {\n    ada: (type: string, for_timeline:boolean, current_scale: number) => Promise,\n    //wif: (draft: Draft, loom: Loom) => Promise,\n    bmp: (canvas: HTMLCanvasElement) => Promise,\n    jpg: (canvas: HTMLCanvasElement) => Promise\n  }\n    \n\n\n\n\n\n\n\n\n\n                   \n    \n         results matching \"\"\n        \n    \n    \n        No results matching \"\"\n    \n\n"},"interfaces/IOTuple.html":{"url":"interfaces/IOTuple.html","title":"interface - IOTuple","body":"\n                   \n\n\n\n\n\n\n\n\n\n\n\n\n\n\n  Interfaces\n  \n  IOTuple\n\n\n\n        \n            Info\n        \n        \n            Source\n        \n\n\n\n    \n        \n            File\n        \n        \n            src/app/core/model/datatypes/tree.ts\n        \n\n\n            \n                Description\n            \n            \n                a type to store input and output information for nodes that takes multiple node inputs and outputs into account.\neach node stores the node it gets as input and output and the inlet/outlet that node enter into on itself.\nconnections will have inlet/outlet indexes of 0, 0 (they cannot connect ot multiple things)\ndrafts will have inset/outout indexes of 0, 0 (they can only have one parent)\nops will have multiple inlets and outlets. For example, an input of (2, 1) means that treenode 2 is connected to inlet 1.\n\n            \n\n\n        \n            Index\n            \n                \n                    \n                        \n                            Properties\n                        \n                    \n                    \n                        \n                            \n                                \n                                        \n                                            ndx\n                                        \n                                \n                                \n                                        \n                                            tn\n                                        \n                                \n                            \n                        \n                    \n                \n            \n        \n\n\n\n            \n                Properties\n                    \n                        \n                                \n                                    \n                                        \n                                        ndx\n                                            \n                                                \n                                            \n                                        \n                                    \n                                \n                                \n                                    \n                                        ndx:         number\n\n                                    \n                                \n\n\n                                    \n                                        \n                                            Type :         number\n\n                                        \n                                    \n\n\n\n\n\n                        \n                    \n                    \n                        \n                                \n                                    \n                                        \n                                        tn\n                                            \n                                                \n                                            \n                                        \n                                    \n                                \n                                \n                                    \n                                        tn:         TreeNode\n\n                                    \n                                \n\n\n                                    \n                                        \n                                            Type :         TreeNode\n\n                                        \n                                    \n\n\n\n\n\n                        \n                    \n            \n    \n\n\n    \n        import { ViewRef } from '@angular/core';\nimport { ConnectionComponent } from \"../../../mixer/palette/connection/connection.component\";\nimport { OperationComponent } from \"../../../mixer/palette/operation/operation.component\";\nimport { SubdraftComponent } from \"../../../mixer/palette/subdraft/subdraft.component\";\n\nimport { Draft } from './drafts';\nimport { Loom, LoomSettings } from './looms';\n\n/****************** OBJECTS/TYPES RELATED to OPERATION TREE *****************/\n\n/**\n * this stores a reference to a component on the palette with its id and some\n * @param type is the type of component'\n * @param view_id is ndx to reference to this object in the ViewComponentRef (for deleting)\n * @param id is a unique id linked forever to this component \n * @param component is a reference to the component object\n * @param dirty describes if this needs to be recalcuated or redrawn \n */\n type BaseNode = {\n    type: 'draft' | 'op' | 'cxn',\n    ref: ViewRef,\n    id: number, //this will be unique for every instance\n    component: SubdraftComponent | OperationComponent | ConnectionComponent,\n    dirty: boolean\n  }\n  \n  \n  /**\n   * an OpNode is an extension of BaseNode that includes additional params\n   * @param name the name of the operation at this node\n   * @param params an array of the current param values at this node\n   * @param inlets an array of the inlet values at this node\n   */\n  export type OpNode = BaseNode & {\n    name: string,\n    params: Array\n    inlets: Array;\n   }\n  \n  \n   /**\n   * a DraftNode is an extension of BaseNode that includes additional params\n   * @param draft the active draft at this node\n   * @param loom the loom associated with the draft at this node\n   * @param loom_settings the settings associted with the loom at this node\n   */\n   export type DraftNode = BaseNode & {\n    draft: Draft,\n    loom: Loom,\n    loom_settings: LoomSettings\n   }\n  \n  \n  /**\n   * Allows one to use Node as shorthand for any of these types of nodes\n   */\n   export type Node = BaseNode | OpNode | DraftNode;\n  \n  \n   /**\n    * a type to store input and output information for nodes that takes multiple node inputs and outputs into account.\n    * each node stores the node it gets as input and output and the inlet/outlet that node enter into on itself. \n    * connections will have inlet/outlet indexes of 0, 0 (they cannot connect ot multiple things)\n    * drafts will have inset/outout indexes of 0, 0 (they can only have one parent)\n    * ops will have multiple inlets and outlets. For example, an input of (2, 1) means that treenode 2 is connected to inlet 1. \n    * @param treenode - the treenode that this input or output goes towards\n    * @param ndx - which ndx on the said treenodes does this connect to specifically\n    */\n   export interface IOTuple {\n     tn: TreeNode,\n     ndx: number\n   }\n  \n  /**\n   * A tree node stores relationships between the components created by operations\n    * @param node: is a reference to the node object stored in the tree. \n    * @param parent links to the treenode that \"created\" this node or null if it was created by the user \n    * @param inputs a list of TreeNodes that are used as input to this TreeNode with an idex to which input they belong to\n    * @param outputs a list of TreeNodes created by this node or specified by the user\n    * Rules: \n    *   Operations can have many inputs and many outputs \n    *   Subdrafts can only have one input and one output (for now)\n    *   \n  */\nexport interface TreeNode {\n    node: Node,\n    parent: TreeNode,\n    inputs: Array,\n    outputs: Array\n}\n    \n\n\n\n\n\n\n\n\n\n                   \n    \n         results matching \"\"\n        \n    \n    \n        No results matching \"\"\n    \n\n"},"components/ImageComponent.html":{"url":"components/ImageComponent.html","title":"component - ImageComponent","body":"\n                   \n\n\n\n\n\n  Components\n  \n  ImageComponent\n\n\n\n        \n            Info\n        \n        \n            Source\n        \n        \n            Template\n        \n        \n            Styles\n        \n        \n            DOM Tree\n        \n\n\n\n    \n    File\n\n\n    src/app/mixer/palette/image/image.component.ts\n\n\n\n\n\n    \n        Implements\n    \n    \n                    OnInit\n    \n\n\n\n    Metadata\n    \n        \n\n\n\n\n\n\n\n\n\n\n\n            \n                selector\n                app-image\n            \n\n            \n                styleUrls\n                ./image.component.scss\n            \n\n\n\n            \n                templateUrl\n                ./image.component.html\n            \n\n\n\n\n\n\n\n\n        \n    \n\n\n    \n    Index\n    \n        \n\n                \n                    \n                        Methods\n                    \n                \n                \n                    \n                        \n                            \n                                ngOnInit\n                            \n                        \n                    \n                \n\n\n\n\n\n        \n    \n\n\n    \n    Constructor\n        \n            \n                \n                    \nconstructor()\n                    \n                \n                        \n                            \n                                Defined in src/app/mixer/palette/image/image.component.ts:8\n                            \n                        \n\n            \n        \n\n\n\n\n\n\n    \n    \n    \n        Methods\n    \n    \n        \n            \n                \n                    \n                    \n                        ngOnInit\n                        \n                    \n                \n            \n            \n                \nngOnInit()\n                \n            \n\n\n            \n                \n                    Defined in src/app/mixer/palette/image/image.component.ts:12\n                \n            \n\n\n            \n                \n\n                    \n                        Returns :         void\n\n                    \n                \n            \n        \n    \n\n\n\n\n\n    \n        import { Component, OnInit } from '@angular/core';\n\n@Component({\n  selector: 'app-image',\n  templateUrl: './image.component.html',\n  styleUrls: ['./image.component.scss']\n})\nexport class ImageComponent implements OnInit {\n\n  constructor() { }\n\n  ngOnInit() {\n  }\n\n}\n\n    \n\n    \n        \n    \n\n    \n    \n        colortable\n        number of drafts/color groups\n    \n\n    \n\n    \n                \n                    ./image.component.scss\n                \n                \n    \n\n    \n        \n        \n            \n                Legend\n            \n            \n                Html element\n            \n            \n                Component\n            \n            \n                Html element with directive\n            \n        \n    \n\n    \n\n\n\n\n\n\n        var COMPONENT_TEMPLATE = '                    colortable        number of drafts/color groups    '\n    var COMPONENTS = [{'name': 'ConnectionComponent', 'selector': 'app-connection'},{'name': 'DraftdetailComponent', 'selector': 'app-draftdetail'},{'name': 'ImageComponent', 'selector': 'app-image'},{'name': 'InletComponent', 'selector': 'app-inlet'},{'name': 'MixerComponent', 'selector': 'app-mixer'},{'name': 'MixerViewComponent', 'selector': 'app-mixerview'},{'name': 'NoteComponent', 'selector': 'app-note'},{'name': 'OperationComponent', 'selector': 'app-operation'},{'name': 'OpHelpModal', 'selector': 'app-ophelp'},{'name': 'OpsComponent', 'selector': 'app-ops'},{'name': 'OpSequencerComponent', 'selector': 'app-op-sequencer'},{'name': 'PaletteComponent', 'selector': 'app-palette'},{'name': 'ParameterComponent', 'selector': 'app-parameter'},{'name': 'PlayerComponent', 'selector': 'app-player'},{'name': 'SnackbarComponent', 'selector': 'app-snackbar'},{'name': 'SubdraftComponent', 'selector': 'app-subdraft'},{'name': 'VirtualPedalsComponent', 'selector': 'app-virtual-pedals'},{'name': 'WeavingStateComponent', 'selector': 'app-weaving-state'}];\n    var DIRECTIVES = [{'name': 'MarqueeComponent', 'selector': 'app-marquee'},{'name': 'SelectionComponent', 'selector': 'app-selection'}];\n    var ACTUAL_COMPONENT = {'name': 'ImageComponent'};\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n                   \n    \n         results matching \"\"\n        \n    \n    \n        No results matching \"\"\n    \n\n"},"interfaces/Ink.html":{"url":"interfaces/Ink.html","title":"interface - Ink","body":"\n                   \n\n\n\n\n\n\n\n\n\n\n\n\n\n\n  Interfaces\n  \n  Ink\n\n\n\n        \n            Info\n        \n        \n            Source\n        \n\n\n\n    \n        \n            File\n        \n        \n            src/app/mixer/provider/ink.service.ts\n        \n\n\n\n\n        \n            Index\n            \n                \n                    \n                        \n                            Properties\n                        \n                    \n                    \n                        \n                            \n                                \n                                        \n                                            dx\n                                        \n                                \n                                \n                                        \n                                            icon\n                                        \n                                \n                                \n                                        \n                                            selected\n                                        \n                                \n                                \n                                        \n                                            uses_mask\n                                        \n                                \n                                \n                                        \n                                            value\n                                        \n                                \n                                \n                                        \n                                            viewValue\n                                        \n                                \n                            \n                        \n                    \n                \n            \n        \n\n\n\n            \n                Properties\n                    \n                        \n                                \n                                    \n                                        \n                                        dx\n                                            \n                                                \n                                            \n                                        \n                                    \n                                \n                                \n                                    \n                                        dx:         string\n\n                                    \n                                \n\n\n                                    \n                                        \n                                            Type :         string\n\n                                        \n                                    \n\n\n\n\n\n                        \n                    \n                    \n                        \n                                \n                                    \n                                        \n                                        icon\n                                            \n                                                \n                                            \n                                        \n                                    \n                                \n                                \n                                    \n                                        icon:         string\n\n                                    \n                                \n\n\n                                    \n                                        \n                                            Type :         string\n\n                                        \n                                    \n\n\n\n\n\n                        \n                    \n                    \n                        \n                                \n                                    \n                                        \n                                        selected\n                                            \n                                                \n                                            \n                                        \n                                    \n                                \n                                \n                                    \n                                        selected:         boolean\n\n                                    \n                                \n\n\n                                    \n                                        \n                                            Type :         boolean\n\n                                        \n                                    \n\n\n\n\n\n                        \n                    \n                    \n                        \n                                \n                                    \n                                        \n                                        uses_mask\n                                            \n                                                \n                                            \n                                        \n                                    \n                                \n                                \n                                    \n                                        uses_mask:         boolean\n\n                                    \n                                \n\n\n                                    \n                                        \n                                            Type :         boolean\n\n                                        \n                                    \n\n\n\n\n\n                        \n                    \n                    \n                        \n                                \n                                    \n                                        \n                                        value\n                                            \n                                                \n                                            \n                                        \n                                    \n                                \n                                \n                                    \n                                        value:         string\n\n                                    \n                                \n\n\n                                    \n                                        \n                                            Type :         string\n\n                                        \n                                    \n\n\n\n\n\n                        \n                    \n                    \n                        \n                                \n                                    \n                                        \n                                        viewValue\n                                            \n                                                \n                                            \n                                        \n                                    \n                                \n                                \n                                    \n                                        viewValue:         string\n\n                                    \n                                \n\n\n                                    \n                                        \n                                            Type :         string\n\n                                        \n                                    \n\n\n\n\n\n                        \n                    \n            \n    \n\n\n    \n        import { Injectable } from '@angular/core';\n\n\n\ninterface Ink{\n  value: string;\n  viewValue: string;\n  dx: string;\n  icon: string;\n  selected: boolean;\n  uses_mask: boolean;\n}\n\n\n@Injectable({\n  providedIn: 'root'\n})\nexport class InkService {\n  private inks: Array;\n  private selected: Ink;\n\n\n  constructor() { \n\n\n    this.inks = [\n      {value: 'neq', viewValue: 'Reversing Ink', dx: \"REVERSING INK compares this pattern with what is underneight and draws black square when they are not equal\", icon: \"fas fa-adjust\", selected: false, uses_mask:false},\n      {value: 'up', viewValue: 'Setting Ink', dx: \"SETTING INK sets this pattern within the draft no matter what is under it\", icon: \"fas fa-square\",  selected: false, uses_mask:false},\n      {value: 'down', viewValue: 'Erasing Ink', dx: \"ERASING INK places all the heddle downs atop the draft underneith it\", icon: \"far fa-square\",  selected: false, uses_mask:false},\n      {value: 'unset', viewValue: 'Removing Ink', dx: \"REMOVING INK removes the use of this heddle in the draft (for shape and inlay weaving)\", icon: \"fas fa-times\", selected: false, uses_mask:false},\n      {value: 'and', viewValue: 'Masking Ink', dx: \"MASKING INK only reveals bottom pattern in areas where this pattern is black\", icon: \"fas fa-mask\", selected: false, uses_mask:true},\n     {value: 'or', viewValue: 'Overlaying Ink', dx: \"OVERLAYING INK copies all black pattern cells atop the draft\", icon: \"fas fa-plus\", selected: false, uses_mask:false}\n    ];\n  \n    this.select('neq');\n\n    \n  \n  }\n\n  getInks():Array{\n    return this.inks;\n  }\n\n  selectedHasMask():boolean{\n    const mode:Ink = this.getInk(this.getSelected());\n    return mode.uses_mask;\n  }\n\n  /**\n   * A function to retreive an ink by name. \n   * @param name the name of the ink we're looking to retreive\n   * @returns the Ink associated with that name, or null if nothing was found\n   */\n\n   getInk(name: string): Ink {\n    let found: Ink = null;\n \n    this.inks.forEach( ink => {\n       if(ink.value === name) found =  ink;\n    });\n    return found;\n   }\n \n   /**\n    * sets false to the selection parameter on all the modes. \n    */\n   clearSelection(){\n     this.selected = null\n   }\n \n /**\n  * clears previous selections and selects ink associated with name\n  * @param name a string corresponding to the name of this ink\n  * @returns boolean cooresponding to whether or not a selection was made \n  */\n   select(name: string): boolean{\n \n     let found: boolean = false;\n     this.clearSelection();\n \n     this.inks.forEach(ink => {\n       if(ink.value === name){\n         ink.selected = true;\n         found = true;\n         this.selected = ink;\n       } else{\n         ink.selected = false;\n       }\n    });\n \n    return found;\n   }\n \n \n   /**\n    * Get the current ink name that is selected\n    * @returns returns the selected ink name\n    */\n   getSelected():string{\n     return this.selected.value;\n   }\n \n   /**\n    * checks if a user specified ink is selected\n    * @param name the name of the mode we are asking about\n    * @returns boolean describing if it was selected or not\n    */\n   isSelected(name:string):boolean{\n     return(name == this.selected.value);\n   }\n}\n\n    \n\n\n\n\n\n\n\n\n\n                   \n    \n         results matching \"\"\n        \n    \n    \n        No results matching \"\"\n    \n\n"},"injectables/InkService.html":{"url":"injectables/InkService.html","title":"injectable - InkService","body":"\n                   \n\n\n\n\n\n\n\n\n\n  Injectables\n  InkService\n\n\n\n        \n            Info\n        \n        \n            Source\n        \n\n\n\n    \n        \n            File\n        \n        \n            src/app/mixer/provider/ink.service.ts\n        \n\n\n\n\n\n            \n    Index\n    \n        \n                \n                    \n                        Properties\n                    \n                \n                \n                    \n                        \n                            \n                                    Private\n                                inks\n                            \n                            \n                                    Private\n                                selected\n                            \n                        \n                    \n                \n\n                \n                    \n                        Methods\n                    \n                \n                \n                    \n                        \n                            \n                                clearSelection\n                            \n                            \n                                getInk\n                            \n                            \n                                getInks\n                            \n                            \n                                getSelected\n                            \n                            \n                                isSelected\n                            \n                            \n                                select\n                            \n                            \n                                selectedHasMask\n                            \n                        \n                    \n                \n\n\n\n\n\n        \n    \n\n\n            \n    Constructor\n        \n            \n                \n                    \nconstructor()\n                    \n                \n                        \n                            \n                                Defined in src/app/mixer/provider/ink.service.ts:20\n                            \n                        \n\n            \n        \n\n\n            \n    \n    \n        Methods\n    \n    \n        \n            \n                \n                    \n                    \n                        clearSelection\n                        \n                    \n                \n            \n            \n                \nclearSelection()\n                \n            \n\n\n            \n                \n                    Defined in src/app/mixer/provider/ink.service.ts:68\n                \n            \n\n\n            \n                \n                    sets false to the selection parameter on all the modes.\n\n\n                    \n                        Returns :         void\n\n                    \n                \n            \n        \n    \n    \n        \n            \n                \n                    \n                    \n                        getInk\n                        \n                    \n                \n            \n            \n                \ngetInk(name: string)\n                \n            \n\n\n            \n                \n                    Defined in src/app/mixer/provider/ink.service.ts:56\n                \n            \n\n\n            \n                \n                    A function to retreive an ink by name.\n\n\n                    \n                        Parameters :\n                        \n                        \n                            \n                                \n                                    Name\n                                    Type\n                                    Optional\n                                    Description\n                                \n                            \n                            \n                                \n                                    name\n                                    \n                                                string\n                                    \n\n                                    \n                                        No\n                                    \n\n\n                                    \n                                        the name of the ink we're looking to retreive\n\n                                    \n                                \n                            \n                        \n                    \n                    \n                    \n                    \n                        Returns :         Ink\n\n                    \n                    \n                        the Ink associated with that name, or null if nothing was found\n\n                    \n                \n            \n        \n    \n    \n        \n            \n                \n                    \n                    \n                        getInks\n                        \n                    \n                \n            \n            \n                \ngetInks()\n                \n            \n\n\n            \n                \n                    Defined in src/app/mixer/provider/ink.service.ts:41\n                \n            \n\n\n            \n                \n\n                    \n                        Returns :         Array\n\n                    \n                \n            \n        \n    \n    \n        \n            \n                \n                    \n                    \n                        getSelected\n                        \n                    \n                \n            \n            \n                \ngetSelected()\n                \n            \n\n\n            \n                \n                    Defined in src/app/mixer/provider/ink.service.ts:100\n                \n            \n\n\n            \n                \n                    Get the current ink name that is selected\n\n\n                    \n                    \n                    \n                        Returns :         string\n\n                    \n                    \n                        returns the selected ink name\n\n                    \n                \n            \n        \n    \n    \n        \n            \n                \n                    \n                    \n                        isSelected\n                        \n                    \n                \n            \n            \n                \nisSelected(name: string)\n                \n            \n\n\n            \n                \n                    Defined in src/app/mixer/provider/ink.service.ts:109\n                \n            \n\n\n            \n                \n                    checks if a user specified ink is selected\n\n\n                    \n                        Parameters :\n                        \n                        \n                            \n                                \n                                    Name\n                                    Type\n                                    Optional\n                                    Description\n                                \n                            \n                            \n                                \n                                    name\n                                    \n                                                string\n                                    \n\n                                    \n                                        No\n                                    \n\n\n                                    \n                                        the name of the mode we are asking about\n\n                                    \n                                \n                            \n                        \n                    \n                    \n                    \n                    \n                        Returns :         boolean\n\n                    \n                    \n                        boolean describing if it was selected or not\n\n                    \n                \n            \n        \n    \n    \n        \n            \n                \n                    \n                    \n                        select\n                        \n                    \n                \n            \n            \n                \nselect(name: string)\n                \n            \n\n\n            \n                \n                    Defined in src/app/mixer/provider/ink.service.ts:77\n                \n            \n\n\n            \n                \n                    clears previous selections and selects ink associated with name\n\n\n                    \n                        Parameters :\n                        \n                        \n                            \n                                \n                                    Name\n                                    Type\n                                    Optional\n                                    Description\n                                \n                            \n                            \n                                \n                                    name\n                                    \n                                                string\n                                    \n\n                                    \n                                        No\n                                    \n\n\n                                    \n                                        a string corresponding to the name of this ink\n\n                                    \n                                \n                            \n                        \n                    \n                    \n                    \n                    \n                        Returns :         boolean\n\n                    \n                    \n                        boolean cooresponding to whether or not a selection was made\n\n                    \n                \n            \n        \n    \n    \n        \n            \n                \n                    \n                    \n                        selectedHasMask\n                        \n                    \n                \n            \n            \n                \nselectedHasMask()\n                \n            \n\n\n            \n                \n                    Defined in src/app/mixer/provider/ink.service.ts:45\n                \n            \n\n\n            \n                \n\n                    \n                        Returns :         boolean\n\n                    \n                \n            \n        \n    \n\n            \n    \n    \n        Properties\n    \n    \n        \n            \n                \n                    \n                    \n                            Private\n                        inks\n                        \n                    \n                \n            \n                \n                    \n                        Type :         Array\n\n                    \n                \n                    \n                        \n                                Defined in src/app/mixer/provider/ink.service.ts:19\n                        \n                    \n\n\n        \n    \n    \n        \n            \n                \n                    \n                    \n                            Private\n                        selected\n                        \n                    \n                \n            \n                \n                    \n                        Type :         Ink\n\n                    \n                \n                    \n                        \n                                Defined in src/app/mixer/provider/ink.service.ts:20\n                        \n                    \n\n\n        \n    \n\n\n    \n\n\n    \n        import { Injectable } from '@angular/core';\n\n\n\ninterface Ink{\n  value: string;\n  viewValue: string;\n  dx: string;\n  icon: string;\n  selected: boolean;\n  uses_mask: boolean;\n}\n\n\n@Injectable({\n  providedIn: 'root'\n})\nexport class InkService {\n  private inks: Array;\n  private selected: Ink;\n\n\n  constructor() { \n\n\n    this.inks = [\n      {value: 'neq', viewValue: 'Reversing Ink', dx: \"REVERSING INK compares this pattern with what is underneight and draws black square when they are not equal\", icon: \"fas fa-adjust\", selected: false, uses_mask:false},\n      {value: 'up', viewValue: 'Setting Ink', dx: \"SETTING INK sets this pattern within the draft no matter what is under it\", icon: \"fas fa-square\",  selected: false, uses_mask:false},\n      {value: 'down', viewValue: 'Erasing Ink', dx: \"ERASING INK places all the heddle downs atop the draft underneith it\", icon: \"far fa-square\",  selected: false, uses_mask:false},\n      {value: 'unset', viewValue: 'Removing Ink', dx: \"REMOVING INK removes the use of this heddle in the draft (for shape and inlay weaving)\", icon: \"fas fa-times\", selected: false, uses_mask:false},\n      {value: 'and', viewValue: 'Masking Ink', dx: \"MASKING INK only reveals bottom pattern in areas where this pattern is black\", icon: \"fas fa-mask\", selected: false, uses_mask:true},\n     {value: 'or', viewValue: 'Overlaying Ink', dx: \"OVERLAYING INK copies all black pattern cells atop the draft\", icon: \"fas fa-plus\", selected: false, uses_mask:false}\n    ];\n  \n    this.select('neq');\n\n    \n  \n  }\n\n  getInks():Array{\n    return this.inks;\n  }\n\n  selectedHasMask():boolean{\n    const mode:Ink = this.getInk(this.getSelected());\n    return mode.uses_mask;\n  }\n\n  /**\n   * A function to retreive an ink by name. \n   * @param name the name of the ink we're looking to retreive\n   * @returns the Ink associated with that name, or null if nothing was found\n   */\n\n   getInk(name: string): Ink {\n    let found: Ink = null;\n \n    this.inks.forEach( ink => {\n       if(ink.value === name) found =  ink;\n    });\n    return found;\n   }\n \n   /**\n    * sets false to the selection parameter on all the modes. \n    */\n   clearSelection(){\n     this.selected = null\n   }\n \n /**\n  * clears previous selections and selects ink associated with name\n  * @param name a string corresponding to the name of this ink\n  * @returns boolean cooresponding to whether or not a selection was made \n  */\n   select(name: string): boolean{\n \n     let found: boolean = false;\n     this.clearSelection();\n \n     this.inks.forEach(ink => {\n       if(ink.value === name){\n         ink.selected = true;\n         found = true;\n         this.selected = ink;\n       } else{\n         ink.selected = false;\n       }\n    });\n \n    return found;\n   }\n \n \n   /**\n    * Get the current ink name that is selected\n    * @returns returns the selected ink name\n    */\n   getSelected():string{\n     return this.selected.value;\n   }\n \n   /**\n    * checks if a user specified ink is selected\n    * @param name the name of the mode we are asking about\n    * @returns boolean describing if it was selected or not\n    */\n   isSelected(name:string):boolean{\n     return(name == this.selected.value);\n   }\n}\n\n    \n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n                   \n    \n         results matching \"\"\n        \n    \n    \n        No results matching \"\"\n    \n\n"},"components/InletComponent.html":{"url":"components/InletComponent.html","title":"component - InletComponent","body":"\n                   \n\n\n\n\n\n  Components\n  \n  InletComponent\n\n\n\n        \n            Info\n        \n        \n            Source\n        \n        \n            Template\n        \n        \n            Styles\n        \n        \n            DOM Tree\n        \n\n\n\n    \n    File\n\n\n    src/app/mixer/palette/operation/inlet/inlet.component.ts\n\n\n\n\n\n    \n        Implements\n    \n    \n                    OnInit\n    \n\n\n\n    Metadata\n    \n        \n\n\n\n\n\n\n\n\n\n\n\n            \n                selector\n                app-inlet\n            \n\n            \n                styleUrls\n                ./inlet.component.scss\n            \n\n\n\n            \n                templateUrl\n                ./inlet.component.html\n            \n\n\n\n\n\n\n\n\n        \n    \n\n\n    \n    Index\n    \n        \n                \n                    \n                        Properties\n                    \n                \n                \n                    \n                        \n                            \n                                all_system_codes\n                            \n                            \n                                fc\n                            \n                            \n                                inlet\n                            \n                            \n                                number_opts\n                            \n                            \n                                opnode\n                            \n                            \n                                selectedValue\n                            \n                            \n                                textValidate\n                            \n                            \n                                    Public\n                                tree\n                            \n                        \n                    \n                \n\n                \n                    \n                        Methods\n                    \n                \n                \n                    \n                        \n                            \n                                getInputName\n                            \n                            \n                                inletChange\n                            \n                            \n                                inputSelected\n                            \n                            \n                                ngOnInit\n                            \n                            \n                                parseDefaultInletValue\n                            \n                            \n                                removeConnectionTo\n                            \n                        \n                    \n                \n\n                \n                    \n                        Inputs\n                    \n                \n                \n                    \n                        \n                            \n                                dynamic\n                            \n                            \n                                inletid\n                            \n                            \n                                opid\n                            \n                        \n                    \n                \n\n                \n                    \n                        Outputs\n                    \n                \n                \n                    \n                        \n                            \n                                onConnectionRemoved\n                            \n                            \n                                onInletChange\n                            \n                            \n                                onInputSelected\n                            \n                        \n                    \n                \n\n\n\n        \n    \n\n\n    \n    Constructor\n        \n            \n                \n                    \nconstructor(tree: TreeService, systems: SystemsService, ops: OperationService)\n                    \n                \n                        \n                            \n                                Defined in src/app/mixer/palette/operation/inlet/inlet.component.ts:32\n                            \n                        \n\n                \n                    \n                            \n                                    Parameters :\n                                    \n                                        \n                                            \n                                                Name\n                                                    Type\n                                                Optional\n                                            \n                                        \n                                        \n                                                \n                                                        tree\n                                                  \n                                                        \n                                                                        TreeService\n                                                        \n                                                  \n                                                    \n                                                            No\n                                                    \n                                                    \n                                                \n                                                \n                                                        systems\n                                                  \n                                                        \n                                                                        SystemsService\n                                                        \n                                                  \n                                                    \n                                                            No\n                                                    \n                                                    \n                                                \n                                                \n                                                        ops\n                                                  \n                                                        \n                                                                        OperationService\n                                                        \n                                                  \n                                                    \n                                                            No\n                                                    \n                                                    \n                                                \n                                        \n                                    \n                            \n                    \n                \n            \n        \n\n\n    \n    Inputs\n        \n            \n                \n                    \n                        \n                        dynamic\n                    \n                \n                \n                    \n                        Type :         boolean\n\n                    \n                \n                        \n                            \n                                    Defined in src/app/mixer/palette/operation/inlet/inlet.component.ts:21\n                            \n                        \n            \n        \n        \n            \n                \n                    \n                        \n                        inletid\n                    \n                \n                \n                    \n                        Type :         number\n\n                    \n                \n                        \n                            \n                                    Defined in src/app/mixer/palette/operation/inlet/inlet.component.ts:20\n                            \n                        \n            \n        \n        \n            \n                \n                    \n                        \n                        opid\n                    \n                \n                \n                    \n                        Type :         number\n\n                    \n                \n                        \n                            \n                                    Defined in src/app/mixer/palette/operation/inlet/inlet.component.ts:19\n                            \n                        \n            \n        \n\n    \n    Outputs\n        \n            \n                \n                    \n                        \n                        onConnectionRemoved\n                    \n                \n                \n                    \n                        Type :         EventEmitter\n\n                    \n                \n                        \n                            \n                                    Defined in src/app/mixer/palette/operation/inlet/inlet.component.ts:23\n                            \n                        \n            \n        \n        \n            \n                \n                    \n                        \n                        onInletChange\n                    \n                \n                \n                    \n                        Type :         EventEmitter\n\n                    \n                \n                        \n                            \n                                    Defined in src/app/mixer/palette/operation/inlet/inlet.component.ts:24\n                            \n                        \n            \n        \n        \n            \n                \n                    \n                        \n                        onInputSelected\n                    \n                \n                \n                    \n                        Type :         EventEmitter\n\n                    \n                \n                        \n                            \n                                    Defined in src/app/mixer/palette/operation/inlet/inlet.component.ts:22\n                            \n                        \n            \n        \n\n\n\n    \n    \n    \n        Methods\n    \n    \n        \n            \n                \n                    \n                    \n                        getInputName\n                        \n                    \n                \n            \n            \n                \ngetInputName(id: number)\n                \n            \n\n\n            \n                \n                    Defined in src/app/mixer/palette/operation/inlet/inlet.component.ts:101\n                \n            \n\n\n            \n                \n\n                    \n                        Parameters :\n                        \n                        \n                            \n                                \n                                    Name\n                                    Type\n                                    Optional\n                                \n                            \n                            \n                                \n                                    id\n                                    \n                                                number\n                                    \n\n                                    \n                                        No\n                                    \n\n\n                                \n                            \n                        \n                    \n                    \n                    \n                    \n                        Returns :         string\n\n                    \n                    \n                        \n                    \n                \n            \n        \n    \n    \n        \n            \n                \n                    \n                    \n                        inletChange\n                        \n                    \n                \n            \n            \n                \ninletChange()\n                \n            \n\n\n            \n                \n                    Defined in src/app/mixer/palette/operation/inlet/inlet.component.ts:107\n                \n            \n\n\n            \n                \n\n                    \n                        Returns :         void\n\n                    \n                \n            \n        \n    \n    \n        \n            \n                \n                    \n                    \n                        inputSelected\n                        \n                    \n                \n            \n            \n                \ninputSelected()\n                \n            \n\n\n            \n                \n                    Defined in src/app/mixer/palette/operation/inlet/inlet.component.ts:93\n                \n            \n\n\n            \n                \n\n                    \n                        Returns :         void\n\n                    \n                \n            \n        \n    \n    \n        \n            \n                \n                    \n                    \n                        ngOnInit\n                        \n                    \n                \n            \n            \n                \nngOnInit()\n                \n            \n\n\n            \n                \n                    Defined in src/app/mixer/palette/operation/inlet/inlet.component.ts:38\n                \n            \n\n\n            \n                \n\n                    \n                        Returns :         void\n\n                    \n                \n            \n        \n    \n    \n        \n            \n                \n                    \n                    \n                        parseDefaultInletValue\n                        \n                    \n                \n            \n            \n                \nparseDefaultInletValue(type: string, value: any)\n                \n            \n\n\n            \n                \n                    Defined in src/app/mixer/palette/operation/inlet/inlet.component.ts:77\n                \n            \n\n\n            \n                \n\n                    \n                        Parameters :\n                        \n                        \n                            \n                                \n                                    Name\n                                    Type\n                                    Optional\n                                \n                            \n                            \n                                \n                                    type\n                                    \n                                                string\n                                    \n\n                                    \n                                        No\n                                    \n\n\n                                \n                                \n                                    value\n                                    \n                                                any\n                                    \n\n                                    \n                                        No\n                                    \n\n\n                                \n                            \n                        \n                    \n                    \n                    \n                    \n                        Returns :         any\n\n                    \n                    \n                        \n                    \n                \n            \n        \n    \n    \n        \n            \n                \n                    \n                    \n                        removeConnectionTo\n                        \n                    \n                \n            \n            \n                \nremoveConnectionTo(sd_id: number)\n                \n            \n\n\n            \n                \n                    Defined in src/app/mixer/palette/operation/inlet/inlet.component.ts:97\n                \n            \n\n\n            \n                \n\n                    \n                        Parameters :\n                        \n                        \n                            \n                                \n                                    Name\n                                    Type\n                                    Optional\n                                \n                            \n                            \n                                \n                                    sd_id\n                                    \n                                                number\n                                    \n\n                                    \n                                        No\n                                    \n\n\n                                \n                            \n                        \n                    \n                    \n                    \n                    \n                        Returns :         void\n\n                    \n                    \n                        \n                    \n                \n            \n        \n    \n\n    \n    \n    \n        Properties\n    \n    \n        \n            \n                \n                    \n                    \n                        all_system_codes\n                        \n                    \n                \n            \n                \n                    \n                        Type :     Array\n\n                    \n                \n                    \n                        \n                                Defined in src/app/mixer/palette/operation/inlet/inlet.component.ts:28\n                        \n                    \n\n\n        \n    \n    \n        \n            \n                \n                    \n                    \n                        fc\n                        \n                    \n                \n            \n                \n                    \n                        Type :         FormControl\n\n                    \n                \n                    \n                        \n                                Defined in src/app/mixer/palette/operation/inlet/inlet.component.ts:26\n                        \n                    \n\n\n        \n    \n    \n        \n            \n                \n                    \n                    \n                        inlet\n                        \n                    \n                \n            \n                \n                    \n                        Type :         OperationInlet\n\n                    \n                \n                    \n                        \n                                Defined in src/app/mixer/palette/operation/inlet/inlet.component.ts:31\n                        \n                    \n\n\n        \n    \n    \n        \n            \n                \n                    \n                    \n                        number_opts\n                        \n                    \n                \n            \n                \n                    \n                        Type :     Array\n\n                    \n                \n                    \n                        \n                                Defined in src/app/mixer/palette/operation/inlet/inlet.component.ts:29\n                        \n                    \n\n\n        \n    \n    \n        \n            \n                \n                    \n                    \n                        opnode\n                        \n                    \n                \n            \n                \n                    \n                        Type :         OpNode\n\n                    \n                \n                    \n                        \n                                Defined in src/app/mixer/palette/operation/inlet/inlet.component.ts:30\n                        \n                    \n\n\n        \n    \n    \n        \n            \n                \n                    \n                    \n                        selectedValue\n                        \n                    \n                \n            \n                \n                    \n                        Type :         number\n\n                    \n                \n                    \n                        \n                                Defined in src/app/mixer/palette/operation/inlet/inlet.component.ts:32\n                        \n                    \n\n\n        \n    \n    \n        \n            \n                \n                    \n                    \n                        textValidate\n                        \n                    \n                \n            \n                \n                    \n                        Type :         any\n\n                    \n                \n                    \n                        \n                                Defined in src/app/mixer/palette/operation/inlet/inlet.component.ts:27\n                        \n                    \n\n\n        \n    \n    \n        \n            \n                \n                    \n                    \n                            Public\n                        tree\n                        \n                    \n                \n            \n                \n                    \n                        Type :         TreeService\n\n                    \n                \n                    \n                        \n                                Defined in src/app/mixer/palette/operation/inlet/inlet.component.ts:34\n                        \n                    \n\n\n        \n    \n\n\n\n\n\n    \n        import { Component, Input, OnInit, Output, EventEmitter } from '@angular/core';\nimport { FormControl, FormGroupDirective, NgForm } from '@angular/forms';\nimport { OperationService } from '../../../provider/operation.service';\nimport { SystemsService } from '../../../../core/provider/systems.service';\nimport { TreeService } from '../../../provider/tree.service';\nimport { getDraftName } from '../../../../core/model/drafts';\nimport { DynamicOperation, OperationInlet,OpNode } from '../../../../core/model/datatypes';\nimport { I } from '@angular/cdk/keycodes';\n\n\n\n@Component({\n  selector: 'app-inlet',\n  templateUrl: './inlet.component.html',\n  styleUrls: ['./inlet.component.scss']\n})\nexport class InletComponent implements OnInit {\n\n  @Input() opid:  number;\n  @Input() inletid:  number;\n  @Input() dynamic: boolean;\n  @Output() onInputSelected = new EventEmitter (); \n  @Output() onConnectionRemoved = new EventEmitter (); \n  @Output() onInletChange = new EventEmitter (); \n\n  fc: FormControl;\n  textValidate: any;\n  all_system_codes: Array;\n  number_opts: Array;\n  opnode: OpNode;\n  inlet: OperationInlet;\n  selectedValue: number; \n\n  constructor(public tree: TreeService, private systems: SystemsService, private ops: OperationService) { \n\n  }\n\n  ngOnInit(): void {    \n    this.opnode = this.tree.getOpNode(this.opid);\n    this.all_system_codes = this.systems.weft_systems.map(el => {return {code: el.name, id: el.id}} );\n    const op = this.ops.getOp(this.opnode.name);  \n    this.number_opts = [];\n    for(let i = 1; i = op.inlets.length && this.dynamic){\n      const type = ( op).dynamic_param_type;\n      this.inlet = {\n        type: type,\n        name: '',\n        value: this.parseDefaultInletValue(type, this.opnode.inlets[this.inletid]),\n        num_drafts: 1,\n        dx: ''\n      }\n    }else{\n      this.inlet = op.inlets[this.inletid];\n    }\n\n    if(this.inlet === undefined){\n      this.inlet = {\n        type: 'null',\n        name: '',\n        value: -1,\n        num_drafts: 1,\n        dx: ''\n      }\n    }\n\n\n    this.fc = new FormControl(this.parseDefaultInletValue(this.inlet.type, this.opnode.inlets[this.inletid]));\n\n  }\n\n  parseDefaultInletValue(type: string, value: any) : any {\n    switch (type){\n      case 'number':\n      case 'system':\n      case 'draft':\n        return parseInt(value);\n        break;\n      case 'notation':\n      case 'string':\n      case 'color':\n        return value.slice();\n      \n    }\n  }\n\n\n  inputSelected(){\n    this.onInputSelected.emit(this.inletid);\n  }\n\n  removeConnectionTo(sd_id: number){\n    this.onConnectionRemoved.emit({from: sd_id, to: this.opid, inletid: this.inletid});\n  }\n\n  getInputName(id: number) : string {\n    const sd = this.tree.getDraft(id);\n    if(sd === null || sd === undefined) return \"null draft\"\n    return getDraftName(sd);\n  }\n\n  inletChange(){\n\n    const opnode: OpNode =  this.tree.getNode(this.opid);\n\n    // switch(this.inlet.type){\n    //   case 'number':\n    //     this.fc.setValue(value);\n    //     opnode.inlets[this.inletid] = value;\n    //     break;\n    //   case 'system':\n    //    // opnode.inlets[this.inletid] = value;\n    //     break;\n    //   case 'color':\n    //     this.fc.setValue(value);\n    //     opnode.inlets[this.inletid] = value;\n    //     break;\n    //   case 'notation':\n    //     this.fc.setValue(value);\n    //     opnode.inlets[this.inletid] = value;\n    //     break;\n\n    // }\n\n    this.onInletChange.emit({id: this.inletid});\n\n  }\n\n\n\n\n\n\n}\n\n    \n\n    \n        \n    \n\n\n    \n         \n    \n\n    {{inlet.name}}\n\n    \n\n        \n             \n        \n\n       {{opnode.inlets[inletid]}} -->\n\n       \n       \n           {{num}}\n       \n   \n\n\n    \n\n\n\n    \n    \n\n        \n             \n        \n\n         ({{opnode.inlets[inletid]}})\n         {{opnode.inlets[inletid]}}\n\n    \n\n\n\n    \n        \n             \n        \n        layer {{inletid+1}}, system: \n            \n            \n                {{sys.code}}\n            \n        \n\n\n \n\n    \n\n    \n       \n        \n            \n        \n        \n\n    \n\n\n    \n    \n    {{getInputName(input)}} \n       \n\n\n\n\n    \n\n    \n                \n                    ./inlet.component.scss\n                \n                \n.input-color{\n    width: 30px;\n    height: 30px;\n    border: thin solid white;\n}\n\nbutton.input{\n    position: relative;\n\tbackground-color: #00d1b2;\n\tcolor: white;\n\tborder: none;\n    width:30px;\n}\n\n\n\nbutton.cxn{\n    background-color: lightgrey;\n    border: thin solid black;\n    color: black;\n}\n\n.input-name{\n    margin-left: 8px;\n    line-height: 30px;\n}\n\n\n.inputs{\n    display: flex;\n    justify-content: flex-start;\n    text-align: center;\n}\n\n\n.mat-select{\n    width: 34px;\n    padding-left: 4px;\n    line-height: 30px;\n    background-color: #fff;\n}\n\n.mat-select-value{\n    color: #fff !important;\n}\n\ninput{\n    width: 35px;\n}\n\n\n\n.inlet-label,\n.inlet-name{\n    color: #fff;\n    line-height: 30px;\n    padding-right: 6px;\n}\n    \n\n    \n        \n        \n            \n                Legend\n            \n            \n                Html element\n            \n            \n                Component\n            \n            \n                Html element with directive\n            \n        \n    \n\n    \n\n\n\n\n\n\n        var COMPONENT_TEMPLATE = '                         {{inlet.name}}                                        {{opnode.inlets[inletid]}} -->                         {{num}}                                                            ({{opnode.inlets[inletid]}})         {{opnode.inlets[inletid]}}                                             layer {{inletid+1}}, system:                                         {{sys.code}}                                                                                        {{getInputName(input)}}        '\n    var COMPONENTS = [{'name': 'ConnectionComponent', 'selector': 'app-connection'},{'name': 'DraftdetailComponent', 'selector': 'app-draftdetail'},{'name': 'ImageComponent', 'selector': 'app-image'},{'name': 'InletComponent', 'selector': 'app-inlet'},{'name': 'MixerComponent', 'selector': 'app-mixer'},{'name': 'MixerViewComponent', 'selector': 'app-mixerview'},{'name': 'NoteComponent', 'selector': 'app-note'},{'name': 'OperationComponent', 'selector': 'app-operation'},{'name': 'OpHelpModal', 'selector': 'app-ophelp'},{'name': 'OpsComponent', 'selector': 'app-ops'},{'name': 'OpSequencerComponent', 'selector': 'app-op-sequencer'},{'name': 'PaletteComponent', 'selector': 'app-palette'},{'name': 'ParameterComponent', 'selector': 'app-parameter'},{'name': 'PlayerComponent', 'selector': 'app-player'},{'name': 'SnackbarComponent', 'selector': 'app-snackbar'},{'name': 'SubdraftComponent', 'selector': 'app-subdraft'},{'name': 'VirtualPedalsComponent', 'selector': 'app-virtual-pedals'},{'name': 'WeavingStateComponent', 'selector': 'app-weaving-state'}];\n    var DIRECTIVES = [{'name': 'MarqueeComponent', 'selector': 'app-marquee'},{'name': 'SelectionComponent', 'selector': 'app-selection'}];\n    var ACTUAL_COMPONENT = {'name': 'InletComponent'};\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n                   \n    \n         results matching \"\"\n        \n    \n    \n        No results matching \"\"\n    \n\n"},"interfaces/Interlacement.html":{"url":"interfaces/Interlacement.html","title":"interface - Interlacement","body":"\n                   \n\n\n\n\n\n\n\n\n\n\n\n\n\n\n  Interfaces\n  \n  Interlacement\n\n\n\n        \n            Info\n        \n        \n            Source\n        \n\n\n\n    \n        \n            File\n        \n        \n            src/app/core/model/datatypes/drafts.ts\n        \n\n\n            \n                Description\n            \n            \n                represents a location within a draft.\n       this value can be de-indexed to absolute position in the rows using draft.visibleRows array\n\n            \n\n\n        \n            Index\n            \n                \n                    \n                        \n                            Properties\n                        \n                    \n                    \n                        \n                            \n                                \n                                        \n                                            i\n                                        \n                                \n                                \n                                        \n                                            j\n                                        \n                                \n                                \n                                        \n                                            si\n                                        \n                                \n                            \n                        \n                    \n                \n            \n        \n\n\n\n            \n                Properties\n                    \n                        \n                                \n                                    \n                                        \n                                        i\n                                            \n                                                \n                                            \n                                        \n                                    \n                                \n                                \n                                    \n                                        i:         number\n\n                                    \n                                \n\n\n                                    \n                                        \n                                            Type :         number\n\n                                        \n                                    \n\n\n\n\n\n                        \n                    \n                    \n                        \n                                \n                                    \n                                        \n                                        j\n                                            \n                                                \n                                            \n                                        \n                                    \n                                \n                                \n                                    \n                                        j:         number\n\n                                    \n                                \n\n\n                                    \n                                        \n                                            Type :         number\n\n                                        \n                                    \n\n\n\n\n\n                        \n                    \n                    \n                        \n                                \n                                    \n                                        \n                                        si\n                                            \n                                                \n                                            \n                                        \n                                    \n                                \n                                \n                                    \n                                        si:         number\n\n                                    \n                                \n\n\n                                    \n                                        \n                                            Type :         number\n\n                                        \n                                    \n\n\n\n\n\n                        \n                    \n            \n    \n\n\n    \n        import { Cell } from '../cell';\n\n/*****   OBJECTS/TYPES RELATED TO DRAFTS  *******/\n\n/**\n * Drawdown can be used as shorthand for drafts, which are just 2D arrays of Cells\n */\n export type Drawdown = Array>;\n\n\n /**\n  * stores a drawdown along with broader information a draft such\n  * @param id a unique id to refer to this draft, used for linking the draft to screen components\n  * @param gen_name a automatically generated name for this draft (from parent operation)\n  * @param ud_name a user defined name for this draft, which, if it exists, will be used instead of the generated name\n  * @param drawdown the drawdown/interlacement pattern used in this draft\n  * @param rowShuttleMapping the repeating pattern to use to assign draft rows to shuttles (materials)\n  * @param rowSystemMapping the repeating pattern to use to assign draft rows to systems (structual units like layers for instance)\n  * @param colShuttleMapping the repeating pattern to use to assign draft columns to shuttles (materials)\n  * @param colSystemMapping the repeating pattern to use to assign draft columns to systems (structual units like layers for instance)\n  */\n export interface Draft {\n   id: number,\n   gen_name: string,\n   ud_name: string,\n   drawdown: Drawdown,\n   rowShuttleMapping: Array,\n   rowSystemMapping: Array,\n   colShuttleMapping: Array,\n   colSystemMapping: Array,\n }\n \n /**\n  * represents a location within a draft.\n  * @param i is the row/weft number (0 being at the top of the drawdown)\n  * @param j is the column/warp number (0 being at the far left of the drawdown)\n  * @param si is the location of this cell within the current view (where the view may be hiding some rows)\n  *        this value can be de-indexed to absolute position in the rows using draft.visibleRows array\n  * @example const i: number = draft.visibleRows[si];\n  */\n export interface Interlacement {\n   i: number;  \n   j: number;  \n   si: number; \n }\n \n /**\n  * represents a location within a draft as well as the value to be placed at that location\n  * used by Loom to stage updates before settting them\n  * @param i is the row/weft number (0 being at the top of the drawdown)\n  * @param j is the column/warp number (0 being at the far left of the drawdown)\n  * @param val the value to be assigned at the given location\n  */\n \n export interface InterlacementVal {\n   i: number;  \n   j: number \n   val: boolean; \n }\n \n \n /***** OBJECTS/TYPES RELATED TO MIXER COMPONENTS ****/\n \n /**\n  * this stores a list of drafts created with associated component ids for those drafts, \n  * or -1 if the component for this draft has not been generated yet. \n  */\n export interface DraftMap {\n   component_id: number;\n   draft: any;\n }\n    \n\n\n\n\n\n\n\n\n\n                   \n    \n         results matching \"\"\n        \n    \n    \n        No results matching \"\"\n    \n\n"},"interfaces/InterlacementVal.html":{"url":"interfaces/InterlacementVal.html","title":"interface - InterlacementVal","body":"\n                   \n\n\n\n\n\n\n\n\n\n\n\n\n\n\n  Interfaces\n  \n  InterlacementVal\n\n\n\n        \n            Info\n        \n        \n            Source\n        \n\n\n\n    \n        \n            File\n        \n        \n            src/app/core/model/datatypes/drafts.ts\n        \n\n\n            \n                Description\n            \n            \n                represents a location within a draft as well as the value to be placed at that location\nused by Loom to stage updates before settting them\n\n            \n\n\n        \n            Index\n            \n                \n                    \n                        \n                            Properties\n                        \n                    \n                    \n                        \n                            \n                                \n                                        \n                                            i\n                                        \n                                \n                                \n                                        \n                                            j\n                                        \n                                \n                                \n                                        \n                                            val\n                                        \n                                \n                            \n                        \n                    \n                \n            \n        \n\n\n\n            \n                Properties\n                    \n                        \n                                \n                                    \n                                        \n                                        i\n                                            \n                                                \n                                            \n                                        \n                                    \n                                \n                                \n                                    \n                                        i:         number\n\n                                    \n                                \n\n\n                                    \n                                        \n                                            Type :         number\n\n                                        \n                                    \n\n\n\n\n\n                        \n                    \n                    \n                        \n                                \n                                    \n                                        \n                                        j\n                                            \n                                                \n                                            \n                                        \n                                    \n                                \n                                \n                                    \n                                        j:         number\n\n                                    \n                                \n\n\n                                    \n                                        \n                                            Type :         number\n\n                                        \n                                    \n\n\n\n\n\n                        \n                    \n                    \n                        \n                                \n                                    \n                                        \n                                        val\n                                            \n                                                \n                                            \n                                        \n                                    \n                                \n                                \n                                    \n                                        val:         boolean\n\n                                    \n                                \n\n\n                                    \n                                        \n                                            Type :         boolean\n\n                                        \n                                    \n\n\n\n\n\n                        \n                    \n            \n    \n\n\n    \n        import { Cell } from '../cell';\n\n/*****   OBJECTS/TYPES RELATED TO DRAFTS  *******/\n\n/**\n * Drawdown can be used as shorthand for drafts, which are just 2D arrays of Cells\n */\n export type Drawdown = Array>;\n\n\n /**\n  * stores a drawdown along with broader information a draft such\n  * @param id a unique id to refer to this draft, used for linking the draft to screen components\n  * @param gen_name a automatically generated name for this draft (from parent operation)\n  * @param ud_name a user defined name for this draft, which, if it exists, will be used instead of the generated name\n  * @param drawdown the drawdown/interlacement pattern used in this draft\n  * @param rowShuttleMapping the repeating pattern to use to assign draft rows to shuttles (materials)\n  * @param rowSystemMapping the repeating pattern to use to assign draft rows to systems (structual units like layers for instance)\n  * @param colShuttleMapping the repeating pattern to use to assign draft columns to shuttles (materials)\n  * @param colSystemMapping the repeating pattern to use to assign draft columns to systems (structual units like layers for instance)\n  */\n export interface Draft {\n   id: number,\n   gen_name: string,\n   ud_name: string,\n   drawdown: Drawdown,\n   rowShuttleMapping: Array,\n   rowSystemMapping: Array,\n   colShuttleMapping: Array,\n   colSystemMapping: Array,\n }\n \n /**\n  * represents a location within a draft.\n  * @param i is the row/weft number (0 being at the top of the drawdown)\n  * @param j is the column/warp number (0 being at the far left of the drawdown)\n  * @param si is the location of this cell within the current view (where the view may be hiding some rows)\n  *        this value can be de-indexed to absolute position in the rows using draft.visibleRows array\n  * @example const i: number = draft.visibleRows[si];\n  */\n export interface Interlacement {\n   i: number;  \n   j: number;  \n   si: number; \n }\n \n /**\n  * represents a location within a draft as well as the value to be placed at that location\n  * used by Loom to stage updates before settting them\n  * @param i is the row/weft number (0 being at the top of the drawdown)\n  * @param j is the column/warp number (0 being at the far left of the drawdown)\n  * @param val the value to be assigned at the given location\n  */\n \n export interface InterlacementVal {\n   i: number;  \n   j: number \n   val: boolean; \n }\n \n \n /***** OBJECTS/TYPES RELATED TO MIXER COMPONENTS ****/\n \n /**\n  * this stores a list of drafts created with associated component ids for those drafts, \n  * or -1 if the component for this draft has not been generated yet. \n  */\n export interface DraftMap {\n   component_id: number;\n   draft: any;\n }\n    \n\n\n\n\n\n\n\n\n\n                   \n    \n         results matching \"\"\n        \n    \n    \n        No results matching \"\"\n    \n\n"},"injectables/LayersService.html":{"url":"injectables/LayersService.html","title":"injectable - LayersService","body":"\n                   \n\n\n\n\n\n\n\n\n\n  Injectables\n  LayersService\n\n\n\n        \n            Info\n        \n        \n            Source\n        \n\n\n\n    \n        \n            File\n        \n        \n            src/app/mixer/provider/layers.service.ts\n        \n\n\n            \n                Description\n            \n            \n                a service that keeps track of how many elements are on the screen so that new\nlayers can always be drawn in front\n\n            \n\n\n\n            \n    Index\n    \n        \n                \n                    \n                        Properties\n                    \n                \n                \n                    \n                        \n                            \n                                count\n                            \n                        \n                    \n                \n\n                \n                    \n                        Methods\n                    \n                \n                \n                    \n                        \n                            \n                                clearLayers\n                            \n                            \n                                createLayer\n                            \n                            \n                                getFrontLayer\n                            \n                        \n                    \n                \n\n\n\n\n\n        \n    \n\n\n            \n    Constructor\n        \n            \n                \n                    \nconstructor()\n                    \n                \n                        \n                            \n                                Defined in src/app/mixer/provider/layers.service.ts:13\n                            \n                        \n\n            \n        \n\n\n            \n    \n    \n        Methods\n    \n    \n        \n            \n                \n                    \n                    \n                        clearLayers\n                        \n                    \n                \n            \n            \n                \nclearLayers()\n                \n            \n\n\n            \n                \n                    Defined in src/app/mixer/provider/layers.service.ts:24\n                \n            \n\n\n            \n                \n\n                    \n                        Returns :         void\n\n                    \n                \n            \n        \n    \n    \n        \n            \n                \n                    \n                    \n                        createLayer\n                        \n                    \n                \n            \n            \n                \ncreateLayer()\n                \n            \n\n\n            \n                \n                    Defined in src/app/mixer/provider/layers.service.ts:19\n                \n            \n\n\n            \n                \n\n                    \n                        Returns :         number\n\n                    \n                \n            \n        \n    \n    \n        \n            \n                \n                    \n                    \n                        getFrontLayer\n                        \n                    \n                \n            \n            \n                \ngetFrontLayer()\n                \n            \n\n\n            \n                \n                    Defined in src/app/mixer/provider/layers.service.ts:28\n                \n            \n\n\n            \n                \n\n                    \n                        Returns :         number\n\n                    \n                \n            \n        \n    \n\n            \n    \n    \n        Properties\n    \n    \n        \n            \n                \n                    \n                    \n                        count\n                        \n                    \n                \n            \n                \n                    \n                        Type :         number\n\n                    \n                \n                    \n                        \n                                Defined in src/app/mixer/provider/layers.service.ts:13\n                        \n                    \n\n\n        \n    \n\n\n    \n\n\n    \n        import { Injectable } from '@angular/core';\n\n\n/**\n * a service that keeps track of how many elements are on the screen so that new \n * layers can always be drawn in front\n */\n@Injectable({\n  providedIn: 'root'\n})\nexport class LayersService {\n\n  count: number;\n\n  constructor() {\n    this.count = 0;\n   }\n\n   createLayer(): number{\n     this.count++;\n     return this.count;\n   }\n\n   clearLayers(){\n     this.count = 0;\n   }\n\n  getFrontLayer():number{\n    return this.count;\n  }\n\n}\n\n    \n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n                   \n    \n         results matching \"\"\n        \n    \n    \n        No results matching \"\"\n    \n\n"},"interfaces/LoadResponse.html":{"url":"interfaces/LoadResponse.html","title":"interface - LoadResponse","body":"\n                   \n\n\n\n\n\n\n\n\n\n\n\n\n\n\n  Interfaces\n  \n  LoadResponse\n\n\n\n        \n            Info\n        \n        \n            Source\n        \n\n\n\n    \n        \n            File\n        \n        \n            src/app/core/model/datatypes/files.ts\n        \n\n\n\n\n        \n            Index\n            \n                \n                    \n                        \n                            Properties\n                        \n                    \n                    \n                        \n                            \n                                \n                                        \n                                            data\n                                        \n                                \n                                \n                                        \n                                            status\n                                        \n                                \n                            \n                        \n                    \n                \n            \n        \n\n\n\n            \n                Properties\n                    \n                        \n                                \n                                    \n                                        \n                                        data\n                                            \n                                                \n                                            \n                                        \n                                    \n                                \n                                \n                                    \n                                        data:         FileObj\n\n                                    \n                                \n\n\n                                    \n                                        \n                                            Type :         FileObj\n\n                                        \n                                    \n\n\n\n\n\n                        \n                    \n                    \n                        \n                                \n                                    \n                                        \n                                        status\n                                            \n                                                \n                                            \n                                        \n                                    \n                                \n                                \n                                    \n                                        status:         number\n\n                                    \n                                \n\n\n                                    \n                                        \n                                            Type :         number\n\n                                        \n                                    \n\n\n\n\n\n                        \n                    \n            \n    \n\n\n    \n        import { Draft } from './drafts';\nimport { Loom, LoomSettings } from './looms';\nimport { Shuttle } from '../shuttle';\nimport { Note } from '../../provider/notes.service';\nimport { Bounds } from './screenlayout';\n\n/****** OBJECTS/TYPES FOR LOADING AND SAVING FILES *****/\n\n/**\n * holds data about each node/component in a form to easily load.\n * @param node_id the id of this node within the tree\n * @param type the type of node\n * @param bounds the screen position and size data for this node\n */\nexport interface NodeComponentProxy {\n    node_id: number,\n    type: string,\n    bounds: Bounds\n  }\n  \n  /**\n   * stores a sparce version of a tree node for easy reloading\n   * @param node the node id this treenode refers too\n   * @param parent the node id of the parent node for this treenode\n   * @param inputs an array of treenode ids for all values coming into this node\n   * @param outputs an array of treenode ids for all downstream functions \n   */\n   export interface TreeNodeProxy {\n    node: number,\n    parent: number; \n    inputs: Array;\n    outputs: Array; \n   }\n  \n    /**\n    * holds data about each draft component in a compressed form \n    * @param draft_id the draft id associated with this node (if available)\n   * @param draft_visible a boolean to state if this node is visible or not. \n   * @param draft_name a string representing a user defined name\n   * @param draft this will only export if the draft is a seed draft\n   * @param loom this will only export if the draft is a seed draft \n   * @param loom_settings the associated loom settings on this node, if present\n    */\n  \n    export interface DraftNodeProxy {\n      node_id: number;\n      draft_id: number;\n      draft_name: string;\n      draft: Draft;\n      draft_visible: boolean;\n      loom: Loom,\n      loom_settings: LoomSettings;\n    }\n  \n  /**\n    * a sparce form of an operaction component to use for saving\n    * @param node_id the node id this object refers too\n    * @param name the name of the operation at this node\n    * @param params the list of input parameters to this operation\n    * @param inlets the let of inlets and associated values \n    */\n  export interface OpComponentProxy {\n    node_id: number,\n    name: string,\n    params: Array, \n    inlets: Array;\n  }\n  \n  \n   /**\n    * describes the data from the workspace that is saved.\n    */\n   export interface SaveObj {\n    version: string,\n    workspace: any,\n    type: string,\n    nodes: Array,\n    tree: Array,\n    draft_nodes: Array,\n    ops: Array,\n    notes: Array,\n    materials: Array,\n    scale: number\n   }\n  \n  export interface FileObj {\n   version: string,\n   workspace: any,\n   filename: string,\n   nodes: Array,\n   treenodes: Array,\n   draft_nodes: Array,\n   ops: Array\n   scale: number\n  }\n  \n  export interface StatusMessage {\n    id: number,\n    message: string,\n    success: boolean\n  }\n  \n  export interface LoadResponse {\n    data: FileObj,\n    status: number;\n  }\n  \n  export interface Fileloader {\n    ada: (filename: string, data: any) => Promise,\n    //wif: (filename: string, data: any) => Promise,\n    //bmp: (filename: string, data: any) => Promise,\n    //jpg: (filename: string, data: any) => Promise,\n    form: (data: any) => Promise}\n  \n  export interface FileSaver {\n    ada: (type: string, for_timeline:boolean, current_scale: number) => Promise,\n    //wif: (draft: Draft, loom: Loom) => Promise,\n    bmp: (canvas: HTMLCanvasElement) => Promise,\n    jpg: (canvas: HTMLCanvasElement) => Promise\n  }\n    \n\n\n\n\n\n\n\n\n\n                   \n    \n         results matching \"\"\n        \n    \n    \n        No results matching \"\"\n    \n\n"},"interfaces/LoomConfig.html":{"url":"interfaces/LoomConfig.html","title":"interface - LoomConfig","body":"\n                   \n\n\n\n\n\n\n\n\n\n\n\n\n\n\n  Interfaces\n  \n  LoomConfig\n\n\n\n        \n            Info\n        \n        \n            Source\n        \n\n\n\n    \n        \n            File\n        \n        \n            src/app/player/player.service.ts\n        \n\n\n\n\n        \n            Index\n            \n                \n                    \n                        \n                            Properties\n                        \n                    \n                    \n                        \n                            \n                                \n                                        \n                                            draftTiling\n                                        \n                                \n                                \n                                        \n                                            warps\n                                        \n                                \n                            \n                        \n                    \n                \n            \n        \n\n\n\n            \n                Properties\n                    \n                        \n                                \n                                    \n                                        \n                                        draftTiling\n                                            \n                                                \n                                            \n                                        \n                                    \n                                \n                                \n                                    \n                                        draftTiling:         boolean\n\n                                    \n                                \n\n\n                                    \n                                        \n                                            Type :         boolean\n\n                                        \n                                    \n\n\n\n\n\n                        \n                    \n                    \n                        \n                                \n                                    \n                                        \n                                        warps\n                                            \n                                                \n                                            \n                                        \n                                    \n                                \n                                \n                                    \n                                        warps:         number\n\n                                    \n                                \n\n\n                                    \n                                        \n                                            Type :         number\n\n                                        \n                                    \n\n\n\n\n\n                        \n                    \n            \n    \n\n\n    \n        import { Injectable} from '@angular/core';\nimport { EventEmitter } from 'events';\nimport { wefts } from '../core/model/drafts';\nimport { Draft } from '../core/model/datatypes';\nimport { BaseOp, BuildableOperation as GenericOp, \n  TreeOperation as TreeOp,\n  Seed, Pipe, DraftsOptional, AllRequired, getDefaultParams,\n  SingleInlet, OpInput\n} from '../mixer/model/operation';\nimport * as defs from '../mixer/model/op_definitions';\nimport { PlayerOp, playerOpFrom, \n  ChainOp, OpSequencer, PairedOp, PedalOpMapping,\n  makePairedOp, makeChainOp, makeOpSequencer,\n  forward, refresh, reverse\n} from './model/op_mappings';\nimport { PlayerState, WeavingPick, copyState, initState } from './model/state';\nimport { MappingsService } from './provider/mappings.service';\nimport { PedalsService, PedalStatus, Pedal } from './provider/pedals.service';\nimport { SequencerService } from './provider/sequencer.service';\n// import { OperationService } from '../mixer/provider/operation.service';\n\nexport interface DraftOperationClassification {\n  category: string,\n  dx: string,\n  ops: Array \n }\n\ninterface LoomConfig {\n  warps: number,\n  draftTiling: boolean\n}\n\n/**\n * @class PedalConfig\n * @desc OLD, UPDATE THIS ---> \n * Represents a set of two-way bindings between a set of Pedals\n * and a set of (Player)Operations. A pedal can only be bound to one\n * Action (a single Op, a chain of Ops, or to control an OpRoulette)\n * @todo The second restriction may change, it might make sense for pedals to\n * get bound to a sequence of operations.\n */\nclass PedalConfig {\n  // numPedals: number;\n  pedals: Array;\n  ops: Array;\n  availPedals: Array;\n  mapping: PedalOpMapping;\n\n  constructor(pedalArray: Array, loadConfig = false) {\n    this.pedals = pedalArray;\n    this.ops = []\n    this.availPedals = pedalArray.map((p) => p.id);\n    this.mapping = [];\n  }\n\n  get numPedals() {\n    return this.pedals.length;\n  }\n\n  get numMappings() {\n    return Object.entries(this.mapping).length;\n  }\n\n  addPedal(p: Pedal) {\n    // this.pedals.push(p);\n    this.availPedals.push(p.id);\n  }\n\n  remPedal() {\n    // this.pedals.pop();\n    this.availPedals.filter((id) => id != this.pedals.length);\n  }\n\n  addOperation(o: PlayerOp, chain?: boolean) {\n    o.id = this.ops.length;\n    this.ops.push(o);\n    if (chain) {\n      o.chain = chain;\n    }\n    // this.unpairedOps.push(o);\n    // console.log(this.ops);\n  }\n\n  pair(pedalId: number, opName: string) {\n    let o = this.ops.findIndex((op) => op.name == opName);\n    // let thisOp = this.unpairedOps.splice(o, 1);\n    let thisOp = this.ops;\n    this.mapping[pedalId] = makePairedOp(pedalId, thisOp[o]); \n  }\n\n  chain(pedalId: number, opName: string) {\n    let o = this.ops[this.ops.findIndex((op) => op.name == opName)];\n    if (this.pedalIsChained(pedalId)) {\n      let curr_ops = ( this.mapping[pedalId]).ops;\n      this.mapping[pedalId] = makeChainOp(curr_ops.concat([o]), pedalId);\n    } else if (this.pedalIsPaired(pedalId)) {\n      let first_op = ( this.mapping[pedalId]).op;\n      this.mapping[pedalId] = makeChainOp([first_op].concat([o]), pedalId);\n    } else {\n      this.mapping[pedalId] = makeChainOp([o], pedalId);\n    }\n  }\n\n  chainToPedal(pedalId: number, ops: Array) {\n    let op_array = ops.map((name) => this.ops[this.ops.findIndex((op) => op.name == name)]);\n    if (this.pedalIsChained(pedalId)) { \n      // if pedal already has a chain, add ops to the chain\n      let curr_ops = ( this.mapping[pedalId]).ops;\n      this.mapping[pedalId] = makeChainOp(curr_ops.concat(op_array), pedalId);\n    } else if (this.pedalIsPaired(pedalId)) {\n      // if pedal is paired, you can turn it into a chain\n      let first_op = ( this.mapping[pedalId]).op;\n      this.mapping[pedalId] = makeChainOp([first_op].concat(op_array), pedalId);\n    } else {\n      // pedal doesn't have anything mapped, just add a new chain\n      this.mapping[pedalId] = makeChainOp(op_array, pedalId);\n    }\n  }\n\n  // will return true if an op is mapped to a pedal in any way\n  opIsMapped(opName: string): boolean {\n    if (this.mapping.filter((m) => m.name.includes(opName)).length > 0) {\n      return true;\n    } else return false;\n  }\n\n  pedalIsMapped(id: number) {\n    return (this.mapping[id]);\n  }\n\n  pedalIsChained(id: number) {\n    if (this.pedalIsMapped(id) && this.mapping[id].name.startsWith('ch')) { return true; }\n    else {return false; }\n  }\n\n  pedalIsPaired(id: number) {\n    return (this.pedalIsMapped(id) && !this.pedalIsChained(id));\n  }\n\n  unpairPedal(id: number) {\n    console.log(`unpairing pedal ${id}`);\n    // let op = this.pairs[id];\n    // this.unpairedOps.splice(op.id, 0, op);\n    delete this.mapping[id];\n  }\n\n  // unpairOp(name: string) {\n  //   let pid = this.opIsPaired(name);\n  //   this.unpairPedal(pid);\n  // }\n}\n\n/**\n * The Draft Player Service is in charge of updating the the global PlayerState and tracking where the weaver is in the draft.\n */\n@Injectable({\n  providedIn: 'root'\n})\nexport class PlayerService {\n  state: PlayerState;\n  loom: LoomConfig;\n  redraw = new EventEmitter();\n  draftClassification: Array = [];\n\n  constructor(\n    public pedals: PedalsService,\n    public mappings: MappingsService,\n    public seq: SequencerService,\n    // private oss: OperationService\n  ) {\n    // this.draft = null; \n    console.log(\"draft player constructor\");\n    // const startPattern = playerOpFrom(defs.tabby);\n    // console.log(startPattern);\n    // startPattern.perform(nullOpInput).then((result) => {\n    //   console.log(result);\n    //   this.setDraft(result[0]);\n    // });\n\n    this.state = initState();\n    this.state.draft = defs.tabby.perform([1]);\n\n    this.loom = { warps: 2640, draftTiling: true };\n\n    // load the draft progress ops\n    mappings.addOperation(forward);\n    mappings.addOperation(refresh);\n    mappings.addOperation(reverse);\n\n    function addOp(op: GenericOp, params?: Array) {\n      let p_op = params ? playerOpFrom(op, params) : playerOpFrom(op);\n      mappings.addOperation(p_op);\n      return p_op;\n    }\n\n    // load ops from the main mixer\n    const tabby = addOp(defs.tabby);\n    const twill = addOp(defs.twill);\n    const satin = addOp(defs.satin);\n    const waffle = addOp(defs.waffle);\n    const basket = addOp(defs.basket);\n    const rib = addOp(defs.rib);\n    const random = addOp(defs.random);\n    const rotate = addOp(defs.rotate);\n    const invert = addOp(defs.invert);\n    const shiftx = addOp(defs.shiftx);\n    const shifty = addOp(defs.shifty);\n    const slope = addOp(defs.slope);\n    const flipx = addOp(defs.flipx);\n    const flipy = addOp(defs.flipy);\n    const symm = addOp(defs.makesymmetric);\n    const stretch = addOp(defs.stretch);\n    const bindweft = addOp(defs.bindweftfloats);\n    const bindwarp = addOp(defs.bindwarpfloats);\n\n    const tile: PlayerOp = {\n      name: defs.tile.name,\n      perform: (init: PlayerState) => {\n        let res = copyState(init);\n        res.draft = defs.tile.perform([init.draft], [2, 2]);\n        res.row = init.row % wefts(res.draft.drawdown);\n        res.pedal = defs.tile.name;\n        return Promise.resolve(res);\n      }\n    }\n    mappings.addOperation(tile);\n\n    this.draftClassification.push(\n      {category: 'structure',\n      dx: \"0-1 input, 1 output, algorithmically generates weave structures based on parameters\",\n      ops: [tabby, twill, satin, waffle, random]}\n    );\n\n    this.draftClassification.push(\n      { category: 'custom structure',\n        dx: \"custom structures loaded from the Mixer\",\n        ops: []\n      }\n    );\n\n    this.draftClassification.push(\n      {category: 'transformation',\n      dx: \"1 input, 1 output, applies an operation to the input that transforms it in some way\",\n      ops: [invert, flipx, flipy, shiftx, shifty, rotate, slope, stretch, symm, tile]}\n    );\n\n    // //test this\n    // console.log(this.oss.getOp('germanify'));\n    // const germanify = this.pedalOps.addOperation(playerOpFromTree( this.oss.getOp('germanify')));\n    \n    console.log('pedal ops added');\n\n    pedals.on('pedal-step', (id) => this.onPedal(id));\n\n    pedals.on('pedal-added', (n) => {\n      if (n == 1) {\n        mappings.pair(0, 'forward');\n        console.log(\"pedals mapping\", mappings);\n      } else if (n == 2) {\n      //   if (mappings.pedalIsMapped(0)) mappings.unmap(0);\n      //   mappings[0] = this.seq;\n      //   mappings[1] = this.seq;\n      //   this.seq.addPedals(0, 1);\n      //   console.log(\"pedals mapping\", mappings);\n      }\n    })\n  }\n\n  get readyToWeave() {  // need either one pedal forward or one pedal reverse, in order to progress through draft\n    return (this.pedals.readyToWeave && \n      (this.mappings.opIsMapped('forward') || this.mappings.opIsMapped('reverse') || this.seq.readyToWeave)\n    );\n  }\n\n  get weaving() {\n    return this.pedals.active_draft.val;\n  }\n  get draft() {\n    return this.state.draft;\n  }\n\n  hasCustomStructure(d: Draft): boolean {\n    let ops = this.draftClassification.filter((c) => c.category == \"custom structure\")[0].ops;\n    console.log(ops);\n    if (ops.length == 0) return false;\n    return ops\n      .map((el) => { return el.struct_id == d.id})\n      .reduce((a, b) => { return a || b; });\n  }\n\n  setDraft(d: Draft) {\n    if (!this.hasCustomStructure(d)) {\n      console.log(\"a new structure!\");\n      let structOps = this.draftClassification.filter((c) => c.category == \"custom structure\")[0].ops;\n      let op = this.structureOpFromDraft(d);\n      structOps.push(op);\n      this.mappings.addOperation(op);\n    }\n    this.state.draft = d;\n    this.state.row = 0;\n    // console.log(\"player has active draft\");\n    // console.log(\"draft is \", this.draft);\n    console.log(\"draft set \", this.state);\n  }\n\n  /**\n   * \n   * @param d the Draft to turn into a custom structure Operation\n   */\n  structureOpFromDraft(d: Draft) {\n    let structOp: PlayerOp = {\n      name: d.gen_name,\n      struct_id: d.id,\n      perform: (init: PlayerState) => {\n        let res = copyState(init);\n        res.draft = d;\n        res.row = init.row % wefts(d.drawdown);\n        return Promise.resolve(res);\n      }\n    };\n    return structOp;\n  }\n\n  // e is a string = op.name\n  setPedalOp(e: any, p: Pedal) {\n    console.log(e, p);\n    if (this.mappings.pedalIsPaired(p.id)) {\n      this.mappings.unmap(p.id);\n    }\n    this.mappings.pair(p.id, e);\n    console.log(\"pedals map\", this.mappings);\n  }\n\n  onPedal(id: number) {\n    console.log('player service: pedal ', id);\n    let mapped = this.mappings.getMap(id);\n    // console.log(this.mappings);\n    // console.log(this.seq);\n    if (mapped) {\n      console.log('mapping exists for pedal');\n      mapped.perform(this.state, id)\n      .then((state: PlayerState) => {\n        this.state = copyState(state);\n        console.log(this.state);\n        this.redraw.emit('redraw');\n        if (this.state.weaving) {\n          console.log(\"draft player: sending row\");\n          this.pedals.sendDraftRow(this.currentRow());\n        }\n      });\n    }\n  }\n\n  // compound pedal operations\n  // normal pedal -> op\n  // compound pedal -> Op sequence\n  // if (compound pedal change) {\n      // sequence of operations: [Op, Op, Op]\n      // let finaldraft = starting Draft;\n      // for op in sequence:\n      //   finaldraft = finaldraft.perform(op);\n      // }\n      // do something with finaldraft\n  // }\n\n\n  currentRow() {\n    let {draft, row} = this.state;\n    let draftRow = draft.drawdown[row % wefts(draft.drawdown)];\n    let data = \"\";\n\n    let targetLength = (this.loom.draftTiling ? this.loom.warps : draftRow.length);\n    while (data.length  {\n    //   if (state) {\n    //   }\n    // });\n  }\n}\n\n    \n\n\n\n\n\n\n\n\n\n                   \n    \n         results matching \"\"\n        \n    \n    \n        No results matching \"\"\n    \n\n"},"interfaces/LoomTypes.html":{"url":"interfaces/LoomTypes.html","title":"interface - LoomTypes","body":"\n                   \n\n\n\n\n\n\n\n\n\n\n\n\n\n\n  Interfaces\n  \n  LoomTypes\n\n\n\n        \n            Info\n        \n        \n            Source\n        \n\n\n\n    \n        \n            File\n        \n        \n            src/app/core/model/datatypes/selectlists.ts\n        \n\n\n            \n                Description\n            \n            \n                OBJECTS/TYPES to CONTROL SELECT LISTS\n\n            \n\n\n        \n            Index\n            \n                \n                    \n                        \n                            Properties\n                        \n                    \n                    \n                        \n                            \n                                \n                                        \n                                            value\n                                        \n                                \n                                \n                                        \n                                            viewValue\n                                        \n                                \n                            \n                        \n                    \n                \n            \n        \n\n\n\n            \n                Properties\n                    \n                        \n                                \n                                    \n                                        \n                                        value\n                                            \n                                                \n                                            \n                                        \n                                    \n                                \n                                \n                                    \n                                        value:         string\n\n                                    \n                                \n\n\n                                    \n                                        \n                                            Type :         string\n\n                                        \n                                    \n\n\n\n\n\n                        \n                    \n                    \n                        \n                                \n                                    \n                                        \n                                        viewValue\n                                            \n                                                \n                                            \n                                        \n                                    \n                                \n                                \n                                    \n                                        viewValue:         string\n\n                                    \n                                \n\n\n                                    \n                                        \n                                            Type :         string\n\n                                        \n                                    \n\n\n\n\n\n                        \n                    \n            \n    \n\n\n    \n        export interface LoomTypes {\n    value: string;\n    viewValue: string;\n  }\n  \n  export interface MaterialTypes {\n    value: number;\n    viewValue: string;\n  }\n  \n  export interface DensityUnits {\n    value: string;\n    viewValue: string;\n  }\n  \n  export interface ViewModes {\n    value: string;\n    viewValue: string;\n  }\n  \n  \n  /**\n   * Stores the icons and language for determining different \n   * modes within which the mouse points are handled\n   * @param value - reference \n   * @param viewValue - text shown to users\n   * @param icon\n   * @param children, menu to nest within this\n   * @param selected boolean to show if it is selected\n   */\n  export interface DesignMode {\n    value: string;\n    viewValue: string;\n    icon: string;\n    children: Array;\n    selected: boolean;\n  }\n  \n    \n\n\n\n\n\n\n\n\n\n                   \n    \n         results matching \"\"\n        \n    \n    \n        No results matching \"\"\n    \n\n"},"injectables/MappingsService.html":{"url":"injectables/MappingsService.html","title":"injectable - MappingsService","body":"\n                   \n\n\n\n\n\n\n\n\n\n  Injectables\n  MappingsService\n\n\n\n        \n            Info\n        \n        \n            Source\n        \n\n\n\n    \n        \n            File\n        \n        \n            src/app/player/provider/mappings.service.ts\n        \n\n\n            \n                Description\n            \n            \n                correspond to pedal ID's, and values (PedalActions) correspond\nto a mapped SingleOp, ChainOp, or OpSequencer.\n\n            \n\n            \n                Extends\n            \n            \n                    Array\n            \n\n\n            \n    Index\n    \n        \n                \n                    \n                        Properties\n                    \n                \n                \n                    \n                        \n                            \n                                availPedals\n                            \n                            \n                                index\n                            \n                            \n                                ops\n                            \n                            \n                                    Public\n                                pds\n                            \n                        \n                    \n                \n\n                \n                    \n                        Methods\n                    \n                \n                \n                    \n                        \n                            \n                                addOperation\n                            \n                            \n                                chain\n                            \n                            \n                                chainArray\n                            \n                            \n                                getMap\n                            \n                            \n                                getMapOptions\n                            \n                            \n                                getOp\n                            \n                            \n                                opIsMapped\n                            \n                            \n                                pair\n                            \n                            \n                                pedalInSequencer\n                            \n                            \n                                pedalIsChained\n                            \n                            \n                                pedalIsMapped\n                            \n                            \n                                pedalIsPaired\n                            \n                            \n                                setMap\n                            \n                            \n                                unmap\n                            \n                        \n                    \n                \n\n\n\n\n\n                    \n                        \n                            Accessors\n                        \n                    \n                    \n                        \n                            \n                                \n                                    sequencer\n                                \n                            \n                        \n                    \n        \n    \n\n\n            \n    Constructor\n        \n            \n                \n                    \nconstructor(pds: PedalsService, seq: SequencerService)\n                    \n                \n                        \n                            \n                                Defined in src/app/player/provider/mappings.service.ts:45\n                            \n                        \n\n                \n                    \n                            \n                                    Parameters :\n                                    \n                                        \n                                            \n                                                Name\n                                                    Type\n                                                Optional\n                                            \n                                        \n                                        \n                                                \n                                                        pds\n                                                  \n                                                        \n                                                                        PedalsService\n                                                        \n                                                  \n                                                    \n                                                            No\n                                                    \n                                                    \n                                                \n                                                \n                                                        seq\n                                                  \n                                                        \n                                                                        SequencerService\n                                                        \n                                                  \n                                                    \n                                                            No\n                                                    \n                                                    \n                                                \n                                        \n                                    \n                            \n                    \n                \n            \n        \n\n\n            \n    \n    \n        Methods\n    \n    \n        \n            \n                \n                    \n                    \n                        addOperation\n                        \n                    \n                \n            \n            \n                \naddOperation(o: SingleOp, chain?: boolean)\n                \n            \n\n\n            \n                \n                    Defined in src/app/player/provider/mappings.service.ts:90\n                \n            \n\n\n            \n                \n\n                    \n                        Parameters :\n                        \n                        \n                            \n                                \n                                    Name\n                                    Type\n                                    Optional\n                                \n                            \n                            \n                                \n                                    o\n                                    \n                                                SingleOp\n                                    \n\n                                    \n                                        No\n                                    \n\n\n                                \n                                \n                                    chain\n                                    \n                                                boolean\n                                    \n\n                                    \n                                        Yes\n                                    \n\n\n                                \n                            \n                        \n                    \n                    \n                    \n                    \n                        Returns :         void\n\n                    \n                    \n                        \n                    \n                \n            \n        \n    \n    \n        \n            \n                \n                    \n                    \n                        chain\n                        \n                    \n                \n            \n            \n                \nchain(id: number, opName: string)\n                \n            \n\n\n            \n                \n                    Defined in src/app/player/provider/mappings.service.ts:149\n                \n            \n\n\n            \n                \n\n                    \n                        Parameters :\n                        \n                        \n                            \n                                \n                                    Name\n                                    Type\n                                    Optional\n                                \n                            \n                            \n                                \n                                    id\n                                    \n                                                number\n                                    \n\n                                    \n                                        No\n                                    \n\n\n                                \n                                \n                                    opName\n                                    \n                                                string\n                                    \n\n                                    \n                                        No\n                                    \n\n\n                                \n                            \n                        \n                    \n                    \n                    \n                    \n                        Returns :         void\n\n                    \n                    \n                        \n                    \n                \n            \n        \n    \n    \n        \n            \n                \n                    \n                    \n                        chainArray\n                        \n                    \n                \n            \n            \n                \nchainArray(id: number, ops: Array)\n                \n            \n\n\n            \n                \n                    Defined in src/app/player/provider/mappings.service.ts:162\n                \n            \n\n\n            \n                \n\n                    \n                        Parameters :\n                        \n                        \n                            \n                                \n                                    Name\n                                    Type\n                                    Optional\n                                \n                            \n                            \n                                \n                                    id\n                                    \n                                                number\n                                    \n\n                                    \n                                        No\n                                    \n\n\n                                \n                                \n                                    ops\n                                    \n                                            Array\n                                    \n\n                                    \n                                        No\n                                    \n\n\n                                \n                            \n                        \n                    \n                    \n                    \n                    \n                        Returns :         void\n\n                    \n                    \n                        \n                    \n                \n            \n        \n    \n    \n        \n            \n                \n                    \n                    \n                        getMap\n                        \n                    \n                \n            \n            \n                \ngetMap(id: number)\n                \n            \n\n\n            \n                \n                    Defined in src/app/player/provider/mappings.service.ts:99\n                \n            \n\n\n            \n                \n\n                    \n                        Parameters :\n                        \n                        \n                            \n                                \n                                    Name\n                                    Type\n                                    Optional\n                                \n                            \n                            \n                                \n                                    id\n                                    \n                                                number\n                                    \n\n                                    \n                                        No\n                                    \n\n\n                                \n                            \n                        \n                    \n                    \n                    \n                    \n                        Returns :         any\n\n                    \n                    \n                        \n                    \n                \n            \n        \n    \n    \n        \n            \n                \n                    \n                    \n                        getMapOptions\n                        \n                    \n                \n            \n            \n                \ngetMapOptions(p: number)\n                \n            \n\n\n            \n                \n                    Defined in src/app/player/provider/mappings.service.ts:65\n                \n            \n\n\n            \n                \n\n                    \n                        Parameters :\n                        \n                        \n                            \n                                \n                                    Name\n                                    Type\n                                    Optional\n                                \n                            \n                            \n                                \n                                    p\n                                    \n                                                number\n                                    \n\n                                    \n                                        No\n                                    \n\n\n                                \n                            \n                        \n                    \n                    \n                    \n                    \n                        Returns :         Array\n\n                    \n                    \n                        \n                    \n                \n            \n        \n    \n    \n        \n            \n                \n                    \n                    \n                        getOp\n                        \n                    \n                \n            \n            \n                \ngetOp(name: string)\n                \n            \n\n\n            \n                \n                    Defined in src/app/player/provider/mappings.service.ts:190\n                \n            \n\n\n            \n                \n\n                    \n                        Parameters :\n                        \n                        \n                            \n                                \n                                    Name\n                                    Type\n                                    Optional\n                                \n                            \n                            \n                                \n                                    name\n                                    \n                                                string\n                                    \n\n                                    \n                                        No\n                                    \n\n\n                                \n                            \n                        \n                    \n                    \n                    \n                    \n                        Returns :         SingleOp\n\n                    \n                    \n                        \n                    \n                \n            \n        \n    \n    \n        \n            \n                \n                    \n                    \n                        opIsMapped\n                        \n                    \n                \n            \n            \n                \nopIsMapped(opName: string)\n                \n            \n\n\n            \n                \n                    Defined in src/app/player/provider/mappings.service.ts:183\n                \n            \n\n\n            \n                \n\n                    \n                        Parameters :\n                        \n                        \n                            \n                                \n                                    Name\n                                    Type\n                                    Optional\n                                \n                            \n                            \n                                \n                                    opName\n                                    \n                                                string\n                                    \n\n                                    \n                                        No\n                                    \n\n\n                                \n                            \n                        \n                    \n                    \n                    \n                    \n                        Returns :         boolean\n\n                    \n                    \n                        \n                    \n                \n            \n        \n    \n    \n        \n            \n                \n                    \n                    \n                        pair\n                        \n                    \n                \n            \n            \n                \npair(id: number, opName: string)\n                \n            \n\n\n            \n                \n                    Defined in src/app/player/provider/mappings.service.ts:141\n                \n            \n\n\n            \n                \n\n                    \n                        Parameters :\n                        \n                        \n                            \n                                \n                                    Name\n                                    Type\n                                    Optional\n                                \n                            \n                            \n                                \n                                    id\n                                    \n                                                number\n                                    \n\n                                    \n                                        No\n                                    \n\n\n                                \n                                \n                                    opName\n                                    \n                                                string\n                                    \n\n                                    \n                                        No\n                                    \n\n\n                                \n                            \n                        \n                    \n                    \n                    \n                    \n                        Returns :         void\n\n                    \n                    \n                        \n                    \n                \n            \n        \n    \n    \n        \n            \n                \n                    \n                    \n                        pedalInSequencer\n                        \n                    \n                \n            \n            \n                \npedalInSequencer(id: number)\n                \n            \n\n\n            \n                \n                    Defined in src/app/player/provider/mappings.service.ts:207\n                \n            \n\n\n            \n                \n\n                    \n                        Parameters :\n                        \n                        \n                            \n                                \n                                    Name\n                                    Type\n                                    Optional\n                                \n                            \n                            \n                                \n                                    id\n                                    \n                                                number\n                                    \n\n                                    \n                                        No\n                                    \n\n\n                                \n                            \n                        \n                    \n                    \n                    \n                    \n                        Returns :         boolean\n\n                    \n                    \n                        \n                    \n                \n            \n        \n    \n    \n        \n            \n                \n                    \n                    \n                        pedalIsChained\n                        \n                    \n                \n            \n            \n                \npedalIsChained(id: number)\n                \n            \n\n\n            \n                \n                    Defined in src/app/player/provider/mappings.service.ts:202\n                \n            \n\n\n            \n                \n\n                    \n                        Parameters :\n                        \n                        \n                            \n                                \n                                    Name\n                                    Type\n                                    Optional\n                                \n                            \n                            \n                                \n                                    id\n                                    \n                                                number\n                                    \n\n                                    \n                                        No\n                                    \n\n\n                                \n                            \n                        \n                    \n                    \n                    \n                    \n                        Returns :         boolean\n\n                    \n                    \n                        \n                    \n                \n            \n        \n    \n    \n        \n            \n                \n                    \n                    \n                        pedalIsMapped\n                        \n                    \n                \n            \n            \n                \npedalIsMapped(id: number)\n                \n            \n\n\n            \n                \n                    Defined in src/app/player/provider/mappings.service.ts:197\n                \n            \n\n\n            \n                \n\n                    \n                        Parameters :\n                        \n                        \n                            \n                                \n                                    Name\n                                    Type\n                                    Optional\n                                \n                            \n                            \n                                \n                                    id\n                                    \n                                                number\n                                    \n\n                                    \n                                        No\n                                    \n\n\n                                \n                            \n                        \n                    \n                    \n                    \n                    \n                        Returns :         boolean\n\n                    \n                    \n                        \n                    \n                \n            \n        \n    \n    \n        \n            \n                \n                    \n                    \n                        pedalIsPaired\n                        \n                    \n                \n            \n            \n                \npedalIsPaired(id: number)\n                \n            \n\n\n            \n                \n                    Defined in src/app/player/provider/mappings.service.ts:212\n                \n            \n\n\n            \n                \n\n                    \n                        Parameters :\n                        \n                        \n                            \n                                \n                                    Name\n                                    Type\n                                    Optional\n                                \n                            \n                            \n                                \n                                    id\n                                    \n                                                number\n                                    \n\n                                    \n                                        No\n                                    \n\n\n                                \n                            \n                        \n                    \n                    \n                    \n                    \n                        Returns :         boolean\n\n                    \n                    \n                        \n                    \n                \n            \n        \n    \n    \n        \n            \n                \n                    \n                    \n                        setMap\n                        \n                    \n                \n            \n            \n                \nsetMap(p: number, m: PedalAction)\n                \n            \n\n\n            \n                \n                    Defined in src/app/player/provider/mappings.service.ts:107\n                \n            \n\n\n            \n                \n\n                    \n                        Parameters :\n                        \n                        \n                            \n                                \n                                    Name\n                                    Type\n                                    Optional\n                                \n                            \n                            \n                                \n                                    p\n                                    \n                                                number\n                                    \n\n                                    \n                                        No\n                                    \n\n\n                                \n                                \n                                    m\n                                    \n                                                PedalAction\n                                    \n\n                                    \n                                        No\n                                    \n\n\n                                \n                            \n                        \n                    \n                    \n                    \n                    \n                        Returns :         void\n\n                    \n                    \n                        \n                    \n                \n            \n        \n    \n    \n        \n            \n                \n                    \n                    \n                        unmap\n                        \n                    \n                \n            \n            \n                \nunmap(id: number)\n                \n            \n\n\n            \n                \n                    Defined in src/app/player/provider/mappings.service.ts:127\n                \n            \n\n\n            \n                \n\n                    \n                        Parameters :\n                        \n                        \n                            \n                                \n                                    Name\n                                    Type\n                                    Optional\n                                \n                            \n                            \n                                \n                                    id\n                                    \n                                                number\n                                    \n\n                                    \n                                        No\n                                    \n\n\n                                \n                            \n                        \n                    \n                    \n                    \n                    \n                        Returns :         void\n\n                    \n                    \n                        \n                    \n                \n            \n        \n    \n\n            \n    \n    \n        Properties\n    \n    \n        \n            \n                \n                    \n                    \n                        availPedals\n                        \n                    \n                \n            \n                \n                    \n                        Type :     Array\n\n                    \n                \n                    \n                        \n                                Defined in src/app/player/provider/mappings.service.ts:41\n                        \n                    \n\n\n        \n    \n    \n        \n            \n                \n                    \n                    \n                        index\n                        \n                    \n                \n            \n                \n                    \n                        Type :         MappingIndex\n\n                    \n                \n                    \n                        \n                                Defined in src/app/player/provider/mappings.service.ts:45\n                        \n                    \n\n\n        \n    \n    \n        \n            \n                \n                    \n                    \n                        ops\n                        \n                    \n                \n            \n                \n                    \n                        Type :         Array\n\n                    \n                \n                \n                    \n                        Default value : []\n                    \n                \n                    \n                        \n                                Defined in src/app/player/provider/mappings.service.ts:40\n                        \n                    \n\n\n        \n    \n    \n        \n            \n                \n                    \n                    \n                            Public\n                        pds\n                        \n                    \n                \n            \n                \n                    \n                        Type :         PedalsService\n\n                    \n                \n                    \n                        \n                                Defined in src/app/player/provider/mappings.service.ts:48\n                        \n                    \n\n\n        \n    \n\n\n            \n    \n        Accessors\n    \n        \n            \n                \n                    \n                        \n                        sequencer\n                    \n                \n\n                \n                    \n                        getsequencer()\n                    \n                \n                            \n                                \n                                    Defined in src/app/player/provider/mappings.service.ts:59\n                                \n                            \n\n            \n        \n\n    \n\n\n    \n        import { Injectable } from '@angular/core';\nimport { Pedal, PedalsService } from './pedals.service';\nimport { PlayerService } from '../player.service';\nimport { PlayerOp as SingleOp, PedalOpMapping,\n  ChainOp, PairedOp, OpSequencer,\n  makeChainOp, makePairedOp, makeOpSequencer,\n  MappingShapes, MappingType, PedalAction\n} from '../model/op_mappings';\nimport { SequencerService } from './sequencer.service';\n\ntype PedalOpMap = {\n  [key: number]: { type: MappingType, i: number }\n}\n\ntype MappingIndex = {\n  [m in keyof MappingShapes]: Array;//Array;\n}\n\nfunction newMapIndex(): MappingIndex {\n  return {\n    'pairing': [],\n    'chain': [],\n    'sequencer': [],\n  }\n}\n\n/**\n * @class MappingsService (was PedalConfig class)\n * @desc A collection of key: value entries where keys (numbers)\n * correspond to pedal ID's, and values (PedalActions) correspond \n * to a mapped SingleOp, ChainOp, or OpSequencer.\n * @todo I WILL ASSUME THAT IF MULTIPLE PEDALS ARE MAPPED TO THE SAME THING, THE KEYS WILL POINT TO THE SAME OBJECT\n */\n\n@Injectable({\n  providedIn: 'root'\n})\nexport class MappingsService extends Array {\n  // pedals: Array;\n  ops: Array = [];\n  availPedals: Array;\n  // array: PedalOpMap = [];  // pedal ID (number)  op (PedalAction)\n  \n  // where all of the actual OpPairing, OpChain, OpSequencer objects end up so they are only created once\n  index: MappingIndex;\n\n  constructor(\n  public pds: PedalsService,\n  private seq: SequencerService,\n) { \n    super();\n    this.ops = [];\n    // this.availPedals = pds.pedals.array((p) => p.id);\n\n    // this.array = [];\n    // this.index = newMapIndex();\n  }\n\n  get sequencer(): OpSequencer {\n    let seq = this.filter((m) => m.name == \"sequencer\") as Array;\n    if (seq.length > 0) return seq[0];\n    else return undefined as OpSequencer;\n  }\n\n  getMapOptions(p: number): Array {\n    let res;\n    // if (this.pedalIsPaired(p)) {\n    //   console.log(\"filtering\");\n    //   console.log(this.getMap(p));\n    //   res = this.ops.filter(op => {\n    //   op.name != (this.getMap(p) as SingleOp).name;\n    // });\n    // } else { \n      res = this.ops; \n    // }\n    // console.log(res);\n    return res;\n  }\n\n  // onAddPedal(p: Pedal) {\n  //   this.availPedals.push(p.id);\n  // }\n\n  // onRemPedal() {\n  //   // this.pedals.pop();\n  //   this.availPedals.filter((id) => id != this.pedals.length);\n  // }\n\n  // register an operation from the Player to the options for mapping\n  addOperation(o: SingleOp, chain?: boolean) {\n    o.id = this.ops.length;\n    this.ops.push(o);\n    if (chain) { // chainable?\n      o.chain = chain;\n    };\n  }\n\n  // I don't know if I'm making this too complicated but I don't trust TypeScript/Javascript passing things by reference\n  getMap(id: number) {\n    return this[id];\n    // let x = this.array[id];\n    // if (x) {\n    //   return this.index[x.type][x.i];\n    // } else return undefined;\n  }\n\n  setMap(p: number, m: PedalAction) {\n    this[p] = m;\n    // if (this.getMap[p]) this.unmap(p);\n    \n    // const copyMap = ((src: number, dst: number) => {\n    //   if (this.getMap(dst)) this.unmap(dst);\n    //   this.array[dst] = this.array[src];\n    // }).bind(this);\n\n    // let ind = this.index[type].push(m) - 1;\n    // this.array[p] = { type: type, i: ind };\n    // if (type === 'sequencer') { // p_conf had been mapped\n    //   let r = m as OpSequencer;\n\n    //   // set mappings for the other roulette pedals to the same\n    //   copyMap(p, r.p_select_a);\n    //   if (r.p_select_b) copyMap(r.p_select_b);\n    // }\n  }\n  \n  unmap(id: number) {\n    console.log(`unmapping pedal ${id}`);\n    // let op = this.pairs[id];\n    // this.unpairedOps.splice(op.id, 0, op);\n    // let m = this.array[id];\n    // let u = this.index[m.type].splice(m.i, 1);\n    // if (m.type == \"sequencer\") {\n    //   let roul =  u[0];\n    //   delete this[roul.p_select_a];\n    //   if (roul.p_select_b) delete this[roul.p_select_b];\n    // }\n    delete this[id];\n  }\n\n  pair(id: number, opName: string) {\n    console.log(this.ops);\n    let o = this.getOp(opName);\n    console.log(o);\n    // let thisOp = this.unpairedOps.splice(o, 1);\n    this.setMap(id, makePairedOp(id, o));\n  }\n\n  chain(id: number, opName: string) {\n    let o = this.ops[this.ops.findIndex((op) => op.name == opName)];\n    if (this.pedalIsChained(id)) {\n      let curr_ops = ( this.getMap(id)).ops;\n      this.setMap(id, makeChainOp(curr_ops.concat([o]), id));\n    } else if (this.pedalIsPaired(id)) {\n      let first_op = ( this.getMap(id)).op;\n      this.setMap(id, makeChainOp([first_op].concat([o]), id));\n    } else {\n      this.setMap(id, makeChainOp([o], id));\n    }\n  }\n\n  chainArray(id: number, ops: Array) {\n    let op_array = ops.map((name) => this.ops[this.ops.findIndex((op) => op.name == name)]);\n    if (this.pedalIsChained(id)) { \n      // if pedal already has a chain, add ops to the chain\n      let curr_ops = ( this.getMap(id)).ops;\n      this.setMap(id, makeChainOp(curr_ops.concat(op_array), id));\n    } else if (this.pedalIsPaired(id)) {\n      // if pedal is paired, you can turn it into a chain\n      let first_op = ( this.getMap(id)).op;\n      this.setMap(id, makeChainOp([first_op].concat(op_array), id));\n    } else {\n      // pedal doesn't have anything mapped, just add a new chain\n      this.setMap(id, makeChainOp(op_array, id));\n    }\n  }\n\n  // makeOpSequencer(conf: number = 0, sel_fwd: number = 1, sel_back?: number, start_ops?: Array) {\n  //   this.setMap(\"sequencer\", conf, makeOpSequencer(conf, sel_fwd, sel_back, start_ops));\n  // }\n\n  // will return true if an op is mapped to a pedal in any way\n  opIsMapped(opName: string): boolean {\n    // let allMaps = this.index[\"roulette\"].concat(this.index[\"chain\"], this.index[\"pairing\"]);\n    if (this.filter((m) => m.name.includes(opName)).length > 0) {\n      return true;\n    } else return false;\n  }\n\n  getOp(name: string): SingleOp {\n    console.log(name);\n    let res = this.ops.filter((op) => op.name == name)[0];\n    console.log(res);\n    return res;\n  }\n\n  pedalIsMapped(id: number) {\n    if (this.getMap(id)) return true;\n    return false;\n  }\n\n  pedalIsChained(id: number) {\n    if (this[id].name.startsWith('ch')) { return true; }\n    else {return false; }\n  }\n\n  pedalInSequencer(id: number) {\n    if (this[id].name.startsWith('sequencer')) { return true; }\n    else { return false; }\n  }\n\n  pedalIsPaired(id: number) {\n    return (this.pedalIsMapped(id) && !this.pedalIsChained(id) && !this.pedalInSequencer(id));\n  }\n}\n\n    \n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n                   \n    \n         results matching \"\"\n        \n    \n    \n        No results matching \"\"\n    \n\n"},"directives/MarqueeComponent.html":{"url":"directives/MarqueeComponent.html","title":"directive - MarqueeComponent","body":"\n                   \n\n\n\n\n\n\n\n\n  Directives\n  MarqueeComponent\n\n\n\n        \n            Info\n        \n        \n            Source\n        \n\n\n\n    \n        \n            File\n        \n        \n            src/app/mixer/palette/marquee/marquee.component.ts\n        \n\n\n\n\n            \n                Implements\n            \n            \n                            OnInit\n            \n\n\n        \n            Metadata\n            \n                \n\n                    \n                        Selector\n                        app-marquee\n                    \n\n                \n            \n        \n\n            \n    Index\n    \n        \n                \n                    \n                        Properties\n                    \n                \n                \n                    \n                        \n                            \n                                active\n                            \n                            \n                                bounds\n                            \n                            \n                                draft\n                            \n                            \n                                filter\n                            \n                            \n                                id\n                            \n                            \n                                scale\n                            \n                            \n                                start\n                            \n                        \n                    \n                \n\n                \n                    \n                        Methods\n                    \n                \n                \n                    \n                        \n                            \n                                    Public\n                                getDraftId\n                            \n                            \n                                ngOnInit\n                            \n                            \n                                    Public\n                                setPositionAndSize\n                            \n                        \n                    \n                \n\n\n\n\n\n        \n    \n\n\n\n\n\n\n\n            \n    \n    \n        Methods\n    \n    \n        \n            \n                \n                    \n                    \n                        Public\n                        getDraftId\n                        \n                    \n                \n            \n            \n                \n                    \n                    getDraftId()\n                \n            \n\n\n            \n                \n                    Defined in src/app/mixer/palette/marquee/marquee.component.ts:31\n                \n            \n\n\n            \n                \n\n                    \n                        Returns :         any\n\n                    \n                \n            \n        \n    \n    \n        \n            \n                \n                    \n                    \n                        ngOnInit\n                        \n                    \n                \n            \n            \n                \nngOnInit()\n                \n            \n\n\n            \n                \n                    Defined in src/app/mixer/palette/marquee/marquee.component.ts:27\n                \n            \n\n\n            \n                \n\n                    \n                        Returns :         void\n\n                    \n                \n            \n        \n    \n    \n        \n            \n                \n                    \n                    \n                        Public\n                        setPositionAndSize\n                        \n                    \n                \n            \n            \n                \n                    \n                    setPositionAndSize(bounds: Bounds)\n                \n            \n\n\n            \n                \n                    Defined in src/app/mixer/palette/marquee/marquee.component.ts:36\n                \n            \n\n\n            \n                \n\n                    \n                        Parameters :\n                        \n                        \n                            \n                                \n                                    Name\n                                    Type\n                                    Optional\n                                \n                            \n                            \n                                \n                                    bounds\n                                    \n                                                Bounds\n                                    \n\n                                    \n                                        No\n                                    \n\n\n                                \n                            \n                        \n                    \n                    \n                    \n                    \n                        Returns :         void\n\n                    \n                    \n                        \n                    \n                \n            \n        \n    \n\n            \n    \n    \n        Properties\n    \n    \n        \n            \n                \n                    \n                    \n                        active\n                        \n                    \n                \n            \n                \n                    \n                        Default value : false\n                    \n                \n                    \n                        \n                                Defined in src/app/mixer/palette/marquee/marquee.component.ts:23\n                        \n                    \n\n\n        \n    \n    \n        \n            \n                \n                    \n                    \n                        bounds\n                        \n                    \n                \n            \n                \n                    \n                        Type :         Bounds\n\n                    \n                \n                \n                    \n                        Default value : {\n    topleft: {x: 0, y:0},\n    width: 0,\n    height: 0\n  }\n                    \n                \n                    \n                        \n                                Defined in src/app/mixer/palette/marquee/marquee.component.ts:16\n                        \n                    \n\n\n        \n    \n    \n        \n            \n                \n                    \n                    \n                        draft\n                        \n                    \n                \n            \n                \n                    \n                        Type :         Draft\n\n                    \n                \n                \n                    \n                        Default value : initDraftWithParams({ud_name: \"selection\"})\n                    \n                \n                    \n                        \n                                Defined in src/app/mixer/palette/marquee/marquee.component.ts:14\n                        \n                    \n\n\n        \n    \n    \n        \n            \n                \n                    \n                    \n                        filter\n                        \n                    \n                \n            \n                \n                    \n                        Type :         string\n\n                    \n                \n                \n                    \n                        Default value : \"or\"\n                    \n                \n                    \n                        \n                                Defined in src/app/mixer/palette/marquee/marquee.component.ts:25\n                        \n                    \n\n\n        \n    \n    \n        \n            \n                \n                    \n                    \n                        id\n                        \n                    \n                \n            \n                \n                    \n                        Type :         number\n\n                    \n                \n                    \n                        \n                                Defined in src/app/mixer/palette/marquee/marquee.component.ts:13\n                        \n                    \n\n\n        \n    \n    \n        \n            \n                \n                    \n                    \n                        scale\n                        \n                    \n                \n            \n                \n                    \n                        Type :         number\n\n                    \n                \n                    \n                        \n                                Defined in src/app/mixer/palette/marquee/marquee.component.ts:24\n                        \n                    \n\n\n        \n    \n    \n        \n            \n                \n                    \n                    \n                        start\n                        \n                    \n                \n            \n                \n                    \n                        Type :         Interlacement\n\n                    \n                \n                \n                    \n                        Default value : {i: 0, j:0, si: 0}\n                    \n                \n                    \n                        \n                                Defined in src/app/mixer/palette/marquee/marquee.component.ts:22\n                        \n                    \n\n\n        \n    \n\n\n\n    \n\n\n    \n        import { Directive, OnInit } from '@angular/core';\nimport { initDraftWithParams } from '../../../core/model/drafts';\nimport { Draft } from '../../../core/model/datatypes';\nimport { Point, Bounds, Interlacement } from '../../../core/model/datatypes';\n\n@Directive({\n  selector: 'app-marquee'\n})\n\n\nexport class MarqueeComponent implements OnInit{\n\n  id: number;\n  draft: Draft = initDraftWithParams({ud_name: \"selection\"});\n\n  bounds:Bounds = {\n    topleft: {x: 0, y:0},\n    width: 0,\n    height: 0\n  }\n\n  start:Interlacement = {i: 0, j:0, si: 0};\n  active = false;\n  scale: number; \n  filter = \"or\"\n\n  ngOnInit(){\n    console.log(this.draft.id);\n  }\n\n  public getDraftId(){\n    return this.draft.id;\n  }\n\n\n  public setPositionAndSize(bounds: Bounds){\n    this.bounds  = bounds;\n  }\n\n\n\n}\n\n    \n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n                   \n    \n         results matching \"\"\n        \n    \n    \n        No results matching \"\"\n    \n\n"},"interfaces/MaterialTypes.html":{"url":"interfaces/MaterialTypes.html","title":"interface - MaterialTypes","body":"\n                   \n\n\n\n\n\n\n\n\n\n\n\n\n\n\n  Interfaces\n  \n  MaterialTypes\n\n\n\n        \n            Info\n        \n        \n            Source\n        \n\n\n\n    \n        \n            File\n        \n        \n            src/app/core/model/datatypes/selectlists.ts\n        \n\n\n\n\n        \n            Index\n            \n                \n                    \n                        \n                            Properties\n                        \n                    \n                    \n                        \n                            \n                                \n                                        \n                                            value\n                                        \n                                \n                                \n                                        \n                                            viewValue\n                                        \n                                \n                            \n                        \n                    \n                \n            \n        \n\n\n\n            \n                Properties\n                    \n                        \n                                \n                                    \n                                        \n                                        value\n                                            \n                                                \n                                            \n                                        \n                                    \n                                \n                                \n                                    \n                                        value:         number\n\n                                    \n                                \n\n\n                                    \n                                        \n                                            Type :         number\n\n                                        \n                                    \n\n\n\n\n\n                        \n                    \n                    \n                        \n                                \n                                    \n                                        \n                                        viewValue\n                                            \n                                                \n                                            \n                                        \n                                    \n                                \n                                \n                                    \n                                        viewValue:         string\n\n                                    \n                                \n\n\n                                    \n                                        \n                                            Type :         string\n\n                                        \n                                    \n\n\n\n\n\n                        \n                    \n            \n    \n\n\n    \n        export interface LoomTypes {\n    value: string;\n    viewValue: string;\n  }\n  \n  export interface MaterialTypes {\n    value: number;\n    viewValue: string;\n  }\n  \n  export interface DensityUnits {\n    value: string;\n    viewValue: string;\n  }\n  \n  export interface ViewModes {\n    value: string;\n    viewValue: string;\n  }\n  \n  \n  /**\n   * Stores the icons and language for determining different \n   * modes within which the mouse points are handled\n   * @param value - reference \n   * @param viewValue - text shown to users\n   * @param icon\n   * @param children, menu to nest within this\n   * @param selected boolean to show if it is selected\n   */\n  export interface DesignMode {\n    value: string;\n    viewValue: string;\n    icon: string;\n    children: Array;\n    selected: boolean;\n  }\n  \n    \n\n\n\n\n\n\n\n\n\n                   \n    \n         results matching \"\"\n        \n    \n    \n        No results matching \"\"\n    \n\n"},"classes/Merge.html":{"url":"classes/Merge.html","title":"class - Merge","body":"\n                   \n\n\n\n\n\n\n\n\n\n\n\n\n\n  Classes\n  Merge\n\n\n\n        \n            Info\n        \n        \n            Source\n        \n\n\n\n    \n        \n            File\n        \n        \n            src/app/mixer/model/operation/topology.ts\n        \n\n\n            \n                Description\n            \n            \n                Operation that takes many (N) inputs and generates one output draft.\n\nINPUT: Array of Drafts\nOUTPUT: exactly one Draft\n\n\n            \n\n\n            \n                Implements\n            \n            \n                            TopologyDef\n            \n\n\n            \n    Index\n    \n        \n                \n                    \n                        Properties\n                    \n                \n                \n                    \n                        \n                            \n                                input\n                            \n                            \n                                output\n                            \n                            \n                                type\n                            \n                        \n                    \n                \n\n\n\n\n\n\n        \n    \n\n\n\n            \n    \n    \n        Properties\n    \n    \n        \n            \n                \n                    \n                    \n                        input\n                        \n                    \n                \n            \n                \n                    \n                        Type :         InletDrafts | Array\n\n                    \n                \n                    \n                        \n                                Defined in src/app/mixer/model/operation/topology.ts:65\n                        \n                    \n\n\n        \n    \n    \n        \n            \n                \n                    \n                    \n                        output\n                        \n                    \n                \n            \n                \n                    \n                        Type :         Draft\n\n                    \n                \n                    \n                        \n                                Defined in src/app/mixer/model/operation/topology.ts:65\n                        \n                    \n\n\n        \n    \n    \n        \n            \n                \n                    \n                    \n                        type\n                        \n                    \n                \n            \n                    \n                        \n                                Defined in src/app/mixer/model/operation/topology.ts:65\n                        \n                    \n\n\n        \n    \n\n\n\n\n\n\n\n\n    \n\n\n    \n        import { Draft } from \"../../../core/model/datatypes\";\nimport { ParamValue, OperationParam as OpParam, getParamValues } from \"./params\";\nimport { OperationInlet as OpInlet, InletDrafts } from \"./inlets\";\n\n/**\n* At its heart, an Operation is a very fancy function that outputs a Draft or several Drafts.\n* The function itself is perform(), and the Operation can take inputs in the form of \n* Drafts (inlets) or Parameters (params).\n*/\n\n/** \n* Types that an Operation's perform() function can handlle as input/output\n*/\n\n/** @type Union of types that can serve as input to Operation perform() functions. */\nexport type PerformDraftInput = InletDrafts | Array | Draft | null;\n\ntype MultiDraftInput = InletDrafts | Array;\n\n/** @type Union of types that Operation perform() functions can output. */\nexport type PerformOutput = Array | Draft;\n\n/**\n * OPERATION TOPOLOGY\n * Topology refers to the shape of the Operation in terms of its\n * number of input and output Drafts. Classifies Operations.\n */\n\nexport const TopologyName = {\n  pipe: 'pipe', \n  seed: 'seed', \n  merge: 'merge', \n  branch: 'branch', \n  bus: 'bus'\n} as const;\nexport type TopologyName = keyof typeof TopologyName;\n\ninterface TopologyDef { type: TopologyName; input: PerformDraftInput; output: PerformOutput; };\n\n/**\n* @class\n* Operation that can generate a draft with no inputs, may take an optional input\n* @method perform OpPerform function: \n* - INPUT: zero or one Draft\n* - OUTPUT: exactly one Draft\n*/\nexport class Seed implements TopologyDef { type: 'seed'; input: Draft | null; output: Draft; };\n\n/**\n* @class\n* Operation that takes one input and generates one output draft. \n* @method perform OpPerform function: \n* - INPUT: exactly one Draft\n* - OUTPUT: exactly one Draft\n*/\nexport class Pipe implements TopologyDef { type: 'pipe'; input: Draft; output: Draft; };\n\n/**\n* @class\n* Operation that takes many (N) inputs and generates one output draft.\n* @method perform OpPerform function: \n* - INPUT: Array of Drafts\n* - OUTPUT: exactly one Draft\n*/\nexport class Merge implements TopologyDef { type: 'merge'; input: InletDrafts | Array; output: Draft; };\n\n/**\n* @class\n* Operation that takes one input and generates many (N) output drafts.\n* @method perform OpPerform function:\n* - INPUT: exactly one Draft\n* - OUTPUT: Array of Drafts\n*/\nexport class Branch implements TopologyDef { type: 'branch'; input: Draft; output: Array; };\n\n/**\n* CURRENTLY UNUSED\n* @class\n* Operation that takes many (N) inputs and generates many (M) output drafts.\n* Number of inputs does not necessarily match number of outputs (N ?= M).\n* @method perform OpPerform function:  \n* - INPUT: Array of Drafts\n* - OUTPUT: Array of Drafts\n*/\nexport class Bus implements TopologyDef { type: 'bus'; input: Array | InletDrafts; output: Array; };\n\ntype TopologyIndex = {\n  'seed': Seed,\n  'pipe': Pipe,\n  'merge': Merge,\n  'branch': Branch,\n  'bus': Bus\n}\ntype OpTopology = TopologyIndex[TopologyName];\n\n/**\n * OPERATION CONSTRAINT\n * A Constraint on an Operation classifies it based on its\n * input requirements (both Drafts and Params).\n */\n\nexport const ConstraintOptions = {\n  req: 'req', \n  opt: 'opt', \n  none: 'none'\n} as const;\nexport type ConstraintOptions = keyof typeof ConstraintOptions;\n\nexport const ConstraintName = {\n  no_drafts: { input_drafts: 'none', input_params: 'req' }, \n  no_params: { input_drafts: 'req', input_params: 'none' }, \n  drafts_opt: { input_drafts: 'opt', input_params: 'req' }, \n  params_opt: { input_drafts: 'req', input_params: 'opt' }, \n  all_req: {input_drafts: 'req', input_params: 'req' },\n} as const;\ntype ConstraintName = keyof typeof ConstraintName;\n\ntype ConstraintDefs = {\n  [C in keyof typeof ConstraintName]: {\n    constraint: C;\n    input_drafts: typeof ConstraintName[C][\"input_drafts\"];\n    input_params: typeof ConstraintName[C][\"input_params\"];\n  }\n}\n\nexport type NoDrafts = ConstraintDefs[\"no_drafts\"];\nexport type NoParams = ConstraintDefs[\"no_params\"];\nexport type DraftsOptional = ConstraintDefs[\"drafts_opt\"];\nexport type ParamsOptional = ConstraintDefs[\"params_opt\"];\nexport type AllRequired = ConstraintDefs[\"all_req\"];\n\ntype ConstraintIndex = {\n  'no_drafts': NoDrafts, // does not accept input drafts\n  'no_params': NoParams, // does not accept params\n  'drafts_opt': DraftsOptional, // can take no params -- has default values\n  'params_opt': ParamsOptional, // can take zero input drafts\n  'all_req': AllRequired, // both inputs and params required\n}\ntype OpConstraint = ConstraintIndex[ConstraintName]; \n\n/** \n* Generic types for perform() functions, describing options \n* for input draft multiplicity (0, 1, N) and param requirement \n*/\n\ntype NoDraftsPerform = {(params: Array): Topo[\"output\"]};\ntype NoParamsPerform = {(inputs: Topo[\"input\"]): Topo[\"output\"]};\ntype ParamsOptionalPerform = {(inputs: Topo[\"input\"], params?: Array): Topo[\"output\"]}; \ntype DraftsOptionalPerform = {(params: Array, inputs?: Topo[\"input\"]): Topo[\"output\"]};  \ntype AllRequiredPerform = {(inputs: Topo[\"input\"], params: Array): Topo[\"output\"]};  \n\ntype PerformCallSigs = {\n  no_drafts: { [Topo in keyof TopologyIndex]: NoDraftsPerform; },\n  no_params: { [Topo in keyof TopologyIndex]: NoParamsPerform; },\n  drafts_opt: { [Topo in keyof TopologyIndex]: DraftsOptionalPerform; },\n  params_opt: { [Topo in keyof TopologyIndex]: ParamsOptionalPerform; },\n  all_req: { [Topo in keyof TopologyIndex]: AllRequiredPerform; }\n}\n\n/**\n * @interface OpClassifier\n * Key-value pairs for an Operation's Topology and Constraint.\n */\ninterface OpClassifier {\n  type: Topo[\"type\"] | '';\n  input_drafts: Constraint[\"input_drafts\"] | '';\n  input_params: Constraint[\"input_params\"] | '';\n}\n\n/** @type User-defined descriptive strings for any Operation. */\ntype OperationDescriptors = { name: string, displayname: string, dx: string };\n\n/**\n* A standard Operation's metadata -- i.e. everything not the perform() function\n* @param name the internal name of this opearation (CHANGING THESE WILL BREAK LEGACY VERSIONS)\n* @param displayname the name to show upon this operation\n* @param dx the description of this operation\n* @param max_inputs the maximum number of inputs (drafts) allowed directly into this operation\n* @param params the parameters associated with this operation\n* @method perform an OpPerform function\n*/\nexport interface OperationProperties extends OperationDescriptors {\n  max_inputs: number,\n  default_params?: Array;\n  params: Array,\n}\n\n/**\n * @type A function that serves as the perform() method for an Operation. \n * This generic type requires two type parameters:\n * @param Topo one of the PerformInput types\n * @param Constraint one of the PerformOutput types\n *\n * OpPerform to give call signature for perform() function \n * Topo  = Seed | Pipe | Merge | Branch | Bus\n * Constraint = NoDrafts | NoParams | DraftsOptional | ParamsOptional | AllRequired\n */\nexport type OpPerform = PerformCallSigs[Constraint[\"constraint\"]][Topo[\"type\"]];\n// type PerformArgs = Parameters>;\n\n/** TODO doublecheck inlets have been added correctly (fields for input drafts) */\nexport class BaseOp implements OperationProperties {\n  name: string;\n  old_names: Array;\n  displayname: string;\n  dx: string;\n  params: Array;\n  inlets: Array;\n  default_params?: Array;\n  max_inputs: number;\n  classifier: OpClassifier;\n  perform: OpPerform;\n\n  /** @constructor create an Operation using an object literal (keys and values) */\n  constructor (args: OpConstructorArgs);\n  /** @constructor create an Operation using direct arguments in the constructor (values only) */\n  constructor (...args: OpConstructorArray);\n  constructor (name: string, displayname: string, dx: string, perform: OpPerform);\n  constructor (name: string, displayname: string, dx: string, params: Array, perform: OpPerform);\n  constructor (nameOrArgs: any, displayname?: string, dx?: string, performOrParams?: OpPerform | Array, performWithParams?: OpPerform) {\n    // console.log((nameOrArgs.name != undefined));\n    this.classifier = { type: '', input_drafts: '', input_params: '' };\n    if (nameOrArgs.name) {\n      let args = nameOrArgs;\n      this.name = args.name;\n      this.displayname = args.displayname;\n      this.dx = args.dx;\n      this.perform = args.perform;\n      if (args.params) this.params = args.params;\n      else this.params = [];\n      if (args.inlets) this.inlets = args.inlets;\n      else this.inlets = [];\n    } else {\n      this.name = nameOrArgs;\n      this.displayname = displayname;\n      this.dx = dx;\n      if (performWithParams) {\n        let params = > performOrParams;\n        this.params = params;\n        this.default_params = getParamValues(params);\n        this.perform = performWithParams;\n      } else {\n        this.params = [];\n        this.perform = > performOrParams;\n      }\n    }\n  }\n\n  constrain(c: ConstraintName): void {\n    if (c == 'no_drafts') { this.max_inputs = 0; this.inlets = []; }\n    this.classifier.input_drafts = ConstraintName[c][\"input_drafts\"]; \n    this.classifier.input_params = ConstraintName[c][\"input_params\"];\n  }\n\n  type(t: TopologyName): BaseOp {\n    this.classifier.type = t;\n    return this;\n  }\n}\n\ntype ConstructorArgKeysIndex = {\n  [C in keyof ConstraintIndex]: C extends \"no_params\" ? {\n    [T in keyof TopologyIndex]: {\n      name: string, displayname: string, dx: string, old_names: string[],\n      inlets: OpInlet[], perform: OpPerform\n    }\n  } : C extends \"no_drafts\" ? {\n    [T in keyof TopologyIndex]: {\n      name: string, displayname: string, dx: string, old_names: string[],\n      params: OpParam[], perform: OpPerform\n    }\n  } : {\n    [T in keyof TopologyIndex]: {\n      name: string, displayname: string, dx: string, old_names: string[],\n      params: OpParam[], inlets: OpInlet[],\n      perform: OpPerform\n    }\n  }\n}\n\ntype ConstructorArrayIndex = {\n  [C in keyof ConstraintIndex]: C extends \"no_params\" ? {\n    [T in keyof TopologyIndex]: [\n      name: string, displayname: string, dx: string, old_names: string[],\n      inlets: OpInlet[], perform: OpPerform\n    ]\n  } : C extends \"no_drafts\" ? {\n    [T in keyof TopologyIndex]: [\n      name: string, displayname: string, dx: string, old_names: string[],\n      params: OpParam[], perform: OpPerform\n    ]\n  } : {\n    [T in keyof TopologyIndex]: [\n      name: string, displayname: string, dx: string, old_names: string[],\n      params: OpParam[], inlets: OpInlet[],\n      perform: OpPerform\n    ]\n  }\n}\n\ntype OpConstructorArgKeys = \nConstructorArgKeysIndex[Constraint[\"constraint\"]][Topo[\"type\"]];\n\ntype OpConstructorArray = \nConstructorArrayIndex[Constraint[\"constraint\"]][Topo[\"type\"]];\n\ntype OpConstructorArgs = \nOpConstructorArgKeys | OpConstructorArray;\n\n// use factory design pattern to apply classifiers to BaseOp?? Is this too convoluted\n// https://refactoring.guru/design-patterns/abstract-factory/typescript\nclass AbstractOpFactory {\n  NoDrafts(args: OpConstructorArgKeys): BaseOp;\n  NoDrafts(...args: OpConstructorArray): BaseOp;\n  NoDrafts(...args: any) {\n    let op = new BaseOp(...args);\n    op.constrain(\"no_drafts\");\n    return op;\n  }\n\n  NoParams(args: OpConstructorArgKeys): BaseOp;\n  NoParams(...args: OpConstructorArray): BaseOp;\n  NoParams(...args: any) {\n    let op = new BaseOp(...args);\n    op.constrain(\"no_params\");\n    return op;\n  }\n\n  DraftsOptional(args: OpConstructorArgKeys): BaseOp;\n  DraftsOptional(...args: OpConstructorArray): BaseOp;\n  DraftsOptional(...args: any) {\n    let op = new BaseOp(...args);\n    op.constrain(\"drafts_opt\");\n    return op;\n  }\n\n  ParamsOptional(args: OpConstructorArgKeys): BaseOp;\n  ParamsOptional(...args: OpConstructorArray): BaseOp;\n  ParamsOptional(...args: any) {\n    let op = new BaseOp(...args);\n    op.constrain(\"params_opt\");\n    return op;\n  }\n\n  AllRequired(args: OpConstructorArgKeys): BaseOp;\n  AllRequired(...args: OpConstructorArray): BaseOp;\n  AllRequired(...args: any) {\n    let op = new BaseOp(...args);\n    op.constrain(\"all_req\");\n    return op;\n  }\n}\n\n// combine with mix-ins design pattern (link: TypeScript docs website)\nfunction makeTopoFactory(topo: TopologyName) {\n  return class TopologyFactory extends AbstractOpFactory {\n    static base = new AbstractOpFactory();\n    \n    static NoDrafts(args: OpConstructorArgKeys): BaseOp;\n    static NoDrafts(...args: OpConstructorArray): BaseOp;\n    static NoDrafts(...args: any) {\n      return this.base.NoDrafts(...args).type(topo);\n    }\n\n    static NoParams(args: OpConstructorArgKeys): BaseOp;\n    static NoParams(...args: OpConstructorArray): BaseOp;\n    static NoParams(...args: any) {\n      return this.base.NoParams(...args).type(topo);\n    }\n\n    static DraftsOptional(args: OpConstructorArgKeys): BaseOp;\n    static DraftsOptional(...args: OpConstructorArray): BaseOp;\n    static DraftsOptional(...args: any) {\n      return this.base.DraftsOptional(...args).type(topo);\n    }\n\n    static ParamsOptional(args: OpConstructorArgKeys): BaseOp;\n    static ParamsOptional(...args: OpConstructorArray): BaseOp;\n    static ParamsOptional(...args: any) {\n      return this.base.ParamsOptional(...args).type(topo);\n    }\n\n    static AllRequired(args: OpConstructorArgKeys): BaseOp;\n    static AllRequired(...args: OpConstructorArray): BaseOp;\n    static AllRequired(...args: any) {\n      return this.base.AllRequired(...args).type(topo);\n    }\n  }\n}\n\nexport const OpFactories = {\n  Seed: makeTopoFactory(\"seed\"),\n  Pipe: makeTopoFactory(\"pipe\"),\n  Merge: makeTopoFactory(\"merge\"),\n  Branch: makeTopoFactory(\"merge\"),\n  Bus: makeTopoFactory(\"bus\"),\n}\n\n// export const SeedOperation = makeTopoFactory(\"seed\");\n// export const PipeOperation = makeTopoFactory(\"pipe\");\n// export const MergeOperation = makeTopoFactory(\"merge\");\n// export const BranchOperation = makeTopoFactory(\"merge\");\n// export const BusOperation = makeTopoFactory(\"bus\");\n\ntype TopologyOpIndex = {\n  [T in keyof TopologyIndex]: {\n    [C in keyof ConstraintIndex]: BaseOp;\n  }\n}\n\nexport type BuildableOperation = TopologyOpIndex[TopologyName][ConstraintName];\n    \n\n\n\n\n\n\n\n\n\n\n                   \n    \n         results matching \"\"\n        \n    \n    \n        No results matching \"\"\n    \n\n"},"modules/MixerModule.html":{"url":"modules/MixerModule.html","title":"module - MixerModule","body":"\n                   \n\n\n\n\n    Modules\n    MixerModule\n\n\n\n    \n        \n\n\n\n\n\ndependencies\n\ndependencies\n\ncluster_MixerModule\n\n\n\ncluster_MixerModule_imports\n\n\n\ncluster_MixerModule_declarations\n\n\n\n\nConnectionComponent\n\nConnectionComponent\n\n\n\nMixerModule\n\nMixerModule\n\nMixerModule -->\n\nConnectionComponent->MixerModule\n\n\n\n\n\nDraftdetailComponent\n\nDraftdetailComponent\n\nMixerModule -->\n\nDraftdetailComponent->MixerModule\n\n\n\n\n\nImageComponent\n\nImageComponent\n\nMixerModule -->\n\nImageComponent->MixerModule\n\n\n\n\n\nInletComponent\n\nInletComponent\n\nMixerModule -->\n\nInletComponent->MixerModule\n\n\n\n\n\nMarqueeComponent\n\nMarqueeComponent\n\nMixerModule -->\n\nMarqueeComponent->MixerModule\n\n\n\n\n\nMixerComponent\n\nMixerComponent\n\nMixerModule -->\n\nMixerComponent->MixerModule\n\n\n\n\n\nMixerViewComponent\n\nMixerViewComponent\n\nMixerModule -->\n\nMixerViewComponent->MixerModule\n\n\n\n\n\nNoteComponent\n\nNoteComponent\n\nMixerModule -->\n\nNoteComponent->MixerModule\n\n\n\n\n\nOpHelpModal\n\nOpHelpModal\n\nMixerModule -->\n\nOpHelpModal->MixerModule\n\n\n\n\n\nOperationComponent\n\nOperationComponent\n\nMixerModule -->\n\nOperationComponent->MixerModule\n\n\n\n\n\nOpsComponent\n\nOpsComponent\n\nMixerModule -->\n\nOpsComponent->MixerModule\n\n\n\n\n\nPaletteComponent\n\nPaletteComponent\n\nMixerModule -->\n\nPaletteComponent->MixerModule\n\n\n\n\n\nParameterComponent\n\nParameterComponent\n\nMixerModule -->\n\nParameterComponent->MixerModule\n\n\n\n\n\nSnackbarComponent\n\nSnackbarComponent\n\nMixerModule -->\n\nSnackbarComponent->MixerModule\n\n\n\n\n\nSubdraftComponent\n\nSubdraftComponent\n\nMixerModule -->\n\nSubdraftComponent->MixerModule\n\n\n\n\n\nPlayerModule\n\nPlayerModule\n\nMixerModule -->\n\nPlayerModule->MixerModule\n\n\n\n\n\n\n    \n    \n    \n        Zoom in\n        Reset\n        Zoom out\n    \n\n\n\n\n\n    \n        Info\n    \n    \n        Source\n    \n\n\n\n    \n\n        \n            File\n        \n        \n            src/app/mixer/mixer.module.ts\n        \n\n\n\n\n\n        \n            \n                \n                    Declarations\n                    \n                        \n                            ConnectionComponent\n                        \n                        \n                            DraftdetailComponent\n                        \n                        \n                            ImageComponent\n                        \n                        \n                            InletComponent\n                        \n                        \n                            MarqueeComponent\n                        \n                        \n                            MixerComponent\n                        \n                        \n                            MixerViewComponent\n                        \n                        \n                            NoteComponent\n                        \n                        \n                            OpHelpModal\n                        \n                        \n                            OperationComponent\n                        \n                        \n                            OpsComponent\n                        \n                        \n                            PaletteComponent\n                        \n                        \n                            ParameterComponent\n                        \n                        \n                            SnackbarComponent\n                        \n                        \n                            SubdraftComponent\n                        \n                    \n                \n                \n                    Imports\n                    \n                        \n                            PlayerModule\n                        \n                    \n                \n            \n        \n\n\n    \n\n\n    \n        import { NgModule } from '@angular/core';\nimport { CoreModule } from '../core/core.module';\nimport { WeaverModule } from '../weaver/weaver.module';\nimport { PlayerModule } from '../player/player.module';\n\nimport { MixerComponent} from './mixer.component';\nimport { MixerViewComponent } from './modal/mixerview/mixerview.component';\nimport { SubdraftComponent } from './palette/subdraft/subdraft.component';\nimport { PaletteComponent } from './palette/palette.component';\nimport { SnackbarComponent } from './palette/snackbar/snackbar.component';\nimport { MarqueeComponent } from './palette/marquee/marquee.component';\nimport { OperationComponent } from './palette/operation/operation.component';\nimport { ConnectionComponent } from './palette/connection/connection.component';\nimport { OpsComponent } from './modal/ops/ops.component';\nimport { OpHelpModal } from './modal/ophelp/ophelp.modal';\nimport { ImageComponent } from './palette/image/image.component';\nimport { DraftdetailComponent } from './modal/draftdetail/draftdetail.component';\nimport { NoteComponent } from './palette/note/note.component';\n// import { PlayerComponent } from '../player/component/player.component';\nimport { ParameterComponent } from './palette/operation/parameter/parameter.component';\nimport { InletComponent } from './palette/operation/inlet/inlet.component';\nimport { PlayerComponent } from '../player/player.component';\n\n\n@NgModule({\n    imports: [\n        CoreModule,\n        WeaverModule,\n        PlayerModule,\n    ],\n    declarations: [\n        MixerComponent,\n        MixerViewComponent,\n        SubdraftComponent,\n        PaletteComponent,\n        SnackbarComponent,\n        MarqueeComponent,\n        OperationComponent,\n        ConnectionComponent,\n        OpsComponent,\n        OpHelpModal,\n        ImageComponent,\n        DraftdetailComponent,\n        NoteComponent,\n        ParameterComponent,\n        InletComponent, \n    ]\n})\nexport class MixerModule { }\n\n    \n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n                   \n    \n         results matching \"\"\n        \n    \n    \n        No results matching \"\"\n    \n\n"},"components/MixerViewComponent.html":{"url":"components/MixerViewComponent.html","title":"component - MixerViewComponent","body":"\n                   \n\n\n\n\n\n  Components\n  \n  MixerViewComponent\n\n\n\n        \n            Info\n        \n        \n            Source\n        \n        \n            Template\n        \n        \n            Styles\n        \n        \n            DOM Tree\n        \n\n\n\n    \n    File\n\n\n    src/app/mixer/modal/mixerview/mixerview.component.ts\n\n\n\n\n\n    \n        Implements\n    \n    \n                    OnInit\n    \n\n\n\n    Metadata\n    \n        \n\n\n\n\n\n\n\n\n\n\n\n            \n                selector\n                app-mixerview\n            \n\n            \n                styleUrls\n                ./mixerview.component.scss\n            \n\n\n\n            \n                templateUrl\n                ./mixerview.component.html\n            \n\n\n\n\n\n\n\n\n        \n    \n\n\n    \n    Index\n    \n        \n                \n                    \n                        Properties\n                    \n                \n                \n                    \n                        \n                            \n                                bounds\n                            \n                            \n                                cell_factor\n                            \n                            \n                                    Public\n                                data\n                            \n                            \n                                div\n                            \n                            \n                                factor\n                            \n                            \n                                height\n                            \n                            \n                                local_view\n                            \n                            \n                                    Public\n                                viewport\n                            \n                            \n                                width\n                            \n                            \n                                zoom\n                            \n                        \n                    \n                \n\n                \n                    \n                        Methods\n                    \n                \n                \n                    \n                        \n                            \n                                close\n                            \n                            \n                                dragEnd\n                            \n                            \n                                dragMove\n                            \n                            \n                                dragStart\n                            \n                            \n                                getCx\n                            \n                            \n                                getMatrix\n                            \n                            \n                                ngAfterViewInit\n                            \n                            \n                                ngOnInit\n                            \n                            \n                                updateLocalDims\n                            \n                            \n                                updateViewPort\n                            \n                            \n                                updateViewPortFromZoom\n                            \n                            \n                                zoomChange\n                            \n                        \n                    \n                \n\n\n                \n                    \n                        Outputs\n                    \n                \n                \n                    \n                        \n                            \n                                onViewPortMove\n                            \n                            \n                                onZoomChange\n                            \n                        \n                    \n                \n\n\n\n        \n    \n\n\n    \n    Constructor\n        \n            \n                \n                    \nconstructor(viewport: ViewportService, dialog: MatDialog, dialogRef: MatDialogRef, data: any)\n                    \n                \n                        \n                            \n                                Defined in src/app/mixer/modal/mixerview/mixerview.component.ts:35\n                            \n                        \n\n                \n                    \n                            \n                                    Parameters :\n                                    \n                                        \n                                            \n                                                Name\n                                                    Type\n                                                Optional\n                                            \n                                        \n                                        \n                                                \n                                                        viewport\n                                                  \n                                                        \n                                                                        ViewportService\n                                                        \n                                                  \n                                                    \n                                                            No\n                                                    \n                                                    \n                                                \n                                                \n                                                        dialog\n                                                  \n                                                        \n                                                                    MatDialog\n                                                        \n                                                  \n                                                    \n                                                            No\n                                                    \n                                                    \n                                                \n                                                \n                                                        dialogRef\n                                                  \n                                                        \n                                                                        MatDialogRef\n                                                        \n                                                  \n                                                    \n                                                            No\n                                                    \n                                                    \n                                                \n                                                \n                                                        data\n                                                  \n                                                        \n                                                                        any\n                                                        \n                                                  \n                                                    \n                                                            No\n                                                    \n                                                    \n                                                \n                                        \n                                    \n                            \n                    \n                \n            \n        \n\n\n\n    \n    Outputs\n        \n            \n                \n                    \n                        \n                        onViewPortMove\n                    \n                \n                \n                    \n                        Type :         any\n\n                    \n                \n                        \n                            \n                                    Defined in src/app/mixer/modal/mixerview/mixerview.component.ts:14\n                            \n                        \n            \n        \n        \n            \n                \n                    \n                        \n                        onZoomChange\n                    \n                \n                \n                    \n                        Type :         any\n\n                    \n                \n                        \n                            \n                                    Defined in src/app/mixer/modal/mixerview/mixerview.component.ts:13\n                            \n                        \n            \n        \n\n\n\n    \n    \n    \n        Methods\n    \n    \n        \n            \n                \n                    \n                    \n                        close\n                        \n                    \n                \n            \n            \n                \nclose()\n                \n            \n\n\n            \n                \n                    Defined in src/app/mixer/modal/mixerview/mixerview.component.ts:175\n                \n            \n\n\n            \n                \n\n                    \n                        Returns :         void\n\n                    \n                \n            \n        \n    \n    \n        \n            \n                \n                    \n                    \n                        dragEnd\n                        \n                    \n                \n            \n            \n                \ndragEnd($event: any)\n                \n            \n\n\n            \n                \n                    Defined in src/app/mixer/modal/mixerview/mixerview.component.ts:123\n                \n            \n\n\n            \n                \n\n                    \n                        Parameters :\n                        \n                        \n                            \n                                \n                                    Name\n                                    Type\n                                    Optional\n                                \n                            \n                            \n                                \n                                    $event\n                                    \n                                                any\n                                    \n\n                                    \n                                        No\n                                    \n\n\n                                \n                            \n                        \n                    \n                    \n                    \n                    \n                        Returns :         void\n\n                    \n                    \n                        \n                    \n                \n            \n        \n    \n    \n        \n            \n                \n                    \n                    \n                        dragMove\n                        \n                    \n                \n            \n            \n                \ndragMove($event: any)\n                \n            \n\n\n            \n                \n                    Defined in src/app/mixer/modal/mixerview/mixerview.component.ts:142\n                \n            \n\n\n            \n                \n\n                    \n                        Parameters :\n                        \n                        \n                            \n                                \n                                    Name\n                                    Type\n                                    Optional\n                                \n                            \n                            \n                                \n                                    $event\n                                    \n                                                any\n                                    \n\n                                    \n                                        No\n                                    \n\n\n                                \n                            \n                        \n                    \n                    \n                    \n                    \n                        Returns :         void\n\n                    \n                    \n                        \n                    \n                \n            \n        \n    \n    \n        \n            \n                \n                    \n                    \n                        dragStart\n                        \n                    \n                \n            \n            \n                \ndragStart($event: any)\n                \n            \n\n\n            \n                \n                    Defined in src/app/mixer/modal/mixerview/mixerview.component.ts:127\n                \n            \n\n\n            \n                \n\n                    \n                        Parameters :\n                        \n                        \n                            \n                                \n                                    Name\n                                    Type\n                                    Optional\n                                \n                            \n                            \n                                \n                                    $event\n                                    \n                                                any\n                                    \n\n                                    \n                                        No\n                                    \n\n\n                                \n                            \n                        \n                    \n                    \n                    \n                    \n                        Returns :         void\n\n                    \n                    \n                        \n                    \n                \n            \n        \n    \n    \n        \n            \n                \n                    \n                    \n                        getCx\n                        \n                    \n                \n            \n            \n                \ngetCx(obj: any)\n                \n            \n\n\n            \n                \n                    Defined in src/app/mixer/modal/mixerview/mixerview.component.ts:81\n                \n            \n\n\n            \n                \n\n                    \n                        Parameters :\n                        \n                        \n                            \n                                \n                                    Name\n                                    Type\n                                    Optional\n                                \n                            \n                            \n                                \n                                    obj\n                                    \n                                                any\n                                    \n\n                                    \n                                        No\n                                    \n\n\n                                \n                            \n                        \n                    \n                    \n                    \n                    \n                        Returns :         number\n\n                    \n                    \n                        \n                    \n                \n            \n        \n    \n    \n        \n            \n                \n                    \n                    \n                        getMatrix\n                        \n                    \n                \n            \n            \n                \ngetMatrix(el: HTMLElement)\n                \n            \n\n\n            \n                \n                    Defined in src/app/mixer/modal/mixerview/mixerview.component.ts:131\n                \n            \n\n\n            \n                \n\n                    \n                        Parameters :\n                        \n                        \n                            \n                                \n                                    Name\n                                    Type\n                                    Optional\n                                \n                            \n                            \n                                \n                                    el\n                                    \n                                            HTMLElement\n                                    \n\n                                    \n                                        No\n                                    \n\n\n                                \n                            \n                        \n                    \n                    \n                    \n                    \n                        Returns :     Array\n\n                    \n                    \n                        \n                    \n                \n            \n        \n    \n    \n        \n            \n                \n                    \n                    \n                        ngAfterViewInit\n                        \n                    \n                \n            \n            \n                \nngAfterViewInit()\n                \n            \n\n\n            \n                \n                    Defined in src/app/mixer/modal/mixerview/mixerview.component.ts:75\n                \n            \n\n\n            \n                \n\n                    \n                        Returns :         void\n\n                    \n                \n            \n        \n    \n    \n        \n            \n                \n                    \n                    \n                        ngOnInit\n                        \n                    \n                \n            \n            \n                \nngOnInit()\n                \n            \n\n\n            \n                \n                    Defined in src/app/mixer/modal/mixerview/mixerview.component.ts:68\n                \n            \n\n\n            \n                \n\n                    \n                        Returns :         void\n\n                    \n                \n            \n        \n    \n    \n        \n            \n                \n                    \n                    \n                        updateLocalDims\n                        \n                    \n                \n            \n            \n                \nupdateLocalDims()\n                \n            \n\n\n            \n                \n                    Defined in src/app/mixer/modal/mixerview/mixerview.component.ts:88\n                \n            \n\n\n            \n                \n\n                    \n                        Returns :         void\n\n                    \n                \n            \n        \n    \n    \n        \n            \n                \n                    \n                    \n                        updateViewPort\n                        \n                    \n                \n            \n            \n                \nupdateViewPort(data: any)\n                \n            \n\n\n            \n                \n                    Defined in src/app/mixer/modal/mixerview/mixerview.component.ts:96\n                \n            \n\n\n            \n                \n\n                    \n                        Parameters :\n                        \n                        \n                            \n                                \n                                    Name\n                                    Type\n                                    Optional\n                                \n                            \n                            \n                                \n                                    data\n                                    \n                                                any\n                                    \n\n                                    \n                                        No\n                                    \n\n\n                                \n                            \n                        \n                    \n                    \n                    \n                    \n                        Returns :         void\n\n                    \n                    \n                        \n                    \n                \n            \n        \n    \n    \n        \n            \n                \n                    \n                    \n                        updateViewPortFromZoom\n                        \n                    \n                \n            \n            \n                \nupdateViewPortFromZoom()\n                \n            \n\n\n            \n                \n                    Defined in src/app/mixer/modal/mixerview/mixerview.component.ts:100\n                \n            \n\n\n            \n                \n\n                    \n                        Returns :         void\n\n                    \n                \n            \n        \n    \n    \n        \n            \n                \n                    \n                    \n                        zoomChange\n                        \n                    \n                \n            \n            \n                \nzoomChange(e: any, source: string)\n                \n            \n\n\n            \n                \n                    Defined in src/app/mixer/modal/mixerview/mixerview.component.ts:106\n                \n            \n\n\n            \n                \n\n                    \n                        Parameters :\n                        \n                        \n                            \n                                \n                                    Name\n                                    Type\n                                    Optional\n                                \n                            \n                            \n                                \n                                    e\n                                    \n                                                any\n                                    \n\n                                    \n                                        No\n                                    \n\n\n                                \n                                \n                                    source\n                                    \n                                                string\n                                    \n\n                                    \n                                        No\n                                    \n\n\n                                \n                            \n                        \n                    \n                    \n                    \n                    \n                        Returns :         void\n\n                    \n                    \n                        \n                    \n                \n            \n        \n    \n\n    \n    \n    \n        Properties\n    \n    \n        \n            \n                \n                    \n                    \n                        bounds\n                        \n                    \n                \n            \n                \n                    \n                        Type :         Bounds\n\n                    \n                \n                    \n                        \n                                Defined in src/app/mixer/modal/mixerview/mixerview.component.ts:17\n                        \n                    \n\n\n        \n    \n    \n        \n            \n                \n                    \n                    \n                        cell_factor\n                        \n                    \n                \n            \n                \n                    \n                        Type :         number\n\n                    \n                \n                    \n                        \n                                Defined in src/app/mixer/modal/mixerview/mixerview.component.ts:26\n                        \n                    \n\n\n        \n    \n    \n        \n            \n                \n                    \n                    \n                            Public\n                        data\n                        \n                    \n                \n            \n                \n                    \n                        Type :         any\n\n                    \n                \n                \n                    \n                        Decorators : \n                        \n                        \n                            @Inject(MAT_DIALOG_DATA)\n                        \n                    \n                \n                    \n                        \n                                Defined in src/app/mixer/modal/mixerview/mixerview.component.ts:40\n                        \n                    \n\n\n        \n    \n    \n        \n            \n                \n                    \n                    \n                        div\n                        \n                    \n                \n            \n                \n                    \n                        Type :     Element\n\n                    \n                \n                    \n                        \n                                Defined in src/app/mixer/modal/mixerview/mixerview.component.ts:35\n                        \n                    \n\n\n        \n    \n    \n        \n            \n                \n                    \n                    \n                        factor\n                        \n                    \n                \n            \n                \n                    \n                        Type :         number\n\n                    \n                \n                    \n                        \n                                Defined in src/app/mixer/modal/mixerview/mixerview.component.ts:23\n                        \n                    \n\n\n        \n    \n    \n        \n            \n                \n                    \n                    \n                        height\n                        \n                    \n                \n            \n                \n                    \n                        Type :         number\n\n                    \n                \n                    \n                        \n                                Defined in src/app/mixer/modal/mixerview/mixerview.component.ts:30\n                        \n                    \n\n\n        \n    \n    \n        \n            \n                \n                    \n                    \n                        local_view\n                        \n                    \n                \n            \n                \n                    \n                        Type :         Bounds\n\n                    \n                \n                    \n                        \n                                Defined in src/app/mixer/modal/mixerview/mixerview.component.ts:20\n                        \n                    \n\n\n        \n    \n    \n        \n            \n                \n                    \n                    \n                            Public\n                        viewport\n                        \n                    \n                \n            \n                \n                    \n                        Type :         ViewportService\n\n                    \n                \n                    \n                        \n                                Defined in src/app/mixer/modal/mixerview/mixerview.component.ts:37\n                        \n                    \n\n\n        \n    \n    \n        \n            \n                \n                    \n                    \n                        width\n                        \n                    \n                \n            \n                \n                    \n                        Type :         number\n\n                    \n                \n                    \n                        \n                                Defined in src/app/mixer/modal/mixerview/mixerview.component.ts:29\n                        \n                    \n\n\n        \n    \n    \n        \n            \n                \n                    \n                    \n                        zoom\n                        \n                    \n                \n            \n                \n                    \n                        Type :         number\n\n                    \n                \n                    \n                        \n                                Defined in src/app/mixer/modal/mixerview/mixerview.component.ts:33\n                        \n                    \n\n\n        \n    \n\n\n\n\n\n    \n        import { Component, OnInit, Input, Output, EventEmitter, ChangeDetectorRef, Inject, ɵpublishGlobalUtil } from '@angular/core';\nimport { Bounds, Point } from '../../../core/model/datatypes';\nimport { ViewportService } from '../../provider/viewport.service';\nimport { MatDialog, MatDialogRef, MAT_DIALOG_DATA } from '@angular/material/dialog';\n\n@Component({\n  selector: 'app-mixerview',\n  templateUrl: './mixerview.component.html',\n  styleUrls: ['./mixerview.component.scss']\n})\nexport class MixerViewComponent implements OnInit {\n  \n  @Output() onZoomChange: any = new EventEmitter();\n  @Output() onViewPortMove: any = new EventEmitter();\n\n  //the bounds of the modal window\n  bounds: Bounds;\n\n  //the bounds of the draggable \"local\" view\n  local_view:Bounds;\n\n  //ratio of the global div to the absolute space\n  factor:number;\n\n  // the number of pixels that represent one cell in the preview space\n  cell_factor: number;\n\n  //the width and height of the global view\n  width: number;\n  height: number;\n\n  //current zoom scale\n  zoom: number;\n\n  div: Element;\n\n constructor(public viewport: ViewportService,\n  private dialog: MatDialog,\n    private dialogRef: MatDialogRef,\n             @Inject(MAT_DIALOG_DATA) public data: any) { \n \n  this.local_view = {\n    topleft: {x:0, y:0}, \n    width: 100, \n    height:100\n  };\n\n  this.zoom = data.zoom;\n\n  this.bounds = {\n    topleft:{x: 0, y:0},\n    width: 350,\n    height: 100\n  }\n\n  this.width = 250;\n  this.height = 250;\n\n  //ratio of the global space to the total width of the global div\n  this.factor = this.width / viewport.getAbsoluteWidth();\n\n  //each cell is rendered cell factor number pixels in the global view\n  //this does not change when zoomed\n  this.cell_factor = this.width / ((viewport.getAbsoluteWidth() / data.default_cell_size));\n \n}\n \n  ngOnInit() {\n   // console.log('viewport', this.local_view);\n\n  }\n\n\n\n  ngAfterViewInit() {\n\n    this.div = document.getElementById('scrollable-container').offsetParent;\n    this.updateLocalDims();\n  }\n\n  getCx(obj: any) : number {\n    return obj.p.x * this.factor;\n  }\n\n\n  \n\n  updateLocalDims(){\n\n    this.local_view.topleft = {\n      x: this.div.scrollLeft / this.zoom * this.cell_factor, \n      y: this.div.scrollTop  / this.zoom * this.cell_factor};\n  }\n\n\n  updateViewPort(data: any){\n    this.updateLocalDims();\n  }\n\n  updateViewPortFromZoom(){\n    this.updateLocalDims();\n    \n  }\n\n\nzoomChange(e:any, source: string){\n  e.source = source;\n  this.zoom = e.value;\n // this.updateLocalDims();\n //update the window so that the current point remains at top left\n  this.onZoomChange.emit(e);\n\n  const adjusted: Point = {\n    x: this.local_view.topleft.x / this.cell_factor * this.zoom,\n    y: this.local_view.topleft.y / this.cell_factor * this.zoom\n  }\n\n  this.onViewPortMove.emit(adjusted);\n\n}\n\n\ndragEnd($event: any) {\n  \n}\n\ndragStart($event: any) {\n\n}\n\ngetMatrix(el: HTMLElement) : Array {\n  const values = el.style.transform.split(/\\w+\\(|\\);?/);\n    if (!values[1] || !values[1].length) {\n        return [];\n    }\n    \n    const text_vals:Array = values[1].split(/,\\s?/g);\n    const numbers: Array = text_vals.map(el => parseInt(el))\n    return numbers;\n}\n\ndragMove($event: any) {\n\n  //this holds the onscreen position of the div\n  const global: HTMLElement = document.getElementById('global');\n  const globalOffset: Point = {\n    x: global.offsetLeft,\n    y: global.offsetTop\n  }\n\n  //this holds any changes from dragging the view\n  const overlay: HTMLElement =  global.offsetParent;\n  const modalTopleft = {\n    x: overlay.offsetLeft,\n    y: overlay.offsetTop\n  }\n  const transform: Array = this.getMatrix(overlay);\n\n  const pointer :Point = $event.pointerPosition;\n\n  const pointerOffsetInGlobal = {\n    x:  pointer.x - (modalTopleft.x + globalOffset.x + transform[0]),\n    y:  pointer.y - (modalTopleft.y + globalOffset.y + transform[1])\n  }\n\n  const adjusted: Point = {\n    x: pointerOffsetInGlobal.x / this.cell_factor * this.zoom,\n    y: pointerOffsetInGlobal.y / this.cell_factor * this.zoom\n  }\n\n\n  this.onViewPortMove.emit(adjusted);\n}\n\nclose() {\n  this.dialogRef.close(null);\n}\n\n\n}\n\n    \n\n    \n        \n\n  \n  \n  View\n  \n\n\n\n\n      \n        \n      \n    \n          \n          \n           \n      \n    \n    \n \n\n  \n    \n    \n      \n    \n    \n    \n  \n\n  \n    \n\n      \n      \n        \n -->\n\n\n\n\n\n\n    \n\n    \n                \n                    ./mixerview.component.scss\n                \n                h4{\n\tmargin: 6px 0px;\n\tpadding: 6px 0px;\n}\n\n.slider-row{\n    display: flex;\n    flex-direction: row;\n}\n\n.toprow{\n    display: flex;\n    flex-direction: row;\n    line-height: 1em;\n}\n\n\n.slider-row i{\n    display: block;\n    height: 48px;\n    line-height: 32px;\n    padding-top: 8px;\n    color: grey;\n}\n\n.global_view{\n    border:thin solid #333333;\n    width: 250px;\n    height: 250px;\n\n}\n\nsvg{\n    position: relative;\n    top: 0;\n    left: 0;\n    z-index: 1;\n    pointer-events: none;\n}\n\n.local{\n    border:thin solid #ff4081;\n    z-index: 3;\n    position: relative;\n    top: -257px;\n    transform-origin: top left;\n   \n}\n\nmat-slider{\n\twidth: 100%;\n}\n\n\n// button{\n//     background: white;\n// \tcolor: #ff4081;\n//     border: thin solid #ff4081;\n//     width: 30px;\n//     height: 30px;\n//     line-height: 1em;\n//     margin: 2px;\n// }\n\n.view_slider{\n  width: 100%;\n  padding: 8px 0 16px 0;\n  font-size: .8em;\n\n}\n\nmat-slide-toggle{\n    padding: 0px 8px;\n}\n\nbutton.selected{\n\n\tbackground: #ff4081;\n\tcolor: white;\n}\n\n.mat-button-toggle-appearance-standard .mat-button-toggle-label-content {\n    /* line-height: 48px; */\n    padding: 0 9px;\n    font-size: .9em;\n}\n\n\n    \n\n    \n        \n        \n            \n                Legend\n            \n            \n                Html element\n            \n            \n                Component\n            \n            \n                Html element with directive\n            \n        \n    \n\n    \n\n\n\n\n\n\n        var COMPONENT_TEMPLATE = '      View                                                                                                                                 -->'\n    var COMPONENTS = [{'name': 'ConnectionComponent', 'selector': 'app-connection'},{'name': 'DraftdetailComponent', 'selector': 'app-draftdetail'},{'name': 'ImageComponent', 'selector': 'app-image'},{'name': 'InletComponent', 'selector': 'app-inlet'},{'name': 'MixerComponent', 'selector': 'app-mixer'},{'name': 'MixerViewComponent', 'selector': 'app-mixerview'},{'name': 'NoteComponent', 'selector': 'app-note'},{'name': 'OperationComponent', 'selector': 'app-operation'},{'name': 'OpHelpModal', 'selector': 'app-ophelp'},{'name': 'OpsComponent', 'selector': 'app-ops'},{'name': 'OpSequencerComponent', 'selector': 'app-op-sequencer'},{'name': 'PaletteComponent', 'selector': 'app-palette'},{'name': 'ParameterComponent', 'selector': 'app-parameter'},{'name': 'PlayerComponent', 'selector': 'app-player'},{'name': 'SnackbarComponent', 'selector': 'app-snackbar'},{'name': 'SubdraftComponent', 'selector': 'app-subdraft'},{'name': 'VirtualPedalsComponent', 'selector': 'app-virtual-pedals'},{'name': 'WeavingStateComponent', 'selector': 'app-weaving-state'}];\n    var DIRECTIVES = [{'name': 'MarqueeComponent', 'selector': 'app-marquee'},{'name': 'SelectionComponent', 'selector': 'app-selection'}];\n    var ACTUAL_COMPONENT = {'name': 'MixerViewComponent'};\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n                   \n    \n         results matching \"\"\n        \n    \n    \n        No results matching \"\"\n    \n\n"},"interfaces/NodeComponentProxy.html":{"url":"interfaces/NodeComponentProxy.html","title":"interface - NodeComponentProxy","body":"\n                   \n\n\n\n\n\n\n\n\n\n\n\n\n\n\n  Interfaces\n  \n  NodeComponentProxy\n\n\n\n        \n            Info\n        \n        \n            Source\n        \n\n\n\n    \n        \n            File\n        \n        \n            src/app/core/model/datatypes/files.ts\n        \n\n\n            \n                Description\n            \n            \n                holds data about each node/component in a form to easily load.\n\n            \n\n\n        \n            Index\n            \n                \n                    \n                        \n                            Properties\n                        \n                    \n                    \n                        \n                            \n                                \n                                        \n                                            bounds\n                                        \n                                \n                                \n                                        \n                                            node_id\n                                        \n                                \n                                \n                                        \n                                            type\n                                        \n                                \n                            \n                        \n                    \n                \n            \n        \n\n\n\n            \n                Properties\n                    \n                        \n                                \n                                    \n                                        \n                                        bounds\n                                            \n                                                \n                                            \n                                        \n                                    \n                                \n                                \n                                    \n                                        bounds:         Bounds\n\n                                    \n                                \n\n\n                                    \n                                        \n                                            Type :         Bounds\n\n                                        \n                                    \n\n\n\n\n\n                        \n                    \n                    \n                        \n                                \n                                    \n                                        \n                                        node_id\n                                            \n                                                \n                                            \n                                        \n                                    \n                                \n                                \n                                    \n                                        node_id:         number\n\n                                    \n                                \n\n\n                                    \n                                        \n                                            Type :         number\n\n                                        \n                                    \n\n\n\n\n\n                        \n                    \n                    \n                        \n                                \n                                    \n                                        \n                                        type\n                                            \n                                                \n                                            \n                                        \n                                    \n                                \n                                \n                                    \n                                        type:         string\n\n                                    \n                                \n\n\n                                    \n                                        \n                                            Type :         string\n\n                                        \n                                    \n\n\n\n\n\n                        \n                    \n            \n    \n\n\n    \n        import { Draft } from './drafts';\nimport { Loom, LoomSettings } from './looms';\nimport { Shuttle } from '../shuttle';\nimport { Note } from '../../provider/notes.service';\nimport { Bounds } from './screenlayout';\n\n/****** OBJECTS/TYPES FOR LOADING AND SAVING FILES *****/\n\n/**\n * holds data about each node/component in a form to easily load.\n * @param node_id the id of this node within the tree\n * @param type the type of node\n * @param bounds the screen position and size data for this node\n */\nexport interface NodeComponentProxy {\n    node_id: number,\n    type: string,\n    bounds: Bounds\n  }\n  \n  /**\n   * stores a sparce version of a tree node for easy reloading\n   * @param node the node id this treenode refers too\n   * @param parent the node id of the parent node for this treenode\n   * @param inputs an array of treenode ids for all values coming into this node\n   * @param outputs an array of treenode ids for all downstream functions \n   */\n   export interface TreeNodeProxy {\n    node: number,\n    parent: number; \n    inputs: Array;\n    outputs: Array; \n   }\n  \n    /**\n    * holds data about each draft component in a compressed form \n    * @param draft_id the draft id associated with this node (if available)\n   * @param draft_visible a boolean to state if this node is visible or not. \n   * @param draft_name a string representing a user defined name\n   * @param draft this will only export if the draft is a seed draft\n   * @param loom this will only export if the draft is a seed draft \n   * @param loom_settings the associated loom settings on this node, if present\n    */\n  \n    export interface DraftNodeProxy {\n      node_id: number;\n      draft_id: number;\n      draft_name: string;\n      draft: Draft;\n      draft_visible: boolean;\n      loom: Loom,\n      loom_settings: LoomSettings;\n    }\n  \n  /**\n    * a sparce form of an operaction component to use for saving\n    * @param node_id the node id this object refers too\n    * @param name the name of the operation at this node\n    * @param params the list of input parameters to this operation\n    * @param inlets the let of inlets and associated values \n    */\n  export interface OpComponentProxy {\n    node_id: number,\n    name: string,\n    params: Array, \n    inlets: Array;\n  }\n  \n  \n   /**\n    * describes the data from the workspace that is saved.\n    */\n   export interface SaveObj {\n    version: string,\n    workspace: any,\n    type: string,\n    nodes: Array,\n    tree: Array,\n    draft_nodes: Array,\n    ops: Array,\n    notes: Array,\n    materials: Array,\n    scale: number\n   }\n  \n  export interface FileObj {\n   version: string,\n   workspace: any,\n   filename: string,\n   nodes: Array,\n   treenodes: Array,\n   draft_nodes: Array,\n   ops: Array\n   scale: number\n  }\n  \n  export interface StatusMessage {\n    id: number,\n    message: string,\n    success: boolean\n  }\n  \n  export interface LoadResponse {\n    data: FileObj,\n    status: number;\n  }\n  \n  export interface Fileloader {\n    ada: (filename: string, data: any) => Promise,\n    //wif: (filename: string, data: any) => Promise,\n    //bmp: (filename: string, data: any) => Promise,\n    //jpg: (filename: string, data: any) => Promise,\n    form: (data: any) => Promise}\n  \n  export interface FileSaver {\n    ada: (type: string, for_timeline:boolean, current_scale: number) => Promise,\n    //wif: (draft: Draft, loom: Loom) => Promise,\n    bmp: (canvas: HTMLCanvasElement) => Promise,\n    jpg: (canvas: HTMLCanvasElement) => Promise\n  }\n    \n\n\n\n\n\n\n\n\n\n                   \n    \n         results matching \"\"\n        \n    \n    \n        No results matching \"\"\n    \n\n"},"interfaces/NodeMethods.html":{"url":"interfaces/NodeMethods.html","title":"interface - NodeMethods","body":"\n                   \n\n\n\n\n\n\n\n\n\n\n\n\n\n\n  Interfaces\n  \n  NodeMethods\n\n\n\n        \n            Info\n        \n        \n            Source\n        \n\n\n\n    \n        \n            File\n        \n        \n            src/app/player/model/dbnodes.ts\n        \n\n\n\n\n        \n            Index\n            \n                \n                    \n                        \n                            Methods\n                        \n                    \n                    \n                        \n                            \n                                \n                                    \n                                        attach\n                                    \n                                \n                                \n                                    \n                                        detach\n                                    \n                                \n                            \n                        \n                    \n                \n            \n        \n\n            \n    \n    \n        Methods\n    \n    \n        \n            \n                \n                    \n                    \n                        attach\n                        \n                    \n                \n            \n            \n                \nattach()\n                \n            \n\n\n            \n                \n                    Defined in src/app/player/model/dbnodes.ts:23\n                \n            \n\n\n            \n                \n\n                    \n                        Returns :         void\n\n                    \n                \n            \n        \n    \n    \n        \n            \n                \n                    \n                    \n                        detach\n                        \n                    \n                \n            \n            \n                \ndetach()\n                \n            \n\n\n            \n                \n                    Defined in src/app/player/model/dbnodes.ts:24\n                \n            \n\n\n            \n                \n\n                    \n                        Returns :         void\n\n                    \n                \n            \n        \n    \n\n\n    \n\n\n    \n        import { child, ref, set, get, query, \n  onValue, onChildAdded, onChildChanged, onChildRemoved,\n  push, remove,\n  DatabaseReference, \n} from \"firebase/database\";\nimport { Database } from '@angular/fire/database';\nimport { EventEmitter } from 'events';\n\nexport interface NodeParams {\n  db?: Database,\n  name?: string,\n  root?: string,\n  path?: string,\n  key?: string,\n  initVal?: any,\n  ref?: DatabaseReference,\n  id?: number\n}\n\nexport type NodeValue = string | boolean | number | { [key: string]: any };\n\ninterface NodeMethods {\n  attach(): void,\n  detach(): void,\n}\n\n/**\n * @class DBNode\n * @desc Wrapper for a Firebase database ref and\n * the value stored at that DB node.\n */\nabstract class DBNode extends EventEmitter implements NodeMethods {\n  id: number;\n  key?: string;\n  _name: string;\n  _dbref: DatabaseReference;\n  _val: NodeValue;\n  _active: boolean;\n\n  /**\n   * holds the Unsubscribe functions that are returned by\n   * DB event functions like onValue(...)\n   */\n  unsubscribers: Array;\n\n  /**\n   * \n   * @param {*} params \\{ db: Database, path: string, initVal: any }\n   * @param {*} params \\{ ref: DatabaseReference, key: string, initVal: any }\n   */\n\n  constructor(params: NodeParams) {\n    super();\n    this.active = false;\n    this.unsubscribers = [];\n    if (params.db) {\n      this._name = params.path;\n      this._dbref = ref(params.db, params.root + params.path);\n      this._val = params.initVal;\n      // console.log(this);\n    } else if (params.ref) {\n      this._name = params.key;\n      this._dbref = params.ref;\n    }\n\n    if(params.id > -1) {\n      this.id = params.id;\n    }\n    console.log(this.name);\n  }\n\n  get ref() {\n    return this._dbref;\n  }\n\n  get name() {\n    return this._name;\n  }\n\n  get val() {\n    if (!this.active) {\n      return false;\n    }\n\n    if (typeof(this._val) == 'number' || typeof(this._val == 'boolean')) {\n      return this._val;\n    } \n    \n    if (this._val != undefined) {\n      return Object.keys(this._val);\n    }\n  }\n\n  set val(x) {\n    this._val = x;\n  }\n\n  get active() {\n    return this._active;\n  }\n\n  set active(tf: boolean) {\n    this._active = tf;\n  }\n\n  // methods for a node: \n  // attach() means it is updating with the database and emitting events\n  // detach() means it is not updating, no events\n  abstract attach();\n  abstract detach();\n}\n\ntype Keyed = Node & { key: string };\n\n/**\n * @class DBListener\n * @desc A DBNode that only reads from the database.\n * When `active = true`, will emit events on the value changing.\n */\nexport class DBListener extends DBNode {\n  id: number;\n  key?: string;\n  _name: string;\n  _dbref: DatabaseReference;\n  _val: any;\n  _active: boolean;\n\n  constructor(params: NodeParams) {\n    super(params);\n  }\n\n  attach() {\n    this.active = true;\n    let unsub = onValue(this.ref, (snapshot) => {\n      this.val = snapshot.val();\n      this.emit('change', this.val);\n    });\n    this.unsubscribers.push(unsub);\n  }\n\n  getNow() {\n    get(query(this.ref))\n      .then((snapshot) => {\n        this.val = snapshot.val();\n      })\n      .catch(result => console.log(result));\n  }\n\n  detach() {\n    if (this.active) {\n      while (this.unsubscribers.length > 0) {\n        let unsub = this.unsubscribers.pop();\n        unsub();\n      }\n    }\n    this.active = false;\n  }\n}\n\n/**\n * @class DBWriter\n * @desc A DBNode that only writes to the database. \n * When `active = true`, will pass `val` to the database.\n */\nexport class DBWriter extends DBNode {\n  id: number;\n  key?: string;\n  _name: string;\n  _ref: DatabaseReference;\n  _val: any;\n  _active: boolean;\n\n  constructor(params: NodeParams) {\n    super(params);\n  }\n\n  attach() {\n    this.active = true;\n  }\n\n  setVal(x) {\n    this.val = x;\n    if (this.active) {\n      set(this.ref, this.val);\n    }\n  }\n\n  detach() {\n    this.active = false;\n  }\n}\n\n/** Special DBWriter that expects the node to be cleared by the\n * other end upon receipt\n */\nexport class DBWriteBuffer extends DBWriter {\n  id: number;\n  _name: string;\n  _ref: DatabaseReference;\n  _val: any;\n  _active: boolean;\n\n  constructor(params: NodeParams) {\n    super(params);\n  }\n\n  setVal(x) {\n    get(query(this.ref))\n      .then((snapshot) => {\n        if(!snapshot.val()) {\n          console.log(\"overwriting data in buffer\");\n        }\n        super.setVal(x);\n      })\n      .catch(result => console.log(result));\n  }\n}\n\nexport class DBTwoWay extends DBNode {\n  id: number;\n  key?: string;\n  _name: string;\n  _dbref: DatabaseReference;\n  _val: any;\n  _active: boolean;\n\n  constructor(params: NodeParams) {\n    super(params);\n  }\n  \n  attach() {\n    this.active = true;\n    let unsub = onValue(this.ref, (snapshot) => {\n      this.val = snapshot.val();\n      this.emit('change', this.val);\n    });\n    this.unsubscribers.push(unsub);\n  }\n\n  getNow() {\n    get(query(this.ref))\n      .then((snapshot) => {\n        this.val = snapshot.val();\n      })\n      .catch(result => console.log(result));\n  }\n  \n  detach() {\n    if (this.active) {\n      while (this.unsubscribers.length > 0) {\n        let unsub = this.unsubscribers.pop();\n        unsub();\n      }\n    }\n    this.active = false;\n  }\n  \n  setVal(x) {\n    this.val = x;\n    if (this.active) {\n      set(this.ref, this.val);\n    }\n  }\n}\n\nclass DBNodeArray extends EventEmitter {\n  nodes: Array;\n  lengthNode: DBNode;\n  parentNode: DBNode;\n\n  constructor(lengthNode, parentNode, init: any = {}) {\n    super();\n    this.lengthNode = lengthNode;\n    this.parentNode = parentNode;\n    if (init) {\n    } else {\n      this.nodes = [];\n    }\n  }\n\n  get length() { return this.nodes.length; }\n\n  get active() { return (this.lengthNode.active && this.parentNode.active); }\n\n  get ready() { return (this.lengthNode.val > 0 && this.parentNode.val != false); }\n\n  nodeAt(n) {\n    console.log(this.nodes);\n    console.log(\"node at \", n);\n    console.log(this.nodes[n]);\n    return this.nodes[n];\n  }\n\n  pushNode(n) {\n    this.nodes.push(n);\n  }\n\n  popNode() {\n    return this.nodes.pop();\n  }\n}\n\n/**\n * @class `DBListenerArray`\n * @desc Represents a listener to a list of values in the database \n * (generalizes to `DBNodeArray`). Assumes that the data list is\n * structured such that `lengthNode` is a `DBListener` that stores the \n * length of the list, while `parentNode` is a `DBListener` to the parent\n * node of the list. Each item in the list is a child of `parentNode`,\n * which is then stored as a `DBListener` in the array `nodes`.\n */\nexport class DBListenerArray extends DBNodeArray {\n  lengthNode: DBListener;\n  parentNode: DBListener;\n  nodes: Array;\n\n  /**\n  * holds the Unsubscribe functions that are returned by\n  * DB event functions like onValue(...)\n  */\n  unsubscribers: Array;\n\n  constructor(lengthNode: DBListener, parentNode: DBListener) {\n    super(lengthNode, parentNode);\n    this.lengthNode = lengthNode;\n    this.parentNode = parentNode;\n    this.nodes = [];\n    this.unsubscribers = [];\n  }\n\n  /**\n   * @method attach\n   */\n  attach() {\n    this.lengthNode.attach();\n    this.lengthNode.on('change', (val) => {\n        this.emit('ready', this.ready);\n    });\n\n    this.parentNode.attach();\n    this.parentNode.once('change', (val) => {\n      this.emit('ready', this.ready);\n    });\n\n    for (var node of this.nodes) {\n      this.attachChildNode(node);\n    }\n\n    this.unsubscribers.push(\n      onChildAdded(this.parentNode.ref, (snapshot) => {\n        // console.log(\"child added\", snapshot);\n        this.addNode(snapshot.key);\n    }));\n\n    this.unsubscribers.push(\n      onChildChanged(this.parentNode.ref, (snapshot) => {\n        console.log(\"child changed\", snapshot);\n    }));\n\n    this.unsubscribers.push(\n      onChildRemoved(this.parentNode.ref, () => {\n        // console.log(\"child removed\", snapshot);\n        let removed = this.popNode();\n        this.emit('child-removed', removed);\n    }));\n  }\n\n  detach() {\n    if (this.active) {\n      while (this.unsubscribers.length > 0) {\n        let unsub = this.unsubscribers.pop();\n        unsub();\n      }\n    }\n  }\n\n  nodeAt(n: number) {\n    // console.log(this.nodes);\n    // console.log(\"node at \", n);\n    // console.log(this.nodes[n]);\n    return this.nodes[n];\n  }\n\n  /**\n   * Creating a new child node.\n   * @param key \n   */\n  addNode(key: string) {\n    console.log('child key', key);\n    const childRef = child(this.parentNode.ref, key);\n    const childNode = new DBListener({ ref: childRef, key: key, id: this.length });\n    this.attachChildNode(childNode);\n    this.pushNode(childNode);\n    this.emit('child-added', childNode);\n    // this.lengthNode.setVal(this.length);\n  }\n\n  /**\n   * Attaching a child node that was created elsewhere.\n   * Invokes child's `attach()` method and adds event listener\n   * that will emit a `child-change` event.\n   * @param node \n   */\n  attachChildNode(node: DBListener) {\n    node.attach();\n    node.on('change', (val) => {\n      this.emit('child-change', {\n        id: node.id,\n        val: val\n      });\n    });\n  }\n\n  // remNode() {\n  //   const node = this.popNode();\n  //   // remove(node.ref);\n  //   // this.lengthNode.setVal(this.length);\n  // }\n\n  // updateArray(num: number) {\n  //   // this.parentNode.getNow();\n  //   if (num > this.length) {\n  //     let parentKeys = this.parentNode.val;\n  //     // console.log(this.parentNode);\n  //     console.log(parentKeys);\n  //     let childKeys = Object.keys(parentKeys);\n  //     while (this.length  num) {\n  //       this.popNode();\n  //     }\n  //   }\n  //   console.log(this);\n  // }\n\n  toString() {\n    var str = \"\";\n    // str += \"length: \" + this.length + \", \";\n    str += \"[ \\n\";\n    for (var i=0; i ;\n  lengthNode: DBWriter;\n  parentNode: DBWriter;\n\n  constructor(lengthNode, parentNode, init) {\n    super(lengthNode, parentNode, init);\n    if (!init) {\n      this.lengthNode.setVal(0);\n      this.parentNode.setVal(EMPTY_NODE_ARRAY);\n    }\n\n    // console.log(this);\n  }\n\n  addNode(initVal) {\n    const childRef = push(this.parentNode.ref, initVal);\n    const childNode = new DBWriter({ ref: childRef, initVal });\n    childNode.attach();\n    this.pushNode(childNode);\n    this.lengthNode.setVal(this.length);\n  }\n\n  remNode() {\n    const node = this.popNode();\n    remove(node.ref);\n    this.lengthNode.setVal(this.length);\n  }\n\n  updateArray(num, newStates) {\n    if (num > this.length) {\n      while (this.length  num) {\n        this.remNode();\n      }\n    }\n  }\n\n  setNode(i, x) {\n    this.nodes[i].setVal(x);\n  }\n\n}\n\n/**\n * Array of two-way DBNodes where both ends are listening for\n * changes AND may write to the DB -- such as the virtual pedals\n * where both AdaCAD and the Pi/PC can add virtual pedals\n */\nexport class DBTwoWayArray extends DBNodeArray {\n  nodes: Array = [];\n  lengthNode: DBTwoWay;\n  parentNode: DBTwoWay;\n\n  /**\n  * holds the Unsubscribe functions that are returned by\n  * DB event functions like onValue(...)\n  */\n  unsubscribers: Array;\n\n  constructor(lengthNode: DBTwoWay, parentNode: DBTwoWay, init?: Array) {\n    super(lengthNode, parentNode, init);\n    this.unsubscribers = [];\n    if (!init) {\n      this.lengthNode.setVal(0);\n      this.parentNode.setVal(EMPTY_NODE_ARRAY);\n    }\n  }\n\n  addNode(initVal: any) {\n    push(this.parentNode.ref, initVal);\n    // const childNode = new DBTwoWay({ ref: childRef, initVal });\n    // childNode.attach();\n    // this.pushNode(childNode);\n    // this.lengthNode.setVal(this.length);\n    // console.log('child key', key);\n  }\n\n  onNodeAdded(key: string) {\n     const childRef = child(this.parentNode.ref, key);\n     const childNode = new DBTwoWay({ ref: childRef, key: key, id: this.length });\n     this.attachChildNode(childNode);\n     this.pushNode(childNode);\n     this.lengthNode.setVal(this.length);\n     this.emit('child-added', childNode);\n  }\n\n  remNode() {\n    const lastNode = this.nodeAt(this.length-1);\n    remove(lastNode.ref);\n    // this.lengthNode.setVal(this.length);\n  }\n\n  onNodeRemoved() {\n    let removed = this.popNode();\n    this.lengthNode.setVal(this.length);\n    return removed;\n  }\n\n  updateArray(num: number, newStates: Array) {\n    if (num > this.length) {\n      while (this.length  num) {\n        this.remNode();\n      }\n    }\n  }\n\n  setNode(i: number, x: any) {\n    this.nodes[i].setVal(x);\n  }\n\n  /**\n  * @method attach\n  */\n  attach() {\n    this.lengthNode.attach();\n    this.lengthNode.on('change', (val) => {\n        this.emit('ready', this.ready);\n    });\n\n    this.parentNode.attach();\n    this.parentNode.once('change', (val) => {\n      this.emit('ready', this.ready);\n    });\n\n    for (var node of this.nodes) {\n      this.attachChildNode(node);\n    }\n\n    this.unsubscribers.push(\n      onChildAdded(this.parentNode.ref, (snapshot) => {\n        // console.log(\"child added\", snapshot);\n        this.onNodeAdded(snapshot.key);\n    }));\n\n    this.unsubscribers.push(\n      onChildChanged(this.parentNode.ref, (snapshot) => {\n        console.log(\"child changed\", snapshot);\n    }));\n\n    this.unsubscribers.push(\n      onChildRemoved(this.parentNode.ref, () => {\n        // console.log(\"child removed\", snapshot);\n        let removed = this.onNodeRemoved();\n        this.emit('child-removed', removed);\n    }));\n  }\n \n  detach() {\n    if (this.active) {\n      while (this.unsubscribers.length > 0) {\n        let unsub = this.unsubscribers.pop();\n        unsub();\n      }\n    }\n  }\n\n  /**\n  * Attaching a child node that was created elsewhere.\n  * Invokes child's `attach()` method and adds event listener\n  * that will emit a `child-change` event.\n  * @param node \n  */\n  attachChildNode(node: DBListener) {\n    node.attach();\n    node.on('change', (val) => {\n      this.emit('child-change', {\n        id: node.id,\n        val: val\n      });\n    });\n  }\n}\n\n/** special types of DBNodes */\n\n/** @class\n * OnlineStatus representing whether or not the\n * \"host\" device is online. The host device is responsible\n * for keeping the node set to \"true\", while any listener\n * devices check occasionally for the host's status by \n * attempting to set the node to \"false\".\n */\nexport class OnlineStatus extends DBListener {\n  _name: string;\n  _ref: DatabaseReference;\n  _val: boolean;\n  _active: boolean;\n\n  constructor(params) {\n    super(params);\n    this.attach();\n    get(query(this.ref))\n      .then((snapshot) => {\n        this.val = snapshot.val();\n      })\n      .catch(result => console.log(result));\n  }\n\n  checkAlive() {\n    set(this.ref, false)\n      .then(() => { this.emit('set', true); })\n      .catch(() => { this.emit('set', false); });\n  }\n}\n\n\n    \n\n\n\n\n\n\n\n\n\n                   \n    \n         results matching \"\"\n        \n    \n    \n        No results matching \"\"\n    \n\n"},"interfaces/NodeParams.html":{"url":"interfaces/NodeParams.html","title":"interface - NodeParams","body":"\n                   \n\n\n\n\n\n\n\n\n\n\n\n\n\n\n  Interfaces\n  \n  NodeParams\n\n\n\n        \n            Info\n        \n        \n            Source\n        \n\n\n\n    \n        \n            File\n        \n        \n            src/app/player/model/dbnodes.ts\n        \n\n\n\n\n        \n            Index\n            \n                \n                    \n                        \n                            Properties\n                        \n                    \n                    \n                        \n                            \n                                \n                                            Optional\n                                        \n                                            db\n                                        \n                                \n                                \n                                            Optional\n                                        \n                                            id\n                                        \n                                \n                                \n                                            Optional\n                                        \n                                            initVal\n                                        \n                                \n                                \n                                            Optional\n                                        \n                                            key\n                                        \n                                \n                                \n                                            Optional\n                                        \n                                            name\n                                        \n                                \n                                \n                                            Optional\n                                        \n                                            path\n                                        \n                                \n                                \n                                            Optional\n                                        \n                                            ref\n                                        \n                                \n                                \n                                            Optional\n                                        \n                                            root\n                                        \n                                \n                            \n                        \n                    \n                \n            \n        \n\n\n\n            \n                Properties\n                    \n                        \n                                \n                                    \n                                        \n                                        db\n                                            \n                                                \n                                            \n                                        \n                                    \n                                \n                                \n                                    \n                                        db:     Database\n\n                                    \n                                \n\n\n                                    \n                                        \n                                            Type :     Database\n\n                                        \n                                    \n\n                                    \n                                        \n                                            Optional\n                                        \n                                    \n\n\n\n\n                        \n                    \n                    \n                        \n                                \n                                    \n                                        \n                                        id\n                                            \n                                                \n                                            \n                                        \n                                    \n                                \n                                \n                                    \n                                        id:         number\n\n                                    \n                                \n\n\n                                    \n                                        \n                                            Type :         number\n\n                                        \n                                    \n\n                                    \n                                        \n                                            Optional\n                                        \n                                    \n\n\n\n\n                        \n                    \n                    \n                        \n                                \n                                    \n                                        \n                                        initVal\n                                            \n                                                \n                                            \n                                        \n                                    \n                                \n                                \n                                    \n                                        initVal:         any\n\n                                    \n                                \n\n\n                                    \n                                        \n                                            Type :         any\n\n                                        \n                                    \n\n                                    \n                                        \n                                            Optional\n                                        \n                                    \n\n\n\n\n                        \n                    \n                    \n                        \n                                \n                                    \n                                        \n                                        key\n                                            \n                                                \n                                            \n                                        \n                                    \n                                \n                                \n                                    \n                                        key:         string\n\n                                    \n                                \n\n\n                                    \n                                        \n                                            Type :         string\n\n                                        \n                                    \n\n                                    \n                                        \n                                            Optional\n                                        \n                                    \n\n\n\n\n                        \n                    \n                    \n                        \n                                \n                                    \n                                        \n                                        name\n                                            \n                                                \n                                            \n                                        \n                                    \n                                \n                                \n                                    \n                                        name:         string\n\n                                    \n                                \n\n\n                                    \n                                        \n                                            Type :         string\n\n                                        \n                                    \n\n                                    \n                                        \n                                            Optional\n                                        \n                                    \n\n\n\n\n                        \n                    \n                    \n                        \n                                \n                                    \n                                        \n                                        path\n                                            \n                                                \n                                            \n                                        \n                                    \n                                \n                                \n                                    \n                                        path:         string\n\n                                    \n                                \n\n\n                                    \n                                        \n                                            Type :         string\n\n                                        \n                                    \n\n                                    \n                                        \n                                            Optional\n                                        \n                                    \n\n\n\n\n                        \n                    \n                    \n                        \n                                \n                                    \n                                        \n                                        ref\n                                            \n                                                \n                                            \n                                        \n                                    \n                                \n                                \n                                    \n                                        ref:     DatabaseReference\n\n                                    \n                                \n\n\n                                    \n                                        \n                                            Type :     DatabaseReference\n\n                                        \n                                    \n\n                                    \n                                        \n                                            Optional\n                                        \n                                    \n\n\n\n\n                        \n                    \n                    \n                        \n                                \n                                    \n                                        \n                                        root\n                                            \n                                                \n                                            \n                                        \n                                    \n                                \n                                \n                                    \n                                        root:         string\n\n                                    \n                                \n\n\n                                    \n                                        \n                                            Type :         string\n\n                                        \n                                    \n\n                                    \n                                        \n                                            Optional\n                                        \n                                    \n\n\n\n\n                        \n                    \n            \n    \n\n\n    \n        import { child, ref, set, get, query, \n  onValue, onChildAdded, onChildChanged, onChildRemoved,\n  push, remove,\n  DatabaseReference, \n} from \"firebase/database\";\nimport { Database } from '@angular/fire/database';\nimport { EventEmitter } from 'events';\n\nexport interface NodeParams {\n  db?: Database,\n  name?: string,\n  root?: string,\n  path?: string,\n  key?: string,\n  initVal?: any,\n  ref?: DatabaseReference,\n  id?: number\n}\n\nexport type NodeValue = string | boolean | number | { [key: string]: any };\n\ninterface NodeMethods {\n  attach(): void,\n  detach(): void,\n}\n\n/**\n * @class DBNode\n * @desc Wrapper for a Firebase database ref and\n * the value stored at that DB node.\n */\nabstract class DBNode extends EventEmitter implements NodeMethods {\n  id: number;\n  key?: string;\n  _name: string;\n  _dbref: DatabaseReference;\n  _val: NodeValue;\n  _active: boolean;\n\n  /**\n   * holds the Unsubscribe functions that are returned by\n   * DB event functions like onValue(...)\n   */\n  unsubscribers: Array;\n\n  /**\n   * \n   * @param {*} params \\{ db: Database, path: string, initVal: any }\n   * @param {*} params \\{ ref: DatabaseReference, key: string, initVal: any }\n   */\n\n  constructor(params: NodeParams) {\n    super();\n    this.active = false;\n    this.unsubscribers = [];\n    if (params.db) {\n      this._name = params.path;\n      this._dbref = ref(params.db, params.root + params.path);\n      this._val = params.initVal;\n      // console.log(this);\n    } else if (params.ref) {\n      this._name = params.key;\n      this._dbref = params.ref;\n    }\n\n    if(params.id > -1) {\n      this.id = params.id;\n    }\n    console.log(this.name);\n  }\n\n  get ref() {\n    return this._dbref;\n  }\n\n  get name() {\n    return this._name;\n  }\n\n  get val() {\n    if (!this.active) {\n      return false;\n    }\n\n    if (typeof(this._val) == 'number' || typeof(this._val == 'boolean')) {\n      return this._val;\n    } \n    \n    if (this._val != undefined) {\n      return Object.keys(this._val);\n    }\n  }\n\n  set val(x) {\n    this._val = x;\n  }\n\n  get active() {\n    return this._active;\n  }\n\n  set active(tf: boolean) {\n    this._active = tf;\n  }\n\n  // methods for a node: \n  // attach() means it is updating with the database and emitting events\n  // detach() means it is not updating, no events\n  abstract attach();\n  abstract detach();\n}\n\ntype Keyed = Node & { key: string };\n\n/**\n * @class DBListener\n * @desc A DBNode that only reads from the database.\n * When `active = true`, will emit events on the value changing.\n */\nexport class DBListener extends DBNode {\n  id: number;\n  key?: string;\n  _name: string;\n  _dbref: DatabaseReference;\n  _val: any;\n  _active: boolean;\n\n  constructor(params: NodeParams) {\n    super(params);\n  }\n\n  attach() {\n    this.active = true;\n    let unsub = onValue(this.ref, (snapshot) => {\n      this.val = snapshot.val();\n      this.emit('change', this.val);\n    });\n    this.unsubscribers.push(unsub);\n  }\n\n  getNow() {\n    get(query(this.ref))\n      .then((snapshot) => {\n        this.val = snapshot.val();\n      })\n      .catch(result => console.log(result));\n  }\n\n  detach() {\n    if (this.active) {\n      while (this.unsubscribers.length > 0) {\n        let unsub = this.unsubscribers.pop();\n        unsub();\n      }\n    }\n    this.active = false;\n  }\n}\n\n/**\n * @class DBWriter\n * @desc A DBNode that only writes to the database. \n * When `active = true`, will pass `val` to the database.\n */\nexport class DBWriter extends DBNode {\n  id: number;\n  key?: string;\n  _name: string;\n  _ref: DatabaseReference;\n  _val: any;\n  _active: boolean;\n\n  constructor(params: NodeParams) {\n    super(params);\n  }\n\n  attach() {\n    this.active = true;\n  }\n\n  setVal(x) {\n    this.val = x;\n    if (this.active) {\n      set(this.ref, this.val);\n    }\n  }\n\n  detach() {\n    this.active = false;\n  }\n}\n\n/** Special DBWriter that expects the node to be cleared by the\n * other end upon receipt\n */\nexport class DBWriteBuffer extends DBWriter {\n  id: number;\n  _name: string;\n  _ref: DatabaseReference;\n  _val: any;\n  _active: boolean;\n\n  constructor(params: NodeParams) {\n    super(params);\n  }\n\n  setVal(x) {\n    get(query(this.ref))\n      .then((snapshot) => {\n        if(!snapshot.val()) {\n          console.log(\"overwriting data in buffer\");\n        }\n        super.setVal(x);\n      })\n      .catch(result => console.log(result));\n  }\n}\n\nexport class DBTwoWay extends DBNode {\n  id: number;\n  key?: string;\n  _name: string;\n  _dbref: DatabaseReference;\n  _val: any;\n  _active: boolean;\n\n  constructor(params: NodeParams) {\n    super(params);\n  }\n  \n  attach() {\n    this.active = true;\n    let unsub = onValue(this.ref, (snapshot) => {\n      this.val = snapshot.val();\n      this.emit('change', this.val);\n    });\n    this.unsubscribers.push(unsub);\n  }\n\n  getNow() {\n    get(query(this.ref))\n      .then((snapshot) => {\n        this.val = snapshot.val();\n      })\n      .catch(result => console.log(result));\n  }\n  \n  detach() {\n    if (this.active) {\n      while (this.unsubscribers.length > 0) {\n        let unsub = this.unsubscribers.pop();\n        unsub();\n      }\n    }\n    this.active = false;\n  }\n  \n  setVal(x) {\n    this.val = x;\n    if (this.active) {\n      set(this.ref, this.val);\n    }\n  }\n}\n\nclass DBNodeArray extends EventEmitter {\n  nodes: Array;\n  lengthNode: DBNode;\n  parentNode: DBNode;\n\n  constructor(lengthNode, parentNode, init: any = {}) {\n    super();\n    this.lengthNode = lengthNode;\n    this.parentNode = parentNode;\n    if (init) {\n    } else {\n      this.nodes = [];\n    }\n  }\n\n  get length() { return this.nodes.length; }\n\n  get active() { return (this.lengthNode.active && this.parentNode.active); }\n\n  get ready() { return (this.lengthNode.val > 0 && this.parentNode.val != false); }\n\n  nodeAt(n) {\n    console.log(this.nodes);\n    console.log(\"node at \", n);\n    console.log(this.nodes[n]);\n    return this.nodes[n];\n  }\n\n  pushNode(n) {\n    this.nodes.push(n);\n  }\n\n  popNode() {\n    return this.nodes.pop();\n  }\n}\n\n/**\n * @class `DBListenerArray`\n * @desc Represents a listener to a list of values in the database \n * (generalizes to `DBNodeArray`). Assumes that the data list is\n * structured such that `lengthNode` is a `DBListener` that stores the \n * length of the list, while `parentNode` is a `DBListener` to the parent\n * node of the list. Each item in the list is a child of `parentNode`,\n * which is then stored as a `DBListener` in the array `nodes`.\n */\nexport class DBListenerArray extends DBNodeArray {\n  lengthNode: DBListener;\n  parentNode: DBListener;\n  nodes: Array;\n\n  /**\n  * holds the Unsubscribe functions that are returned by\n  * DB event functions like onValue(...)\n  */\n  unsubscribers: Array;\n\n  constructor(lengthNode: DBListener, parentNode: DBListener) {\n    super(lengthNode, parentNode);\n    this.lengthNode = lengthNode;\n    this.parentNode = parentNode;\n    this.nodes = [];\n    this.unsubscribers = [];\n  }\n\n  /**\n   * @method attach\n   */\n  attach() {\n    this.lengthNode.attach();\n    this.lengthNode.on('change', (val) => {\n        this.emit('ready', this.ready);\n    });\n\n    this.parentNode.attach();\n    this.parentNode.once('change', (val) => {\n      this.emit('ready', this.ready);\n    });\n\n    for (var node of this.nodes) {\n      this.attachChildNode(node);\n    }\n\n    this.unsubscribers.push(\n      onChildAdded(this.parentNode.ref, (snapshot) => {\n        // console.log(\"child added\", snapshot);\n        this.addNode(snapshot.key);\n    }));\n\n    this.unsubscribers.push(\n      onChildChanged(this.parentNode.ref, (snapshot) => {\n        console.log(\"child changed\", snapshot);\n    }));\n\n    this.unsubscribers.push(\n      onChildRemoved(this.parentNode.ref, () => {\n        // console.log(\"child removed\", snapshot);\n        let removed = this.popNode();\n        this.emit('child-removed', removed);\n    }));\n  }\n\n  detach() {\n    if (this.active) {\n      while (this.unsubscribers.length > 0) {\n        let unsub = this.unsubscribers.pop();\n        unsub();\n      }\n    }\n  }\n\n  nodeAt(n: number) {\n    // console.log(this.nodes);\n    // console.log(\"node at \", n);\n    // console.log(this.nodes[n]);\n    return this.nodes[n];\n  }\n\n  /**\n   * Creating a new child node.\n   * @param key \n   */\n  addNode(key: string) {\n    console.log('child key', key);\n    const childRef = child(this.parentNode.ref, key);\n    const childNode = new DBListener({ ref: childRef, key: key, id: this.length });\n    this.attachChildNode(childNode);\n    this.pushNode(childNode);\n    this.emit('child-added', childNode);\n    // this.lengthNode.setVal(this.length);\n  }\n\n  /**\n   * Attaching a child node that was created elsewhere.\n   * Invokes child's `attach()` method and adds event listener\n   * that will emit a `child-change` event.\n   * @param node \n   */\n  attachChildNode(node: DBListener) {\n    node.attach();\n    node.on('change', (val) => {\n      this.emit('child-change', {\n        id: node.id,\n        val: val\n      });\n    });\n  }\n\n  // remNode() {\n  //   const node = this.popNode();\n  //   // remove(node.ref);\n  //   // this.lengthNode.setVal(this.length);\n  // }\n\n  // updateArray(num: number) {\n  //   // this.parentNode.getNow();\n  //   if (num > this.length) {\n  //     let parentKeys = this.parentNode.val;\n  //     // console.log(this.parentNode);\n  //     console.log(parentKeys);\n  //     let childKeys = Object.keys(parentKeys);\n  //     while (this.length  num) {\n  //       this.popNode();\n  //     }\n  //   }\n  //   console.log(this);\n  // }\n\n  toString() {\n    var str = \"\";\n    // str += \"length: \" + this.length + \", \";\n    str += \"[ \\n\";\n    for (var i=0; i ;\n  lengthNode: DBWriter;\n  parentNode: DBWriter;\n\n  constructor(lengthNode, parentNode, init) {\n    super(lengthNode, parentNode, init);\n    if (!init) {\n      this.lengthNode.setVal(0);\n      this.parentNode.setVal(EMPTY_NODE_ARRAY);\n    }\n\n    // console.log(this);\n  }\n\n  addNode(initVal) {\n    const childRef = push(this.parentNode.ref, initVal);\n    const childNode = new DBWriter({ ref: childRef, initVal });\n    childNode.attach();\n    this.pushNode(childNode);\n    this.lengthNode.setVal(this.length);\n  }\n\n  remNode() {\n    const node = this.popNode();\n    remove(node.ref);\n    this.lengthNode.setVal(this.length);\n  }\n\n  updateArray(num, newStates) {\n    if (num > this.length) {\n      while (this.length  num) {\n        this.remNode();\n      }\n    }\n  }\n\n  setNode(i, x) {\n    this.nodes[i].setVal(x);\n  }\n\n}\n\n/**\n * Array of two-way DBNodes where both ends are listening for\n * changes AND may write to the DB -- such as the virtual pedals\n * where both AdaCAD and the Pi/PC can add virtual pedals\n */\nexport class DBTwoWayArray extends DBNodeArray {\n  nodes: Array = [];\n  lengthNode: DBTwoWay;\n  parentNode: DBTwoWay;\n\n  /**\n  * holds the Unsubscribe functions that are returned by\n  * DB event functions like onValue(...)\n  */\n  unsubscribers: Array;\n\n  constructor(lengthNode: DBTwoWay, parentNode: DBTwoWay, init?: Array) {\n    super(lengthNode, parentNode, init);\n    this.unsubscribers = [];\n    if (!init) {\n      this.lengthNode.setVal(0);\n      this.parentNode.setVal(EMPTY_NODE_ARRAY);\n    }\n  }\n\n  addNode(initVal: any) {\n    push(this.parentNode.ref, initVal);\n    // const childNode = new DBTwoWay({ ref: childRef, initVal });\n    // childNode.attach();\n    // this.pushNode(childNode);\n    // this.lengthNode.setVal(this.length);\n    // console.log('child key', key);\n  }\n\n  onNodeAdded(key: string) {\n     const childRef = child(this.parentNode.ref, key);\n     const childNode = new DBTwoWay({ ref: childRef, key: key, id: this.length });\n     this.attachChildNode(childNode);\n     this.pushNode(childNode);\n     this.lengthNode.setVal(this.length);\n     this.emit('child-added', childNode);\n  }\n\n  remNode() {\n    const lastNode = this.nodeAt(this.length-1);\n    remove(lastNode.ref);\n    // this.lengthNode.setVal(this.length);\n  }\n\n  onNodeRemoved() {\n    let removed = this.popNode();\n    this.lengthNode.setVal(this.length);\n    return removed;\n  }\n\n  updateArray(num: number, newStates: Array) {\n    if (num > this.length) {\n      while (this.length  num) {\n        this.remNode();\n      }\n    }\n  }\n\n  setNode(i: number, x: any) {\n    this.nodes[i].setVal(x);\n  }\n\n  /**\n  * @method attach\n  */\n  attach() {\n    this.lengthNode.attach();\n    this.lengthNode.on('change', (val) => {\n        this.emit('ready', this.ready);\n    });\n\n    this.parentNode.attach();\n    this.parentNode.once('change', (val) => {\n      this.emit('ready', this.ready);\n    });\n\n    for (var node of this.nodes) {\n      this.attachChildNode(node);\n    }\n\n    this.unsubscribers.push(\n      onChildAdded(this.parentNode.ref, (snapshot) => {\n        // console.log(\"child added\", snapshot);\n        this.onNodeAdded(snapshot.key);\n    }));\n\n    this.unsubscribers.push(\n      onChildChanged(this.parentNode.ref, (snapshot) => {\n        console.log(\"child changed\", snapshot);\n    }));\n\n    this.unsubscribers.push(\n      onChildRemoved(this.parentNode.ref, () => {\n        // console.log(\"child removed\", snapshot);\n        let removed = this.onNodeRemoved();\n        this.emit('child-removed', removed);\n    }));\n  }\n \n  detach() {\n    if (this.active) {\n      while (this.unsubscribers.length > 0) {\n        let unsub = this.unsubscribers.pop();\n        unsub();\n      }\n    }\n  }\n\n  /**\n  * Attaching a child node that was created elsewhere.\n  * Invokes child's `attach()` method and adds event listener\n  * that will emit a `child-change` event.\n  * @param node \n  */\n  attachChildNode(node: DBListener) {\n    node.attach();\n    node.on('change', (val) => {\n      this.emit('child-change', {\n        id: node.id,\n        val: val\n      });\n    });\n  }\n}\n\n/** special types of DBNodes */\n\n/** @class\n * OnlineStatus representing whether or not the\n * \"host\" device is online. The host device is responsible\n * for keeping the node set to \"true\", while any listener\n * devices check occasionally for the host's status by \n * attempting to set the node to \"false\".\n */\nexport class OnlineStatus extends DBListener {\n  _name: string;\n  _ref: DatabaseReference;\n  _val: boolean;\n  _active: boolean;\n\n  constructor(params) {\n    super(params);\n    this.attach();\n    get(query(this.ref))\n      .then((snapshot) => {\n        this.val = snapshot.val();\n      })\n      .catch(result => console.log(result));\n  }\n\n  checkAlive() {\n    set(this.ref, false)\n      .then(() => { this.emit('set', true); })\n      .catch(() => { this.emit('set', false); });\n  }\n}\n\n\n    \n\n\n\n\n\n\n\n\n\n                   \n    \n         results matching \"\"\n        \n    \n    \n        No results matching \"\"\n    \n\n"},"components/NoteComponent.html":{"url":"components/NoteComponent.html","title":"component - NoteComponent","body":"\n                   \n\n\n\n\n\n  Components\n  \n  NoteComponent\n\n\n\n        \n            Info\n        \n        \n            Source\n        \n        \n            Template\n        \n        \n            Styles\n        \n        \n            DOM Tree\n        \n\n\n\n    \n    File\n\n\n    src/app/mixer/palette/note/note.component.ts\n\n\n\n\n\n    \n        Implements\n    \n    \n                    OnInit\n    \n\n\n\n    Metadata\n    \n        \n\n\n\n\n\n\n\n\n\n\n\n            \n                selector\n                app-note\n            \n\n            \n                styleUrls\n                ./note.component.scss\n            \n\n\n\n            \n                templateUrl\n                ./note.component.html\n            \n\n\n\n\n\n\n\n\n        \n    \n\n\n    \n    Index\n    \n        \n                \n                    \n                        Properties\n                    \n                \n                \n                    \n                        \n                            \n                                    Private\n                                _scale\n                            \n                            \n                                bounds\n                            \n                            \n                                canvas\n                            \n                            \n                                cx\n                            \n                            \n                                note\n                            \n                        \n                    \n                \n\n                \n                    \n                        Methods\n                    \n                \n                \n                    \n                        \n                            \n                                delete\n                            \n                            \n                                dragMove\n                            \n                            \n                                drawForPrint\n                            \n                            \n                                ngAfterViewInit\n                            \n                            \n                                ngOnInit\n                            \n                            \n                                rescale\n                            \n                            \n                                save\n                            \n                        \n                    \n                \n\n                \n                    \n                        Inputs\n                    \n                \n                \n                    \n                        \n                            \n                                default_cell\n                            \n                            \n                                id\n                            \n                            \n                                scale\n                            \n                        \n                    \n                \n\n                \n                    \n                        Outputs\n                    \n                \n                \n                    \n                        \n                            \n                                deleteNote\n                            \n                            \n                                saveNoteText\n                            \n                        \n                    \n                \n\n\n\n                    \n                        \n                            Accessors\n                        \n                    \n                    \n                        \n                            \n                                \n                                    scale\n                                \n                            \n                        \n                    \n        \n    \n\n\n    \n    Constructor\n        \n            \n                \n                    \nconstructor(notes: NotesService, viewport: ViewportService)\n                    \n                \n                        \n                            \n                                Defined in src/app/mixer/palette/note/note.component.ts:38\n                            \n                        \n\n                \n                    \n                            \n                                    Parameters :\n                                    \n                                        \n                                            \n                                                Name\n                                                    Type\n                                                Optional\n                                            \n                                        \n                                        \n                                                \n                                                        notes\n                                                  \n                                                        \n                                                                    NotesService\n                                                        \n                                                  \n                                                    \n                                                            No\n                                                    \n                                                    \n                                                \n                                                \n                                                        viewport\n                                                  \n                                                        \n                                                                        ViewportService\n                                                        \n                                                  \n                                                    \n                                                            No\n                                                    \n                                                    \n                                                \n                                        \n                                    \n                            \n                    \n                \n            \n        \n\n\n    \n    Inputs\n        \n            \n                \n                    \n                        \n                        default_cell\n                    \n                \n                \n                    \n                        Type :         number\n\n                    \n                \n                        \n                            \n                                    Defined in src/app/mixer/palette/note/note.component.ts:16\n                            \n                        \n            \n        \n        \n            \n                \n                    \n                        \n                        id\n                    \n                \n                \n                    \n                        Type :         number\n\n                    \n                \n                        \n                            \n                                    Defined in src/app/mixer/palette/note/note.component.ts:15\n                            \n                        \n            \n        \n        \n            \n                \n                    \n                        \n                        scale\n                    \n                \n                \n                    \n                        Type :         number\n\n                    \n                \n                        \n                            \n                                    Defined in src/app/mixer/palette/note/note.component.ts:19\n                            \n                        \n            \n        \n\n    \n    Outputs\n        \n            \n                \n                    \n                        \n                        deleteNote\n                    \n                \n                \n                    \n                        Type :         any\n\n                    \n                \n                        \n                            \n                                    Defined in src/app/mixer/palette/note/note.component.ts:26\n                            \n                        \n            \n        \n        \n            \n                \n                    \n                        \n                        saveNoteText\n                    \n                \n                \n                    \n                        Type :         any\n\n                    \n                \n                        \n                            \n                                    Defined in src/app/mixer/palette/note/note.component.ts:27\n                            \n                        \n            \n        \n\n\n\n    \n    \n    \n        Methods\n    \n    \n        \n            \n                \n                    \n                    \n                        delete\n                        \n                    \n                \n            \n            \n                \ndelete(id: number)\n                \n            \n\n\n            \n                \n                    Defined in src/app/mixer/palette/note/note.component.ts:66\n                \n            \n\n\n            \n                \n\n                    \n                        Parameters :\n                        \n                        \n                            \n                                \n                                    Name\n                                    Type\n                                    Optional\n                                \n                            \n                            \n                                \n                                    id\n                                    \n                                                number\n                                    \n\n                                    \n                                        No\n                                    \n\n\n                                \n                            \n                        \n                    \n                    \n                    \n                    \n                        Returns :         void\n\n                    \n                    \n                        \n                    \n                \n            \n        \n    \n    \n        \n            \n                \n                    \n                    \n                        dragMove\n                        \n                    \n                \n            \n            \n                \ndragMove($event: any)\n                \n            \n\n\n            \n                \n                    Defined in src/app/mixer/palette/note/note.component.ts:71\n                \n            \n\n\n            \n                \n\n                    \n                        Parameters :\n                        \n                        \n                            \n                                \n                                    Name\n                                    Type\n                                    Optional\n                                \n                            \n                            \n                                \n                                    $event\n                                    \n                                                any\n                                    \n\n                                    \n                                        No\n                                    \n\n\n                                \n                            \n                        \n                    \n                    \n                    \n                    \n                        Returns :         void\n\n                    \n                    \n                        \n                    \n                \n            \n        \n    \n    \n        \n            \n                \n                    \n                    \n                        drawForPrint\n                        \n                    \n                \n            \n            \n                \ndrawForPrint(canvas, cx, scale: number)\n                \n            \n\n\n            \n                \n                    Defined in src/app/mixer/palette/note/note.component.ts:118\n                \n            \n\n\n            \n                \n                    draw onto the supplied canvas, to be used when printing\n\n\n                    \n                        Parameters :\n                        \n                        \n                            \n                                \n                                    Name\n                                    Type\n                                    Optional\n                                \n                            \n                            \n                                \n                                    canvas\n                                    \n                                    \n\n                                    \n                                        No\n                                    \n\n\n                                \n                                \n                                    cx\n                                    \n                                    \n\n                                    \n                                        No\n                                    \n\n\n                                \n                                \n                                    scale\n                                    \n                                                number\n                                    \n\n                                    \n                                        No\n                                    \n\n\n                                \n                            \n                        \n                    \n                    \n                    \n                    \n                        Returns :         void\n\n                    \n                    \n                        \n                    \n                \n            \n        \n    \n    \n        \n            \n                \n                    \n                    \n                        ngAfterViewInit\n                        \n                    \n                \n            \n            \n                \nngAfterViewInit()\n                \n            \n\n\n            \n                \n                    Defined in src/app/mixer/palette/note/note.component.ts:59\n                \n            \n\n\n            \n                \n\n                    \n                        Returns :         void\n\n                    \n                \n            \n        \n    \n    \n        \n            \n                \n                    \n                    \n                        ngOnInit\n                        \n                    \n                \n            \n            \n                \nngOnInit()\n                \n            \n\n\n            \n                \n                    Defined in src/app/mixer/palette/note/note.component.ts:44\n                \n            \n\n\n            \n                \n\n                    \n                        Returns :         void\n\n                    \n                \n            \n        \n    \n    \n        \n            \n                \n                    \n                    \n                        rescale\n                        \n                    \n                \n            \n            \n                \nrescale()\n                \n            \n\n\n            \n                \n                    Defined in src/app/mixer/palette/note/note.component.ts:85\n                \n            \n\n\n            \n                \n                    Called when main palette is rescaled and triggers call to rescale this element, and update its position\nso it remains at the same coords.\n\n\n                    \n                        Returns :         void\n\n                    \n                \n            \n        \n    \n    \n        \n            \n                \n                    \n                    \n                        save\n                        \n                    \n                \n            \n            \n                \nsave()\n                \n            \n\n\n            \n                \n                    Defined in src/app/mixer/palette/note/note.component.ts:109\n                \n            \n\n\n            \n                \n\n                    \n                        Returns :         void\n\n                    \n                \n            \n        \n    \n\n    \n    \n    \n        Properties\n    \n    \n        \n            \n                \n                    \n                    \n                            Private\n                        _scale\n                        \n                    \n                \n            \n                \n                    \n                        Type :         number\n\n                    \n                \n                \n                    \n                        Default value : 5\n                    \n                \n                    \n                        \n                                Defined in src/app/mixer/palette/note/note.component.ts:24\n                        \n                    \n\n\n        \n    \n    \n        \n            \n                \n                    \n                    \n                        bounds\n                        \n                    \n                \n            \n                \n                    \n                        Type :         Bounds\n\n                    \n                \n                \n                    \n                        Default value : {\n    topleft: {x:0, y:0},\n    width: 200, \n    height: 200\n  }\n                    \n                \n                    \n                        \n                                Defined in src/app/mixer/palette/note/note.component.ts:30\n                        \n                    \n\n\n        \n    \n    \n        \n            \n                \n                    \n                    \n                        canvas\n                        \n                    \n                \n            \n                \n                    \n                        Type :     HTMLCanvasElement\n\n                    \n                \n                    \n                        \n                                Defined in src/app/mixer/palette/note/note.component.ts:37\n                        \n                    \n\n\n        \n    \n    \n        \n            \n                \n                    \n                    \n                        cx\n                        \n                    \n                \n            \n                \n                    \n                        Type :         any\n\n                    \n                \n                    \n                        \n                                Defined in src/app/mixer/palette/note/note.component.ts:38\n                        \n                    \n\n\n        \n    \n    \n        \n            \n                \n                    \n                    \n                        note\n                        \n                    \n                \n            \n                \n                    \n                        Type :     Note\n\n                    \n                \n                    \n                        \n                                Defined in src/app/mixer/palette/note/note.component.ts:29\n                        \n                    \n\n\n        \n    \n\n\n    \n    \n        Accessors\n    \n        \n            \n                \n                    \n                        \n                        scale\n                    \n                \n\n                \n                    \n                        getscale()\n                    \n                \n                            \n                                \n                                    Defined in src/app/mixer/palette/note/note.component.ts:19\n                                \n                            \n\n                \n                    \n                        setscale(value: number)\n                    \n                \n                            \n                                \n                                    Defined in src/app/mixer/palette/note/note.component.ts:20\n                                \n                            \n                    \n                        \n\n                                \n                                        Parameters :\n                                        \n                                            \n                                                \n                                                    Name\n                                                        Type\n                                                    Optional\n                                                \n                                            \n                                            \n                                                    \n                                                            value\n                                                    \n                                                            \n                                                                            number\n                                                            \n                                                    \n                                                        \n                                                                No\n                                                        \n                                                        \n                                                    \n                                            \n                                        \n                                \n                                \n                                \n                                \n                                    Returns :         void\n\n                                \n                        \n                    \n            \n        \n\n\n\n\n    \n        import { Component, EventEmitter, Input, OnInit, Output, ViewChild } from '@angular/core';\nimport utilInstance from '../../../core/model/util';\nimport { Bounds, Interlacement, Point } from '../../../core/model/datatypes';\nimport { Note, NotesService } from '../../../core/provider/notes.service';\nimport { ViewportService } from '../../provider/viewport.service';\n\n@Component({\n  selector: 'app-note',\n  templateUrl: './note.component.html',\n  styleUrls: ['./note.component.scss']\n})\nexport class NoteComponent implements OnInit {\n\n  //generated by the note service\n  @Input()  id: number;\n  @Input()  default_cell: number;\n\n  @Input()\n  get scale(): number { return this._scale; }\n  set scale(value: number) {\n    this._scale = value;\n    this.rescale();\n  }\n  private _scale:number = 5;\n\n  @Output() deleteNote: any = new EventEmitter();  \n  @Output() saveNoteText: any = new EventEmitter();  \n\n  note: Note;\n  bounds: Bounds = {\n    topleft: {x:0, y:0},\n    width: 200, \n    height: 200\n  };\n\n\n  canvas: HTMLCanvasElement;\n  cx: any;\n\n  constructor(private notes: NotesService,private viewport:ViewportService) { \n\n  }\n\n  ngOnInit() {\n    this.note = this.notes.get(this.id);\n    if(this.note == undefined){\n      this.bounds.topleft = {x: 0, y: 0};\n      console.error(\"cound not find note on init \", this.id, this.notes.notes);\n    }else{\n      this.bounds.topleft = {\n        x: this.note.interlacement.j * this.scale,\n        y: this.note.interlacement.i * this.scale\n      }\n    }\n\n   \n  }\n\n  ngAfterViewInit(){\n    this.canvas =  document.getElementById(\"notecanvas-\"+this.note.id.toString());\n    this.cx = this.canvas.getContext(\"2d\");\n    this.rescale();\n    \n  }\n\n  delete(id: number){\n    this.deleteNote.emit(id);\n  }\n    \n\n  dragMove($event: any) {\n    const pointer:Point = $event.pointerPosition;\n    const relative:Point = utilInstance.getAdjustedPointerPosition(pointer, this.viewport.getBounds());\n    const adj:Point = utilInstance.snapToGrid(relative, this.scale);\n    this.bounds.topleft = adj;\n    this.note.interlacement = utilInstance.resolvePointToAbsoluteNdx(adj, this.scale);\n  }\n\n\n  /**\n   * Called when main palette is rescaled and triggers call to rescale this element, and update its position \n   * so it remains at the same coords. \n   * @param scale - the zoom scale of the iterface (e.g. the number of pixels to render each cell)\n   */\n   rescale(){\n\n    if(this.note === undefined){\n      console.error(\"note is undefined on rescale\");\n      return;\n    }\n\n    const zoom_factor:number = this.scale/this.default_cell;\n\n\n    //redraw at scale\n    const container: HTMLElement = document.getElementById('scalenote-'+this.note.id);\n    container.style.transformOrigin = 'top left';\n    container.style.transform = 'scale(' + zoom_factor + ')';\n   \n\n    this.bounds.topleft = {\n      x: this.note.interlacement.j * this.scale,\n      y: this.note.interlacement.i * this.scale\n    };\n\n  \n  }\n\n  save(){\n    this.saveNoteText.emit();\n  }\n\n\n  /**\n   * draw onto the supplied canvas, to be used when printing\n   * @returns \n   */\n   drawForPrint(canvas, cx, scale: number) {\n\n    if(canvas === undefined) return;\n   \n   \n\n    //draw the supplemental info like size\n    cx.fillStyle = \"#666666\";\n    cx.font = scale*2+\"px Verdana\";\n    cx.fillText(this.note.text,this.bounds.topleft.x, this.bounds.topleft.y+this.bounds.height + 20 );\n\n  }\n\n\n\n}\n\n    \n\n    \n        \n\n\n\n\n\n\n\n  \n\n     \n\n        \n        \n  \n  \n      \n      \n    \n\n    \n    \n    \n \n        \n          Comment #{{note.id}}\n          \n        \n    \n\n    \n \n \n\n\n\n\n\n\n\n\n\n\n    \n\n    \n                \n                    ./note.component.scss\n                \n                .subdraft-container{\n\n\tposition: absolute;\n\ttop: 0px;\n\tleft: 0px;\n\tdisplay: flex;\n\tflex-direction: row;\n\tjustify-content:flex-end;\n}\n\n.text-entry{\n\tdisplay: flex;\n\tflex-direction: column;\n}\n\n.scale-container{\n\n\tposition: absolute;\n\ttop: 0px;\n\tleft: 0px;\n\tcolor: grey;\n\tdisplay: flex;\n\tflex-direction: row;\n\tjustify-content:flex-end;\n}\n\nh3{\n\tfont-weight: 800;\n}\n\n\n\n.is_preview{\n\tz-index: 10;\n}\n\n.subdraft-container{\n\n\tdisplay: flex;\n\tflex-direction: row;\n\n\t.subdraft-details{\n\t\tdisplay:flex;\n\t\twidth: 30px;\n\t\tflex-direction: column;\n\t\tjustify-content: flex-start;\n\t}\n\n\tbutton{\n\t\tdisplay: none;\n\t}\n\n\tsvg{\n\t\tdisplay: none;\n\t\tcolor: grey;\n\t}\n\t\n}\n\n.subdraft-container:hover,\n.subdraft-container:active{\n\n\n\t.subdraft-details{\n\t\tdisplay: flex;\n\t\tflex-direction: column;\n\t}\n\t\n\tsvg{\n\t\tdisplay: block;\n\t}\n\n\tbutton{\n\t\tdisplay: flex;\n\t}\n\n\n\n}\n\n\n.mat-icon{\n\theight: auto;\n}\n\n\n.align-top{\n\tdisplay: flex;\n\tflex-direction: column;\n}\n\n.subdraft-contents{\n\tdisplay: flex;\n\tflex-direction: row;\n}\n\n\n#bitmapImage{\n\tdisplay: none;\n\tpointer-events: none;\n}\n\n\ndiv.cdk-drag-dragging .maindraft{\n\tborder: thin solid #ff4081;\n}\n\n.hide{\n\tdisplay:none;\n}\n\n\n\n    \n\n    \n        \n        \n            \n                Legend\n            \n            \n                Html element\n            \n            \n                Component\n            \n            \n                Html element with directive\n            \n        \n    \n\n    \n\n\n\n\n\n\n        var COMPONENT_TEMPLATE = '                                                                          Comment #{{note.id}}                            '\n    var COMPONENTS = [{'name': 'ConnectionComponent', 'selector': 'app-connection'},{'name': 'DraftdetailComponent', 'selector': 'app-draftdetail'},{'name': 'ImageComponent', 'selector': 'app-image'},{'name': 'InletComponent', 'selector': 'app-inlet'},{'name': 'MixerComponent', 'selector': 'app-mixer'},{'name': 'MixerViewComponent', 'selector': 'app-mixerview'},{'name': 'NoteComponent', 'selector': 'app-note'},{'name': 'OperationComponent', 'selector': 'app-operation'},{'name': 'OpHelpModal', 'selector': 'app-ophelp'},{'name': 'OpsComponent', 'selector': 'app-ops'},{'name': 'OpSequencerComponent', 'selector': 'app-op-sequencer'},{'name': 'PaletteComponent', 'selector': 'app-palette'},{'name': 'ParameterComponent', 'selector': 'app-parameter'},{'name': 'PlayerComponent', 'selector': 'app-player'},{'name': 'SnackbarComponent', 'selector': 'app-snackbar'},{'name': 'SubdraftComponent', 'selector': 'app-subdraft'},{'name': 'VirtualPedalsComponent', 'selector': 'app-virtual-pedals'},{'name': 'WeavingStateComponent', 'selector': 'app-weaving-state'}];\n    var DIRECTIVES = [{'name': 'MarqueeComponent', 'selector': 'app-marquee'},{'name': 'SelectionComponent', 'selector': 'app-selection'}];\n    var ACTUAL_COMPONENT = {'name': 'NoteComponent'};\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n                   \n    \n         results matching \"\"\n        \n    \n    \n        No results matching \"\"\n    \n\n"},"classes/OnlineStatus.html":{"url":"classes/OnlineStatus.html","title":"class - OnlineStatus","body":"\n                   \n\n\n\n\n\n\n\n\n\n\n\n\n\n  Classes\n  OnlineStatus\n\n\n\n        \n            Info\n        \n        \n            Source\n        \n\n\n\n    \n        \n            File\n        \n        \n            src/app/player/model/dbnodes.ts\n        \n\n\n            \n                Description\n            \n            \n                OnlineStatus representing whether or not the\n\"host\" device is online. The host device is responsible\nfor keeping the node set to \"true\", while any listener\ndevices check occasionally for the host's status by\nattempting to set the node to \"false\".\n\n            \n\n            \n                Extends\n            \n            \n                        DBListener\n            \n\n\n\n            \n    Index\n    \n        \n                \n                    \n                        Properties\n                    \n                \n                \n                    \n                        \n                            \n                                _active\n                            \n                            \n                                _name\n                            \n                            \n                                _ref\n                            \n                            \n                                _val\n                            \n                            \n                                _dbref\n                            \n                            \n                                id\n                            \n                            \n                                    Optional\n                                key\n                            \n                            \n                                unsubscribers\n                            \n                        \n                    \n                \n\n                \n                    \n                        Methods\n                    \n                \n                \n                    \n                        \n                            \n                                checkAlive\n                            \n                            \n                                attach\n                            \n                            \n                                detach\n                            \n                            \n                                getNow\n                            \n                        \n                    \n                \n\n\n\n\n\n        \n    \n\n\n            \n    Constructor\n        \n            \n                \n                    \nconstructor(params)\n                    \n                \n                        \n                            \n                                Defined in src/app/player/model/dbnodes.ts:651\n                            \n                        \n\n                \n                    \n                            \n                                    Parameters :\n                                    \n                                        \n                                            \n                                                Name\n                                                Optional\n                                            \n                                        \n                                        \n                                                \n                                                        params\n                                                  \n                                                  \n                                                    \n                                                            No\n                                                    \n                                                    \n                                                \n                                        \n                                    \n                            \n                    \n                \n            \n        \n\n\n            \n    \n    \n        Properties\n    \n    \n        \n            \n                \n                    \n                    \n                        _active\n                        \n                    \n                \n            \n                \n                    \n                        Type :         boolean\n\n                    \n                \n                        \n                            \n                                Inherited from         DBNode\n\n                            \n                        \n                    \n                        \n                                Defined in         DBNode:651\n\n                        \n                    \n\n\n        \n    \n    \n        \n            \n                \n                    \n                    \n                        _name\n                        \n                    \n                \n            \n                \n                    \n                        Type :         string\n\n                    \n                \n                        \n                            \n                                Inherited from         DBNode\n\n                            \n                        \n                    \n                        \n                                Defined in         DBNode:648\n\n                        \n                    \n\n\n        \n    \n    \n        \n            \n                \n                    \n                    \n                        _ref\n                        \n                    \n                \n            \n                \n                    \n                        Type :     DatabaseReference\n\n                    \n                \n                    \n                        \n                                Defined in src/app/player/model/dbnodes.ts:649\n                        \n                    \n\n\n        \n    \n    \n        \n            \n                \n                    \n                    \n                        _val\n                        \n                    \n                \n            \n                \n                    \n                        Type :         boolean\n\n                    \n                \n                        \n                            \n                                Inherited from         DBNode\n\n                            \n                        \n                    \n                        \n                                Defined in         DBNode:650\n\n                        \n                    \n\n\n        \n    \n    \n        \n            \n                \n                    \n                    \n                        _dbref\n                        \n                    \n                \n            \n                \n                    \n                        Type :     DatabaseReference\n\n                    \n                \n                        \n                            \n                                Inherited from         DBNode\n\n                            \n                        \n                    \n                        \n                                Defined in         DBNode:124\n\n                        \n                    \n\n\n        \n    \n    \n        \n            \n                \n                    \n                    \n                        id\n                        \n                    \n                \n            \n                \n                    \n                        Type :         number\n\n                    \n                \n                        \n                            \n                                Inherited from         DBNode\n\n                            \n                        \n                    \n                        \n                                Defined in         DBNode:121\n\n                        \n                    \n\n\n        \n    \n    \n        \n            \n                \n                    \n                    \n                            Optional\n                        key\n                        \n                    \n                \n            \n                \n                    \n                        Type :         string\n\n                    \n                \n                        \n                            \n                                Inherited from         DBNode\n\n                            \n                        \n                    \n                        \n                                Defined in         DBNode:122\n\n                        \n                    \n\n\n        \n    \n    \n        \n            \n                \n                    \n                    \n                        unsubscribers\n                        \n                    \n                \n            \n                \n                    \n                        Type :     Array\n\n                    \n                \n                        \n                            \n                                Inherited from         DBNode\n\n                            \n                        \n                    \n                        \n                                Defined in         DBNode:44\n\n                        \n                    \n\n            \n                \n                    holds the Unsubscribe functions that are returned by\nDB event functions like onValue(...)\n\n                \n            \n\n        \n    \n\n\n            \n    \n    \n        Methods\n    \n    \n        \n            \n                \n                    \n                    \n                        checkAlive\n                        \n                    \n                \n            \n            \n                \ncheckAlive()\n                \n            \n\n\n            \n                \n                    Defined in src/app/player/model/dbnodes.ts:663\n                \n            \n\n\n            \n                \n\n                    \n                        Returns :         void\n\n                    \n                \n            \n        \n    \n    \n        \n            \n                \n                    \n                    \n                        attach\n                        \n                    \n                \n            \n            \n                \nattach()\n                \n            \n\n\n            \n                \n                    Inherited from         DBNode\n\n                \n            \n            \n                \n                        Defined in         DBNode:132\n\n                \n            \n\n\n            \n                \n\n                    \n                        Returns :         void\n\n                    \n                \n            \n        \n    \n    \n        \n            \n                \n                    \n                    \n                        detach\n                        \n                    \n                \n            \n            \n                \ndetach()\n                \n            \n\n\n            \n                \n                    Inherited from         DBNode\n\n                \n            \n            \n                \n                        Defined in         DBNode:149\n\n                \n            \n\n\n            \n                \n\n                    \n                        Returns :         void\n\n                    \n                \n            \n        \n    \n    \n        \n            \n                \n                    \n                    \n                        getNow\n                        \n                    \n                \n            \n            \n                \ngetNow()\n                \n            \n\n\n            \n                \n                    Inherited from         DBListener\n\n                \n            \n            \n                \n                        Defined in         DBListener:141\n\n                \n            \n\n\n            \n                \n\n                    \n                        Returns :         void\n\n                    \n                \n            \n        \n    \n\n\n\n\n\n\n    \n\n\n    \n        import { child, ref, set, get, query, \n  onValue, onChildAdded, onChildChanged, onChildRemoved,\n  push, remove,\n  DatabaseReference, \n} from \"firebase/database\";\nimport { Database } from '@angular/fire/database';\nimport { EventEmitter } from 'events';\n\nexport interface NodeParams {\n  db?: Database,\n  name?: string,\n  root?: string,\n  path?: string,\n  key?: string,\n  initVal?: any,\n  ref?: DatabaseReference,\n  id?: number\n}\n\nexport type NodeValue = string | boolean | number | { [key: string]: any };\n\ninterface NodeMethods {\n  attach(): void,\n  detach(): void,\n}\n\n/**\n * @class DBNode\n * @desc Wrapper for a Firebase database ref and\n * the value stored at that DB node.\n */\nabstract class DBNode extends EventEmitter implements NodeMethods {\n  id: number;\n  key?: string;\n  _name: string;\n  _dbref: DatabaseReference;\n  _val: NodeValue;\n  _active: boolean;\n\n  /**\n   * holds the Unsubscribe functions that are returned by\n   * DB event functions like onValue(...)\n   */\n  unsubscribers: Array;\n\n  /**\n   * \n   * @param {*} params \\{ db: Database, path: string, initVal: any }\n   * @param {*} params \\{ ref: DatabaseReference, key: string, initVal: any }\n   */\n\n  constructor(params: NodeParams) {\n    super();\n    this.active = false;\n    this.unsubscribers = [];\n    if (params.db) {\n      this._name = params.path;\n      this._dbref = ref(params.db, params.root + params.path);\n      this._val = params.initVal;\n      // console.log(this);\n    } else if (params.ref) {\n      this._name = params.key;\n      this._dbref = params.ref;\n    }\n\n    if(params.id > -1) {\n      this.id = params.id;\n    }\n    console.log(this.name);\n  }\n\n  get ref() {\n    return this._dbref;\n  }\n\n  get name() {\n    return this._name;\n  }\n\n  get val() {\n    if (!this.active) {\n      return false;\n    }\n\n    if (typeof(this._val) == 'number' || typeof(this._val == 'boolean')) {\n      return this._val;\n    } \n    \n    if (this._val != undefined) {\n      return Object.keys(this._val);\n    }\n  }\n\n  set val(x) {\n    this._val = x;\n  }\n\n  get active() {\n    return this._active;\n  }\n\n  set active(tf: boolean) {\n    this._active = tf;\n  }\n\n  // methods for a node: \n  // attach() means it is updating with the database and emitting events\n  // detach() means it is not updating, no events\n  abstract attach();\n  abstract detach();\n}\n\ntype Keyed = Node & { key: string };\n\n/**\n * @class DBListener\n * @desc A DBNode that only reads from the database.\n * When `active = true`, will emit events on the value changing.\n */\nexport class DBListener extends DBNode {\n  id: number;\n  key?: string;\n  _name: string;\n  _dbref: DatabaseReference;\n  _val: any;\n  _active: boolean;\n\n  constructor(params: NodeParams) {\n    super(params);\n  }\n\n  attach() {\n    this.active = true;\n    let unsub = onValue(this.ref, (snapshot) => {\n      this.val = snapshot.val();\n      this.emit('change', this.val);\n    });\n    this.unsubscribers.push(unsub);\n  }\n\n  getNow() {\n    get(query(this.ref))\n      .then((snapshot) => {\n        this.val = snapshot.val();\n      })\n      .catch(result => console.log(result));\n  }\n\n  detach() {\n    if (this.active) {\n      while (this.unsubscribers.length > 0) {\n        let unsub = this.unsubscribers.pop();\n        unsub();\n      }\n    }\n    this.active = false;\n  }\n}\n\n/**\n * @class DBWriter\n * @desc A DBNode that only writes to the database. \n * When `active = true`, will pass `val` to the database.\n */\nexport class DBWriter extends DBNode {\n  id: number;\n  key?: string;\n  _name: string;\n  _ref: DatabaseReference;\n  _val: any;\n  _active: boolean;\n\n  constructor(params: NodeParams) {\n    super(params);\n  }\n\n  attach() {\n    this.active = true;\n  }\n\n  setVal(x) {\n    this.val = x;\n    if (this.active) {\n      set(this.ref, this.val);\n    }\n  }\n\n  detach() {\n    this.active = false;\n  }\n}\n\n/** Special DBWriter that expects the node to be cleared by the\n * other end upon receipt\n */\nexport class DBWriteBuffer extends DBWriter {\n  id: number;\n  _name: string;\n  _ref: DatabaseReference;\n  _val: any;\n  _active: boolean;\n\n  constructor(params: NodeParams) {\n    super(params);\n  }\n\n  setVal(x) {\n    get(query(this.ref))\n      .then((snapshot) => {\n        if(!snapshot.val()) {\n          console.log(\"overwriting data in buffer\");\n        }\n        super.setVal(x);\n      })\n      .catch(result => console.log(result));\n  }\n}\n\nexport class DBTwoWay extends DBNode {\n  id: number;\n  key?: string;\n  _name: string;\n  _dbref: DatabaseReference;\n  _val: any;\n  _active: boolean;\n\n  constructor(params: NodeParams) {\n    super(params);\n  }\n  \n  attach() {\n    this.active = true;\n    let unsub = onValue(this.ref, (snapshot) => {\n      this.val = snapshot.val();\n      this.emit('change', this.val);\n    });\n    this.unsubscribers.push(unsub);\n  }\n\n  getNow() {\n    get(query(this.ref))\n      .then((snapshot) => {\n        this.val = snapshot.val();\n      })\n      .catch(result => console.log(result));\n  }\n  \n  detach() {\n    if (this.active) {\n      while (this.unsubscribers.length > 0) {\n        let unsub = this.unsubscribers.pop();\n        unsub();\n      }\n    }\n    this.active = false;\n  }\n  \n  setVal(x) {\n    this.val = x;\n    if (this.active) {\n      set(this.ref, this.val);\n    }\n  }\n}\n\nclass DBNodeArray extends EventEmitter {\n  nodes: Array;\n  lengthNode: DBNode;\n  parentNode: DBNode;\n\n  constructor(lengthNode, parentNode, init: any = {}) {\n    super();\n    this.lengthNode = lengthNode;\n    this.parentNode = parentNode;\n    if (init) {\n    } else {\n      this.nodes = [];\n    }\n  }\n\n  get length() { return this.nodes.length; }\n\n  get active() { return (this.lengthNode.active && this.parentNode.active); }\n\n  get ready() { return (this.lengthNode.val > 0 && this.parentNode.val != false); }\n\n  nodeAt(n) {\n    console.log(this.nodes);\n    console.log(\"node at \", n);\n    console.log(this.nodes[n]);\n    return this.nodes[n];\n  }\n\n  pushNode(n) {\n    this.nodes.push(n);\n  }\n\n  popNode() {\n    return this.nodes.pop();\n  }\n}\n\n/**\n * @class `DBListenerArray`\n * @desc Represents a listener to a list of values in the database \n * (generalizes to `DBNodeArray`). Assumes that the data list is\n * structured such that `lengthNode` is a `DBListener` that stores the \n * length of the list, while `parentNode` is a `DBListener` to the parent\n * node of the list. Each item in the list is a child of `parentNode`,\n * which is then stored as a `DBListener` in the array `nodes`.\n */\nexport class DBListenerArray extends DBNodeArray {\n  lengthNode: DBListener;\n  parentNode: DBListener;\n  nodes: Array;\n\n  /**\n  * holds the Unsubscribe functions that are returned by\n  * DB event functions like onValue(...)\n  */\n  unsubscribers: Array;\n\n  constructor(lengthNode: DBListener, parentNode: DBListener) {\n    super(lengthNode, parentNode);\n    this.lengthNode = lengthNode;\n    this.parentNode = parentNode;\n    this.nodes = [];\n    this.unsubscribers = [];\n  }\n\n  /**\n   * @method attach\n   */\n  attach() {\n    this.lengthNode.attach();\n    this.lengthNode.on('change', (val) => {\n        this.emit('ready', this.ready);\n    });\n\n    this.parentNode.attach();\n    this.parentNode.once('change', (val) => {\n      this.emit('ready', this.ready);\n    });\n\n    for (var node of this.nodes) {\n      this.attachChildNode(node);\n    }\n\n    this.unsubscribers.push(\n      onChildAdded(this.parentNode.ref, (snapshot) => {\n        // console.log(\"child added\", snapshot);\n        this.addNode(snapshot.key);\n    }));\n\n    this.unsubscribers.push(\n      onChildChanged(this.parentNode.ref, (snapshot) => {\n        console.log(\"child changed\", snapshot);\n    }));\n\n    this.unsubscribers.push(\n      onChildRemoved(this.parentNode.ref, () => {\n        // console.log(\"child removed\", snapshot);\n        let removed = this.popNode();\n        this.emit('child-removed', removed);\n    }));\n  }\n\n  detach() {\n    if (this.active) {\n      while (this.unsubscribers.length > 0) {\n        let unsub = this.unsubscribers.pop();\n        unsub();\n      }\n    }\n  }\n\n  nodeAt(n: number) {\n    // console.log(this.nodes);\n    // console.log(\"node at \", n);\n    // console.log(this.nodes[n]);\n    return this.nodes[n];\n  }\n\n  /**\n   * Creating a new child node.\n   * @param key \n   */\n  addNode(key: string) {\n    console.log('child key', key);\n    const childRef = child(this.parentNode.ref, key);\n    const childNode = new DBListener({ ref: childRef, key: key, id: this.length });\n    this.attachChildNode(childNode);\n    this.pushNode(childNode);\n    this.emit('child-added', childNode);\n    // this.lengthNode.setVal(this.length);\n  }\n\n  /**\n   * Attaching a child node that was created elsewhere.\n   * Invokes child's `attach()` method and adds event listener\n   * that will emit a `child-change` event.\n   * @param node \n   */\n  attachChildNode(node: DBListener) {\n    node.attach();\n    node.on('change', (val) => {\n      this.emit('child-change', {\n        id: node.id,\n        val: val\n      });\n    });\n  }\n\n  // remNode() {\n  //   const node = this.popNode();\n  //   // remove(node.ref);\n  //   // this.lengthNode.setVal(this.length);\n  // }\n\n  // updateArray(num: number) {\n  //   // this.parentNode.getNow();\n  //   if (num > this.length) {\n  //     let parentKeys = this.parentNode.val;\n  //     // console.log(this.parentNode);\n  //     console.log(parentKeys);\n  //     let childKeys = Object.keys(parentKeys);\n  //     while (this.length  num) {\n  //       this.popNode();\n  //     }\n  //   }\n  //   console.log(this);\n  // }\n\n  toString() {\n    var str = \"\";\n    // str += \"length: \" + this.length + \", \";\n    str += \"[ \\n\";\n    for (var i=0; i ;\n  lengthNode: DBWriter;\n  parentNode: DBWriter;\n\n  constructor(lengthNode, parentNode, init) {\n    super(lengthNode, parentNode, init);\n    if (!init) {\n      this.lengthNode.setVal(0);\n      this.parentNode.setVal(EMPTY_NODE_ARRAY);\n    }\n\n    // console.log(this);\n  }\n\n  addNode(initVal) {\n    const childRef = push(this.parentNode.ref, initVal);\n    const childNode = new DBWriter({ ref: childRef, initVal });\n    childNode.attach();\n    this.pushNode(childNode);\n    this.lengthNode.setVal(this.length);\n  }\n\n  remNode() {\n    const node = this.popNode();\n    remove(node.ref);\n    this.lengthNode.setVal(this.length);\n  }\n\n  updateArray(num, newStates) {\n    if (num > this.length) {\n      while (this.length  num) {\n        this.remNode();\n      }\n    }\n  }\n\n  setNode(i, x) {\n    this.nodes[i].setVal(x);\n  }\n\n}\n\n/**\n * Array of two-way DBNodes where both ends are listening for\n * changes AND may write to the DB -- such as the virtual pedals\n * where both AdaCAD and the Pi/PC can add virtual pedals\n */\nexport class DBTwoWayArray extends DBNodeArray {\n  nodes: Array = [];\n  lengthNode: DBTwoWay;\n  parentNode: DBTwoWay;\n\n  /**\n  * holds the Unsubscribe functions that are returned by\n  * DB event functions like onValue(...)\n  */\n  unsubscribers: Array;\n\n  constructor(lengthNode: DBTwoWay, parentNode: DBTwoWay, init?: Array) {\n    super(lengthNode, parentNode, init);\n    this.unsubscribers = [];\n    if (!init) {\n      this.lengthNode.setVal(0);\n      this.parentNode.setVal(EMPTY_NODE_ARRAY);\n    }\n  }\n\n  addNode(initVal: any) {\n    push(this.parentNode.ref, initVal);\n    // const childNode = new DBTwoWay({ ref: childRef, initVal });\n    // childNode.attach();\n    // this.pushNode(childNode);\n    // this.lengthNode.setVal(this.length);\n    // console.log('child key', key);\n  }\n\n  onNodeAdded(key: string) {\n     const childRef = child(this.parentNode.ref, key);\n     const childNode = new DBTwoWay({ ref: childRef, key: key, id: this.length });\n     this.attachChildNode(childNode);\n     this.pushNode(childNode);\n     this.lengthNode.setVal(this.length);\n     this.emit('child-added', childNode);\n  }\n\n  remNode() {\n    const lastNode = this.nodeAt(this.length-1);\n    remove(lastNode.ref);\n    // this.lengthNode.setVal(this.length);\n  }\n\n  onNodeRemoved() {\n    let removed = this.popNode();\n    this.lengthNode.setVal(this.length);\n    return removed;\n  }\n\n  updateArray(num: number, newStates: Array) {\n    if (num > this.length) {\n      while (this.length  num) {\n        this.remNode();\n      }\n    }\n  }\n\n  setNode(i: number, x: any) {\n    this.nodes[i].setVal(x);\n  }\n\n  /**\n  * @method attach\n  */\n  attach() {\n    this.lengthNode.attach();\n    this.lengthNode.on('change', (val) => {\n        this.emit('ready', this.ready);\n    });\n\n    this.parentNode.attach();\n    this.parentNode.once('change', (val) => {\n      this.emit('ready', this.ready);\n    });\n\n    for (var node of this.nodes) {\n      this.attachChildNode(node);\n    }\n\n    this.unsubscribers.push(\n      onChildAdded(this.parentNode.ref, (snapshot) => {\n        // console.log(\"child added\", snapshot);\n        this.onNodeAdded(snapshot.key);\n    }));\n\n    this.unsubscribers.push(\n      onChildChanged(this.parentNode.ref, (snapshot) => {\n        console.log(\"child changed\", snapshot);\n    }));\n\n    this.unsubscribers.push(\n      onChildRemoved(this.parentNode.ref, () => {\n        // console.log(\"child removed\", snapshot);\n        let removed = this.onNodeRemoved();\n        this.emit('child-removed', removed);\n    }));\n  }\n \n  detach() {\n    if (this.active) {\n      while (this.unsubscribers.length > 0) {\n        let unsub = this.unsubscribers.pop();\n        unsub();\n      }\n    }\n  }\n\n  /**\n  * Attaching a child node that was created elsewhere.\n  * Invokes child's `attach()` method and adds event listener\n  * that will emit a `child-change` event.\n  * @param node \n  */\n  attachChildNode(node: DBListener) {\n    node.attach();\n    node.on('change', (val) => {\n      this.emit('child-change', {\n        id: node.id,\n        val: val\n      });\n    });\n  }\n}\n\n/** special types of DBNodes */\n\n/** @class\n * OnlineStatus representing whether or not the\n * \"host\" device is online. The host device is responsible\n * for keeping the node set to \"true\", while any listener\n * devices check occasionally for the host's status by \n * attempting to set the node to \"false\".\n */\nexport class OnlineStatus extends DBListener {\n  _name: string;\n  _ref: DatabaseReference;\n  _val: boolean;\n  _active: boolean;\n\n  constructor(params) {\n    super(params);\n    this.attach();\n    get(query(this.ref))\n      .then((snapshot) => {\n        this.val = snapshot.val();\n      })\n      .catch(result => console.log(result));\n  }\n\n  checkAlive() {\n    set(this.ref, false)\n      .then(() => { this.emit('set', true); })\n      .catch(() => { this.emit('set', false); });\n  }\n}\n\n\n    \n\n\n\n\n\n\n\n\n\n\n                   \n    \n         results matching \"\"\n        \n    \n    \n        No results matching \"\"\n    \n\n"},"interfaces/OpClassifier.html":{"url":"interfaces/OpClassifier.html","title":"interface - OpClassifier","body":"\n                   \n\n\n\n\n\n\n\n\n\n\n\n\n\n\n  Interfaces\n  \n  OpClassifier\n\n\n\n        \n            Info\n        \n        \n            Source\n        \n\n\n\n    \n        \n            File\n        \n        \n            src/app/mixer/model/operation/topology.ts\n        \n\n\n            \n                Description\n            \n            \n                Key-value pairs for an Operation's Topology and Constraint.\n\n            \n\n\n        \n            Index\n            \n                \n                    \n                        \n                            Properties\n                        \n                    \n                    \n                        \n                            \n                                \n                                        \n                                            input_drafts\n                                        \n                                \n                                \n                                        \n                                            input_params\n                                        \n                                \n                                \n                                        \n                                            type\n                                        \n                                \n                            \n                        \n                    \n                \n            \n        \n\n\n\n            \n                Properties\n                    \n                        \n                                \n                                    \n                                        \n                                        input_drafts\n                                            \n                                                \n                                            \n                                        \n                                    \n                                \n                                \n                                    \n                                        input_drafts:      | string\n\n                                    \n                                \n\n\n                                    \n                                        \n                                            Type :      | string\n\n                                        \n                                    \n\n\n\n\n\n                        \n                    \n                    \n                        \n                                \n                                    \n                                        \n                                        input_params\n                                            \n                                                \n                                            \n                                        \n                                    \n                                \n                                \n                                    \n                                        input_params:      | string\n\n                                    \n                                \n\n\n                                    \n                                        \n                                            Type :      | string\n\n                                        \n                                    \n\n\n\n\n\n                        \n                    \n                    \n                        \n                                \n                                    \n                                        \n                                        type\n                                            \n                                                \n                                            \n                                        \n                                    \n                                \n                                \n                                    \n                                        type:      | string\n\n                                    \n                                \n\n\n                                    \n                                        \n                                            Type :      | string\n\n                                        \n                                    \n\n\n\n\n\n                        \n                    \n            \n    \n\n\n    \n        import { Draft } from \"../../../core/model/datatypes\";\nimport { ParamValue, OperationParam as OpParam, getParamValues } from \"./params\";\nimport { OperationInlet as OpInlet, InletDrafts } from \"./inlets\";\n\n/**\n* At its heart, an Operation is a very fancy function that outputs a Draft or several Drafts.\n* The function itself is perform(), and the Operation can take inputs in the form of \n* Drafts (inlets) or Parameters (params).\n*/\n\n/** \n* Types that an Operation's perform() function can handlle as input/output\n*/\n\n/** @type Union of types that can serve as input to Operation perform() functions. */\nexport type PerformDraftInput = InletDrafts | Array | Draft | null;\n\ntype MultiDraftInput = InletDrafts | Array;\n\n/** @type Union of types that Operation perform() functions can output. */\nexport type PerformOutput = Array | Draft;\n\n/**\n * OPERATION TOPOLOGY\n * Topology refers to the shape of the Operation in terms of its\n * number of input and output Drafts. Classifies Operations.\n */\n\nexport const TopologyName = {\n  pipe: 'pipe', \n  seed: 'seed', \n  merge: 'merge', \n  branch: 'branch', \n  bus: 'bus'\n} as const;\nexport type TopologyName = keyof typeof TopologyName;\n\ninterface TopologyDef { type: TopologyName; input: PerformDraftInput; output: PerformOutput; };\n\n/**\n* @class\n* Operation that can generate a draft with no inputs, may take an optional input\n* @method perform OpPerform function: \n* - INPUT: zero or one Draft\n* - OUTPUT: exactly one Draft\n*/\nexport class Seed implements TopologyDef { type: 'seed'; input: Draft | null; output: Draft; };\n\n/**\n* @class\n* Operation that takes one input and generates one output draft. \n* @method perform OpPerform function: \n* - INPUT: exactly one Draft\n* - OUTPUT: exactly one Draft\n*/\nexport class Pipe implements TopologyDef { type: 'pipe'; input: Draft; output: Draft; };\n\n/**\n* @class\n* Operation that takes many (N) inputs and generates one output draft.\n* @method perform OpPerform function: \n* - INPUT: Array of Drafts\n* - OUTPUT: exactly one Draft\n*/\nexport class Merge implements TopologyDef { type: 'merge'; input: InletDrafts | Array; output: Draft; };\n\n/**\n* @class\n* Operation that takes one input and generates many (N) output drafts.\n* @method perform OpPerform function:\n* - INPUT: exactly one Draft\n* - OUTPUT: Array of Drafts\n*/\nexport class Branch implements TopologyDef { type: 'branch'; input: Draft; output: Array; };\n\n/**\n* CURRENTLY UNUSED\n* @class\n* Operation that takes many (N) inputs and generates many (M) output drafts.\n* Number of inputs does not necessarily match number of outputs (N ?= M).\n* @method perform OpPerform function:  \n* - INPUT: Array of Drafts\n* - OUTPUT: Array of Drafts\n*/\nexport class Bus implements TopologyDef { type: 'bus'; input: Array | InletDrafts; output: Array; };\n\ntype TopologyIndex = {\n  'seed': Seed,\n  'pipe': Pipe,\n  'merge': Merge,\n  'branch': Branch,\n  'bus': Bus\n}\ntype OpTopology = TopologyIndex[TopologyName];\n\n/**\n * OPERATION CONSTRAINT\n * A Constraint on an Operation classifies it based on its\n * input requirements (both Drafts and Params).\n */\n\nexport const ConstraintOptions = {\n  req: 'req', \n  opt: 'opt', \n  none: 'none'\n} as const;\nexport type ConstraintOptions = keyof typeof ConstraintOptions;\n\nexport const ConstraintName = {\n  no_drafts: { input_drafts: 'none', input_params: 'req' }, \n  no_params: { input_drafts: 'req', input_params: 'none' }, \n  drafts_opt: { input_drafts: 'opt', input_params: 'req' }, \n  params_opt: { input_drafts: 'req', input_params: 'opt' }, \n  all_req: {input_drafts: 'req', input_params: 'req' },\n} as const;\ntype ConstraintName = keyof typeof ConstraintName;\n\ntype ConstraintDefs = {\n  [C in keyof typeof ConstraintName]: {\n    constraint: C;\n    input_drafts: typeof ConstraintName[C][\"input_drafts\"];\n    input_params: typeof ConstraintName[C][\"input_params\"];\n  }\n}\n\nexport type NoDrafts = ConstraintDefs[\"no_drafts\"];\nexport type NoParams = ConstraintDefs[\"no_params\"];\nexport type DraftsOptional = ConstraintDefs[\"drafts_opt\"];\nexport type ParamsOptional = ConstraintDefs[\"params_opt\"];\nexport type AllRequired = ConstraintDefs[\"all_req\"];\n\ntype ConstraintIndex = {\n  'no_drafts': NoDrafts, // does not accept input drafts\n  'no_params': NoParams, // does not accept params\n  'drafts_opt': DraftsOptional, // can take no params -- has default values\n  'params_opt': ParamsOptional, // can take zero input drafts\n  'all_req': AllRequired, // both inputs and params required\n}\ntype OpConstraint = ConstraintIndex[ConstraintName]; \n\n/** \n* Generic types for perform() functions, describing options \n* for input draft multiplicity (0, 1, N) and param requirement \n*/\n\ntype NoDraftsPerform = {(params: Array): Topo[\"output\"]};\ntype NoParamsPerform = {(inputs: Topo[\"input\"]): Topo[\"output\"]};\ntype ParamsOptionalPerform = {(inputs: Topo[\"input\"], params?: Array): Topo[\"output\"]}; \ntype DraftsOptionalPerform = {(params: Array, inputs?: Topo[\"input\"]): Topo[\"output\"]};  \ntype AllRequiredPerform = {(inputs: Topo[\"input\"], params: Array): Topo[\"output\"]};  \n\ntype PerformCallSigs = {\n  no_drafts: { [Topo in keyof TopologyIndex]: NoDraftsPerform; },\n  no_params: { [Topo in keyof TopologyIndex]: NoParamsPerform; },\n  drafts_opt: { [Topo in keyof TopologyIndex]: DraftsOptionalPerform; },\n  params_opt: { [Topo in keyof TopologyIndex]: ParamsOptionalPerform; },\n  all_req: { [Topo in keyof TopologyIndex]: AllRequiredPerform; }\n}\n\n/**\n * @interface OpClassifier\n * Key-value pairs for an Operation's Topology and Constraint.\n */\ninterface OpClassifier {\n  type: Topo[\"type\"] | '';\n  input_drafts: Constraint[\"input_drafts\"] | '';\n  input_params: Constraint[\"input_params\"] | '';\n}\n\n/** @type User-defined descriptive strings for any Operation. */\ntype OperationDescriptors = { name: string, displayname: string, dx: string };\n\n/**\n* A standard Operation's metadata -- i.e. everything not the perform() function\n* @param name the internal name of this opearation (CHANGING THESE WILL BREAK LEGACY VERSIONS)\n* @param displayname the name to show upon this operation\n* @param dx the description of this operation\n* @param max_inputs the maximum number of inputs (drafts) allowed directly into this operation\n* @param params the parameters associated with this operation\n* @method perform an OpPerform function\n*/\nexport interface OperationProperties extends OperationDescriptors {\n  max_inputs: number,\n  default_params?: Array;\n  params: Array,\n}\n\n/**\n * @type A function that serves as the perform() method for an Operation. \n * This generic type requires two type parameters:\n * @param Topo one of the PerformInput types\n * @param Constraint one of the PerformOutput types\n *\n * OpPerform to give call signature for perform() function \n * Topo  = Seed | Pipe | Merge | Branch | Bus\n * Constraint = NoDrafts | NoParams | DraftsOptional | ParamsOptional | AllRequired\n */\nexport type OpPerform = PerformCallSigs[Constraint[\"constraint\"]][Topo[\"type\"]];\n// type PerformArgs = Parameters>;\n\n/** TODO doublecheck inlets have been added correctly (fields for input drafts) */\nexport class BaseOp implements OperationProperties {\n  name: string;\n  old_names: Array;\n  displayname: string;\n  dx: string;\n  params: Array;\n  inlets: Array;\n  default_params?: Array;\n  max_inputs: number;\n  classifier: OpClassifier;\n  perform: OpPerform;\n\n  /** @constructor create an Operation using an object literal (keys and values) */\n  constructor (args: OpConstructorArgs);\n  /** @constructor create an Operation using direct arguments in the constructor (values only) */\n  constructor (...args: OpConstructorArray);\n  constructor (name: string, displayname: string, dx: string, perform: OpPerform);\n  constructor (name: string, displayname: string, dx: string, params: Array, perform: OpPerform);\n  constructor (nameOrArgs: any, displayname?: string, dx?: string, performOrParams?: OpPerform | Array, performWithParams?: OpPerform) {\n    // console.log((nameOrArgs.name != undefined));\n    this.classifier = { type: '', input_drafts: '', input_params: '' };\n    if (nameOrArgs.name) {\n      let args = nameOrArgs;\n      this.name = args.name;\n      this.displayname = args.displayname;\n      this.dx = args.dx;\n      this.perform = args.perform;\n      if (args.params) this.params = args.params;\n      else this.params = [];\n      if (args.inlets) this.inlets = args.inlets;\n      else this.inlets = [];\n    } else {\n      this.name = nameOrArgs;\n      this.displayname = displayname;\n      this.dx = dx;\n      if (performWithParams) {\n        let params = > performOrParams;\n        this.params = params;\n        this.default_params = getParamValues(params);\n        this.perform = performWithParams;\n      } else {\n        this.params = [];\n        this.perform = > performOrParams;\n      }\n    }\n  }\n\n  constrain(c: ConstraintName): void {\n    if (c == 'no_drafts') { this.max_inputs = 0; this.inlets = []; }\n    this.classifier.input_drafts = ConstraintName[c][\"input_drafts\"]; \n    this.classifier.input_params = ConstraintName[c][\"input_params\"];\n  }\n\n  type(t: TopologyName): BaseOp {\n    this.classifier.type = t;\n    return this;\n  }\n}\n\ntype ConstructorArgKeysIndex = {\n  [C in keyof ConstraintIndex]: C extends \"no_params\" ? {\n    [T in keyof TopologyIndex]: {\n      name: string, displayname: string, dx: string, old_names: string[],\n      inlets: OpInlet[], perform: OpPerform\n    }\n  } : C extends \"no_drafts\" ? {\n    [T in keyof TopologyIndex]: {\n      name: string, displayname: string, dx: string, old_names: string[],\n      params: OpParam[], perform: OpPerform\n    }\n  } : {\n    [T in keyof TopologyIndex]: {\n      name: string, displayname: string, dx: string, old_names: string[],\n      params: OpParam[], inlets: OpInlet[],\n      perform: OpPerform\n    }\n  }\n}\n\ntype ConstructorArrayIndex = {\n  [C in keyof ConstraintIndex]: C extends \"no_params\" ? {\n    [T in keyof TopologyIndex]: [\n      name: string, displayname: string, dx: string, old_names: string[],\n      inlets: OpInlet[], perform: OpPerform\n    ]\n  } : C extends \"no_drafts\" ? {\n    [T in keyof TopologyIndex]: [\n      name: string, displayname: string, dx: string, old_names: string[],\n      params: OpParam[], perform: OpPerform\n    ]\n  } : {\n    [T in keyof TopologyIndex]: [\n      name: string, displayname: string, dx: string, old_names: string[],\n      params: OpParam[], inlets: OpInlet[],\n      perform: OpPerform\n    ]\n  }\n}\n\ntype OpConstructorArgKeys = \nConstructorArgKeysIndex[Constraint[\"constraint\"]][Topo[\"type\"]];\n\ntype OpConstructorArray = \nConstructorArrayIndex[Constraint[\"constraint\"]][Topo[\"type\"]];\n\ntype OpConstructorArgs = \nOpConstructorArgKeys | OpConstructorArray;\n\n// use factory design pattern to apply classifiers to BaseOp?? Is this too convoluted\n// https://refactoring.guru/design-patterns/abstract-factory/typescript\nclass AbstractOpFactory {\n  NoDrafts(args: OpConstructorArgKeys): BaseOp;\n  NoDrafts(...args: OpConstructorArray): BaseOp;\n  NoDrafts(...args: any) {\n    let op = new BaseOp(...args);\n    op.constrain(\"no_drafts\");\n    return op;\n  }\n\n  NoParams(args: OpConstructorArgKeys): BaseOp;\n  NoParams(...args: OpConstructorArray): BaseOp;\n  NoParams(...args: any) {\n    let op = new BaseOp(...args);\n    op.constrain(\"no_params\");\n    return op;\n  }\n\n  DraftsOptional(args: OpConstructorArgKeys): BaseOp;\n  DraftsOptional(...args: OpConstructorArray): BaseOp;\n  DraftsOptional(...args: any) {\n    let op = new BaseOp(...args);\n    op.constrain(\"drafts_opt\");\n    return op;\n  }\n\n  ParamsOptional(args: OpConstructorArgKeys): BaseOp;\n  ParamsOptional(...args: OpConstructorArray): BaseOp;\n  ParamsOptional(...args: any) {\n    let op = new BaseOp(...args);\n    op.constrain(\"params_opt\");\n    return op;\n  }\n\n  AllRequired(args: OpConstructorArgKeys): BaseOp;\n  AllRequired(...args: OpConstructorArray): BaseOp;\n  AllRequired(...args: any) {\n    let op = new BaseOp(...args);\n    op.constrain(\"all_req\");\n    return op;\n  }\n}\n\n// combine with mix-ins design pattern (link: TypeScript docs website)\nfunction makeTopoFactory(topo: TopologyName) {\n  return class TopologyFactory extends AbstractOpFactory {\n    static base = new AbstractOpFactory();\n    \n    static NoDrafts(args: OpConstructorArgKeys): BaseOp;\n    static NoDrafts(...args: OpConstructorArray): BaseOp;\n    static NoDrafts(...args: any) {\n      return this.base.NoDrafts(...args).type(topo);\n    }\n\n    static NoParams(args: OpConstructorArgKeys): BaseOp;\n    static NoParams(...args: OpConstructorArray): BaseOp;\n    static NoParams(...args: any) {\n      return this.base.NoParams(...args).type(topo);\n    }\n\n    static DraftsOptional(args: OpConstructorArgKeys): BaseOp;\n    static DraftsOptional(...args: OpConstructorArray): BaseOp;\n    static DraftsOptional(...args: any) {\n      return this.base.DraftsOptional(...args).type(topo);\n    }\n\n    static ParamsOptional(args: OpConstructorArgKeys): BaseOp;\n    static ParamsOptional(...args: OpConstructorArray): BaseOp;\n    static ParamsOptional(...args: any) {\n      return this.base.ParamsOptional(...args).type(topo);\n    }\n\n    static AllRequired(args: OpConstructorArgKeys): BaseOp;\n    static AllRequired(...args: OpConstructorArray): BaseOp;\n    static AllRequired(...args: any) {\n      return this.base.AllRequired(...args).type(topo);\n    }\n  }\n}\n\nexport const OpFactories = {\n  Seed: makeTopoFactory(\"seed\"),\n  Pipe: makeTopoFactory(\"pipe\"),\n  Merge: makeTopoFactory(\"merge\"),\n  Branch: makeTopoFactory(\"merge\"),\n  Bus: makeTopoFactory(\"bus\"),\n}\n\n// export const SeedOperation = makeTopoFactory(\"seed\");\n// export const PipeOperation = makeTopoFactory(\"pipe\");\n// export const MergeOperation = makeTopoFactory(\"merge\");\n// export const BranchOperation = makeTopoFactory(\"merge\");\n// export const BusOperation = makeTopoFactory(\"bus\");\n\ntype TopologyOpIndex = {\n  [T in keyof TopologyIndex]: {\n    [C in keyof ConstraintIndex]: BaseOp;\n  }\n}\n\nexport type BuildableOperation = TopologyOpIndex[TopologyName][ConstraintName];\n    \n\n\n\n\n\n\n\n\n\n                   \n    \n         results matching \"\"\n        \n    \n    \n        No results matching \"\"\n    \n\n"},"interfaces/OpComponentProxy.html":{"url":"interfaces/OpComponentProxy.html","title":"interface - OpComponentProxy","body":"\n                   \n\n\n\n\n\n\n\n\n\n\n\n\n\n\n  Interfaces\n  \n  OpComponentProxy\n\n\n\n        \n            Info\n        \n        \n            Source\n        \n\n\n\n    \n        \n            File\n        \n        \n            src/app/core/model/datatypes/files.ts\n        \n\n\n            \n                Description\n            \n            \n                a sparce form of an operaction component to use for saving\n\n            \n\n\n        \n            Index\n            \n                \n                    \n                        \n                            Properties\n                        \n                    \n                    \n                        \n                            \n                                \n                                        \n                                            inlets\n                                        \n                                \n                                \n                                        \n                                            name\n                                        \n                                \n                                \n                                        \n                                            node_id\n                                        \n                                \n                                \n                                        \n                                            params\n                                        \n                                \n                            \n                        \n                    \n                \n            \n        \n\n\n\n            \n                Properties\n                    \n                        \n                                \n                                    \n                                        \n                                        inlets\n                                            \n                                                \n                                            \n                                        \n                                    \n                                \n                                \n                                    \n                                        inlets:     Array\n\n                                    \n                                \n\n\n                                    \n                                        \n                                            Type :     Array\n\n                                        \n                                    \n\n\n\n\n\n                        \n                    \n                    \n                        \n                                \n                                    \n                                        \n                                        name\n                                            \n                                                \n                                            \n                                        \n                                    \n                                \n                                \n                                    \n                                        name:         string\n\n                                    \n                                \n\n\n                                    \n                                        \n                                            Type :         string\n\n                                        \n                                    \n\n\n\n\n\n                        \n                    \n                    \n                        \n                                \n                                    \n                                        \n                                        node_id\n                                            \n                                                \n                                            \n                                        \n                                    \n                                \n                                \n                                    \n                                        node_id:         number\n\n                                    \n                                \n\n\n                                    \n                                        \n                                            Type :         number\n\n                                        \n                                    \n\n\n\n\n\n                        \n                    \n                    \n                        \n                                \n                                    \n                                        \n                                        params\n                                            \n                                                \n                                            \n                                        \n                                    \n                                \n                                \n                                    \n                                        params:     Array\n\n                                    \n                                \n\n\n                                    \n                                        \n                                            Type :     Array\n\n                                        \n                                    \n\n\n\n\n\n                        \n                    \n            \n    \n\n\n    \n        import { Draft } from './drafts';\nimport { Loom, LoomSettings } from './looms';\nimport { Shuttle } from '../shuttle';\nimport { Note } from '../../provider/notes.service';\nimport { Bounds } from './screenlayout';\n\n/****** OBJECTS/TYPES FOR LOADING AND SAVING FILES *****/\n\n/**\n * holds data about each node/component in a form to easily load.\n * @param node_id the id of this node within the tree\n * @param type the type of node\n * @param bounds the screen position and size data for this node\n */\nexport interface NodeComponentProxy {\n    node_id: number,\n    type: string,\n    bounds: Bounds\n  }\n  \n  /**\n   * stores a sparce version of a tree node for easy reloading\n   * @param node the node id this treenode refers too\n   * @param parent the node id of the parent node for this treenode\n   * @param inputs an array of treenode ids for all values coming into this node\n   * @param outputs an array of treenode ids for all downstream functions \n   */\n   export interface TreeNodeProxy {\n    node: number,\n    parent: number; \n    inputs: Array;\n    outputs: Array; \n   }\n  \n    /**\n    * holds data about each draft component in a compressed form \n    * @param draft_id the draft id associated with this node (if available)\n   * @param draft_visible a boolean to state if this node is visible or not. \n   * @param draft_name a string representing a user defined name\n   * @param draft this will only export if the draft is a seed draft\n   * @param loom this will only export if the draft is a seed draft \n   * @param loom_settings the associated loom settings on this node, if present\n    */\n  \n    export interface DraftNodeProxy {\n      node_id: number;\n      draft_id: number;\n      draft_name: string;\n      draft: Draft;\n      draft_visible: boolean;\n      loom: Loom,\n      loom_settings: LoomSettings;\n    }\n  \n  /**\n    * a sparce form of an operaction component to use for saving\n    * @param node_id the node id this object refers too\n    * @param name the name of the operation at this node\n    * @param params the list of input parameters to this operation\n    * @param inlets the let of inlets and associated values \n    */\n  export interface OpComponentProxy {\n    node_id: number,\n    name: string,\n    params: Array, \n    inlets: Array;\n  }\n  \n  \n   /**\n    * describes the data from the workspace that is saved.\n    */\n   export interface SaveObj {\n    version: string,\n    workspace: any,\n    type: string,\n    nodes: Array,\n    tree: Array,\n    draft_nodes: Array,\n    ops: Array,\n    notes: Array,\n    materials: Array,\n    scale: number\n   }\n  \n  export interface FileObj {\n   version: string,\n   workspace: any,\n   filename: string,\n   nodes: Array,\n   treenodes: Array,\n   draft_nodes: Array,\n   ops: Array\n   scale: number\n  }\n  \n  export interface StatusMessage {\n    id: number,\n    message: string,\n    success: boolean\n  }\n  \n  export interface LoadResponse {\n    data: FileObj,\n    status: number;\n  }\n  \n  export interface Fileloader {\n    ada: (filename: string, data: any) => Promise,\n    //wif: (filename: string, data: any) => Promise,\n    //bmp: (filename: string, data: any) => Promise,\n    //jpg: (filename: string, data: any) => Promise,\n    form: (data: any) => Promise}\n  \n  export interface FileSaver {\n    ada: (type: string, for_timeline:boolean, current_scale: number) => Promise,\n    //wif: (draft: Draft, loom: Loom) => Promise,\n    bmp: (canvas: HTMLCanvasElement) => Promise,\n    jpg: (canvas: HTMLCanvasElement) => Promise\n  }\n    \n\n\n\n\n\n\n\n\n\n                   \n    \n         results matching \"\"\n        \n    \n    \n        No results matching \"\"\n    \n\n"},"components/OpHelpModal.html":{"url":"components/OpHelpModal.html","title":"component - OpHelpModal","body":"\n                   \n\n\n\n\n\n  Components\n  \n  OpHelpModal\n\n\n\n        \n            Info\n        \n        \n            Source\n        \n        \n            Template\n        \n        \n            Styles\n        \n        \n            DOM Tree\n        \n\n\n\n    \n    File\n\n\n    src/app/mixer/modal/ophelp/ophelp.modal.ts\n\n\n\n\n\n    \n        Implements\n    \n    \n                    OnInit\n    \n\n\n\n    Metadata\n    \n        \n\n\n\n\n\n\n\n\n\n\n\n            \n                selector\n                app-ophelp\n            \n\n            \n                styleUrls\n                ./ophelp.modal.scss\n            \n\n\n\n            \n                templateUrl\n                ./ophelp.modal.html\n            \n\n\n\n\n\n\n\n\n        \n    \n\n\n    \n    Index\n    \n        \n                \n                    \n                        Properties\n                    \n                \n                \n                    \n                        \n                            \n                                    Public\n                                data\n                            \n                            \n                                documenation\n                            \n                            \n                                dynamic_param_id\n                            \n                            \n                                dynamic_param_name\n                            \n                            \n                                dynamic_type\n                            \n                            \n                                is_dynamic_op\n                            \n                            \n                                name\n                            \n                            \n                                params\n                            \n                        \n                    \n                \n\n                \n                    \n                        Methods\n                    \n                \n                \n                    \n                        \n                            \n                                close\n                            \n                            \n                                ngOnInit\n                            \n                        \n                    \n                \n\n\n\n\n\n        \n    \n\n\n    \n    Constructor\n        \n            \n                \n                    \nconstructor(dialogRef: MatDialogRef, data: any, ops: OperationService)\n                    \n                \n                        \n                            \n                                Defined in src/app/mixer/modal/ophelp/ophelp.modal.ts:19\n                            \n                        \n\n                \n                    \n                            \n                                    Parameters :\n                                    \n                                        \n                                            \n                                                Name\n                                                    Type\n                                                Optional\n                                            \n                                        \n                                        \n                                                \n                                                        dialogRef\n                                                  \n                                                        \n                                                                        MatDialogRef\n                                                        \n                                                  \n                                                    \n                                                            No\n                                                    \n                                                    \n                                                \n                                                \n                                                        data\n                                                  \n                                                        \n                                                                        any\n                                                        \n                                                  \n                                                    \n                                                            No\n                                                    \n                                                    \n                                                \n                                                \n                                                        ops\n                                                  \n                                                        \n                                                                        OperationService\n                                                        \n                                                  \n                                                    \n                                                            No\n                                                    \n                                                    \n                                                \n                                        \n                                    \n                            \n                    \n                \n            \n        \n\n\n\n\n\n\n    \n    \n    \n        Methods\n    \n    \n        \n            \n                \n                    \n                    \n                        close\n                        \n                    \n                \n            \n            \n                \nclose()\n                \n            \n\n\n            \n                \n                    Defined in src/app/mixer/modal/ophelp/ophelp.modal.ts:45\n                \n            \n\n\n            \n                \n\n                    \n                        Returns :         void\n\n                    \n                \n            \n        \n    \n    \n        \n            \n                \n                    \n                    \n                        ngOnInit\n                        \n                    \n                \n            \n            \n                \nngOnInit()\n                \n            \n\n\n            \n                \n                    Defined in src/app/mixer/modal/ophelp/ophelp.modal.ts:42\n                \n            \n\n\n            \n                \n\n                    \n                        Returns :         void\n\n                    \n                \n            \n        \n    \n\n    \n    \n    \n        Properties\n    \n    \n        \n            \n                \n                    \n                    \n                            Public\n                        data\n                        \n                    \n                \n            \n                \n                    \n                        Type :         any\n\n                    \n                \n                \n                    \n                        Decorators : \n                        \n                        \n                            @Inject(MAT_DIALOG_DATA)\n                        \n                    \n                \n                    \n                        \n                                Defined in src/app/mixer/modal/ophelp/ophelp.modal.ts:25\n                        \n                    \n\n\n        \n    \n    \n        \n            \n                \n                    \n                    \n                        documenation\n                        \n                    \n                \n            \n                \n                    \n                        Type :         any\n\n                    \n                \n                \n                    \n                        Default value : \"\"\n                    \n                \n                    \n                        \n                                Defined in src/app/mixer/modal/ophelp/ophelp.modal.ts:13\n                        \n                    \n\n\n        \n    \n    \n        \n            \n                \n                    \n                    \n                        dynamic_param_id\n                        \n                    \n                \n            \n                \n                    \n                        Type :         number\n\n                    \n                \n                \n                    \n                        Default value : 0\n                    \n                \n                    \n                        \n                                Defined in src/app/mixer/modal/ophelp/ophelp.modal.ts:18\n                        \n                    \n\n\n        \n    \n    \n        \n            \n                \n                    \n                    \n                        dynamic_param_name\n                        \n                    \n                \n            \n                \n                    \n                        Type :         string\n\n                    \n                \n                \n                    \n                        Default value : ''\n                    \n                \n                    \n                        \n                                Defined in src/app/mixer/modal/ophelp/ophelp.modal.ts:19\n                        \n                    \n\n\n        \n    \n    \n        \n            \n                \n                    \n                    \n                        dynamic_type\n                        \n                    \n                \n            \n                \n                    \n                        Type :         string\n\n                    \n                \n                \n                    \n                        Default value : \"\"\n                    \n                \n                    \n                        \n                                Defined in src/app/mixer/modal/ophelp/ophelp.modal.ts:17\n                        \n                    \n\n\n        \n    \n    \n        \n            \n                \n                    \n                    \n                        is_dynamic_op\n                        \n                    \n                \n            \n                \n                    \n                        Type :         boolean\n\n                    \n                \n                    \n                        \n                                Defined in src/app/mixer/modal/ophelp/ophelp.modal.ts:15\n                        \n                    \n\n\n        \n    \n    \n        \n            \n                \n                    \n                    \n                        name\n                        \n                    \n                \n            \n                \n                    \n                        Type :         string\n\n                    \n                \n                    \n                        \n                                Defined in src/app/mixer/modal/ophelp/ophelp.modal.ts:14\n                        \n                    \n\n\n        \n    \n    \n        \n            \n                \n                    \n                    \n                        params\n                        \n                    \n                \n            \n                \n                    \n                        Type :     Array\n\n                    \n                \n                    \n                        \n                                Defined in src/app/mixer/modal/ophelp/ophelp.modal.ts:16\n                        \n                    \n\n\n        \n    \n\n\n\n\n\n    \n        import { Component, OnInit, Inject } from '@angular/core';\nimport { MAT_DIALOG_DATA, MatDialogRef } from \"@angular/material/dialog\";\nimport { DynamicOperation } from '../../../core/model/datatypes';\nimport { OperationService } from '../../provider/operation.service';\n\n@Component({\n  selector: 'app-ophelp',\n  templateUrl: './ophelp.modal.html',\n  styleUrls: ['./ophelp.modal.scss']\n})\nexport class OpHelpModal implements OnInit {\n  \n  documenation: any =\"\";\n  name: string;\n  is_dynamic_op: boolean;\n  params: Array;\n  dynamic_type: string =\"\";\n  dynamic_param_id: number = 0;\n  dynamic_param_name: string = '';\n\n\n\n\n  constructor(private dialogRef: MatDialogRef,\n             @Inject(MAT_DIALOG_DATA) public data: any, private ops:OperationService) { \n        \n        const op = this.ops.getOp(data.op.name);\n        this.name = data.op.name;\n        this.is_dynamic_op = this.ops.isDynamic(this.name);\n        this.params = op.params;\n        if(this.is_dynamic_op){\n          this.dynamic_type = ( op).dynamic_param_type;\n          this.dynamic_param_id =( op).dynamic_param_id;\n          this.dynamic_param_name = this.params[this.dynamic_param_id].name;\n        }\n        \n\n\n    }\n\n  \n  ngOnInit() {\n  }\n\n  close() {\n    this.dialogRef.close();\n  }\n\n}\n\n    \n\n    \n        {{data.op.displayname}}\n\n\n  \n\n    \n  \t  {{data.op.dx}}\n  \t  Can take up to {{data.op.max_inputs}} input drafts\n\n      \n         0\"> Inputs \n        \n            Parameter Name: {{param.name}}\n            Parameter Description: {{param.dx}}\n            Parameter Type: {{param.type}} \n             min/max value of this input: {{param.min}}-{{param.max}}\n\t\t    \n\n        \n          This is a dyanmic operation, meaning that one of the parameters above generates multiple \"inlets\" to the function, each which can accept a draft and associate a particular value with that draft.\n          Input that Controls the Inlets: {{dynamic_param_name}}\n          Inlet type: {{dynamic_type}}\n      \n\n      \n\n\n      \n      Documentation -->\n    \n\n       Code \n      {{data.op.perform}}\n    \n  \n\n\n  Close\n\n    \n\n    \n                \n                    ./ophelp.modal.scss\n                \n                \n.help-container{\n\tdisplay: block;\n}\n\na{\n\tcolor: #00d1b2;\n\tfont-weight:bold;\n}\n\nh2{\n\tfont-size: 1.8em;\n\tpadding-top:1em;\n}\n\nh3{\n\tfont-size: 1.2em;\n\tpadding-top:1em;\n}\n\n\n\n\n\n\n    \n\n    \n        \n        \n            \n                Legend\n            \n            \n                Html element\n            \n            \n                Component\n            \n            \n                Html element with directive\n            \n        \n    \n\n    \n\n\n\n\n\n\n        var COMPONENT_TEMPLATE = '{{data.op.displayname}}        \t  {{data.op.dx}}  \t  Can take up to {{data.op.max_inputs}} input drafts               0\"> Inputs                     Parameter Name: {{param.name}}            Parameter Description: {{param.dx}}            Parameter Type: {{param.type}}              min/max value of this input: {{param.min}}-{{param.max}}\t\t                      This is a dyanmic operation, meaning that one of the parameters above generates multiple \"inlets\" to the function, each which can accept a draft and associate a particular value with that draft.          Input that Controls the Inlets: {{dynamic_param_name}}          Inlet type: {{dynamic_type}}                        Documentation -->           Code       {{data.op.perform}}        Close'\n    var COMPONENTS = [{'name': 'ConnectionComponent', 'selector': 'app-connection'},{'name': 'DraftdetailComponent', 'selector': 'app-draftdetail'},{'name': 'ImageComponent', 'selector': 'app-image'},{'name': 'InletComponent', 'selector': 'app-inlet'},{'name': 'MixerComponent', 'selector': 'app-mixer'},{'name': 'MixerViewComponent', 'selector': 'app-mixerview'},{'name': 'NoteComponent', 'selector': 'app-note'},{'name': 'OperationComponent', 'selector': 'app-operation'},{'name': 'OpHelpModal', 'selector': 'app-ophelp'},{'name': 'OpsComponent', 'selector': 'app-ops'},{'name': 'OpSequencerComponent', 'selector': 'app-op-sequencer'},{'name': 'PaletteComponent', 'selector': 'app-palette'},{'name': 'ParameterComponent', 'selector': 'app-parameter'},{'name': 'PlayerComponent', 'selector': 'app-player'},{'name': 'SnackbarComponent', 'selector': 'app-snackbar'},{'name': 'SubdraftComponent', 'selector': 'app-subdraft'},{'name': 'VirtualPedalsComponent', 'selector': 'app-virtual-pedals'},{'name': 'WeavingStateComponent', 'selector': 'app-weaving-state'}];\n    var DIRECTIVES = [{'name': 'MarqueeComponent', 'selector': 'app-marquee'},{'name': 'SelectionComponent', 'selector': 'app-selection'}];\n    var ACTUAL_COMPONENT = {'name': 'OpHelpModal'};\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n                   \n    \n         results matching \"\"\n        \n    \n    \n        No results matching \"\"\n    \n\n"},"interfaces/OpInput.html":{"url":"interfaces/OpInput.html","title":"interface - OpInput","body":"\n                   \n\n\n\n\n\n\n\n\n\n\n\n\n\n\n  Interfaces\n  \n  OpInput\n\n\n\n        \n            Info\n        \n        \n            Source\n        \n\n\n\n    \n        \n            File\n        \n        \n            src/app/mixer/model/operation.ts\n        \n\n\n            \n                Description\n            \n            \n                this is a type that contains a series of smaller operations held under the banner of one larger operation (such as layer)\n\n            \n\n\n        \n            Index\n            \n                \n                    \n                        \n                            Properties\n                        \n                    \n                    \n                        \n                            \n                                \n                                        \n                                            drafts\n                                        \n                                \n                                \n                                        \n                                            inlet\n                                        \n                                \n                                \n                                        \n                                            op_name\n                                        \n                                \n                                \n                                        \n                                            params\n                                        \n                                \n                            \n                        \n                    \n                \n            \n        \n\n\n\n            \n                Properties\n                    \n                        \n                                \n                                    \n                                        \n                                        drafts\n                                            \n                                                \n                                            \n                                        \n                                    \n                                \n                                \n                                    \n                                        drafts:         Array\n\n                                    \n                                \n\n\n                                    \n                                        \n                                            Type :         Array\n\n                                        \n                                    \n\n\n\n\n\n                        \n                    \n                    \n                        \n                                \n                                    \n                                        \n                                        inlet\n                                            \n                                                \n                                            \n                                        \n                                    \n                                \n                                \n                                    \n                                        inlet:     number | null\n\n                                    \n                                \n\n\n                                    \n                                        \n                                            Type :     number | null\n\n                                        \n                                    \n\n\n\n\n\n                        \n                    \n                    \n                        \n                                \n                                    \n                                        \n                                        op_name\n                                            \n                                                \n                                            \n                                        \n                                    \n                                \n                                \n                                    \n                                        op_name:         string\n\n                                    \n                                \n\n\n                                    \n                                        \n                                            Type :         string\n\n                                        \n                                    \n\n\n\n\n\n                        \n                    \n                    \n                        \n                                \n                                    \n                                        \n                                        params\n                                            \n                                                \n                                            \n                                        \n                                    \n                                \n                                \n                                    \n                                        params:     Array\n\n                                    \n                                \n\n\n                                    \n                                        \n                                            Type :     Array\n\n                                        \n                                    \n\n\n\n\n\n                        \n                    \n            \n    \n\n\n    \n        import { Draft } from '../../core/model/datatypes';\nimport { OperationParam, ParamValue } from './operation/params';\nimport { InletDrafts, OperationInlet } from './operation/inlets';\nimport { BaseOp as Op, BuildableOperation as GenericOp,\n  Seed, Pipe, Merge, Branch, Bus,\n  NoDrafts, NoParams, DraftsOptional, ParamsOptional, AllRequired\n} from './operation/topology';\n\n\n/** ALL OBJECTS/TYPES/UTILITY FUNCTIONS RELATED to OPERATIONS *****************/\n\nexport * from './operation/inlets';\nexport * from './operation/params';\nexport * from './operation/topology';\nexport * as format from './operation/formatting';\n\n/**** USING OPERATIONS with the MIXER TREE **************/\n\n/**\n * this is a type that contains a series of smaller operations held under the banner of one larger operation (such as layer)\n * @param op_name the name of the operation or \"child\" if this is an assignment to an input parameter\n * @param drafts the drafts associated with this input\n * @param params the parameters associated with this operation OR child input\n * @param inlets the index of the inlet for which the draft is entering upon\n */\n export interface OpInput {\n  op_name: string,\n  drafts: Array,\n  params: Array,\n  inlet: number | null\n}\n\nfunction getParamsFromInputs(inputs: Array): Array {\n  let res = inputs.map((el) => el.params).reduce((acc, el) => acc.concat(el), []);\n  console.log(res);\n  return res;\n}\n\nfunction getDraftsFromInputs(inputs: Array): Array {\n  return inputs.map((el) => el.drafts).reduce((acc, ds) => acc.concat(ds), []);\n}\n\nfunction getInletsFromInputs(inputs: Array, n: number): InletDrafts {\n  let res: InletDrafts = {};\n  for (let i = 0; i  el.inlet == i);\n    let inlet_drafts = this_inlet.map((el) => el.drafts);\n    res[i] = inlet_drafts.reduce((acc, ds) => acc.concat(ds), []);\n  }\n  return res;\n}\n  \n/**\n * a standard operation used by the tree\n * @param name the internal name of this opearation (CHANGING THESE WILL BREAK LEGACY VERSIONS)\n * @param displayname the name to show upon this operation in the interface\n * @param dx the description of this operation\n * @param params the parameters associated with this operation\n * @param inets the inlets associated with this operation\n * @param old_names referes to any prior name of this operation to aid when loading old files\n * @param perform a function that executes when this operation is performed, takes a series of inputs and resturns an array of drafts\n */\nexport interface TreeOperation {\n  name: string,\n  displayname: string,\n  dx: string,\n  params: Array,\n  inlets: Array,\n  old_names: Array,\n  perform: (op_inputs: Array) => Promise>\n}\n\nexport function getDefaultParams(op: TreeOperation | GenericOp): Array {\n  if (!op.params || op.params.length == 0) {\n    return [] as Array;\n  }\n  return op.params.map((el) => el.value);\n}\n\n/** \n * @function \n * The big function to pack an operation from op_definitions (working directly with params and drafts)\n * into an operation that the tree can recognize (uses OpInputs)\n */\nexport function buildTreeOp(base: GenericOp): TreeOperation {\n  let tree_op_perform: TreeOperation[\"perform\"];\n  // check what type of op, topologically with I/O (seed, pipe, merge, branch, bus, dynamic)\n    // convert perform args to Array\n  // check for special case of args (no drafts, no params, everything else is ok)\n    // only seed -> no drafts, everything else\n    // pipe/merge/branch/bus -> no params, everything else\n  // check if there is a param or draft in op_inputs[0] to put into an optional arg\n  if (base.classifier.type === 'seed') {\n    if (base.classifier.input_drafts === 'none') {\n      let seedOp = base as Op;\n      tree_op_perform = (op_inputs: Array) => {\n        return Promise.resolve([seedOp.perform(op_inputs[0].params)]);\n      }\n    } else {\n      let seedOp = base as Op;\n      tree_op_perform = (op_inputs: Array) => {\n        console.log(\"op inputs: \", base.name, op_inputs);\n        let res: Draft;\n        if (op_inputs.filter((el) => (el.op_name == 'child')).length > 0) {\n          res = seedOp.perform(op_inputs[0].params, getDraftsFromInputs(op_inputs)[0]);\n        } else {\n          res = seedOp.perform(op_inputs[0].params);\n        }\n        console.log(\"tree op call: \", res);\n        return Promise.resolve([res]);\n      }\n    }\n  } else if (base.classifier.type === 'pipe') {\n    // let pipeOp;\n    if (base.classifier.input_params === 'none') {\n      let pipeOp = base as Op ;\n      tree_op_perform = (op_inputs: Array) => {\n        if (op_inputs.filter((el) => (el.op_name == 'child')).length == 0) {\n          return Promise.resolve([]) as Promise>;\n        }\n        return Promise.resolve([pipeOp.perform(getDraftsFromInputs(op_inputs)[0])]);\n      }\n    } else if (base.classifier.input_params === 'req') {\n      let pipeOp = base as Op;\n      console.log(\"perform op, pipe all required\");\n      tree_op_perform = (op_inputs: Array) => {\n        if (op_inputs.filter((el) => (el.op_name == 'child')).length == 0) {\n          return Promise.resolve([]) as Promise>;\n        }\n        return Promise.resolve([pipeOp.perform(getDraftsFromInputs(op_inputs)[0], op_inputs[0].params)]);\n      }\n    } else {\n      let pipeOp = base as Op;\n      tree_op_perform = (op_inputs: Array) => {\n        if (op_inputs[0].params.length > 0) {\n          return Promise.resolve([pipeOp.perform(op_inputs[0].drafts[0], op_inputs[0].params)]);\n        } else {\n          return Promise.resolve([pipeOp.perform(op_inputs[0].drafts[0])]);\n        }\n      }\n    }\n  } else if (base.classifier.type === 'merge') {\n    if (base.classifier.input_params === 'none') {\n      let mergeOp = base as Op;\n      if (base.inlets.filter((i) => i.num_drafts != 1).length) {\n        // complex merge, at least one inlet can take multiple drafts, so we have to prepare\n        // the inputs a little differently\n        tree_op_perform = (op_inputs: Array) => {\n          if (op_inputs.filter((el) => (el.op_name == 'child')).length >;\n          }\n          let inputs: InletDrafts = {};\n          for (let i = 0; i  el.inlet == i);\n            let inlet_drafts = this_inlet.map((el) => el.drafts);\n            inputs[i] = inlet_drafts.reduce((acc, ds) => acc.concat(ds), []);\n          }\n          return Promise.resolve([mergeOp.perform(inputs)]);\n        }\n      } else {\n        // simple merge, either 1 multi-inlet or mulitple single inlets\n        tree_op_perform = (op_inputs: Array) => {\n          if (op_inputs.filter((el) => (el.op_name == 'child')).length == 0) {\n            return Promise.resolve([]) as Promise>;\n          }\n          let inputs: Array;\n          inputs = op_inputs.map((el) => el.drafts).reduce((acc, ds) => acc.concat(ds), []);\n          return Promise.resolve([mergeOp.perform(inputs)]);\n        }\n      }\n    } else if (base.classifier.input_params === 'req') {\n      let mergeOp = base as Op;\n      if (base.inlets.length > 1 && base.inlets.filter((i) => i.num_drafts != 1).length) {\n        // complex merge, more than one inlet and at least one inlet can take multiple drafts, so we have to prepare\n        // the inputs a little differently\n        tree_op_perform = (op_inputs: Array) => {\n          if (op_inputs.filter((el) => (el.op_name == 'child')).length == 0) {\n            return Promise.resolve([]) as Promise>;\n          }\n          let inputs: InletDrafts = {};\n          for (let i = 0; i  el.inlet == i);\n            let inlet_drafts = this_inlet.map((el) => el.drafts);\n            inputs[i] = inlet_drafts.reduce((acc, ds) => acc.concat(ds), []);\n          }\n          return Promise.resolve([mergeOp.perform(inputs, op_inputs[0].params)]);\n        }\n      } else {\n        // simple merge, either 1 multi-inlet or multple single inlets\n        tree_op_perform = (op_inputs: Array) => {\n          if (op_inputs.filter((el) => (el.op_name == 'child')).length == 0) {\n            return Promise.resolve([]) as Promise>;\n          }\n          let inputs: Array;\n          inputs = op_inputs.map((el) => el.drafts).reduce((acc, ds) => acc.concat(ds));\n          return Promise.resolve([mergeOp.perform(inputs, op_inputs[0].params)]);\n        }\n      }\n    }\n  } else if (base.classifier.type === 'branch') { \n    if (base.classifier.input_params === 'req') {\n      let branchOp = base as Op;\n      tree_op_perform = (op_inputs: Array) => {\n        return Promise.resolve(branchOp.perform(op_inputs[1].drafts[0], getParamsFromInputs(op_inputs))) as Promise>;\n      }\n    } else {\n      let branchOp = base as Op;\n      tree_op_perform = (op_inputs: Array) => {\n        if (op_inputs.filter((el) => (el.op_name == 'child')).length == 0) {\n          return Promise.resolve([]) as Promise>;\n        }\n        return Promise.resolve(branchOp.perform(op_inputs[1].drafts[0])) as Promise>;\n      }\n    }\n  } else { /** @todo bus ops, but there aren't any operations in this category currently */\n    tree_op_perform = (op_inputs: Array) => {\n      return Promise.resolve([]) as Promise>;\n    }\n  }\n\n  let new_op = {\n    name: base.name,\n    topo_op: base,\n    old_names: base.old_names,\n    inlets: base.inlets,\n    displayname: base.displayname,\n    dx: base.dx,\n    max_inputs: base.max_inputs,\n    params: base.params,\n    perform: tree_op_perform\n  } as TreeOperation;\n\n  return new_op;\n}\n\n/**\n * A container operation that takes drafts with some parameter assigned to them \n * @param name the internal name of this operation used for index (DO NOT CHANGE THESE NAMES!)\n * @param displayname the name to show the viewer \n * @param params the parameters that one can directly input to the parent\n * @param dynamic_param_id which parameter id should we use to dynamically create paramaterized input slots\n * @param dynamic_param_type the type of parameter that we look to generate\n * @param inlets the inlets available for input by default on this operation\n * @param dx the description of this operation\n * @param old_names referes to any prior name of this operation to aid when loading old files\n * @param perform a function that executes when this operation is performed, takes a series of inputs and resturns an array of drafts\n */\nexport interface DynamicOperation extends TreeOperation {\n  name: string,\n  displayname: string,\n  params: Array, \n  dynamic_param_id: number,\n  dynamic_param_type: string,\n  inlets: Array,\n  dx: string,\n  old_names: Array,\n  perform: (op_inputs: Array) => Promise>;\n}\n\n /**\n  * this type is used to classify operations in the dropdown menu\n  * @param category the name of the category for all associated operations (e.g. block, structure)\n  * @param dx a description of that category to show on screen\n  * @param ops an array of all the operations associated with this category\n  */\n export interface OperationClassification {\n  category: string,\n  dx: string,\n  ops: Array \n }\n\n export type Operation = TreeOperation; // default: export operations to interface with Tree\n\n \n    \n\n\n\n\n\n\n\n\n\n                   \n    \n         results matching \"\"\n        \n    \n    \n        No results matching \"\"\n    \n\n"},"classes/OpSequencer.html":{"url":"classes/OpSequencer.html","title":"class - OpSequencer","body":"\n                   \n\n\n\n\n\n\n\n\n\n\n\n\n\n  Classes\n  OpSequencer\n\n\n\n        \n            Info\n        \n        \n            Source\n        \n\n\n\n    \n        \n            File\n        \n        \n            src/app/player/model/sequencer.ts\n        \n\n\n            \n                Description\n            \n            \n                Sequencer:\n\n1 or 2 pedal \"select\" pedals ->\nmultiple operations in a circular queue\n1 \"progress\" pedal (forward)\nif select pedal, go to next/previous operation in Sequencer\n\n\n            \n\n\n            \n                Implements\n            \n            \n                            PedalEvent\n            \n\n\n            \n    Index\n    \n        \n                \n                    \n                        Properties\n                    \n                \n                \n                    \n                        \n                            \n                                _pos\n                            \n                            \n                                name\n                            \n                            \n                                ops\n                            \n                            \n                                p_prog\n                            \n                            \n                                p_select_a\n                            \n                            \n                                    Optional\n                                p_select_b\n                            \n                            \n                                selecting\n                            \n                        \n                    \n                \n\n                \n                    \n                        Methods\n                    \n                \n                \n                    \n                        \n                            \n                                addOp\n                            \n                            \n                                delOpAt\n                            \n                            \n                                hasPedal\n                            \n                            \n                                mapPedal\n                            \n                            \n                                nextOp\n                            \n                            \n                                perform\n                            \n                            \n                                prevOp\n                            \n                            \n                                removeOp\n                            \n                        \n                    \n                \n\n\n\n\n\n                    \n                        \n                            Accessors\n                        \n                    \n                    \n                        \n                            \n                                \n                                    isMapped\n                                \n                                \n                                    readyToWeave\n                                \n                                \n                                    current\n                                \n                            \n                        \n                    \n        \n    \n\n\n            \n    Constructor\n        \n            \n                \n                    \nconstructor(pedals?: Array, ops?: Array)\n                    \n                \n                        \n                            \n                                Defined in src/app/player/model/sequencer.ts:18\n                            \n                        \n\n                \n                    \n                            OpSequencer, specifying the select pedal(s) and confirm\npedal. Optionally, provide an array of Ops to load onto the\nSequencer.\n\n                            \n                                    Parameters :\n                                    \n                                        \n                                            \n                                                Name\n                                                    Type\n                                                Optional\n                                            \n                                        \n                                        \n                                                \n                                                        pedals\n                                                  \n                                                        \n                                                                    Array\n                                                        \n                                                  \n                                                    \n                                                            Yes\n                                                    \n                                                    \n                                                \n                                                \n                                                        ops\n                                                  \n                                                        \n                                                                        Array\n                                                        \n                                                  \n                                                    \n                                                            Yes\n                                                    \n                                                    \n                                                \n                                        \n                                    \n                            \n                    \n                \n            \n        \n\n\n            \n    \n    \n        Properties\n    \n    \n        \n            \n                \n                    \n                    \n                        _pos\n                        \n                    \n                \n            \n                \n                    \n                        Type :         number\n\n                    \n                \n                \n                    \n                        Default value : -1\n                    \n                \n                    \n                        \n                                Defined in src/app/player/model/sequencer.ts:16\n                        \n                    \n\n\n        \n    \n    \n        \n            \n                \n                    \n                    \n                        name\n                        \n                    \n                \n            \n                \n                    \n                        Type :         string\n\n                    \n                \n                    \n                        \n                                Defined in src/app/player/model/sequencer.ts:12\n                        \n                    \n\n\n        \n    \n    \n        \n            \n                \n                    \n                    \n                        ops\n                        \n                    \n                \n            \n                \n                    \n                        Type :         Array\n\n                    \n                \n                \n                    \n                        Default value : []\n                    \n                \n                    \n                        \n                                Defined in src/app/player/model/sequencer.ts:17\n                        \n                    \n\n\n        \n    \n    \n        \n            \n                \n                    \n                    \n                        p_prog\n                        \n                    \n                \n            \n                \n                    \n                        Type :         number\n\n                    \n                \n                \n                    \n                        Default value : -1\n                    \n                \n                    \n                        \n                                Defined in src/app/player/model/sequencer.ts:15\n                        \n                    \n\n\n        \n    \n    \n        \n            \n                \n                    \n                    \n                        p_select_a\n                        \n                    \n                \n            \n                \n                    \n                        Type :         number\n\n                    \n                \n                \n                    \n                        Default value : -1\n                    \n                \n                    \n                        \n                                Defined in src/app/player/model/sequencer.ts:13\n                        \n                    \n\n\n        \n    \n    \n        \n            \n                \n                    \n                    \n                            Optional\n                        p_select_b\n                        \n                    \n                \n            \n                \n                    \n                        Type :         number\n\n                    \n                \n                \n                    \n                        Default value : -1\n                    \n                \n                    \n                        \n                                Defined in src/app/player/model/sequencer.ts:14\n                        \n                    \n\n\n        \n    \n    \n        \n            \n                \n                    \n                    \n                        selecting\n                        \n                    \n                \n            \n                \n                    \n                        Type :         boolean\n\n                    \n                \n                \n                    \n                        Default value : false\n                    \n                \n                    \n                        \n                                Defined in src/app/player/model/sequencer.ts:18\n                        \n                    \n\n\n        \n    \n\n\n            \n    \n    \n        Methods\n    \n    \n        \n            \n                \n                    \n                    \n                        addOp\n                        \n                    \n                \n            \n            \n                \naddOp(o: PlayerOp | ChainOp)\n                \n            \n\n\n            \n                \n                    Defined in src/app/player/model/sequencer.ts:88\n                \n            \n\n\n            \n                \n\n                    \n                        Parameters :\n                        \n                        \n                            \n                                \n                                    Name\n                                    Type\n                                    Optional\n                                \n                            \n                            \n                                \n                                    o\n                                    \n                                                PlayerOp | ChainOp\n                                    \n\n                                    \n                                        No\n                                    \n\n\n                                \n                            \n                        \n                    \n                    \n                    \n                    \n                        Returns :         number\n\n                    \n                    \n                        \n                    \n                \n            \n        \n    \n    \n        \n            \n                \n                    \n                    \n                        delOpAt\n                        \n                    \n                \n            \n            \n                \ndelOpAt(x: number)\n                \n            \n\n\n            \n                \n                    Defined in src/app/player/model/sequencer.ts:99\n                \n            \n\n\n            \n                \n\n                    \n                        Parameters :\n                        \n                        \n                            \n                                \n                                    Name\n                                    Type\n                                    Optional\n                                \n                            \n                            \n                                \n                                    x\n                                    \n                                                number\n                                    \n\n                                    \n                                        No\n                                    \n\n\n                                \n                            \n                        \n                    \n                    \n                    \n                    \n                        Returns :         void\n\n                    \n                    \n                        \n                    \n                \n            \n        \n    \n    \n        \n            \n                \n                    \n                    \n                        hasPedal\n                        \n                    \n                \n            \n            \n                \nhasPedal(n: number)\n                \n            \n\n\n            \n                \n                    Defined in src/app/player/model/sequencer.ts:69\n                \n            \n\n\n            \n                \n\n                    \n                        Parameters :\n                        \n                        \n                            \n                                \n                                    Name\n                                    Type\n                                    Optional\n                                \n                            \n                            \n                                \n                                    n\n                                    \n                                                number\n                                    \n\n                                    \n                                        No\n                                    \n\n\n                                \n                            \n                        \n                    \n                    \n                    \n                    \n                        Returns :         boolean\n\n                    \n                    \n                        \n                    \n                \n            \n        \n    \n    \n        \n            \n                \n                    \n                    \n                        mapPedal\n                        \n                    \n                \n            \n            \n                \nmapPedal(id: number, role: \"fwd\" | \"sel-next\" | \"sel-back\")\n                \n            \n\n\n            \n                \n                    Defined in src/app/player/model/sequencer.ts:56\n                \n            \n\n\n            \n                \n\n                    \n                        Parameters :\n                        \n                        \n                            \n                                \n                                    Name\n                                    Type\n                                    Optional\n                                \n                            \n                            \n                                \n                                    id\n                                    \n                                                number\n                                    \n\n                                    \n                                        No\n                                    \n\n\n                                \n                                \n                                    role\n                                    \n                                            \"fwd\" | \"sel-next\" | \"sel-back\"\n                                    \n\n                                    \n                                        No\n                                    \n\n\n                                \n                            \n                        \n                    \n                    \n                    \n                    \n                        Returns :         void\n\n                    \n                    \n                        \n                    \n                \n            \n        \n    \n    \n        \n            \n                \n                    \n                    \n                        nextOp\n                        \n                    \n                \n            \n            \n                \nnextOp()\n                \n            \n\n\n            \n                \n                    Defined in src/app/player/model/sequencer.ts:74\n                \n            \n\n\n            \n                \n\n                    \n                        Returns :         any\n\n                    \n                \n            \n        \n    \n    \n        \n            \n                \n                    \n                    \n                        perform\n                        \n                    \n                \n            \n            \n                \nperform(init: PlayerState, n: number)\n                \n            \n\n\n            \n                \n                    Defined in src/app/player/model/sequencer.ts:104\n                \n            \n\n\n            \n                \n\n                    \n                        Parameters :\n                        \n                        \n                            \n                                \n                                    Name\n                                    Type\n                                    Optional\n                                \n                            \n                            \n                                \n                                    init\n                                    \n                                                PlayerState\n                                    \n\n                                    \n                                        No\n                                    \n\n\n                                \n                                \n                                    n\n                                    \n                                                number\n                                    \n\n                                    \n                                        No\n                                    \n\n\n                                \n                            \n                        \n                    \n                    \n                    \n                    \n                        Returns :         Promise\n\n                    \n                    \n                        \n                    \n                \n            \n        \n    \n    \n        \n            \n                \n                    \n                    \n                        prevOp\n                        \n                    \n                \n            \n            \n                \nprevOp()\n                \n            \n\n\n            \n                \n                    Defined in src/app/player/model/sequencer.ts:81\n                \n            \n\n\n            \n                \n\n                    \n                        Returns :         any\n\n                    \n                \n            \n        \n    \n    \n        \n            \n                \n                    \n                    \n                        removeOp\n                        \n                    \n                \n            \n            \n                \nremoveOp()\n                \n            \n\n\n            \n                \n                    Defined in src/app/player/model/sequencer.ts:94\n                \n            \n\n\n            \n                \n\n                    \n                        Returns :         void\n\n                    \n                \n            \n        \n    \n\n\n\n\n\n\n            \n    \n        Accessors\n    \n        \n            \n                \n                    \n                        \n                        isMapped\n                    \n                \n\n                \n                    \n                        getisMapped()\n                    \n                \n                            \n                                \n                                    Defined in src/app/player/model/sequencer.ts:43\n                                \n                            \n                    \n                        \n\n                                \n                                \n                        \n                    \n\n            \n        \n        \n            \n                \n                    \n                        \n                        readyToWeave\n                    \n                \n\n                \n                    \n                        getreadyToWeave()\n                    \n                \n                            \n                                \n                                    Defined in src/app/player/model/sequencer.ts:48\n                                \n                            \n                    \n                        \n\n                                \n                                \n                        \n                    \n\n            \n        \n        \n            \n                \n                    \n                        \n                        current\n                    \n                \n\n                \n                    \n                        getcurrent()\n                    \n                \n                            \n                                \n                                    Defined in src/app/player/model/sequencer.ts:52\n                                \n                            \n\n            \n        \n\n    \n\n\n    \n        import { PedalEvent, PlayerOp, ChainOp, forward } from \"./op_mappings\";\nimport { PlayerState, copyState } from \"./player\";\n\n/**\n * Sequencer:\n *  - 1 or 2 pedal \"select\" pedals ->\n *    multiple operations in a circular queue\n *  - 1 \"progress\" pedal (forward)\n *  - if select pedal, go to next/previous operation in Sequencer\n */\n export class OpSequencer implements PedalEvent {\n  name: string;\n  p_select_a: number = -1;\n  p_select_b?: number = -1;\n  p_prog: number = -1;\n  _pos: number = -1;\n  ops: Array = [];\n  selecting: boolean = false;\n\n  /** \n   * @constructor Provide an array of pedals to initialize the \n   * OpSequencer, specifying the select pedal(s) and confirm \n   * pedal. Optionally, provide an array of Ops to load onto the\n   * Sequencer.\n   */\n  constructor(pedals?: Array, ops?: Array) {\n    this.name = \"sequencer\";\n    if (pedals) {\n      this.p_prog = pedals[0];\n      this.p_select_a = pedals[1];\n      if (pedals.length > 2) {\n        this.p_select_b = pedals[2];\n      }\n    }\n\n    if (ops) {\n      this.ops = ops;\n      this._pos = 0;\n    }\n  }\n\n  /** @method isMapped whether any pedals are mapped to the sequencer */\n  get isMapped() {\n    return !(this.p_prog >= 0 && this.p_select_a >= 0 && this.p_select_b >= 0);\n  }\n\n  /** @method readyToWeave progress pedal and at least one select pedal mapped */\n  get readyToWeave() {\n    return (this.p_prog >= 0 && this.p_select_a >= 0);\n  }\n\n  get current(): PlayerOp | ChainOp {\n    return this.ops[this._pos];\n  }\n\n  mapPedal(id: number, role: 'fwd' | 'sel-next' | 'sel-back') {\n    switch (role) {\n      case 'fwd':\n        this.p_prog = id;\n        break;\n      case 'sel-next':\n        this.p_select_a = id;\n        break;\n      case 'sel-back':\n        this.p_select_b = id;\n    }\n  }\n\n  hasPedal(n: number): boolean {\n    if (this.p_prog == n || this.p_select_a == n || this.p_select_b == n) return true;\n    else return false;\n  }\n\n  nextOp() {\n    if (this.ops.length > 0) {\n      this._pos = (this._pos + 1) % this.ops.length;\n      return this.current;\n    }\n  }\n\n  prevOp() {\n    if (this.ops.length > 0) {\n      this._pos = (this._pos - 1) % this.ops.length;\n      return this.current;\n    }\n  }\n\n  addOp(o: PlayerOp | ChainOp) {\n    this.ops.push(o);\n    if (this._pos  {\n    // console.log('sequencer perform');\n    let res = copyState(init);\n    if (n == this.p_prog) {\n      // console.log(\"forward in sequencer draft\");\n      // if prev step was one of the selects, this row gets sent\n      res.weaving = true;\n      // if (this.ops.length > 0) {\n      //   // this.selecting = false; // unset because we've confirmed the selection\n      //   return this.current.perform(res);\n      // } else {\n        return forward.perform(res);\n      // }\n    } else {\n      res.weaving = false;\n      // this.selecting = true;\n      if (this.ops.length > 0) {\n        if (n == this.p_select_a) {\n          this._pos = (this._pos + 1) % this.ops.length;\n        } else if (n == this.p_select_b) {\n          this._pos = (this._pos - 1) % this.ops.length;\n        }\n        return this.current.perform(res);\n      } else {\n        return Promise.resolve(res); // we really can't do anything without any operations on the sequencer\n      }\n    }\n  }\n}\n\nexport function makeOpSequencer(conf: number = 0, sel_fwd: number = 1, sel_back?: number, start_ops?: Array) {\n  let pedals = [conf, sel_fwd];\n  if (sel_back) pedals.push(sel_back);\n  if (start_ops) return new OpSequencer(pedals, start_ops);\n  return new OpSequencer(pedals);\n}\n\n    \n\n\n\n\n\n\n\n\n\n\n                   \n    \n         results matching \"\"\n        \n    \n    \n        No results matching \"\"\n    \n\n"},"components/OpSequencerComponent.html":{"url":"components/OpSequencerComponent.html","title":"component - OpSequencerComponent","body":"\n                   \n\n\n\n\n\n  Components\n  \n  OpSequencerComponent\n\n\n\n        \n            Info\n        \n        \n            Source\n        \n        \n            Template\n        \n        \n            Styles\n        \n        \n            DOM Tree\n        \n\n\n\n    \n    File\n\n\n    src/app/player/op-sequencer/op-sequencer.component.ts\n\n\n\n\n\n    \n        Implements\n    \n    \n                    OnInit\n    \n\n\n\n    Metadata\n    \n        \n\n\n\n\n\n\n\n\n\n\n\n            \n                selector\n                app-op-sequencer\n            \n\n            \n                styleUrls\n                ./op-sequencer.component.scss\n            \n\n\n\n            \n                templateUrl\n                ./op-sequencer.component.html\n            \n\n\n\n\n\n\n\n\n        \n    \n\n\n    \n    Index\n    \n        \n                \n                    \n                        Properties\n                    \n                \n                \n                    \n                        \n                            \n                                    Public\n                                pds\n                            \n                            \n                                    Public\n                                pls\n                            \n                            \n                                    Public\n                                seq\n                            \n                        \n                    \n                \n\n                \n                    \n                        Methods\n                    \n                \n                \n                    \n                        \n                            \n                                ngOnInit\n                            \n                        \n                    \n                \n\n\n\n\n\n        \n    \n\n\n    \n    Constructor\n        \n            \n                \n                    \nconstructor(pls: PlayerService, pds: PedalsService, seq: SequencerService)\n                    \n                \n                        \n                            \n                                Defined in src/app/player/op-sequencer/op-sequencer.component.ts:11\n                            \n                        \n\n                \n                    \n                            \n                                    Parameters :\n                                    \n                                        \n                                            \n                                                Name\n                                                    Type\n                                                Optional\n                                            \n                                        \n                                        \n                                                \n                                                        pls\n                                                  \n                                                        \n                                                                        PlayerService\n                                                        \n                                                  \n                                                    \n                                                            No\n                                                    \n                                                    \n                                                \n                                                \n                                                        pds\n                                                  \n                                                        \n                                                                        PedalsService\n                                                        \n                                                  \n                                                    \n                                                            No\n                                                    \n                                                    \n                                                \n                                                \n                                                        seq\n                                                  \n                                                        \n                                                                        SequencerService\n                                                        \n                                                  \n                                                    \n                                                            No\n                                                    \n                                                    \n                                                \n                                        \n                                    \n                            \n                    \n                \n            \n        \n\n\n\n\n\n\n    \n    \n    \n        Methods\n    \n    \n        \n            \n                \n                    \n                    \n                        ngOnInit\n                        \n                    \n                \n            \n            \n                \nngOnInit()\n                \n            \n\n\n            \n                \n                    Defined in src/app/player/op-sequencer/op-sequencer.component.ts:19\n                \n            \n\n\n            \n                \n\n                    \n                        Returns :         void\n\n                    \n                \n            \n        \n    \n\n    \n    \n    \n        Properties\n    \n    \n        \n            \n                \n                    \n                    \n                            Public\n                        pds\n                        \n                    \n                \n            \n                \n                    \n                        Type :         PedalsService\n\n                    \n                \n                    \n                        \n                                Defined in src/app/player/op-sequencer/op-sequencer.component.ts:15\n                        \n                    \n\n\n        \n    \n    \n        \n            \n                \n                    \n                    \n                            Public\n                        pls\n                        \n                    \n                \n            \n                \n                    \n                        Type :         PlayerService\n\n                    \n                \n                    \n                        \n                                Defined in src/app/player/op-sequencer/op-sequencer.component.ts:14\n                        \n                    \n\n\n        \n    \n    \n        \n            \n                \n                    \n                    \n                            Public\n                        seq\n                        \n                    \n                \n            \n                \n                    \n                        Type :         SequencerService\n\n                    \n                \n                    \n                        \n                                Defined in src/app/player/op-sequencer/op-sequencer.component.ts:16\n                        \n                    \n\n\n        \n    \n\n\n\n\n\n    \n        import { Component, OnInit } from '@angular/core';\nimport { PlayerService } from '../player.service';\nimport { PedalsService } from '../provider/pedals.service';\nimport { SequencerService } from '../provider/sequencer.service';\n\n@Component({\n  selector: 'app-op-sequencer',\n  templateUrl: './op-sequencer.component.html',\n  styleUrls: ['./op-sequencer.component.scss']\n})\nexport class OpSequencerComponent implements OnInit {\n\n  constructor(\n    public pls: PlayerService,\n    public pds: PedalsService,\n    public seq: SequencerService\n  ) { }\n\n  ngOnInit(): void {\n  }\n\n}\n\n    \n\n    \n        \n    \n      \n        \n          \n            Operations\n          \n        \n          \n        \n           0\">\n            \n              {{class.category}}\n               {{class.dx}}\n              \n                \n                  {{op.name}}\n                 \n                \n                  \n                    Add to Sequencer\n                  \n\n                  \n                    Add Chain to Sequencer\n                  \n\n                  \n                    \n                    Add to Existing Chain\n                    \n                  \n                        \n                  \n                    \n                      \n                      Chain {{ch.id}}\n                      \n                    \n                  \n                \n            \n          \n        \n        \n      \n    \n  \n\n    \n      Operation Sequencer \n      \n        \n          \n          \n            \n            {{o.name}}\n            \n          \n          \n          \n            \n            {{o.name}}\n            \n          \n\n            \n        \n      \n    \n\n\n    \n\n    \n                \n                    ./op-sequencer.component.scss\n                \n                \n.second-row { \n  flex-wrap: wrap;\n  display: flex;\n  align-items: flex-start;\n  flex: 1;\n}\n\n.sequencer-block, .op-block {\n  display: inline-block;\n}\n\n.player-field-header {\n  padding: 14px;\n  margin: unset;\n  background: #3f51b5;\n  color: #ffffff;\n}\n\n.sequencer-block {\n  height: inherit;\n  flex: 1;\n}\n\n.op-menu-block {\n  display: block;\n  max-width: 210px;\n}\n\n#opChains {\n  display: flex;\n}\n\n.op-field h3{\n  width: 95%;\n  font-size: 100%;\n  font-weight: bold;\n  padding: 20px 0px 10px 14px;\n}\n\n.op-field  p{\n  width: 95%;\n  font-size: .8em;\n  padding: 0px 0px 10px 14px;\n}\n\n.op-field{\n  display: flex;\n  flex-direction: column;\n}\n\n.operation-sequence {\n  margin: 10px;\n  display: flex;\n  flex-direction: row;\n  flex-wrap: wrap;\n  row-gap: 20px;\n  padding: 10px;\n}\n\n.operation-box {\n  background-color: #bbc5ff;\n  margin-right: 10px;\n  margin-left: 10px;\n  padding: 10px;\n}\n\n.selected-operation-box {\n  background-color: #f6ff00;\n  margin-right: 10px;\n  margin-left: 10px;\n  padding: 10px;\n}\n\n\n.mat-button {\n  background-color: #ff4081;\n  color: white;\n  width: inherit;\n  margin-left: 10px;\n  margin-right: 10px;\n}\n\n.square-corners {\n  border-radius: 0pt;\n  border-bottom-left-radius: 0pt;\n  border-bottom-right-radius: 0pt;\n  border-top-left-radius: 0pt;\n  border-top-right-radius: 0pt;\n}\n\n.mat-button.mat-button-disabled {\n  background-color: #fd6d9d;\n  color: rgba(255, 255, 255, 0.50);\n  \n}\n\n.mat-expansion-panel-header, \n.mat-expansion-panel-header.mat-expanded:focus {\n  background: #121f6b;\n}\n\n.mat-expansion-panel-body {\n  padding: 0px;\n}\n\n.mat-expansion-panel, .mat-accordion, .mat-expansion-panel-header,\n.mat-accordion .mat-expansion-panel:last-of-type, \n.mat-accordion .mat-expansion-panel:first-of-type, #operations-menu {\n  border: #ffffff 1px;\n  border-radius: 0pt;\n  border-bottom-left-radius: 0pt;\n  border-bottom-right-radius: 0pt;\n  border-top-left-radius: 0pt;\n  border-top-right-radius: 0pt;\n  border-bottom: 0pt;\n}\n\n.mat-expansion-panel-header:hover, \n.mat-expansion-panel-header.mat-expanded:hover,\n.mat-expansion-panel:not(.mat-expanded), \n.mat-expansion-panel-header:hover:not([aria-disabled=true])   {\n  background: #566be2;\n}\n\n.mat-expansion-panel-header-title, .mat-expansion-indicator, .mat-expansion-indicator::after, .mat-expansion-indicator.ng-tns-c130-8.ng-trigger.ng-trigger-indicatorRotate.ng-star-inserted::after, #op-header.mat-expansion-indicator::after {\n  color: white;\n}\n    \n\n    \n        \n        \n            \n                Legend\n            \n            \n                Html element\n            \n            \n                Component\n            \n            \n                Html element with directive\n            \n        \n    \n\n    \n\n\n\n\n\n\n        var COMPONENT_TEMPLATE = '                                        Operations                                               0\">                          {{class.category}}               {{class.dx}}                                                {{op.name}}                                                                       Add to Sequencer                                                        Add Chain to Sequencer                                                                            Add to Existing Chain                                                                                                                                                Chain {{ch.id}}                                                                                                                                        Operation Sequencer                                                           {{o.name}}                                                                  {{o.name}}                                                    '\n    var COMPONENTS = [{'name': 'ConnectionComponent', 'selector': 'app-connection'},{'name': 'DraftdetailComponent', 'selector': 'app-draftdetail'},{'name': 'ImageComponent', 'selector': 'app-image'},{'name': 'InletComponent', 'selector': 'app-inlet'},{'name': 'MixerComponent', 'selector': 'app-mixer'},{'name': 'MixerViewComponent', 'selector': 'app-mixerview'},{'name': 'NoteComponent', 'selector': 'app-note'},{'name': 'OperationComponent', 'selector': 'app-operation'},{'name': 'OpHelpModal', 'selector': 'app-ophelp'},{'name': 'OpsComponent', 'selector': 'app-ops'},{'name': 'OpSequencerComponent', 'selector': 'app-op-sequencer'},{'name': 'PaletteComponent', 'selector': 'app-palette'},{'name': 'ParameterComponent', 'selector': 'app-parameter'},{'name': 'PlayerComponent', 'selector': 'app-player'},{'name': 'SnackbarComponent', 'selector': 'app-snackbar'},{'name': 'SubdraftComponent', 'selector': 'app-subdraft'},{'name': 'VirtualPedalsComponent', 'selector': 'app-virtual-pedals'},{'name': 'WeavingStateComponent', 'selector': 'app-weaving-state'}];\n    var DIRECTIVES = [{'name': 'MarqueeComponent', 'selector': 'app-marquee'},{'name': 'SelectionComponent', 'selector': 'app-selection'}];\n    var ACTUAL_COMPONENT = {'name': 'OpSequencerComponent'};\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n                   \n    \n         results matching \"\"\n        \n    \n    \n        No results matching \"\"\n    \n\n"},"interfaces/OperationClassification.html":{"url":"interfaces/OperationClassification.html","title":"interface - OperationClassification","body":"\n                   \n\n\n\n\n\n\n\n\n\n\n\n\n\n\n  Interfaces\n  \n  OperationClassification\n\n\n\n        \n            Info\n        \n        \n            Source\n        \n\n\n\n    \n        \n            File\n        \n        \n            src/app/mixer/model/operation.ts\n        \n\n\n            \n                Description\n            \n            \n                this type is used to classify operations in the dropdown menu\n\n            \n\n\n        \n            Index\n            \n                \n                    \n                        \n                            Properties\n                        \n                    \n                    \n                        \n                            \n                                \n                                        \n                                            category\n                                        \n                                \n                                \n                                        \n                                            dx\n                                        \n                                \n                                \n                                        \n                                            ops\n                                        \n                                \n                            \n                        \n                    \n                \n            \n        \n\n\n\n            \n                Properties\n                    \n                        \n                                \n                                    \n                                        \n                                        category\n                                            \n                                                \n                                            \n                                        \n                                    \n                                \n                                \n                                    \n                                        category:         string\n\n                                    \n                                \n\n\n                                    \n                                        \n                                            Type :         string\n\n                                        \n                                    \n\n\n\n\n\n                        \n                    \n                    \n                        \n                                \n                                    \n                                        \n                                        dx\n                                            \n                                                \n                                            \n                                        \n                                    \n                                \n                                \n                                    \n                                        dx:         string\n\n                                    \n                                \n\n\n                                    \n                                        \n                                            Type :         string\n\n                                        \n                                    \n\n\n\n\n\n                        \n                    \n                    \n                        \n                                \n                                    \n                                        \n                                        ops\n                                            \n                                                \n                                            \n                                        \n                                    \n                                \n                                \n                                    \n                                        ops:         Array\n\n                                    \n                                \n\n\n                                    \n                                        \n                                            Type :         Array\n\n                                        \n                                    \n\n\n\n\n\n                        \n                    \n            \n    \n\n\n    \n        import { Draft } from '../../core/model/datatypes';\nimport { OperationParam, ParamValue } from './operation/params';\nimport { InletDrafts, OperationInlet } from './operation/inlets';\nimport { BaseOp as Op, BuildableOperation as GenericOp,\n  Seed, Pipe, Merge, Branch, Bus,\n  NoDrafts, NoParams, DraftsOptional, ParamsOptional, AllRequired\n} from './operation/topology';\n\n\n/** ALL OBJECTS/TYPES/UTILITY FUNCTIONS RELATED to OPERATIONS *****************/\n\nexport * from './operation/inlets';\nexport * from './operation/params';\nexport * from './operation/topology';\nexport * as format from './operation/formatting';\n\n/**** USING OPERATIONS with the MIXER TREE **************/\n\n/**\n * this is a type that contains a series of smaller operations held under the banner of one larger operation (such as layer)\n * @param op_name the name of the operation or \"child\" if this is an assignment to an input parameter\n * @param drafts the drafts associated with this input\n * @param params the parameters associated with this operation OR child input\n * @param inlets the index of the inlet for which the draft is entering upon\n */\n export interface OpInput {\n  op_name: string,\n  drafts: Array,\n  params: Array,\n  inlet: number | null\n}\n\nfunction getParamsFromInputs(inputs: Array): Array {\n  let res = inputs.map((el) => el.params).reduce((acc, el) => acc.concat(el), []);\n  console.log(res);\n  return res;\n}\n\nfunction getDraftsFromInputs(inputs: Array): Array {\n  return inputs.map((el) => el.drafts).reduce((acc, ds) => acc.concat(ds), []);\n}\n\nfunction getInletsFromInputs(inputs: Array, n: number): InletDrafts {\n  let res: InletDrafts = {};\n  for (let i = 0; i  el.inlet == i);\n    let inlet_drafts = this_inlet.map((el) => el.drafts);\n    res[i] = inlet_drafts.reduce((acc, ds) => acc.concat(ds), []);\n  }\n  return res;\n}\n  \n/**\n * a standard operation used by the tree\n * @param name the internal name of this opearation (CHANGING THESE WILL BREAK LEGACY VERSIONS)\n * @param displayname the name to show upon this operation in the interface\n * @param dx the description of this operation\n * @param params the parameters associated with this operation\n * @param inets the inlets associated with this operation\n * @param old_names referes to any prior name of this operation to aid when loading old files\n * @param perform a function that executes when this operation is performed, takes a series of inputs and resturns an array of drafts\n */\nexport interface TreeOperation {\n  name: string,\n  displayname: string,\n  dx: string,\n  params: Array,\n  inlets: Array,\n  old_names: Array,\n  perform: (op_inputs: Array) => Promise>\n}\n\nexport function getDefaultParams(op: TreeOperation | GenericOp): Array {\n  if (!op.params || op.params.length == 0) {\n    return [] as Array;\n  }\n  return op.params.map((el) => el.value);\n}\n\n/** \n * @function \n * The big function to pack an operation from op_definitions (working directly with params and drafts)\n * into an operation that the tree can recognize (uses OpInputs)\n */\nexport function buildTreeOp(base: GenericOp): TreeOperation {\n  let tree_op_perform: TreeOperation[\"perform\"];\n  // check what type of op, topologically with I/O (seed, pipe, merge, branch, bus, dynamic)\n    // convert perform args to Array\n  // check for special case of args (no drafts, no params, everything else is ok)\n    // only seed -> no drafts, everything else\n    // pipe/merge/branch/bus -> no params, everything else\n  // check if there is a param or draft in op_inputs[0] to put into an optional arg\n  if (base.classifier.type === 'seed') {\n    if (base.classifier.input_drafts === 'none') {\n      let seedOp = base as Op;\n      tree_op_perform = (op_inputs: Array) => {\n        return Promise.resolve([seedOp.perform(op_inputs[0].params)]);\n      }\n    } else {\n      let seedOp = base as Op;\n      tree_op_perform = (op_inputs: Array) => {\n        console.log(\"op inputs: \", base.name, op_inputs);\n        let res: Draft;\n        if (op_inputs.filter((el) => (el.op_name == 'child')).length > 0) {\n          res = seedOp.perform(op_inputs[0].params, getDraftsFromInputs(op_inputs)[0]);\n        } else {\n          res = seedOp.perform(op_inputs[0].params);\n        }\n        console.log(\"tree op call: \", res);\n        return Promise.resolve([res]);\n      }\n    }\n  } else if (base.classifier.type === 'pipe') {\n    // let pipeOp;\n    if (base.classifier.input_params === 'none') {\n      let pipeOp = base as Op ;\n      tree_op_perform = (op_inputs: Array) => {\n        if (op_inputs.filter((el) => (el.op_name == 'child')).length == 0) {\n          return Promise.resolve([]) as Promise>;\n        }\n        return Promise.resolve([pipeOp.perform(getDraftsFromInputs(op_inputs)[0])]);\n      }\n    } else if (base.classifier.input_params === 'req') {\n      let pipeOp = base as Op;\n      console.log(\"perform op, pipe all required\");\n      tree_op_perform = (op_inputs: Array) => {\n        if (op_inputs.filter((el) => (el.op_name == 'child')).length == 0) {\n          return Promise.resolve([]) as Promise>;\n        }\n        return Promise.resolve([pipeOp.perform(getDraftsFromInputs(op_inputs)[0], op_inputs[0].params)]);\n      }\n    } else {\n      let pipeOp = base as Op;\n      tree_op_perform = (op_inputs: Array) => {\n        if (op_inputs[0].params.length > 0) {\n          return Promise.resolve([pipeOp.perform(op_inputs[0].drafts[0], op_inputs[0].params)]);\n        } else {\n          return Promise.resolve([pipeOp.perform(op_inputs[0].drafts[0])]);\n        }\n      }\n    }\n  } else if (base.classifier.type === 'merge') {\n    if (base.classifier.input_params === 'none') {\n      let mergeOp = base as Op;\n      if (base.inlets.filter((i) => i.num_drafts != 1).length) {\n        // complex merge, at least one inlet can take multiple drafts, so we have to prepare\n        // the inputs a little differently\n        tree_op_perform = (op_inputs: Array) => {\n          if (op_inputs.filter((el) => (el.op_name == 'child')).length >;\n          }\n          let inputs: InletDrafts = {};\n          for (let i = 0; i  el.inlet == i);\n            let inlet_drafts = this_inlet.map((el) => el.drafts);\n            inputs[i] = inlet_drafts.reduce((acc, ds) => acc.concat(ds), []);\n          }\n          return Promise.resolve([mergeOp.perform(inputs)]);\n        }\n      } else {\n        // simple merge, either 1 multi-inlet or mulitple single inlets\n        tree_op_perform = (op_inputs: Array) => {\n          if (op_inputs.filter((el) => (el.op_name == 'child')).length == 0) {\n            return Promise.resolve([]) as Promise>;\n          }\n          let inputs: Array;\n          inputs = op_inputs.map((el) => el.drafts).reduce((acc, ds) => acc.concat(ds), []);\n          return Promise.resolve([mergeOp.perform(inputs)]);\n        }\n      }\n    } else if (base.classifier.input_params === 'req') {\n      let mergeOp = base as Op;\n      if (base.inlets.length > 1 && base.inlets.filter((i) => i.num_drafts != 1).length) {\n        // complex merge, more than one inlet and at least one inlet can take multiple drafts, so we have to prepare\n        // the inputs a little differently\n        tree_op_perform = (op_inputs: Array) => {\n          if (op_inputs.filter((el) => (el.op_name == 'child')).length == 0) {\n            return Promise.resolve([]) as Promise>;\n          }\n          let inputs: InletDrafts = {};\n          for (let i = 0; i  el.inlet == i);\n            let inlet_drafts = this_inlet.map((el) => el.drafts);\n            inputs[i] = inlet_drafts.reduce((acc, ds) => acc.concat(ds), []);\n          }\n          return Promise.resolve([mergeOp.perform(inputs, op_inputs[0].params)]);\n        }\n      } else {\n        // simple merge, either 1 multi-inlet or multple single inlets\n        tree_op_perform = (op_inputs: Array) => {\n          if (op_inputs.filter((el) => (el.op_name == 'child')).length == 0) {\n            return Promise.resolve([]) as Promise>;\n          }\n          let inputs: Array;\n          inputs = op_inputs.map((el) => el.drafts).reduce((acc, ds) => acc.concat(ds));\n          return Promise.resolve([mergeOp.perform(inputs, op_inputs[0].params)]);\n        }\n      }\n    }\n  } else if (base.classifier.type === 'branch') { \n    if (base.classifier.input_params === 'req') {\n      let branchOp = base as Op;\n      tree_op_perform = (op_inputs: Array) => {\n        return Promise.resolve(branchOp.perform(op_inputs[1].drafts[0], getParamsFromInputs(op_inputs))) as Promise>;\n      }\n    } else {\n      let branchOp = base as Op;\n      tree_op_perform = (op_inputs: Array) => {\n        if (op_inputs.filter((el) => (el.op_name == 'child')).length == 0) {\n          return Promise.resolve([]) as Promise>;\n        }\n        return Promise.resolve(branchOp.perform(op_inputs[1].drafts[0])) as Promise>;\n      }\n    }\n  } else { /** @todo bus ops, but there aren't any operations in this category currently */\n    tree_op_perform = (op_inputs: Array) => {\n      return Promise.resolve([]) as Promise>;\n    }\n  }\n\n  let new_op = {\n    name: base.name,\n    topo_op: base,\n    old_names: base.old_names,\n    inlets: base.inlets,\n    displayname: base.displayname,\n    dx: base.dx,\n    max_inputs: base.max_inputs,\n    params: base.params,\n    perform: tree_op_perform\n  } as TreeOperation;\n\n  return new_op;\n}\n\n/**\n * A container operation that takes drafts with some parameter assigned to them \n * @param name the internal name of this operation used for index (DO NOT CHANGE THESE NAMES!)\n * @param displayname the name to show the viewer \n * @param params the parameters that one can directly input to the parent\n * @param dynamic_param_id which parameter id should we use to dynamically create paramaterized input slots\n * @param dynamic_param_type the type of parameter that we look to generate\n * @param inlets the inlets available for input by default on this operation\n * @param dx the description of this operation\n * @param old_names referes to any prior name of this operation to aid when loading old files\n * @param perform a function that executes when this operation is performed, takes a series of inputs and resturns an array of drafts\n */\nexport interface DynamicOperation extends TreeOperation {\n  name: string,\n  displayname: string,\n  params: Array, \n  dynamic_param_id: number,\n  dynamic_param_type: string,\n  inlets: Array,\n  dx: string,\n  old_names: Array,\n  perform: (op_inputs: Array) => Promise>;\n}\n\n /**\n  * this type is used to classify operations in the dropdown menu\n  * @param category the name of the category for all associated operations (e.g. block, structure)\n  * @param dx a description of that category to show on screen\n  * @param ops an array of all the operations associated with this category\n  */\n export interface OperationClassification {\n  category: string,\n  dx: string,\n  ops: Array \n }\n\n export type Operation = TreeOperation; // default: export operations to interface with Tree\n\n \n    \n\n\n\n\n\n\n\n\n\n                   \n    \n         results matching \"\"\n        \n    \n    \n        No results matching \"\"\n    \n\n"},"interfaces/OperationParam.html":{"url":"interfaces/OperationParam.html","title":"interface - OperationParam","body":"\n                   \n\n\n\n\n\n\n\n\n\n\n\n\n\n\n  Interfaces\n  \n  OperationParam\n\n\n\n        \n            Info\n        \n        \n            Source\n        \n\n\n\n    \n        \n            File\n        \n        \n            src/app/mixer/model/operation/params.ts\n        \n\n\n            \n                Description\n            \n            \n                an operation param describes what data be provided to this operation\nsome type of operations inherent from this to offer more specific validation data\n\n            \n\n\n        \n            Index\n            \n                \n                    \n                        \n                            Properties\n                        \n                    \n                    \n                        \n                            \n                                \n                                        \n                                            dx\n                                        \n                                \n                                \n                                        \n                                            name\n                                        \n                                \n                                \n                                        \n                                            type\n                                        \n                                \n                                \n                                        \n                                            value\n                                        \n                                \n                            \n                        \n                    \n                \n            \n        \n\n\n\n            \n                Properties\n                    \n                        \n                                \n                                    \n                                        \n                                        dx\n                                            \n                                                \n                                            \n                                        \n                                    \n                                \n                                \n                                    \n                                        dx:         string\n\n                                    \n                                \n\n\n                                    \n                                        \n                                            Type :         string\n\n                                        \n                                    \n\n\n\n\n\n                        \n                    \n                    \n                        \n                                \n                                    \n                                        \n                                        name\n                                            \n                                                \n                                            \n                                        \n                                    \n                                \n                                \n                                    \n                                        name:         string\n\n                                    \n                                \n\n\n                                    \n                                        \n                                            Type :         string\n\n                                        \n                                    \n\n\n\n\n\n                        \n                    \n                    \n                        \n                                \n                                    \n                                        \n                                        type\n                                            \n                                                \n                                            \n                                        \n                                    \n                                \n                                \n                                    \n                                        type:     \"number\" | \"boolean\" | \"select\" | \"file\" | \"string\" | \"draft\"\n\n                                    \n                                \n\n\n                                    \n                                        \n                                            Type :     \"number\" | \"boolean\" | \"select\" | \"file\" | \"string\" | \"draft\"\n\n                                        \n                                    \n\n\n\n\n\n                        \n                    \n                    \n                        \n                                \n                                    \n                                        \n                                        value\n                                            \n                                                \n                                            \n                                        \n                                    \n                                \n                                \n                                    \n                                        value:     number | boolean | string | null\n\n                                    \n                                \n\n\n                                    \n                                        \n                                            Type :     number | boolean | string | null\n\n                                        \n                                    \n\n\n\n\n\n                        \n                    \n            \n    \n\n\n    \n        export interface OperationParam {\n  name: string,\n  dx: string,\n  type: 'number' | 'boolean' | 'select' | 'file' | 'string' | 'draft',\n  value: number | boolean | string | null,\n}\n\nexport type ParamType = OperationParam[\"type\"];\nexport type ParamValue = OperationParam[\"value\"];\n  \n/**\n * An extension of Param that handles extra requirements for numeric data inputs\n * @param min the minimum allowable value\n * @param max the maximum allowable value\n */\nexport type NumParam = OperationParam & {\n  type: 'number',\n  value: number,\n  min: number,\n  max: number\n}\n  \n/**\n * An extension of Param that handles extra requirements for select list  inputs\n * @param selectlist an array of names and values from which the user can select\n */\nexport type SelectParam = OperationParam & {\n  type: 'select',\n  value: number,\n  selectlist: Array,\n  default?: number\n}\n  \n/**\n * An extension of Param that handles extra requirements for select boolean inputs\n * @param falsestate a description for the user explaining what \"false\" means in this param\n * @param truestate a description for the user explaining what \"false\" means in this param\n */\nexport type BoolParam = OperationParam & {\n  type: 'boolean',\n  value: boolean | number,\n  falsestate: string,\n  truestate: string,\n  default?: boolean | number\n}\n  \n/**\n * An extension of Param that handles extra requirements for strings as inputs\n * @param regex strings must come with a regex used to validate their structure\n * test and make regex using RegEx101 website\n * do not use global (g) flag, as it creates unpredictable results in test functions used to validate inputs\n @param error the error message to show the user if the string is invalid \n */\nexport type StringParam = OperationParam & {\n  type: 'string',\n  value: string,\n  regex: RegExp,\n  error: string\n}\n  \n/**\n* An extension of Param that handles extra requirements for select file inputs\n* Currently a placeholder should extra data be required. \n*/\nexport type FileParam = OperationParam & {\n  type: 'file'\n}\n  \n/**\n* UNUSED -- if you want another draft input on an operation, add another inlet\n* An extension of Param that handles extra requirements for select drafts as inputs\n* @param id draft id at this parameter --- DON'T USE\n*/\nexport type DraftParam = OperationParam & {\n  id: number,\n  type: 'draft'\n}\n\nexport type GenericParam = OperationParam & {\n  value: Type,\n  default?: Type,\n  new (v: Type): GenericParam,\n}\n\n/**\n * Utility function to extract values from an array of Params\n * @param input Array of OperationParams, any type\n * @returns Array of ParamValues\n */\nexport function getParamValues(input: Array): Array {\n  return input.map((param) => param.value);\n}\n\n/**\n * Set of functions to help make OperationParameters\n */\nexport class Params {\n  static Number(name: string, dx: string, value: number, min: number, max: number): NumParam;\n  static Number({ name, dx, value, min, max }: \n    { name: string; \n      dx: string; \n      value: number; \n      min: number; \n      max: number; }\n  ): NumParam;\n  static Number(objOrName: any, dx?: string, value?: number, min?: number, max?: number) {\n    if (dx) {\n      return { type: 'number', name: objOrName, value: value, min: min, max: max, dx: dx };\n    } else {\n      return { \n        type: 'number', name: objOrName.name, value: objOrName.value,\n        min: objOrName.min, max: objOrName.max, dx: objOrName.dx \n      };\n    }\n  }\n\n  static String(name: string, dx: string, value: string, regex: RegExp, error: string): StringParam;\n  static String({ name, dx, value, regex, error }:\n    { name: string;\n      dx: string;\n      value: string;\n      regex: RegExp;\n      error: string; }\n  ): StringParam;\n  static String(objOrName: any, dx?: string, value?: string, regex?: RegExp, error?: string) {\n    if (dx) {\n      return { type: 'string', name: objOrName, dx: dx, value: value, regex: regex, error: error };\n    } else {\n      return {\n        type: 'string', name: objOrName.name, value: objOrName.value,\n        regex: objOrName.regex, error: objOrName.error, dx: objOrName.dx \n      };\n    }\n  }\n\n  // static Bool(\n\n  // ): BoolParam {\n\n  // }\n\n}\n    \n\n\n\n\n\n\n\n\n\n                   \n    \n         results matching \"\"\n        \n    \n    \n        No results matching \"\"\n    \n\n"},"interfaces/OperationProperties.html":{"url":"interfaces/OperationProperties.html","title":"interface - OperationProperties","body":"\n                   \n\n\n\n\n\n\n\n\n\n\n\n\n\n\n  Interfaces\n  \n  OperationProperties\n\n\n\n        \n            Info\n        \n        \n            Source\n        \n\n\n\n    \n        \n            File\n        \n        \n            src/app/mixer/model/operation/topology.ts\n        \n\n\n            \n                Description\n            \n            \n                A standard Operation's metadata -- i.e. everything not the perform() function\n\n            \n\n            \n                Extends\n            \n            \n                        OperationDescriptors\n            \n\n        \n            Index\n            \n                \n                    \n                        \n                            Properties\n                        \n                    \n                    \n                        \n                            \n                                \n                                            Optional\n                                        \n                                            default_params\n                                        \n                                \n                                \n                                        \n                                            max_inputs\n                                        \n                                \n                                \n                                        \n                                            params\n                                        \n                                \n                            \n                        \n                    \n                \n            \n        \n\n\n\n            \n                Properties\n                    \n                        \n                                \n                                    \n                                        \n                                        default_params\n                                            \n                                                \n                                            \n                                        \n                                    \n                                \n                                \n                                    \n                                        default_params:         Array\n\n                                    \n                                \n\n\n                                    \n                                        \n                                            Type :         Array\n\n                                        \n                                    \n\n                                    \n                                        \n                                            Optional\n                                        \n                                    \n\n\n\n\n                        \n                    \n                    \n                        \n                                \n                                    \n                                        \n                                        max_inputs\n                                            \n                                                \n                                            \n                                        \n                                    \n                                \n                                \n                                    \n                                        max_inputs:         number\n\n                                    \n                                \n\n\n                                    \n                                        \n                                            Type :         number\n\n                                        \n                                    \n\n\n\n\n\n                        \n                    \n                    \n                        \n                                \n                                    \n                                        \n                                        params\n                                            \n                                                \n                                            \n                                        \n                                    \n                                \n                                \n                                    \n                                        params:     Array\n\n                                    \n                                \n\n\n                                    \n                                        \n                                            Type :     Array\n\n                                        \n                                    \n\n\n\n\n\n                        \n                    \n            \n    \n\n\n    \n        import { Draft } from \"../../../core/model/datatypes\";\nimport { ParamValue, OperationParam as OpParam, getParamValues } from \"./params\";\nimport { OperationInlet as OpInlet, InletDrafts } from \"./inlets\";\n\n/**\n* At its heart, an Operation is a very fancy function that outputs a Draft or several Drafts.\n* The function itself is perform(), and the Operation can take inputs in the form of \n* Drafts (inlets) or Parameters (params).\n*/\n\n/** \n* Types that an Operation's perform() function can handlle as input/output\n*/\n\n/** @type Union of types that can serve as input to Operation perform() functions. */\nexport type PerformDraftInput = InletDrafts | Array | Draft | null;\n\ntype MultiDraftInput = InletDrafts | Array;\n\n/** @type Union of types that Operation perform() functions can output. */\nexport type PerformOutput = Array | Draft;\n\n/**\n * OPERATION TOPOLOGY\n * Topology refers to the shape of the Operation in terms of its\n * number of input and output Drafts. Classifies Operations.\n */\n\nexport const TopologyName = {\n  pipe: 'pipe', \n  seed: 'seed', \n  merge: 'merge', \n  branch: 'branch', \n  bus: 'bus'\n} as const;\nexport type TopologyName = keyof typeof TopologyName;\n\ninterface TopologyDef { type: TopologyName; input: PerformDraftInput; output: PerformOutput; };\n\n/**\n* @class\n* Operation that can generate a draft with no inputs, may take an optional input\n* @method perform OpPerform function: \n* - INPUT: zero or one Draft\n* - OUTPUT: exactly one Draft\n*/\nexport class Seed implements TopologyDef { type: 'seed'; input: Draft | null; output: Draft; };\n\n/**\n* @class\n* Operation that takes one input and generates one output draft. \n* @method perform OpPerform function: \n* - INPUT: exactly one Draft\n* - OUTPUT: exactly one Draft\n*/\nexport class Pipe implements TopologyDef { type: 'pipe'; input: Draft; output: Draft; };\n\n/**\n* @class\n* Operation that takes many (N) inputs and generates one output draft.\n* @method perform OpPerform function: \n* - INPUT: Array of Drafts\n* - OUTPUT: exactly one Draft\n*/\nexport class Merge implements TopologyDef { type: 'merge'; input: InletDrafts | Array; output: Draft; };\n\n/**\n* @class\n* Operation that takes one input and generates many (N) output drafts.\n* @method perform OpPerform function:\n* - INPUT: exactly one Draft\n* - OUTPUT: Array of Drafts\n*/\nexport class Branch implements TopologyDef { type: 'branch'; input: Draft; output: Array; };\n\n/**\n* CURRENTLY UNUSED\n* @class\n* Operation that takes many (N) inputs and generates many (M) output drafts.\n* Number of inputs does not necessarily match number of outputs (N ?= M).\n* @method perform OpPerform function:  \n* - INPUT: Array of Drafts\n* - OUTPUT: Array of Drafts\n*/\nexport class Bus implements TopologyDef { type: 'bus'; input: Array | InletDrafts; output: Array; };\n\ntype TopologyIndex = {\n  'seed': Seed,\n  'pipe': Pipe,\n  'merge': Merge,\n  'branch': Branch,\n  'bus': Bus\n}\ntype OpTopology = TopologyIndex[TopologyName];\n\n/**\n * OPERATION CONSTRAINT\n * A Constraint on an Operation classifies it based on its\n * input requirements (both Drafts and Params).\n */\n\nexport const ConstraintOptions = {\n  req: 'req', \n  opt: 'opt', \n  none: 'none'\n} as const;\nexport type ConstraintOptions = keyof typeof ConstraintOptions;\n\nexport const ConstraintName = {\n  no_drafts: { input_drafts: 'none', input_params: 'req' }, \n  no_params: { input_drafts: 'req', input_params: 'none' }, \n  drafts_opt: { input_drafts: 'opt', input_params: 'req' }, \n  params_opt: { input_drafts: 'req', input_params: 'opt' }, \n  all_req: {input_drafts: 'req', input_params: 'req' },\n} as const;\ntype ConstraintName = keyof typeof ConstraintName;\n\ntype ConstraintDefs = {\n  [C in keyof typeof ConstraintName]: {\n    constraint: C;\n    input_drafts: typeof ConstraintName[C][\"input_drafts\"];\n    input_params: typeof ConstraintName[C][\"input_params\"];\n  }\n}\n\nexport type NoDrafts = ConstraintDefs[\"no_drafts\"];\nexport type NoParams = ConstraintDefs[\"no_params\"];\nexport type DraftsOptional = ConstraintDefs[\"drafts_opt\"];\nexport type ParamsOptional = ConstraintDefs[\"params_opt\"];\nexport type AllRequired = ConstraintDefs[\"all_req\"];\n\ntype ConstraintIndex = {\n  'no_drafts': NoDrafts, // does not accept input drafts\n  'no_params': NoParams, // does not accept params\n  'drafts_opt': DraftsOptional, // can take no params -- has default values\n  'params_opt': ParamsOptional, // can take zero input drafts\n  'all_req': AllRequired, // both inputs and params required\n}\ntype OpConstraint = ConstraintIndex[ConstraintName]; \n\n/** \n* Generic types for perform() functions, describing options \n* for input draft multiplicity (0, 1, N) and param requirement \n*/\n\ntype NoDraftsPerform = {(params: Array): Topo[\"output\"]};\ntype NoParamsPerform = {(inputs: Topo[\"input\"]): Topo[\"output\"]};\ntype ParamsOptionalPerform = {(inputs: Topo[\"input\"], params?: Array): Topo[\"output\"]}; \ntype DraftsOptionalPerform = {(params: Array, inputs?: Topo[\"input\"]): Topo[\"output\"]};  \ntype AllRequiredPerform = {(inputs: Topo[\"input\"], params: Array): Topo[\"output\"]};  \n\ntype PerformCallSigs = {\n  no_drafts: { [Topo in keyof TopologyIndex]: NoDraftsPerform; },\n  no_params: { [Topo in keyof TopologyIndex]: NoParamsPerform; },\n  drafts_opt: { [Topo in keyof TopologyIndex]: DraftsOptionalPerform; },\n  params_opt: { [Topo in keyof TopologyIndex]: ParamsOptionalPerform; },\n  all_req: { [Topo in keyof TopologyIndex]: AllRequiredPerform; }\n}\n\n/**\n * @interface OpClassifier\n * Key-value pairs for an Operation's Topology and Constraint.\n */\ninterface OpClassifier {\n  type: Topo[\"type\"] | '';\n  input_drafts: Constraint[\"input_drafts\"] | '';\n  input_params: Constraint[\"input_params\"] | '';\n}\n\n/** @type User-defined descriptive strings for any Operation. */\ntype OperationDescriptors = { name: string, displayname: string, dx: string };\n\n/**\n* A standard Operation's metadata -- i.e. everything not the perform() function\n* @param name the internal name of this opearation (CHANGING THESE WILL BREAK LEGACY VERSIONS)\n* @param displayname the name to show upon this operation\n* @param dx the description of this operation\n* @param max_inputs the maximum number of inputs (drafts) allowed directly into this operation\n* @param params the parameters associated with this operation\n* @method perform an OpPerform function\n*/\nexport interface OperationProperties extends OperationDescriptors {\n  max_inputs: number,\n  default_params?: Array;\n  params: Array,\n}\n\n/**\n * @type A function that serves as the perform() method for an Operation. \n * This generic type requires two type parameters:\n * @param Topo one of the PerformInput types\n * @param Constraint one of the PerformOutput types\n *\n * OpPerform to give call signature for perform() function \n * Topo  = Seed | Pipe | Merge | Branch | Bus\n * Constraint = NoDrafts | NoParams | DraftsOptional | ParamsOptional | AllRequired\n */\nexport type OpPerform = PerformCallSigs[Constraint[\"constraint\"]][Topo[\"type\"]];\n// type PerformArgs = Parameters>;\n\n/** TODO doublecheck inlets have been added correctly (fields for input drafts) */\nexport class BaseOp implements OperationProperties {\n  name: string;\n  old_names: Array;\n  displayname: string;\n  dx: string;\n  params: Array;\n  inlets: Array;\n  default_params?: Array;\n  max_inputs: number;\n  classifier: OpClassifier;\n  perform: OpPerform;\n\n  /** @constructor create an Operation using an object literal (keys and values) */\n  constructor (args: OpConstructorArgs);\n  /** @constructor create an Operation using direct arguments in the constructor (values only) */\n  constructor (...args: OpConstructorArray);\n  constructor (name: string, displayname: string, dx: string, perform: OpPerform);\n  constructor (name: string, displayname: string, dx: string, params: Array, perform: OpPerform);\n  constructor (nameOrArgs: any, displayname?: string, dx?: string, performOrParams?: OpPerform | Array, performWithParams?: OpPerform) {\n    // console.log((nameOrArgs.name != undefined));\n    this.classifier = { type: '', input_drafts: '', input_params: '' };\n    if (nameOrArgs.name) {\n      let args = nameOrArgs;\n      this.name = args.name;\n      this.displayname = args.displayname;\n      this.dx = args.dx;\n      this.perform = args.perform;\n      if (args.params) this.params = args.params;\n      else this.params = [];\n      if (args.inlets) this.inlets = args.inlets;\n      else this.inlets = [];\n    } else {\n      this.name = nameOrArgs;\n      this.displayname = displayname;\n      this.dx = dx;\n      if (performWithParams) {\n        let params = > performOrParams;\n        this.params = params;\n        this.default_params = getParamValues(params);\n        this.perform = performWithParams;\n      } else {\n        this.params = [];\n        this.perform = > performOrParams;\n      }\n    }\n  }\n\n  constrain(c: ConstraintName): void {\n    if (c == 'no_drafts') { this.max_inputs = 0; this.inlets = []; }\n    this.classifier.input_drafts = ConstraintName[c][\"input_drafts\"]; \n    this.classifier.input_params = ConstraintName[c][\"input_params\"];\n  }\n\n  type(t: TopologyName): BaseOp {\n    this.classifier.type = t;\n    return this;\n  }\n}\n\ntype ConstructorArgKeysIndex = {\n  [C in keyof ConstraintIndex]: C extends \"no_params\" ? {\n    [T in keyof TopologyIndex]: {\n      name: string, displayname: string, dx: string, old_names: string[],\n      inlets: OpInlet[], perform: OpPerform\n    }\n  } : C extends \"no_drafts\" ? {\n    [T in keyof TopologyIndex]: {\n      name: string, displayname: string, dx: string, old_names: string[],\n      params: OpParam[], perform: OpPerform\n    }\n  } : {\n    [T in keyof TopologyIndex]: {\n      name: string, displayname: string, dx: string, old_names: string[],\n      params: OpParam[], inlets: OpInlet[],\n      perform: OpPerform\n    }\n  }\n}\n\ntype ConstructorArrayIndex = {\n  [C in keyof ConstraintIndex]: C extends \"no_params\" ? {\n    [T in keyof TopologyIndex]: [\n      name: string, displayname: string, dx: string, old_names: string[],\n      inlets: OpInlet[], perform: OpPerform\n    ]\n  } : C extends \"no_drafts\" ? {\n    [T in keyof TopologyIndex]: [\n      name: string, displayname: string, dx: string, old_names: string[],\n      params: OpParam[], perform: OpPerform\n    ]\n  } : {\n    [T in keyof TopologyIndex]: [\n      name: string, displayname: string, dx: string, old_names: string[],\n      params: OpParam[], inlets: OpInlet[],\n      perform: OpPerform\n    ]\n  }\n}\n\ntype OpConstructorArgKeys = \nConstructorArgKeysIndex[Constraint[\"constraint\"]][Topo[\"type\"]];\n\ntype OpConstructorArray = \nConstructorArrayIndex[Constraint[\"constraint\"]][Topo[\"type\"]];\n\ntype OpConstructorArgs = \nOpConstructorArgKeys | OpConstructorArray;\n\n// use factory design pattern to apply classifiers to BaseOp?? Is this too convoluted\n// https://refactoring.guru/design-patterns/abstract-factory/typescript\nclass AbstractOpFactory {\n  NoDrafts(args: OpConstructorArgKeys): BaseOp;\n  NoDrafts(...args: OpConstructorArray): BaseOp;\n  NoDrafts(...args: any) {\n    let op = new BaseOp(...args);\n    op.constrain(\"no_drafts\");\n    return op;\n  }\n\n  NoParams(args: OpConstructorArgKeys): BaseOp;\n  NoParams(...args: OpConstructorArray): BaseOp;\n  NoParams(...args: any) {\n    let op = new BaseOp(...args);\n    op.constrain(\"no_params\");\n    return op;\n  }\n\n  DraftsOptional(args: OpConstructorArgKeys): BaseOp;\n  DraftsOptional(...args: OpConstructorArray): BaseOp;\n  DraftsOptional(...args: any) {\n    let op = new BaseOp(...args);\n    op.constrain(\"drafts_opt\");\n    return op;\n  }\n\n  ParamsOptional(args: OpConstructorArgKeys): BaseOp;\n  ParamsOptional(...args: OpConstructorArray): BaseOp;\n  ParamsOptional(...args: any) {\n    let op = new BaseOp(...args);\n    op.constrain(\"params_opt\");\n    return op;\n  }\n\n  AllRequired(args: OpConstructorArgKeys): BaseOp;\n  AllRequired(...args: OpConstructorArray): BaseOp;\n  AllRequired(...args: any) {\n    let op = new BaseOp(...args);\n    op.constrain(\"all_req\");\n    return op;\n  }\n}\n\n// combine with mix-ins design pattern (link: TypeScript docs website)\nfunction makeTopoFactory(topo: TopologyName) {\n  return class TopologyFactory extends AbstractOpFactory {\n    static base = new AbstractOpFactory();\n    \n    static NoDrafts(args: OpConstructorArgKeys): BaseOp;\n    static NoDrafts(...args: OpConstructorArray): BaseOp;\n    static NoDrafts(...args: any) {\n      return this.base.NoDrafts(...args).type(topo);\n    }\n\n    static NoParams(args: OpConstructorArgKeys): BaseOp;\n    static NoParams(...args: OpConstructorArray): BaseOp;\n    static NoParams(...args: any) {\n      return this.base.NoParams(...args).type(topo);\n    }\n\n    static DraftsOptional(args: OpConstructorArgKeys): BaseOp;\n    static DraftsOptional(...args: OpConstructorArray): BaseOp;\n    static DraftsOptional(...args: any) {\n      return this.base.DraftsOptional(...args).type(topo);\n    }\n\n    static ParamsOptional(args: OpConstructorArgKeys): BaseOp;\n    static ParamsOptional(...args: OpConstructorArray): BaseOp;\n    static ParamsOptional(...args: any) {\n      return this.base.ParamsOptional(...args).type(topo);\n    }\n\n    static AllRequired(args: OpConstructorArgKeys): BaseOp;\n    static AllRequired(...args: OpConstructorArray): BaseOp;\n    static AllRequired(...args: any) {\n      return this.base.AllRequired(...args).type(topo);\n    }\n  }\n}\n\nexport const OpFactories = {\n  Seed: makeTopoFactory(\"seed\"),\n  Pipe: makeTopoFactory(\"pipe\"),\n  Merge: makeTopoFactory(\"merge\"),\n  Branch: makeTopoFactory(\"merge\"),\n  Bus: makeTopoFactory(\"bus\"),\n}\n\n// export const SeedOperation = makeTopoFactory(\"seed\");\n// export const PipeOperation = makeTopoFactory(\"pipe\");\n// export const MergeOperation = makeTopoFactory(\"merge\");\n// export const BranchOperation = makeTopoFactory(\"merge\");\n// export const BusOperation = makeTopoFactory(\"bus\");\n\ntype TopologyOpIndex = {\n  [T in keyof TopologyIndex]: {\n    [C in keyof ConstraintIndex]: BaseOp;\n  }\n}\n\nexport type BuildableOperation = TopologyOpIndex[TopologyName][ConstraintName];\n    \n\n\n\n\n\n\n\n\n\n                   \n    \n         results matching \"\"\n        \n    \n    \n        No results matching \"\"\n    \n\n"},"components/OpsComponent.html":{"url":"components/OpsComponent.html","title":"component - OpsComponent","body":"\n                   \n\n\n\n\n\n  Components\n  \n  OpsComponent\n\n\n\n        \n            Info\n        \n        \n            Source\n        \n        \n            Template\n        \n        \n            Styles\n        \n        \n            DOM Tree\n        \n\n\n\n    \n    File\n\n\n    src/app/mixer/modal/ops/ops.component.ts\n\n\n\n\n\n    \n        Implements\n    \n    \n                    OnInit\n    \n\n\n\n    Metadata\n    \n        \n\n\n\n\n\n\n\n\n\n\n\n            \n                selector\n                app-ops\n            \n\n            \n                styleUrls\n                ./ops.component.scss\n            \n\n\n\n            \n                templateUrl\n                ./ops.component.html\n            \n\n\n\n\n\n\n\n\n        \n    \n\n\n    \n    Index\n    \n        \n                \n                    \n                        Properties\n                    \n                \n                \n                    \n                        \n                            \n                                    Public\n                                data\n                            \n                            \n                                displaynames\n                            \n                            \n                                filteredOptions\n                            \n                            \n                                myControl\n                            \n                            \n                                opnames\n                            \n                            \n                                    Public\n                                ops\n                            \n                        \n                    \n                \n\n                \n                    \n                        Methods\n                    \n                \n                \n                    \n                        \n                            \n                                    Private\n                                _filter\n                            \n                            \n                                addOp\n                            \n                            \n                                addOpFromSearch\n                            \n                            \n                                close\n                            \n                            \n                                ngOnInit\n                            \n                        \n                    \n                \n\n\n                \n                    \n                        Outputs\n                    \n                \n                \n                    \n                        \n                            \n                                onImport\n                            \n                            \n                                onOperationAdded\n                            \n                        \n                    \n                \n\n\n\n        \n    \n\n\n    \n    Constructor\n        \n            \n                \n                    \nconstructor(ops: OperationService, dialog: MatDialog, dialogRef: MatDialogRef, data: any)\n                    \n                \n                        \n                            \n                                Defined in src/app/mixer/modal/ops/ops.component.ts:22\n                            \n                        \n\n                \n                    \n                            \n                                    Parameters :\n                                    \n                                        \n                                            \n                                                Name\n                                                    Type\n                                                Optional\n                                            \n                                        \n                                        \n                                                \n                                                        ops\n                                                  \n                                                        \n                                                                        OperationService\n                                                        \n                                                  \n                                                    \n                                                            No\n                                                    \n                                                    \n                                                \n                                                \n                                                        dialog\n                                                  \n                                                        \n                                                                    MatDialog\n                                                        \n                                                  \n                                                    \n                                                            No\n                                                    \n                                                    \n                                                \n                                                \n                                                        dialogRef\n                                                  \n                                                        \n                                                                        MatDialogRef\n                                                        \n                                                  \n                                                    \n                                                            No\n                                                    \n                                                    \n                                                \n                                                \n                                                        data\n                                                  \n                                                        \n                                                                        any\n                                                        \n                                                  \n                                                    \n                                                            No\n                                                    \n                                                    \n                                                \n                                        \n                                    \n                            \n                    \n                \n            \n        \n\n\n\n    \n    Outputs\n        \n            \n                \n                    \n                        \n                        onImport\n                    \n                \n                \n                    \n                        Type :         any\n\n                    \n                \n                        \n                            \n                                    Defined in src/app/mixer/modal/ops/ops.component.ts:17\n                            \n                        \n            \n        \n        \n            \n                \n                    \n                        \n                        onOperationAdded\n                    \n                \n                \n                    \n                        Type :         any\n\n                    \n                \n                        \n                            \n                                    Defined in src/app/mixer/modal/ops/ops.component.ts:16\n                            \n                        \n            \n        \n\n\n\n    \n    \n    \n        Methods\n    \n    \n        \n            \n                \n                    \n                    \n                        Private\n                        _filter\n                        \n                    \n                \n            \n            \n                \n                    \n                    _filter(value: string)\n                \n            \n\n\n            \n                \n                    Defined in src/app/mixer/modal/ops/ops.component.ts:40\n                \n            \n\n\n            \n                \n\n                    \n                        Parameters :\n                        \n                        \n                            \n                                \n                                    Name\n                                    Type\n                                    Optional\n                                \n                            \n                            \n                                \n                                    value\n                                    \n                                                string\n                                    \n\n                                    \n                                        No\n                                    \n\n\n                                \n                            \n                        \n                    \n                    \n                    \n                    \n                        Returns :     string[]\n\n                    \n                    \n                        \n                    \n                \n            \n        \n    \n    \n        \n            \n                \n                    \n                    \n                        addOp\n                        \n                    \n                \n            \n            \n                \naddOp(name: string)\n                \n            \n\n\n            \n                \n                    Defined in src/app/mixer/modal/ops/ops.component.ts:51\n                \n            \n\n\n            \n                \n\n                    \n                        Parameters :\n                        \n                        \n                            \n                                \n                                    Name\n                                    Type\n                                    Optional\n                                \n                            \n                            \n                                \n                                    name\n                                    \n                                                string\n                                    \n\n                                    \n                                        No\n                                    \n\n\n                                \n                            \n                        \n                    \n                    \n                    \n                    \n                        Returns :         void\n\n                    \n                    \n                        \n                    \n                \n            \n        \n    \n    \n        \n            \n                \n                    \n                    \n                        addOpFromSearch\n                        \n                    \n                \n            \n            \n                \naddOpFromSearch(event: any)\n                \n            \n\n\n            \n                \n                    Defined in src/app/mixer/modal/ops/ops.component.ts:55\n                \n            \n\n\n            \n                \n\n                    \n                        Parameters :\n                        \n                        \n                            \n                                \n                                    Name\n                                    Type\n                                    Optional\n                                \n                            \n                            \n                                \n                                    event\n                                    \n                                                any\n                                    \n\n                                    \n                                        No\n                                    \n\n\n                                \n                            \n                        \n                    \n                    \n                    \n                    \n                        Returns :         void\n\n                    \n                    \n                        \n                    \n                \n            \n        \n    \n    \n        \n            \n                \n                    \n                    \n                        close\n                        \n                    \n                \n            \n            \n                \nclose()\n                \n            \n\n\n            \n                \n                    Defined in src/app/mixer/modal/ops/ops.component.ts:45\n                \n            \n\n\n            \n                \n\n                    \n                        Returns :         void\n\n                    \n                \n            \n        \n    \n    \n        \n            \n                \n                    \n                    \n                        ngOnInit\n                        \n                    \n                \n            \n            \n                \nngOnInit()\n                \n            \n\n\n            \n                \n                    Defined in src/app/mixer/modal/ops/ops.component.ts:28\n                \n            \n\n\n            \n                \n\n                    \n                        Returns :         void\n\n                    \n                \n            \n        \n    \n\n    \n    \n    \n        Properties\n    \n    \n        \n            \n                \n                    \n                    \n                            Public\n                        data\n                        \n                    \n                \n            \n                \n                    \n                        Type :         any\n\n                    \n                \n                \n                    \n                        Decorators : \n                        \n                        \n                            @Inject(MAT_DIALOG_DATA)\n                        \n                    \n                \n                    \n                        \n                                Defined in src/app/mixer/modal/ops/ops.component.ts:26\n                        \n                    \n\n\n        \n    \n    \n        \n            \n                \n                    \n                    \n                        displaynames\n                        \n                    \n                \n            \n                \n                    \n                        Type :     Array\n\n                    \n                \n                \n                    \n                        Default value : []\n                    \n                \n                    \n                        \n                                Defined in src/app/mixer/modal/ops/ops.component.ts:20\n                        \n                    \n\n\n        \n    \n    \n        \n            \n                \n                    \n                    \n                        filteredOptions\n                        \n                    \n                \n            \n                \n                    \n                        Type :     Observable\n\n                    \n                \n                    \n                        \n                                Defined in src/app/mixer/modal/ops/ops.component.ts:22\n                        \n                    \n\n\n        \n    \n    \n        \n            \n                \n                    \n                    \n                        myControl\n                        \n                    \n                \n            \n                \n                    \n                        Default value : new FormControl()\n                    \n                \n                    \n                        \n                                Defined in src/app/mixer/modal/ops/ops.component.ts:21\n                        \n                    \n\n\n        \n    \n    \n        \n            \n                \n                    \n                    \n                        opnames\n                        \n                    \n                \n            \n                \n                    \n                        Type :     Array\n\n                    \n                \n                \n                    \n                        Default value : []\n                    \n                \n                    \n                        \n                                Defined in src/app/mixer/modal/ops/ops.component.ts:19\n                        \n                    \n\n\n        \n    \n    \n        \n            \n                \n                    \n                    \n                            Public\n                        ops\n                        \n                    \n                \n            \n                \n                    \n                        Type :         OperationService\n\n                    \n                \n                    \n                        \n                                Defined in src/app/mixer/modal/ops/ops.component.ts:24\n                        \n                    \n\n\n        \n    \n\n\n\n\n\n    \n        import { Component, OnInit, Output, EventEmitter, Inject } from '@angular/core';\nimport { OperationService } from '../../provider/operation.service';\nimport {MatTooltipModule} from '@angular/material/tooltip';\nimport { MatDialog, MatDialogRef, MAT_DIALOG_DATA } from '@angular/material/dialog';\nimport {FormControl} from '@angular/forms';\nimport {Observable} from 'rxjs';\nimport {map, startWith} from 'rxjs/operators';\n\n@Component({\n  selector: 'app-ops',\n  templateUrl: './ops.component.html',\n  styleUrls: ['./ops.component.scss']\n})\nexport class OpsComponent implements OnInit {\n  \n  @Output() onOperationAdded:any = new EventEmitter();\n  @Output() onImport:any = new EventEmitter();\n  \n  opnames:Array = [];\n  displaynames:Array = [];\n  myControl = new FormControl();\n  filteredOptions: Observable;\n  \n  constructor(public ops: OperationService, private dialog: MatDialog,\n    private dialogRef: MatDialogRef,\n             @Inject(MAT_DIALOG_DATA) public data: any) { }\n\n  ngOnInit() {\n\n    const allops = this.ops.ops.concat(this.ops.dynamic_ops);\n    this.opnames = allops.map(el => el.name);\n    this.displaynames = allops.map(el => el.displayname);\n\n    this.filteredOptions = this.myControl.valueChanges.pipe(\n      startWith(''),\n      map(value => this._filter(value))\n    );\n  }\n\n  private _filter(value: string): string[] {\n    const filterValue = value.toLowerCase();\n    return this.displaynames.filter(option => option.toLowerCase().includes(filterValue));\n  }\n\n  close() {\n    this.dialogRef.close(null);\n  }\n\n\n\n  addOp(name: string){\n      this.onOperationAdded.emit(name);  \n  }\n\n  addOpFromSearch(event: any){\n    //need to convert display name toname here\n    const ndx = this.displaynames.findIndex(el => el === event.option.value);\n    if(ndx !== -1){\n      this.onOperationAdded.emit(this.opnames[ndx]);\n    }\n\n\n  }\n\n\n\n\n}\n\n    \n\n    \n          \n\n\n\nOperations\n\n  \n\n   \n\n  \n    \n    \n    search for action by name\n    \n           \n            \n              {{option}}\n            \n    \n    \n  \n   \n\n\n    \n      \n      {{class.category}}\n       {{class.dx}}\n      \n          \n            {{op.displayname}}\n           \n      \n      \n    \n\n  \n\n\n\n    \n\n    \n                \n                    ./ops.component.scss\n                \n                .mat-stroked-button{\n    margin: 0px 4px 4px 0px;\n    /* background-color: #00d1b2; */\n    background: #333333;\n    color: white;\n    text-align: left;\n    font-weight: bold;\n}\n\n.mat-form-field{\n    width: 100%;\n}\n\n\n\n.op-group h3{\n    width: 95%;\n    font-size: 100%;\n    font-weight: bold;\n    padding: 20px 0px 10px 14px;\n}\n\n.op-group  p{\n    width: 95%;\n    font-size: .8em;\n    padding: 0px 0px 10px 14px;\n}\n\n.toprow{\n    display: flex;\n    flex-direction: row;\n    line-height: 1em;\n}\n\n\n\n.visibleTooltip{\n    font-size: 2em;\n    background: #b71c1c;\n\n}\n\n.op-group{\n    display: flex;\n    flex-direction: column;\n}\n\n\n    \n\n    \n        \n        \n            \n                Legend\n            \n            \n                Html element\n            \n            \n                Component\n            \n            \n                Html element with directive\n            \n        \n    \n\n    \n\n\n\n\n\n\n        var COMPONENT_TEMPLATE = '  Operations                   search for action by name                                         {{option}}                                         {{class.category}}       {{class.dx}}                            {{op.displayname}}                             '\n    var COMPONENTS = [{'name': 'ConnectionComponent', 'selector': 'app-connection'},{'name': 'DraftdetailComponent', 'selector': 'app-draftdetail'},{'name': 'ImageComponent', 'selector': 'app-image'},{'name': 'InletComponent', 'selector': 'app-inlet'},{'name': 'MixerComponent', 'selector': 'app-mixer'},{'name': 'MixerViewComponent', 'selector': 'app-mixerview'},{'name': 'NoteComponent', 'selector': 'app-note'},{'name': 'OperationComponent', 'selector': 'app-operation'},{'name': 'OpHelpModal', 'selector': 'app-ophelp'},{'name': 'OpsComponent', 'selector': 'app-ops'},{'name': 'OpSequencerComponent', 'selector': 'app-op-sequencer'},{'name': 'PaletteComponent', 'selector': 'app-palette'},{'name': 'ParameterComponent', 'selector': 'app-parameter'},{'name': 'PlayerComponent', 'selector': 'app-player'},{'name': 'SnackbarComponent', 'selector': 'app-snackbar'},{'name': 'SubdraftComponent', 'selector': 'app-subdraft'},{'name': 'VirtualPedalsComponent', 'selector': 'app-virtual-pedals'},{'name': 'WeavingStateComponent', 'selector': 'app-weaving-state'}];\n    var DIRECTIVES = [{'name': 'MarqueeComponent', 'selector': 'app-marquee'},{'name': 'SelectionComponent', 'selector': 'app-selection'}];\n    var ACTUAL_COMPONENT = {'name': 'OpsComponent'};\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n                   \n    \n         results matching \"\"\n        \n    \n    \n        No results matching \"\"\n    \n\n"},"interfaces/PairedOp.html":{"url":"interfaces/PairedOp.html","title":"interface - PairedOp","body":"\n                   \n\n\n\n\n\n\n\n\n\n\n\n\n\n\n  Interfaces\n  \n  PairedOp\n\n\n\n        \n            Info\n        \n        \n            Source\n        \n\n\n\n    \n        \n            File\n        \n        \n            src/app/player/model/op_mappings.ts\n        \n\n\n            \n                Description\n            \n            \n                Basic combination:\n\n1 pedal, 1 operation\nif pedal, then operation perform()\n\n\n            \n\n            \n                Extends\n            \n            \n                        PedalEvent\n            \n\n        \n            Index\n            \n                \n                    \n                        \n                            Properties\n                        \n                    \n                    \n                        \n                            \n                                \n                                        \n                                            op\n                                        \n                                \n                                \n                                        \n                                            pedal\n                                        \n                                \n                            \n                        \n                    \n                \n            \n        \n\n\n\n            \n                Properties\n                    \n                        \n                                \n                                    \n                                        \n                                        op\n                                            \n                                                \n                                            \n                                        \n                                    \n                                \n                                \n                                    \n                                        op:         PlayerOp\n\n                                    \n                                \n\n\n                                    \n                                        \n                                            Type :         PlayerOp\n\n                                        \n                                    \n\n\n\n\n\n                        \n                    \n                    \n                        \n                                \n                                    \n                                        \n                                        pedal\n                                            \n                                                \n                                            \n                                        \n                                    \n                                \n                                \n                                    \n                                        pedal:         number\n\n                                    \n                                \n\n\n                                    \n                                        \n                                            Type :         number\n\n                                        \n                                    \n\n\n\n\n\n                        \n                    \n            \n    \n\n\n    \n        import { Draft } from \"../../core/model/datatypes\";\nimport { wefts } from \"../../core/model/drafts\";\nimport { OpInput, TreeOperation as TreeOp, SingleInlet,\n  BaseOp as Op, BuildableOperation as GenericOp, \n  Seed, Pipe, AllRequired, DraftsOptional, \n  getDefaultParams, \n  ParamValue\n} from \"../../mixer/model/operation\";\nimport { PlayerState, initState, copyState } from \"./state\";\n\nimport { OpSequencer, makeOpSequencer } from \"./sequencer\";\nexport * from \"./sequencer\";\n\nexport interface PlayerOp {\n  id?: number,\n  name: string,\n  struct_id?: number,\n  dx?: string,\n  op?: GenericOp,\n  weavingOnly?: boolean,\n  chain?: boolean,\n  perform: (init: PlayerState) => Promise;\n}\nexport type SingleOp = PlayerOp;\n\n/** @const forward a player-specific function to progress through the draft */\nexport const forward: PlayerOp = {\n  name: 'forward',\n  perform: (init: PlayerState) => { \n    let res = copyState(init);\n    res.row = (init.row+1) % wefts(init.draft.drawdown);\n    res.pedal = 'forward';\n    if (res.weaving) res.numPicks++;\n    return Promise.resolve(res); \n  }\n}\n\n/** @const refresh a player-specific function to progress through the draft (re-sends the row to give more time) */\nexport const refresh: PlayerOp = {\n  name: 'refresh',\n  perform: (init: PlayerState) => { \n    let res = copyState(init);\n    if (res.weaving) res.numPicks++;\n    return Promise.resolve(res);\n  }\n}\n\n/** @const reverse a player-specific function to progress backwards through the draft */\nexport const reverse: PlayerOp = {\n  name: 'reverse',\n  perform: (init: PlayerState) => { \n    let res = copyState(init);\n    res.row = (init.row+wefts(init.draft.drawdown)-1) % wefts(init.draft.drawdown);\n    res.pedal = 'reverse';\n    if (res.weaving) res.numPicks++;\n    return Promise.resolve(res);\n  }\n}\n\nexport function playerOpFrom(op: GenericOp, params?: Array) {\n  // use \"rotate\" op as an example\n  let input_params = params ? params : getDefaultParams(op);\n  let perform;\n  if (op.classifier.type === 'pipe') {\n    const pipeOp = op as Op;\n    perform = function(init: PlayerState) {\n      let res = copyState(init);\n      res.draft = pipeOp.perform(init.draft, input_params);\n      res.row = (init.row) % wefts(res.draft.drawdown);\n      res.pedal = op.name;\n      return Promise.resolve(res);\n    }\n  } else if (op.classifier.type === 'seed') {\n    const seedOp = op as Op;\n    perform = function(init: PlayerState) {\n      let res = copyState(init);\n      res.draft = seedOp.perform(input_params);\n      res.row = (init.row) % wefts(res.draft.drawdown);\n      res.pedal = op.name;\n      return Promise.resolve(res);\n    }\n  }\n  \n  /** @TODO */\n  var p: PlayerOp = { \n    name: op.name,\n    dx: op.dx,\n    perform: perform\n  }\n  return p;\n}\n\n\n/** \n * @type \n * a TreeOperation is compatible with the player if it takes one or zero draft inputs \n * and outputs one draft.\n */\ntype PlayableTreeOp = TreeOp & \n  ( { inlets: [ SingleInlet ] } | \n    { inlets: [] });\n\n/** @function playerOpFromTree (untested) */\nfunction playerOpFromTree(op: PlayableTreeOp) {\n  let perform: PlayerOp[\"perform\"];\n  let param_input: OpInput = { op_name: op.name, drafts: [], params: getDefaultParams(op), inlet: -1 }\n  if (op.inlets.length == 0) {\n    perform = function(init: PlayerState) {\n      return op.perform([param_input]).then((output) => {\n        return { \n          draft: output[0], \n          row: init.row, \n          weaving: init.weaving, \n          pedal: op.name, \n          numPicks: init.numPicks \n        };\n      });\n    }\n  } else {\n    perform = function(init: PlayerState) {\n      let draft_input: OpInput = { op_name: 'child', drafts: [init.draft], params: [], inlet: 0}\n      return op.perform([param_input, draft_input]).then((output) => {\n        return { \n          draft: output[0], \n          row: init.row, \n          weaving: init.weaving,\n          pedal: op.name,\n          numPicks: init.numPicks };\n      });\n    }\n  }\n\n  var p: PlayerOp = { \n    name: op.name,\n    perform: perform\n  }\n  return p;\n}\n\n/** things that can happen in response to a pedal */\nexport interface PedalEvent {\n  id?: number,\n  pedal?: number,\n  name: string\n  perform: (init: PlayerState, ...args) => Promise;\n}\n\n/** \n * Basic combination: \n *  - 1 pedal, 1 operation\n *  - if pedal, then operation perform() \n * @param pedal ID number of pedal\n * @param op    ID number of Operation (assigned in Draft Player service)\n */\nexport interface PairedOp extends PedalEvent {\n  pedal:  number,\n  op:     PlayerOp,\n}\n\n// this ...args thing is such a hack\nexport function makePairedOp(p: number, op: PlayerOp): PairedOp {\n  let jankPerform = (init: PlayerState, ...args) => {\n    return op.perform(init);\n  }\n  return {\n    pedal: p,\n    name: op.name,\n    op: op,\n    perform: jankPerform\n  }\n}\n\n/**\n * Op chain:\n * - 1 pedal, multiple operations in a chain (array)\n * - if pedal, perform() each Op in sequence\n * @param pedal ID number of pedals\n * @param ops   array of Op ID numbers to execute in order\n */\nexport interface ChainOp extends PedalEvent{\n  pedal:  number,\n  ops:    Array,\n}\n\nexport function makeBlankChainOp(p?: number): ChainOp {\n  let res: ChainOp = {\n    pedal: -1,\n    name: \"\",\n    ops: [],\n    perform: (init: PlayerState, ...args) => {return Promise.resolve(init);}\n  }\n  \n  if (p) res.pedal = p;\n  return res;\n}\n\nexport function makeChainOp(ops: Array, p?: number): ChainOp {\n  let res = makeBlankChainOp(p);\n  res.name = \"ch\";\n  for (let o of ops) {\n    res.name += \"-\" + o.name;\n  }\n\n  res.ops = ops;\n  res.perform = (init: PlayerState, ...args) => {\n    let newState = copyState(init);\n    newState.pedal = \"ch\";\n    let d: Draft = init.draft;\n    for (let o of ops) {\n      if (o.op.classifier.type == 'seed') {\n        let base_op = o.op as Op;\n        d = base_op.perform(getDefaultParams(base_op));\n      } else if (o.op.classifier.type == 'pipe') {\n        let base_op = o.op as Op;\n        d = base_op.perform(d, getDefaultParams(base_op));\n      }\n      newState.pedal += \"-\" + o.name;\n    }\n\n    newState.draft = d;\n\n    return Promise.resolve(newState);\n  }\n\n  console.log('op chain: ', res);\n\n  return res;\n}\n\nexport type PedalOpMapping = Array;// & {\n//   [id: number]: PedalAction\n// }\n\nexport type MappingShapes = {\n  'pairing': PairedOp,\n  'chain': ChainOp,\n  'sequencer': OpSequencer\n};\n\nexport type PedalAction = MappingShapes[keyof MappingShapes];\n\nexport type MappingType = 'pairing' | 'chain' | 'sequencer';\n    \n\n\n\n\n\n\n\n\n\n                   \n    \n         results matching \"\"\n        \n    \n    \n        No results matching \"\"\n    \n\n"},"components/ParameterComponent.html":{"url":"components/ParameterComponent.html","title":"component - ParameterComponent","body":"\n                   \n\n\n\n\n\n  Components\n  \n  ParameterComponent\n\n\n\n        \n            Info\n        \n        \n            Source\n        \n        \n            Template\n        \n        \n            Styles\n        \n        \n            DOM Tree\n        \n\n\n\n    \n    File\n\n\n    src/app/mixer/palette/operation/parameter/parameter.component.ts\n\n\n\n\n\n    \n        Implements\n    \n    \n                    OnInit\n    \n\n\n\n    Metadata\n    \n        \n\n\n\n\n\n\n\n\n\n\n\n            \n                selector\n                app-parameter\n            \n\n            \n                styleUrls\n                ./parameter.component.scss\n            \n\n\n\n            \n                templateUrl\n                ./parameter.component.html\n            \n\n\n\n\n\n\n\n\n        \n    \n\n\n    \n    Index\n    \n        \n                \n                    \n                        Properties\n                    \n                \n                \n                    \n                        \n                            \n                                boolparam\n                            \n                            \n                                draftparam\n                            \n                            \n                                fc\n                            \n                            \n                                fileparam\n                            \n                            \n                                name\n                            \n                            \n                                numparam\n                            \n                            \n                                opnode\n                            \n                            \n                                selectparam\n                            \n                            \n                                stringparam\n                            \n                            \n                                    Public\n                                tree\n                            \n                        \n                    \n                \n\n                \n                    \n                        Methods\n                    \n                \n                \n                    \n                        \n                            \n                                handleFile\n                            \n                            \n                                ngOnInit\n                            \n                            \n                                onParamChange\n                            \n                        \n                    \n                \n\n                \n                    \n                        Inputs\n                    \n                \n                \n                    \n                        \n                            \n                                opid\n                            \n                            \n                                param\n                            \n                            \n                                paramid\n                            \n                        \n                    \n                \n\n                \n                    \n                        Outputs\n                    \n                \n                \n                    \n                        \n                            \n                                onFileUpload\n                            \n                            \n                                onOperationParamChange\n                            \n                        \n                    \n                \n\n\n\n        \n    \n\n\n    \n    Constructor\n        \n            \n                \n                    \nconstructor(tree: TreeService)\n                    \n                \n                        \n                            \n                                Defined in src/app/mixer/palette/operation/parameter/parameter.component.ts:41\n                            \n                        \n\n                \n                    \n                            \n                                    Parameters :\n                                    \n                                        \n                                            \n                                                Name\n                                                    Type\n                                                Optional\n                                            \n                                        \n                                        \n                                                \n                                                        tree\n                                                  \n                                                        \n                                                                        TreeService\n                                                        \n                                                  \n                                                    \n                                                            No\n                                                    \n                                                    \n                                                \n                                        \n                                    \n                            \n                    \n                \n            \n        \n\n\n    \n    Inputs\n        \n            \n                \n                    \n                        \n                        opid\n                    \n                \n                \n                    \n                        Type :         number\n\n                    \n                \n                        \n                            \n                                    Defined in src/app/mixer/palette/operation/parameter/parameter.component.ts:30\n                            \n                        \n            \n        \n        \n            \n                \n                    \n                        \n                        param\n                    \n                \n                \n                    \n                        Type :         NumParam | StringParam | SelectParam | BoolParam | FileParam | DraftParam\n\n                    \n                \n                        \n                            \n                                    Defined in src/app/mixer/palette/operation/parameter/parameter.component.ts:28\n                            \n                        \n            \n        \n        \n            \n                \n                    \n                        \n                        paramid\n                    \n                \n                \n                    \n                        Type :         number\n\n                    \n                \n                        \n                            \n                                    Defined in src/app/mixer/palette/operation/parameter/parameter.component.ts:31\n                            \n                        \n            \n        \n\n    \n    Outputs\n        \n            \n                \n                    \n                        \n                        onFileUpload\n                    \n                \n                \n                    \n                        Type :         EventEmitter\n\n                    \n                \n                        \n                            \n                                    Defined in src/app/mixer/palette/operation/parameter/parameter.component.ts:33\n                            \n                        \n            \n        \n        \n            \n                \n                    \n                        \n                        onOperationParamChange\n                    \n                \n                \n                    \n                        Type :         EventEmitter\n\n                    \n                \n                        \n                            \n                                    Defined in src/app/mixer/palette/operation/parameter/parameter.component.ts:32\n                            \n                        \n            \n        \n\n\n\n    \n    \n    \n        Methods\n    \n    \n        \n            \n                \n                    \n                    \n                        handleFile\n                        \n                    \n                \n            \n            \n                \nhandleFile(obj: any)\n                \n            \n\n\n            \n                \n                    Defined in src/app/mixer/palette/operation/parameter/parameter.component.ts:136\n                \n            \n\n\n            \n                \n\n                    \n                        Parameters :\n                        \n                        \n                            \n                                \n                                    Name\n                                    Type\n                                    Optional\n                                \n                            \n                            \n                                \n                                    obj\n                                    \n                                                any\n                                    \n\n                                    \n                                        No\n                                    \n\n\n                                \n                            \n                        \n                    \n                    \n                    \n                    \n                        Returns :         void\n\n                    \n                    \n                        \n                    \n                \n            \n        \n    \n    \n        \n            \n                \n                    \n                    \n                        ngOnInit\n                        \n                    \n                \n            \n            \n                \nngOnInit()\n                \n            \n\n\n            \n                \n                    Defined in src/app/mixer/palette/operation/parameter/parameter.component.ts:47\n                \n            \n\n\n            \n                \n\n                    \n                        Returns :         void\n\n                    \n                \n            \n        \n    \n    \n        \n            \n                \n                    \n                    \n                        onParamChange\n                        \n                    \n                \n            \n            \n                \nonParamChange(value: number)\n                \n            \n\n\n            \n                \n                    Defined in src/app/mixer/palette/operation/parameter/parameter.component.ts:97\n                \n            \n\n\n            \n                \n                    changes the view and updates the tree with the new value\n\n\n                    \n                        Parameters :\n                        \n                        \n                            \n                                \n                                    Name\n                                    Type\n                                    Optional\n                                \n                            \n                            \n                                \n                                    value\n                                    \n                                                number\n                                    \n\n                                    \n                                        No\n                                    \n\n\n                                \n                            \n                        \n                    \n                    \n                    \n                    \n                        Returns :         void\n\n                    \n                    \n                        \n                    \n                \n            \n        \n    \n\n    \n    \n    \n        Properties\n    \n    \n        \n            \n                \n                    \n                    \n                        boolparam\n                        \n                    \n                \n            \n                \n                    \n                        Type :         BoolParam\n\n                    \n                \n                    \n                        \n                                Defined in src/app/mixer/palette/operation/parameter/parameter.component.ts:37\n                        \n                    \n\n\n        \n    \n    \n        \n            \n                \n                    \n                    \n                        draftparam\n                        \n                    \n                \n            \n                \n                    \n                        Type :         DraftParam\n\n                    \n                \n                    \n                        \n                                Defined in src/app/mixer/palette/operation/parameter/parameter.component.ts:41\n                        \n                    \n\n\n        \n    \n    \n        \n            \n                \n                    \n                    \n                        fc\n                        \n                    \n                \n            \n                \n                    \n                        Type :         FormControl\n\n                    \n                \n                    \n                        \n                                Defined in src/app/mixer/palette/operation/parameter/parameter.component.ts:24\n                        \n                    \n\n\n        \n    \n    \n        \n            \n                \n                    \n                    \n                        fileparam\n                        \n                    \n                \n            \n                \n                    \n                        Type :         FileParam\n\n                    \n                \n                    \n                        \n                                Defined in src/app/mixer/palette/operation/parameter/parameter.component.ts:40\n                        \n                    \n\n\n        \n    \n    \n        \n            \n                \n                    \n                    \n                        name\n                        \n                    \n                \n            \n                \n                    \n                        Type :         any\n\n                    \n                \n                    \n                        \n                                Defined in src/app/mixer/palette/operation/parameter/parameter.component.ts:26\n                        \n                    \n\n\n        \n    \n    \n        \n            \n                \n                    \n                    \n                        numparam\n                        \n                    \n                \n            \n                \n                    \n                        Type :         NumParam\n\n                    \n                \n                    \n                        \n                                Defined in src/app/mixer/palette/operation/parameter/parameter.component.ts:36\n                        \n                    \n\n\n        \n    \n    \n        \n            \n                \n                    \n                    \n                        opnode\n                        \n                    \n                \n            \n                \n                    \n                        Type :         OpNode\n\n                    \n                \n                    \n                        \n                                Defined in src/app/mixer/palette/operation/parameter/parameter.component.ts:25\n                        \n                    \n\n\n        \n    \n    \n        \n            \n                \n                    \n                    \n                        selectparam\n                        \n                    \n                \n            \n                \n                    \n                        Type :         SelectParam\n\n                    \n                \n                    \n                        \n                                Defined in src/app/mixer/palette/operation/parameter/parameter.component.ts:39\n                        \n                    \n\n\n        \n    \n    \n        \n            \n                \n                    \n                    \n                        stringparam\n                        \n                    \n                \n            \n                \n                    \n                        Type :         StringParam\n\n                    \n                \n                    \n                        \n                                Defined in src/app/mixer/palette/operation/parameter/parameter.component.ts:38\n                        \n                    \n\n\n        \n    \n    \n        \n            \n                \n                    \n                    \n                            Public\n                        tree\n                        \n                    \n                \n            \n                \n                    \n                        Type :         TreeService\n\n                    \n                \n                    \n                        \n                                Defined in src/app/mixer/palette/operation/parameter/parameter.component.ts:44\n                        \n                    \n\n\n        \n    \n\n\n\n\n\n    \n        import { Component, EventEmitter, Input, OnInit, Output } from '@angular/core';\nimport { AbstractControl, FormControl, FormGroupDirective, NgForm, ValidationErrors, ValidatorFn, Validators } from '@angular/forms';\nimport { BoolParam, DraftParam, FileParam, NumParam, SelectParam, StringParam, OpNode } from '../../../../core/model/datatypes';\nimport {TreeService } from '../../../provider/tree.service';\n\n\nexport function regexValidator(nameRe: RegExp): ValidatorFn {\n  return (control: AbstractControl): ValidationErrors | null => {\n    const globalRegex = new RegExp(nameRe, 'g');\n    const valid =  globalRegex.test(control.value);\n    return !valid ? {forbiddenInput: {value: control.value}} : null;\n  };\n}\n\n\n\n@Component({\n  selector: 'app-parameter',\n  templateUrl: './parameter.component.html',\n  styleUrls: ['./parameter.component.scss']\n})\nexport class ParameterComponent implements OnInit {\n  \n  fc: FormControl;\n  opnode: OpNode;\n  name: any;\n\n  @Input() param:  NumParam | StringParam | SelectParam | BoolParam | FileParam \n  | DraftParam;\n  @Input() opid:  number;\n  @Input() paramid:  number;\n  @Output() onOperationParamChange = new EventEmitter (); \n  @Output() onFileUpload = new EventEmitter (); \n\n  //you need these to access values unique to each type.\n  numparam: NumParam;\n  boolparam: BoolParam;\n  stringparam: StringParam;\n  selectparam: SelectParam;\n  fileparam: FileParam;\n  draftparam: DraftParam;\n\n\n  constructor(public tree: TreeService) { \n  }\n\n  ngOnInit(): void {\n\n    this.opnode = this.tree.getOpNode(this.opid);\n\n     //initalize the form controls for the parameters: \n\n      switch(this.param.type){\n        case 'number':\n          this.numparam =  this.param;\n          this.fc = new FormControl(this.param.value);\n          break;\n\n        case 'boolean':\n          this.boolparam =  this.param;\n          this.fc = new FormControl(this.param.value);\n          break;\n\n        case 'select':\n          \n          this.selectparam =  this.param;\n          this.fc = new FormControl(this.param.value);\n          break;\n\n        case 'file':\n          this.fileparam =  this.param;\n          this.fc = new FormControl(this.param.value);\n          break;\n\n        case 'string':\n          this.stringparam =  this.param;\n          this.fc = new FormControl(this.stringparam.value, [Validators.required, regexValidator((this.param).regex)]);\n          break;\n\n        case 'draft':\n          this.draftparam =  this.param;\n          this.fc = new FormControl(this.draftparam.value);\n          break;\n         \n       \n      }\n  \n\n  }\n\n\n\n  /**\n   * changes the view and updates the tree with the new value\n   * @param value \n   */\n  onParamChange(value: number){\n\n    const opnode: OpNode =  this.tree.getNode(this.opid);\n\n    switch(this.param.type){\n      case 'number': \n        opnode.params[this.paramid] = value;\n        this.fc.setValue(value);\n        this.onOperationParamChange.emit({id: this.paramid, value: value});\n        break;\n\n      case 'boolean':\n        opnode.params[this.paramid] = (value) ? 1 : 0;\n        this.fc.setValue(value);\n        this.onOperationParamChange.emit({id: this.paramid, value: value});\n        break;\n\n      case 'string':\n        opnode.params[this.paramid] = value;\n        this.fc.setValue(value);\n        if(!this.fc.hasError('forbiddenInput'))this.onOperationParamChange.emit({id: this.paramid, value: value});\n        break;\n\n      case 'select':\n        opnode.params[this.paramid] = value;\n        this.fc.setValue(value);\n        this.onOperationParamChange.emit({id: this.paramid, value: value});\n        break;\n\n      case 'draft':\n        opnode.params[this.paramid] = value;\n        this.fc.setValue(value);\n        this.onOperationParamChange.emit({id: this.paramid, value: value});\n        break;\n    }\n\n   \n  }\n\n  handleFile(obj: any){\n    this.fc.setValue(obj.data.name);\n    this.opnode.params[this.paramid] = obj.id;\n    this.onFileUpload.emit({id: obj.id, data: obj.data});\n  }\n\n\n}\n\n    \n\n    \n        \n    \n\n    \n        \n      \n          {{param.name}}\n\n            \n        \n\n\n      \n        \n     \n    -->\n  \n\n  \n    \n\n        {{param.name}}\n\n        \n          \n            {{opt.name}}\n          \n        \n     \n \n\n    \n      \n\n         \n            {{boolparam.truestate}}\n            {{boolparam.falsestate}} \n          \n        \n    \n\n    \n       \n\n         \n            \n        \n\n         \n            \n            \n         \n\n      \n  \n\n    \n\n    \n       \n\n     \n         \n         \n     \n\n   \n\n\n  -->\n\n\n\n    \n       \n      \n        \n     \n\n   \n   -->\n\n\n\n\n\n\n  \n     an input is required \n    \n\n  \n    the current input is not correctly formatted\n     -->\n    \n\n    \n                \n                    ./parameter.component.scss\n                \n                \n\n.param-row{\n    vertical-align:middle;\n    flex-direction: row;\n    text-align: left;\n    width: 100%;\n    margin: 0px 8px;\n\n}\n\n\n.param-name{\n    width: 25%;\n    // overflow: hidden;\n    // font-size: .8em;\n    // line-height: 1.1em;\n}\n\n.param-slider{\n    width: 50%;\n}\n\n.param-select{\n    width: 70%;\n    text-align: left;\n    position: relative;\n    left: 10px;\n}\n\n.param-text{\n    width: 75%;\n    text-align: left;\n    padding: 0px 10px;\n    overflow: hidden;\n}\n\n\n// .param-label{\n//     width: 60px;\n// }\n\n// .param-row input{\n//     width: 60px;\n// }\n\n// .param-row .param-text input{\n//     width: 100%;\n// }\n\n.input-color{\n    width: 30px;\n    height: 30px;\n    border: thin solid white;\n}\n\n\n.param-toggle{\n    width: 70%;\n    text-align: left;\n    position: relative;\n    left: 10px;\n    overflow: hidden;\n}\n\n.param-inputs{\n    min-width: 75%;\n    overflow: visible;\n    text-align: left;\n    margin-left: 6px;\n}\n\n.mat-slider{\n    height: 40px;\n    padding: 0px;\n}\n\n.mat-icon-button{\n    position: relative;\n    top: -9px;\n}\n\nbutton.is-primary.is-active{\n    background-color: rgb(255, 64, 129);\n}\n\n\n.refresh .dirty{\n    color: rgb(255, 64, 129); \n}\n\n.text-err,\n.error{\n    color: red;\n    width: 100%;\n    overflow: hidden;\n    text-align: center;\n    font-size: .8em;\n}\n\n.inputs{\n    display: flex;\n    justify-content: flex-start;\n    text-align: center;\n}\n    \n\n    \n        \n        \n            \n                Legend\n            \n            \n                Html element\n            \n            \n                Component\n            \n            \n                Html element with directive\n            \n        \n    \n\n    \n\n\n\n\n\n\n        var COMPONENT_TEMPLATE = '                                {{param.name}}                                           -->                {{param.name}}                              {{opt.name}}                                                       {{boolparam.truestate}}            {{boolparam.falsestate}}                                                                                                                                                                 -->                                    -->       an input is required           the current input is not correctly formatted     -->'\n    var COMPONENTS = [{'name': 'ConnectionComponent', 'selector': 'app-connection'},{'name': 'DraftdetailComponent', 'selector': 'app-draftdetail'},{'name': 'ImageComponent', 'selector': 'app-image'},{'name': 'InletComponent', 'selector': 'app-inlet'},{'name': 'MixerComponent', 'selector': 'app-mixer'},{'name': 'MixerViewComponent', 'selector': 'app-mixerview'},{'name': 'NoteComponent', 'selector': 'app-note'},{'name': 'OperationComponent', 'selector': 'app-operation'},{'name': 'OpHelpModal', 'selector': 'app-ophelp'},{'name': 'OpsComponent', 'selector': 'app-ops'},{'name': 'OpSequencerComponent', 'selector': 'app-op-sequencer'},{'name': 'PaletteComponent', 'selector': 'app-palette'},{'name': 'ParameterComponent', 'selector': 'app-parameter'},{'name': 'PlayerComponent', 'selector': 'app-player'},{'name': 'SnackbarComponent', 'selector': 'app-snackbar'},{'name': 'SubdraftComponent', 'selector': 'app-subdraft'},{'name': 'VirtualPedalsComponent', 'selector': 'app-virtual-pedals'},{'name': 'WeavingStateComponent', 'selector': 'app-weaving-state'}];\n    var DIRECTIVES = [{'name': 'MarqueeComponent', 'selector': 'app-marquee'},{'name': 'SelectionComponent', 'selector': 'app-selection'}];\n    var ACTUAL_COMPONENT = {'name': 'ParameterComponent'};\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n                   \n    \n         results matching \"\"\n        \n    \n    \n        No results matching \"\"\n    \n\n"},"classes/Params.html":{"url":"classes/Params.html","title":"class - Params","body":"\n                   \n\n\n\n\n\n\n\n\n\n\n\n\n\n  Classes\n  Params\n\n\n\n        \n            Info\n        \n        \n            Source\n        \n\n\n\n    \n        \n            File\n        \n        \n            src/app/mixer/model/operation/params.ts\n        \n\n\n            \n                Description\n            \n            \n                Set of functions to help make OperationParameters\n\n            \n\n\n\n\n            \n    Index\n    \n        \n\n                \n                    \n                        Methods\n                    \n                \n                \n                    \n                        \n                            \n                                    Static\n                                Number\n                            \n                            \n                                    Static\n                                Number\n                            \n                            \n                                    Static\n                                Number\n                            \n                            \n                                    Static\n                                String\n                            \n                            \n                                    Static\n                                String\n                            \n                            \n                                    Static\n                                String\n                            \n                        \n                    \n                \n\n\n\n\n\n        \n    \n\n\n\n\n            \n    \n    \n        Methods\n    \n    \n        \n            \n                \n                    \n                    \n                        Static\n                        Number\n                        \n                    \n                \n            \n            \n                \n                    \n                    Number(name: string, dx: string, value: number, min: number, max: number)\n                \n            \n\n\n            \n                \n                    Defined in src/app/mixer/model/operation/params.ts:106\n                \n            \n\n\n            \n                \n\n                    \n                        Parameters :\n                        \n                        \n                            \n                                \n                                    Name\n                                    Type\n                                    Optional\n                                \n                            \n                            \n                                \n                                    name\n                                    \n                                                string\n                                    \n\n                                    \n                                        No\n                                    \n\n\n                                \n                                \n                                    dx\n                                    \n                                                string\n                                    \n\n                                    \n                                        No\n                                    \n\n\n                                \n                                \n                                    value\n                                    \n                                                number\n                                    \n\n                                    \n                                        No\n                                    \n\n\n                                \n                                \n                                    min\n                                    \n                                                number\n                                    \n\n                                    \n                                        No\n                                    \n\n\n                                \n                                \n                                    max\n                                    \n                                                number\n                                    \n\n                                    \n                                        No\n                                    \n\n\n                                \n                            \n                        \n                    \n                    \n                    \n                    \n                        Returns :         NumParam\n\n                    \n                    \n                        \n                    \n                \n            \n        \n    \n    \n        \n            \n                \n                    \n                    \n                        Static\n                        Number\n                        \n                    \n                \n            \n            \n                \n                    \n                    Number(undefined: literal type)\n                \n            \n\n\n            \n                \n                    Defined in src/app/mixer/model/operation/params.ts:107\n                \n            \n\n\n            \n                \n\n                    \n                        Parameters :\n                        \n                        \n                            \n                                \n                                    Name\n                                    Type\n                                    Optional\n                                \n                            \n                            \n                                \n                                    \n                                            literal type\n                                    \n\n                                    \n                                        No\n                                    \n\n\n                                \n                            \n                        \n                    \n                    \n                    \n                    \n                        Returns :         NumParam\n\n                    \n                    \n                        \n                    \n                \n            \n        \n    \n    \n        \n            \n                \n                    \n                    \n                        Static\n                        Number\n                        \n                    \n                \n            \n            \n                \n                    \n                    Number(objOrName: any, dx?: string, value?: number, min?: number, max?: number)\n                \n            \n\n\n            \n                \n                    Defined in src/app/mixer/model/operation/params.ts:114\n                \n            \n\n\n            \n                \n\n                    \n                        Parameters :\n                        \n                        \n                            \n                                \n                                    Name\n                                    Type\n                                    Optional\n                                \n                            \n                            \n                                \n                                    objOrName\n                                    \n                                                any\n                                    \n\n                                    \n                                        No\n                                    \n\n\n                                \n                                \n                                    dx\n                                    \n                                                string\n                                    \n\n                                    \n                                        Yes\n                                    \n\n\n                                \n                                \n                                    value\n                                    \n                                                number\n                                    \n\n                                    \n                                        Yes\n                                    \n\n\n                                \n                                \n                                    min\n                                    \n                                                number\n                                    \n\n                                    \n                                        Yes\n                                    \n\n\n                                \n                                \n                                    max\n                                    \n                                                number\n                                    \n\n                                    \n                                        Yes\n                                    \n\n\n                                \n                            \n                        \n                    \n                    \n                    \n                    \n                        Returns :     { type: string; name: any; value: any; min: any; max: any; dx: any; }\n\n                    \n                    \n                        \n                    \n                \n            \n        \n    \n    \n        \n            \n                \n                    \n                    \n                        Static\n                        String\n                        \n                    \n                \n            \n            \n                \n                    \n                    String(name: string, dx: string, value: string, regex: RegExp, error: string)\n                \n            \n\n\n            \n                \n                    Defined in src/app/mixer/model/operation/params.ts:125\n                \n            \n\n\n            \n                \n\n                    \n                        Parameters :\n                        \n                        \n                            \n                                \n                                    Name\n                                    Type\n                                    Optional\n                                \n                            \n                            \n                                \n                                    name\n                                    \n                                                string\n                                    \n\n                                    \n                                        No\n                                    \n\n\n                                \n                                \n                                    dx\n                                    \n                                                string\n                                    \n\n                                    \n                                        No\n                                    \n\n\n                                \n                                \n                                    value\n                                    \n                                                string\n                                    \n\n                                    \n                                        No\n                                    \n\n\n                                \n                                \n                                    regex\n                                    \n                                            RegExp\n                                    \n\n                                    \n                                        No\n                                    \n\n\n                                \n                                \n                                    error\n                                    \n                                                string\n                                    \n\n                                    \n                                        No\n                                    \n\n\n                                \n                            \n                        \n                    \n                    \n                    \n                    \n                        Returns :         StringParam\n\n                    \n                    \n                        \n                    \n                \n            \n        \n    \n    \n        \n            \n                \n                    \n                    \n                        Static\n                        String\n                        \n                    \n                \n            \n            \n                \n                    \n                    String(undefined: literal type)\n                \n            \n\n\n            \n                \n                    Defined in src/app/mixer/model/operation/params.ts:126\n                \n            \n\n\n            \n                \n\n                    \n                        Parameters :\n                        \n                        \n                            \n                                \n                                    Name\n                                    Type\n                                    Optional\n                                \n                            \n                            \n                                \n                                    \n                                            literal type\n                                    \n\n                                    \n                                        No\n                                    \n\n\n                                \n                            \n                        \n                    \n                    \n                    \n                    \n                        Returns :         StringParam\n\n                    \n                    \n                        \n                    \n                \n            \n        \n    \n    \n        \n            \n                \n                    \n                    \n                        Static\n                        String\n                        \n                    \n                \n            \n            \n                \n                    \n                    String(objOrName: any, dx?: string, value?: string, regex?: RegExp, error?: string)\n                \n            \n\n\n            \n                \n                    Defined in src/app/mixer/model/operation/params.ts:133\n                \n            \n\n\n            \n                \n\n                    \n                        Parameters :\n                        \n                        \n                            \n                                \n                                    Name\n                                    Type\n                                    Optional\n                                \n                            \n                            \n                                \n                                    objOrName\n                                    \n                                                any\n                                    \n\n                                    \n                                        No\n                                    \n\n\n                                \n                                \n                                    dx\n                                    \n                                                string\n                                    \n\n                                    \n                                        Yes\n                                    \n\n\n                                \n                                \n                                    value\n                                    \n                                                string\n                                    \n\n                                    \n                                        Yes\n                                    \n\n\n                                \n                                \n                                    regex\n                                    \n                                            RegExp\n                                    \n\n                                    \n                                        Yes\n                                    \n\n\n                                \n                                \n                                    error\n                                    \n                                                string\n                                    \n\n                                    \n                                        Yes\n                                    \n\n\n                                \n                            \n                        \n                    \n                    \n                    \n                    \n                        Returns :     { type: string; name: any; value: any; regex: any; error: any; dx: any; }\n\n                    \n                    \n                        \n                    \n                \n            \n        \n    \n\n\n\n\n\n\n    \n\n\n    \n        export interface OperationParam {\n  name: string,\n  dx: string,\n  type: 'number' | 'boolean' | 'select' | 'file' | 'string' | 'draft',\n  value: number | boolean | string | null,\n}\n\nexport type ParamType = OperationParam[\"type\"];\nexport type ParamValue = OperationParam[\"value\"];\n  \n/**\n * An extension of Param that handles extra requirements for numeric data inputs\n * @param min the minimum allowable value\n * @param max the maximum allowable value\n */\nexport type NumParam = OperationParam & {\n  type: 'number',\n  value: number,\n  min: number,\n  max: number\n}\n  \n/**\n * An extension of Param that handles extra requirements for select list  inputs\n * @param selectlist an array of names and values from which the user can select\n */\nexport type SelectParam = OperationParam & {\n  type: 'select',\n  value: number,\n  selectlist: Array,\n  default?: number\n}\n  \n/**\n * An extension of Param that handles extra requirements for select boolean inputs\n * @param falsestate a description for the user explaining what \"false\" means in this param\n * @param truestate a description for the user explaining what \"false\" means in this param\n */\nexport type BoolParam = OperationParam & {\n  type: 'boolean',\n  value: boolean | number,\n  falsestate: string,\n  truestate: string,\n  default?: boolean | number\n}\n  \n/**\n * An extension of Param that handles extra requirements for strings as inputs\n * @param regex strings must come with a regex used to validate their structure\n * test and make regex using RegEx101 website\n * do not use global (g) flag, as it creates unpredictable results in test functions used to validate inputs\n @param error the error message to show the user if the string is invalid \n */\nexport type StringParam = OperationParam & {\n  type: 'string',\n  value: string,\n  regex: RegExp,\n  error: string\n}\n  \n/**\n* An extension of Param that handles extra requirements for select file inputs\n* Currently a placeholder should extra data be required. \n*/\nexport type FileParam = OperationParam & {\n  type: 'file'\n}\n  \n/**\n* UNUSED -- if you want another draft input on an operation, add another inlet\n* An extension of Param that handles extra requirements for select drafts as inputs\n* @param id draft id at this parameter --- DON'T USE\n*/\nexport type DraftParam = OperationParam & {\n  id: number,\n  type: 'draft'\n}\n\nexport type GenericParam = OperationParam & {\n  value: Type,\n  default?: Type,\n  new (v: Type): GenericParam,\n}\n\n/**\n * Utility function to extract values from an array of Params\n * @param input Array of OperationParams, any type\n * @returns Array of ParamValues\n */\nexport function getParamValues(input: Array): Array {\n  return input.map((param) => param.value);\n}\n\n/**\n * Set of functions to help make OperationParameters\n */\nexport class Params {\n  static Number(name: string, dx: string, value: number, min: number, max: number): NumParam;\n  static Number({ name, dx, value, min, max }: \n    { name: string; \n      dx: string; \n      value: number; \n      min: number; \n      max: number; }\n  ): NumParam;\n  static Number(objOrName: any, dx?: string, value?: number, min?: number, max?: number) {\n    if (dx) {\n      return { type: 'number', name: objOrName, value: value, min: min, max: max, dx: dx };\n    } else {\n      return { \n        type: 'number', name: objOrName.name, value: objOrName.value,\n        min: objOrName.min, max: objOrName.max, dx: objOrName.dx \n      };\n    }\n  }\n\n  static String(name: string, dx: string, value: string, regex: RegExp, error: string): StringParam;\n  static String({ name, dx, value, regex, error }:\n    { name: string;\n      dx: string;\n      value: string;\n      regex: RegExp;\n      error: string; }\n  ): StringParam;\n  static String(objOrName: any, dx?: string, value?: string, regex?: RegExp, error?: string) {\n    if (dx) {\n      return { type: 'string', name: objOrName, dx: dx, value: value, regex: regex, error: error };\n    } else {\n      return {\n        type: 'string', name: objOrName.name, value: objOrName.value,\n        regex: objOrName.regex, error: objOrName.error, dx: objOrName.dx \n      };\n    }\n  }\n\n  // static Bool(\n\n  // ): BoolParam {\n\n  // }\n\n}\n    \n\n\n\n\n\n\n\n\n\n\n                   \n    \n         results matching \"\"\n        \n    \n    \n        No results matching \"\"\n    \n\n"},"interfaces/Pedal.html":{"url":"interfaces/Pedal.html","title":"interface - Pedal","body":"\n                   \n\n\n\n\n\n\n\n\n\n\n\n\n\n\n  Interfaces\n  \n  Pedal\n\n\n\n        \n            Info\n        \n        \n            Source\n        \n\n\n\n    \n        \n            File\n        \n        \n            src/app/player/provider/pedals.service.ts\n        \n\n\n            \n                Description\n            \n            \n                The Pedals service is in charge of updating the database\nconnections to communicate with the loom hardware. In AdaCAD,\nits main responsibility is to keep an up-to-date list of the pedals\nand when they get stepped on; as well as any other hardware\nstatuses.\n\n            \n\n\n        \n            Index\n            \n                \n                    \n                        \n                            Properties\n                        \n                    \n                    \n                        \n                            \n                                \n                                        \n                                            dbnode\n                                        \n                                \n                                \n                                        \n                                            id\n                                        \n                                \n                                \n                                        \n                                            key\n                                        \n                                \n                                \n                                        \n                                            name\n                                        \n                                \n                                \n                                        \n                                            state\n                                        \n                                \n                                \n                                            Optional\n                                        \n                                            u_name\n                                        \n                                \n                            \n                        \n                    \n                \n            \n        \n\n\n\n            \n                Properties\n                    \n                        \n                                \n                                    \n                                        \n                                        dbnode\n                                            \n                                                \n                                            \n                                        \n                                    \n                                \n                                \n                                    \n                                        dbnode:     DBListener | DBTwoWay\n\n                                    \n                                \n\n\n                                    \n                                        \n                                            Type :     DBListener | DBTwoWay\n\n                                        \n                                    \n\n\n\n\n\n                        \n                    \n                    \n                        \n                                \n                                    \n                                        \n                                        id\n                                            \n                                                \n                                            \n                                        \n                                    \n                                \n                                \n                                    \n                                        id:         number\n\n                                    \n                                \n\n\n                                    \n                                        \n                                            Type :         number\n\n                                        \n                                    \n\n\n\n\n\n                        \n                    \n                    \n                        \n                                \n                                    \n                                        \n                                        key\n                                            \n                                                \n                                            \n                                        \n                                    \n                                \n                                \n                                    \n                                        key:         string\n\n                                    \n                                \n\n\n                                    \n                                        \n                                            Type :         string\n\n                                        \n                                    \n\n\n\n\n\n                        \n                    \n                    \n                        \n                                \n                                    \n                                        \n                                        name\n                                            \n                                                \n                                            \n                                        \n                                    \n                                \n                                \n                                    \n                                        name:         string\n\n                                    \n                                \n\n\n                                    \n                                        \n                                            Type :         string\n\n                                        \n                                    \n\n\n\n\n\n                        \n                    \n                    \n                        \n                                \n                                    \n                                        \n                                        state\n                                            \n                                                \n                                            \n                                        \n                                    \n                                \n                                \n                                    \n                                        state:         any\n\n                                    \n                                \n\n\n                                    \n                                        \n                                            Type :         any\n\n                                        \n                                    \n\n\n\n\n\n                        \n                    \n                    \n                        \n                                \n                                    \n                                        \n                                        u_name\n                                            \n                                                \n                                            \n                                        \n                                    \n                                \n                                \n                                    \n                                        u_name:         string\n\n                                    \n                                \n\n\n                                    \n                                        \n                                            Type :         string\n\n                                        \n                                    \n\n                                    \n                                        \n                                            Optional\n                                        \n                                    \n\n\n\n\n                        \n                    \n            \n    \n\n\n    \n        import { Injectable } from '@angular/core';\nimport { WeavingPick } from '../model/player';\nimport { EventEmitter } from 'events';\nimport { getDatabase } from \"firebase/database\";\nimport { Database } from '@angular/fire/database';\nimport { NodeParams,\n  DBListener, OnlineStatus, DBWriter, \n  DBListenerArray, DBTwoWayArray, DBTwoWay } from '../model/dbnodes';\n\n/**\n * The Pedals service is in charge of updating the database \n * connections to communicate with the loom hardware. In AdaCAD, \n * its main responsibility is to keep an up-to-date list of the pedals\n * and when they get stepped on; as well as any other hardware \n * statuses.\n */\n\nexport interface Pedal {\n  id: number,\n  name: string,\n  u_name?: string,\n  key: string,\n  dbnode: DBListener | DBTwoWay,\n  state: any,\n  // op?: Operation\n}\n\n/** \n * Just a wrapper for how the database arranges the pedals + \n * loom information into nodes\n */\nexport class PedalStatus extends EventEmitter {\n  pi_online: OnlineStatus;     // is the pi online?\n  loom_online: DBListener;   // is the loom online?\n  vacuum_on: DBListener;     // is the loom running? (vacuum pump running)\n  loom_ready: DBListener;\n\n  active_draft: DBWriter;\n  num_picks: DBWriter;\n  pick_data: DBWriter;\n\n  num_pedals: DBListener;\n  pedal_states: DBListener;\n  pedal_array: DBListenerArray;\n\n  num_v_pedals: DBTwoWay;\n  v_pedal_states: DBTwoWay;\n  v_pedal_array: DBTwoWayArray;\n\n  constructor(db: Database) {\n    super();\n    const defaults = {\n      active_draft: false,\n      num_picks: 0,\n      pick_data: false\n    }\n    const listeners = {\n      // pi_online: 'pi-online',\n      loom_online: 'loom-online',\n      vacuum_on: 'vacuum-on',\n      num_pedals: 'num-pedals',\n      pedal_states: 'pedal-states',\n      loom_ready: 'loom-ready'\n    }\n    const writers = {\n      active_draft: 'active-draft',\n      num_picks: 'num-picks',\n      pick_data: 'pick-data'\n    }\n\n    function params(path: string): NodeParams { \n      return { db: db, root: 'pedals/', path: path };\n    };\n\n    this.pi_online = new OnlineStatus(params('pi-online'));\n    // this.pi_online.attach();\n    // this.loom_online = new DBListener(this.db, 'loom-online');\n\n    for (var l in listeners) {\n      const newL = new DBListener(params(listeners[l]));\n      Object.defineProperty(this, l, { value: newL });\n      // this[l].attach();\n    }\n\n    for (var w in writers) {\n      const newW = new DBWriter({...params(writers[w]), initVal: defaults[w]});\n      // console.log('writer created');\n      Object.defineProperty(this, w, { value: newW });\n      // console.log('writer added to status');\n      this[w].attach();\n      // console.log('writer attached');\n      this[w].setVal(defaults[w]);\n    }\n\n    // set up array of pedal listeners with the length and parent nodes\n    this.pedal_array = new DBListenerArray(this.num_pedals, this.pedal_states);\n\n    // set up virtual pedal nodes, which have their own length\n    // and parent nodes\n    this.num_v_pedals = new DBTwoWay(params('num-v-pedals'));\n    this.v_pedal_states = new DBTwoWay(params('v-pedal-states'));\n    this.v_pedal_array = new DBTwoWayArray(this.num_v_pedals, this.v_pedal_states);\n  }\n\n  toString() {\n    var str = \"\";\n    str += \"'pi-online': \" + this.pi_online.val + \"\\n\";\n    str += \"'loom-online': \" + this.loom_online.val + \"\\n\\n\";\n    str += \"'vacuum-on': \" + this.vacuum_on.val + \"\\n\";\n    str += \"'active-draft': \" + this.active_draft.val + \"\\n\";\n    str += \"'num-pedals': \" + this.num_pedals.val + \"\\n\";\n    return str;\n  }\n}\n\n/**\n * Definition of pedal service\n * @class\n * @event `pedal-added` data: how many pedals\n * @event `pedal-removed` data: how many pedals\n * @event `pedal-step` data: which pedal\n */\n@Injectable({\n  providedIn: 'root'\n})\nexport class PedalsService extends EventEmitter {\n\n  db: Database;\n  dbNodes: Array;\n\n  // status data\n  status: PedalStatus;\n  //  default = {\n  //     pi_online: false,     // is the pi online?\n  //     loom_online: false,   // is the loom online?\n  //     vacuum_on: false,     // is the loom running? (vacuum pump running)\n  //     active_draft: false,\n  //     num_pedals: 0,\n  //     pedal_states: {},\n  //     loom_ready: false     // is the loom requesting a draft row?\n  // };\n  p_pedals: Array = [];\n  v_pedals: Array = [];\n  \n  virtual: boolean = true;  // whether to mix virtual pedals in with the regular pedals array;\n\n  get pedals() { return this.p_pedals.concat(this.v_pedals); }\n\n  constructor() { \n    super();\n    // init: start listening to changes in Firebase DB from the Pi\n    console.log(\"pedals service constructor\");\n    this.db = getDatabase();\n    this.status = new PedalStatus(this.db);\n    // console.log(this.status);\n    \n    // if pi_online = \"true\" at start-up, just make sure\n    console.log(\"are you alive?\");\n    this.pi_online.checkAlive();\n    this.loom_online.attach();\n\n    this.virtualPedals(true);\n    this.loomPedals(false);\n\n    // listens for changes in pi online status\n    // if online, enable everything\n    this.pi_online.on('change', (state) =>\n      this.loomPedals(state));\n\n    // other listeners\n    this.loom_online.on('change', (state) => \n      this.loomListeners(state));\n\n    /** pedal array listeners */\n    this.p_pedal_array.on('ready', (state) => \n      this.weavingWriters(state)\n    );\n\n    this.p_pedal_array.on('child-added', (newNode) => {\n      console.log('pedals service: pedal added');\n      this.p_pedals.push(this.nodeToPedal(newNode));\n      this.v_pedals.map((el) => { el.id += 1; });\n      this.emit('pedal-added', this.p_pedals.length);\n    });\n\n    this.p_pedal_array.on('child-removed', () => {\n      this.p_pedals.pop();\n      this.v_pedals.map((el) => { el.id -= 1; });\n      this.emit('pedal-removed', this.p_pedals.length);\n    });\n\n    this.p_pedal_array.on('child-change', (e) => {\n      this.p_pedals[e.id].state = e.val;\n      this.emit('pedal-step', e.id);\n      // e = {id: which pedal's id, val: pedal state}\n      // call pedal.execute or whatever it ends up being\n      // this.player.onPedal(e.id, e.val);\n    });\n\n    /** @todo */\n    this.loom_ready.on('change', (state) => {\n      if (state) {\n        // send the next weaving row to DB\n        // update num_picks and pick_data accordingly\n      }\n    });\n    \n    /** virtual pedal listeners */\n    this.v_pedal_array.on('ready', (state) => {\n      console.log(\"weaving writers \", state);\n      this.weavingWriters(state);\n    });\n\n    this.v_pedal_array.on('child-added', (newNode) => {\n      console.log('pedals service: virtual pedal added');\n      let v = this.nodeToPedal(newNode);\n      v.id += this.p_pedals.length - (this.p_pedals.length ? 1 : 0);\n      this.v_pedals.push(v);\n      this.emit('pedal-added', this.v_pedals.length);\n    })\n\n    this.v_pedal_array.on('child-removed', () => {\n      this.v_pedals.pop();\n      this.emit('pedal-removed', this.v_pedals.length);\n    })\n\n    this.v_pedal_array.on('child-change', (e) => {\n      this.v_pedals[e.id].state = e.val;\n      this.emit('pedal-step', e.id);\n      // e = {id: which pedal's id, val: pedal state}\n      // call pedal.execute or whatever it ends up being\n      // this.player.onPedal(e.id, e.val);\n    });\n  }\n\n  /** online status */\n  get pi_online() { return this.status.pi_online; }\n  get loom_online() { return this.status.loom_online; }\n\n  /** weaving statuses */\n  get vacuum_on() { return this.status.vacuum_on; }\n  get active_draft() { return this.status.active_draft; }\n  get loom_ready() { return this.status.loom_ready; }\n  get num_picks() { return this.status.num_picks; }\n  get pick_data() { return this.status.pick_data; }\n\n  /** physical pedals DB nodes */\n  get num_pedals() { return this.status.num_pedals; }\n  get pedal_states() { return this.status.pedal_states; }\n  get p_pedal_array() { return this.status.pedal_array; }\n\n  /** virtual pedals DB nodes */\n  get num_v_pedals() { return this.status.num_v_pedals; }\n  get v_pedal_states() { return this.status.v_pedal_states; }\n  get v_pedal_array() { return this.status.v_pedal_array; }\n  \n  get readyToWeave() { return (this.loom_online.val && (this.p_pedal_array.ready || this.v_pedal_array.ready)); }\n\n  // attach all listeners to other values in DB\n  loomPedals(state: boolean) {\n    state ? this.p_pedal_array.attach() : this.p_pedal_array.detach();\n  }\n\n  /** functions to interact with virtual pedals */\n\n  virtualPedals(state: boolean) {\n    state? this.v_pedal_array.attach() : this.v_pedal_array.detach();\n  }\n\n  addVPedal() {\n    this.v_pedal_array.addNode(false);\n  }\n\n  togglePedalByID(id: number) {\n    console.log(\"toggling virtual pedal \", id);\n    if (id >= 0 && id \n    \n\n\n\n\n\n\n\n\n\n                   \n    \n         results matching \"\"\n        \n    \n    \n        No results matching \"\"\n    \n\n"},"classes/PedalConfig.html":{"url":"classes/PedalConfig.html","title":"class - PedalConfig","body":"\n                   \n\n\n\n\n\n\n\n\n\n\n\n\n\n  Classes\n  PedalConfig\n\n\n\n        \n            Info\n        \n        \n            Source\n        \n\n\n\n    \n        \n            File\n        \n        \n            src/app/player/player.service.ts\n        \n\n\n            \n                Description\n            \n            \n                Represents a set of two-way bindings between a set of Pedals\nand a set of (Player)Operations. A pedal can only be bound to one\nAction (a single Op, a chain of Ops, or to control an OpRoulette)\nget bound to a sequence of operations.\n\n            \n\n\n\n\n            \n    Index\n    \n        \n                \n                    \n                        Properties\n                    \n                \n                \n                    \n                        \n                            \n                                availPedals\n                            \n                            \n                                mapping\n                            \n                            \n                                ops\n                            \n                            \n                                pedals\n                            \n                        \n                    \n                \n\n                \n                    \n                        Methods\n                    \n                \n                \n                    \n                        \n                            \n                                addOperation\n                            \n                            \n                                addPedal\n                            \n                            \n                                chain\n                            \n                            \n                                chainToPedal\n                            \n                            \n                                opIsMapped\n                            \n                            \n                                pair\n                            \n                            \n                                pedalIsChained\n                            \n                            \n                                pedalIsMapped\n                            \n                            \n                                pedalIsPaired\n                            \n                            \n                                remPedal\n                            \n                            \n                                unpairPedal\n                            \n                        \n                    \n                \n\n\n\n\n\n                    \n                        \n                            Accessors\n                        \n                    \n                    \n                        \n                            \n                                \n                                    numPedals\n                                \n                                \n                                    numMappings\n                                \n                            \n                        \n                    \n        \n    \n\n\n            \n    Constructor\n        \n            \n                \n                    \nconstructor(pedalArray: Array, loadConfig)\n                    \n                \n                        \n                            \n                                Defined in src/app/player/player.service.ts:47\n                            \n                        \n\n                \n                    \n                            \n                                    Parameters :\n                                    \n                                        \n                                            \n                                                Name\n                                                    Type\n                                                Optional\n                                            \n                                        \n                                        \n                                                \n                                                        pedalArray\n                                                  \n                                                        \n                                                                        Array\n                                                        \n                                                  \n                                                    \n                                                            No\n                                                    \n                                                    \n                                                \n                                                \n                                                        loadConfig\n                                                  \n                                                        \n                                                        \n                                                  \n                                                    \n                                                            No\n                                                    \n                                                    \n                                                \n                                        \n                                    \n                            \n                    \n                \n            \n        \n\n\n            \n    \n    \n        Properties\n    \n    \n        \n            \n                \n                    \n                    \n                        availPedals\n                        \n                    \n                \n            \n                \n                    \n                        Type :     Array\n\n                    \n                \n                    \n                        \n                                Defined in src/app/player/player.service.ts:46\n                        \n                    \n\n\n        \n    \n    \n        \n            \n                \n                    \n                    \n                        mapping\n                        \n                    \n                \n            \n                \n                    \n                        Type :         PedalOpMapping\n\n                    \n                \n                    \n                        \n                                Defined in src/app/player/player.service.ts:47\n                        \n                    \n\n\n        \n    \n    \n        \n            \n                \n                    \n                    \n                        ops\n                        \n                    \n                \n            \n                \n                    \n                        Type :         Array\n\n                    \n                \n                    \n                        \n                                Defined in src/app/player/player.service.ts:45\n                        \n                    \n\n\n        \n    \n    \n        \n            \n                \n                    \n                    \n                        pedals\n                        \n                    \n                \n            \n                \n                    \n                        Type :         Array\n\n                    \n                \n                    \n                        \n                                Defined in src/app/player/player.service.ts:44\n                        \n                    \n\n\n        \n    \n\n\n            \n    \n    \n        Methods\n    \n    \n        \n            \n                \n                    \n                    \n                        addOperation\n                        \n                    \n                \n            \n            \n                \naddOperation(o: PlayerOp, chain?: boolean)\n                \n            \n\n\n            \n                \n                    Defined in src/app/player/player.service.ts:74\n                \n            \n\n\n            \n                \n\n                    \n                        Parameters :\n                        \n                        \n                            \n                                \n                                    Name\n                                    Type\n                                    Optional\n                                \n                            \n                            \n                                \n                                    o\n                                    \n                                                PlayerOp\n                                    \n\n                                    \n                                        No\n                                    \n\n\n                                \n                                \n                                    chain\n                                    \n                                                boolean\n                                    \n\n                                    \n                                        Yes\n                                    \n\n\n                                \n                            \n                        \n                    \n                    \n                    \n                    \n                        Returns :         void\n\n                    \n                    \n                        \n                    \n                \n            \n        \n    \n    \n        \n            \n                \n                    \n                    \n                        addPedal\n                        \n                    \n                \n            \n            \n                \naddPedal(p: Pedal)\n                \n            \n\n\n            \n                \n                    Defined in src/app/player/player.service.ts:64\n                \n            \n\n\n            \n                \n\n                    \n                        Parameters :\n                        \n                        \n                            \n                                \n                                    Name\n                                    Type\n                                    Optional\n                                \n                            \n                            \n                                \n                                    p\n                                    \n                                                Pedal\n                                    \n\n                                    \n                                        No\n                                    \n\n\n                                \n                            \n                        \n                    \n                    \n                    \n                    \n                        Returns :         void\n\n                    \n                    \n                        \n                    \n                \n            \n        \n    \n    \n        \n            \n                \n                    \n                    \n                        chain\n                        \n                    \n                \n            \n            \n                \nchain(pedalId: number, opName: string)\n                \n            \n\n\n            \n                \n                    Defined in src/app/player/player.service.ts:91\n                \n            \n\n\n            \n                \n\n                    \n                        Parameters :\n                        \n                        \n                            \n                                \n                                    Name\n                                    Type\n                                    Optional\n                                \n                            \n                            \n                                \n                                    pedalId\n                                    \n                                                number\n                                    \n\n                                    \n                                        No\n                                    \n\n\n                                \n                                \n                                    opName\n                                    \n                                                string\n                                    \n\n                                    \n                                        No\n                                    \n\n\n                                \n                            \n                        \n                    \n                    \n                    \n                    \n                        Returns :         void\n\n                    \n                    \n                        \n                    \n                \n            \n        \n    \n    \n        \n            \n                \n                    \n                    \n                        chainToPedal\n                        \n                    \n                \n            \n            \n                \nchainToPedal(pedalId: number, ops: Array)\n                \n            \n\n\n            \n                \n                    Defined in src/app/player/player.service.ts:104\n                \n            \n\n\n            \n                \n\n                    \n                        Parameters :\n                        \n                        \n                            \n                                \n                                    Name\n                                    Type\n                                    Optional\n                                \n                            \n                            \n                                \n                                    pedalId\n                                    \n                                                number\n                                    \n\n                                    \n                                        No\n                                    \n\n\n                                \n                                \n                                    ops\n                                    \n                                            Array\n                                    \n\n                                    \n                                        No\n                                    \n\n\n                                \n                            \n                        \n                    \n                    \n                    \n                    \n                        Returns :         void\n\n                    \n                    \n                        \n                    \n                \n            \n        \n    \n    \n        \n            \n                \n                    \n                    \n                        opIsMapped\n                        \n                    \n                \n            \n            \n                \nopIsMapped(opName: string)\n                \n            \n\n\n            \n                \n                    Defined in src/app/player/player.service.ts:121\n                \n            \n\n\n            \n                \n\n                    \n                        Parameters :\n                        \n                        \n                            \n                                \n                                    Name\n                                    Type\n                                    Optional\n                                \n                            \n                            \n                                \n                                    opName\n                                    \n                                                string\n                                    \n\n                                    \n                                        No\n                                    \n\n\n                                \n                            \n                        \n                    \n                    \n                    \n                    \n                        Returns :         boolean\n\n                    \n                    \n                        \n                    \n                \n            \n        \n    \n    \n        \n            \n                \n                    \n                    \n                        pair\n                        \n                    \n                \n            \n            \n                \npair(pedalId: number, opName: string)\n                \n            \n\n\n            \n                \n                    Defined in src/app/player/player.service.ts:84\n                \n            \n\n\n            \n                \n\n                    \n                        Parameters :\n                        \n                        \n                            \n                                \n                                    Name\n                                    Type\n                                    Optional\n                                \n                            \n                            \n                                \n                                    pedalId\n                                    \n                                                number\n                                    \n\n                                    \n                                        No\n                                    \n\n\n                                \n                                \n                                    opName\n                                    \n                                                string\n                                    \n\n                                    \n                                        No\n                                    \n\n\n                                \n                            \n                        \n                    \n                    \n                    \n                    \n                        Returns :         void\n\n                    \n                    \n                        \n                    \n                \n            \n        \n    \n    \n        \n            \n                \n                    \n                    \n                        pedalIsChained\n                        \n                    \n                \n            \n            \n                \npedalIsChained(id: number)\n                \n            \n\n\n            \n                \n                    Defined in src/app/player/player.service.ts:131\n                \n            \n\n\n            \n                \n\n                    \n                        Parameters :\n                        \n                        \n                            \n                                \n                                    Name\n                                    Type\n                                    Optional\n                                \n                            \n                            \n                                \n                                    id\n                                    \n                                                number\n                                    \n\n                                    \n                                        No\n                                    \n\n\n                                \n                            \n                        \n                    \n                    \n                    \n                    \n                        Returns :         boolean\n\n                    \n                    \n                        \n                    \n                \n            \n        \n    \n    \n        \n            \n                \n                    \n                    \n                        pedalIsMapped\n                        \n                    \n                \n            \n            \n                \npedalIsMapped(id: number)\n                \n            \n\n\n            \n                \n                    Defined in src/app/player/player.service.ts:127\n                \n            \n\n\n            \n                \n\n                    \n                        Parameters :\n                        \n                        \n                            \n                                \n                                    Name\n                                    Type\n                                    Optional\n                                \n                            \n                            \n                                \n                                    id\n                                    \n                                                number\n                                    \n\n                                    \n                                        No\n                                    \n\n\n                                \n                            \n                        \n                    \n                    \n                    \n                    \n                        Returns :         PedalOpMapping\n\n                    \n                    \n                        \n                    \n                \n            \n        \n    \n    \n        \n            \n                \n                    \n                    \n                        pedalIsPaired\n                        \n                    \n                \n            \n            \n                \npedalIsPaired(id: number)\n                \n            \n\n\n            \n                \n                    Defined in src/app/player/player.service.ts:136\n                \n            \n\n\n            \n                \n\n                    \n                        Parameters :\n                        \n                        \n                            \n                                \n                                    Name\n                                    Type\n                                    Optional\n                                \n                            \n                            \n                                \n                                    id\n                                    \n                                                number\n                                    \n\n                                    \n                                        No\n                                    \n\n\n                                \n                            \n                        \n                    \n                    \n                    \n                    \n                        Returns :         boolean\n\n                    \n                    \n                        \n                    \n                \n            \n        \n    \n    \n        \n            \n                \n                    \n                    \n                        remPedal\n                        \n                    \n                \n            \n            \n                \nremPedal()\n                \n            \n\n\n            \n                \n                    Defined in src/app/player/player.service.ts:69\n                \n            \n\n\n            \n                \n\n                    \n                        Returns :         void\n\n                    \n                \n            \n        \n    \n    \n        \n            \n                \n                    \n                    \n                        unpairPedal\n                        \n                    \n                \n            \n            \n                \nunpairPedal(id: number)\n                \n            \n\n\n            \n                \n                    Defined in src/app/player/player.service.ts:140\n                \n            \n\n\n            \n                \n\n                    \n                        Parameters :\n                        \n                        \n                            \n                                \n                                    Name\n                                    Type\n                                    Optional\n                                \n                            \n                            \n                                \n                                    id\n                                    \n                                                number\n                                    \n\n                                    \n                                        No\n                                    \n\n\n                                \n                            \n                        \n                    \n                    \n                    \n                    \n                        Returns :         void\n\n                    \n                    \n                        \n                    \n                \n            \n        \n    \n\n\n\n\n\n\n            \n    \n        Accessors\n    \n        \n            \n                \n                    \n                        \n                        numPedals\n                    \n                \n\n                \n                    \n                        getnumPedals()\n                    \n                \n                            \n                                \n                                    Defined in src/app/player/player.service.ts:56\n                                \n                            \n\n            \n        \n        \n            \n                \n                    \n                        \n                        numMappings\n                    \n                \n\n                \n                    \n                        getnumMappings()\n                    \n                \n                            \n                                \n                                    Defined in src/app/player/player.service.ts:60\n                                \n                            \n\n            \n        \n\n    \n\n\n    \n        import { Injectable} from '@angular/core';\nimport { EventEmitter } from 'events';\nimport { wefts } from '../core/model/drafts';\nimport { Draft } from '../core/model/datatypes';\nimport { BaseOp, BuildableOperation as GenericOp, \n  TreeOperation as TreeOp,\n  Seed, Pipe, DraftsOptional, AllRequired, getDefaultParams,\n  SingleInlet, OpInput\n} from '../mixer/model/operation';\nimport * as defs from '../mixer/model/op_definitions';\nimport { PlayerOp, playerOpFrom, \n  ChainOp, OpSequencer, PairedOp, PedalOpMapping,\n  makePairedOp, makeChainOp, makeOpSequencer,\n  forward, refresh, reverse\n} from './model/op_mappings';\nimport { PlayerState, WeavingPick, copyState, initState } from './model/state';\nimport { MappingsService } from './provider/mappings.service';\nimport { PedalsService, PedalStatus, Pedal } from './provider/pedals.service';\nimport { SequencerService } from './provider/sequencer.service';\n// import { OperationService } from '../mixer/provider/operation.service';\n\nexport interface DraftOperationClassification {\n  category: string,\n  dx: string,\n  ops: Array \n }\n\ninterface LoomConfig {\n  warps: number,\n  draftTiling: boolean\n}\n\n/**\n * @class PedalConfig\n * @desc OLD, UPDATE THIS ---> \n * Represents a set of two-way bindings between a set of Pedals\n * and a set of (Player)Operations. A pedal can only be bound to one\n * Action (a single Op, a chain of Ops, or to control an OpRoulette)\n * @todo The second restriction may change, it might make sense for pedals to\n * get bound to a sequence of operations.\n */\nclass PedalConfig {\n  // numPedals: number;\n  pedals: Array;\n  ops: Array;\n  availPedals: Array;\n  mapping: PedalOpMapping;\n\n  constructor(pedalArray: Array, loadConfig = false) {\n    this.pedals = pedalArray;\n    this.ops = []\n    this.availPedals = pedalArray.map((p) => p.id);\n    this.mapping = [];\n  }\n\n  get numPedals() {\n    return this.pedals.length;\n  }\n\n  get numMappings() {\n    return Object.entries(this.mapping).length;\n  }\n\n  addPedal(p: Pedal) {\n    // this.pedals.push(p);\n    this.availPedals.push(p.id);\n  }\n\n  remPedal() {\n    // this.pedals.pop();\n    this.availPedals.filter((id) => id != this.pedals.length);\n  }\n\n  addOperation(o: PlayerOp, chain?: boolean) {\n    o.id = this.ops.length;\n    this.ops.push(o);\n    if (chain) {\n      o.chain = chain;\n    }\n    // this.unpairedOps.push(o);\n    // console.log(this.ops);\n  }\n\n  pair(pedalId: number, opName: string) {\n    let o = this.ops.findIndex((op) => op.name == opName);\n    // let thisOp = this.unpairedOps.splice(o, 1);\n    let thisOp = this.ops;\n    this.mapping[pedalId] = makePairedOp(pedalId, thisOp[o]); \n  }\n\n  chain(pedalId: number, opName: string) {\n    let o = this.ops[this.ops.findIndex((op) => op.name == opName)];\n    if (this.pedalIsChained(pedalId)) {\n      let curr_ops = ( this.mapping[pedalId]).ops;\n      this.mapping[pedalId] = makeChainOp(curr_ops.concat([o]), pedalId);\n    } else if (this.pedalIsPaired(pedalId)) {\n      let first_op = ( this.mapping[pedalId]).op;\n      this.mapping[pedalId] = makeChainOp([first_op].concat([o]), pedalId);\n    } else {\n      this.mapping[pedalId] = makeChainOp([o], pedalId);\n    }\n  }\n\n  chainToPedal(pedalId: number, ops: Array) {\n    let op_array = ops.map((name) => this.ops[this.ops.findIndex((op) => op.name == name)]);\n    if (this.pedalIsChained(pedalId)) { \n      // if pedal already has a chain, add ops to the chain\n      let curr_ops = ( this.mapping[pedalId]).ops;\n      this.mapping[pedalId] = makeChainOp(curr_ops.concat(op_array), pedalId);\n    } else if (this.pedalIsPaired(pedalId)) {\n      // if pedal is paired, you can turn it into a chain\n      let first_op = ( this.mapping[pedalId]).op;\n      this.mapping[pedalId] = makeChainOp([first_op].concat(op_array), pedalId);\n    } else {\n      // pedal doesn't have anything mapped, just add a new chain\n      this.mapping[pedalId] = makeChainOp(op_array, pedalId);\n    }\n  }\n\n  // will return true if an op is mapped to a pedal in any way\n  opIsMapped(opName: string): boolean {\n    if (this.mapping.filter((m) => m.name.includes(opName)).length > 0) {\n      return true;\n    } else return false;\n  }\n\n  pedalIsMapped(id: number) {\n    return (this.mapping[id]);\n  }\n\n  pedalIsChained(id: number) {\n    if (this.pedalIsMapped(id) && this.mapping[id].name.startsWith('ch')) { return true; }\n    else {return false; }\n  }\n\n  pedalIsPaired(id: number) {\n    return (this.pedalIsMapped(id) && !this.pedalIsChained(id));\n  }\n\n  unpairPedal(id: number) {\n    console.log(`unpairing pedal ${id}`);\n    // let op = this.pairs[id];\n    // this.unpairedOps.splice(op.id, 0, op);\n    delete this.mapping[id];\n  }\n\n  // unpairOp(name: string) {\n  //   let pid = this.opIsPaired(name);\n  //   this.unpairPedal(pid);\n  // }\n}\n\n/**\n * The Draft Player Service is in charge of updating the the global PlayerState and tracking where the weaver is in the draft.\n */\n@Injectable({\n  providedIn: 'root'\n})\nexport class PlayerService {\n  state: PlayerState;\n  loom: LoomConfig;\n  redraw = new EventEmitter();\n  draftClassification: Array = [];\n\n  constructor(\n    public pedals: PedalsService,\n    public mappings: MappingsService,\n    public seq: SequencerService,\n    // private oss: OperationService\n  ) {\n    // this.draft = null; \n    console.log(\"draft player constructor\");\n    // const startPattern = playerOpFrom(defs.tabby);\n    // console.log(startPattern);\n    // startPattern.perform(nullOpInput).then((result) => {\n    //   console.log(result);\n    //   this.setDraft(result[0]);\n    // });\n\n    this.state = initState();\n    this.state.draft = defs.tabby.perform([1]);\n\n    this.loom = { warps: 2640, draftTiling: true };\n\n    // load the draft progress ops\n    mappings.addOperation(forward);\n    mappings.addOperation(refresh);\n    mappings.addOperation(reverse);\n\n    function addOp(op: GenericOp, params?: Array) {\n      let p_op = params ? playerOpFrom(op, params) : playerOpFrom(op);\n      mappings.addOperation(p_op);\n      return p_op;\n    }\n\n    // load ops from the main mixer\n    const tabby = addOp(defs.tabby);\n    const twill = addOp(defs.twill);\n    const satin = addOp(defs.satin);\n    const waffle = addOp(defs.waffle);\n    const basket = addOp(defs.basket);\n    const rib = addOp(defs.rib);\n    const random = addOp(defs.random);\n    const rotate = addOp(defs.rotate);\n    const invert = addOp(defs.invert);\n    const shiftx = addOp(defs.shiftx);\n    const shifty = addOp(defs.shifty);\n    const slope = addOp(defs.slope);\n    const flipx = addOp(defs.flipx);\n    const flipy = addOp(defs.flipy);\n    const symm = addOp(defs.makesymmetric);\n    const stretch = addOp(defs.stretch);\n    const bindweft = addOp(defs.bindweftfloats);\n    const bindwarp = addOp(defs.bindwarpfloats);\n\n    const tile: PlayerOp = {\n      name: defs.tile.name,\n      perform: (init: PlayerState) => {\n        let res = copyState(init);\n        res.draft = defs.tile.perform([init.draft], [2, 2]);\n        res.row = init.row % wefts(res.draft.drawdown);\n        res.pedal = defs.tile.name;\n        return Promise.resolve(res);\n      }\n    }\n    mappings.addOperation(tile);\n\n    this.draftClassification.push(\n      {category: 'structure',\n      dx: \"0-1 input, 1 output, algorithmically generates weave structures based on parameters\",\n      ops: [tabby, twill, satin, waffle, random]}\n    );\n\n    this.draftClassification.push(\n      { category: 'custom structure',\n        dx: \"custom structures loaded from the Mixer\",\n        ops: []\n      }\n    );\n\n    this.draftClassification.push(\n      {category: 'transformation',\n      dx: \"1 input, 1 output, applies an operation to the input that transforms it in some way\",\n      ops: [invert, flipx, flipy, shiftx, shifty, rotate, slope, stretch, symm, tile]}\n    );\n\n    // //test this\n    // console.log(this.oss.getOp('germanify'));\n    // const germanify = this.pedalOps.addOperation(playerOpFromTree( this.oss.getOp('germanify')));\n    \n    console.log('pedal ops added');\n\n    pedals.on('pedal-step', (id) => this.onPedal(id));\n\n    pedals.on('pedal-added', (n) => {\n      if (n == 1) {\n        mappings.pair(0, 'forward');\n        console.log(\"pedals mapping\", mappings);\n      } else if (n == 2) {\n      //   if (mappings.pedalIsMapped(0)) mappings.unmap(0);\n      //   mappings[0] = this.seq;\n      //   mappings[1] = this.seq;\n      //   this.seq.addPedals(0, 1);\n      //   console.log(\"pedals mapping\", mappings);\n      }\n    })\n  }\n\n  get readyToWeave() {  // need either one pedal forward or one pedal reverse, in order to progress through draft\n    return (this.pedals.readyToWeave && \n      (this.mappings.opIsMapped('forward') || this.mappings.opIsMapped('reverse') || this.seq.readyToWeave)\n    );\n  }\n\n  get weaving() {\n    return this.pedals.active_draft.val;\n  }\n  get draft() {\n    return this.state.draft;\n  }\n\n  hasCustomStructure(d: Draft): boolean {\n    let ops = this.draftClassification.filter((c) => c.category == \"custom structure\")[0].ops;\n    console.log(ops);\n    if (ops.length == 0) return false;\n    return ops\n      .map((el) => { return el.struct_id == d.id})\n      .reduce((a, b) => { return a || b; });\n  }\n\n  setDraft(d: Draft) {\n    if (!this.hasCustomStructure(d)) {\n      console.log(\"a new structure!\");\n      let structOps = this.draftClassification.filter((c) => c.category == \"custom structure\")[0].ops;\n      let op = this.structureOpFromDraft(d);\n      structOps.push(op);\n      this.mappings.addOperation(op);\n    }\n    this.state.draft = d;\n    this.state.row = 0;\n    // console.log(\"player has active draft\");\n    // console.log(\"draft is \", this.draft);\n    console.log(\"draft set \", this.state);\n  }\n\n  /**\n   * \n   * @param d the Draft to turn into a custom structure Operation\n   */\n  structureOpFromDraft(d: Draft) {\n    let structOp: PlayerOp = {\n      name: d.gen_name,\n      struct_id: d.id,\n      perform: (init: PlayerState) => {\n        let res = copyState(init);\n        res.draft = d;\n        res.row = init.row % wefts(d.drawdown);\n        return Promise.resolve(res);\n      }\n    };\n    return structOp;\n  }\n\n  // e is a string = op.name\n  setPedalOp(e: any, p: Pedal) {\n    console.log(e, p);\n    if (this.mappings.pedalIsPaired(p.id)) {\n      this.mappings.unmap(p.id);\n    }\n    this.mappings.pair(p.id, e);\n    console.log(\"pedals map\", this.mappings);\n  }\n\n  onPedal(id: number) {\n    console.log('player service: pedal ', id);\n    let mapped = this.mappings.getMap(id);\n    // console.log(this.mappings);\n    // console.log(this.seq);\n    if (mapped) {\n      console.log('mapping exists for pedal');\n      mapped.perform(this.state, id)\n      .then((state: PlayerState) => {\n        this.state = copyState(state);\n        console.log(this.state);\n        this.redraw.emit('redraw');\n        if (this.state.weaving) {\n          console.log(\"draft player: sending row\");\n          this.pedals.sendDraftRow(this.currentRow());\n        }\n      });\n    }\n  }\n\n  // compound pedal operations\n  // normal pedal -> op\n  // compound pedal -> Op sequence\n  // if (compound pedal change) {\n      // sequence of operations: [Op, Op, Op]\n      // let finaldraft = starting Draft;\n      // for op in sequence:\n      //   finaldraft = finaldraft.perform(op);\n      // }\n      // do something with finaldraft\n  // }\n\n\n  currentRow() {\n    let {draft, row} = this.state;\n    let draftRow = draft.drawdown[row % wefts(draft.drawdown)];\n    let data = \"\";\n\n    let targetLength = (this.loom.draftTiling ? this.loom.warps : draftRow.length);\n    while (data.length  {\n    //   if (state) {\n    //   }\n    // });\n  }\n}\n\n    \n\n\n\n\n\n\n\n\n\n\n                   \n    \n         results matching \"\"\n        \n    \n    \n        No results matching \"\"\n    \n\n"},"interfaces/PedalEvent.html":{"url":"interfaces/PedalEvent.html","title":"interface - PedalEvent","body":"\n                   \n\n\n\n\n\n\n\n\n\n\n\n\n\n\n  Interfaces\n  \n  PedalEvent\n\n\n\n        \n            Info\n        \n        \n            Source\n        \n\n\n\n    \n        \n            File\n        \n        \n            src/app/player/model/op_mappings.ts\n        \n\n\n            \n                Description\n            \n            \n                things that can happen in response to a pedal\n\n            \n\n\n        \n            Index\n            \n                \n                    \n                        \n                            Properties\n                        \n                    \n                    \n                        \n                            \n                                \n                                            Optional\n                                        \n                                            id\n                                        \n                                \n                                \n                                        \n                                            name\n                                        \n                                \n                                \n                                            Optional\n                                        \n                                            pedal\n                                        \n                                \n                                \n                                        \n                                            perform\n                                        \n                                \n                            \n                        \n                    \n                \n            \n        \n\n\n\n            \n                Properties\n                    \n                        \n                                \n                                    \n                                        \n                                        id\n                                            \n                                                \n                                            \n                                        \n                                    \n                                \n                                \n                                    \n                                        id:         number\n\n                                    \n                                \n\n\n                                    \n                                        \n                                            Type :         number\n\n                                        \n                                    \n\n                                    \n                                        \n                                            Optional\n                                        \n                                    \n\n\n\n\n                        \n                    \n                    \n                        \n                                \n                                    \n                                        \n                                        name\n                                            \n                                                \n                                            \n                                        \n                                    \n                                \n                                \n                                    \n                                        name:         string\n\n                                    \n                                \n\n\n                                    \n                                        \n                                            Type :         string\n\n                                        \n                                    \n\n\n\n\n\n                        \n                    \n                    \n                        \n                                \n                                    \n                                        \n                                        pedal\n                                            \n                                                \n                                            \n                                        \n                                    \n                                \n                                \n                                    \n                                        pedal:         number\n\n                                    \n                                \n\n\n                                    \n                                        \n                                            Type :         number\n\n                                        \n                                    \n\n                                    \n                                        \n                                            Optional\n                                        \n                                    \n\n\n\n\n                        \n                    \n                    \n                        \n                                \n                                    \n                                        \n                                        perform\n                                            \n                                                \n                                            \n                                        \n                                    \n                                \n                                \n                                    \n                                        perform:         function\n\n                                    \n                                \n\n\n                                    \n                                        \n                                            Type :         function\n\n                                        \n                                    \n\n\n\n\n\n                        \n                    \n            \n    \n\n\n    \n        import { Draft } from \"../../core/model/datatypes\";\nimport { wefts } from \"../../core/model/drafts\";\nimport { OpInput, TreeOperation as TreeOp, SingleInlet,\n  BaseOp as Op, BuildableOperation as GenericOp, \n  Seed, Pipe, AllRequired, DraftsOptional, \n  getDefaultParams, \n  ParamValue\n} from \"../../mixer/model/operation\";\nimport { PlayerState, initState, copyState } from \"./state\";\n\nimport { OpSequencer, makeOpSequencer } from \"./sequencer\";\nexport * from \"./sequencer\";\n\nexport interface PlayerOp {\n  id?: number,\n  name: string,\n  struct_id?: number,\n  dx?: string,\n  op?: GenericOp,\n  weavingOnly?: boolean,\n  chain?: boolean,\n  perform: (init: PlayerState) => Promise;\n}\nexport type SingleOp = PlayerOp;\n\n/** @const forward a player-specific function to progress through the draft */\nexport const forward: PlayerOp = {\n  name: 'forward',\n  perform: (init: PlayerState) => { \n    let res = copyState(init);\n    res.row = (init.row+1) % wefts(init.draft.drawdown);\n    res.pedal = 'forward';\n    if (res.weaving) res.numPicks++;\n    return Promise.resolve(res); \n  }\n}\n\n/** @const refresh a player-specific function to progress through the draft (re-sends the row to give more time) */\nexport const refresh: PlayerOp = {\n  name: 'refresh',\n  perform: (init: PlayerState) => { \n    let res = copyState(init);\n    if (res.weaving) res.numPicks++;\n    return Promise.resolve(res);\n  }\n}\n\n/** @const reverse a player-specific function to progress backwards through the draft */\nexport const reverse: PlayerOp = {\n  name: 'reverse',\n  perform: (init: PlayerState) => { \n    let res = copyState(init);\n    res.row = (init.row+wefts(init.draft.drawdown)-1) % wefts(init.draft.drawdown);\n    res.pedal = 'reverse';\n    if (res.weaving) res.numPicks++;\n    return Promise.resolve(res);\n  }\n}\n\nexport function playerOpFrom(op: GenericOp, params?: Array) {\n  // use \"rotate\" op as an example\n  let input_params = params ? params : getDefaultParams(op);\n  let perform;\n  if (op.classifier.type === 'pipe') {\n    const pipeOp = op as Op;\n    perform = function(init: PlayerState) {\n      let res = copyState(init);\n      res.draft = pipeOp.perform(init.draft, input_params);\n      res.row = (init.row) % wefts(res.draft.drawdown);\n      res.pedal = op.name;\n      return Promise.resolve(res);\n    }\n  } else if (op.classifier.type === 'seed') {\n    const seedOp = op as Op;\n    perform = function(init: PlayerState) {\n      let res = copyState(init);\n      res.draft = seedOp.perform(input_params);\n      res.row = (init.row) % wefts(res.draft.drawdown);\n      res.pedal = op.name;\n      return Promise.resolve(res);\n    }\n  }\n  \n  /** @TODO */\n  var p: PlayerOp = { \n    name: op.name,\n    dx: op.dx,\n    perform: perform\n  }\n  return p;\n}\n\n\n/** \n * @type \n * a TreeOperation is compatible with the player if it takes one or zero draft inputs \n * and outputs one draft.\n */\ntype PlayableTreeOp = TreeOp & \n  ( { inlets: [ SingleInlet ] } | \n    { inlets: [] });\n\n/** @function playerOpFromTree (untested) */\nfunction playerOpFromTree(op: PlayableTreeOp) {\n  let perform: PlayerOp[\"perform\"];\n  let param_input: OpInput = { op_name: op.name, drafts: [], params: getDefaultParams(op), inlet: -1 }\n  if (op.inlets.length == 0) {\n    perform = function(init: PlayerState) {\n      return op.perform([param_input]).then((output) => {\n        return { \n          draft: output[0], \n          row: init.row, \n          weaving: init.weaving, \n          pedal: op.name, \n          numPicks: init.numPicks \n        };\n      });\n    }\n  } else {\n    perform = function(init: PlayerState) {\n      let draft_input: OpInput = { op_name: 'child', drafts: [init.draft], params: [], inlet: 0}\n      return op.perform([param_input, draft_input]).then((output) => {\n        return { \n          draft: output[0], \n          row: init.row, \n          weaving: init.weaving,\n          pedal: op.name,\n          numPicks: init.numPicks };\n      });\n    }\n  }\n\n  var p: PlayerOp = { \n    name: op.name,\n    perform: perform\n  }\n  return p;\n}\n\n/** things that can happen in response to a pedal */\nexport interface PedalEvent {\n  id?: number,\n  pedal?: number,\n  name: string\n  perform: (init: PlayerState, ...args) => Promise;\n}\n\n/** \n * Basic combination: \n *  - 1 pedal, 1 operation\n *  - if pedal, then operation perform() \n * @param pedal ID number of pedal\n * @param op    ID number of Operation (assigned in Draft Player service)\n */\nexport interface PairedOp extends PedalEvent {\n  pedal:  number,\n  op:     PlayerOp,\n}\n\n// this ...args thing is such a hack\nexport function makePairedOp(p: number, op: PlayerOp): PairedOp {\n  let jankPerform = (init: PlayerState, ...args) => {\n    return op.perform(init);\n  }\n  return {\n    pedal: p,\n    name: op.name,\n    op: op,\n    perform: jankPerform\n  }\n}\n\n/**\n * Op chain:\n * - 1 pedal, multiple operations in a chain (array)\n * - if pedal, perform() each Op in sequence\n * @param pedal ID number of pedals\n * @param ops   array of Op ID numbers to execute in order\n */\nexport interface ChainOp extends PedalEvent{\n  pedal:  number,\n  ops:    Array,\n}\n\nexport function makeBlankChainOp(p?: number): ChainOp {\n  let res: ChainOp = {\n    pedal: -1,\n    name: \"\",\n    ops: [],\n    perform: (init: PlayerState, ...args) => {return Promise.resolve(init);}\n  }\n  \n  if (p) res.pedal = p;\n  return res;\n}\n\nexport function makeChainOp(ops: Array, p?: number): ChainOp {\n  let res = makeBlankChainOp(p);\n  res.name = \"ch\";\n  for (let o of ops) {\n    res.name += \"-\" + o.name;\n  }\n\n  res.ops = ops;\n  res.perform = (init: PlayerState, ...args) => {\n    let newState = copyState(init);\n    newState.pedal = \"ch\";\n    let d: Draft = init.draft;\n    for (let o of ops) {\n      if (o.op.classifier.type == 'seed') {\n        let base_op = o.op as Op;\n        d = base_op.perform(getDefaultParams(base_op));\n      } else if (o.op.classifier.type == 'pipe') {\n        let base_op = o.op as Op;\n        d = base_op.perform(d, getDefaultParams(base_op));\n      }\n      newState.pedal += \"-\" + o.name;\n    }\n\n    newState.draft = d;\n\n    return Promise.resolve(newState);\n  }\n\n  console.log('op chain: ', res);\n\n  return res;\n}\n\nexport type PedalOpMapping = Array;// & {\n//   [id: number]: PedalAction\n// }\n\nexport type MappingShapes = {\n  'pairing': PairedOp,\n  'chain': ChainOp,\n  'sequencer': OpSequencer\n};\n\nexport type PedalAction = MappingShapes[keyof MappingShapes];\n\nexport type MappingType = 'pairing' | 'chain' | 'sequencer';\n    \n\n\n\n\n\n\n\n\n\n                   \n    \n         results matching \"\"\n        \n    \n    \n        No results matching \"\"\n    \n\n"},"classes/PedalStatus.html":{"url":"classes/PedalStatus.html","title":"class - PedalStatus","body":"\n                   \n\n\n\n\n\n\n\n\n\n\n\n\n\n  Classes\n  PedalStatus\n\n\n\n        \n            Info\n        \n        \n            Source\n        \n\n\n\n    \n        \n            File\n        \n        \n            src/app/player/provider/pedals.service.ts\n        \n\n\n            \n                Description\n            \n            \n                Just a wrapper for how the database arranges the pedals +\nloom information into nodes\n\n            \n\n            \n                Extends\n            \n            \n                        EventEmitter\n            \n\n\n\n            \n    Index\n    \n        \n                \n                    \n                        Properties\n                    \n                \n                \n                    \n                        \n                            \n                                active_draft\n                            \n                            \n                                loom_online\n                            \n                            \n                                loom_ready\n                            \n                            \n                                num_pedals\n                            \n                            \n                                num_picks\n                            \n                            \n                                num_v_pedals\n                            \n                            \n                                pedal_array\n                            \n                            \n                                pedal_states\n                            \n                            \n                                pi_online\n                            \n                            \n                                pick_data\n                            \n                            \n                                v_pedal_array\n                            \n                            \n                                v_pedal_states\n                            \n                            \n                                vacuum_on\n                            \n                        \n                    \n                \n\n                \n                    \n                        Methods\n                    \n                \n                \n                    \n                        \n                            \n                                toString\n                            \n                        \n                    \n                \n\n\n\n\n\n        \n    \n\n\n            \n    Constructor\n        \n            \n                \n                    \nconstructor(db: Database)\n                    \n                \n                        \n                            \n                                Defined in src/app/player/provider/pedals.service.ts:48\n                            \n                        \n\n                \n                    \n                            \n                                    Parameters :\n                                    \n                                        \n                                            \n                                                Name\n                                                    Type\n                                                Optional\n                                            \n                                        \n                                        \n                                                \n                                                        db\n                                                  \n                                                        \n                                                                    Database\n                                                        \n                                                  \n                                                    \n                                                            No\n                                                    \n                                                    \n                                                \n                                        \n                                    \n                            \n                    \n                \n            \n        \n\n\n            \n    \n    \n        Properties\n    \n    \n        \n            \n                \n                    \n                    \n                        active_draft\n                        \n                    \n                \n            \n                \n                    \n                        Type :         DBWriter\n\n                    \n                \n                    \n                        \n                                Defined in src/app/player/provider/pedals.service.ts:38\n                        \n                    \n\n\n        \n    \n    \n        \n            \n                \n                    \n                    \n                        loom_online\n                        \n                    \n                \n            \n                \n                    \n                        Type :         DBListener\n\n                    \n                \n                    \n                        \n                                Defined in src/app/player/provider/pedals.service.ts:34\n                        \n                    \n\n\n        \n    \n    \n        \n            \n                \n                    \n                    \n                        loom_ready\n                        \n                    \n                \n            \n                \n                    \n                        Type :         DBListener\n\n                    \n                \n                    \n                        \n                                Defined in src/app/player/provider/pedals.service.ts:36\n                        \n                    \n\n\n        \n    \n    \n        \n            \n                \n                    \n                    \n                        num_pedals\n                        \n                    \n                \n            \n                \n                    \n                        Type :         DBListener\n\n                    \n                \n                    \n                        \n                                Defined in src/app/player/provider/pedals.service.ts:42\n                        \n                    \n\n\n        \n    \n    \n        \n            \n                \n                    \n                    \n                        num_picks\n                        \n                    \n                \n            \n                \n                    \n                        Type :         DBWriter\n\n                    \n                \n                    \n                        \n                                Defined in src/app/player/provider/pedals.service.ts:39\n                        \n                    \n\n\n        \n    \n    \n        \n            \n                \n                    \n                    \n                        num_v_pedals\n                        \n                    \n                \n            \n                \n                    \n                        Type :         DBTwoWay\n\n                    \n                \n                    \n                        \n                                Defined in src/app/player/provider/pedals.service.ts:46\n                        \n                    \n\n\n        \n    \n    \n        \n            \n                \n                    \n                    \n                        pedal_array\n                        \n                    \n                \n            \n                \n                    \n                        Type :         DBListenerArray\n\n                    \n                \n                    \n                        \n                                Defined in src/app/player/provider/pedals.service.ts:44\n                        \n                    \n\n\n        \n    \n    \n        \n            \n                \n                    \n                    \n                        pedal_states\n                        \n                    \n                \n            \n                \n                    \n                        Type :         DBListener\n\n                    \n                \n                    \n                        \n                                Defined in src/app/player/provider/pedals.service.ts:43\n                        \n                    \n\n\n        \n    \n    \n        \n            \n                \n                    \n                    \n                        pi_online\n                        \n                    \n                \n            \n                \n                    \n                        Type :         OnlineStatus\n\n                    \n                \n                    \n                        \n                                Defined in src/app/player/provider/pedals.service.ts:33\n                        \n                    \n\n\n        \n    \n    \n        \n            \n                \n                    \n                    \n                        pick_data\n                        \n                    \n                \n            \n                \n                    \n                        Type :         DBWriter\n\n                    \n                \n                    \n                        \n                                Defined in src/app/player/provider/pedals.service.ts:40\n                        \n                    \n\n\n        \n    \n    \n        \n            \n                \n                    \n                    \n                        v_pedal_array\n                        \n                    \n                \n            \n                \n                    \n                        Type :         DBTwoWayArray\n\n                    \n                \n                    \n                        \n                                Defined in src/app/player/provider/pedals.service.ts:48\n                        \n                    \n\n\n        \n    \n    \n        \n            \n                \n                    \n                    \n                        v_pedal_states\n                        \n                    \n                \n            \n                \n                    \n                        Type :         DBTwoWay\n\n                    \n                \n                    \n                        \n                                Defined in src/app/player/provider/pedals.service.ts:47\n                        \n                    \n\n\n        \n    \n    \n        \n            \n                \n                    \n                    \n                        vacuum_on\n                        \n                    \n                \n            \n                \n                    \n                        Type :         DBListener\n\n                    \n                \n                    \n                        \n                                Defined in src/app/player/provider/pedals.service.ts:35\n                        \n                    \n\n\n        \n    \n\n\n            \n    \n    \n        Methods\n    \n    \n        \n            \n                \n                    \n                    \n                        toString\n                        \n                    \n                \n            \n            \n                \ntoString()\n                \n            \n\n\n            \n                \n                    Defined in src/app/player/provider/pedals.service.ts:105\n                \n            \n\n\n            \n                \n\n                    \n                        Returns :         string\n\n                    \n                \n            \n        \n    \n\n\n\n\n\n\n    \n\n\n    \n        import { Injectable } from '@angular/core';\nimport { WeavingPick } from '../model/player';\nimport { EventEmitter } from 'events';\nimport { getDatabase } from \"firebase/database\";\nimport { Database } from '@angular/fire/database';\nimport { NodeParams,\n  DBListener, OnlineStatus, DBWriter, \n  DBListenerArray, DBTwoWayArray, DBTwoWay } from '../model/dbnodes';\n\n/**\n * The Pedals service is in charge of updating the database \n * connections to communicate with the loom hardware. In AdaCAD, \n * its main responsibility is to keep an up-to-date list of the pedals\n * and when they get stepped on; as well as any other hardware \n * statuses.\n */\n\nexport interface Pedal {\n  id: number,\n  name: string,\n  u_name?: string,\n  key: string,\n  dbnode: DBListener | DBTwoWay,\n  state: any,\n  // op?: Operation\n}\n\n/** \n * Just a wrapper for how the database arranges the pedals + \n * loom information into nodes\n */\nexport class PedalStatus extends EventEmitter {\n  pi_online: OnlineStatus;     // is the pi online?\n  loom_online: DBListener;   // is the loom online?\n  vacuum_on: DBListener;     // is the loom running? (vacuum pump running)\n  loom_ready: DBListener;\n\n  active_draft: DBWriter;\n  num_picks: DBWriter;\n  pick_data: DBWriter;\n\n  num_pedals: DBListener;\n  pedal_states: DBListener;\n  pedal_array: DBListenerArray;\n\n  num_v_pedals: DBTwoWay;\n  v_pedal_states: DBTwoWay;\n  v_pedal_array: DBTwoWayArray;\n\n  constructor(db: Database) {\n    super();\n    const defaults = {\n      active_draft: false,\n      num_picks: 0,\n      pick_data: false\n    }\n    const listeners = {\n      // pi_online: 'pi-online',\n      loom_online: 'loom-online',\n      vacuum_on: 'vacuum-on',\n      num_pedals: 'num-pedals',\n      pedal_states: 'pedal-states',\n      loom_ready: 'loom-ready'\n    }\n    const writers = {\n      active_draft: 'active-draft',\n      num_picks: 'num-picks',\n      pick_data: 'pick-data'\n    }\n\n    function params(path: string): NodeParams { \n      return { db: db, root: 'pedals/', path: path };\n    };\n\n    this.pi_online = new OnlineStatus(params('pi-online'));\n    // this.pi_online.attach();\n    // this.loom_online = new DBListener(this.db, 'loom-online');\n\n    for (var l in listeners) {\n      const newL = new DBListener(params(listeners[l]));\n      Object.defineProperty(this, l, { value: newL });\n      // this[l].attach();\n    }\n\n    for (var w in writers) {\n      const newW = new DBWriter({...params(writers[w]), initVal: defaults[w]});\n      // console.log('writer created');\n      Object.defineProperty(this, w, { value: newW });\n      // console.log('writer added to status');\n      this[w].attach();\n      // console.log('writer attached');\n      this[w].setVal(defaults[w]);\n    }\n\n    // set up array of pedal listeners with the length and parent nodes\n    this.pedal_array = new DBListenerArray(this.num_pedals, this.pedal_states);\n\n    // set up virtual pedal nodes, which have their own length\n    // and parent nodes\n    this.num_v_pedals = new DBTwoWay(params('num-v-pedals'));\n    this.v_pedal_states = new DBTwoWay(params('v-pedal-states'));\n    this.v_pedal_array = new DBTwoWayArray(this.num_v_pedals, this.v_pedal_states);\n  }\n\n  toString() {\n    var str = \"\";\n    str += \"'pi-online': \" + this.pi_online.val + \"\\n\";\n    str += \"'loom-online': \" + this.loom_online.val + \"\\n\\n\";\n    str += \"'vacuum-on': \" + this.vacuum_on.val + \"\\n\";\n    str += \"'active-draft': \" + this.active_draft.val + \"\\n\";\n    str += \"'num-pedals': \" + this.num_pedals.val + \"\\n\";\n    return str;\n  }\n}\n\n/**\n * Definition of pedal service\n * @class\n * @event `pedal-added` data: how many pedals\n * @event `pedal-removed` data: how many pedals\n * @event `pedal-step` data: which pedal\n */\n@Injectable({\n  providedIn: 'root'\n})\nexport class PedalsService extends EventEmitter {\n\n  db: Database;\n  dbNodes: Array;\n\n  // status data\n  status: PedalStatus;\n  //  default = {\n  //     pi_online: false,     // is the pi online?\n  //     loom_online: false,   // is the loom online?\n  //     vacuum_on: false,     // is the loom running? (vacuum pump running)\n  //     active_draft: false,\n  //     num_pedals: 0,\n  //     pedal_states: {},\n  //     loom_ready: false     // is the loom requesting a draft row?\n  // };\n  p_pedals: Array = [];\n  v_pedals: Array = [];\n  \n  virtual: boolean = true;  // whether to mix virtual pedals in with the regular pedals array;\n\n  get pedals() { return this.p_pedals.concat(this.v_pedals); }\n\n  constructor() { \n    super();\n    // init: start listening to changes in Firebase DB from the Pi\n    console.log(\"pedals service constructor\");\n    this.db = getDatabase();\n    this.status = new PedalStatus(this.db);\n    // console.log(this.status);\n    \n    // if pi_online = \"true\" at start-up, just make sure\n    console.log(\"are you alive?\");\n    this.pi_online.checkAlive();\n    this.loom_online.attach();\n\n    this.virtualPedals(true);\n    this.loomPedals(false);\n\n    // listens for changes in pi online status\n    // if online, enable everything\n    this.pi_online.on('change', (state) =>\n      this.loomPedals(state));\n\n    // other listeners\n    this.loom_online.on('change', (state) => \n      this.loomListeners(state));\n\n    /** pedal array listeners */\n    this.p_pedal_array.on('ready', (state) => \n      this.weavingWriters(state)\n    );\n\n    this.p_pedal_array.on('child-added', (newNode) => {\n      console.log('pedals service: pedal added');\n      this.p_pedals.push(this.nodeToPedal(newNode));\n      this.v_pedals.map((el) => { el.id += 1; });\n      this.emit('pedal-added', this.p_pedals.length);\n    });\n\n    this.p_pedal_array.on('child-removed', () => {\n      this.p_pedals.pop();\n      this.v_pedals.map((el) => { el.id -= 1; });\n      this.emit('pedal-removed', this.p_pedals.length);\n    });\n\n    this.p_pedal_array.on('child-change', (e) => {\n      this.p_pedals[e.id].state = e.val;\n      this.emit('pedal-step', e.id);\n      // e = {id: which pedal's id, val: pedal state}\n      // call pedal.execute or whatever it ends up being\n      // this.player.onPedal(e.id, e.val);\n    });\n\n    /** @todo */\n    this.loom_ready.on('change', (state) => {\n      if (state) {\n        // send the next weaving row to DB\n        // update num_picks and pick_data accordingly\n      }\n    });\n    \n    /** virtual pedal listeners */\n    this.v_pedal_array.on('ready', (state) => {\n      console.log(\"weaving writers \", state);\n      this.weavingWriters(state);\n    });\n\n    this.v_pedal_array.on('child-added', (newNode) => {\n      console.log('pedals service: virtual pedal added');\n      let v = this.nodeToPedal(newNode);\n      v.id += this.p_pedals.length - (this.p_pedals.length ? 1 : 0);\n      this.v_pedals.push(v);\n      this.emit('pedal-added', this.v_pedals.length);\n    })\n\n    this.v_pedal_array.on('child-removed', () => {\n      this.v_pedals.pop();\n      this.emit('pedal-removed', this.v_pedals.length);\n    })\n\n    this.v_pedal_array.on('child-change', (e) => {\n      this.v_pedals[e.id].state = e.val;\n      this.emit('pedal-step', e.id);\n      // e = {id: which pedal's id, val: pedal state}\n      // call pedal.execute or whatever it ends up being\n      // this.player.onPedal(e.id, e.val);\n    });\n  }\n\n  /** online status */\n  get pi_online() { return this.status.pi_online; }\n  get loom_online() { return this.status.loom_online; }\n\n  /** weaving statuses */\n  get vacuum_on() { return this.status.vacuum_on; }\n  get active_draft() { return this.status.active_draft; }\n  get loom_ready() { return this.status.loom_ready; }\n  get num_picks() { return this.status.num_picks; }\n  get pick_data() { return this.status.pick_data; }\n\n  /** physical pedals DB nodes */\n  get num_pedals() { return this.status.num_pedals; }\n  get pedal_states() { return this.status.pedal_states; }\n  get p_pedal_array() { return this.status.pedal_array; }\n\n  /** virtual pedals DB nodes */\n  get num_v_pedals() { return this.status.num_v_pedals; }\n  get v_pedal_states() { return this.status.v_pedal_states; }\n  get v_pedal_array() { return this.status.v_pedal_array; }\n  \n  get readyToWeave() { return (this.loom_online.val && (this.p_pedal_array.ready || this.v_pedal_array.ready)); }\n\n  // attach all listeners to other values in DB\n  loomPedals(state: boolean) {\n    state ? this.p_pedal_array.attach() : this.p_pedal_array.detach();\n  }\n\n  /** functions to interact with virtual pedals */\n\n  virtualPedals(state: boolean) {\n    state? this.v_pedal_array.attach() : this.v_pedal_array.detach();\n  }\n\n  addVPedal() {\n    this.v_pedal_array.addNode(false);\n  }\n\n  togglePedalByID(id: number) {\n    console.log(\"toggling virtual pedal \", id);\n    if (id >= 0 && id \n    \n\n\n\n\n\n\n\n\n\n\n                   \n    \n         results matching \"\"\n        \n    \n    \n        No results matching \"\"\n    \n\n"},"injectables/PedalsService.html":{"url":"injectables/PedalsService.html","title":"injectable - PedalsService","body":"\n                   \n\n\n\n\n\n\n\n\n\n  Injectables\n  PedalsService\n\n\n\n        \n            Info\n        \n        \n            Source\n        \n\n\n\n    \n        \n            File\n        \n        \n            src/app/player/provider/pedals.service.ts\n        \n\n\n            \n                Description\n            \n            \n                Definition of pedal service\n\n            \n\n            \n                Extends\n            \n            \n                        EventEmitter\n            \n\n\n            \n    Index\n    \n        \n                \n                    \n                        Properties\n                    \n                \n                \n                    \n                        \n                            \n                                db\n                            \n                            \n                                dbNodes\n                            \n                            \n                                p_pedals\n                            \n                            \n                                status\n                            \n                            \n                                v_pedals\n                            \n                            \n                                virtual\n                            \n                        \n                    \n                \n\n                \n                    \n                        Methods\n                    \n                \n                \n                    \n                        \n                            \n                                addVPedal\n                            \n                            \n                                loomListeners\n                            \n                            \n                                loomPedals\n                            \n                            \n                                nodeToPedal\n                            \n                            \n                                remVPedal\n                            \n                            \n                                sendDraftRow\n                            \n                            \n                                togglePedal\n                            \n                            \n                                togglePedalByID\n                            \n                            \n                                toggleWeaving\n                            \n                            \n                                virtualPedals\n                            \n                            \n                                weavingWriters\n                            \n                        \n                    \n                \n\n\n\n\n\n                    \n                        \n                            Accessors\n                        \n                    \n                    \n                        \n                            \n                                \n                                    pedals\n                                \n                                \n                                    pi_online\n                                \n                                \n                                    loom_online\n                                \n                                \n                                    vacuum_on\n                                \n                                \n                                    active_draft\n                                \n                                \n                                    loom_ready\n                                \n                                \n                                    num_picks\n                                \n                                \n                                    pick_data\n                                \n                                \n                                    num_pedals\n                                \n                                \n                                    pedal_states\n                                \n                                \n                                    p_pedal_array\n                                \n                                \n                                    num_v_pedals\n                                \n                                \n                                    v_pedal_states\n                                \n                                \n                                    v_pedal_array\n                                \n                                \n                                    readyToWeave\n                                \n                            \n                        \n                    \n        \n    \n\n\n            \n    Constructor\n        \n            \n                \n                    \nconstructor()\n                    \n                \n                        \n                            \n                                Defined in src/app/player/provider/pedals.service.ts:147\n                            \n                        \n\n            \n        \n\n\n            \n    \n    \n        Methods\n    \n    \n        \n            \n                \n                    \n                    \n                        addVPedal\n                        \n                    \n                \n            \n            \n                \naddVPedal()\n                \n            \n\n\n            \n                \n                    Defined in src/app/player/provider/pedals.service.ts:270\n                \n            \n\n\n            \n                \n\n                    \n                        Returns :         void\n\n                    \n                \n            \n        \n    \n    \n        \n            \n                \n                    \n                    \n                        loomListeners\n                        \n                    \n                \n            \n            \n                \nloomListeners(state: boolean)\n                \n            \n\n\n            \n                \n                    Defined in src/app/player/provider/pedals.service.ts:293\n                \n            \n\n\n            \n                \n                    handling weaving state DB nodes\n\n\n                    \n                        Parameters :\n                        \n                        \n                            \n                                \n                                    Name\n                                    Type\n                                    Optional\n                                \n                            \n                            \n                                \n                                    state\n                                    \n                                                boolean\n                                    \n\n                                    \n                                        No\n                                    \n\n\n                                \n                            \n                        \n                    \n                    \n                    \n                    \n                        Returns :         void\n\n                    \n                    \n                        \n                    \n                \n            \n        \n    \n    \n        \n            \n                \n                    \n                    \n                        loomPedals\n                        \n                    \n                \n            \n            \n                \nloomPedals(state: boolean)\n                \n            \n\n\n            \n                \n                    Defined in src/app/player/provider/pedals.service.ts:260\n                \n            \n\n\n            \n                \n\n                    \n                        Parameters :\n                        \n                        \n                            \n                                \n                                    Name\n                                    Type\n                                    Optional\n                                \n                            \n                            \n                                \n                                    state\n                                    \n                                                boolean\n                                    \n\n                                    \n                                        No\n                                    \n\n\n                                \n                            \n                        \n                    \n                    \n                    \n                    \n                        Returns :         void\n\n                    \n                    \n                        \n                    \n                \n            \n        \n    \n    \n        \n            \n                \n                    \n                    \n                        nodeToPedal\n                        \n                    \n                \n            \n            \n                \nnodeToPedal(node: DBListener | DBTwoWay)\n                \n            \n\n\n            \n                \n                    Defined in src/app/player/provider/pedals.service.ts:333\n                \n            \n\n\n            \n                \n                    utility function for formatting a DBNode into a Pedal\n\n\n                    \n                        Parameters :\n                        \n                        \n                            \n                                \n                                    Name\n                                    Type\n                                    Optional\n                                \n                            \n                            \n                                \n                                    node\n                                    \n                                            DBListener | DBTwoWay\n                                    \n\n                                    \n                                        No\n                                    \n\n\n                                \n                            \n                        \n                    \n                    \n                    \n                    \n                        Returns :         Pedal\n\n                    \n                    \n                        \n                    \n                \n            \n        \n    \n    \n        \n            \n                \n                    \n                    \n                        remVPedal\n                        \n                    \n                \n            \n            \n                \nremVPedal()\n                \n            \n\n\n            \n                \n                    Defined in src/app/player/provider/pedals.service.ts:288\n                \n            \n\n\n            \n                \n\n                    \n                        Returns :         void\n\n                    \n                \n            \n        \n    \n    \n        \n            \n                \n                    \n                    \n                        sendDraftRow\n                        \n                    \n                \n            \n            \n                \nsendDraftRow(r: WeavingPick)\n                \n            \n\n\n            \n                \n                    Defined in src/app/player/provider/pedals.service.ts:327\n                \n            \n\n\n            \n                \n                    loads pick data into DB\n\n\n                    \n                        Parameters :\n                        \n                        \n                            \n                                \n                                    Name\n                                    Type\n                                    Optional\n                                \n                            \n                            \n                                \n                                    r\n                                    \n                                                WeavingPick\n                                    \n\n                                    \n                                        No\n                                    \n\n\n                                \n                            \n                        \n                    \n                    \n                    \n                    \n                        Returns :         void\n\n                    \n                    \n                        \n                    \n                \n            \n        \n    \n    \n        \n            \n                \n                    \n                    \n                        togglePedal\n                        \n                    \n                \n            \n            \n                \ntogglePedal(p: Pedal)\n                \n            \n\n\n            \n                \n                    Defined in src/app/player/provider/pedals.service.ts:282\n                \n            \n\n\n            \n                \n\n                    \n                        Parameters :\n                        \n                        \n                            \n                                \n                                    Name\n                                    Type\n                                    Optional\n                                \n                            \n                            \n                                \n                                    p\n                                    \n                                                Pedal\n                                    \n\n                                    \n                                        No\n                                    \n\n\n                                \n                            \n                        \n                    \n                    \n                    \n                    \n                        Returns :         void\n\n                    \n                    \n                        \n                    \n                \n            \n        \n    \n    \n        \n            \n                \n                    \n                    \n                        togglePedalByID\n                        \n                    \n                \n            \n            \n                \ntogglePedalByID(id: number)\n                \n            \n\n\n            \n                \n                    Defined in src/app/player/provider/pedals.service.ts:274\n                \n            \n\n\n            \n                \n\n                    \n                        Parameters :\n                        \n                        \n                            \n                                \n                                    Name\n                                    Type\n                                    Optional\n                                \n                            \n                            \n                                \n                                    id\n                                    \n                                                number\n                                    \n\n                                    \n                                        No\n                                    \n\n\n                                \n                            \n                        \n                    \n                    \n                    \n                    \n                        Returns :         void\n\n                    \n                    \n                        \n                    \n                \n            \n        \n    \n    \n        \n            \n                \n                    \n                    \n                        toggleWeaving\n                        \n                    \n                \n            \n            \n                \ntoggleWeaving()\n                \n            \n\n\n            \n                \n                    Defined in src/app/player/provider/pedals.service.ts:317\n                \n            \n\n\n            \n                \n                    lets the Pi know to start weaving\n\n\n                    \n                        Returns :         void\n\n                    \n                \n            \n        \n    \n    \n        \n            \n                \n                    \n                    \n                        virtualPedals\n                        \n                    \n                \n            \n            \n                \nvirtualPedals(state: boolean)\n                \n            \n\n\n            \n                \n                    Defined in src/app/player/provider/pedals.service.ts:266\n                \n            \n\n\n            \n                \n                    functions to interact with virtual pedals\n\n\n                    \n                        Parameters :\n                        \n                        \n                            \n                                \n                                    Name\n                                    Type\n                                    Optional\n                                \n                            \n                            \n                                \n                                    state\n                                    \n                                                boolean\n                                    \n\n                                    \n                                        No\n                                    \n\n\n                                \n                            \n                        \n                    \n                    \n                    \n                    \n                        Returns :         void\n\n                    \n                    \n                        \n                    \n                \n            \n        \n    \n    \n        \n            \n                \n                    \n                    \n                        weavingWriters\n                        \n                    \n                \n            \n            \n                \nweavingWriters(state: boolean)\n                \n            \n\n\n            \n                \n                    Defined in src/app/player/provider/pedals.service.ts:304\n                \n            \n\n\n            \n                \n\n                    \n                        Parameters :\n                        \n                        \n                            \n                                \n                                    Name\n                                    Type\n                                    Optional\n                                \n                            \n                            \n                                \n                                    state\n                                    \n                                                boolean\n                                    \n\n                                    \n                                        No\n                                    \n\n\n                                \n                            \n                        \n                    \n                    \n                    \n                    \n                        Returns :         void\n\n                    \n                    \n                        \n                    \n                \n            \n        \n    \n\n            \n    \n    \n        Properties\n    \n    \n        \n            \n                \n                    \n                    \n                        db\n                        \n                    \n                \n            \n                \n                    \n                        Type :     Database\n\n                    \n                \n                    \n                        \n                                Defined in src/app/player/provider/pedals.service.ts:128\n                        \n                    \n\n\n        \n    \n    \n        \n            \n                \n                    \n                    \n                        dbNodes\n                        \n                    \n                \n            \n                \n                    \n                        Type :     Array\n\n                    \n                \n                    \n                        \n                                Defined in src/app/player/provider/pedals.service.ts:129\n                        \n                    \n\n\n        \n    \n    \n        \n            \n                \n                    \n                    \n                        p_pedals\n                        \n                    \n                \n            \n                \n                    \n                        Type :         Array\n\n                    \n                \n                \n                    \n                        Default value : []\n                    \n                \n                    \n                        \n                                Defined in src/app/player/provider/pedals.service.ts:142\n                        \n                    \n\n\n        \n    \n    \n        \n            \n                \n                    \n                    \n                        status\n                        \n                    \n                \n            \n                \n                    \n                        Type :         PedalStatus\n\n                    \n                \n                    \n                        \n                                Defined in src/app/player/provider/pedals.service.ts:132\n                        \n                    \n\n\n        \n    \n    \n        \n            \n                \n                    \n                    \n                        v_pedals\n                        \n                    \n                \n            \n                \n                    \n                        Type :         Array\n\n                    \n                \n                \n                    \n                        Default value : []\n                    \n                \n                    \n                        \n                                Defined in src/app/player/provider/pedals.service.ts:143\n                        \n                    \n\n\n        \n    \n    \n        \n            \n                \n                    \n                    \n                        virtual\n                        \n                    \n                \n            \n                \n                    \n                        Type :         boolean\n\n                    \n                \n                \n                    \n                        Default value : true\n                    \n                \n                    \n                        \n                                Defined in src/app/player/provider/pedals.service.ts:145\n                        \n                    \n\n\n        \n    \n\n\n            \n    \n        Accessors\n    \n        \n            \n                \n                    \n                        \n                        pedals\n                    \n                \n\n                \n                    \n                        getpedals()\n                    \n                \n                            \n                                \n                                    Defined in src/app/player/provider/pedals.service.ts:147\n                                \n                            \n\n            \n        \n        \n            \n                \n                    \n                        \n                        pi_online\n                    \n                \n\n                \n                    \n                        getpi_online()\n                    \n                \n                            \n                                \n                                    Defined in src/app/player/provider/pedals.service.ts:237\n                                \n                            \n                    \n                        \n                                online status\n\n\n                        \n                    \n\n            \n        \n        \n            \n                \n                    \n                        \n                        loom_online\n                    \n                \n\n                \n                    \n                        getloom_online()\n                    \n                \n                            \n                                \n                                    Defined in src/app/player/provider/pedals.service.ts:238\n                                \n                            \n\n            \n        \n        \n            \n                \n                    \n                        \n                        vacuum_on\n                    \n                \n\n                \n                    \n                        getvacuum_on()\n                    \n                \n                            \n                                \n                                    Defined in src/app/player/provider/pedals.service.ts:241\n                                \n                            \n                    \n                        \n                                weaving statuses\n\n\n                        \n                    \n\n            \n        \n        \n            \n                \n                    \n                        \n                        active_draft\n                    \n                \n\n                \n                    \n                        getactive_draft()\n                    \n                \n                            \n                                \n                                    Defined in src/app/player/provider/pedals.service.ts:242\n                                \n                            \n\n            \n        \n        \n            \n                \n                    \n                        \n                        loom_ready\n                    \n                \n\n                \n                    \n                        getloom_ready()\n                    \n                \n                            \n                                \n                                    Defined in src/app/player/provider/pedals.service.ts:243\n                                \n                            \n\n            \n        \n        \n            \n                \n                    \n                        \n                        num_picks\n                    \n                \n\n                \n                    \n                        getnum_picks()\n                    \n                \n                            \n                                \n                                    Defined in src/app/player/provider/pedals.service.ts:244\n                                \n                            \n\n            \n        \n        \n            \n                \n                    \n                        \n                        pick_data\n                    \n                \n\n                \n                    \n                        getpick_data()\n                    \n                \n                            \n                                \n                                    Defined in src/app/player/provider/pedals.service.ts:245\n                                \n                            \n\n            \n        \n        \n            \n                \n                    \n                        \n                        num_pedals\n                    \n                \n\n                \n                    \n                        getnum_pedals()\n                    \n                \n                            \n                                \n                                    Defined in src/app/player/provider/pedals.service.ts:248\n                                \n                            \n                    \n                        \n                                physical pedals DB nodes\n\n\n                        \n                    \n\n            \n        \n        \n            \n                \n                    \n                        \n                        pedal_states\n                    \n                \n\n                \n                    \n                        getpedal_states()\n                    \n                \n                            \n                                \n                                    Defined in src/app/player/provider/pedals.service.ts:249\n                                \n                            \n\n            \n        \n        \n            \n                \n                    \n                        \n                        p_pedal_array\n                    \n                \n\n                \n                    \n                        getp_pedal_array()\n                    \n                \n                            \n                                \n                                    Defined in src/app/player/provider/pedals.service.ts:250\n                                \n                            \n\n            \n        \n        \n            \n                \n                    \n                        \n                        num_v_pedals\n                    \n                \n\n                \n                    \n                        getnum_v_pedals()\n                    \n                \n                            \n                                \n                                    Defined in src/app/player/provider/pedals.service.ts:253\n                                \n                            \n                    \n                        \n                                virtual pedals DB nodes\n\n\n                        \n                    \n\n            \n        \n        \n            \n                \n                    \n                        \n                        v_pedal_states\n                    \n                \n\n                \n                    \n                        getv_pedal_states()\n                    \n                \n                            \n                                \n                                    Defined in src/app/player/provider/pedals.service.ts:254\n                                \n                            \n\n            \n        \n        \n            \n                \n                    \n                        \n                        v_pedal_array\n                    \n                \n\n                \n                    \n                        getv_pedal_array()\n                    \n                \n                            \n                                \n                                    Defined in src/app/player/provider/pedals.service.ts:255\n                                \n                            \n\n            \n        \n        \n            \n                \n                    \n                        \n                        readyToWeave\n                    \n                \n\n                \n                    \n                        getreadyToWeave()\n                    \n                \n                            \n                                \n                                    Defined in src/app/player/provider/pedals.service.ts:257\n                                \n                            \n\n            \n        \n\n    \n\n\n    \n        import { Injectable } from '@angular/core';\nimport { WeavingPick } from '../model/player';\nimport { EventEmitter } from 'events';\nimport { getDatabase } from \"firebase/database\";\nimport { Database } from '@angular/fire/database';\nimport { NodeParams,\n  DBListener, OnlineStatus, DBWriter, \n  DBListenerArray, DBTwoWayArray, DBTwoWay } from '../model/dbnodes';\n\n/**\n * The Pedals service is in charge of updating the database \n * connections to communicate with the loom hardware. In AdaCAD, \n * its main responsibility is to keep an up-to-date list of the pedals\n * and when they get stepped on; as well as any other hardware \n * statuses.\n */\n\nexport interface Pedal {\n  id: number,\n  name: string,\n  u_name?: string,\n  key: string,\n  dbnode: DBListener | DBTwoWay,\n  state: any,\n  // op?: Operation\n}\n\n/** \n * Just a wrapper for how the database arranges the pedals + \n * loom information into nodes\n */\nexport class PedalStatus extends EventEmitter {\n  pi_online: OnlineStatus;     // is the pi online?\n  loom_online: DBListener;   // is the loom online?\n  vacuum_on: DBListener;     // is the loom running? (vacuum pump running)\n  loom_ready: DBListener;\n\n  active_draft: DBWriter;\n  num_picks: DBWriter;\n  pick_data: DBWriter;\n\n  num_pedals: DBListener;\n  pedal_states: DBListener;\n  pedal_array: DBListenerArray;\n\n  num_v_pedals: DBTwoWay;\n  v_pedal_states: DBTwoWay;\n  v_pedal_array: DBTwoWayArray;\n\n  constructor(db: Database) {\n    super();\n    const defaults = {\n      active_draft: false,\n      num_picks: 0,\n      pick_data: false\n    }\n    const listeners = {\n      // pi_online: 'pi-online',\n      loom_online: 'loom-online',\n      vacuum_on: 'vacuum-on',\n      num_pedals: 'num-pedals',\n      pedal_states: 'pedal-states',\n      loom_ready: 'loom-ready'\n    }\n    const writers = {\n      active_draft: 'active-draft',\n      num_picks: 'num-picks',\n      pick_data: 'pick-data'\n    }\n\n    function params(path: string): NodeParams { \n      return { db: db, root: 'pedals/', path: path };\n    };\n\n    this.pi_online = new OnlineStatus(params('pi-online'));\n    // this.pi_online.attach();\n    // this.loom_online = new DBListener(this.db, 'loom-online');\n\n    for (var l in listeners) {\n      const newL = new DBListener(params(listeners[l]));\n      Object.defineProperty(this, l, { value: newL });\n      // this[l].attach();\n    }\n\n    for (var w in writers) {\n      const newW = new DBWriter({...params(writers[w]), initVal: defaults[w]});\n      // console.log('writer created');\n      Object.defineProperty(this, w, { value: newW });\n      // console.log('writer added to status');\n      this[w].attach();\n      // console.log('writer attached');\n      this[w].setVal(defaults[w]);\n    }\n\n    // set up array of pedal listeners with the length and parent nodes\n    this.pedal_array = new DBListenerArray(this.num_pedals, this.pedal_states);\n\n    // set up virtual pedal nodes, which have their own length\n    // and parent nodes\n    this.num_v_pedals = new DBTwoWay(params('num-v-pedals'));\n    this.v_pedal_states = new DBTwoWay(params('v-pedal-states'));\n    this.v_pedal_array = new DBTwoWayArray(this.num_v_pedals, this.v_pedal_states);\n  }\n\n  toString() {\n    var str = \"\";\n    str += \"'pi-online': \" + this.pi_online.val + \"\\n\";\n    str += \"'loom-online': \" + this.loom_online.val + \"\\n\\n\";\n    str += \"'vacuum-on': \" + this.vacuum_on.val + \"\\n\";\n    str += \"'active-draft': \" + this.active_draft.val + \"\\n\";\n    str += \"'num-pedals': \" + this.num_pedals.val + \"\\n\";\n    return str;\n  }\n}\n\n/**\n * Definition of pedal service\n * @class\n * @event `pedal-added` data: how many pedals\n * @event `pedal-removed` data: how many pedals\n * @event `pedal-step` data: which pedal\n */\n@Injectable({\n  providedIn: 'root'\n})\nexport class PedalsService extends EventEmitter {\n\n  db: Database;\n  dbNodes: Array;\n\n  // status data\n  status: PedalStatus;\n  //  default = {\n  //     pi_online: false,     // is the pi online?\n  //     loom_online: false,   // is the loom online?\n  //     vacuum_on: false,     // is the loom running? (vacuum pump running)\n  //     active_draft: false,\n  //     num_pedals: 0,\n  //     pedal_states: {},\n  //     loom_ready: false     // is the loom requesting a draft row?\n  // };\n  p_pedals: Array = [];\n  v_pedals: Array = [];\n  \n  virtual: boolean = true;  // whether to mix virtual pedals in with the regular pedals array;\n\n  get pedals() { return this.p_pedals.concat(this.v_pedals); }\n\n  constructor() { \n    super();\n    // init: start listening to changes in Firebase DB from the Pi\n    console.log(\"pedals service constructor\");\n    this.db = getDatabase();\n    this.status = new PedalStatus(this.db);\n    // console.log(this.status);\n    \n    // if pi_online = \"true\" at start-up, just make sure\n    console.log(\"are you alive?\");\n    this.pi_online.checkAlive();\n    this.loom_online.attach();\n\n    this.virtualPedals(true);\n    this.loomPedals(false);\n\n    // listens for changes in pi online status\n    // if online, enable everything\n    this.pi_online.on('change', (state) =>\n      this.loomPedals(state));\n\n    // other listeners\n    this.loom_online.on('change', (state) => \n      this.loomListeners(state));\n\n    /** pedal array listeners */\n    this.p_pedal_array.on('ready', (state) => \n      this.weavingWriters(state)\n    );\n\n    this.p_pedal_array.on('child-added', (newNode) => {\n      console.log('pedals service: pedal added');\n      this.p_pedals.push(this.nodeToPedal(newNode));\n      this.v_pedals.map((el) => { el.id += 1; });\n      this.emit('pedal-added', this.p_pedals.length);\n    });\n\n    this.p_pedal_array.on('child-removed', () => {\n      this.p_pedals.pop();\n      this.v_pedals.map((el) => { el.id -= 1; });\n      this.emit('pedal-removed', this.p_pedals.length);\n    });\n\n    this.p_pedal_array.on('child-change', (e) => {\n      this.p_pedals[e.id].state = e.val;\n      this.emit('pedal-step', e.id);\n      // e = {id: which pedal's id, val: pedal state}\n      // call pedal.execute or whatever it ends up being\n      // this.player.onPedal(e.id, e.val);\n    });\n\n    /** @todo */\n    this.loom_ready.on('change', (state) => {\n      if (state) {\n        // send the next weaving row to DB\n        // update num_picks and pick_data accordingly\n      }\n    });\n    \n    /** virtual pedal listeners */\n    this.v_pedal_array.on('ready', (state) => {\n      console.log(\"weaving writers \", state);\n      this.weavingWriters(state);\n    });\n\n    this.v_pedal_array.on('child-added', (newNode) => {\n      console.log('pedals service: virtual pedal added');\n      let v = this.nodeToPedal(newNode);\n      v.id += this.p_pedals.length - (this.p_pedals.length ? 1 : 0);\n      this.v_pedals.push(v);\n      this.emit('pedal-added', this.v_pedals.length);\n    })\n\n    this.v_pedal_array.on('child-removed', () => {\n      this.v_pedals.pop();\n      this.emit('pedal-removed', this.v_pedals.length);\n    })\n\n    this.v_pedal_array.on('child-change', (e) => {\n      this.v_pedals[e.id].state = e.val;\n      this.emit('pedal-step', e.id);\n      // e = {id: which pedal's id, val: pedal state}\n      // call pedal.execute or whatever it ends up being\n      // this.player.onPedal(e.id, e.val);\n    });\n  }\n\n  /** online status */\n  get pi_online() { return this.status.pi_online; }\n  get loom_online() { return this.status.loom_online; }\n\n  /** weaving statuses */\n  get vacuum_on() { return this.status.vacuum_on; }\n  get active_draft() { return this.status.active_draft; }\n  get loom_ready() { return this.status.loom_ready; }\n  get num_picks() { return this.status.num_picks; }\n  get pick_data() { return this.status.pick_data; }\n\n  /** physical pedals DB nodes */\n  get num_pedals() { return this.status.num_pedals; }\n  get pedal_states() { return this.status.pedal_states; }\n  get p_pedal_array() { return this.status.pedal_array; }\n\n  /** virtual pedals DB nodes */\n  get num_v_pedals() { return this.status.num_v_pedals; }\n  get v_pedal_states() { return this.status.v_pedal_states; }\n  get v_pedal_array() { return this.status.v_pedal_array; }\n  \n  get readyToWeave() { return (this.loom_online.val && (this.p_pedal_array.ready || this.v_pedal_array.ready)); }\n\n  // attach all listeners to other values in DB\n  loomPedals(state: boolean) {\n    state ? this.p_pedal_array.attach() : this.p_pedal_array.detach();\n  }\n\n  /** functions to interact with virtual pedals */\n\n  virtualPedals(state: boolean) {\n    state? this.v_pedal_array.attach() : this.v_pedal_array.detach();\n  }\n\n  addVPedal() {\n    this.v_pedal_array.addNode(false);\n  }\n\n  togglePedalByID(id: number) {\n    console.log(\"toggling virtual pedal \", id);\n    if (id >= 0 && id \n    \n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n                   \n    \n         results matching \"\"\n        \n    \n    \n        No results matching \"\"\n    \n\n"},"classes/Pipe.html":{"url":"classes/Pipe.html","title":"class - Pipe","body":"\n                   \n\n\n\n\n\n\n\n\n\n\n\n\n\n  Classes\n  Pipe\n\n\n\n        \n            Info\n        \n        \n            Source\n        \n\n\n\n    \n        \n            File\n        \n        \n            src/app/mixer/model/operation/topology.ts\n        \n\n\n            \n                Description\n            \n            \n                Operation that takes one input and generates one output draft.\n\nINPUT: exactly one Draft\nOUTPUT: exactly one Draft\n\n\n            \n\n\n            \n                Implements\n            \n            \n                            TopologyDef\n            \n\n\n            \n    Index\n    \n        \n                \n                    \n                        Properties\n                    \n                \n                \n                    \n                        \n                            \n                                input\n                            \n                            \n                                output\n                            \n                            \n                                type\n                            \n                        \n                    \n                \n\n\n\n\n\n\n        \n    \n\n\n\n            \n    \n    \n        Properties\n    \n    \n        \n            \n                \n                    \n                    \n                        input\n                        \n                    \n                \n            \n                \n                    \n                        Type :         Draft\n\n                    \n                \n                    \n                        \n                                Defined in src/app/mixer/model/operation/topology.ts:56\n                        \n                    \n\n\n        \n    \n    \n        \n            \n                \n                    \n                    \n                        output\n                        \n                    \n                \n            \n                \n                    \n                        Type :         Draft\n\n                    \n                \n                    \n                        \n                                Defined in src/app/mixer/model/operation/topology.ts:56\n                        \n                    \n\n\n        \n    \n    \n        \n            \n                \n                    \n                    \n                        type\n                        \n                    \n                \n            \n                    \n                        \n                                Defined in src/app/mixer/model/operation/topology.ts:56\n                        \n                    \n\n\n        \n    \n\n\n\n\n\n\n\n\n    \n\n\n    \n        import { Draft } from \"../../../core/model/datatypes\";\nimport { ParamValue, OperationParam as OpParam, getParamValues } from \"./params\";\nimport { OperationInlet as OpInlet, InletDrafts } from \"./inlets\";\n\n/**\n* At its heart, an Operation is a very fancy function that outputs a Draft or several Drafts.\n* The function itself is perform(), and the Operation can take inputs in the form of \n* Drafts (inlets) or Parameters (params).\n*/\n\n/** \n* Types that an Operation's perform() function can handlle as input/output\n*/\n\n/** @type Union of types that can serve as input to Operation perform() functions. */\nexport type PerformDraftInput = InletDrafts | Array | Draft | null;\n\ntype MultiDraftInput = InletDrafts | Array;\n\n/** @type Union of types that Operation perform() functions can output. */\nexport type PerformOutput = Array | Draft;\n\n/**\n * OPERATION TOPOLOGY\n * Topology refers to the shape of the Operation in terms of its\n * number of input and output Drafts. Classifies Operations.\n */\n\nexport const TopologyName = {\n  pipe: 'pipe', \n  seed: 'seed', \n  merge: 'merge', \n  branch: 'branch', \n  bus: 'bus'\n} as const;\nexport type TopologyName = keyof typeof TopologyName;\n\ninterface TopologyDef { type: TopologyName; input: PerformDraftInput; output: PerformOutput; };\n\n/**\n* @class\n* Operation that can generate a draft with no inputs, may take an optional input\n* @method perform OpPerform function: \n* - INPUT: zero or one Draft\n* - OUTPUT: exactly one Draft\n*/\nexport class Seed implements TopologyDef { type: 'seed'; input: Draft | null; output: Draft; };\n\n/**\n* @class\n* Operation that takes one input and generates one output draft. \n* @method perform OpPerform function: \n* - INPUT: exactly one Draft\n* - OUTPUT: exactly one Draft\n*/\nexport class Pipe implements TopologyDef { type: 'pipe'; input: Draft; output: Draft; };\n\n/**\n* @class\n* Operation that takes many (N) inputs and generates one output draft.\n* @method perform OpPerform function: \n* - INPUT: Array of Drafts\n* - OUTPUT: exactly one Draft\n*/\nexport class Merge implements TopologyDef { type: 'merge'; input: InletDrafts | Array; output: Draft; };\n\n/**\n* @class\n* Operation that takes one input and generates many (N) output drafts.\n* @method perform OpPerform function:\n* - INPUT: exactly one Draft\n* - OUTPUT: Array of Drafts\n*/\nexport class Branch implements TopologyDef { type: 'branch'; input: Draft; output: Array; };\n\n/**\n* CURRENTLY UNUSED\n* @class\n* Operation that takes many (N) inputs and generates many (M) output drafts.\n* Number of inputs does not necessarily match number of outputs (N ?= M).\n* @method perform OpPerform function:  \n* - INPUT: Array of Drafts\n* - OUTPUT: Array of Drafts\n*/\nexport class Bus implements TopologyDef { type: 'bus'; input: Array | InletDrafts; output: Array; };\n\ntype TopologyIndex = {\n  'seed': Seed,\n  'pipe': Pipe,\n  'merge': Merge,\n  'branch': Branch,\n  'bus': Bus\n}\ntype OpTopology = TopologyIndex[TopologyName];\n\n/**\n * OPERATION CONSTRAINT\n * A Constraint on an Operation classifies it based on its\n * input requirements (both Drafts and Params).\n */\n\nexport const ConstraintOptions = {\n  req: 'req', \n  opt: 'opt', \n  none: 'none'\n} as const;\nexport type ConstraintOptions = keyof typeof ConstraintOptions;\n\nexport const ConstraintName = {\n  no_drafts: { input_drafts: 'none', input_params: 'req' }, \n  no_params: { input_drafts: 'req', input_params: 'none' }, \n  drafts_opt: { input_drafts: 'opt', input_params: 'req' }, \n  params_opt: { input_drafts: 'req', input_params: 'opt' }, \n  all_req: {input_drafts: 'req', input_params: 'req' },\n} as const;\ntype ConstraintName = keyof typeof ConstraintName;\n\ntype ConstraintDefs = {\n  [C in keyof typeof ConstraintName]: {\n    constraint: C;\n    input_drafts: typeof ConstraintName[C][\"input_drafts\"];\n    input_params: typeof ConstraintName[C][\"input_params\"];\n  }\n}\n\nexport type NoDrafts = ConstraintDefs[\"no_drafts\"];\nexport type NoParams = ConstraintDefs[\"no_params\"];\nexport type DraftsOptional = ConstraintDefs[\"drafts_opt\"];\nexport type ParamsOptional = ConstraintDefs[\"params_opt\"];\nexport type AllRequired = ConstraintDefs[\"all_req\"];\n\ntype ConstraintIndex = {\n  'no_drafts': NoDrafts, // does not accept input drafts\n  'no_params': NoParams, // does not accept params\n  'drafts_opt': DraftsOptional, // can take no params -- has default values\n  'params_opt': ParamsOptional, // can take zero input drafts\n  'all_req': AllRequired, // both inputs and params required\n}\ntype OpConstraint = ConstraintIndex[ConstraintName]; \n\n/** \n* Generic types for perform() functions, describing options \n* for input draft multiplicity (0, 1, N) and param requirement \n*/\n\ntype NoDraftsPerform = {(params: Array): Topo[\"output\"]};\ntype NoParamsPerform = {(inputs: Topo[\"input\"]): Topo[\"output\"]};\ntype ParamsOptionalPerform = {(inputs: Topo[\"input\"], params?: Array): Topo[\"output\"]}; \ntype DraftsOptionalPerform = {(params: Array, inputs?: Topo[\"input\"]): Topo[\"output\"]};  \ntype AllRequiredPerform = {(inputs: Topo[\"input\"], params: Array): Topo[\"output\"]};  \n\ntype PerformCallSigs = {\n  no_drafts: { [Topo in keyof TopologyIndex]: NoDraftsPerform; },\n  no_params: { [Topo in keyof TopologyIndex]: NoParamsPerform; },\n  drafts_opt: { [Topo in keyof TopologyIndex]: DraftsOptionalPerform; },\n  params_opt: { [Topo in keyof TopologyIndex]: ParamsOptionalPerform; },\n  all_req: { [Topo in keyof TopologyIndex]: AllRequiredPerform; }\n}\n\n/**\n * @interface OpClassifier\n * Key-value pairs for an Operation's Topology and Constraint.\n */\ninterface OpClassifier {\n  type: Topo[\"type\"] | '';\n  input_drafts: Constraint[\"input_drafts\"] | '';\n  input_params: Constraint[\"input_params\"] | '';\n}\n\n/** @type User-defined descriptive strings for any Operation. */\ntype OperationDescriptors = { name: string, displayname: string, dx: string };\n\n/**\n* A standard Operation's metadata -- i.e. everything not the perform() function\n* @param name the internal name of this opearation (CHANGING THESE WILL BREAK LEGACY VERSIONS)\n* @param displayname the name to show upon this operation\n* @param dx the description of this operation\n* @param max_inputs the maximum number of inputs (drafts) allowed directly into this operation\n* @param params the parameters associated with this operation\n* @method perform an OpPerform function\n*/\nexport interface OperationProperties extends OperationDescriptors {\n  max_inputs: number,\n  default_params?: Array;\n  params: Array,\n}\n\n/**\n * @type A function that serves as the perform() method for an Operation. \n * This generic type requires two type parameters:\n * @param Topo one of the PerformInput types\n * @param Constraint one of the PerformOutput types\n *\n * OpPerform to give call signature for perform() function \n * Topo  = Seed | Pipe | Merge | Branch | Bus\n * Constraint = NoDrafts | NoParams | DraftsOptional | ParamsOptional | AllRequired\n */\nexport type OpPerform = PerformCallSigs[Constraint[\"constraint\"]][Topo[\"type\"]];\n// type PerformArgs = Parameters>;\n\n/** TODO doublecheck inlets have been added correctly (fields for input drafts) */\nexport class BaseOp implements OperationProperties {\n  name: string;\n  old_names: Array;\n  displayname: string;\n  dx: string;\n  params: Array;\n  inlets: Array;\n  default_params?: Array;\n  max_inputs: number;\n  classifier: OpClassifier;\n  perform: OpPerform;\n\n  /** @constructor create an Operation using an object literal (keys and values) */\n  constructor (args: OpConstructorArgs);\n  /** @constructor create an Operation using direct arguments in the constructor (values only) */\n  constructor (...args: OpConstructorArray);\n  constructor (name: string, displayname: string, dx: string, perform: OpPerform);\n  constructor (name: string, displayname: string, dx: string, params: Array, perform: OpPerform);\n  constructor (nameOrArgs: any, displayname?: string, dx?: string, performOrParams?: OpPerform | Array, performWithParams?: OpPerform) {\n    // console.log((nameOrArgs.name != undefined));\n    this.classifier = { type: '', input_drafts: '', input_params: '' };\n    if (nameOrArgs.name) {\n      let args = nameOrArgs;\n      this.name = args.name;\n      this.displayname = args.displayname;\n      this.dx = args.dx;\n      this.perform = args.perform;\n      if (args.params) this.params = args.params;\n      else this.params = [];\n      if (args.inlets) this.inlets = args.inlets;\n      else this.inlets = [];\n    } else {\n      this.name = nameOrArgs;\n      this.displayname = displayname;\n      this.dx = dx;\n      if (performWithParams) {\n        let params = > performOrParams;\n        this.params = params;\n        this.default_params = getParamValues(params);\n        this.perform = performWithParams;\n      } else {\n        this.params = [];\n        this.perform = > performOrParams;\n      }\n    }\n  }\n\n  constrain(c: ConstraintName): void {\n    if (c == 'no_drafts') { this.max_inputs = 0; this.inlets = []; }\n    this.classifier.input_drafts = ConstraintName[c][\"input_drafts\"]; \n    this.classifier.input_params = ConstraintName[c][\"input_params\"];\n  }\n\n  type(t: TopologyName): BaseOp {\n    this.classifier.type = t;\n    return this;\n  }\n}\n\ntype ConstructorArgKeysIndex = {\n  [C in keyof ConstraintIndex]: C extends \"no_params\" ? {\n    [T in keyof TopologyIndex]: {\n      name: string, displayname: string, dx: string, old_names: string[],\n      inlets: OpInlet[], perform: OpPerform\n    }\n  } : C extends \"no_drafts\" ? {\n    [T in keyof TopologyIndex]: {\n      name: string, displayname: string, dx: string, old_names: string[],\n      params: OpParam[], perform: OpPerform\n    }\n  } : {\n    [T in keyof TopologyIndex]: {\n      name: string, displayname: string, dx: string, old_names: string[],\n      params: OpParam[], inlets: OpInlet[],\n      perform: OpPerform\n    }\n  }\n}\n\ntype ConstructorArrayIndex = {\n  [C in keyof ConstraintIndex]: C extends \"no_params\" ? {\n    [T in keyof TopologyIndex]: [\n      name: string, displayname: string, dx: string, old_names: string[],\n      inlets: OpInlet[], perform: OpPerform\n    ]\n  } : C extends \"no_drafts\" ? {\n    [T in keyof TopologyIndex]: [\n      name: string, displayname: string, dx: string, old_names: string[],\n      params: OpParam[], perform: OpPerform\n    ]\n  } : {\n    [T in keyof TopologyIndex]: [\n      name: string, displayname: string, dx: string, old_names: string[],\n      params: OpParam[], inlets: OpInlet[],\n      perform: OpPerform\n    ]\n  }\n}\n\ntype OpConstructorArgKeys = \nConstructorArgKeysIndex[Constraint[\"constraint\"]][Topo[\"type\"]];\n\ntype OpConstructorArray = \nConstructorArrayIndex[Constraint[\"constraint\"]][Topo[\"type\"]];\n\ntype OpConstructorArgs = \nOpConstructorArgKeys | OpConstructorArray;\n\n// use factory design pattern to apply classifiers to BaseOp?? Is this too convoluted\n// https://refactoring.guru/design-patterns/abstract-factory/typescript\nclass AbstractOpFactory {\n  NoDrafts(args: OpConstructorArgKeys): BaseOp;\n  NoDrafts(...args: OpConstructorArray): BaseOp;\n  NoDrafts(...args: any) {\n    let op = new BaseOp(...args);\n    op.constrain(\"no_drafts\");\n    return op;\n  }\n\n  NoParams(args: OpConstructorArgKeys): BaseOp;\n  NoParams(...args: OpConstructorArray): BaseOp;\n  NoParams(...args: any) {\n    let op = new BaseOp(...args);\n    op.constrain(\"no_params\");\n    return op;\n  }\n\n  DraftsOptional(args: OpConstructorArgKeys): BaseOp;\n  DraftsOptional(...args: OpConstructorArray): BaseOp;\n  DraftsOptional(...args: any) {\n    let op = new BaseOp(...args);\n    op.constrain(\"drafts_opt\");\n    return op;\n  }\n\n  ParamsOptional(args: OpConstructorArgKeys): BaseOp;\n  ParamsOptional(...args: OpConstructorArray): BaseOp;\n  ParamsOptional(...args: any) {\n    let op = new BaseOp(...args);\n    op.constrain(\"params_opt\");\n    return op;\n  }\n\n  AllRequired(args: OpConstructorArgKeys): BaseOp;\n  AllRequired(...args: OpConstructorArray): BaseOp;\n  AllRequired(...args: any) {\n    let op = new BaseOp(...args);\n    op.constrain(\"all_req\");\n    return op;\n  }\n}\n\n// combine with mix-ins design pattern (link: TypeScript docs website)\nfunction makeTopoFactory(topo: TopologyName) {\n  return class TopologyFactory extends AbstractOpFactory {\n    static base = new AbstractOpFactory();\n    \n    static NoDrafts(args: OpConstructorArgKeys): BaseOp;\n    static NoDrafts(...args: OpConstructorArray): BaseOp;\n    static NoDrafts(...args: any) {\n      return this.base.NoDrafts(...args).type(topo);\n    }\n\n    static NoParams(args: OpConstructorArgKeys): BaseOp;\n    static NoParams(...args: OpConstructorArray): BaseOp;\n    static NoParams(...args: any) {\n      return this.base.NoParams(...args).type(topo);\n    }\n\n    static DraftsOptional(args: OpConstructorArgKeys): BaseOp;\n    static DraftsOptional(...args: OpConstructorArray): BaseOp;\n    static DraftsOptional(...args: any) {\n      return this.base.DraftsOptional(...args).type(topo);\n    }\n\n    static ParamsOptional(args: OpConstructorArgKeys): BaseOp;\n    static ParamsOptional(...args: OpConstructorArray): BaseOp;\n    static ParamsOptional(...args: any) {\n      return this.base.ParamsOptional(...args).type(topo);\n    }\n\n    static AllRequired(args: OpConstructorArgKeys): BaseOp;\n    static AllRequired(...args: OpConstructorArray): BaseOp;\n    static AllRequired(...args: any) {\n      return this.base.AllRequired(...args).type(topo);\n    }\n  }\n}\n\nexport const OpFactories = {\n  Seed: makeTopoFactory(\"seed\"),\n  Pipe: makeTopoFactory(\"pipe\"),\n  Merge: makeTopoFactory(\"merge\"),\n  Branch: makeTopoFactory(\"merge\"),\n  Bus: makeTopoFactory(\"bus\"),\n}\n\n// export const SeedOperation = makeTopoFactory(\"seed\");\n// export const PipeOperation = makeTopoFactory(\"pipe\");\n// export const MergeOperation = makeTopoFactory(\"merge\");\n// export const BranchOperation = makeTopoFactory(\"merge\");\n// export const BusOperation = makeTopoFactory(\"bus\");\n\ntype TopologyOpIndex = {\n  [T in keyof TopologyIndex]: {\n    [C in keyof ConstraintIndex]: BaseOp;\n  }\n}\n\nexport type BuildableOperation = TopologyOpIndex[TopologyName][ConstraintName];\n    \n\n\n\n\n\n\n\n\n\n\n                   \n    \n         results matching \"\"\n        \n    \n    \n        No results matching \"\"\n    \n\n"},"components/PlayerComponent.html":{"url":"components/PlayerComponent.html","title":"component - PlayerComponent","body":"\n                   \n\n\n\n\n\n  Components\n  \n  PlayerComponent\n\n\n\n        \n            Info\n        \n        \n            Source\n        \n        \n            Template\n        \n        \n            Styles\n        \n        \n            DOM Tree\n        \n\n\n\n    \n    File\n\n\n    src/app/player/player.component.ts\n\n\n\n\n\n    \n        Implements\n    \n    \n                    OnInit\n    \n\n\n\n    Metadata\n    \n        \n\n\n\n\n\n\n\n\n\n\n\n            \n                selector\n                app-player\n            \n\n            \n                styleUrls\n                ./player.component.scss\n            \n\n\n\n            \n                templateUrl\n                ./player.component.html\n            \n\n\n\n\n\n\n\n\n        \n    \n\n\n    \n    Index\n    \n        \n                \n                    \n                        Properties\n                    \n                \n                \n                    \n                        \n                            \n                                mixerElement\n                            \n                            \n                                op_sequencer\n                            \n                            \n                                ownElement\n                            \n                            \n                                playOpen\n                            \n                            \n                                    Public\n                                pls\n                            \n                            \n                                weaving_state\n                            \n                        \n                    \n                \n\n                \n                    \n                        Methods\n                    \n                \n                \n                    \n                        \n                            \n                                drawDraft\n                            \n                            \n                                ngAfterViewInit\n                            \n                            \n                                ngOnInit\n                            \n                            \n                                resizeContainer\n                            \n                        \n                    \n                \n\n                \n                    \n                        Inputs\n                    \n                \n                \n                    \n                        \n                            \n                                default_cell\n                            \n                            \n                                draft\n                            \n                        \n                    \n                \n\n\n\n\n        \n    \n\n\n    \n    Constructor\n        \n            \n                \n                    \nconstructor(pls: PlayerService)\n                    \n                \n                        \n                            \n                                Defined in src/app/player/player.component.ts:34\n                            \n                        \n\n                \n                    \n                            \n                                    Parameters :\n                                    \n                                        \n                                            \n                                                Name\n                                                    Type\n                                                Optional\n                                            \n                                        \n                                        \n                                                \n                                                        pls\n                                                  \n                                                        \n                                                                        PlayerService\n                                                        \n                                                  \n                                                    \n                                                            No\n                                                    \n                                                    \n                                                \n                                        \n                                    \n                            \n                    \n                \n            \n        \n\n\n    \n    Inputs\n        \n            \n                \n                    \n                        \n                        default_cell\n                    \n                \n                \n                    \n                        Type :         number\n\n                    \n                \n                        \n                            \n                                    Defined in src/app/player/player.component.ts:19\n                            \n                        \n            \n        \n        \n            \n                \n                    \n                        \n                        draft\n                    \n                \n                \n                    \n                        Type :         Draft\n\n                    \n                \n                        \n                            \n                                    Defined in src/app/player/player.component.ts:20\n                            \n                        \n            \n        \n\n\n\n\n    \n    \n    \n        Methods\n    \n    \n        \n            \n                \n                    \n                    \n                        drawDraft\n                        \n                    \n                \n            \n            \n                \ndrawDraft()\n                \n            \n\n\n            \n                \n                    Defined in src/app/player/player.component.ts:83\n                \n            \n\n\n            \n                \n\n                    \n                        Returns :         void\n\n                    \n                \n            \n        \n    \n    \n        \n            \n                \n                    \n                    \n                        ngAfterViewInit\n                        \n                    \n                \n            \n            \n                \nngAfterViewInit()\n                \n            \n\n\n            \n                \n                    Defined in src/app/player/player.component.ts:47\n                \n            \n\n\n            \n                \n\n                    \n                        Returns :         void\n\n                    \n                \n            \n        \n    \n    \n        \n            \n                \n                    \n                    \n                        ngOnInit\n                        \n                    \n                \n            \n            \n                \nngOnInit()\n                \n            \n\n\n            \n                \n                    Defined in src/app/player/player.component.ts:42\n                \n            \n\n\n            \n                \n\n                    \n                        Returns :         void\n\n                    \n                \n            \n        \n    \n    \n        \n            \n                \n                    \n                    \n                        resizeContainer\n                        \n                    \n                \n            \n            \n                \nresizeContainer()\n                \n            \n\n\n            \n                \n                    Defined in src/app/player/player.component.ts:76\n                \n            \n\n\n            \n                \n\n                    \n                        Returns :         void\n\n                    \n                \n            \n        \n    \n\n    \n    \n    \n        Properties\n    \n    \n        \n            \n                \n                    \n                    \n                        mixerElement\n                        \n                    \n                \n            \n                \n                    \n                        Type :     HTMLElement\n\n                    \n                \n                    \n                        \n                                Defined in src/app/player/player.component.ts:34\n                        \n                    \n\n\n        \n    \n    \n        \n            \n                \n                    \n                    \n                        op_sequencer\n                        \n                    \n                \n            \n                \n                    \n                        Decorators : \n                        \n                        \n                            @ViewChild(OpSequencerComponent)\n                        \n                    \n                \n                    \n                        \n                                Defined in src/app/player/player.component.ts:17\n                        \n                    \n\n\n        \n    \n    \n        \n            \n                \n                    \n                    \n                        ownElement\n                        \n                    \n                \n            \n                \n                    \n                        Type :     HTMLElement\n\n                    \n                \n                    \n                        \n                                Defined in src/app/player/player.component.ts:33\n                        \n                    \n\n\n        \n    \n    \n        \n            \n                \n                    \n                    \n                        playOpen\n                        \n                    \n                \n            \n                \n                    \n                        Type :         boolean\n\n                    \n                \n                \n                    \n                        Default value : true\n                    \n                \n                    \n                        \n                                Defined in src/app/player/player.component.ts:32\n                        \n                    \n\n\n        \n    \n    \n        \n            \n                \n                    \n                    \n                            Public\n                        pls\n                        \n                    \n                \n            \n                \n                    \n                        Type :         PlayerService\n\n                    \n                \n                    \n                        \n                                Defined in src/app/player/player.component.ts:37\n                        \n                    \n\n\n        \n    \n    \n        \n            \n                \n                    \n                    \n                        weaving_state\n                        \n                    \n                \n            \n                \n                    \n                        Decorators : \n                        \n                        \n                            @ViewChild(WeavingStateComponent)\n                        \n                    \n                \n                    \n                        \n                                Defined in src/app/player/player.component.ts:16\n                        \n                    \n\n\n        \n    \n\n\n\n\n\n    \n        import { Component, Input, Output, OnInit, ViewChild} from '@angular/core';\nimport { PlayerService } from './player.service';\n\nimport { OpSequencerComponent } from './op-sequencer/op-sequencer.component';\nimport { WeavingStateComponent } from './weaving-state/weaving-state.component';\n\nimport { Draft } from '../core/model/datatypes';\nimport { wefts, warps, isUp, isSet } from '../core/model/drafts';\n\n@Component({\n  selector: 'app-player',\n  templateUrl: './player.component.html',\n  styleUrls: ['./player.component.scss']\n})\nexport class PlayerComponent implements OnInit {\n  @ViewChild(WeavingStateComponent) weaving_state;\n  @ViewChild(OpSequencerComponent) op_sequencer;\n\n  @Input()  default_cell: number;\n  @Input('draft') active_draft: Draft;\n  // @Input() \n  // get draft_set(): boolean {\n  //   return (this.pls.draft !== null);\n  // };\n\n  // get pls.draft(): Draft { return this._active_draft; }\n  // set pls.draft(value: Draft) {\n  //   this._active_draft = value;\n  // }\n  // private _active_draft: Draft = null;\n\n  playOpen: boolean = true;\n  ownElement: HTMLElement;\n  mixerElement: HTMLElement;\n  \n  constructor(\n    public pls: PlayerService\n  ) { \n\n  }\n\n  ngOnInit(): void {\n    console.log(\"ng on init, pedals: \", this.pls.pedals);\n    /** FOR TESTING ONLY: generate random draft and set it at start-up */\n  }\n\n  ngAfterViewInit() {\n    console.log(\"ng after view init, pedals: \", this.pls.pedals);\n    // const startPattern = this.oss.getOp('tabby');\n    // startPattern.perform([]).then((result) => {\n    //   this.pls.setDraft(result[0]);\n    //   this.drawDraft();\n    // });\n    this.ownElement = document.getElementById('player-container');\n    this.mixerElement = document.querySelector('.mat-drawer-container');\n    console.log(\"init w/ element refs \", this.ownElement, this.mixerElement);\n    // this.draftCanvas =  document.getElementById('active-draft-canvas');\n    // this.cx = this.draftCanvas.getContext(\"2d\");\n    // this.drawDraft(); //force call here because it likely didn't render previously. \n\n    // let expansionPanel = document.querySelector('mat-expansion-panel');\n    // expansionPanel.close();\n\n    this.playOpen = false;\n    this.resizeContainer();\n    // this.drawDraft();\n\n    this.pls.redraw.on('redraw', () => {\n      console.log(\"redrawing \", this.pls.state);\n      // this.drawDraft();\n      this.resizeContainer();\n    });\n\n  }\n\n  resizeContainer() {\n    let h = this.ownElement.getBoundingClientRect().height;\n    let t = document.querySelector(\"app-topbar\").getBoundingClientRect().height;\n    // console.log(\"player height is \" + h.toString());\n    this.mixerElement.style.height = 'calc(100vh - '+ (2.3*h+t).toString() + 'px)';\n  }\n\n  drawDraft() { this.weaving_state.drawDraft(); }\n}\n  \n\n    \n\n    \n        \n  \n    \n      \n        {{ playOpen? 'Close' : 'Open'}} Player\n      \n    \n\n    \n\n      \n        \n      \n      \n      \n\n      \n        \n      \n        -->\n        \n        \n          Draft\n          \n         -->\n      \n    \n\n    \n    \n  \n\n\n\n\n    \n\n    \n                \n                    ./player.component.scss\n                \n                .player { \n  flex-wrap: wrap;\n  display: flex;\n  align-items: flex-start;\n  height: inherit; \n  flex: 1;\n}\n\n.top-aligned {\n  display: flex;\n  flex-direction: row;\n  align-items: flex-start;\n}\n\n.sequencer-block {\n  align-items: flex-start;\n  display: inline-flex;\n  height: inherit;\n  flex: 8;\n}\n\n.op-menu-block {\n  display: block;\n  max-width: 210px;\n}\n\n.first-row, .second-row {\n  flex-basis: 100%;\n}\n\n.break{\n  flex-basis: 100%;\n  border-width: 5px;\n  color: blue;\n}\n\n\n.mat-button {\n  background-color: #ff4081;\n  color: white;\n  width: inherit;\n  margin-left: 10px;\n  margin-right: 10px;\n}\n\n.mat-button.mat-button-disabled {\n  background-color: #fd6d9d;\n  color: rgba(255, 255, 255, 0.50);\n  \n}\n\n.mat-expansion-panel-header, \n.mat-expansion-panel-header.mat-expanded:focus {\n  background: #121f6b;\n}\n\n.mat-expansion-indicator::after {\n  color:#ffffff;\n}\n\n.mat-expansion-panel-body {\n  padding: 0px;\n}\n\n.square-corners {\n  border-radius: 0pt;\n  border-bottom-left-radius: 0pt;\n  border-bottom-right-radius: 0pt;\n  border-top-left-radius: 0pt;\n  border-top-right-radius: 0pt;\n}\n\n.mat-expansion-panel, .mat-accordion, .mat-expansion-panel-header,\n.mat-accordion .mat-expansion-panel:last-of-type, \n.mat-accordion .mat-expansion-panel:first-of-type  {\n  border: #ffffff 1px;\n  border-radius: 0pt;\n  border-bottom-left-radius: 0pt;\n  border-bottom-right-radius: 0pt;\n  border-top-left-radius: 0pt;\n  border-top-right-radius: 0pt;\n  border-bottom: 0pt;\n}\n\n.mat-expansion-panel-header:hover, \n.mat-expansion-panel-header.mat-expanded:hover,\n.mat-expansion-panel:not(.mat-expanded), \n.mat-expansion-panel-header:hover:not([aria-disabled=true])   {\n  background: #566be2;\n}\n\n.mat-expansion-panel-header-title, .mat-expansion-indicator{\n  color: white;\n}\n    \n\n    \n        \n        \n            \n                Legend\n            \n            \n                Html element\n            \n            \n                Component\n            \n            \n                Html element with directive\n            \n        \n    \n\n    \n\n\n\n\n\n\n        var COMPONENT_TEMPLATE = '                    {{ playOpen? \\'Close\\' : \\'Open\\'}} Player                                                                          -->                          Draft                   -->                    '\n    var COMPONENTS = [{'name': 'ConnectionComponent', 'selector': 'app-connection'},{'name': 'DraftdetailComponent', 'selector': 'app-draftdetail'},{'name': 'ImageComponent', 'selector': 'app-image'},{'name': 'InletComponent', 'selector': 'app-inlet'},{'name': 'MixerComponent', 'selector': 'app-mixer'},{'name': 'MixerViewComponent', 'selector': 'app-mixerview'},{'name': 'NoteComponent', 'selector': 'app-note'},{'name': 'OperationComponent', 'selector': 'app-operation'},{'name': 'OpHelpModal', 'selector': 'app-ophelp'},{'name': 'OpsComponent', 'selector': 'app-ops'},{'name': 'OpSequencerComponent', 'selector': 'app-op-sequencer'},{'name': 'PaletteComponent', 'selector': 'app-palette'},{'name': 'ParameterComponent', 'selector': 'app-parameter'},{'name': 'PlayerComponent', 'selector': 'app-player'},{'name': 'SnackbarComponent', 'selector': 'app-snackbar'},{'name': 'SubdraftComponent', 'selector': 'app-subdraft'},{'name': 'VirtualPedalsComponent', 'selector': 'app-virtual-pedals'},{'name': 'WeavingStateComponent', 'selector': 'app-weaving-state'}];\n    var DIRECTIVES = [{'name': 'MarqueeComponent', 'selector': 'app-marquee'},{'name': 'SelectionComponent', 'selector': 'app-selection'}];\n    var ACTUAL_COMPONENT = {'name': 'PlayerComponent'};\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n                   \n    \n         results matching \"\"\n        \n    \n    \n        No results matching \"\"\n    \n\n"},"modules/PlayerModule.html":{"url":"modules/PlayerModule.html","title":"module - PlayerModule","body":"\n                   \n\n\n\n\n    Modules\n    PlayerModule\n\n\n\n    \n        \n\n\n\n\n\ndependencies\n\ndependencies\n\ncluster_PlayerModule\n\n\n\ncluster_PlayerModule_declarations\n\n\n\ncluster_PlayerModule_exports\n\n\n\n\nOpSequencerComponent\n\nOpSequencerComponent\n\n\n\nPlayerModule\n\nPlayerModule\n\nPlayerModule -->\n\nOpSequencerComponent->PlayerModule\n\n\n\n\n\nPlayerComponent\n\nPlayerComponent\n\nPlayerModule -->\n\nPlayerComponent->PlayerModule\n\n\n\n\n\nVirtualPedalsComponent\n\nVirtualPedalsComponent\n\nPlayerModule -->\n\nVirtualPedalsComponent->PlayerModule\n\n\n\n\n\nWeavingStateComponent\n\nWeavingStateComponent\n\nPlayerModule -->\n\nWeavingStateComponent->PlayerModule\n\n\n\n\n\nPlayerComponent \n\nPlayerComponent \n\nPlayerComponent  -->\n\nPlayerModule->PlayerComponent \n\n\n\n\n\n\n    \n    \n    \n        Zoom in\n        Reset\n        Zoom out\n    \n\n\n\n\n\n    \n        Info\n    \n    \n        Source\n    \n\n\n\n    \n\n        \n            File\n        \n        \n            src/app/player/player.module.ts\n        \n\n\n\n\n\n        \n            \n                \n                    Declarations\n                    \n                        \n                            OpSequencerComponent\n                        \n                        \n                            PlayerComponent\n                        \n                        \n                            VirtualPedalsComponent\n                        \n                        \n                            WeavingStateComponent\n                        \n                    \n                \n                \n                    Exports\n                    \n                        \n                            PlayerComponent\n                        \n                    \n                \n            \n        \n\n\n    \n\n\n    \n        import { NgModule } from '@angular/core';\nimport { CommonModule } from '@angular/common';\nimport { CoreModule } from '../core/core.module';\n\nimport { OpSequencerComponent } from './op-sequencer/op-sequencer.component';\nimport { WeavingStateComponent } from './weaving-state/weaving-state.component';\nimport { PlayerComponent } from './player.component';\nimport { VirtualPedalsComponent } from './virtual-pedals/virtual-pedals.component';\n\n@NgModule({\n  declarations: [\n    PlayerComponent,\n    OpSequencerComponent,\n    WeavingStateComponent,\n    VirtualPedalsComponent\n  ],\n  imports: [\n    CommonModule,\n    CoreModule\n  ],\n  exports: [\n    PlayerComponent\n  ],\n})\nexport class PlayerModule { }\n\n    \n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n                   \n    \n         results matching \"\"\n        \n    \n    \n        No results matching \"\"\n    \n\n"},"interfaces/PlayerOp.html":{"url":"interfaces/PlayerOp.html","title":"interface - PlayerOp","body":"\n                   \n\n\n\n\n\n\n\n\n\n\n\n\n\n\n  Interfaces\n  \n  PlayerOp\n\n\n\n        \n            Info\n        \n        \n            Source\n        \n\n\n\n    \n        \n            File\n        \n        \n            src/app/player/model/op_mappings.ts\n        \n\n\n\n\n        \n            Index\n            \n                \n                    \n                        \n                            Properties\n                        \n                    \n                    \n                        \n                            \n                                \n                                            Optional\n                                        \n                                            chain\n                                        \n                                \n                                \n                                            Optional\n                                        \n                                            dx\n                                        \n                                \n                                \n                                            Optional\n                                        \n                                            id\n                                        \n                                \n                                \n                                        \n                                            name\n                                        \n                                \n                                \n                                            Optional\n                                        \n                                            op\n                                        \n                                \n                                \n                                        \n                                            perform\n                                        \n                                \n                                \n                                            Optional\n                                        \n                                            struct_id\n                                        \n                                \n                                \n                                            Optional\n                                        \n                                            weavingOnly\n                                        \n                                \n                            \n                        \n                    \n                \n            \n        \n\n\n\n            \n                Properties\n                    \n                        \n                                \n                                    \n                                        \n                                        chain\n                                            \n                                                \n                                            \n                                        \n                                    \n                                \n                                \n                                    \n                                        chain:         boolean\n\n                                    \n                                \n\n\n                                    \n                                        \n                                            Type :         boolean\n\n                                        \n                                    \n\n                                    \n                                        \n                                            Optional\n                                        \n                                    \n\n\n\n\n                        \n                    \n                    \n                        \n                                \n                                    \n                                        \n                                        dx\n                                            \n                                                \n                                            \n                                        \n                                    \n                                \n                                \n                                    \n                                        dx:         string\n\n                                    \n                                \n\n\n                                    \n                                        \n                                            Type :         string\n\n                                        \n                                    \n\n                                    \n                                        \n                                            Optional\n                                        \n                                    \n\n\n\n\n                        \n                    \n                    \n                        \n                                \n                                    \n                                        \n                                        id\n                                            \n                                                \n                                            \n                                        \n                                    \n                                \n                                \n                                    \n                                        id:         number\n\n                                    \n                                \n\n\n                                    \n                                        \n                                            Type :         number\n\n                                        \n                                    \n\n                                    \n                                        \n                                            Optional\n                                        \n                                    \n\n\n\n\n                        \n                    \n                    \n                        \n                                \n                                    \n                                        \n                                        name\n                                            \n                                                \n                                            \n                                        \n                                    \n                                \n                                \n                                    \n                                        name:         string\n\n                                    \n                                \n\n\n                                    \n                                        \n                                            Type :         string\n\n                                        \n                                    \n\n\n\n\n\n                        \n                    \n                    \n                        \n                                \n                                    \n                                        \n                                        op\n                                            \n                                                \n                                            \n                                        \n                                    \n                                \n                                \n                                    \n                                        op:     GenericOp\n\n                                    \n                                \n\n\n                                    \n                                        \n                                            Type :     GenericOp\n\n                                        \n                                    \n\n                                    \n                                        \n                                            Optional\n                                        \n                                    \n\n\n\n\n                        \n                    \n                    \n                        \n                                \n                                    \n                                        \n                                        perform\n                                            \n                                                \n                                            \n                                        \n                                    \n                                \n                                \n                                    \n                                        perform:         function\n\n                                    \n                                \n\n\n                                    \n                                        \n                                            Type :         function\n\n                                        \n                                    \n\n\n\n\n\n                        \n                    \n                    \n                        \n                                \n                                    \n                                        \n                                        struct_id\n                                            \n                                                \n                                            \n                                        \n                                    \n                                \n                                \n                                    \n                                        struct_id:         number\n\n                                    \n                                \n\n\n                                    \n                                        \n                                            Type :         number\n\n                                        \n                                    \n\n                                    \n                                        \n                                            Optional\n                                        \n                                    \n\n\n\n\n                        \n                    \n                    \n                        \n                                \n                                    \n                                        \n                                        weavingOnly\n                                            \n                                                \n                                            \n                                        \n                                    \n                                \n                                \n                                    \n                                        weavingOnly:         boolean\n\n                                    \n                                \n\n\n                                    \n                                        \n                                            Type :         boolean\n\n                                        \n                                    \n\n                                    \n                                        \n                                            Optional\n                                        \n                                    \n\n\n\n\n                        \n                    \n            \n    \n\n\n    \n        import { Draft } from \"../../core/model/datatypes\";\nimport { wefts } from \"../../core/model/drafts\";\nimport { OpInput, TreeOperation as TreeOp, SingleInlet,\n  BaseOp as Op, BuildableOperation as GenericOp, \n  Seed, Pipe, AllRequired, DraftsOptional, \n  getDefaultParams, \n  ParamValue\n} from \"../../mixer/model/operation\";\nimport { PlayerState, initState, copyState } from \"./state\";\n\nimport { OpSequencer, makeOpSequencer } from \"./sequencer\";\nexport * from \"./sequencer\";\n\nexport interface PlayerOp {\n  id?: number,\n  name: string,\n  struct_id?: number,\n  dx?: string,\n  op?: GenericOp,\n  weavingOnly?: boolean,\n  chain?: boolean,\n  perform: (init: PlayerState) => Promise;\n}\nexport type SingleOp = PlayerOp;\n\n/** @const forward a player-specific function to progress through the draft */\nexport const forward: PlayerOp = {\n  name: 'forward',\n  perform: (init: PlayerState) => { \n    let res = copyState(init);\n    res.row = (init.row+1) % wefts(init.draft.drawdown);\n    res.pedal = 'forward';\n    if (res.weaving) res.numPicks++;\n    return Promise.resolve(res); \n  }\n}\n\n/** @const refresh a player-specific function to progress through the draft (re-sends the row to give more time) */\nexport const refresh: PlayerOp = {\n  name: 'refresh',\n  perform: (init: PlayerState) => { \n    let res = copyState(init);\n    if (res.weaving) res.numPicks++;\n    return Promise.resolve(res);\n  }\n}\n\n/** @const reverse a player-specific function to progress backwards through the draft */\nexport const reverse: PlayerOp = {\n  name: 'reverse',\n  perform: (init: PlayerState) => { \n    let res = copyState(init);\n    res.row = (init.row+wefts(init.draft.drawdown)-1) % wefts(init.draft.drawdown);\n    res.pedal = 'reverse';\n    if (res.weaving) res.numPicks++;\n    return Promise.resolve(res);\n  }\n}\n\nexport function playerOpFrom(op: GenericOp, params?: Array) {\n  // use \"rotate\" op as an example\n  let input_params = params ? params : getDefaultParams(op);\n  let perform;\n  if (op.classifier.type === 'pipe') {\n    const pipeOp = op as Op;\n    perform = function(init: PlayerState) {\n      let res = copyState(init);\n      res.draft = pipeOp.perform(init.draft, input_params);\n      res.row = (init.row) % wefts(res.draft.drawdown);\n      res.pedal = op.name;\n      return Promise.resolve(res);\n    }\n  } else if (op.classifier.type === 'seed') {\n    const seedOp = op as Op;\n    perform = function(init: PlayerState) {\n      let res = copyState(init);\n      res.draft = seedOp.perform(input_params);\n      res.row = (init.row) % wefts(res.draft.drawdown);\n      res.pedal = op.name;\n      return Promise.resolve(res);\n    }\n  }\n  \n  /** @TODO */\n  var p: PlayerOp = { \n    name: op.name,\n    dx: op.dx,\n    perform: perform\n  }\n  return p;\n}\n\n\n/** \n * @type \n * a TreeOperation is compatible with the player if it takes one or zero draft inputs \n * and outputs one draft.\n */\ntype PlayableTreeOp = TreeOp & \n  ( { inlets: [ SingleInlet ] } | \n    { inlets: [] });\n\n/** @function playerOpFromTree (untested) */\nfunction playerOpFromTree(op: PlayableTreeOp) {\n  let perform: PlayerOp[\"perform\"];\n  let param_input: OpInput = { op_name: op.name, drafts: [], params: getDefaultParams(op), inlet: -1 }\n  if (op.inlets.length == 0) {\n    perform = function(init: PlayerState) {\n      return op.perform([param_input]).then((output) => {\n        return { \n          draft: output[0], \n          row: init.row, \n          weaving: init.weaving, \n          pedal: op.name, \n          numPicks: init.numPicks \n        };\n      });\n    }\n  } else {\n    perform = function(init: PlayerState) {\n      let draft_input: OpInput = { op_name: 'child', drafts: [init.draft], params: [], inlet: 0}\n      return op.perform([param_input, draft_input]).then((output) => {\n        return { \n          draft: output[0], \n          row: init.row, \n          weaving: init.weaving,\n          pedal: op.name,\n          numPicks: init.numPicks };\n      });\n    }\n  }\n\n  var p: PlayerOp = { \n    name: op.name,\n    perform: perform\n  }\n  return p;\n}\n\n/** things that can happen in response to a pedal */\nexport interface PedalEvent {\n  id?: number,\n  pedal?: number,\n  name: string\n  perform: (init: PlayerState, ...args) => Promise;\n}\n\n/** \n * Basic combination: \n *  - 1 pedal, 1 operation\n *  - if pedal, then operation perform() \n * @param pedal ID number of pedal\n * @param op    ID number of Operation (assigned in Draft Player service)\n */\nexport interface PairedOp extends PedalEvent {\n  pedal:  number,\n  op:     PlayerOp,\n}\n\n// this ...args thing is such a hack\nexport function makePairedOp(p: number, op: PlayerOp): PairedOp {\n  let jankPerform = (init: PlayerState, ...args) => {\n    return op.perform(init);\n  }\n  return {\n    pedal: p,\n    name: op.name,\n    op: op,\n    perform: jankPerform\n  }\n}\n\n/**\n * Op chain:\n * - 1 pedal, multiple operations in a chain (array)\n * - if pedal, perform() each Op in sequence\n * @param pedal ID number of pedals\n * @param ops   array of Op ID numbers to execute in order\n */\nexport interface ChainOp extends PedalEvent{\n  pedal:  number,\n  ops:    Array,\n}\n\nexport function makeBlankChainOp(p?: number): ChainOp {\n  let res: ChainOp = {\n    pedal: -1,\n    name: \"\",\n    ops: [],\n    perform: (init: PlayerState, ...args) => {return Promise.resolve(init);}\n  }\n  \n  if (p) res.pedal = p;\n  return res;\n}\n\nexport function makeChainOp(ops: Array, p?: number): ChainOp {\n  let res = makeBlankChainOp(p);\n  res.name = \"ch\";\n  for (let o of ops) {\n    res.name += \"-\" + o.name;\n  }\n\n  res.ops = ops;\n  res.perform = (init: PlayerState, ...args) => {\n    let newState = copyState(init);\n    newState.pedal = \"ch\";\n    let d: Draft = init.draft;\n    for (let o of ops) {\n      if (o.op.classifier.type == 'seed') {\n        let base_op = o.op as Op;\n        d = base_op.perform(getDefaultParams(base_op));\n      } else if (o.op.classifier.type == 'pipe') {\n        let base_op = o.op as Op;\n        d = base_op.perform(d, getDefaultParams(base_op));\n      }\n      newState.pedal += \"-\" + o.name;\n    }\n\n    newState.draft = d;\n\n    return Promise.resolve(newState);\n  }\n\n  console.log('op chain: ', res);\n\n  return res;\n}\n\nexport type PedalOpMapping = Array;// & {\n//   [id: number]: PedalAction\n// }\n\nexport type MappingShapes = {\n  'pairing': PairedOp,\n  'chain': ChainOp,\n  'sequencer': OpSequencer\n};\n\nexport type PedalAction = MappingShapes[keyof MappingShapes];\n\nexport type MappingType = 'pairing' | 'chain' | 'sequencer';\n    \n\n\n\n\n\n\n\n\n\n                   \n    \n         results matching \"\"\n        \n    \n    \n        No results matching \"\"\n    \n\n"},"injectables/PlayerService.html":{"url":"injectables/PlayerService.html","title":"injectable - PlayerService","body":"\n                   \n\n\n\n\n\n\n\n\n\n  Injectables\n  PlayerService\n\n\n\n        \n            Info\n        \n        \n            Source\n        \n\n\n\n    \n        \n            File\n        \n        \n            src/app/player/player.service.ts\n        \n\n\n            \n                Description\n            \n            \n                The Draft Player Service is in charge of updating the the global PlayerState and tracking where the weaver is in the draft.\n\n            \n\n\n\n            \n    Index\n    \n        \n                \n                    \n                        Properties\n                    \n                \n                \n                    \n                        \n                            \n                                draftClassification\n                            \n                            \n                                loom\n                            \n                            \n                                    Public\n                                mappings\n                            \n                            \n                                    Public\n                                pedals\n                            \n                            \n                                redraw\n                            \n                            \n                                    Public\n                                seq\n                            \n                            \n                                state\n                            \n                        \n                    \n                \n\n                \n                    \n                        Methods\n                    \n                \n                \n                    \n                        \n                            \n                                changeLoomWidth\n                            \n                            \n                                currentRow\n                            \n                            \n                                hasCustomStructure\n                            \n                            \n                                onPedal\n                            \n                            \n                                setDraft\n                            \n                            \n                                setPedalOp\n                            \n                            \n                                structureOpFromDraft\n                            \n                            \n                                toggleDraftTiling\n                            \n                            \n                                toggleWeaving\n                            \n                        \n                    \n                \n\n\n\n\n\n                    \n                        \n                            Accessors\n                        \n                    \n                    \n                        \n                            \n                                \n                                    readyToWeave\n                                \n                                \n                                    weaving\n                                \n                                \n                                    draft\n                                \n                            \n                        \n                    \n        \n    \n\n\n            \n    Constructor\n        \n            \n                \n                    \nconstructor(pedals: PedalsService, mappings: MappingsService, seq: SequencerService)\n                    \n                \n                        \n                            \n                                Defined in src/app/player/player.service.ts:163\n                            \n                        \n\n                \n                    \n                            \n                                    Parameters :\n                                    \n                                        \n                                            \n                                                Name\n                                                    Type\n                                                Optional\n                                            \n                                        \n                                        \n                                                \n                                                        pedals\n                                                  \n                                                        \n                                                                        PedalsService\n                                                        \n                                                  \n                                                    \n                                                            No\n                                                    \n                                                    \n                                                \n                                                \n                                                        mappings\n                                                  \n                                                        \n                                                                        MappingsService\n                                                        \n                                                  \n                                                    \n                                                            No\n                                                    \n                                                    \n                                                \n                                                \n                                                        seq\n                                                  \n                                                        \n                                                                        SequencerService\n                                                        \n                                                  \n                                                    \n                                                            No\n                                                    \n                                                    \n                                                \n                                        \n                                    \n                            \n                    \n                \n            \n        \n\n\n            \n    \n    \n        Methods\n    \n    \n        \n            \n                \n                    \n                    \n                        changeLoomWidth\n                        \n                    \n                \n            \n            \n                \nchangeLoomWidth(e)\n                \n            \n\n\n            \n                \n                    Defined in src/app/player/player.service.ts:392\n                \n            \n\n\n            \n                \n\n                    \n                        Parameters :\n                        \n                        \n                            \n                                \n                                    Name\n                                    Optional\n                                \n                            \n                            \n                                \n                                    e\n\n                                    \n                                        No\n                                    \n\n\n                                \n                            \n                        \n                    \n                    \n                    \n                    \n                        Returns :         void\n\n                    \n                    \n                        \n                    \n                \n            \n        \n    \n    \n        \n            \n                \n                    \n                    \n                        currentRow\n                        \n                    \n                \n            \n            \n                \ncurrentRow()\n                \n            \n\n\n            \n                \n                    Defined in src/app/player/player.service.ts:367\n                \n            \n\n\n            \n                \n\n                    \n                        Returns :         WeavingPick\n\n                    \n                \n            \n        \n    \n    \n        \n            \n                \n                    \n                    \n                        hasCustomStructure\n                        \n                    \n                \n            \n            \n                \nhasCustomStructure(d: Draft)\n                \n            \n\n\n            \n                \n                    Defined in src/app/player/player.service.ts:282\n                \n            \n\n\n            \n                \n\n                    \n                        Parameters :\n                        \n                        \n                            \n                                \n                                    Name\n                                    Type\n                                    Optional\n                                \n                            \n                            \n                                \n                                    d\n                                    \n                                                Draft\n                                    \n\n                                    \n                                        No\n                                    \n\n\n                                \n                            \n                        \n                    \n                    \n                    \n                    \n                        Returns :         boolean\n\n                    \n                    \n                        \n                    \n                \n            \n        \n    \n    \n        \n            \n                \n                    \n                    \n                        onPedal\n                        \n                    \n                \n            \n            \n                \nonPedal(id: number)\n                \n            \n\n\n            \n                \n                    Defined in src/app/player/player.service.ts:334\n                \n            \n\n\n            \n                \n\n                    \n                        Parameters :\n                        \n                        \n                            \n                                \n                                    Name\n                                    Type\n                                    Optional\n                                \n                            \n                            \n                                \n                                    id\n                                    \n                                                number\n                                    \n\n                                    \n                                        No\n                                    \n\n\n                                \n                            \n                        \n                    \n                    \n                    \n                    \n                        Returns :         void\n\n                    \n                    \n                        \n                    \n                \n            \n        \n    \n    \n        \n            \n                \n                    \n                    \n                        setDraft\n                        \n                    \n                \n            \n            \n                \nsetDraft(d: Draft)\n                \n            \n\n\n            \n                \n                    Defined in src/app/player/player.service.ts:291\n                \n            \n\n\n            \n                \n\n                    \n                        Parameters :\n                        \n                        \n                            \n                                \n                                    Name\n                                    Type\n                                    Optional\n                                \n                            \n                            \n                                \n                                    d\n                                    \n                                                Draft\n                                    \n\n                                    \n                                        No\n                                    \n\n\n                                \n                            \n                        \n                    \n                    \n                    \n                    \n                        Returns :         void\n\n                    \n                    \n                        \n                    \n                \n            \n        \n    \n    \n        \n            \n                \n                    \n                    \n                        setPedalOp\n                        \n                    \n                \n            \n            \n                \nsetPedalOp(e: any, p: Pedal)\n                \n            \n\n\n            \n                \n                    Defined in src/app/player/player.service.ts:325\n                \n            \n\n\n            \n                \n\n                    \n                        Parameters :\n                        \n                        \n                            \n                                \n                                    Name\n                                    Type\n                                    Optional\n                                \n                            \n                            \n                                \n                                    e\n                                    \n                                                any\n                                    \n\n                                    \n                                        No\n                                    \n\n\n                                \n                                \n                                    p\n                                    \n                                                Pedal\n                                    \n\n                                    \n                                        No\n                                    \n\n\n                                \n                            \n                        \n                    \n                    \n                    \n                    \n                        Returns :         void\n\n                    \n                    \n                        \n                    \n                \n            \n        \n    \n    \n        \n            \n                \n                    \n                    \n                        structureOpFromDraft\n                        \n                    \n                \n            \n            \n                \nstructureOpFromDraft(d: Draft)\n                \n            \n\n\n            \n                \n                    Defined in src/app/player/player.service.ts:310\n                \n            \n\n\n            \n                \n\n                    \n                        Parameters :\n                        \n                        \n                            \n                                \n                                    Name\n                                    Type\n                                    Optional\n                                    Description\n                                \n                            \n                            \n                                \n                                    d\n                                    \n                                                Draft\n                                    \n\n                                    \n                                        No\n                                    \n\n\n                                    \n                                        the Draft to turn into a custom structure Operation\n\n                                    \n                                \n                            \n                        \n                    \n                    \n                    \n                    \n                        Returns :         PlayerOp\n\n                    \n                    \n                        \n                    \n                \n            \n        \n    \n    \n        \n            \n                \n                    \n                    \n                        toggleDraftTiling\n                        \n                    \n                \n            \n            \n                \ntoggleDraftTiling(e)\n                \n            \n\n\n            \n                \n                    Defined in src/app/player/player.service.ts:386\n                \n            \n\n\n            \n                \n\n                    \n                        Parameters :\n                        \n                        \n                            \n                                \n                                    Name\n                                    Optional\n                                \n                            \n                            \n                                \n                                    e\n\n                                    \n                                        No\n                                    \n\n\n                                \n                            \n                        \n                    \n                    \n                    \n                    \n                        Returns :         void\n\n                    \n                    \n                        \n                    \n                \n            \n        \n    \n    \n        \n            \n                \n                    \n                    \n                        toggleWeaving\n                        \n                    \n                \n            \n            \n                \ntoggleWeaving()\n                \n            \n\n\n            \n                \n                    Defined in src/app/player/player.service.ts:398\n                \n            \n\n\n            \n                \n\n                    \n                        Returns :         void\n\n                    \n                \n            \n        \n    \n\n            \n    \n    \n        Properties\n    \n    \n        \n            \n                \n                    \n                    \n                        draftClassification\n                        \n                    \n                \n            \n                \n                    \n                        Type :         Array\n\n                    \n                \n                \n                    \n                        Default value : []\n                    \n                \n                    \n                        \n                                Defined in src/app/player/player.service.ts:163\n                        \n                    \n\n\n        \n    \n    \n        \n            \n                \n                    \n                    \n                        loom\n                        \n                    \n                \n            \n                \n                    \n                        Type :         LoomConfig\n\n                    \n                \n                    \n                        \n                                Defined in src/app/player/player.service.ts:161\n                        \n                    \n\n\n        \n    \n    \n        \n            \n                \n                    \n                    \n                            Public\n                        mappings\n                        \n                    \n                \n            \n                \n                    \n                        Type :         MappingsService\n\n                    \n                \n                    \n                        \n                                Defined in src/app/player/player.service.ts:167\n                        \n                    \n\n\n        \n    \n    \n        \n            \n                \n                    \n                    \n                            Public\n                        pedals\n                        \n                    \n                \n            \n                \n                    \n                        Type :         PedalsService\n\n                    \n                \n                    \n                        \n                                Defined in src/app/player/player.service.ts:166\n                        \n                    \n\n\n        \n    \n    \n        \n            \n                \n                    \n                    \n                        redraw\n                        \n                    \n                \n            \n                \n                    \n                        Default value : new EventEmitter()\n                    \n                \n                    \n                        \n                                Defined in src/app/player/player.service.ts:162\n                        \n                    \n\n\n        \n    \n    \n        \n            \n                \n                    \n                    \n                            Public\n                        seq\n                        \n                    \n                \n            \n                \n                    \n                        Type :         SequencerService\n\n                    \n                \n                    \n                        \n                                Defined in src/app/player/player.service.ts:168\n                        \n                    \n\n\n        \n    \n    \n        \n            \n                \n                    \n                    \n                        state\n                        \n                    \n                \n            \n                \n                    \n                        Type :         PlayerState\n\n                    \n                \n                    \n                        \n                                Defined in src/app/player/player.service.ts:160\n                        \n                    \n\n\n        \n    \n\n\n            \n    \n        Accessors\n    \n        \n            \n                \n                    \n                        \n                        readyToWeave\n                    \n                \n\n                \n                    \n                        getreadyToWeave()\n                    \n                \n                            \n                                \n                                    Defined in src/app/player/player.service.ts:269\n                                \n                            \n\n            \n        \n        \n            \n                \n                    \n                        \n                        weaving\n                    \n                \n\n                \n                    \n                        getweaving()\n                    \n                \n                            \n                                \n                                    Defined in src/app/player/player.service.ts:275\n                                \n                            \n\n            \n        \n        \n            \n                \n                    \n                        \n                        draft\n                    \n                \n\n                \n                    \n                        getdraft()\n                    \n                \n                            \n                                \n                                    Defined in src/app/player/player.service.ts:278\n                                \n                            \n\n            \n        \n\n    \n\n\n    \n        import { Injectable} from '@angular/core';\nimport { EventEmitter } from 'events';\nimport { wefts } from '../core/model/drafts';\nimport { Draft } from '../core/model/datatypes';\nimport { BaseOp, BuildableOperation as GenericOp, \n  TreeOperation as TreeOp,\n  Seed, Pipe, DraftsOptional, AllRequired, getDefaultParams,\n  SingleInlet, OpInput\n} from '../mixer/model/operation';\nimport * as defs from '../mixer/model/op_definitions';\nimport { PlayerOp, playerOpFrom, \n  ChainOp, OpSequencer, PairedOp, PedalOpMapping,\n  makePairedOp, makeChainOp, makeOpSequencer,\n  forward, refresh, reverse\n} from './model/op_mappings';\nimport { PlayerState, WeavingPick, copyState, initState } from './model/state';\nimport { MappingsService } from './provider/mappings.service';\nimport { PedalsService, PedalStatus, Pedal } from './provider/pedals.service';\nimport { SequencerService } from './provider/sequencer.service';\n// import { OperationService } from '../mixer/provider/operation.service';\n\nexport interface DraftOperationClassification {\n  category: string,\n  dx: string,\n  ops: Array \n }\n\ninterface LoomConfig {\n  warps: number,\n  draftTiling: boolean\n}\n\n/**\n * @class PedalConfig\n * @desc OLD, UPDATE THIS ---> \n * Represents a set of two-way bindings between a set of Pedals\n * and a set of (Player)Operations. A pedal can only be bound to one\n * Action (a single Op, a chain of Ops, or to control an OpRoulette)\n * @todo The second restriction may change, it might make sense for pedals to\n * get bound to a sequence of operations.\n */\nclass PedalConfig {\n  // numPedals: number;\n  pedals: Array;\n  ops: Array;\n  availPedals: Array;\n  mapping: PedalOpMapping;\n\n  constructor(pedalArray: Array, loadConfig = false) {\n    this.pedals = pedalArray;\n    this.ops = []\n    this.availPedals = pedalArray.map((p) => p.id);\n    this.mapping = [];\n  }\n\n  get numPedals() {\n    return this.pedals.length;\n  }\n\n  get numMappings() {\n    return Object.entries(this.mapping).length;\n  }\n\n  addPedal(p: Pedal) {\n    // this.pedals.push(p);\n    this.availPedals.push(p.id);\n  }\n\n  remPedal() {\n    // this.pedals.pop();\n    this.availPedals.filter((id) => id != this.pedals.length);\n  }\n\n  addOperation(o: PlayerOp, chain?: boolean) {\n    o.id = this.ops.length;\n    this.ops.push(o);\n    if (chain) {\n      o.chain = chain;\n    }\n    // this.unpairedOps.push(o);\n    // console.log(this.ops);\n  }\n\n  pair(pedalId: number, opName: string) {\n    let o = this.ops.findIndex((op) => op.name == opName);\n    // let thisOp = this.unpairedOps.splice(o, 1);\n    let thisOp = this.ops;\n    this.mapping[pedalId] = makePairedOp(pedalId, thisOp[o]); \n  }\n\n  chain(pedalId: number, opName: string) {\n    let o = this.ops[this.ops.findIndex((op) => op.name == opName)];\n    if (this.pedalIsChained(pedalId)) {\n      let curr_ops = ( this.mapping[pedalId]).ops;\n      this.mapping[pedalId] = makeChainOp(curr_ops.concat([o]), pedalId);\n    } else if (this.pedalIsPaired(pedalId)) {\n      let first_op = ( this.mapping[pedalId]).op;\n      this.mapping[pedalId] = makeChainOp([first_op].concat([o]), pedalId);\n    } else {\n      this.mapping[pedalId] = makeChainOp([o], pedalId);\n    }\n  }\n\n  chainToPedal(pedalId: number, ops: Array) {\n    let op_array = ops.map((name) => this.ops[this.ops.findIndex((op) => op.name == name)]);\n    if (this.pedalIsChained(pedalId)) { \n      // if pedal already has a chain, add ops to the chain\n      let curr_ops = ( this.mapping[pedalId]).ops;\n      this.mapping[pedalId] = makeChainOp(curr_ops.concat(op_array), pedalId);\n    } else if (this.pedalIsPaired(pedalId)) {\n      // if pedal is paired, you can turn it into a chain\n      let first_op = ( this.mapping[pedalId]).op;\n      this.mapping[pedalId] = makeChainOp([first_op].concat(op_array), pedalId);\n    } else {\n      // pedal doesn't have anything mapped, just add a new chain\n      this.mapping[pedalId] = makeChainOp(op_array, pedalId);\n    }\n  }\n\n  // will return true if an op is mapped to a pedal in any way\n  opIsMapped(opName: string): boolean {\n    if (this.mapping.filter((m) => m.name.includes(opName)).length > 0) {\n      return true;\n    } else return false;\n  }\n\n  pedalIsMapped(id: number) {\n    return (this.mapping[id]);\n  }\n\n  pedalIsChained(id: number) {\n    if (this.pedalIsMapped(id) && this.mapping[id].name.startsWith('ch')) { return true; }\n    else {return false; }\n  }\n\n  pedalIsPaired(id: number) {\n    return (this.pedalIsMapped(id) && !this.pedalIsChained(id));\n  }\n\n  unpairPedal(id: number) {\n    console.log(`unpairing pedal ${id}`);\n    // let op = this.pairs[id];\n    // this.unpairedOps.splice(op.id, 0, op);\n    delete this.mapping[id];\n  }\n\n  // unpairOp(name: string) {\n  //   let pid = this.opIsPaired(name);\n  //   this.unpairPedal(pid);\n  // }\n}\n\n/**\n * The Draft Player Service is in charge of updating the the global PlayerState and tracking where the weaver is in the draft.\n */\n@Injectable({\n  providedIn: 'root'\n})\nexport class PlayerService {\n  state: PlayerState;\n  loom: LoomConfig;\n  redraw = new EventEmitter();\n  draftClassification: Array = [];\n\n  constructor(\n    public pedals: PedalsService,\n    public mappings: MappingsService,\n    public seq: SequencerService,\n    // private oss: OperationService\n  ) {\n    // this.draft = null; \n    console.log(\"draft player constructor\");\n    // const startPattern = playerOpFrom(defs.tabby);\n    // console.log(startPattern);\n    // startPattern.perform(nullOpInput).then((result) => {\n    //   console.log(result);\n    //   this.setDraft(result[0]);\n    // });\n\n    this.state = initState();\n    this.state.draft = defs.tabby.perform([1]);\n\n    this.loom = { warps: 2640, draftTiling: true };\n\n    // load the draft progress ops\n    mappings.addOperation(forward);\n    mappings.addOperation(refresh);\n    mappings.addOperation(reverse);\n\n    function addOp(op: GenericOp, params?: Array) {\n      let p_op = params ? playerOpFrom(op, params) : playerOpFrom(op);\n      mappings.addOperation(p_op);\n      return p_op;\n    }\n\n    // load ops from the main mixer\n    const tabby = addOp(defs.tabby);\n    const twill = addOp(defs.twill);\n    const satin = addOp(defs.satin);\n    const waffle = addOp(defs.waffle);\n    const basket = addOp(defs.basket);\n    const rib = addOp(defs.rib);\n    const random = addOp(defs.random);\n    const rotate = addOp(defs.rotate);\n    const invert = addOp(defs.invert);\n    const shiftx = addOp(defs.shiftx);\n    const shifty = addOp(defs.shifty);\n    const slope = addOp(defs.slope);\n    const flipx = addOp(defs.flipx);\n    const flipy = addOp(defs.flipy);\n    const symm = addOp(defs.makesymmetric);\n    const stretch = addOp(defs.stretch);\n    const bindweft = addOp(defs.bindweftfloats);\n    const bindwarp = addOp(defs.bindwarpfloats);\n\n    const tile: PlayerOp = {\n      name: defs.tile.name,\n      perform: (init: PlayerState) => {\n        let res = copyState(init);\n        res.draft = defs.tile.perform([init.draft], [2, 2]);\n        res.row = init.row % wefts(res.draft.drawdown);\n        res.pedal = defs.tile.name;\n        return Promise.resolve(res);\n      }\n    }\n    mappings.addOperation(tile);\n\n    this.draftClassification.push(\n      {category: 'structure',\n      dx: \"0-1 input, 1 output, algorithmically generates weave structures based on parameters\",\n      ops: [tabby, twill, satin, waffle, random]}\n    );\n\n    this.draftClassification.push(\n      { category: 'custom structure',\n        dx: \"custom structures loaded from the Mixer\",\n        ops: []\n      }\n    );\n\n    this.draftClassification.push(\n      {category: 'transformation',\n      dx: \"1 input, 1 output, applies an operation to the input that transforms it in some way\",\n      ops: [invert, flipx, flipy, shiftx, shifty, rotate, slope, stretch, symm, tile]}\n    );\n\n    // //test this\n    // console.log(this.oss.getOp('germanify'));\n    // const germanify = this.pedalOps.addOperation(playerOpFromTree( this.oss.getOp('germanify')));\n    \n    console.log('pedal ops added');\n\n    pedals.on('pedal-step', (id) => this.onPedal(id));\n\n    pedals.on('pedal-added', (n) => {\n      if (n == 1) {\n        mappings.pair(0, 'forward');\n        console.log(\"pedals mapping\", mappings);\n      } else if (n == 2) {\n      //   if (mappings.pedalIsMapped(0)) mappings.unmap(0);\n      //   mappings[0] = this.seq;\n      //   mappings[1] = this.seq;\n      //   this.seq.addPedals(0, 1);\n      //   console.log(\"pedals mapping\", mappings);\n      }\n    })\n  }\n\n  get readyToWeave() {  // need either one pedal forward or one pedal reverse, in order to progress through draft\n    return (this.pedals.readyToWeave && \n      (this.mappings.opIsMapped('forward') || this.mappings.opIsMapped('reverse') || this.seq.readyToWeave)\n    );\n  }\n\n  get weaving() {\n    return this.pedals.active_draft.val;\n  }\n  get draft() {\n    return this.state.draft;\n  }\n\n  hasCustomStructure(d: Draft): boolean {\n    let ops = this.draftClassification.filter((c) => c.category == \"custom structure\")[0].ops;\n    console.log(ops);\n    if (ops.length == 0) return false;\n    return ops\n      .map((el) => { return el.struct_id == d.id})\n      .reduce((a, b) => { return a || b; });\n  }\n\n  setDraft(d: Draft) {\n    if (!this.hasCustomStructure(d)) {\n      console.log(\"a new structure!\");\n      let structOps = this.draftClassification.filter((c) => c.category == \"custom structure\")[0].ops;\n      let op = this.structureOpFromDraft(d);\n      structOps.push(op);\n      this.mappings.addOperation(op);\n    }\n    this.state.draft = d;\n    this.state.row = 0;\n    // console.log(\"player has active draft\");\n    // console.log(\"draft is \", this.draft);\n    console.log(\"draft set \", this.state);\n  }\n\n  /**\n   * \n   * @param d the Draft to turn into a custom structure Operation\n   */\n  structureOpFromDraft(d: Draft) {\n    let structOp: PlayerOp = {\n      name: d.gen_name,\n      struct_id: d.id,\n      perform: (init: PlayerState) => {\n        let res = copyState(init);\n        res.draft = d;\n        res.row = init.row % wefts(d.drawdown);\n        return Promise.resolve(res);\n      }\n    };\n    return structOp;\n  }\n\n  // e is a string = op.name\n  setPedalOp(e: any, p: Pedal) {\n    console.log(e, p);\n    if (this.mappings.pedalIsPaired(p.id)) {\n      this.mappings.unmap(p.id);\n    }\n    this.mappings.pair(p.id, e);\n    console.log(\"pedals map\", this.mappings);\n  }\n\n  onPedal(id: number) {\n    console.log('player service: pedal ', id);\n    let mapped = this.mappings.getMap(id);\n    // console.log(this.mappings);\n    // console.log(this.seq);\n    if (mapped) {\n      console.log('mapping exists for pedal');\n      mapped.perform(this.state, id)\n      .then((state: PlayerState) => {\n        this.state = copyState(state);\n        console.log(this.state);\n        this.redraw.emit('redraw');\n        if (this.state.weaving) {\n          console.log(\"draft player: sending row\");\n          this.pedals.sendDraftRow(this.currentRow());\n        }\n      });\n    }\n  }\n\n  // compound pedal operations\n  // normal pedal -> op\n  // compound pedal -> Op sequence\n  // if (compound pedal change) {\n      // sequence of operations: [Op, Op, Op]\n      // let finaldraft = starting Draft;\n      // for op in sequence:\n      //   finaldraft = finaldraft.perform(op);\n      // }\n      // do something with finaldraft\n  // }\n\n\n  currentRow() {\n    let {draft, row} = this.state;\n    let draftRow = draft.drawdown[row % wefts(draft.drawdown)];\n    let data = \"\";\n\n    let targetLength = (this.loom.draftTiling ? this.loom.warps : draftRow.length);\n    while (data.length  {\n    //   if (state) {\n    //   }\n    // });\n  }\n}\n\n    \n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n                   \n    \n         results matching \"\"\n        \n    \n    \n        No results matching \"\"\n    \n\n"},"interfaces/PlayerState.html":{"url":"interfaces/PlayerState.html","title":"interface - PlayerState","body":"\n                   \n\n\n\n\n\n\n\n\n\n\n\n\n\n\n  Interfaces\n  \n  PlayerState\n\n\n\n        \n            Info\n        \n        \n            Source\n        \n\n\n\n    \n        \n            File\n        \n        \n            src/app/player/model/player.ts\n        \n\n\n            \n                Description\n            \n            \n                PlayerState represents the Draft Player as an FSM\n\n            \n\n\n        \n            Index\n            \n                \n                    \n                        \n                            Properties\n                        \n                    \n                    \n                        \n                            \n                                \n                                        \n                                            draft\n                                        \n                                \n                                \n                                        \n                                            numPicks\n                                        \n                                \n                                \n                                        \n                                            pedal\n                                        \n                                \n                                \n                                        \n                                            row\n                                        \n                                \n                                \n                                        \n                                            weaving\n                                        \n                                \n                            \n                        \n                    \n                \n            \n        \n\n\n\n            \n                Properties\n                    \n                        \n                                \n                                    \n                                        \n                                        draft\n                                            \n                                                \n                                            \n                                        \n                                    \n                                \n                                \n                                    \n                                        draft:         Draft\n\n                                    \n                                \n\n\n                                    \n                                        \n                                            Type :         Draft\n\n                                        \n                                    \n\n\n\n\n\n                        \n                    \n                    \n                        \n                                \n                                    \n                                        \n                                        numPicks\n                                            \n                                                \n                                            \n                                        \n                                    \n                                \n                                \n                                    \n                                        numPicks:         number\n\n                                    \n                                \n\n\n                                    \n                                        \n                                            Type :         number\n\n                                        \n                                    \n\n\n\n\n\n                        \n                    \n                    \n                        \n                                \n                                    \n                                        \n                                        pedal\n                                            \n                                                \n                                            \n                                        \n                                    \n                                \n                                \n                                    \n                                        pedal:         string\n\n                                    \n                                \n\n\n                                    \n                                        \n                                            Type :         string\n\n                                        \n                                    \n\n\n\n\n\n                        \n                    \n                    \n                        \n                                \n                                    \n                                        \n                                        row\n                                            \n                                                \n                                            \n                                        \n                                    \n                                \n                                \n                                    \n                                        row:         number\n\n                                    \n                                \n\n\n                                    \n                                        \n                                            Type :         number\n\n                                        \n                                    \n\n\n\n\n\n                        \n                    \n                    \n                        \n                                \n                                    \n                                        \n                                        weaving\n                                            \n                                                \n                                            \n                                        \n                                    \n                                \n                                \n                                    \n                                        weaving:         boolean\n\n                                    \n                                \n\n\n                                    \n                                        \n                                            Type :         boolean\n\n                                        \n                                    \n\n\n\n\n\n                        \n                    \n            \n    \n\n\n    \n        import { Draft } from \"../../core/model/datatypes\"\nimport { initDraft } from \"../../core/model/drafts\";\n\n/** @interface\n * PlayerState represents the Draft Player as an FSM\n * @param draft The Draft currently loaded by the weaver\n * @param row which row of the draft the weaving is at\n * @param weaving whether or not the TC2 is actually running, or the weaver is just previewing the draft\n * @param numPicks the number of rows (picks) that have been sent to the loom so far (because the TC2 needs to receive this as part of the pick data)\n * @param pedal the name (mapped function) of the pedal that triggered this state change\n */\nexport interface PlayerState {\n  draft: Draft,\n  row: number,\n  pedal: string,\n  weaving: boolean,\n  numPicks: number,\n}\n\nexport function copyState(init: PlayerState): PlayerState {\n  return Object.assign({}, init);\n}\n\nexport function initState(): PlayerState { \n  return {\n    draft: initDraft(),\n    row: 0,\n    pedal: \"\",\n    weaving: false,\n    numPicks: 0\n}};\n\nexport interface WeavingPick {\n  pickNum: number,\n  rowData: string,\n}\n\nexport interface WeavingLog {\n  draft: Draft,\n  shortDraft: Draft,\n  states: Array,\n}\n    \n\n\n\n\n\n\n\n\n\n                   \n    \n         results matching \"\"\n        \n    \n    \n        No results matching \"\"\n    \n\n"},"interfaces/PlayerState-1.html":{"url":"interfaces/PlayerState-1.html","title":"interface - PlayerState-1","body":"\n                   \n\n\n\n\n\n\n\n\n\n\n\n\n\n\n  Interfaces\n  \n  PlayerState\n\n\n\n        \n            Info\n        \n        \n            Source\n        \n\n\n\n    \n        \n            File\n        \n        \n            src/app/player/model/state.ts\n        \n\n\n            \n                Description\n            \n            \n                PlayerState represents the Draft Player as an FSM\n\n            \n\n\n        \n            Index\n            \n                \n                    \n                        \n                            Properties\n                        \n                    \n                    \n                        \n                            \n                                \n                                        \n                                            draft\n                                        \n                                \n                                \n                                        \n                                            numPicks\n                                        \n                                \n                                \n                                        \n                                            pedal\n                                        \n                                \n                                \n                                        \n                                            row\n                                        \n                                \n                                \n                                        \n                                            weaving\n                                        \n                                \n                            \n                        \n                    \n                \n            \n        \n\n\n\n            \n                Properties\n                    \n                        \n                                \n                                    \n                                        \n                                        draft\n                                            \n                                                \n                                            \n                                        \n                                    \n                                \n                                \n                                    \n                                        draft:         Draft\n\n                                    \n                                \n\n\n                                    \n                                        \n                                            Type :         Draft\n\n                                        \n                                    \n\n\n\n\n\n                        \n                    \n                    \n                        \n                                \n                                    \n                                        \n                                        numPicks\n                                            \n                                                \n                                            \n                                        \n                                    \n                                \n                                \n                                    \n                                        numPicks:         number\n\n                                    \n                                \n\n\n                                    \n                                        \n                                            Type :         number\n\n                                        \n                                    \n\n\n\n\n\n                        \n                    \n                    \n                        \n                                \n                                    \n                                        \n                                        pedal\n                                            \n                                                \n                                            \n                                        \n                                    \n                                \n                                \n                                    \n                                        pedal:         string\n\n                                    \n                                \n\n\n                                    \n                                        \n                                            Type :         string\n\n                                        \n                                    \n\n\n\n\n\n                        \n                    \n                    \n                        \n                                \n                                    \n                                        \n                                        row\n                                            \n                                                \n                                            \n                                        \n                                    \n                                \n                                \n                                    \n                                        row:         number\n\n                                    \n                                \n\n\n                                    \n                                        \n                                            Type :         number\n\n                                        \n                                    \n\n\n\n\n\n                        \n                    \n                    \n                        \n                                \n                                    \n                                        \n                                        weaving\n                                            \n                                                \n                                            \n                                        \n                                    \n                                \n                                \n                                    \n                                        weaving:         boolean\n\n                                    \n                                \n\n\n                                    \n                                        \n                                            Type :         boolean\n\n                                        \n                                    \n\n\n\n\n\n                        \n                    \n            \n    \n\n\n    \n        import { Draft } from \"../../core/model/datatypes\"\nimport { initDraft } from \"../../core/model/drafts\";\n\n/** @interface\n * PlayerState represents the Draft Player as an FSM\n * @param draft The Draft currently loaded by the weaver\n * @param row which row of the draft the weaving is at\n * @param weaving whether or not the TC2 is actually running, or the weaver is just previewing the draft\n * @param numPicks the number of rows (picks) that have been sent to the loom so far (because the TC2 needs to receive this as part of the pick data)\n * @param pedal the name (mapped function) of the pedal that triggered this state change\n */\nexport interface PlayerState {\n  draft: Draft,\n  row: number,\n  pedal: string,\n  weaving: boolean,\n  numPicks: number,\n}\n\nexport function copyState(init: PlayerState): PlayerState {\n  return Object.assign({}, init);\n}\n\nexport function initState(): PlayerState { \n  return {\n    draft: initDraft(),\n    row: 0,\n    pedal: \"\",\n    weaving: false,\n    numPicks: 0\n}};\n\nexport interface WeavingPick {\n  pickNum: number,\n  rowData: string\n}\n    \n\n\n\n\n\n\n\n\n\n                   \n    \n         results matching \"\"\n        \n    \n    \n        No results matching \"\"\n    \n\n"},"interfaces/Point.html":{"url":"interfaces/Point.html","title":"interface - Point","body":"\n                   \n\n\n\n\n\n\n\n\n\n\n\n\n\n\n  Interfaces\n  \n  Point\n\n\n\n        \n            Info\n        \n        \n            Source\n        \n\n\n\n    \n        \n            File\n        \n        \n            src/app/core/model/datatypes/screenlayout.ts\n        \n\n\n            \n                Description\n            \n            \n                describes a point using x,y coordinates\noften used for referencing mouse and/or screen drawing positions\n\n            \n\n\n        \n            Index\n            \n                \n                    \n                        \n                            Properties\n                        \n                    \n                    \n                        \n                            \n                                \n                                        \n                                            x\n                                        \n                                \n                                \n                                        \n                                            y\n                                        \n                                \n                            \n                        \n                    \n                \n            \n        \n\n\n\n            \n                Properties\n                    \n                        \n                                \n                                    \n                                        \n                                        x\n                                            \n                                                \n                                            \n                                        \n                                    \n                                \n                                \n                                    \n                                        x:         number\n\n                                    \n                                \n\n\n                                    \n                                        \n                                            Type :         number\n\n                                        \n                                    \n\n\n\n\n\n                        \n                    \n                    \n                        \n                                \n                                    \n                                        \n                                        y\n                                            \n                                                \n                                            \n                                        \n                                    \n                                \n                                \n                                    \n                                        y:         number\n\n                                    \n                                \n\n\n                                    \n                                        \n                                            Type :         number\n\n                                        \n                                    \n\n\n\n\n\n                        \n                    \n            \n    \n\n\n    \n        export interface Point {\n    x: number;\n    y: number;\n  }\n  \n  /**\n   * Describes a rectangle on the screen.\n   * @param topleft - position of this rectanble\n   * @param width - the width of the rectangle\n   * @param height - the height of this rectanble.\n   */\n  export interface Bounds {\n    topleft: Point;  //row on draft\n    width: number;  //column on draft \n    height: number; //corresponding screen row\n  }\n  \n  // /**\n  //  * A type to communicate locations on the loom that have been updated in response to a given action\n  //  */\n  // interface LoomUpdate {\n  //   threading: Array,\n  //   treadling: Array,\n  //   tieup: Array>\n  // }\n    \n\n\n\n\n\n\n\n\n\n                   \n    \n         results matching \"\"\n        \n    \n    \n        No results matching \"\"\n    \n\n"},"classes/Render.html":{"url":"classes/Render.html","title":"class - Render","body":"\n                   \n\n\n\n\n\n\n\n\n\n\n\n\n\n  Classes\n  Render\n\n\n\n        \n            Info\n        \n        \n            Source\n        \n\n\n\n    \n        \n            File\n        \n        \n            src/app/core/model/render.ts\n        \n\n\n            \n                Description\n            \n            \n                Definition of render object.\n\n            \n\n\n\n\n            \n    Index\n    \n        \n                \n                    \n                        Properties\n                    \n                \n                \n                    \n                        \n                            \n                                base_cell\n                            \n                            \n                                current_view\n                            \n                            \n                                select\n                            \n                            \n                                view_front\n                            \n                            \n                                visibleRows\n                            \n                            \n                                zoom\n                            \n                        \n                    \n                \n\n                \n                    \n                        Methods\n                    \n                \n                \n                    \n                        \n                            \n                                getCellDims\n                            \n                            \n                                getCurrentView\n                            \n                            \n                                getNextVisibleRow\n                            \n                            \n                                    Private\n                                getOffset\n                            \n                            \n                                getTextInterval\n                            \n                            \n                                getZoom\n                            \n                            \n                                interpolate\n                            \n                            \n                                isFront\n                            \n                            \n                                isYarnBasedView\n                            \n                            \n                                setCurrentView\n                            \n                            \n                                setFront\n                            \n                            \n                                setZoom\n                            \n                            \n                                updateVisible\n                            \n                            \n                                zoomIn\n                            \n                            \n                                zoomOut\n                            \n                        \n                    \n                \n\n\n\n\n\n        \n    \n\n\n            \n    Constructor\n        \n            \n                \n                    \nconstructor(view_frames: boolean, draft: Draft, ss: SystemsService)\n                    \n                \n                        \n                            \n                                Defined in src/app/core/model/render.ts:33\n                            \n                        \n\n                \n                    \n                            \n                                    Parameters :\n                                    \n                                        \n                                            \n                                                Name\n                                                    Type\n                                                Optional\n                                            \n                                        \n                                        \n                                                \n                                                        view_frames\n                                                  \n                                                        \n                                                                        boolean\n                                                        \n                                                  \n                                                    \n                                                            No\n                                                    \n                                                    \n                                                \n                                                \n                                                        draft\n                                                  \n                                                        \n                                                                        Draft\n                                                        \n                                                  \n                                                    \n                                                            No\n                                                    \n                                                    \n                                                \n                                                \n                                                        ss\n                                                  \n                                                        \n                                                                        SystemsService\n                                                        \n                                                  \n                                                    \n                                                            No\n                                                    \n                                                    \n                                                \n                                        \n                                    \n                            \n                    \n                \n            \n        \n\n\n            \n    \n    \n        Properties\n    \n    \n        \n            \n                \n                    \n                    \n                        base_cell\n                        \n                    \n                \n            \n                \n                    \n                        Type :     literal type\n\n                    \n                \n                    \n                        \n                                Defined in src/app/core/model/render.ts:21\n                        \n                    \n\n\n        \n    \n    \n        \n            \n                \n                    \n                    \n                        current_view\n                        \n                    \n                \n            \n                \n                    \n                        Type :         string\n\n                    \n                \n                    \n                        \n                                Defined in src/app/core/model/render.ts:13\n                        \n                    \n\n\n        \n    \n    \n        \n            \n                \n                    \n                    \n                        select\n                        \n                    \n                \n            \n                \n                    \n                        Type :     literal type\n\n                    \n                \n                    \n                        \n                                Defined in src/app/core/model/render.ts:30\n                        \n                    \n\n\n        \n    \n    \n        \n            \n                \n                    \n                    \n                        view_front\n                        \n                    \n                \n            \n                \n                    \n                        Type :         boolean\n\n                    \n                \n                    \n                        \n                                Defined in src/app/core/model/render.ts:15\n                        \n                    \n\n\n        \n    \n    \n        \n            \n                \n                    \n                    \n                        visibleRows\n                        \n                    \n                \n            \n                \n                    \n                        Type :     Array\n\n                    \n                \n                    \n                        \n                                Defined in src/app/core/model/render.ts:17\n                        \n                    \n\n\n        \n    \n    \n        \n            \n                \n                    \n                    \n                        zoom\n                        \n                    \n                \n            \n                \n                    \n                        Type :         number\n\n                    \n                \n                    \n                        \n                                Defined in src/app/core/model/render.ts:19\n                        \n                    \n\n\n        \n    \n\n\n            \n    \n    \n        Methods\n    \n    \n        \n            \n                \n                    \n                    \n                        getCellDims\n                        \n                    \n                \n            \n            \n                \ngetCellDims(type: string)\n                \n            \n\n\n            \n                \n                    Defined in src/app/core/model/render.ts:125\n                \n            \n\n\n            \n                \n\n                    \n                        Parameters :\n                        \n                        \n                            \n                                \n                                    Name\n                                    Type\n                                    Optional\n                                \n                            \n                            \n                                \n                                    type\n                                    \n                                                string\n                                    \n\n                                    \n                                        No\n                                    \n\n\n                                \n                            \n                        \n                    \n                    \n                    \n                    \n                        Returns :     { x: number; y: number; w: number; h: number; }\n\n                    \n                    \n                        \n                    \n                \n            \n        \n    \n    \n        \n            \n                \n                    \n                    \n                        getCurrentView\n                        \n                    \n                \n            \n            \n                \ngetCurrentView()\n                \n            \n\n\n            \n                \n                    Defined in src/app/core/model/render.ts:191\n                \n            \n\n\n            \n                \n\n                    \n                        Returns :         string\n\n                    \n                \n            \n        \n    \n    \n        \n            \n                \n                    \n                    \n                        getNextVisibleRow\n                        \n                    \n                \n            \n            \n                \ngetNextVisibleRow(ndx: number)\n                \n            \n\n\n            \n                \n                    Defined in src/app/core/model/render.ts:116\n                \n            \n\n\n            \n                \n                    given the ndx, get the next visible row or -1 if there isn't a next\n\n\n                    \n                        Parameters :\n                        \n                        \n                            \n                                \n                                    Name\n                                    Type\n                                    Optional\n                                \n                            \n                            \n                                \n                                    ndx\n                                    \n                                                number\n                                    \n\n                                    \n                                        No\n                                    \n\n\n                                \n                            \n                        \n                    \n                    \n                    \n                    \n                        Returns :         number\n\n                    \n                    \n                        \n                    \n                \n            \n        \n    \n    \n        \n            \n                \n                    \n                    \n                        Private\n                        getOffset\n                        \n                    \n                \n            \n            \n                \n                    \n                    getOffset(type)\n                \n            \n\n\n            \n                \n                    Defined in src/app/core/model/render.ts:176\n                \n            \n\n\n            \n                \n\n                    \n                        Parameters :\n                        \n                        \n                            \n                                \n                                    Name\n                                    Optional\n                                \n                            \n                            \n                                \n                                    type\n\n                                    \n                                        No\n                                    \n\n\n                                \n                            \n                        \n                    \n                    \n                    \n                    \n                        Returns :         number\n\n                    \n                    \n                        \n                    \n                \n            \n        \n    \n    \n        \n            \n                \n                    \n                    \n                        getTextInterval\n                        \n                    \n                \n            \n            \n                \ngetTextInterval()\n                \n            \n\n\n            \n                \n                    Defined in src/app/core/model/render.ts:101\n                \n            \n\n\n            \n                \n\n                    \n                        Returns :     1 | 2 | 4 | 5 | 8 | 10 | 12 | 15\n\n                    \n                \n            \n        \n    \n    \n        \n            \n                \n                    \n                    \n                        getZoom\n                        \n                    \n                \n            \n            \n                \ngetZoom()\n                \n            \n\n\n            \n                \n                    Defined in src/app/core/model/render.ts:161\n                \n            \n\n\n            \n                \n\n                    \n                        Returns :         number\n\n                    \n                \n            \n        \n    \n    \n        \n            \n                \n                    \n                    \n                        interpolate\n                        \n                    \n                \n            \n            \n                \ninterpolate(base: any)\n                \n            \n\n\n            \n                \n                    Defined in src/app/core/model/render.ts:87\n                \n            \n\n\n            \n                \n\n                    \n                        Parameters :\n                        \n                        \n                            \n                                \n                                    Name\n                                    Type\n                                    Optional\n                                \n                            \n                            \n                                \n                                    base\n                                    \n                                                any\n                                    \n\n                                    \n                                        No\n                                    \n\n\n                                \n                            \n                        \n                    \n                    \n                    \n                    \n                        Returns :         void\n\n                    \n                    \n                        \n                    \n                \n            \n        \n    \n    \n        \n            \n                \n                    \n                    \n                        isFront\n                        \n                    \n                \n            \n            \n                \nisFront()\n                \n            \n\n\n            \n                \n                    Defined in src/app/core/model/render.ts:199\n                \n            \n\n\n            \n                \n\n                    \n                        Returns :         boolean\n\n                    \n                \n            \n        \n    \n    \n        \n            \n                \n                    \n                    \n                        isYarnBasedView\n                        \n                    \n                \n            \n            \n                \nisYarnBasedView()\n                \n            \n\n\n            \n                \n                    Defined in src/app/core/model/render.ts:187\n                \n            \n\n\n            \n                \n\n                    \n                        Returns :         boolean\n\n                    \n                \n            \n        \n    \n    \n        \n            \n                \n                    \n                    \n                        setCurrentView\n                        \n                    \n                \n            \n            \n                \nsetCurrentView(view: string)\n                \n            \n\n\n            \n                \n                    Defined in src/app/core/model/render.ts:195\n                \n            \n\n\n            \n                \n\n                    \n                        Parameters :\n                        \n                        \n                            \n                                \n                                    Name\n                                    Type\n                                    Optional\n                                \n                            \n                            \n                                \n                                    view\n                                    \n                                                string\n                                    \n\n                                    \n                                        No\n                                    \n\n\n                                \n                            \n                        \n                    \n                    \n                    \n                    \n                        Returns :         void\n\n                    \n                    \n                        \n                    \n                \n            \n        \n    \n    \n        \n            \n                \n                    \n                    \n                        setFront\n                        \n                    \n                \n            \n            \n                \nsetFront(value: boolean)\n                \n            \n\n\n            \n                \n                    Defined in src/app/core/model/render.ts:203\n                \n            \n\n\n            \n                \n\n                    \n                        Parameters :\n                        \n                        \n                            \n                                \n                                    Name\n                                    Type\n                                    Optional\n                                \n                            \n                            \n                                \n                                    value\n                                    \n                                                boolean\n                                    \n\n                                    \n                                        No\n                                    \n\n\n                                \n                            \n                        \n                    \n                    \n                    \n                    \n                        Returns :         boolean\n\n                    \n                    \n                        \n                    \n                \n            \n        \n    \n    \n        \n            \n                \n                    \n                    \n                        setZoom\n                        \n                    \n                \n            \n            \n                \nsetZoom(z: number)\n                \n            \n\n\n            \n                \n                    Defined in src/app/core/model/render.ts:157\n                \n            \n\n\n            \n                \n\n                    \n                        Parameters :\n                        \n                        \n                            \n                                \n                                    Name\n                                    Type\n                                    Optional\n                                \n                            \n                            \n                                \n                                    z\n                                    \n                                                number\n                                    \n\n                                    \n                                        No\n                                    \n\n\n                                \n                            \n                        \n                    \n                    \n                    \n                    \n                        Returns :         void\n\n                    \n                    \n                        \n                    \n                \n            \n        \n    \n    \n        \n            \n                \n                    \n                    \n                        updateVisible\n                        \n                    \n                \n            \n            \n                \nupdateVisible(draft: Draft)\n                \n            \n\n\n            \n                \n                    Defined in src/app/core/model/render.ts:207\n                \n            \n\n\n            \n                \n\n                    \n                        Parameters :\n                        \n                        \n                            \n                                \n                                    Name\n                                    Type\n                                    Optional\n                                \n                            \n                            \n                                \n                                    draft\n                                    \n                                                Draft\n                                    \n\n                                    \n                                        No\n                                    \n\n\n                                \n                            \n                        \n                    \n                    \n                    \n                    \n                        Returns :         void\n\n                    \n                    \n                        \n                    \n                \n            \n        \n    \n    \n        \n            \n                \n                    \n                    \n                        zoomIn\n                        \n                    \n                \n            \n            \n                \nzoomIn()\n                \n            \n\n\n            \n                \n                    Defined in src/app/core/model/render.ts:170\n                \n            \n\n\n            \n                \n\n                    \n                        Returns :         void\n\n                    \n                \n            \n        \n    \n    \n        \n            \n                \n                    \n                    \n                        zoomOut\n                        \n                    \n                \n            \n            \n                \nzoomOut()\n                \n            \n\n\n            \n                \n                    Defined in src/app/core/model/render.ts:165\n                \n            \n\n\n            \n                \n\n                    \n                        Returns :         void\n\n                    \n                \n            \n        \n    \n\n\n\n\n\n\n    \n\n\n    \n        import { SystemsService } from \"../provider/systems.service\";\nimport { Draft } from \"./datatypes\";\nimport { wefts } from \"./drafts\";\n\n/**\n * Definition of render object.\n * @class\n */\nexport class Render {\n\n // view_frames: boolean;\n\n  current_view: string;\n  \n  view_front: boolean;\n  \n  visibleRows: Array; \n\n  zoom: number;\n\n  base_cell: {\n    w: {max: number, min: number},\n    h: {max: number, min: number},\n    margin_fill_x: {max: number, min: number},\n    margin_fill_y: {max: number, min: number},\n    margin_clear_x: {max: number, min: number},\n    margin_clear_y: {max: number, min: number},\n  };\n\n  select:{\n    offset_x: {max: number, min: number},\n    offset_y: {max: number, min: number};\n  }\n\n  constructor(view_frames:boolean, draft: Draft, private ss: SystemsService) {\n\n    //max values\n    this.zoom = 1;\n   // this.view_frames = view_frames;\n    this.current_view = 'pattern';\n    this.view_front = true;\n\n    this.visibleRows = [];\n    for(let i = 0; i  1.75) return 1;\n    if(this.zoom > 1.5) return 2;\n    if(this.zoom > 1.25) return 4;\n    if(this.zoom > 1) return 5;\n    if(this.zoom > .75) return 8; \n    if(this.zoom > .5) return 10;\n    if(this.zoom > .25) return 12;\n    return 15;\n  }\n\n  /**\n   * given the ndx, get the next visible row or -1 if there isn't a next\n   * @param ndx \n   */\n  getNextVisibleRow(ndx: number) : number {\n\n    const next: number = ndx ++;\n    if(next >= this.visibleRows.length) return -1;\n\n    return this.visibleRows[next];\n\n  }\n\n  getCellDims(type: string){\n\n    return {\n      x: 0,\n      y: 0,\n      w: 10,\n      h: 10\n    };\n\n    // return {\n    //   x: this.getOffset(type+\"_x\"),\n    //   y: this.getOffset(type+\"_y\"),\n    //   w: this.base_cell.w.min,\n    //   h: this.base_cell.h.min\n    // };\n\n  }\n\n  // getInterpolationDims(type: string){\n  //   var x = this.interpolate({max: this.getOffset(type+\"_x\"), min: this.getOffset(type+\"_x\")});\n  //   var y = this.interpolate({max: this.getOffset(type+\"_y\"), min: this.getOffset(type+\"_y\")});\n\n\n  //   return {\n  //     x: x,\n  //     y: y,\n  //     w: this.interpolate({max: this.base_cell.w.max - (x*2), min: this.base_cell.w.min}),\n  //     h: this.interpolate({max: this.base_cell.h.max - (y*2), min: this.base_cell.h.min})\n  //   }\n\n  // }\n\n  setZoom(z: number){\n    this.zoom = z;\n  }\n\n  getZoom(){\n    return this.zoom;\n  }\n\n   zoomOut(){\n    this.zoom -= 10; \n    if(this.zoom  100) this.zoom = 100;\n\n  }\n\n  private getOffset(type) {\n    if(type ===\"select_x\") return this.select.offset_x.min;\n    if(type ===\"select_y\") return this.select.offset_y.min;\n    if(type ===\"base_clear_x\") return this.base_cell.margin_clear_x.min;\n    if(type ===\"base_clear_y\") return this.base_cell.margin_clear_y.min;\n    if(type ===\"base_fill_x\") return this.base_cell.margin_fill_x.min;\n    if(type ===\"base_fill_y\") return this.base_cell.margin_fill_y.min;\n    else return 0;\n  }\n\n\n  isYarnBasedView(): boolean{\n    return (this.current_view == 'visual' || this.current_view == 'yarn');\n  }\n\n  getCurrentView(): string{\n    return this.current_view;\n  }\n\n  setCurrentView(view:string){\n    this.current_view = view;\n  }\n\n  isFront(){\n    return this.view_front;\n  }\n\n  setFront(value:boolean){\n    return this.view_front = value;\n  }\n\n  updateVisible(draft: Draft) {\n\n    this.visibleRows = \n      draft.rowSystemMapping.map((val, ndx) => {\n        return (this.ss.weftSystemIsVisible(val)) ? ndx : -1;  \n      })\n      .filter(el => el !== -1);\n\n  }\n\n\n}\n\n    \n\n\n\n\n\n\n\n\n\n\n                   \n    \n         results matching \"\"\n        \n    \n    \n        No results matching \"\"\n    \n\n"},"interfaces/SaveObj.html":{"url":"interfaces/SaveObj.html","title":"interface - SaveObj","body":"\n                   \n\n\n\n\n\n\n\n\n\n\n\n\n\n\n  Interfaces\n  \n  SaveObj\n\n\n\n        \n            Info\n        \n        \n            Source\n        \n\n\n\n    \n        \n            File\n        \n        \n            src/app/core/model/datatypes/files.ts\n        \n\n\n            \n                Description\n            \n            \n                describes the data from the workspace that is saved.\n\n            \n\n\n        \n            Index\n            \n                \n                    \n                        \n                            Properties\n                        \n                    \n                    \n                        \n                            \n                                \n                                        \n                                            draft_nodes\n                                        \n                                \n                                \n                                        \n                                            materials\n                                        \n                                \n                                \n                                        \n                                            nodes\n                                        \n                                \n                                \n                                        \n                                            notes\n                                        \n                                \n                                \n                                        \n                                            ops\n                                        \n                                \n                                \n                                        \n                                            scale\n                                        \n                                \n                                \n                                        \n                                            tree\n                                        \n                                \n                                \n                                        \n                                            type\n                                        \n                                \n                                \n                                        \n                                            version\n                                        \n                                \n                                \n                                        \n                                            workspace\n                                        \n                                \n                            \n                        \n                    \n                \n            \n        \n\n\n\n            \n                Properties\n                    \n                        \n                                \n                                    \n                                        \n                                        draft_nodes\n                                            \n                                                \n                                            \n                                        \n                                    \n                                \n                                \n                                    \n                                        draft_nodes:         Array\n\n                                    \n                                \n\n\n                                    \n                                        \n                                            Type :         Array\n\n                                        \n                                    \n\n\n\n\n\n                        \n                    \n                    \n                        \n                                \n                                    \n                                        \n                                        materials\n                                            \n                                                \n                                            \n                                        \n                                    \n                                \n                                \n                                    \n                                        materials:         Array\n\n                                    \n                                \n\n\n                                    \n                                        \n                                            Type :         Array\n\n                                        \n                                    \n\n\n\n\n\n                        \n                    \n                    \n                        \n                                \n                                    \n                                        \n                                        nodes\n                                            \n                                                \n                                            \n                                        \n                                    \n                                \n                                \n                                    \n                                        nodes:         Array\n\n                                    \n                                \n\n\n                                    \n                                        \n                                            Type :         Array\n\n                                        \n                                    \n\n\n\n\n\n                        \n                    \n                    \n                        \n                                \n                                    \n                                        \n                                        notes\n                                            \n                                                \n                                            \n                                        \n                                    \n                                \n                                \n                                    \n                                        notes:     Array\n\n                                    \n                                \n\n\n                                    \n                                        \n                                            Type :     Array\n\n                                        \n                                    \n\n\n\n\n\n                        \n                    \n                    \n                        \n                                \n                                    \n                                        \n                                        ops\n                                            \n                                                \n                                            \n                                        \n                                    \n                                \n                                \n                                    \n                                        ops:     Array\n\n                                    \n                                \n\n\n                                    \n                                        \n                                            Type :     Array\n\n                                        \n                                    \n\n\n\n\n\n                        \n                    \n                    \n                        \n                                \n                                    \n                                        \n                                        scale\n                                            \n                                                \n                                            \n                                        \n                                    \n                                \n                                \n                                    \n                                        scale:         number\n\n                                    \n                                \n\n\n                                    \n                                        \n                                            Type :         number\n\n                                        \n                                    \n\n\n\n\n\n                        \n                    \n                    \n                        \n                                \n                                    \n                                        \n                                        tree\n                                            \n                                                \n                                            \n                                        \n                                    \n                                \n                                \n                                    \n                                        tree:         Array\n\n                                    \n                                \n\n\n                                    \n                                        \n                                            Type :         Array\n\n                                        \n                                    \n\n\n\n\n\n                        \n                    \n                    \n                        \n                                \n                                    \n                                        \n                                        type\n                                            \n                                                \n                                            \n                                        \n                                    \n                                \n                                \n                                    \n                                        type:         string\n\n                                    \n                                \n\n\n                                    \n                                        \n                                            Type :         string\n\n                                        \n                                    \n\n\n\n\n\n                        \n                    \n                    \n                        \n                                \n                                    \n                                        \n                                        version\n                                            \n                                                \n                                            \n                                        \n                                    \n                                \n                                \n                                    \n                                        version:         string\n\n                                    \n                                \n\n\n                                    \n                                        \n                                            Type :         string\n\n                                        \n                                    \n\n\n\n\n\n                        \n                    \n                    \n                        \n                                \n                                    \n                                        \n                                        workspace\n                                            \n                                                \n                                            \n                                        \n                                    \n                                \n                                \n                                    \n                                        workspace:         any\n\n                                    \n                                \n\n\n                                    \n                                        \n                                            Type :         any\n\n                                        \n                                    \n\n\n\n\n\n                        \n                    \n            \n    \n\n\n    \n        import { Draft } from './drafts';\nimport { Loom, LoomSettings } from './looms';\nimport { Shuttle } from '../shuttle';\nimport { Note } from '../../provider/notes.service';\nimport { Bounds } from './screenlayout';\n\n/****** OBJECTS/TYPES FOR LOADING AND SAVING FILES *****/\n\n/**\n * holds data about each node/component in a form to easily load.\n * @param node_id the id of this node within the tree\n * @param type the type of node\n * @param bounds the screen position and size data for this node\n */\nexport interface NodeComponentProxy {\n    node_id: number,\n    type: string,\n    bounds: Bounds\n  }\n  \n  /**\n   * stores a sparce version of a tree node for easy reloading\n   * @param node the node id this treenode refers too\n   * @param parent the node id of the parent node for this treenode\n   * @param inputs an array of treenode ids for all values coming into this node\n   * @param outputs an array of treenode ids for all downstream functions \n   */\n   export interface TreeNodeProxy {\n    node: number,\n    parent: number; \n    inputs: Array;\n    outputs: Array; \n   }\n  \n    /**\n    * holds data about each draft component in a compressed form \n    * @param draft_id the draft id associated with this node (if available)\n   * @param draft_visible a boolean to state if this node is visible or not. \n   * @param draft_name a string representing a user defined name\n   * @param draft this will only export if the draft is a seed draft\n   * @param loom this will only export if the draft is a seed draft \n   * @param loom_settings the associated loom settings on this node, if present\n    */\n  \n    export interface DraftNodeProxy {\n      node_id: number;\n      draft_id: number;\n      draft_name: string;\n      draft: Draft;\n      draft_visible: boolean;\n      loom: Loom,\n      loom_settings: LoomSettings;\n    }\n  \n  /**\n    * a sparce form of an operaction component to use for saving\n    * @param node_id the node id this object refers too\n    * @param name the name of the operation at this node\n    * @param params the list of input parameters to this operation\n    * @param inlets the let of inlets and associated values \n    */\n  export interface OpComponentProxy {\n    node_id: number,\n    name: string,\n    params: Array, \n    inlets: Array;\n  }\n  \n  \n   /**\n    * describes the data from the workspace that is saved.\n    */\n   export interface SaveObj {\n    version: string,\n    workspace: any,\n    type: string,\n    nodes: Array,\n    tree: Array,\n    draft_nodes: Array,\n    ops: Array,\n    notes: Array,\n    materials: Array,\n    scale: number\n   }\n  \n  export interface FileObj {\n   version: string,\n   workspace: any,\n   filename: string,\n   nodes: Array,\n   treenodes: Array,\n   draft_nodes: Array,\n   ops: Array\n   scale: number\n  }\n  \n  export interface StatusMessage {\n    id: number,\n    message: string,\n    success: boolean\n  }\n  \n  export interface LoadResponse {\n    data: FileObj,\n    status: number;\n  }\n  \n  export interface Fileloader {\n    ada: (filename: string, data: any) => Promise,\n    //wif: (filename: string, data: any) => Promise,\n    //bmp: (filename: string, data: any) => Promise,\n    //jpg: (filename: string, data: any) => Promise,\n    form: (data: any) => Promise}\n  \n  export interface FileSaver {\n    ada: (type: string, for_timeline:boolean, current_scale: number) => Promise,\n    //wif: (draft: Draft, loom: Loom) => Promise,\n    bmp: (canvas: HTMLCanvasElement) => Promise,\n    jpg: (canvas: HTMLCanvasElement) => Promise\n  }\n    \n\n\n\n\n\n\n\n\n\n                   \n    \n         results matching \"\"\n        \n    \n    \n        No results matching \"\"\n    \n\n"},"classes/Seed.html":{"url":"classes/Seed.html","title":"class - Seed","body":"\n                   \n\n\n\n\n\n\n\n\n\n\n\n\n\n  Classes\n  Seed\n\n\n\n        \n            Info\n        \n        \n            Source\n        \n\n\n\n    \n        \n            File\n        \n        \n            src/app/mixer/model/operation/topology.ts\n        \n\n\n            \n                Description\n            \n            \n                Operation that can generate a draft with no inputs, may take an optional input\n\nINPUT: zero or one Draft\nOUTPUT: exactly one Draft\n\n\n            \n\n\n            \n                Implements\n            \n            \n                            TopologyDef\n            \n\n\n            \n    Index\n    \n        \n                \n                    \n                        Properties\n                    \n                \n                \n                    \n                        \n                            \n                                input\n                            \n                            \n                                output\n                            \n                            \n                                type\n                            \n                        \n                    \n                \n\n\n\n\n\n\n        \n    \n\n\n\n            \n    \n    \n        Properties\n    \n    \n        \n            \n                \n                    \n                    \n                        input\n                        \n                    \n                \n            \n                \n                    \n                        Type :         Draft | null\n\n                    \n                \n                    \n                        \n                                Defined in src/app/mixer/model/operation/topology.ts:47\n                        \n                    \n\n\n        \n    \n    \n        \n            \n                \n                    \n                    \n                        output\n                        \n                    \n                \n            \n                \n                    \n                        Type :         Draft\n\n                    \n                \n                    \n                        \n                                Defined in src/app/mixer/model/operation/topology.ts:47\n                        \n                    \n\n\n        \n    \n    \n        \n            \n                \n                    \n                    \n                        type\n                        \n                    \n                \n            \n                    \n                        \n                                Defined in src/app/mixer/model/operation/topology.ts:47\n                        \n                    \n\n\n        \n    \n\n\n\n\n\n\n\n\n    \n\n\n    \n        import { Draft } from \"../../../core/model/datatypes\";\nimport { ParamValue, OperationParam as OpParam, getParamValues } from \"./params\";\nimport { OperationInlet as OpInlet, InletDrafts } from \"./inlets\";\n\n/**\n* At its heart, an Operation is a very fancy function that outputs a Draft or several Drafts.\n* The function itself is perform(), and the Operation can take inputs in the form of \n* Drafts (inlets) or Parameters (params).\n*/\n\n/** \n* Types that an Operation's perform() function can handlle as input/output\n*/\n\n/** @type Union of types that can serve as input to Operation perform() functions. */\nexport type PerformDraftInput = InletDrafts | Array | Draft | null;\n\ntype MultiDraftInput = InletDrafts | Array;\n\n/** @type Union of types that Operation perform() functions can output. */\nexport type PerformOutput = Array | Draft;\n\n/**\n * OPERATION TOPOLOGY\n * Topology refers to the shape of the Operation in terms of its\n * number of input and output Drafts. Classifies Operations.\n */\n\nexport const TopologyName = {\n  pipe: 'pipe', \n  seed: 'seed', \n  merge: 'merge', \n  branch: 'branch', \n  bus: 'bus'\n} as const;\nexport type TopologyName = keyof typeof TopologyName;\n\ninterface TopologyDef { type: TopologyName; input: PerformDraftInput; output: PerformOutput; };\n\n/**\n* @class\n* Operation that can generate a draft with no inputs, may take an optional input\n* @method perform OpPerform function: \n* - INPUT: zero or one Draft\n* - OUTPUT: exactly one Draft\n*/\nexport class Seed implements TopologyDef { type: 'seed'; input: Draft | null; output: Draft; };\n\n/**\n* @class\n* Operation that takes one input and generates one output draft. \n* @method perform OpPerform function: \n* - INPUT: exactly one Draft\n* - OUTPUT: exactly one Draft\n*/\nexport class Pipe implements TopologyDef { type: 'pipe'; input: Draft; output: Draft; };\n\n/**\n* @class\n* Operation that takes many (N) inputs and generates one output draft.\n* @method perform OpPerform function: \n* - INPUT: Array of Drafts\n* - OUTPUT: exactly one Draft\n*/\nexport class Merge implements TopologyDef { type: 'merge'; input: InletDrafts | Array; output: Draft; };\n\n/**\n* @class\n* Operation that takes one input and generates many (N) output drafts.\n* @method perform OpPerform function:\n* - INPUT: exactly one Draft\n* - OUTPUT: Array of Drafts\n*/\nexport class Branch implements TopologyDef { type: 'branch'; input: Draft; output: Array; };\n\n/**\n* CURRENTLY UNUSED\n* @class\n* Operation that takes many (N) inputs and generates many (M) output drafts.\n* Number of inputs does not necessarily match number of outputs (N ?= M).\n* @method perform OpPerform function:  \n* - INPUT: Array of Drafts\n* - OUTPUT: Array of Drafts\n*/\nexport class Bus implements TopologyDef { type: 'bus'; input: Array | InletDrafts; output: Array; };\n\ntype TopologyIndex = {\n  'seed': Seed,\n  'pipe': Pipe,\n  'merge': Merge,\n  'branch': Branch,\n  'bus': Bus\n}\ntype OpTopology = TopologyIndex[TopologyName];\n\n/**\n * OPERATION CONSTRAINT\n * A Constraint on an Operation classifies it based on its\n * input requirements (both Drafts and Params).\n */\n\nexport const ConstraintOptions = {\n  req: 'req', \n  opt: 'opt', \n  none: 'none'\n} as const;\nexport type ConstraintOptions = keyof typeof ConstraintOptions;\n\nexport const ConstraintName = {\n  no_drafts: { input_drafts: 'none', input_params: 'req' }, \n  no_params: { input_drafts: 'req', input_params: 'none' }, \n  drafts_opt: { input_drafts: 'opt', input_params: 'req' }, \n  params_opt: { input_drafts: 'req', input_params: 'opt' }, \n  all_req: {input_drafts: 'req', input_params: 'req' },\n} as const;\ntype ConstraintName = keyof typeof ConstraintName;\n\ntype ConstraintDefs = {\n  [C in keyof typeof ConstraintName]: {\n    constraint: C;\n    input_drafts: typeof ConstraintName[C][\"input_drafts\"];\n    input_params: typeof ConstraintName[C][\"input_params\"];\n  }\n}\n\nexport type NoDrafts = ConstraintDefs[\"no_drafts\"];\nexport type NoParams = ConstraintDefs[\"no_params\"];\nexport type DraftsOptional = ConstraintDefs[\"drafts_opt\"];\nexport type ParamsOptional = ConstraintDefs[\"params_opt\"];\nexport type AllRequired = ConstraintDefs[\"all_req\"];\n\ntype ConstraintIndex = {\n  'no_drafts': NoDrafts, // does not accept input drafts\n  'no_params': NoParams, // does not accept params\n  'drafts_opt': DraftsOptional, // can take no params -- has default values\n  'params_opt': ParamsOptional, // can take zero input drafts\n  'all_req': AllRequired, // both inputs and params required\n}\ntype OpConstraint = ConstraintIndex[ConstraintName]; \n\n/** \n* Generic types for perform() functions, describing options \n* for input draft multiplicity (0, 1, N) and param requirement \n*/\n\ntype NoDraftsPerform = {(params: Array): Topo[\"output\"]};\ntype NoParamsPerform = {(inputs: Topo[\"input\"]): Topo[\"output\"]};\ntype ParamsOptionalPerform = {(inputs: Topo[\"input\"], params?: Array): Topo[\"output\"]}; \ntype DraftsOptionalPerform = {(params: Array, inputs?: Topo[\"input\"]): Topo[\"output\"]};  \ntype AllRequiredPerform = {(inputs: Topo[\"input\"], params: Array): Topo[\"output\"]};  \n\ntype PerformCallSigs = {\n  no_drafts: { [Topo in keyof TopologyIndex]: NoDraftsPerform; },\n  no_params: { [Topo in keyof TopologyIndex]: NoParamsPerform; },\n  drafts_opt: { [Topo in keyof TopologyIndex]: DraftsOptionalPerform; },\n  params_opt: { [Topo in keyof TopologyIndex]: ParamsOptionalPerform; },\n  all_req: { [Topo in keyof TopologyIndex]: AllRequiredPerform; }\n}\n\n/**\n * @interface OpClassifier\n * Key-value pairs for an Operation's Topology and Constraint.\n */\ninterface OpClassifier {\n  type: Topo[\"type\"] | '';\n  input_drafts: Constraint[\"input_drafts\"] | '';\n  input_params: Constraint[\"input_params\"] | '';\n}\n\n/** @type User-defined descriptive strings for any Operation. */\ntype OperationDescriptors = { name: string, displayname: string, dx: string };\n\n/**\n* A standard Operation's metadata -- i.e. everything not the perform() function\n* @param name the internal name of this opearation (CHANGING THESE WILL BREAK LEGACY VERSIONS)\n* @param displayname the name to show upon this operation\n* @param dx the description of this operation\n* @param max_inputs the maximum number of inputs (drafts) allowed directly into this operation\n* @param params the parameters associated with this operation\n* @method perform an OpPerform function\n*/\nexport interface OperationProperties extends OperationDescriptors {\n  max_inputs: number,\n  default_params?: Array;\n  params: Array,\n}\n\n/**\n * @type A function that serves as the perform() method for an Operation. \n * This generic type requires two type parameters:\n * @param Topo one of the PerformInput types\n * @param Constraint one of the PerformOutput types\n *\n * OpPerform to give call signature for perform() function \n * Topo  = Seed | Pipe | Merge | Branch | Bus\n * Constraint = NoDrafts | NoParams | DraftsOptional | ParamsOptional | AllRequired\n */\nexport type OpPerform = PerformCallSigs[Constraint[\"constraint\"]][Topo[\"type\"]];\n// type PerformArgs = Parameters>;\n\n/** TODO doublecheck inlets have been added correctly (fields for input drafts) */\nexport class BaseOp implements OperationProperties {\n  name: string;\n  old_names: Array;\n  displayname: string;\n  dx: string;\n  params: Array;\n  inlets: Array;\n  default_params?: Array;\n  max_inputs: number;\n  classifier: OpClassifier;\n  perform: OpPerform;\n\n  /** @constructor create an Operation using an object literal (keys and values) */\n  constructor (args: OpConstructorArgs);\n  /** @constructor create an Operation using direct arguments in the constructor (values only) */\n  constructor (...args: OpConstructorArray);\n  constructor (name: string, displayname: string, dx: string, perform: OpPerform);\n  constructor (name: string, displayname: string, dx: string, params: Array, perform: OpPerform);\n  constructor (nameOrArgs: any, displayname?: string, dx?: string, performOrParams?: OpPerform | Array, performWithParams?: OpPerform) {\n    // console.log((nameOrArgs.name != undefined));\n    this.classifier = { type: '', input_drafts: '', input_params: '' };\n    if (nameOrArgs.name) {\n      let args = nameOrArgs;\n      this.name = args.name;\n      this.displayname = args.displayname;\n      this.dx = args.dx;\n      this.perform = args.perform;\n      if (args.params) this.params = args.params;\n      else this.params = [];\n      if (args.inlets) this.inlets = args.inlets;\n      else this.inlets = [];\n    } else {\n      this.name = nameOrArgs;\n      this.displayname = displayname;\n      this.dx = dx;\n      if (performWithParams) {\n        let params = > performOrParams;\n        this.params = params;\n        this.default_params = getParamValues(params);\n        this.perform = performWithParams;\n      } else {\n        this.params = [];\n        this.perform = > performOrParams;\n      }\n    }\n  }\n\n  constrain(c: ConstraintName): void {\n    if (c == 'no_drafts') { this.max_inputs = 0; this.inlets = []; }\n    this.classifier.input_drafts = ConstraintName[c][\"input_drafts\"]; \n    this.classifier.input_params = ConstraintName[c][\"input_params\"];\n  }\n\n  type(t: TopologyName): BaseOp {\n    this.classifier.type = t;\n    return this;\n  }\n}\n\ntype ConstructorArgKeysIndex = {\n  [C in keyof ConstraintIndex]: C extends \"no_params\" ? {\n    [T in keyof TopologyIndex]: {\n      name: string, displayname: string, dx: string, old_names: string[],\n      inlets: OpInlet[], perform: OpPerform\n    }\n  } : C extends \"no_drafts\" ? {\n    [T in keyof TopologyIndex]: {\n      name: string, displayname: string, dx: string, old_names: string[],\n      params: OpParam[], perform: OpPerform\n    }\n  } : {\n    [T in keyof TopologyIndex]: {\n      name: string, displayname: string, dx: string, old_names: string[],\n      params: OpParam[], inlets: OpInlet[],\n      perform: OpPerform\n    }\n  }\n}\n\ntype ConstructorArrayIndex = {\n  [C in keyof ConstraintIndex]: C extends \"no_params\" ? {\n    [T in keyof TopologyIndex]: [\n      name: string, displayname: string, dx: string, old_names: string[],\n      inlets: OpInlet[], perform: OpPerform\n    ]\n  } : C extends \"no_drafts\" ? {\n    [T in keyof TopologyIndex]: [\n      name: string, displayname: string, dx: string, old_names: string[],\n      params: OpParam[], perform: OpPerform\n    ]\n  } : {\n    [T in keyof TopologyIndex]: [\n      name: string, displayname: string, dx: string, old_names: string[],\n      params: OpParam[], inlets: OpInlet[],\n      perform: OpPerform\n    ]\n  }\n}\n\ntype OpConstructorArgKeys = \nConstructorArgKeysIndex[Constraint[\"constraint\"]][Topo[\"type\"]];\n\ntype OpConstructorArray = \nConstructorArrayIndex[Constraint[\"constraint\"]][Topo[\"type\"]];\n\ntype OpConstructorArgs = \nOpConstructorArgKeys | OpConstructorArray;\n\n// use factory design pattern to apply classifiers to BaseOp?? Is this too convoluted\n// https://refactoring.guru/design-patterns/abstract-factory/typescript\nclass AbstractOpFactory {\n  NoDrafts(args: OpConstructorArgKeys): BaseOp;\n  NoDrafts(...args: OpConstructorArray): BaseOp;\n  NoDrafts(...args: any) {\n    let op = new BaseOp(...args);\n    op.constrain(\"no_drafts\");\n    return op;\n  }\n\n  NoParams(args: OpConstructorArgKeys): BaseOp;\n  NoParams(...args: OpConstructorArray): BaseOp;\n  NoParams(...args: any) {\n    let op = new BaseOp(...args);\n    op.constrain(\"no_params\");\n    return op;\n  }\n\n  DraftsOptional(args: OpConstructorArgKeys): BaseOp;\n  DraftsOptional(...args: OpConstructorArray): BaseOp;\n  DraftsOptional(...args: any) {\n    let op = new BaseOp(...args);\n    op.constrain(\"drafts_opt\");\n    return op;\n  }\n\n  ParamsOptional(args: OpConstructorArgKeys): BaseOp;\n  ParamsOptional(...args: OpConstructorArray): BaseOp;\n  ParamsOptional(...args: any) {\n    let op = new BaseOp(...args);\n    op.constrain(\"params_opt\");\n    return op;\n  }\n\n  AllRequired(args: OpConstructorArgKeys): BaseOp;\n  AllRequired(...args: OpConstructorArray): BaseOp;\n  AllRequired(...args: any) {\n    let op = new BaseOp(...args);\n    op.constrain(\"all_req\");\n    return op;\n  }\n}\n\n// combine with mix-ins design pattern (link: TypeScript docs website)\nfunction makeTopoFactory(topo: TopologyName) {\n  return class TopologyFactory extends AbstractOpFactory {\n    static base = new AbstractOpFactory();\n    \n    static NoDrafts(args: OpConstructorArgKeys): BaseOp;\n    static NoDrafts(...args: OpConstructorArray): BaseOp;\n    static NoDrafts(...args: any) {\n      return this.base.NoDrafts(...args).type(topo);\n    }\n\n    static NoParams(args: OpConstructorArgKeys): BaseOp;\n    static NoParams(...args: OpConstructorArray): BaseOp;\n    static NoParams(...args: any) {\n      return this.base.NoParams(...args).type(topo);\n    }\n\n    static DraftsOptional(args: OpConstructorArgKeys): BaseOp;\n    static DraftsOptional(...args: OpConstructorArray): BaseOp;\n    static DraftsOptional(...args: any) {\n      return this.base.DraftsOptional(...args).type(topo);\n    }\n\n    static ParamsOptional(args: OpConstructorArgKeys): BaseOp;\n    static ParamsOptional(...args: OpConstructorArray): BaseOp;\n    static ParamsOptional(...args: any) {\n      return this.base.ParamsOptional(...args).type(topo);\n    }\n\n    static AllRequired(args: OpConstructorArgKeys): BaseOp;\n    static AllRequired(...args: OpConstructorArray): BaseOp;\n    static AllRequired(...args: any) {\n      return this.base.AllRequired(...args).type(topo);\n    }\n  }\n}\n\nexport const OpFactories = {\n  Seed: makeTopoFactory(\"seed\"),\n  Pipe: makeTopoFactory(\"pipe\"),\n  Merge: makeTopoFactory(\"merge\"),\n  Branch: makeTopoFactory(\"merge\"),\n  Bus: makeTopoFactory(\"bus\"),\n}\n\n// export const SeedOperation = makeTopoFactory(\"seed\");\n// export const PipeOperation = makeTopoFactory(\"pipe\");\n// export const MergeOperation = makeTopoFactory(\"merge\");\n// export const BranchOperation = makeTopoFactory(\"merge\");\n// export const BusOperation = makeTopoFactory(\"bus\");\n\ntype TopologyOpIndex = {\n  [T in keyof TopologyIndex]: {\n    [C in keyof ConstraintIndex]: BaseOp;\n  }\n}\n\nexport type BuildableOperation = TopologyOpIndex[TopologyName][ConstraintName];\n    \n\n\n\n\n\n\n\n\n\n\n                   \n    \n         results matching \"\"\n        \n    \n    \n        No results matching \"\"\n    \n\n"},"classes/Selection.html":{"url":"classes/Selection.html","title":"class - Selection","body":"\n                   \n\n\n\n\n\n\n\n\n\n\n\n\n\n  Classes\n  Selection\n\n\n\n        \n            Info\n        \n        \n            Source\n        \n\n\n\n    \n        \n            File\n        \n        \n            src/app/core/model/selection.ts\n        \n\n\n            \n                Description\n            \n            \n                Definition of selection object.\n\n            \n\n\n\n\n            \n    Index\n    \n        \n                \n                    \n                        Properties\n                    \n                \n                \n                    \n                        \n                            \n                                end\n                            \n                            \n                                height\n                            \n                            \n                                start\n                            \n                            \n                                target\n                            \n                            \n                                width\n                            \n                        \n                    \n                \n\n                \n                    \n                        Methods\n                    \n                \n                \n                    \n                        \n                            \n                                getLeft\n                            \n                            \n                                getTarget\n                            \n                            \n                                getTargetId\n                            \n                            \n                                getTop\n                            \n                            \n                                hasSelection\n                            \n                            \n                                setParameters\n                            \n                            \n                                setTarget\n                            \n                            \n                                unsetParameters\n                            \n                        \n                    \n                \n\n\n\n\n\n        \n    \n\n\n\n            \n    \n    \n        Properties\n    \n    \n        \n            \n                \n                    \n                    \n                        end\n                        \n                    \n                \n            \n                \n                    \n                        Type :         Interlacement\n\n                    \n                \n                    \n                        \n                                Defined in src/app/core/model/selection.ts:9\n                        \n                    \n\n\n        \n    \n    \n        \n            \n                \n                    \n                    \n                        height\n                        \n                    \n                \n            \n                \n                    \n                        Type :         number\n\n                    \n                \n                    \n                        \n                                Defined in src/app/core/model/selection.ts:11\n                        \n                    \n\n\n        \n    \n    \n        \n            \n                \n                    \n                    \n                        start\n                        \n                    \n                \n            \n                \n                    \n                        Type :         Interlacement\n\n                    \n                \n                    \n                        \n                                Defined in src/app/core/model/selection.ts:8\n                        \n                    \n\n\n        \n    \n    \n        \n            \n                \n                    \n                    \n                        target\n                        \n                    \n                \n            \n                \n                    \n                        Type :         any\n\n                    \n                \n                    \n                        \n                                Defined in src/app/core/model/selection.ts:12\n                        \n                    \n\n\n        \n    \n    \n        \n            \n                \n                    \n                    \n                        width\n                        \n                    \n                \n            \n                \n                    \n                        Type :         number\n\n                    \n                \n                    \n                        \n                                Defined in src/app/core/model/selection.ts:10\n                        \n                    \n\n\n        \n    \n\n\n            \n    \n    \n        Methods\n    \n    \n        \n            \n                \n                    \n                    \n                        getLeft\n                        \n                    \n                \n            \n            \n                \ngetLeft()\n                \n            \n\n\n            \n                \n                    Defined in src/app/core/model/selection.ts:39\n                \n            \n\n\n            \n                \n\n                    \n                        Returns :         any\n\n                    \n                \n            \n        \n    \n    \n        \n            \n                \n                    \n                    \n                        getTarget\n                        \n                    \n                \n            \n            \n                \ngetTarget()\n                \n            \n\n\n            \n                \n                    Defined in src/app/core/model/selection.ts:47\n                \n            \n\n\n            \n                \n\n                    \n                        Returns :         any\n\n                    \n                \n            \n        \n    \n    \n        \n            \n                \n                    \n                    \n                        getTargetId\n                        \n                    \n                \n            \n            \n                \ngetTargetId()\n                \n            \n\n\n            \n                \n                    Defined in src/app/core/model/selection.ts:51\n                \n            \n\n\n            \n                \n\n                    \n                        Returns :         any\n\n                    \n                \n            \n        \n    \n    \n        \n            \n                \n                    \n                    \n                        getTop\n                        \n                    \n                \n            \n            \n                \ngetTop()\n                \n            \n\n\n            \n                \n                    Defined in src/app/core/model/selection.ts:35\n                \n            \n\n\n            \n                \n\n                    \n                        Returns :         any\n\n                    \n                \n            \n        \n    \n    \n        \n            \n                \n                    \n                    \n                        hasSelection\n                        \n                    \n                \n            \n            \n                \nhasSelection()\n                \n            \n\n\n            \n                \n                    Defined in src/app/core/model/selection.ts:31\n                \n            \n\n\n            \n                \n\n                    \n                        Returns :         boolean\n\n                    \n                \n            \n        \n    \n    \n        \n            \n                \n                    \n                    \n                        setParameters\n                        \n                    \n                \n            \n            \n                \nsetParameters()\n                \n            \n\n\n            \n                \n                    Defined in src/app/core/model/selection.ts:15\n                \n            \n\n\n            \n                \n\n                    \n                        Returns :         void\n\n                    \n                \n            \n        \n    \n    \n        \n            \n                \n                    \n                    \n                        setTarget\n                        \n                    \n                \n            \n            \n                \nsetTarget(t)\n                \n            \n\n\n            \n                \n                    Defined in src/app/core/model/selection.ts:43\n                \n            \n\n\n            \n                \n\n                    \n                        Parameters :\n                        \n                        \n                            \n                                \n                                    Name\n                                    Optional\n                                \n                            \n                            \n                                \n                                    t\n\n                                    \n                                        No\n                                    \n\n\n                                \n                            \n                        \n                    \n                    \n                    \n                    \n                        Returns :         void\n\n                    \n                    \n                        \n                    \n                \n            \n        \n    \n    \n        \n            \n                \n                    \n                    \n                        unsetParameters\n                        \n                    \n                \n            \n            \n                \nunsetParameters()\n                \n            \n\n\n            \n                \n                    Defined in src/app/core/model/selection.ts:26\n                \n            \n\n\n            \n                \n\n                    \n                        Returns :         void\n\n                    \n                \n            \n        \n    \n\n\n\n\n\n\n    \n\n\n    \n        import { Interlacement } from '../../core/model/datatypes'\n\n/**\n * Definition of selection object.\n * @class\n */\nexport class Selection {\n  start: Interlacement;\n  end: Interlacement;\n  width: number;\n  height: number;\n  target: any;\n\n\n  setParameters() {\n    this.width = Math.abs(this.start.j - this.end.j);\n    this.height = Math.abs(this.start.si - this.end.si);\n\n    if(this.target.id == \"weft-systems\" || this.target.id == \"weft-materials\"){\n      this.width = 1;\n    }else if(this.target.id == \"warp-systems\" || this.target.id == \"warp-materials\"){\n      this.height = 1;\n    }\n  }\n\n  unsetParameters() {\n    this.width = -1;\n    this.height = -1;\n  }\n\n  hasSelection(){\n    return (this.width >= 0 && this.height >= 0);\n  }\n\n  getTop(){\n    return Math.min(this.start.si, this.end.si);\n  }\n\n  getLeft(){\n    return Math.min(this.start.j, this.end.j);\n  }\n\n  setTarget(t){\n  \tthis.target = t;\n  }\n\n  getTarget(){\n  \treturn this.target;\n  }\n\n  getTargetId(){\n    if(this.target !== undefined) return this.target.id;\n    return undefined;\n  }\n\n\n\n\n}\n    \n\n\n\n\n\n\n\n\n\n\n                   \n    \n         results matching \"\"\n        \n    \n    \n        No results matching \"\"\n    \n\n"},"directives/SelectionComponent.html":{"url":"directives/SelectionComponent.html","title":"directive - SelectionComponent","body":"\n                   \n\n\n\n\n\n\n\n\n  Directives\n  SelectionComponent\n\n\n\n        \n            Info\n        \n        \n            Source\n        \n\n\n\n    \n        \n            File\n        \n        \n            src/app/mixer/palette/selection/selection.component.ts\n        \n\n\n\n\n            \n                Implements\n            \n            \n                            OnInit\n            \n\n\n        \n            Metadata\n            \n                \n\n                    \n                        Selector\n                        app-selection\n                    \n\n                \n            \n        \n\n            \n    Index\n    \n        \n                \n                    \n                        Properties\n                    \n                \n                \n                    \n                        \n                            \n                                active\n                            \n                            \n                                bounds\n                            \n                            \n                                draft\n                            \n                            \n                                filter\n                            \n                            \n                                id\n                            \n                            \n                                scale\n                            \n                            \n                                start\n                            \n                        \n                    \n                \n\n                \n                    \n                        Methods\n                    \n                \n                \n                    \n                        \n                            \n                                    Public\n                                getDraftId\n                            \n                            \n                                ngOnInit\n                            \n                            \n                                    Public\n                                setPositionAndSize\n                            \n                        \n                    \n                \n\n\n\n\n\n        \n    \n\n\n\n\n\n\n\n            \n    \n    \n        Methods\n    \n    \n        \n            \n                \n                    \n                    \n                        Public\n                        getDraftId\n                        \n                    \n                \n            \n            \n                \n                    \n                    getDraftId()\n                \n            \n\n\n            \n                \n                    Defined in src/app/mixer/palette/selection/selection.component.ts:31\n                \n            \n\n\n            \n                \n\n                    \n                        Returns :         any\n\n                    \n                \n            \n        \n    \n    \n        \n            \n                \n                    \n                    \n                        ngOnInit\n                        \n                    \n                \n            \n            \n                \nngOnInit()\n                \n            \n\n\n            \n                \n                    Defined in src/app/mixer/palette/selection/selection.component.ts:26\n                \n            \n\n\n            \n                \n\n                    \n                        Returns :         void\n\n                    \n                \n            \n        \n    \n    \n        \n            \n                \n                    \n                    \n                        Public\n                        setPositionAndSize\n                        \n                    \n                \n            \n            \n                \n                    \n                    setPositionAndSize(bounds: Bounds)\n                \n            \n\n\n            \n                \n                    Defined in src/app/mixer/palette/selection/selection.component.ts:36\n                \n            \n\n\n            \n                \n\n                    \n                        Parameters :\n                        \n                        \n                            \n                                \n                                    Name\n                                    Type\n                                    Optional\n                                \n                            \n                            \n                                \n                                    bounds\n                                    \n                                                Bounds\n                                    \n\n                                    \n                                        No\n                                    \n\n\n                                \n                            \n                        \n                    \n                    \n                    \n                    \n                        Returns :         void\n\n                    \n                    \n                        \n                    \n                \n            \n        \n    \n\n            \n    \n    \n        Properties\n    \n    \n        \n            \n                \n                    \n                    \n                        active\n                        \n                    \n                \n            \n                \n                    \n                        Default value : false\n                    \n                \n                    \n                        \n                                Defined in src/app/mixer/palette/selection/selection.component.ts:22\n                        \n                    \n\n\n        \n    \n    \n        \n            \n                \n                    \n                    \n                        bounds\n                        \n                    \n                \n            \n                \n                    \n                        Type :         Bounds\n\n                    \n                \n                \n                    \n                        Default value : {\n    topleft: {x: 0, y:0},\n    width: 0,\n    height: 0\n  }\n                    \n                \n                    \n                        \n                                Defined in src/app/mixer/palette/selection/selection.component.ts:15\n                        \n                    \n\n\n        \n    \n    \n        \n            \n                \n                    \n                    \n                        draft\n                        \n                    \n                \n            \n                \n                    \n                        Type :         Draft\n\n                    \n                \n                \n                    \n                        Default value : new Draft({name: \"selection\"})\n                    \n                \n                    \n                        \n                                Defined in src/app/mixer/palette/selection/selection.component.ts:13\n                        \n                    \n\n\n        \n    \n    \n        \n            \n                \n                    \n                    \n                        filter\n                        \n                    \n                \n            \n                \n                    \n                        Type :         string\n\n                    \n                \n                \n                    \n                        Default value : \"or\"\n                    \n                \n                    \n                        \n                                Defined in src/app/mixer/palette/selection/selection.component.ts:24\n                        \n                    \n\n\n        \n    \n    \n        \n            \n                \n                    \n                    \n                        id\n                        \n                    \n                \n            \n                \n                    \n                        Type :         number\n\n                    \n                \n                    \n                        \n                                Defined in src/app/mixer/palette/selection/selection.component.ts:12\n                        \n                    \n\n\n        \n    \n    \n        \n            \n                \n                    \n                    \n                        scale\n                        \n                    \n                \n            \n                \n                    \n                        Type :         number\n\n                    \n                \n                    \n                        \n                                Defined in src/app/mixer/palette/selection/selection.component.ts:23\n                        \n                    \n\n\n        \n    \n    \n        \n            \n                \n                    \n                    \n                        start\n                        \n                    \n                \n            \n                \n                    \n                        Type :         Interlacement\n\n                    \n                \n                \n                    \n                        Default value : {i: 0, j:0, si: 0}\n                    \n                \n                    \n                        \n                                Defined in src/app/mixer/palette/selection/selection.component.ts:21\n                        \n                    \n\n\n        \n    \n\n\n\n    \n\n\n    \n        import { Directive, OnInit } from '@angular/core';\nimport { Draft } from '../../../core/model/draft';\nimport { Point, Bounds, Interlacement } from '../../../core/model/datatypes';\n\n@Directive({\n  selector: 'app-selection'\n})\n\n\nexport class SelectionComponent implements OnInit{\n\n  id: number;\n  draft: Draft = new Draft({name: \"selection\"});\n\n  bounds:Bounds = {\n    topleft: {x: 0, y:0},\n    width: 0,\n    height: 0\n  }\n\n  start:Interlacement = {i: 0, j:0, si: 0};\n  active = false;\n  scale: number; \n  filter = \"or\"\n\n  ngOnInit(){\n    console.log(this.draft.id);\n    console.log(\"created directive selection\");\n  }\n\n  public getDraftId(){\n    return this.draft.id;\n  }\n\n\n  public setPositionAndSize(bounds: Bounds){\n    this.bounds  = bounds;\n  }\n\n\n\n}\n\n    \n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n                   \n    \n         results matching \"\"\n        \n    \n    \n        No results matching \"\"\n    \n\n"},"injectables/SequencerService.html":{"url":"injectables/SequencerService.html","title":"injectable - SequencerService","body":"\n                   \n\n\n\n\n\n\n\n\n\n  Injectables\n  SequencerService\n\n\n\n        \n            Info\n        \n        \n            Source\n        \n\n\n\n    \n        \n            File\n        \n        \n            src/app/player/provider/sequencer.service.ts\n        \n\n\n            \n                Description\n            \n            \n                I separated the sequencer into a generic object class\nAND an Angular service that extends the class. Hopefully\nthat isn't clunky, but it does let me separate methods\nthat are useful to call in the HTML, from the methods\nthat are less often called in HTML\n\n            \n\n            \n                Extends\n            \n            \n                        OpSequencer\n            \n\n\n            \n    Index\n    \n        \n                \n                    \n                        Properties\n                    \n                \n                \n                    \n                        \n                            \n                                chains\n                            \n                            \n                                selecting\n                            \n                            \n                                _pos\n                            \n                            \n                                name\n                            \n                            \n                                ops\n                            \n                            \n                                p_prog\n                            \n                            \n                                p_select_a\n                            \n                            \n                                    Optional\n                                p_select_b\n                            \n                        \n                    \n                \n\n                \n                    \n                        Methods\n                    \n                \n                \n                    \n                        \n                            \n                                addChainOp\n                            \n                            \n                                addPedals\n                            \n                            \n                                addSingleOp\n                            \n                            \n                                addToChain\n                            \n                            \n                                addOp\n                            \n                            \n                                delOpAt\n                            \n                            \n                                hasPedal\n                            \n                            \n                                mapPedal\n                            \n                            \n                                nextOp\n                            \n                            \n                                perform\n                            \n                            \n                                prevOp\n                            \n                            \n                                removeOp\n                            \n                        \n                    \n                \n\n\n\n\n\n                    \n                        \n                            Accessors\n                        \n                    \n                    \n                        \n                            \n                                \n                                    active\n                                \n                                \n                                    pos\n                                \n                            \n                        \n                    \n        \n    \n\n\n            \n    Constructor\n        \n            \n                \n                    \nconstructor()\n                    \n                \n                        \n                            \n                                Defined in src/app/player/provider/sequencer.service.ts:32\n                            \n                        \n\n            \n        \n\n\n            \n    \n    \n        Methods\n    \n    \n        \n            \n                \n                    \n                    \n                        addChainOp\n                        \n                    \n                \n            \n            \n                \naddChainOp(o: PlayerOp)\n                \n            \n\n\n            \n                \n                    Defined in src/app/player/provider/sequencer.service.ts:57\n                \n            \n\n\n            \n                \n\n                    \n                        Parameters :\n                        \n                        \n                            \n                                \n                                    Name\n                                    Type\n                                    Optional\n                                \n                            \n                            \n                                \n                                    o\n                                    \n                                                PlayerOp\n                                    \n\n                                    \n                                        No\n                                    \n\n\n                                \n                            \n                        \n                    \n                    \n                    \n                    \n                        Returns :         void\n\n                    \n                    \n                        \n                    \n                \n            \n        \n    \n    \n        \n            \n                \n                    \n                    \n                        addPedals\n                        \n                    \n                \n            \n            \n                \naddPedals(fwd_pedal: number, select_pedal_a: number, select_pedal_b?: number)\n                \n            \n\n\n            \n                \n                    Defined in src/app/player/provider/sequencer.service.ts:39\n                \n            \n\n\n            \n                \n\n                    \n                        Parameters :\n                        \n                        \n                            \n                                \n                                    Name\n                                    Type\n                                    Optional\n                                \n                            \n                            \n                                \n                                    fwd_pedal\n                                    \n                                                number\n                                    \n\n                                    \n                                        No\n                                    \n\n\n                                \n                                \n                                    select_pedal_a\n                                    \n                                                number\n                                    \n\n                                    \n                                        No\n                                    \n\n\n                                \n                                \n                                    select_pedal_b\n                                    \n                                                number\n                                    \n\n                                    \n                                        Yes\n                                    \n\n\n                                \n                            \n                        \n                    \n                    \n                    \n                    \n                        Returns :         void\n\n                    \n                    \n                        \n                    \n                \n            \n        \n    \n    \n        \n            \n                \n                    \n                    \n                        addSingleOp\n                        \n                    \n                \n            \n            \n                \naddSingleOp(o: PlayerOp)\n                \n            \n\n\n            \n                \n                    Defined in src/app/player/provider/sequencer.service.ts:47\n                \n            \n\n\n            \n                \n\n                    \n                        Parameters :\n                        \n                        \n                            \n                                \n                                    Name\n                                    Type\n                                    Optional\n                                \n                            \n                            \n                                \n                                    o\n                                    \n                                                PlayerOp\n                                    \n\n                                    \n                                        No\n                                    \n\n\n                                \n                            \n                        \n                    \n                    \n                    \n                    \n                        Returns :         void\n\n                    \n                    \n                        \n                    \n                \n            \n        \n    \n    \n        \n            \n                \n                    \n                    \n                        addToChain\n                        \n                    \n                \n            \n            \n                \naddToChain(ch_id: number, o: PlayerOp)\n                \n            \n\n\n            \n                \n                    Defined in src/app/player/provider/sequencer.service.ts:63\n                \n            \n\n\n            \n                \n\n                    \n                        Parameters :\n                        \n                        \n                            \n                                \n                                    Name\n                                    Type\n                                    Optional\n                                \n                            \n                            \n                                \n                                    ch_id\n                                    \n                                                number\n                                    \n\n                                    \n                                        No\n                                    \n\n\n                                \n                                \n                                    o\n                                    \n                                                PlayerOp\n                                    \n\n                                    \n                                        No\n                                    \n\n\n                                \n                            \n                        \n                    \n                    \n                    \n                    \n                        Returns :         void\n\n                    \n                    \n                        \n                    \n                \n            \n        \n    \n    \n        \n            \n                \n                    \n                    \n                        addOp\n                        \n                    \n                \n            \n            \n                \naddOp(o: PlayerOp | ChainOp)\n                \n            \n\n\n            \n                \n                    Inherited from         OpSequencer\n\n                \n            \n            \n                \n                        Defined in         OpSequencer:88\n\n                \n            \n\n\n            \n                \n\n                    \n                        Parameters :\n                        \n                        \n                            \n                                \n                                    Name\n                                    Type\n                                    Optional\n                                \n                            \n                            \n                                \n                                    o\n                                    \n                                                PlayerOp | ChainOp\n                                    \n\n                                    \n                                        No\n                                    \n\n\n                                \n                            \n                        \n                    \n                    \n                    \n                    \n                        Returns :         number\n\n                    \n                    \n                        \n                    \n                \n            \n        \n    \n    \n        \n            \n                \n                    \n                    \n                        delOpAt\n                        \n                    \n                \n            \n            \n                \ndelOpAt(x: number)\n                \n            \n\n\n            \n                \n                    Inherited from         OpSequencer\n\n                \n            \n            \n                \n                        Defined in         OpSequencer:99\n\n                \n            \n\n\n            \n                \n\n                    \n                        Parameters :\n                        \n                        \n                            \n                                \n                                    Name\n                                    Type\n                                    Optional\n                                \n                            \n                            \n                                \n                                    x\n                                    \n                                                number\n                                    \n\n                                    \n                                        No\n                                    \n\n\n                                \n                            \n                        \n                    \n                    \n                    \n                    \n                        Returns :         void\n\n                    \n                    \n                        \n                    \n                \n            \n        \n    \n    \n        \n            \n                \n                    \n                    \n                        hasPedal\n                        \n                    \n                \n            \n            \n                \nhasPedal(n: number)\n                \n            \n\n\n            \n                \n                    Inherited from         OpSequencer\n\n                \n            \n            \n                \n                        Defined in         OpSequencer:69\n\n                \n            \n\n\n            \n                \n\n                    \n                        Parameters :\n                        \n                        \n                            \n                                \n                                    Name\n                                    Type\n                                    Optional\n                                \n                            \n                            \n                                \n                                    n\n                                    \n                                                number\n                                    \n\n                                    \n                                        No\n                                    \n\n\n                                \n                            \n                        \n                    \n                    \n                    \n                    \n                        Returns :         boolean\n\n                    \n                    \n                        \n                    \n                \n            \n        \n    \n    \n        \n            \n                \n                    \n                    \n                        mapPedal\n                        \n                    \n                \n            \n            \n                \nmapPedal(id: number, role: \"fwd\" | \"sel-next\" | \"sel-back\")\n                \n            \n\n\n            \n                \n                    Inherited from         OpSequencer\n\n                \n            \n            \n                \n                        Defined in         OpSequencer:56\n\n                \n            \n\n\n            \n                \n\n                    \n                        Parameters :\n                        \n                        \n                            \n                                \n                                    Name\n                                    Type\n                                    Optional\n                                \n                            \n                            \n                                \n                                    id\n                                    \n                                                number\n                                    \n\n                                    \n                                        No\n                                    \n\n\n                                \n                                \n                                    role\n                                    \n                                            \"fwd\" | \"sel-next\" | \"sel-back\"\n                                    \n\n                                    \n                                        No\n                                    \n\n\n                                \n                            \n                        \n                    \n                    \n                    \n                    \n                        Returns :         void\n\n                    \n                    \n                        \n                    \n                \n            \n        \n    \n    \n        \n            \n                \n                    \n                    \n                        nextOp\n                        \n                    \n                \n            \n            \n                \nnextOp()\n                \n            \n\n\n            \n                \n                    Inherited from         OpSequencer\n\n                \n            \n            \n                \n                        Defined in         OpSequencer:74\n\n                \n            \n\n\n            \n                \n\n                    \n                        Returns :         any\n\n                    \n                \n            \n        \n    \n    \n        \n            \n                \n                    \n                    \n                        perform\n                        \n                    \n                \n            \n            \n                \nperform(init: PlayerState, n: number)\n                \n            \n\n\n            \n                \n                    Inherited from         OpSequencer\n\n                \n            \n            \n                \n                        Defined in         OpSequencer:104\n\n                \n            \n\n\n            \n                \n\n                    \n                        Parameters :\n                        \n                        \n                            \n                                \n                                    Name\n                                    Type\n                                    Optional\n                                \n                            \n                            \n                                \n                                    init\n                                    \n                                                PlayerState\n                                    \n\n                                    \n                                        No\n                                    \n\n\n                                \n                                \n                                    n\n                                    \n                                                number\n                                    \n\n                                    \n                                        No\n                                    \n\n\n                                \n                            \n                        \n                    \n                    \n                    \n                    \n                        Returns :         Promise\n\n                    \n                    \n                        \n                    \n                \n            \n        \n    \n    \n        \n            \n                \n                    \n                    \n                        prevOp\n                        \n                    \n                \n            \n            \n                \nprevOp()\n                \n            \n\n\n            \n                \n                    Inherited from         OpSequencer\n\n                \n            \n            \n                \n                        Defined in         OpSequencer:81\n\n                \n            \n\n\n            \n                \n\n                    \n                        Returns :         any\n\n                    \n                \n            \n        \n    \n    \n        \n            \n                \n                    \n                    \n                        removeOp\n                        \n                    \n                \n            \n            \n                \nremoveOp()\n                \n            \n\n\n            \n                \n                    Inherited from         OpSequencer\n\n                \n            \n            \n                \n                        Defined in         OpSequencer:94\n\n                \n            \n\n\n            \n                \n\n                    \n                        Returns :         void\n\n                    \n                \n            \n        \n    \n\n            \n    \n    \n        Properties\n    \n    \n        \n            \n                \n                    \n                    \n                        chains\n                        \n                    \n                \n            \n                \n                    \n                        Type :         Array\n\n                    \n                \n                \n                    \n                        Default value : []\n                    \n                \n                    \n                        \n                                Defined in src/app/player/provider/sequencer.service.ts:26\n                        \n                    \n\n\n        \n    \n    \n        \n            \n                \n                    \n                    \n                        selecting\n                        \n                    \n                \n            \n                \n                    \n                        Type :         boolean\n\n                    \n                \n                \n                    \n                        Default value : false\n                    \n                \n                        \n                            \n                                Inherited from         OpSequencer\n\n                            \n                        \n                    \n                        \n                                Defined in         OpSequencer:25\n\n                        \n                    \n\n\n        \n    \n    \n        \n            \n                \n                    \n                    \n                        _pos\n                        \n                    \n                \n            \n                \n                    \n                        Type :         number\n\n                    \n                \n                \n                    \n                        Default value : -1\n                    \n                \n                        \n                            \n                                Inherited from         OpSequencer\n\n                            \n                        \n                    \n                        \n                                Defined in         OpSequencer:16\n\n                        \n                    \n\n\n        \n    \n    \n        \n            \n                \n                    \n                    \n                        name\n                        \n                    \n                \n            \n                \n                    \n                        Type :         string\n\n                    \n                \n                        \n                            \n                                Inherited from         OpSequencer\n\n                            \n                        \n                    \n                        \n                                Defined in         OpSequencer:12\n\n                        \n                    \n\n\n        \n    \n    \n        \n            \n                \n                    \n                    \n                        ops\n                        \n                    \n                \n            \n                \n                    \n                        Type :         Array\n\n                    \n                \n                \n                    \n                        Default value : []\n                    \n                \n                        \n                            \n                                Inherited from         OpSequencer\n\n                            \n                        \n                    \n                        \n                                Defined in         OpSequencer:17\n\n                        \n                    \n\n\n        \n    \n    \n        \n            \n                \n                    \n                    \n                        p_prog\n                        \n                    \n                \n            \n                \n                    \n                        Type :         number\n\n                    \n                \n                \n                    \n                        Default value : -1\n                    \n                \n                        \n                            \n                                Inherited from         OpSequencer\n\n                            \n                        \n                    \n                        \n                                Defined in         OpSequencer:15\n\n                        \n                    \n\n\n        \n    \n    \n        \n            \n                \n                    \n                    \n                        p_select_a\n                        \n                    \n                \n            \n                \n                    \n                        Type :         number\n\n                    \n                \n                \n                    \n                        Default value : -1\n                    \n                \n                        \n                            \n                                Inherited from         OpSequencer\n\n                            \n                        \n                    \n                        \n                                Defined in         OpSequencer:13\n\n                        \n                    \n\n\n        \n    \n    \n        \n            \n                \n                    \n                    \n                            Optional\n                        p_select_b\n                        \n                    \n                \n            \n                \n                    \n                        Type :         number\n\n                    \n                \n                \n                    \n                        Default value : -1\n                    \n                \n                        \n                            \n                                Inherited from         OpSequencer\n\n                            \n                        \n                    \n                        \n                                Defined in         OpSequencer:14\n\n                        \n                    \n\n\n        \n    \n\n\n            \n    \n        Accessors\n    \n        \n            \n                \n                    \n                        \n                        active\n                    \n                \n\n                \n                    \n                        getactive()\n                    \n                \n                            \n                                \n                                    Defined in src/app/player/provider/sequencer.service.ts:31\n                                \n                            \n\n            \n        \n        \n            \n                \n                    \n                        \n                        pos\n                    \n                \n\n                \n                    \n                        getpos()\n                    \n                \n                            \n                                \n                                    Defined in src/app/player/provider/sequencer.service.ts:32\n                                \n                            \n\n            \n        \n\n    \n\n\n    \n        import { Injectable } from '@angular/core';\nimport { OpSequencer, PlayerOp, ChainOp, makeOpSequencer, makeChainOp } from '../model/op_mappings';\n\n/** \n * each chain op in the sequencer has an ID and \n * its position in the sequencer \n */\ninterface ChainIndex {\n  id: number,\n  pos: number, // position in ops array\n}\n\n/** \n * I separated the sequencer into a generic object class\n * AND an Angular service that extends the class. Hopefully\n * that isn't clunky, but it does let me separate methods\n * that are useful to call in the HTML, from the methods\n * that are less often called in HTML\n */\n@Injectable({\n  providedIn: 'root'\n})\nexport class SequencerService extends OpSequencer {\n  // seq_array: OpSequencer;\n  selecting: boolean = false;\n  chains: Array = []; // a number pointing to index in sequencer ops\n\n  // get pos() { return this.seq_array.pos; }\n  // get ops() { return this.seq_array ? this.seq_array.ops : []; }\n  // get current() { return this.seq_array.current; }\n  get active() { return (this.readyToWeave ? true : false); }\n  get pos() { return this._pos; }\n\n  constructor() {\n    super();\n    // this.seq_array = new OpSequencer();\n  }\n\n  addPedals(fwd_pedal: number, select_pedal_a: number, select_pedal_b?: number) {\n    this.mapPedal(fwd_pedal, 'fwd');\n    this.mapPedal(select_pedal_a, 'sel-next');\n    if (select_pedal_b) {\n      this.mapPedal(select_pedal_b, 'sel-back');\n    }\n  }\n\n  addSingleOp(o: PlayerOp) {\n    if (this.active) {\n      this.addOp(o);\n      // console.log(o);\n      // console.log(this.seq);\n    } else {\n      console.log('no sequencer to add to!');\n    }\n  }\n\n  addChainOp(o: PlayerOp) { \n    let ch = makeChainOp([o]);\n    ch.id = this.chains.length;\n    this.chains.push({id: ch.id, pos: this.addOp(ch)});\n  }\n\n  addToChain(ch_id: number, o: PlayerOp) {\n    let ch = this.ops[this.chains[ch_id].pos] as ChainOp;\n    this.ops[this.chains[ch_id].pos] = makeChainOp(ch.ops.concat([o]));\n    console.log(this.ops);\n  }\n\n  // removeOp() { this.seq_array.removeOp(); }\n  // nextOp() { this.seq_array.nextOp(); }\n  // prevOp() { this.seq_array.prevOp(); }\n}\n\n    \n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n                   \n    \n         results matching \"\"\n        \n    \n    \n        No results matching \"\"\n    \n\n"},"classes/Shape.html":{"url":"classes/Shape.html","title":"class - Shape","body":"\n                   \n\n\n\n\n\n\n\n\n\n\n\n\n\n  Classes\n  Shape\n\n\n\n        \n            Info\n        \n        \n            Source\n        \n\n\n\n    \n        \n            File\n        \n        \n            src/app/core/model/shape.ts\n        \n\n\n            \n                Description\n            \n            \n                Definition of Shape object, representing a woven shape\nReserve some number of warp ends for the shape, and track path of\nweft(s) to represent the shape that it is filling.\n\n            \n\n\n\n\n            \n    Index\n    \n        \n                \n                    \n                        Properties\n                    \n                \n                \n                    \n                        \n                            \n                                bounds\n                            \n                            \n                                endCol\n                            \n                            \n                                height\n                            \n                            \n                                id\n                            \n                            \n                                name\n                            \n                            \n                                sett\n                            \n                            \n                                shuttles\n                            \n                            \n                                startCol\n                            \n                            \n                                width\n                            \n                        \n                    \n                \n\n                \n                    \n                        Methods\n                    \n                \n                \n                    \n                        \n                            \n                                addShuttle\n                            \n                            \n                                getHeight\n                            \n                            \n                                getPos\n                            \n                            \n                                getWidth\n                            \n                            \n                                printBounds\n                            \n                            \n                                setEndCol\n                            \n                            \n                                setID\n                            \n                            \n                                setStartCol\n                            \n                            \n                                setWidth\n                            \n                            \n                                updateHeight\n                            \n                        \n                    \n                \n\n\n\n\n\n        \n    \n\n\n            \n    Constructor\n        \n            \n                \n                    \nconstructor()\n                    \n                \n                        \n                            \n                                Defined in src/app/core/model/shape.ts:19\n                            \n                        \n\n                \n                    \n                            Constructor needs width and where the shape is placed\n\n                    \n                \n            \n        \n\n\n            \n    \n    \n        Properties\n    \n    \n        \n            \n                \n                    \n                    \n                        bounds\n                        \n                    \n                \n            \n                \n                    \n                        Type :     Array>\n\n                    \n                \n                    \n                        \n                                Defined in src/app/core/model/shape.ts:19\n                        \n                    \n\n\n        \n    \n    \n        \n            \n                \n                    \n                    \n                        endCol\n                        \n                    \n                \n            \n                \n                    \n                        Type :         number\n\n                    \n                \n                    \n                        \n                                Defined in src/app/core/model/shape.ts:17\n                        \n                    \n\n\n        \n    \n    \n        \n            \n                \n                    \n                    \n                        height\n                        \n                    \n                \n            \n                \n                    \n                        Type :         number\n\n                    \n                \n                    \n                        \n                                Defined in src/app/core/model/shape.ts:15\n                        \n                    \n\n\n        \n    \n    \n        \n            \n                \n                    \n                    \n                        id\n                        \n                    \n                \n            \n                \n                    \n                        Type :         number\n\n                    \n                \n                    \n                        \n                                Defined in src/app/core/model/shape.ts:11\n                        \n                    \n\n\n        \n    \n    \n        \n            \n                \n                    \n                    \n                        name\n                        \n                    \n                \n            \n                \n                    \n                        Type :         string\n\n                    \n                \n                    \n                        \n                                Defined in src/app/core/model/shape.ts:12\n                        \n                    \n\n\n        \n    \n    \n        \n            \n                \n                    \n                    \n                        sett\n                        \n                    \n                \n            \n                \n                    \n                        Type :         number\n\n                    \n                \n                    \n                        \n                                Defined in src/app/core/model/shape.ts:14\n                        \n                    \n\n\n        \n    \n    \n        \n            \n                \n                    \n                    \n                        shuttles\n                        \n                    \n                \n            \n                \n                    \n                        Type :         Array\n\n                    \n                \n                    \n                        \n                                Defined in src/app/core/model/shape.ts:18\n                        \n                    \n\n\n        \n    \n    \n        \n            \n                \n                    \n                    \n                        startCol\n                        \n                    \n                \n            \n                \n                    \n                        Type :         number\n\n                    \n                \n                    \n                        \n                                Defined in src/app/core/model/shape.ts:16\n                        \n                    \n\n\n        \n    \n    \n        \n            \n                \n                    \n                    \n                        width\n                        \n                    \n                \n            \n                \n                    \n                        Type :         number\n\n                    \n                \n                    \n                        \n                                Defined in src/app/core/model/shape.ts:13\n                        \n                    \n\n\n        \n    \n\n\n            \n    \n    \n        Methods\n    \n    \n        \n            \n                \n                    \n                    \n                        addShuttle\n                        \n                    \n                \n            \n            \n                \naddShuttle(shuttle: Shuttle)\n                \n            \n\n\n            \n                \n                    Defined in src/app/core/model/shape.ts:83\n                \n            \n\n\n            \n                \n                    Once given a shuttle, fills out bounds row by row\nimplement in draft.ts? draft has access to shuttle row mapping\n\n\n                    \n                        Parameters :\n                        \n                        \n                            \n                                \n                                    Name\n                                    Type\n                                    Optional\n                                \n                            \n                            \n                                \n                                    shuttle\n                                    \n                                                Shuttle\n                                    \n\n                                    \n                                        No\n                                    \n\n\n                                \n                            \n                        \n                    \n                    \n                    \n                    \n                        Returns :         void\n\n                    \n                    \n                        \n                    \n                \n            \n        \n    \n    \n        \n            \n                \n                    \n                    \n                        getHeight\n                        \n                    \n                \n            \n            \n                \ngetHeight()\n                \n            \n\n\n            \n                \n                    Defined in src/app/core/model/shape.ts:56\n                \n            \n\n\n            \n                \n\n                    \n                        Returns :         number\n\n                    \n                \n            \n        \n    \n    \n        \n            \n                \n                    \n                    \n                        getPos\n                        \n                    \n                \n            \n            \n                \ngetPos()\n                \n            \n\n\n            \n                \n                    Defined in src/app/core/model/shape.ts:60\n                \n            \n\n\n            \n                \n\n                    \n                        Returns :     {}\n\n                    \n                \n            \n        \n    \n    \n        \n            \n                \n                    \n                    \n                        getWidth\n                        \n                    \n                \n            \n            \n                \ngetWidth()\n                \n            \n\n\n            \n                \n                    Defined in src/app/core/model/shape.ts:52\n                \n            \n\n\n            \n                \n\n                    \n                        Returns :         number\n\n                    \n                \n            \n        \n    \n    \n        \n            \n                \n                    \n                    \n                        printBounds\n                        \n                    \n                \n            \n            \n                \nprintBounds()\n                \n            \n\n\n            \n                \n                    Defined in src/app/core/model/shape.ts:66\n                \n            \n\n\n            \n                \n\n                    \n                        Returns :         any\n\n                    \n                \n            \n        \n    \n    \n        \n            \n                \n                    \n                    \n                        setEndCol\n                        \n                    \n                \n            \n            \n                \nsetEndCol(col: number)\n                \n            \n\n\n            \n                \n                    Defined in src/app/core/model/shape.ts:46\n                \n            \n\n\n            \n                \n\n                    \n                        Parameters :\n                        \n                        \n                            \n                                \n                                    Name\n                                    Type\n                                    Optional\n                                \n                            \n                            \n                                \n                                    col\n                                    \n                                                number\n                                    \n\n                                    \n                                        No\n                                    \n\n\n                                \n                            \n                        \n                    \n                    \n                    \n                    \n                        Returns :         void\n\n                    \n                    \n                        \n                    \n                \n            \n        \n    \n    \n        \n            \n                \n                    \n                    \n                        setID\n                        \n                    \n                \n            \n            \n                \nsetID(id: number)\n                \n            \n\n\n            \n                \n                    Defined in src/app/core/model/shape.ts:31\n                \n            \n\n\n            \n                \n\n                    \n                        Parameters :\n                        \n                        \n                            \n                                \n                                    Name\n                                    Type\n                                    Optional\n                                \n                            \n                            \n                                \n                                    id\n                                    \n                                                number\n                                    \n\n                                    \n                                        No\n                                    \n\n\n                                \n                            \n                        \n                    \n                    \n                    \n                    \n                        Returns :         void\n\n                    \n                    \n                        \n                    \n                \n            \n        \n    \n    \n        \n            \n                \n                    \n                    \n                        setStartCol\n                        \n                    \n                \n            \n            \n                \nsetStartCol(col: number)\n                \n            \n\n\n            \n                \n                    Defined in src/app/core/model/shape.ts:42\n                \n            \n\n\n            \n                \n\n                    \n                        Parameters :\n                        \n                        \n                            \n                                \n                                    Name\n                                    Type\n                                    Optional\n                                \n                            \n                            \n                                \n                                    col\n                                    \n                                                number\n                                    \n\n                                    \n                                        No\n                                    \n\n\n                                \n                            \n                        \n                    \n                    \n                    \n                    \n                        Returns :         void\n\n                    \n                    \n                        \n                    \n                \n            \n        \n    \n    \n        \n            \n                \n                    \n                    \n                        setWidth\n                        \n                    \n                \n            \n            \n                \nsetWidth(width: number)\n                \n            \n\n\n            \n                \n                    Defined in src/app/core/model/shape.ts:38\n                \n            \n\n\n            \n                \n\n                    \n                        Parameters :\n                        \n                        \n                            \n                                \n                                    Name\n                                    Type\n                                    Optional\n                                \n                            \n                            \n                                \n                                    width\n                                    \n                                                number\n                                    \n\n                                    \n                                        No\n                                    \n\n\n                                \n                            \n                        \n                    \n                    \n                    \n                    \n                        Returns :         void\n\n                    \n                    \n                        \n                    \n                \n            \n        \n    \n    \n        \n            \n                \n                    \n                    \n                        updateHeight\n                        \n                    \n                \n            \n            \n                \nupdateHeight()\n                \n            \n\n\n            \n                \n                    Defined in src/app/core/model/shape.ts:90\n                \n            \n\n\n            \n                \n                    Update height with Shuttle information and sett\n\n\n                    \n                        Returns :         void\n\n                    \n                \n            \n        \n    \n\n\n\n\n\n\n    \n\n\n    \n        import { Shuttle } from './shuttle';\n\n/**\n * Definition of Shape object, representing a woven shape\n * Reserve some number of warp ends for the shape, and track path of \n * weft(s) to represent the shape that it is filling.\n * @class\n * \n */\nexport class Shape {\n\tid: number;\n\tname: string;\n\twidth: number; // number of warp ends across\n\tsett: number; // number of picks per inch, or maybe warp:weft ratio?\n\theight: number; // multiple of sett, does not necessarily reflect # of rows in draft\n\tstartCol: number; // first warp belonging to shape\n\tendCol: number; // last warp belonging to shape\n\tshuttles: Array; // associated shuttles\n\tbounds: Array> // delimit shape by indicating where each pick starts and ends; each element in Array is Array of length 3 - \n\n\t/**\n\t * Constructor needs width and where the shape is placed\n\t */\n\tconstructor() {\n\t\tthis.shuttles = [];\n\t\tthis.bounds = [];\n\t}\n\n\t// set functions\n\n\tsetID(id: number) {\n\t    this.id = id;\n\t    if (!this.name) {\n\t      this.name = 'Shape ' + (id + 1);\n\t\t}\n\t}\n\n\tsetWidth(width: number) {\n\t\tthis.width = width;\n\t}\n\n\tsetStartCol(col: number) {\n\t\tthis.startCol = col;\n\t}\n\n\tsetEndCol(col: number) {\n\t\tthis.endCol = col;\n\t}\n\n\t// get functions\n\n\tgetWidth() {\n\t\treturn this.width;\n\t}\n\n\tgetHeight() {\n\t\treturn this.height;\n\t}\n\n\tgetPos() {\n\t\tlet pos = [this.startCol, this.endCol];\n\t\treturn pos;\n\t}\n\n\t// returns a string listing all bounds of the Shape\n\tprintBounds() {\n\t\tif (this.bounds.length) {\n\t\t\tlet boundsString = new String;\n\t\t\t// for element in bounds array\n\t\t\tfor (var i = 0; i \n    \n\n\n\n\n\n\n\n\n\n\n                   \n    \n         results matching \"\"\n        \n    \n    \n        No results matching \"\"\n    \n\n"},"classes/Shape-1.html":{"url":"classes/Shape-1.html","title":"class - Shape-1","body":"\n                   \n\n\n\n\n\n\n\n\n\n\n\n\n\n  Classes\n  Shape\n\n\n\n        \n            Info\n        \n        \n            Source\n        \n\n\n\n    \n        \n            File\n        \n        \n            src/app/mixer/model/shape.ts\n        \n\n\n            \n                Description\n            \n            \n                This class manages drafts that are linked to a shaped region.\nIt offers functions to translate between shapes represented as HTML Elements\nand converting them into 2D array's of cells\n\n            \n\n\n\n\n            \n    Index\n    \n        \n                \n                    \n                        Properties\n                    \n                \n                \n                    \n                        \n                            \n                                draft\n                            \n                            \n                                filled\n                            \n                            \n                                img_data\n                            \n                            \n                                scale\n                            \n                        \n                    \n                \n\n                \n                    \n                        Methods\n                    \n                \n                \n                    \n                        \n                            \n                                getDraft\n                            \n                            \n                                getImageData\n                            \n                            \n                                read\n                            \n                            \n                                resample\n                            \n                        \n                    \n                \n\n\n\n\n\n        \n    \n\n\n            \n    Constructor\n        \n            \n                \n                    \nconstructor(shape_canvas: HTMLCanvasElement, bounds: Bounds, scale: number)\n                    \n                \n                        \n                            \n                                Defined in src/app/mixer/model/shape.ts:15\n                            \n                        \n\n                \n                    \n                            \n                                    Parameters :\n                                    \n                                        \n                                            \n                                                Name\n                                                    Type\n                                                Optional\n                                                    Description\n                                            \n                                        \n                                        \n                                                \n                                                        shape_canvas\n                                                  \n                                                        \n                                                                    HTMLCanvasElement\n                                                        \n                                                  \n                                                    \n                                                            No\n                                                    \n                                                    \n                                                        \n                                                                \na canvas with the shape on it\n\n\n                                                        \n                                                \n                                                \n                                                        bounds\n                                                  \n                                                        \n                                                                        Bounds\n                                                        \n                                                  \n                                                    \n                                                            No\n                                                    \n                                                    \n                                                        \n                                                                \nthe bounds of the shape we are converting\n\n\n                                                        \n                                                \n                                                \n                                                        scale\n                                                  \n                                                        \n                                                                        number\n                                                        \n                                                  \n                                                    \n                                                            No\n                                                    \n                                                    \n                                                        \n                                                                \nthe scale of each cell within the canvas.\n\n\n                                                        \n                                                \n                                        \n                                    \n                            \n                    \n                \n            \n        \n\n\n            \n    \n    \n        Properties\n    \n    \n        \n            \n                \n                    \n                    \n                        draft\n                        \n                    \n                \n            \n                \n                    \n                        Type :         Array>\n\n                    \n                \n                    \n                        \n                                Defined in src/app/mixer/model/shape.ts:14\n                        \n                    \n\n\n        \n    \n    \n        \n            \n                \n                    \n                    \n                        filled\n                        \n                    \n                \n            \n                \n                    \n                        Type :         boolean\n\n                    \n                \n                    \n                        \n                                Defined in src/app/mixer/model/shape.ts:15\n                        \n                    \n\n\n        \n    \n    \n        \n            \n                \n                    \n                    \n                        img_data\n                        \n                    \n                \n            \n                \n                    \n                        Type :     ImageData\n\n                    \n                \n                    \n                        \n                                Defined in src/app/mixer/model/shape.ts:12\n                        \n                    \n\n\n        \n    \n    \n        \n            \n                \n                    \n                    \n                        scale\n                        \n                    \n                \n            \n                \n                    \n                        Type :         number\n\n                    \n                \n                    \n                        \n                                Defined in src/app/mixer/model/shape.ts:13\n                        \n                    \n\n\n        \n    \n\n\n            \n    \n    \n        Methods\n    \n    \n        \n            \n                \n                    \n                    \n                        getDraft\n                        \n                    \n                \n            \n            \n                \ngetDraft()\n                \n            \n\n\n            \n                \n                    Defined in src/app/mixer/model/shape.ts:101\n                \n            \n\n\n            \n                \n\n                    \n                        Returns :         Array>\n\n                    \n                \n            \n        \n    \n    \n        \n            \n                \n                    \n                    \n                        getImageData\n                        \n                    \n                \n            \n            \n                \ngetImageData()\n                \n            \n\n\n            \n                \n                    Defined in src/app/mixer/model/shape.ts:35\n                \n            \n\n\n            \n                \n\n                    \n                        Returns :     ImageData\n\n                    \n                \n            \n        \n    \n    \n        \n            \n                \n                    \n                    \n                        read\n                        \n                    \n                \n            \n            \n                \nread()\n                \n            \n\n\n            \n                \n                    Defined in src/app/mixer/model/shape.ts:78\n                \n            \n\n\n            \n                \n                    rescale the draft in its current size to have this number of rows and cols\n\n\n                    \n                        Returns :         Array>\n\n                    \n                \n            \n        \n    \n    \n        \n            \n                \n                    \n                    \n                        resample\n                        \n                    \n                \n            \n            \n                \nresample(rows: number, cols: number)\n                \n            \n\n\n            \n                \n                    Defined in src/app/mixer/model/shape.ts:45\n                \n            \n\n\n            \n                \n                    rescale the draft in its current size to have this number of rows and cols\nnote: this breaks if scale is not a whole number\n\n\n                    \n                        Parameters :\n                        \n                        \n                            \n                                \n                                    Name\n                                    Type\n                                    Optional\n                                \n                            \n                            \n                                \n                                    rows\n                                    \n                                                number\n                                    \n\n                                    \n                                        No\n                                    \n\n\n                                \n                                \n                                    cols\n                                    \n                                                number\n                                    \n\n                                    \n                                        No\n                                    \n\n\n                                \n                            \n                        \n                    \n                    \n                    \n                    \n                        Returns :         Array>\n\n                    \n                    \n                        \n                    \n                \n            \n        \n    \n\n\n\n\n\n\n    \n\n\n    \n        import { Cell } from \"../../core/model/cell\";\nimport { Bounds } from \"../../core/model/datatypes\";\n\n/**\n * @class Shape\n * This class manages drafts that are linked to a shaped region. \n * It offers functions to translate between shapes represented as HTML Elements \n * and converting them into 2D array's of cells\n */\nexport class Shape {\n\n  img_data: ImageData;\n  scale: number;\n  draft: Array>;\n  filled: boolean;\n \n  \n/**\n * @constructor takes a canvas element and bounds and converts it to data. \n * @param shape_canvas - a canvas with the shape on it \n * @param bounds - the bounds of the shape we are converting\n * @param scale - the scale of each cell within the canvas. \n */\n  constructor(shape_canvas: HTMLCanvasElement, bounds:Bounds, scale:number) {\n    this.scale = scale;\n    const context = shape_canvas.getContext('2d');\n    const download = shape_canvas.toDataURL(\"image/png\");\n    // document.write('');\n    console.log(\"scale\", this.scale);\n\n    this.img_data = context.getImageData(bounds.topleft.x, bounds.topleft.y, bounds.width, bounds.height);\n    this.draft = this.resample(Math.floor(bounds.height/scale), Math.floor(bounds.width/scale));\n  };\n\n  getImageData(){\n    return this.img_data;\n  }\n\n\n  /**\n   * rescale the draft in its current size to have this number of rows and cols\n   * note: this breaks if scale is not a whole number\n   * @param bounds \n   */\n  resample(rows: number, cols: number):Array>{\n\n    this.draft = [];\n    //const margin: number = this.scale/2; // used to check the center of cells\n    const margin = 0;\n    for(let i = 0; i = 150){\n        //   console.log(i, j, \"set\");\n        // }else if(p_grn >{\n    return this.draft;\n  }\n  \n}\n\n    \n\n\n\n\n\n\n\n\n\n\n                   \n    \n         results matching \"\"\n        \n    \n    \n        No results matching \"\"\n    \n\n"},"classes/Shuttle.html":{"url":"classes/Shuttle.html","title":"class - Shuttle","body":"\n                   \n\n\n\n\n\n\n\n\n\n\n\n\n\n  Classes\n  Shuttle\n\n\n\n        \n            Info\n        \n        \n            Source\n        \n\n\n\n    \n        \n            File\n        \n        \n            src/app/core/model/shuttle.ts\n        \n\n\n            \n                Description\n            \n            \n                Definition of Shuttle object.\na shuttle inhertis from a material.\n\n            \n\n\n\n\n            \n    Index\n    \n        \n                \n                    \n                        Properties\n                    \n                \n                \n                    \n                        \n                            \n                                color\n                            \n                            \n                                    Optional\n                                endLabel\n                            \n                            \n                                id\n                            \n                            \n                                insert\n                            \n                            \n                                name\n                            \n                            \n                                notes\n                            \n                            \n                                    Optional\n                                startLabel\n                            \n                            \n                                thickness\n                            \n                            \n                                type\n                            \n                            \n                                visible\n                            \n                        \n                    \n                \n\n                \n                    \n                        Methods\n                    \n                \n                \n                    \n                        \n                            \n                                getColor\n                            \n                            \n                                getId\n                            \n                            \n                                getName\n                            \n                            \n                                getThickness\n                            \n                            \n                                getType\n                            \n                            \n                                setColor\n                            \n                            \n                                setID\n                            \n                            \n                                setThickness\n                            \n                            \n                                setType\n                            \n                            \n                                setVisible\n                            \n                            \n                                updateVariables\n                            \n                        \n                    \n                \n\n\n\n\n\n        \n    \n\n\n            \n    Constructor\n        \n            \n                \n                    \nconstructor(shuttleDict: null)\n                    \n                \n                        \n                            \n                                Defined in src/app/core/model/shuttle.ts:17\n                            \n                        \n\n                \n                    \n                            \n                                    Parameters :\n                                    \n                                        \n                                            \n                                                Name\n                                                    Type\n                                                Optional\n                                            \n                                        \n                                        \n                                                \n                                                        shuttleDict\n                                                  \n                                                        \n                                                                    null\n                                                        \n                                                  \n                                                    \n                                                            No\n                                                    \n                                                    \n                                                \n                                        \n                                    \n                            \n                    \n                \n            \n        \n\n\n            \n    \n    \n        Properties\n    \n    \n        \n            \n                \n                    \n                    \n                        color\n                        \n                    \n                \n            \n                \n                    \n                        Type :         string\n\n                    \n                \n                    \n                        \n                                Defined in src/app/core/model/shuttle.ts:11\n                        \n                    \n\n\n        \n    \n    \n        \n            \n                \n                    \n                    \n                            Optional\n                        endLabel\n                        \n                    \n                \n            \n                \n                    \n                        Type :         string\n\n                    \n                \n                    \n                        \n                                Defined in src/app/core/model/shuttle.ts:16\n                        \n                    \n\n\n        \n    \n    \n        \n            \n                \n                    \n                    \n                        id\n                        \n                    \n                \n            \n                \n                    \n                        Type :         number\n\n                    \n                \n                    \n                        \n                                Defined in src/app/core/model/shuttle.ts:7\n                        \n                    \n\n\n        \n    \n    \n        \n            \n                \n                    \n                    \n                        insert\n                        \n                    \n                \n            \n                \n                    \n                        Type :         boolean\n\n                    \n                \n                    \n                        \n                                Defined in src/app/core/model/shuttle.ts:9\n                        \n                    \n\n\n        \n    \n    \n        \n            \n                \n                    \n                    \n                        name\n                        \n                    \n                \n            \n                \n                    \n                        Type :         string\n\n                    \n                \n                    \n                        \n                                Defined in src/app/core/model/shuttle.ts:8\n                        \n                    \n\n\n        \n    \n    \n        \n            \n                \n                    \n                    \n                        notes\n                        \n                    \n                \n            \n                \n                    \n                        Type :         string\n\n                    \n                \n                    \n                        \n                                Defined in src/app/core/model/shuttle.ts:17\n                        \n                    \n\n\n        \n    \n    \n        \n            \n                \n                    \n                    \n                            Optional\n                        startLabel\n                        \n                    \n                \n            \n                \n                    \n                        Type :         string\n\n                    \n                \n                    \n                        \n                                Defined in src/app/core/model/shuttle.ts:15\n                        \n                    \n\n\n        \n    \n    \n        \n            \n                \n                    \n                    \n                        thickness\n                        \n                    \n                \n            \n                \n                    \n                        Type :         number\n\n                    \n                \n                    \n                        \n                                Defined in src/app/core/model/shuttle.ts:12\n                        \n                    \n\n\n        \n    \n    \n        \n            \n                \n                    \n                    \n                        type\n                        \n                    \n                \n            \n                \n                    \n                        Type :         number\n\n                    \n                \n                    \n                        \n                                Defined in src/app/core/model/shuttle.ts:13\n                        \n                    \n\n\n        \n    \n    \n        \n            \n                \n                    \n                    \n                        visible\n                        \n                    \n                \n            \n                \n                    \n                        Type :         boolean\n\n                    \n                \n                    \n                        \n                                Defined in src/app/core/model/shuttle.ts:10\n                        \n                    \n\n\n        \n    \n\n\n            \n    \n    \n        Methods\n    \n    \n        \n            \n                \n                    \n                    \n                        getColor\n                        \n                    \n                \n            \n            \n                \ngetColor()\n                \n            \n\n\n            \n                \n                    Defined in src/app/core/model/shuttle.ts:80\n                \n            \n\n\n            \n                \n\n                    \n                        Returns :         string\n\n                    \n                \n            \n        \n    \n    \n        \n            \n                \n                    \n                    \n                        getId\n                        \n                    \n                \n            \n            \n                \ngetId()\n                \n            \n\n\n            \n                \n                    Defined in src/app/core/model/shuttle.ts:59\n                \n            \n\n\n            \n                \n\n                    \n                        Returns :         number\n\n                    \n                \n            \n        \n    \n    \n        \n            \n                \n                    \n                    \n                        getName\n                        \n                    \n                \n            \n            \n                \ngetName()\n                \n            \n\n\n            \n                \n                    Defined in src/app/core/model/shuttle.ts:92\n                \n            \n\n\n            \n                \n\n                    \n                        Returns :         string\n\n                    \n                \n            \n        \n    \n    \n        \n            \n                \n                    \n                    \n                        getThickness\n                        \n                    \n                \n            \n            \n                \ngetThickness()\n                \n            \n\n\n            \n                \n                    Defined in src/app/core/model/shuttle.ts:84\n                \n            \n\n\n            \n                \n\n                    \n                        Returns :         number\n\n                    \n                \n            \n        \n    \n    \n        \n            \n                \n                    \n                    \n                        getType\n                        \n                    \n                \n            \n            \n                \ngetType()\n                \n            \n\n\n            \n                \n                    Defined in src/app/core/model/shuttle.ts:88\n                \n            \n\n\n            \n                \n\n                    \n                        Returns :         number\n\n                    \n                \n            \n        \n    \n    \n        \n            \n                \n                    \n                    \n                        setColor\n                        \n                    \n                \n            \n            \n                \nsetColor(color: string)\n                \n            \n\n\n            \n                \n                    Defined in src/app/core/model/shuttle.ts:63\n                \n            \n\n\n            \n                \n\n                    \n                        Parameters :\n                        \n                        \n                            \n                                \n                                    Name\n                                    Type\n                                    Optional\n                                \n                            \n                            \n                                \n                                    color\n                                    \n                                                string\n                                    \n\n                                    \n                                        No\n                                    \n\n\n                                \n                            \n                        \n                    \n                    \n                    \n                    \n                        Returns :         void\n\n                    \n                    \n                        \n                    \n                \n            \n        \n    \n    \n        \n            \n                \n                    \n                    \n                        setID\n                        \n                    \n                \n            \n            \n                \nsetID(id: number)\n                \n            \n\n\n            \n                \n                    Defined in src/app/core/model/shuttle.ts:52\n                \n            \n\n\n            \n                \n\n                    \n                        Parameters :\n                        \n                        \n                            \n                                \n                                    Name\n                                    Type\n                                    Optional\n                                \n                            \n                            \n                                \n                                    id\n                                    \n                                                number\n                                    \n\n                                    \n                                        No\n                                    \n\n\n                                \n                            \n                        \n                    \n                    \n                    \n                    \n                        Returns :         void\n\n                    \n                    \n                        \n                    \n                \n            \n        \n    \n    \n        \n            \n                \n                    \n                    \n                        setThickness\n                        \n                    \n                \n            \n            \n                \nsetThickness(n: number)\n                \n            \n\n\n            \n                \n                    Defined in src/app/core/model/shuttle.ts:67\n                \n            \n\n\n            \n                \n\n                    \n                        Parameters :\n                        \n                        \n                            \n                                \n                                    Name\n                                    Type\n                                    Optional\n                                \n                            \n                            \n                                \n                                    n\n                                    \n                                                number\n                                    \n\n                                    \n                                        No\n                                    \n\n\n                                \n                            \n                        \n                    \n                    \n                    \n                    \n                        Returns :         void\n\n                    \n                    \n                        \n                    \n                \n            \n        \n    \n    \n        \n            \n                \n                    \n                    \n                        setType\n                        \n                    \n                \n            \n            \n                \nsetType(type: number)\n                \n            \n\n\n            \n                \n                    Defined in src/app/core/model/shuttle.ts:72\n                \n            \n\n\n            \n                \n\n                    \n                        Parameters :\n                        \n                        \n                            \n                                \n                                    Name\n                                    Type\n                                    Optional\n                                \n                            \n                            \n                                \n                                    type\n                                    \n                                                number\n                                    \n\n                                    \n                                        No\n                                    \n\n\n                                \n                            \n                        \n                    \n                    \n                    \n                    \n                        Returns :         void\n\n                    \n                    \n                        \n                    \n                \n            \n        \n    \n    \n        \n            \n                \n                    \n                    \n                        setVisible\n                        \n                    \n                \n            \n            \n                \nsetVisible(visible: boolean)\n                \n            \n\n\n            \n                \n                    Defined in src/app/core/model/shuttle.ts:76\n                \n            \n\n\n            \n                \n\n                    \n                        Parameters :\n                        \n                        \n                            \n                                \n                                    Name\n                                    Type\n                                    Optional\n                                \n                            \n                            \n                                \n                                    visible\n                                    \n                                                boolean\n                                    \n\n                                    \n                                        No\n                                    \n\n\n                                \n                            \n                        \n                    \n                    \n                    \n                    \n                        Returns :         void\n\n                    \n                    \n                        \n                    \n                \n            \n        \n    \n    \n        \n            \n                \n                    \n                    \n                        updateVariables\n                        \n                    \n                \n            \n            \n                \nupdateVariables(undefined)\n                \n            \n\n\n            \n                \n                    Defined in src/app/core/model/shuttle.ts:36\n                \n            \n\n\n            \n                \n\n                    \n                        Parameters :\n                        \n                        \n                            \n                                \n                                    Name\n                                    Optional\n                                \n                            \n                            \n                                \n\n                                    \n                                        No\n                                    \n\n\n                                \n                            \n                        \n                    \n                    \n                    \n                    \n                        Returns :         void\n\n                    \n                    \n                        \n                    \n                \n            \n        \n    \n\n\n\n\n\n\n    \n\n\n    \n        export class Shuttle {\n  id: number;\n  name: string;\n  insert: boolean; //true is left, false is right\n  visible: boolean;\n  color: string;\n  thickness: number; //percentage of base dims\n  type: number;\n  // image?: any;\n  startLabel?: string;\n  endLabel?: string;\n  notes: string;\n\n\n  constructor(shuttleDict = null) {\n\n    //defaults\n    this.id = -1;\n    this.name=\"\";\n    this.insert = true;\n    this.visible = true;\n    this.color=\"#666666\";\n    this.thickness=100;\n    this.type = 0;\n    this.notes = \"\";\n\n    if (shuttleDict) this.updateVariables(shuttleDict);\n\n  }\n\n  updateVariables({id, name, insert, visible, color, thickness, type, notes}) {\n    \n    this.id = id;\n    this.name = name;\n    this.insert = insert;\n    this.visible = visible;\n    this.color = color;\n    this.thickness = thickness;\n    this.type = type;\n    if(this.type === undefined) this.type = 0;\n  // this.image = image;\n    // this.startLabel = startLabel;\n    // this.endLabel = endLabel;\n    this.notes = notes;\n  }\n\n  setID(id: number) {\n    this.id = id;\n    if (!this.name) {\n      this.name = 'Shuttle ' + (id + 1);\n    }\n  }\n\n  getId(){\n    return this.id;\n  }\n\n  setColor(color: string) {\n    this.color = color;\n  }\n\n  setThickness(n: number) {\n    this.thickness = n;\n  }\n\n  //indexs into type list\n  setType(type: number) {\n    this.type = type;\n  }\n\n  setVisible(visible:boolean){\n    this.visible = visible;\n  }\n\n  getColor() {\n    return this.color;\n  }\n\n  getThickness() {\n    return this.thickness;\n  }\n\n  getType() {\n    return this.type;\n  }\n\n  getName(){\n    return this.name;\n  }\n\n}\n    \n\n\n\n\n\n\n\n\n\n\n                   \n    \n         results matching \"\"\n        \n    \n    \n        No results matching \"\"\n    \n\n"},"components/SnackbarComponent.html":{"url":"components/SnackbarComponent.html","title":"component - SnackbarComponent","body":"\n                   \n\n\n\n\n\n  Components\n  \n  SnackbarComponent\n\n\n\n        \n            Info\n        \n        \n            Source\n        \n        \n            Template\n        \n        \n            Styles\n        \n        \n            DOM Tree\n        \n\n\n\n    \n    File\n\n\n    src/app/mixer/palette/snackbar/snackbar.component.ts\n\n\n\n\n\n    \n        Implements\n    \n    \n                    OnInit\n    \n\n\n\n    Metadata\n    \n        \n\n\n\n\n\n\n\n\n\n\n\n            \n                selector\n                app-snackbar\n            \n\n            \n                styleUrls\n                ./snackbar.component.scss\n            \n\n\n\n            \n                templateUrl\n                ./snackbar.component.html\n            \n\n\n\n\n\n\n\n\n        \n    \n\n\n    \n    Index\n    \n        \n                \n                    \n                        Properties\n                    \n                \n                \n                    \n                        \n                            \n                                bounds\n                            \n                            \n                                    Public\n                                data\n                            \n                            \n                                message\n                            \n                            \n                                scale\n                            \n                        \n                    \n                \n\n                \n                    \n                        Methods\n                    \n                \n                \n                    \n                        \n                            \n                                ngOnInit\n                            \n                        \n                    \n                \n\n\n\n\n\n        \n    \n\n\n    \n    Constructor\n        \n            \n                \n                    \nconstructor(data: any)\n                    \n                \n                        \n                            \n                                Defined in src/app/mixer/palette/snackbar/snackbar.component.ts:15\n                            \n                        \n\n                \n                    \n                            \n                                    Parameters :\n                                    \n                                        \n                                            \n                                                Name\n                                                    Type\n                                                Optional\n                                            \n                                        \n                                        \n                                                \n                                                        data\n                                                  \n                                                        \n                                                                        any\n                                                        \n                                                  \n                                                    \n                                                            No\n                                                    \n                                                    \n                                                \n                                        \n                                    \n                            \n                    \n                \n            \n        \n\n\n\n\n\n\n    \n    \n    \n        Methods\n    \n    \n        \n            \n                \n                    \n                    \n                        ngOnInit\n                        \n                    \n                \n            \n            \n                \nngOnInit()\n                \n            \n\n\n            \n                \n                    Defined in src/app/mixer/palette/snackbar/snackbar.component.ts:23\n                \n            \n\n\n            \n                \n\n                    \n                        Returns :         void\n\n                    \n                \n            \n        \n    \n\n    \n    \n    \n        Properties\n    \n    \n        \n            \n                \n                    \n                    \n                        bounds\n                        \n                    \n                \n            \n                \n                    \n                        Type :         Bounds\n\n                    \n                \n                    \n                        \n                                Defined in src/app/mixer/palette/snackbar/snackbar.component.ts:13\n                        \n                    \n\n\n        \n    \n    \n        \n            \n                \n                    \n                    \n                            Public\n                        data\n                        \n                    \n                \n            \n                \n                    \n                        Type :         any\n\n                    \n                \n                \n                    \n                        Decorators : \n                        \n                        \n                            @Inject(MAT_SNACK_BAR_DATA)\n                        \n                    \n                \n                    \n                        \n                                Defined in src/app/mixer/palette/snackbar/snackbar.component.ts:17\n                        \n                    \n\n\n        \n    \n    \n        \n            \n                \n                    \n                    \n                        message\n                        \n                    \n                \n            \n                \n                    \n                        Type :         string\n\n                    \n                \n                    \n                        \n                                Defined in src/app/mixer/palette/snackbar/snackbar.component.ts:14\n                        \n                    \n\n\n        \n    \n    \n        \n            \n                \n                    \n                    \n                        scale\n                        \n                    \n                \n            \n                \n                    \n                        Type :         number\n\n                    \n                \n                    \n                        \n                                Defined in src/app/mixer/palette/snackbar/snackbar.component.ts:15\n                        \n                    \n\n\n        \n    \n\n\n\n\n\n    \n        import { Component, OnInit, Inject } from '@angular/core';\nimport {MAT_SNACK_BAR_DATA} from '@angular/material/snack-bar';\nimport { Bounds } from '../../../core/model/datatypes';\n\n\n@Component({\n  selector: 'app-snackbar',\n  templateUrl: './snackbar.component.html',\n  styleUrls: ['./snackbar.component.scss']\n})\nexport class SnackbarComponent implements OnInit {\n\n  bounds: Bounds;\n  message: string;\n  scale: number;\n\n  constructor(@Inject(MAT_SNACK_BAR_DATA) public data: any) { \n    this.bounds = data.bounds;\n    this.message = data.message;\n    this.scale = data.scale;\n  }\n\n  ngOnInit() {\n  }\n\n}\n\n    \n\n    \n        \n\n    \n        dims:({{bounds.width}}, {{bounds.height}})\n    -->\n     \n        {{message}}\n    \n\n\n\n    \n\n    \n                \n                    ./snackbar.component.scss\n                \n                .snackbar{\n    display: flex;\n    flex-direction: row;\n    justify-content:space-evenly;\n    pointer-events: none;\n    width: 100%;\n\n}\n\n.pink{\n    color: #00d1b2;\n    font-weight: bold;\n    padding-left: 1em;\n}\n    \n\n    \n        \n        \n            \n                Legend\n            \n            \n                Html element\n            \n            \n                Component\n            \n            \n                Html element with directive\n            \n        \n    \n\n    \n\n\n\n\n\n\n        var COMPONENT_TEMPLATE = '            dims:({{bounds.width}}, {{bounds.height}})    -->             {{message}}    '\n    var COMPONENTS = [{'name': 'ConnectionComponent', 'selector': 'app-connection'},{'name': 'DraftdetailComponent', 'selector': 'app-draftdetail'},{'name': 'ImageComponent', 'selector': 'app-image'},{'name': 'InletComponent', 'selector': 'app-inlet'},{'name': 'MixerComponent', 'selector': 'app-mixer'},{'name': 'MixerViewComponent', 'selector': 'app-mixerview'},{'name': 'NoteComponent', 'selector': 'app-note'},{'name': 'OperationComponent', 'selector': 'app-operation'},{'name': 'OpHelpModal', 'selector': 'app-ophelp'},{'name': 'OpsComponent', 'selector': 'app-ops'},{'name': 'OpSequencerComponent', 'selector': 'app-op-sequencer'},{'name': 'PaletteComponent', 'selector': 'app-palette'},{'name': 'ParameterComponent', 'selector': 'app-parameter'},{'name': 'PlayerComponent', 'selector': 'app-player'},{'name': 'SnackbarComponent', 'selector': 'app-snackbar'},{'name': 'SubdraftComponent', 'selector': 'app-subdraft'},{'name': 'VirtualPedalsComponent', 'selector': 'app-virtual-pedals'},{'name': 'WeavingStateComponent', 'selector': 'app-weaving-state'}];\n    var DIRECTIVES = [{'name': 'MarqueeComponent', 'selector': 'app-marquee'},{'name': 'SelectionComponent', 'selector': 'app-selection'}];\n    var ACTUAL_COMPONENT = {'name': 'SnackbarComponent'};\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n                   \n    \n         results matching \"\"\n        \n    \n    \n        No results matching \"\"\n    \n\n"},"interfaces/StatusMessage.html":{"url":"interfaces/StatusMessage.html","title":"interface - StatusMessage","body":"\n                   \n\n\n\n\n\n\n\n\n\n\n\n\n\n\n  Interfaces\n  \n  StatusMessage\n\n\n\n        \n            Info\n        \n        \n            Source\n        \n\n\n\n    \n        \n            File\n        \n        \n            src/app/core/model/datatypes/files.ts\n        \n\n\n\n\n        \n            Index\n            \n                \n                    \n                        \n                            Properties\n                        \n                    \n                    \n                        \n                            \n                                \n                                        \n                                            id\n                                        \n                                \n                                \n                                        \n                                            message\n                                        \n                                \n                                \n                                        \n                                            success\n                                        \n                                \n                            \n                        \n                    \n                \n            \n        \n\n\n\n            \n                Properties\n                    \n                        \n                                \n                                    \n                                        \n                                        id\n                                            \n                                                \n                                            \n                                        \n                                    \n                                \n                                \n                                    \n                                        id:         number\n\n                                    \n                                \n\n\n                                    \n                                        \n                                            Type :         number\n\n                                        \n                                    \n\n\n\n\n\n                        \n                    \n                    \n                        \n                                \n                                    \n                                        \n                                        message\n                                            \n                                                \n                                            \n                                        \n                                    \n                                \n                                \n                                    \n                                        message:         string\n\n                                    \n                                \n\n\n                                    \n                                        \n                                            Type :         string\n\n                                        \n                                    \n\n\n\n\n\n                        \n                    \n                    \n                        \n                                \n                                    \n                                        \n                                        success\n                                            \n                                                \n                                            \n                                        \n                                    \n                                \n                                \n                                    \n                                        success:         boolean\n\n                                    \n                                \n\n\n                                    \n                                        \n                                            Type :         boolean\n\n                                        \n                                    \n\n\n\n\n\n                        \n                    \n            \n    \n\n\n    \n        import { Draft } from './drafts';\nimport { Loom, LoomSettings } from './looms';\nimport { Shuttle } from '../shuttle';\nimport { Note } from '../../provider/notes.service';\nimport { Bounds } from './screenlayout';\n\n/****** OBJECTS/TYPES FOR LOADING AND SAVING FILES *****/\n\n/**\n * holds data about each node/component in a form to easily load.\n * @param node_id the id of this node within the tree\n * @param type the type of node\n * @param bounds the screen position and size data for this node\n */\nexport interface NodeComponentProxy {\n    node_id: number,\n    type: string,\n    bounds: Bounds\n  }\n  \n  /**\n   * stores a sparce version of a tree node for easy reloading\n   * @param node the node id this treenode refers too\n   * @param parent the node id of the parent node for this treenode\n   * @param inputs an array of treenode ids for all values coming into this node\n   * @param outputs an array of treenode ids for all downstream functions \n   */\n   export interface TreeNodeProxy {\n    node: number,\n    parent: number; \n    inputs: Array;\n    outputs: Array; \n   }\n  \n    /**\n    * holds data about each draft component in a compressed form \n    * @param draft_id the draft id associated with this node (if available)\n   * @param draft_visible a boolean to state if this node is visible or not. \n   * @param draft_name a string representing a user defined name\n   * @param draft this will only export if the draft is a seed draft\n   * @param loom this will only export if the draft is a seed draft \n   * @param loom_settings the associated loom settings on this node, if present\n    */\n  \n    export interface DraftNodeProxy {\n      node_id: number;\n      draft_id: number;\n      draft_name: string;\n      draft: Draft;\n      draft_visible: boolean;\n      loom: Loom,\n      loom_settings: LoomSettings;\n    }\n  \n  /**\n    * a sparce form of an operaction component to use for saving\n    * @param node_id the node id this object refers too\n    * @param name the name of the operation at this node\n    * @param params the list of input parameters to this operation\n    * @param inlets the let of inlets and associated values \n    */\n  export interface OpComponentProxy {\n    node_id: number,\n    name: string,\n    params: Array, \n    inlets: Array;\n  }\n  \n  \n   /**\n    * describes the data from the workspace that is saved.\n    */\n   export interface SaveObj {\n    version: string,\n    workspace: any,\n    type: string,\n    nodes: Array,\n    tree: Array,\n    draft_nodes: Array,\n    ops: Array,\n    notes: Array,\n    materials: Array,\n    scale: number\n   }\n  \n  export interface FileObj {\n   version: string,\n   workspace: any,\n   filename: string,\n   nodes: Array,\n   treenodes: Array,\n   draft_nodes: Array,\n   ops: Array\n   scale: number\n  }\n  \n  export interface StatusMessage {\n    id: number,\n    message: string,\n    success: boolean\n  }\n  \n  export interface LoadResponse {\n    data: FileObj,\n    status: number;\n  }\n  \n  export interface Fileloader {\n    ada: (filename: string, data: any) => Promise,\n    //wif: (filename: string, data: any) => Promise,\n    //bmp: (filename: string, data: any) => Promise,\n    //jpg: (filename: string, data: any) => Promise,\n    form: (data: any) => Promise}\n  \n  export interface FileSaver {\n    ada: (type: string, for_timeline:boolean, current_scale: number) => Promise,\n    //wif: (draft: Draft, loom: Loom) => Promise,\n    bmp: (canvas: HTMLCanvasElement) => Promise,\n    jpg: (canvas: HTMLCanvasElement) => Promise\n  }\n    \n\n\n\n\n\n\n\n\n\n                   \n    \n         results matching \"\"\n        \n    \n    \n        No results matching \"\"\n    \n\n"},"classes/System.html":{"url":"classes/System.html","title":"class - System","body":"\n                   \n\n\n\n\n\n\n\n\n\n\n\n\n\n  Classes\n  System\n\n\n\n        \n            Info\n        \n        \n            Source\n        \n\n\n\n    \n        \n            File\n        \n        \n            src/app/core/model/system.ts\n        \n\n\n            \n                Description\n            \n            \n                Definition of System object.\na system describes a structural relationship between rows and wefts. Used in overshot, mutipic structures, or adding conductive rows\n\n            \n\n\n\n\n            \n    Index\n    \n        \n                \n                    \n                        Properties\n                    \n                \n                \n                    \n                        \n                            \n                                id\n                            \n                            \n                                in_use\n                            \n                            \n                                name\n                            \n                            \n                                notes\n                            \n                            \n                                visible\n                            \n                        \n                    \n                \n\n                \n                    \n                        Methods\n                    \n                \n                \n                    \n                        \n                            \n                                getChar\n                            \n                            \n                                isVisible\n                            \n                            \n                                setID\n                            \n                            \n                                setVisible\n                            \n                            \n                                updateVariables\n                            \n                        \n                    \n                \n\n\n\n\n\n        \n    \n\n\n            \n    Constructor\n        \n            \n                \n                    \nconstructor(systemDict: null)\n                    \n                \n                        \n                            \n                                Defined in src/app/core/model/system.ts:13\n                            \n                        \n\n                \n                    \n                            \n                                    Parameters :\n                                    \n                                        \n                                            \n                                                Name\n                                                    Type\n                                                Optional\n                                            \n                                        \n                                        \n                                                \n                                                        systemDict\n                                                  \n                                                        \n                                                                    null\n                                                        \n                                                  \n                                                    \n                                                            No\n                                                    \n                                                    \n                                                \n                                        \n                                    \n                            \n                    \n                \n            \n        \n\n\n            \n    \n    \n        Properties\n    \n    \n        \n            \n                \n                    \n                    \n                        id\n                        \n                    \n                \n            \n                \n                    \n                        Type :         number\n\n                    \n                \n                    \n                        \n                                Defined in src/app/core/model/system.ts:9\n                        \n                    \n\n\n        \n    \n    \n        \n            \n                \n                    \n                    \n                        in_use\n                        \n                    \n                \n            \n                \n                    \n                        Type :         boolean\n\n                    \n                \n                    \n                        \n                                Defined in src/app/core/model/system.ts:13\n                        \n                    \n\n\n        \n    \n    \n        \n            \n                \n                    \n                    \n                        name\n                        \n                    \n                \n            \n                \n                    \n                        Type :         string\n\n                    \n                \n                    \n                        \n                                Defined in src/app/core/model/system.ts:10\n                        \n                    \n\n\n        \n    \n    \n        \n            \n                \n                    \n                    \n                        notes\n                        \n                    \n                \n            \n                \n                    \n                        Type :         string\n\n                    \n                \n                    \n                        \n                                Defined in src/app/core/model/system.ts:11\n                        \n                    \n\n\n        \n    \n    \n        \n            \n                \n                    \n                    \n                        visible\n                        \n                    \n                \n            \n                \n                    \n                        Type :         boolean\n\n                    \n                \n                    \n                        \n                                Defined in src/app/core/model/system.ts:12\n                        \n                    \n\n\n        \n    \n\n\n            \n    \n    \n        Methods\n    \n    \n        \n            \n                \n                    \n                    \n                        getChar\n                        \n                    \n                \n            \n            \n                \ngetChar()\n                \n            \n\n\n            \n                \n                    Defined in src/app/core/model/system.ts:49\n                \n            \n\n\n            \n                \n\n                    \n                        Returns :         any\n\n                    \n                \n            \n        \n    \n    \n        \n            \n                \n                    \n                    \n                        isVisible\n                        \n                    \n                \n            \n            \n                \nisVisible()\n                \n            \n\n\n            \n                \n                    Defined in src/app/core/model/system.ts:41\n                \n            \n\n\n            \n                \n\n                    \n                        Returns :         boolean\n\n                    \n                \n            \n        \n    \n    \n        \n            \n                \n                    \n                    \n                        setID\n                        \n                    \n                \n            \n            \n                \nsetID(id: number)\n                \n            \n\n\n            \n                \n                    Defined in src/app/core/model/system.ts:34\n                \n            \n\n\n            \n                \n\n                    \n                        Parameters :\n                        \n                        \n                            \n                                \n                                    Name\n                                    Type\n                                    Optional\n                                \n                            \n                            \n                                \n                                    id\n                                    \n                                                number\n                                    \n\n                                    \n                                        No\n                                    \n\n\n                                \n                            \n                        \n                    \n                    \n                    \n                    \n                        Returns :         void\n\n                    \n                    \n                        \n                    \n                \n            \n        \n    \n    \n        \n            \n                \n                    \n                    \n                        setVisible\n                        \n                    \n                \n            \n            \n                \nsetVisible(bool: boolean)\n                \n            \n\n\n            \n                \n                    Defined in src/app/core/model/system.ts:45\n                \n            \n\n\n            \n                \n\n                    \n                        Parameters :\n                        \n                        \n                            \n                                \n                                    Name\n                                    Type\n                                    Optional\n                                \n                            \n                            \n                                \n                                    bool\n                                    \n                                                boolean\n                                    \n\n                                    \n                                        No\n                                    \n\n\n                                \n                            \n                        \n                    \n                    \n                    \n                    \n                        Returns :         void\n\n                    \n                    \n                        \n                    \n                \n            \n        \n    \n    \n        \n            \n                \n                    \n                    \n                        updateVariables\n                        \n                    \n                \n            \n            \n                \nupdateVariables(undefined)\n                \n            \n\n\n            \n                \n                    Defined in src/app/core/model/system.ts:27\n                \n            \n\n\n            \n                \n\n                    \n                        Parameters :\n                        \n                        \n                            \n                                \n                                    Name\n                                    Optional\n                                \n                            \n                            \n                                \n\n                                    \n                                        No\n                                    \n\n\n                                \n                            \n                        \n                    \n                    \n                    \n                    \n                        Returns :         void\n\n                    \n                    \n                        \n                    \n                \n            \n        \n    \n\n\n\n\n\n\n    \n\n\n    \n        import utilInstance from \"./util\";\n\n/**\n * Definition of System object.\n* a system describes a structural relationship between rows and wefts. Used in overshot, mutipic structures, or adding conductive rows\n * @class\n */\nexport class System {\n  id: number;\n  name: string;\n  notes: string;\n  visible: boolean;\n  in_use: boolean;\n\n  constructor(systemDict = null) {\n\n    //defaults\n    this.id = 0;\n    this.name = \"weft system\"\n    this.notes = \"\";\n    this.visible = true;\n    this.in_use = false;\n\n    if (systemDict) this.updateVariables(systemDict);\n  }\n\n  updateVariables({id, name, notes, visible}) {\n    this.id = id;\n    this.name = name;\n    this.notes = notes;\n    this.visible = visible;\n  }\n\n  setID(id: number) {\n    this.id = id;\n    if (!this.name) {\n      this.name = 'System ' + (id + 1);\n    }\n  }\n\n  isVisible(){\n    return this.visible;\n  }\n\n  setVisible(bool: boolean) {\n    this.visible = bool;\n  }\n\n  getChar(){\n    return String.fromCharCode(97 + this.id)\n  }\n\n}\n\n/**\n   * takes system maps and makes them all unique by adding a base value to the n+1th map. This helps when interlacing \n   * drafts that have different system mappings, and making sure they are each unique. \n   * This function will also return standard sized arrays = to the maximum sized input\n   * @param systems the system mappings to compare\n   */\nexport function makeSystemsUnique(systems: Array>) : Array> {\n\n  if (systems.length === 0) return [];\n\n\n  const max_in_systems: Array = systems.map(el => utilInstance.getArrayMax(el));\n \n  let last_max = 0;\n  const unique_systems = systems.map((sys, ndx) => {\n    if(ndx > 0){\n      last_max += (max_in_systems[ndx -1]+1)\n      return sys.map(el => el + last_max);\n    }else{\n      return sys;\n    }\n  });  \n\n   //standardize teh lengths of all the returned arrays \n   const max_length:number = unique_systems.reduce((acc, el) => {\n    const len = el.length;\n    if(len > acc) return len;\n    else return acc;\n  }, 0);\n\n  unique_systems.forEach((sys, ndx) => {\n    if(sys.length \n    \n\n\n\n\n\n\n\n\n\n\n                   \n    \n         results matching \"\"\n        \n    \n    \n        No results matching \"\"\n    \n\n"},"interfaces/TopologyDef.html":{"url":"interfaces/TopologyDef.html","title":"interface - TopologyDef","body":"\n                   \n\n\n\n\n\n\n\n\n\n\n\n\n\n\n  Interfaces\n  \n  TopologyDef\n\n\n\n        \n            Info\n        \n        \n            Source\n        \n\n\n\n    \n        \n            File\n        \n        \n            src/app/mixer/model/operation/topology.ts\n        \n\n\n\n\n        \n            Index\n            \n                \n                    \n                        \n                            Properties\n                        \n                    \n                    \n                        \n                            \n                                \n                                        \n                                            input\n                                        \n                                \n                                \n                                        \n                                            output\n                                        \n                                \n                                \n                                        \n                                            type\n                                        \n                                \n                            \n                        \n                    \n                \n            \n        \n\n\n\n            \n                Properties\n                    \n                        \n                                \n                                    \n                                        \n                                        input\n                                            \n                                                \n                                            \n                                        \n                                    \n                                \n                                \n                                    \n                                        input:         PerformDraftInput\n\n                                    \n                                \n\n\n                                    \n                                        \n                                            Type :         PerformDraftInput\n\n                                        \n                                    \n\n\n\n\n\n                        \n                    \n                    \n                        \n                                \n                                    \n                                        \n                                        output\n                                            \n                                                \n                                            \n                                        \n                                    \n                                \n                                \n                                    \n                                        output:         PerformOutput\n\n                                    \n                                \n\n\n                                    \n                                        \n                                            Type :         PerformOutput\n\n                                        \n                                    \n\n\n\n\n\n                        \n                    \n                    \n                        \n                                \n                                    \n                                        \n                                        type\n                                            \n                                                \n                                            \n                                        \n                                    \n                                \n                                \n                                    \n                                        type:         TopologyName\n\n                                    \n                                \n\n\n                                    \n                                        \n                                            Type :         TopologyName\n\n                                        \n                                    \n\n\n\n\n\n                        \n                    \n            \n    \n\n\n    \n        import { Draft } from \"../../../core/model/datatypes\";\nimport { ParamValue, OperationParam as OpParam, getParamValues } from \"./params\";\nimport { OperationInlet as OpInlet, InletDrafts } from \"./inlets\";\n\n/**\n* At its heart, an Operation is a very fancy function that outputs a Draft or several Drafts.\n* The function itself is perform(), and the Operation can take inputs in the form of \n* Drafts (inlets) or Parameters (params).\n*/\n\n/** \n* Types that an Operation's perform() function can handlle as input/output\n*/\n\n/** @type Union of types that can serve as input to Operation perform() functions. */\nexport type PerformDraftInput = InletDrafts | Array | Draft | null;\n\ntype MultiDraftInput = InletDrafts | Array;\n\n/** @type Union of types that Operation perform() functions can output. */\nexport type PerformOutput = Array | Draft;\n\n/**\n * OPERATION TOPOLOGY\n * Topology refers to the shape of the Operation in terms of its\n * number of input and output Drafts. Classifies Operations.\n */\n\nexport const TopologyName = {\n  pipe: 'pipe', \n  seed: 'seed', \n  merge: 'merge', \n  branch: 'branch', \n  bus: 'bus'\n} as const;\nexport type TopologyName = keyof typeof TopologyName;\n\ninterface TopologyDef { type: TopologyName; input: PerformDraftInput; output: PerformOutput; };\n\n/**\n* @class\n* Operation that can generate a draft with no inputs, may take an optional input\n* @method perform OpPerform function: \n* - INPUT: zero or one Draft\n* - OUTPUT: exactly one Draft\n*/\nexport class Seed implements TopologyDef { type: 'seed'; input: Draft | null; output: Draft; };\n\n/**\n* @class\n* Operation that takes one input and generates one output draft. \n* @method perform OpPerform function: \n* - INPUT: exactly one Draft\n* - OUTPUT: exactly one Draft\n*/\nexport class Pipe implements TopologyDef { type: 'pipe'; input: Draft; output: Draft; };\n\n/**\n* @class\n* Operation that takes many (N) inputs and generates one output draft.\n* @method perform OpPerform function: \n* - INPUT: Array of Drafts\n* - OUTPUT: exactly one Draft\n*/\nexport class Merge implements TopologyDef { type: 'merge'; input: InletDrafts | Array; output: Draft; };\n\n/**\n* @class\n* Operation that takes one input and generates many (N) output drafts.\n* @method perform OpPerform function:\n* - INPUT: exactly one Draft\n* - OUTPUT: Array of Drafts\n*/\nexport class Branch implements TopologyDef { type: 'branch'; input: Draft; output: Array; };\n\n/**\n* CURRENTLY UNUSED\n* @class\n* Operation that takes many (N) inputs and generates many (M) output drafts.\n* Number of inputs does not necessarily match number of outputs (N ?= M).\n* @method perform OpPerform function:  \n* - INPUT: Array of Drafts\n* - OUTPUT: Array of Drafts\n*/\nexport class Bus implements TopologyDef { type: 'bus'; input: Array | InletDrafts; output: Array; };\n\ntype TopologyIndex = {\n  'seed': Seed,\n  'pipe': Pipe,\n  'merge': Merge,\n  'branch': Branch,\n  'bus': Bus\n}\ntype OpTopology = TopologyIndex[TopologyName];\n\n/**\n * OPERATION CONSTRAINT\n * A Constraint on an Operation classifies it based on its\n * input requirements (both Drafts and Params).\n */\n\nexport const ConstraintOptions = {\n  req: 'req', \n  opt: 'opt', \n  none: 'none'\n} as const;\nexport type ConstraintOptions = keyof typeof ConstraintOptions;\n\nexport const ConstraintName = {\n  no_drafts: { input_drafts: 'none', input_params: 'req' }, \n  no_params: { input_drafts: 'req', input_params: 'none' }, \n  drafts_opt: { input_drafts: 'opt', input_params: 'req' }, \n  params_opt: { input_drafts: 'req', input_params: 'opt' }, \n  all_req: {input_drafts: 'req', input_params: 'req' },\n} as const;\ntype ConstraintName = keyof typeof ConstraintName;\n\ntype ConstraintDefs = {\n  [C in keyof typeof ConstraintName]: {\n    constraint: C;\n    input_drafts: typeof ConstraintName[C][\"input_drafts\"];\n    input_params: typeof ConstraintName[C][\"input_params\"];\n  }\n}\n\nexport type NoDrafts = ConstraintDefs[\"no_drafts\"];\nexport type NoParams = ConstraintDefs[\"no_params\"];\nexport type DraftsOptional = ConstraintDefs[\"drafts_opt\"];\nexport type ParamsOptional = ConstraintDefs[\"params_opt\"];\nexport type AllRequired = ConstraintDefs[\"all_req\"];\n\ntype ConstraintIndex = {\n  'no_drafts': NoDrafts, // does not accept input drafts\n  'no_params': NoParams, // does not accept params\n  'drafts_opt': DraftsOptional, // can take no params -- has default values\n  'params_opt': ParamsOptional, // can take zero input drafts\n  'all_req': AllRequired, // both inputs and params required\n}\ntype OpConstraint = ConstraintIndex[ConstraintName]; \n\n/** \n* Generic types for perform() functions, describing options \n* for input draft multiplicity (0, 1, N) and param requirement \n*/\n\ntype NoDraftsPerform = {(params: Array): Topo[\"output\"]};\ntype NoParamsPerform = {(inputs: Topo[\"input\"]): Topo[\"output\"]};\ntype ParamsOptionalPerform = {(inputs: Topo[\"input\"], params?: Array): Topo[\"output\"]}; \ntype DraftsOptionalPerform = {(params: Array, inputs?: Topo[\"input\"]): Topo[\"output\"]};  \ntype AllRequiredPerform = {(inputs: Topo[\"input\"], params: Array): Topo[\"output\"]};  \n\ntype PerformCallSigs = {\n  no_drafts: { [Topo in keyof TopologyIndex]: NoDraftsPerform; },\n  no_params: { [Topo in keyof TopologyIndex]: NoParamsPerform; },\n  drafts_opt: { [Topo in keyof TopologyIndex]: DraftsOptionalPerform; },\n  params_opt: { [Topo in keyof TopologyIndex]: ParamsOptionalPerform; },\n  all_req: { [Topo in keyof TopologyIndex]: AllRequiredPerform; }\n}\n\n/**\n * @interface OpClassifier\n * Key-value pairs for an Operation's Topology and Constraint.\n */\ninterface OpClassifier {\n  type: Topo[\"type\"] | '';\n  input_drafts: Constraint[\"input_drafts\"] | '';\n  input_params: Constraint[\"input_params\"] | '';\n}\n\n/** @type User-defined descriptive strings for any Operation. */\ntype OperationDescriptors = { name: string, displayname: string, dx: string };\n\n/**\n* A standard Operation's metadata -- i.e. everything not the perform() function\n* @param name the internal name of this opearation (CHANGING THESE WILL BREAK LEGACY VERSIONS)\n* @param displayname the name to show upon this operation\n* @param dx the description of this operation\n* @param max_inputs the maximum number of inputs (drafts) allowed directly into this operation\n* @param params the parameters associated with this operation\n* @method perform an OpPerform function\n*/\nexport interface OperationProperties extends OperationDescriptors {\n  max_inputs: number,\n  default_params?: Array;\n  params: Array,\n}\n\n/**\n * @type A function that serves as the perform() method for an Operation. \n * This generic type requires two type parameters:\n * @param Topo one of the PerformInput types\n * @param Constraint one of the PerformOutput types\n *\n * OpPerform to give call signature for perform() function \n * Topo  = Seed | Pipe | Merge | Branch | Bus\n * Constraint = NoDrafts | NoParams | DraftsOptional | ParamsOptional | AllRequired\n */\nexport type OpPerform = PerformCallSigs[Constraint[\"constraint\"]][Topo[\"type\"]];\n// type PerformArgs = Parameters>;\n\n/** TODO doublecheck inlets have been added correctly (fields for input drafts) */\nexport class BaseOp implements OperationProperties {\n  name: string;\n  old_names: Array;\n  displayname: string;\n  dx: string;\n  params: Array;\n  inlets: Array;\n  default_params?: Array;\n  max_inputs: number;\n  classifier: OpClassifier;\n  perform: OpPerform;\n\n  /** @constructor create an Operation using an object literal (keys and values) */\n  constructor (args: OpConstructorArgs);\n  /** @constructor create an Operation using direct arguments in the constructor (values only) */\n  constructor (...args: OpConstructorArray);\n  constructor (name: string, displayname: string, dx: string, perform: OpPerform);\n  constructor (name: string, displayname: string, dx: string, params: Array, perform: OpPerform);\n  constructor (nameOrArgs: any, displayname?: string, dx?: string, performOrParams?: OpPerform | Array, performWithParams?: OpPerform) {\n    // console.log((nameOrArgs.name != undefined));\n    this.classifier = { type: '', input_drafts: '', input_params: '' };\n    if (nameOrArgs.name) {\n      let args = nameOrArgs;\n      this.name = args.name;\n      this.displayname = args.displayname;\n      this.dx = args.dx;\n      this.perform = args.perform;\n      if (args.params) this.params = args.params;\n      else this.params = [];\n      if (args.inlets) this.inlets = args.inlets;\n      else this.inlets = [];\n    } else {\n      this.name = nameOrArgs;\n      this.displayname = displayname;\n      this.dx = dx;\n      if (performWithParams) {\n        let params = > performOrParams;\n        this.params = params;\n        this.default_params = getParamValues(params);\n        this.perform = performWithParams;\n      } else {\n        this.params = [];\n        this.perform = > performOrParams;\n      }\n    }\n  }\n\n  constrain(c: ConstraintName): void {\n    if (c == 'no_drafts') { this.max_inputs = 0; this.inlets = []; }\n    this.classifier.input_drafts = ConstraintName[c][\"input_drafts\"]; \n    this.classifier.input_params = ConstraintName[c][\"input_params\"];\n  }\n\n  type(t: TopologyName): BaseOp {\n    this.classifier.type = t;\n    return this;\n  }\n}\n\ntype ConstructorArgKeysIndex = {\n  [C in keyof ConstraintIndex]: C extends \"no_params\" ? {\n    [T in keyof TopologyIndex]: {\n      name: string, displayname: string, dx: string, old_names: string[],\n      inlets: OpInlet[], perform: OpPerform\n    }\n  } : C extends \"no_drafts\" ? {\n    [T in keyof TopologyIndex]: {\n      name: string, displayname: string, dx: string, old_names: string[],\n      params: OpParam[], perform: OpPerform\n    }\n  } : {\n    [T in keyof TopologyIndex]: {\n      name: string, displayname: string, dx: string, old_names: string[],\n      params: OpParam[], inlets: OpInlet[],\n      perform: OpPerform\n    }\n  }\n}\n\ntype ConstructorArrayIndex = {\n  [C in keyof ConstraintIndex]: C extends \"no_params\" ? {\n    [T in keyof TopologyIndex]: [\n      name: string, displayname: string, dx: string, old_names: string[],\n      inlets: OpInlet[], perform: OpPerform\n    ]\n  } : C extends \"no_drafts\" ? {\n    [T in keyof TopologyIndex]: [\n      name: string, displayname: string, dx: string, old_names: string[],\n      params: OpParam[], perform: OpPerform\n    ]\n  } : {\n    [T in keyof TopologyIndex]: [\n      name: string, displayname: string, dx: string, old_names: string[],\n      params: OpParam[], inlets: OpInlet[],\n      perform: OpPerform\n    ]\n  }\n}\n\ntype OpConstructorArgKeys = \nConstructorArgKeysIndex[Constraint[\"constraint\"]][Topo[\"type\"]];\n\ntype OpConstructorArray = \nConstructorArrayIndex[Constraint[\"constraint\"]][Topo[\"type\"]];\n\ntype OpConstructorArgs = \nOpConstructorArgKeys | OpConstructorArray;\n\n// use factory design pattern to apply classifiers to BaseOp?? Is this too convoluted\n// https://refactoring.guru/design-patterns/abstract-factory/typescript\nclass AbstractOpFactory {\n  NoDrafts(args: OpConstructorArgKeys): BaseOp;\n  NoDrafts(...args: OpConstructorArray): BaseOp;\n  NoDrafts(...args: any) {\n    let op = new BaseOp(...args);\n    op.constrain(\"no_drafts\");\n    return op;\n  }\n\n  NoParams(args: OpConstructorArgKeys): BaseOp;\n  NoParams(...args: OpConstructorArray): BaseOp;\n  NoParams(...args: any) {\n    let op = new BaseOp(...args);\n    op.constrain(\"no_params\");\n    return op;\n  }\n\n  DraftsOptional(args: OpConstructorArgKeys): BaseOp;\n  DraftsOptional(...args: OpConstructorArray): BaseOp;\n  DraftsOptional(...args: any) {\n    let op = new BaseOp(...args);\n    op.constrain(\"drafts_opt\");\n    return op;\n  }\n\n  ParamsOptional(args: OpConstructorArgKeys): BaseOp;\n  ParamsOptional(...args: OpConstructorArray): BaseOp;\n  ParamsOptional(...args: any) {\n    let op = new BaseOp(...args);\n    op.constrain(\"params_opt\");\n    return op;\n  }\n\n  AllRequired(args: OpConstructorArgKeys): BaseOp;\n  AllRequired(...args: OpConstructorArray): BaseOp;\n  AllRequired(...args: any) {\n    let op = new BaseOp(...args);\n    op.constrain(\"all_req\");\n    return op;\n  }\n}\n\n// combine with mix-ins design pattern (link: TypeScript docs website)\nfunction makeTopoFactory(topo: TopologyName) {\n  return class TopologyFactory extends AbstractOpFactory {\n    static base = new AbstractOpFactory();\n    \n    static NoDrafts(args: OpConstructorArgKeys): BaseOp;\n    static NoDrafts(...args: OpConstructorArray): BaseOp;\n    static NoDrafts(...args: any) {\n      return this.base.NoDrafts(...args).type(topo);\n    }\n\n    static NoParams(args: OpConstructorArgKeys): BaseOp;\n    static NoParams(...args: OpConstructorArray): BaseOp;\n    static NoParams(...args: any) {\n      return this.base.NoParams(...args).type(topo);\n    }\n\n    static DraftsOptional(args: OpConstructorArgKeys): BaseOp;\n    static DraftsOptional(...args: OpConstructorArray): BaseOp;\n    static DraftsOptional(...args: any) {\n      return this.base.DraftsOptional(...args).type(topo);\n    }\n\n    static ParamsOptional(args: OpConstructorArgKeys): BaseOp;\n    static ParamsOptional(...args: OpConstructorArray): BaseOp;\n    static ParamsOptional(...args: any) {\n      return this.base.ParamsOptional(...args).type(topo);\n    }\n\n    static AllRequired(args: OpConstructorArgKeys): BaseOp;\n    static AllRequired(...args: OpConstructorArray): BaseOp;\n    static AllRequired(...args: any) {\n      return this.base.AllRequired(...args).type(topo);\n    }\n  }\n}\n\nexport const OpFactories = {\n  Seed: makeTopoFactory(\"seed\"),\n  Pipe: makeTopoFactory(\"pipe\"),\n  Merge: makeTopoFactory(\"merge\"),\n  Branch: makeTopoFactory(\"merge\"),\n  Bus: makeTopoFactory(\"bus\"),\n}\n\n// export const SeedOperation = makeTopoFactory(\"seed\");\n// export const PipeOperation = makeTopoFactory(\"pipe\");\n// export const MergeOperation = makeTopoFactory(\"merge\");\n// export const BranchOperation = makeTopoFactory(\"merge\");\n// export const BusOperation = makeTopoFactory(\"bus\");\n\ntype TopologyOpIndex = {\n  [T in keyof TopologyIndex]: {\n    [C in keyof ConstraintIndex]: BaseOp;\n  }\n}\n\nexport type BuildableOperation = TopologyOpIndex[TopologyName][ConstraintName];\n    \n\n\n\n\n\n\n\n\n\n                   \n    \n         results matching \"\"\n        \n    \n    \n        No results matching \"\"\n    \n\n"},"interfaces/TreeNode.html":{"url":"interfaces/TreeNode.html","title":"interface - TreeNode","body":"\n                   \n\n\n\n\n\n\n\n\n\n\n\n\n\n\n  Interfaces\n  \n  TreeNode\n\n\n\n        \n            Info\n        \n        \n            Source\n        \n\n\n\n    \n        \n            File\n        \n        \n            src/app/core/model/datatypes/tree.ts\n        \n\n\n            \n                Description\n            \n            \n                A tree node stores relationships between the components created by operations\nRules:\n  Operations can have many inputs and many outputs\n  Subdrafts can only have one input and one output (for now)\n\n            \n\n\n        \n            Index\n            \n                \n                    \n                        \n                            Properties\n                        \n                    \n                    \n                        \n                            \n                                \n                                        \n                                            inputs\n                                        \n                                \n                                \n                                        \n                                            node\n                                        \n                                \n                                \n                                        \n                                            outputs\n                                        \n                                \n                                \n                                        \n                                            parent\n                                        \n                                \n                            \n                        \n                    \n                \n            \n        \n\n\n\n            \n                Properties\n                    \n                        \n                                \n                                    \n                                        \n                                        inputs\n                                            \n                                                \n                                            \n                                        \n                                    \n                                \n                                \n                                    \n                                        inputs:         Array\n\n                                    \n                                \n\n\n                                    \n                                        \n                                            Type :         Array\n\n                                        \n                                    \n\n\n\n\n\n                        \n                    \n                    \n                        \n                                \n                                    \n                                        \n                                        node\n                                            \n                                                \n                                            \n                                        \n                                    \n                                \n                                \n                                    \n                                        node:         Node\n\n                                    \n                                \n\n\n                                    \n                                        \n                                            Type :         Node\n\n                                        \n                                    \n\n\n\n\n\n                        \n                    \n                    \n                        \n                                \n                                    \n                                        \n                                        outputs\n                                            \n                                                \n                                            \n                                        \n                                    \n                                \n                                \n                                    \n                                        outputs:         Array\n\n                                    \n                                \n\n\n                                    \n                                        \n                                            Type :         Array\n\n                                        \n                                    \n\n\n\n\n\n                        \n                    \n                    \n                        \n                                \n                                    \n                                        \n                                        parent\n                                            \n                                                \n                                            \n                                        \n                                    \n                                \n                                \n                                    \n                                        parent:         TreeNode\n\n                                    \n                                \n\n\n                                    \n                                        \n                                            Type :         TreeNode\n\n                                        \n                                    \n\n\n\n\n\n                        \n                    \n            \n    \n\n\n    \n        import { ViewRef } from '@angular/core';\nimport { ConnectionComponent } from \"../../../mixer/palette/connection/connection.component\";\nimport { OperationComponent } from \"../../../mixer/palette/operation/operation.component\";\nimport { SubdraftComponent } from \"../../../mixer/palette/subdraft/subdraft.component\";\n\nimport { Draft } from './drafts';\nimport { Loom, LoomSettings } from './looms';\n\n/****************** OBJECTS/TYPES RELATED to OPERATION TREE *****************/\n\n/**\n * this stores a reference to a component on the palette with its id and some\n * @param type is the type of component'\n * @param view_id is ndx to reference to this object in the ViewComponentRef (for deleting)\n * @param id is a unique id linked forever to this component \n * @param component is a reference to the component object\n * @param dirty describes if this needs to be recalcuated or redrawn \n */\n type BaseNode = {\n    type: 'draft' | 'op' | 'cxn',\n    ref: ViewRef,\n    id: number, //this will be unique for every instance\n    component: SubdraftComponent | OperationComponent | ConnectionComponent,\n    dirty: boolean\n  }\n  \n  \n  /**\n   * an OpNode is an extension of BaseNode that includes additional params\n   * @param name the name of the operation at this node\n   * @param params an array of the current param values at this node\n   * @param inlets an array of the inlet values at this node\n   */\n  export type OpNode = BaseNode & {\n    name: string,\n    params: Array\n    inlets: Array;\n   }\n  \n  \n   /**\n   * a DraftNode is an extension of BaseNode that includes additional params\n   * @param draft the active draft at this node\n   * @param loom the loom associated with the draft at this node\n   * @param loom_settings the settings associted with the loom at this node\n   */\n   export type DraftNode = BaseNode & {\n    draft: Draft,\n    loom: Loom,\n    loom_settings: LoomSettings\n   }\n  \n  \n  /**\n   * Allows one to use Node as shorthand for any of these types of nodes\n   */\n   export type Node = BaseNode | OpNode | DraftNode;\n  \n  \n   /**\n    * a type to store input and output information for nodes that takes multiple node inputs and outputs into account.\n    * each node stores the node it gets as input and output and the inlet/outlet that node enter into on itself. \n    * connections will have inlet/outlet indexes of 0, 0 (they cannot connect ot multiple things)\n    * drafts will have inset/outout indexes of 0, 0 (they can only have one parent)\n    * ops will have multiple inlets and outlets. For example, an input of (2, 1) means that treenode 2 is connected to inlet 1. \n    * @param treenode - the treenode that this input or output goes towards\n    * @param ndx - which ndx on the said treenodes does this connect to specifically\n    */\n   export interface IOTuple {\n     tn: TreeNode,\n     ndx: number\n   }\n  \n  /**\n   * A tree node stores relationships between the components created by operations\n    * @param node: is a reference to the node object stored in the tree. \n    * @param parent links to the treenode that \"created\" this node or null if it was created by the user \n    * @param inputs a list of TreeNodes that are used as input to this TreeNode with an idex to which input they belong to\n    * @param outputs a list of TreeNodes created by this node or specified by the user\n    * Rules: \n    *   Operations can have many inputs and many outputs \n    *   Subdrafts can only have one input and one output (for now)\n    *   \n  */\nexport interface TreeNode {\n    node: Node,\n    parent: TreeNode,\n    inputs: Array,\n    outputs: Array\n}\n    \n\n\n\n\n\n\n\n\n\n                   \n    \n         results matching \"\"\n        \n    \n    \n        No results matching \"\"\n    \n\n"},"interfaces/TreeNodeProxy.html":{"url":"interfaces/TreeNodeProxy.html","title":"interface - TreeNodeProxy","body":"\n                   \n\n\n\n\n\n\n\n\n\n\n\n\n\n\n  Interfaces\n  \n  TreeNodeProxy\n\n\n\n        \n            Info\n        \n        \n            Source\n        \n\n\n\n    \n        \n            File\n        \n        \n            src/app/core/model/datatypes/files.ts\n        \n\n\n            \n                Description\n            \n            \n                stores a sparce version of a tree node for easy reloading\n\n            \n\n\n        \n            Index\n            \n                \n                    \n                        \n                            Properties\n                        \n                    \n                    \n                        \n                            \n                                \n                                        \n                                            inputs\n                                        \n                                \n                                \n                                        \n                                            node\n                                        \n                                \n                                \n                                        \n                                            outputs\n                                        \n                                \n                                \n                                        \n                                            parent\n                                        \n                                \n                            \n                        \n                    \n                \n            \n        \n\n\n\n            \n                Properties\n                    \n                        \n                                \n                                    \n                                        \n                                        inputs\n                                            \n                                                \n                                            \n                                        \n                                    \n                                \n                                \n                                    \n                                        inputs:     Array\n\n                                    \n                                \n\n\n                                    \n                                        \n                                            Type :     Array\n\n                                        \n                                    \n\n\n\n\n\n                        \n                    \n                    \n                        \n                                \n                                    \n                                        \n                                        node\n                                            \n                                                \n                                            \n                                        \n                                    \n                                \n                                \n                                    \n                                        node:         number\n\n                                    \n                                \n\n\n                                    \n                                        \n                                            Type :         number\n\n                                        \n                                    \n\n\n\n\n\n                        \n                    \n                    \n                        \n                                \n                                    \n                                        \n                                        outputs\n                                            \n                                                \n                                            \n                                        \n                                    \n                                \n                                \n                                    \n                                        outputs:     Array\n\n                                    \n                                \n\n\n                                    \n                                        \n                                            Type :     Array\n\n                                        \n                                    \n\n\n\n\n\n                        \n                    \n                    \n                        \n                                \n                                    \n                                        \n                                        parent\n                                            \n                                                \n                                            \n                                        \n                                    \n                                \n                                \n                                    \n                                        parent:         number\n\n                                    \n                                \n\n\n                                    \n                                        \n                                            Type :         number\n\n                                        \n                                    \n\n\n\n\n\n                        \n                    \n            \n    \n\n\n    \n        import { Draft } from './drafts';\nimport { Loom, LoomSettings } from './looms';\nimport { Shuttle } from '../shuttle';\nimport { Note } from '../../provider/notes.service';\nimport { Bounds } from './screenlayout';\n\n/****** OBJECTS/TYPES FOR LOADING AND SAVING FILES *****/\n\n/**\n * holds data about each node/component in a form to easily load.\n * @param node_id the id of this node within the tree\n * @param type the type of node\n * @param bounds the screen position and size data for this node\n */\nexport interface NodeComponentProxy {\n    node_id: number,\n    type: string,\n    bounds: Bounds\n  }\n  \n  /**\n   * stores a sparce version of a tree node for easy reloading\n   * @param node the node id this treenode refers too\n   * @param parent the node id of the parent node for this treenode\n   * @param inputs an array of treenode ids for all values coming into this node\n   * @param outputs an array of treenode ids for all downstream functions \n   */\n   export interface TreeNodeProxy {\n    node: number,\n    parent: number; \n    inputs: Array;\n    outputs: Array; \n   }\n  \n    /**\n    * holds data about each draft component in a compressed form \n    * @param draft_id the draft id associated with this node (if available)\n   * @param draft_visible a boolean to state if this node is visible or not. \n   * @param draft_name a string representing a user defined name\n   * @param draft this will only export if the draft is a seed draft\n   * @param loom this will only export if the draft is a seed draft \n   * @param loom_settings the associated loom settings on this node, if present\n    */\n  \n    export interface DraftNodeProxy {\n      node_id: number;\n      draft_id: number;\n      draft_name: string;\n      draft: Draft;\n      draft_visible: boolean;\n      loom: Loom,\n      loom_settings: LoomSettings;\n    }\n  \n  /**\n    * a sparce form of an operaction component to use for saving\n    * @param node_id the node id this object refers too\n    * @param name the name of the operation at this node\n    * @param params the list of input parameters to this operation\n    * @param inlets the let of inlets and associated values \n    */\n  export interface OpComponentProxy {\n    node_id: number,\n    name: string,\n    params: Array, \n    inlets: Array;\n  }\n  \n  \n   /**\n    * describes the data from the workspace that is saved.\n    */\n   export interface SaveObj {\n    version: string,\n    workspace: any,\n    type: string,\n    nodes: Array,\n    tree: Array,\n    draft_nodes: Array,\n    ops: Array,\n    notes: Array,\n    materials: Array,\n    scale: number\n   }\n  \n  export interface FileObj {\n   version: string,\n   workspace: any,\n   filename: string,\n   nodes: Array,\n   treenodes: Array,\n   draft_nodes: Array,\n   ops: Array\n   scale: number\n  }\n  \n  export interface StatusMessage {\n    id: number,\n    message: string,\n    success: boolean\n  }\n  \n  export interface LoadResponse {\n    data: FileObj,\n    status: number;\n  }\n  \n  export interface Fileloader {\n    ada: (filename: string, data: any) => Promise,\n    //wif: (filename: string, data: any) => Promise,\n    //bmp: (filename: string, data: any) => Promise,\n    //jpg: (filename: string, data: any) => Promise,\n    form: (data: any) => Promise}\n  \n  export interface FileSaver {\n    ada: (type: string, for_timeline:boolean, current_scale: number) => Promise,\n    //wif: (draft: Draft, loom: Loom) => Promise,\n    bmp: (canvas: HTMLCanvasElement) => Promise,\n    jpg: (canvas: HTMLCanvasElement) => Promise\n  }\n    \n\n\n\n\n\n\n\n\n\n                   \n    \n         results matching \"\"\n        \n    \n    \n        No results matching \"\"\n    \n\n"},"interfaces/TreeOperation.html":{"url":"interfaces/TreeOperation.html","title":"interface - TreeOperation","body":"\n                   \n\n\n\n\n\n\n\n\n\n\n\n\n\n\n  Interfaces\n  \n  TreeOperation\n\n\n\n        \n            Info\n        \n        \n            Source\n        \n\n\n\n    \n        \n            File\n        \n        \n            src/app/mixer/model/operation.ts\n        \n\n\n            \n                Description\n            \n            \n                a standard operation used by the tree\n\n            \n\n\n        \n            Index\n            \n                \n                    \n                        \n                            Properties\n                        \n                    \n                    \n                        \n                            \n                                \n                                        \n                                            displayname\n                                        \n                                \n                                \n                                        \n                                            dx\n                                        \n                                \n                                \n                                        \n                                            inlets\n                                        \n                                \n                                \n                                        \n                                            name\n                                        \n                                \n                                \n                                        \n                                            old_names\n                                        \n                                \n                                \n                                        \n                                            params\n                                        \n                                \n                                \n                                        \n                                            perform\n                                        \n                                \n                            \n                        \n                    \n                \n            \n        \n\n\n\n            \n                Properties\n                    \n                        \n                                \n                                    \n                                        \n                                        displayname\n                                            \n                                                \n                                            \n                                        \n                                    \n                                \n                                \n                                    \n                                        displayname:         string\n\n                                    \n                                \n\n\n                                    \n                                        \n                                            Type :         string\n\n                                        \n                                    \n\n\n\n\n\n                        \n                    \n                    \n                        \n                                \n                                    \n                                        \n                                        dx\n                                            \n                                                \n                                            \n                                        \n                                    \n                                \n                                \n                                    \n                                        dx:         string\n\n                                    \n                                \n\n\n                                    \n                                        \n                                            Type :         string\n\n                                        \n                                    \n\n\n\n\n\n                        \n                    \n                    \n                        \n                                \n                                    \n                                        \n                                        inlets\n                                            \n                                                \n                                            \n                                        \n                                    \n                                \n                                \n                                    \n                                        inlets:     Array\n\n                                    \n                                \n\n\n                                    \n                                        \n                                            Type :     Array\n\n                                        \n                                    \n\n\n\n\n\n                        \n                    \n                    \n                        \n                                \n                                    \n                                        \n                                        name\n                                            \n                                                \n                                            \n                                        \n                                    \n                                \n                                \n                                    \n                                        name:         string\n\n                                    \n                                \n\n\n                                    \n                                        \n                                            Type :         string\n\n                                        \n                                    \n\n\n\n\n\n                        \n                    \n                    \n                        \n                                \n                                    \n                                        \n                                        old_names\n                                            \n                                                \n                                            \n                                        \n                                    \n                                \n                                \n                                    \n                                        old_names:     Array\n\n                                    \n                                \n\n\n                                    \n                                        \n                                            Type :     Array\n\n                                        \n                                    \n\n\n\n\n\n                        \n                    \n                    \n                        \n                                \n                                    \n                                        \n                                        params\n                                            \n                                                \n                                            \n                                        \n                                    \n                                \n                                \n                                    \n                                        params:         Array\n\n                                    \n                                \n\n\n                                    \n                                        \n                                            Type :         Array\n\n                                        \n                                    \n\n\n\n\n\n                        \n                    \n                    \n                        \n                                \n                                    \n                                        \n                                        perform\n                                            \n                                                \n                                            \n                                        \n                                    \n                                \n                                \n                                    \n                                        perform:         function\n\n                                    \n                                \n\n\n                                    \n                                        \n                                            Type :         function\n\n                                        \n                                    \n\n\n\n\n\n                        \n                    \n            \n    \n\n\n    \n        import { Draft } from '../../core/model/datatypes';\nimport { OperationParam, ParamValue } from './operation/params';\nimport { InletDrafts, OperationInlet } from './operation/inlets';\nimport { BaseOp as Op, BuildableOperation as GenericOp,\n  Seed, Pipe, Merge, Branch, Bus,\n  NoDrafts, NoParams, DraftsOptional, ParamsOptional, AllRequired\n} from './operation/topology';\n\n\n/** ALL OBJECTS/TYPES/UTILITY FUNCTIONS RELATED to OPERATIONS *****************/\n\nexport * from './operation/inlets';\nexport * from './operation/params';\nexport * from './operation/topology';\nexport * as format from './operation/formatting';\n\n/**** USING OPERATIONS with the MIXER TREE **************/\n\n/**\n * this is a type that contains a series of smaller operations held under the banner of one larger operation (such as layer)\n * @param op_name the name of the operation or \"child\" if this is an assignment to an input parameter\n * @param drafts the drafts associated with this input\n * @param params the parameters associated with this operation OR child input\n * @param inlets the index of the inlet for which the draft is entering upon\n */\n export interface OpInput {\n  op_name: string,\n  drafts: Array,\n  params: Array,\n  inlet: number | null\n}\n\nfunction getParamsFromInputs(inputs: Array): Array {\n  let res = inputs.map((el) => el.params).reduce((acc, el) => acc.concat(el), []);\n  console.log(res);\n  return res;\n}\n\nfunction getDraftsFromInputs(inputs: Array): Array {\n  return inputs.map((el) => el.drafts).reduce((acc, ds) => acc.concat(ds), []);\n}\n\nfunction getInletsFromInputs(inputs: Array, n: number): InletDrafts {\n  let res: InletDrafts = {};\n  for (let i = 0; i  el.inlet == i);\n    let inlet_drafts = this_inlet.map((el) => el.drafts);\n    res[i] = inlet_drafts.reduce((acc, ds) => acc.concat(ds), []);\n  }\n  return res;\n}\n  \n/**\n * a standard operation used by the tree\n * @param name the internal name of this opearation (CHANGING THESE WILL BREAK LEGACY VERSIONS)\n * @param displayname the name to show upon this operation in the interface\n * @param dx the description of this operation\n * @param params the parameters associated with this operation\n * @param inets the inlets associated with this operation\n * @param old_names referes to any prior name of this operation to aid when loading old files\n * @param perform a function that executes when this operation is performed, takes a series of inputs and resturns an array of drafts\n */\nexport interface TreeOperation {\n  name: string,\n  displayname: string,\n  dx: string,\n  params: Array,\n  inlets: Array,\n  old_names: Array,\n  perform: (op_inputs: Array) => Promise>\n}\n\nexport function getDefaultParams(op: TreeOperation | GenericOp): Array {\n  if (!op.params || op.params.length == 0) {\n    return [] as Array;\n  }\n  return op.params.map((el) => el.value);\n}\n\n/** \n * @function \n * The big function to pack an operation from op_definitions (working directly with params and drafts)\n * into an operation that the tree can recognize (uses OpInputs)\n */\nexport function buildTreeOp(base: GenericOp): TreeOperation {\n  let tree_op_perform: TreeOperation[\"perform\"];\n  // check what type of op, topologically with I/O (seed, pipe, merge, branch, bus, dynamic)\n    // convert perform args to Array\n  // check for special case of args (no drafts, no params, everything else is ok)\n    // only seed -> no drafts, everything else\n    // pipe/merge/branch/bus -> no params, everything else\n  // check if there is a param or draft in op_inputs[0] to put into an optional arg\n  if (base.classifier.type === 'seed') {\n    if (base.classifier.input_drafts === 'none') {\n      let seedOp = base as Op;\n      tree_op_perform = (op_inputs: Array) => {\n        return Promise.resolve([seedOp.perform(op_inputs[0].params)]);\n      }\n    } else {\n      let seedOp = base as Op;\n      tree_op_perform = (op_inputs: Array) => {\n        console.log(\"op inputs: \", base.name, op_inputs);\n        let res: Draft;\n        if (op_inputs.filter((el) => (el.op_name == 'child')).length > 0) {\n          res = seedOp.perform(op_inputs[0].params, getDraftsFromInputs(op_inputs)[0]);\n        } else {\n          res = seedOp.perform(op_inputs[0].params);\n        }\n        console.log(\"tree op call: \", res);\n        return Promise.resolve([res]);\n      }\n    }\n  } else if (base.classifier.type === 'pipe') {\n    // let pipeOp;\n    if (base.classifier.input_params === 'none') {\n      let pipeOp = base as Op ;\n      tree_op_perform = (op_inputs: Array) => {\n        if (op_inputs.filter((el) => (el.op_name == 'child')).length == 0) {\n          return Promise.resolve([]) as Promise>;\n        }\n        return Promise.resolve([pipeOp.perform(getDraftsFromInputs(op_inputs)[0])]);\n      }\n    } else if (base.classifier.input_params === 'req') {\n      let pipeOp = base as Op;\n      console.log(\"perform op, pipe all required\");\n      tree_op_perform = (op_inputs: Array) => {\n        if (op_inputs.filter((el) => (el.op_name == 'child')).length == 0) {\n          return Promise.resolve([]) as Promise>;\n        }\n        return Promise.resolve([pipeOp.perform(getDraftsFromInputs(op_inputs)[0], op_inputs[0].params)]);\n      }\n    } else {\n      let pipeOp = base as Op;\n      tree_op_perform = (op_inputs: Array) => {\n        if (op_inputs[0].params.length > 0) {\n          return Promise.resolve([pipeOp.perform(op_inputs[0].drafts[0], op_inputs[0].params)]);\n        } else {\n          return Promise.resolve([pipeOp.perform(op_inputs[0].drafts[0])]);\n        }\n      }\n    }\n  } else if (base.classifier.type === 'merge') {\n    if (base.classifier.input_params === 'none') {\n      let mergeOp = base as Op;\n      if (base.inlets.filter((i) => i.num_drafts != 1).length) {\n        // complex merge, at least one inlet can take multiple drafts, so we have to prepare\n        // the inputs a little differently\n        tree_op_perform = (op_inputs: Array) => {\n          if (op_inputs.filter((el) => (el.op_name == 'child')).length >;\n          }\n          let inputs: InletDrafts = {};\n          for (let i = 0; i  el.inlet == i);\n            let inlet_drafts = this_inlet.map((el) => el.drafts);\n            inputs[i] = inlet_drafts.reduce((acc, ds) => acc.concat(ds), []);\n          }\n          return Promise.resolve([mergeOp.perform(inputs)]);\n        }\n      } else {\n        // simple merge, either 1 multi-inlet or mulitple single inlets\n        tree_op_perform = (op_inputs: Array) => {\n          if (op_inputs.filter((el) => (el.op_name == 'child')).length == 0) {\n            return Promise.resolve([]) as Promise>;\n          }\n          let inputs: Array;\n          inputs = op_inputs.map((el) => el.drafts).reduce((acc, ds) => acc.concat(ds), []);\n          return Promise.resolve([mergeOp.perform(inputs)]);\n        }\n      }\n    } else if (base.classifier.input_params === 'req') {\n      let mergeOp = base as Op;\n      if (base.inlets.length > 1 && base.inlets.filter((i) => i.num_drafts != 1).length) {\n        // complex merge, more than one inlet and at least one inlet can take multiple drafts, so we have to prepare\n        // the inputs a little differently\n        tree_op_perform = (op_inputs: Array) => {\n          if (op_inputs.filter((el) => (el.op_name == 'child')).length == 0) {\n            return Promise.resolve([]) as Promise>;\n          }\n          let inputs: InletDrafts = {};\n          for (let i = 0; i  el.inlet == i);\n            let inlet_drafts = this_inlet.map((el) => el.drafts);\n            inputs[i] = inlet_drafts.reduce((acc, ds) => acc.concat(ds), []);\n          }\n          return Promise.resolve([mergeOp.perform(inputs, op_inputs[0].params)]);\n        }\n      } else {\n        // simple merge, either 1 multi-inlet or multple single inlets\n        tree_op_perform = (op_inputs: Array) => {\n          if (op_inputs.filter((el) => (el.op_name == 'child')).length == 0) {\n            return Promise.resolve([]) as Promise>;\n          }\n          let inputs: Array;\n          inputs = op_inputs.map((el) => el.drafts).reduce((acc, ds) => acc.concat(ds));\n          return Promise.resolve([mergeOp.perform(inputs, op_inputs[0].params)]);\n        }\n      }\n    }\n  } else if (base.classifier.type === 'branch') { \n    if (base.classifier.input_params === 'req') {\n      let branchOp = base as Op;\n      tree_op_perform = (op_inputs: Array) => {\n        return Promise.resolve(branchOp.perform(op_inputs[1].drafts[0], getParamsFromInputs(op_inputs))) as Promise>;\n      }\n    } else {\n      let branchOp = base as Op;\n      tree_op_perform = (op_inputs: Array) => {\n        if (op_inputs.filter((el) => (el.op_name == 'child')).length == 0) {\n          return Promise.resolve([]) as Promise>;\n        }\n        return Promise.resolve(branchOp.perform(op_inputs[1].drafts[0])) as Promise>;\n      }\n    }\n  } else { /** @todo bus ops, but there aren't any operations in this category currently */\n    tree_op_perform = (op_inputs: Array) => {\n      return Promise.resolve([]) as Promise>;\n    }\n  }\n\n  let new_op = {\n    name: base.name,\n    topo_op: base,\n    old_names: base.old_names,\n    inlets: base.inlets,\n    displayname: base.displayname,\n    dx: base.dx,\n    max_inputs: base.max_inputs,\n    params: base.params,\n    perform: tree_op_perform\n  } as TreeOperation;\n\n  return new_op;\n}\n\n/**\n * A container operation that takes drafts with some parameter assigned to them \n * @param name the internal name of this operation used for index (DO NOT CHANGE THESE NAMES!)\n * @param displayname the name to show the viewer \n * @param params the parameters that one can directly input to the parent\n * @param dynamic_param_id which parameter id should we use to dynamically create paramaterized input slots\n * @param dynamic_param_type the type of parameter that we look to generate\n * @param inlets the inlets available for input by default on this operation\n * @param dx the description of this operation\n * @param old_names referes to any prior name of this operation to aid when loading old files\n * @param perform a function that executes when this operation is performed, takes a series of inputs and resturns an array of drafts\n */\nexport interface DynamicOperation extends TreeOperation {\n  name: string,\n  displayname: string,\n  params: Array, \n  dynamic_param_id: number,\n  dynamic_param_type: string,\n  inlets: Array,\n  dx: string,\n  old_names: Array,\n  perform: (op_inputs: Array) => Promise>;\n}\n\n /**\n  * this type is used to classify operations in the dropdown menu\n  * @param category the name of the category for all associated operations (e.g. block, structure)\n  * @param dx a description of that category to show on screen\n  * @param ops an array of all the operations associated with this category\n  */\n export interface OperationClassification {\n  category: string,\n  dx: string,\n  ops: Array \n }\n\n export type Operation = TreeOperation; // default: export operations to interface with Tree\n\n \n    \n\n\n\n\n\n\n\n\n\n                   \n    \n         results matching \"\"\n        \n    \n    \n        No results matching \"\"\n    \n\n"},"interfaces/Vertex.html":{"url":"interfaces/Vertex.html","title":"interface - Vertex","body":"\n                   \n\n\n\n\n\n\n\n\n\n\n\n\n\n\n  Interfaces\n  \n  Vertex\n\n\n\n        \n            Info\n        \n        \n            Source\n        \n\n\n\n    \n        \n            File\n        \n        \n            src/app/core/model/datatypes/yarnsim.ts\n        \n\n\n            \n                Description\n            \n            \n                Used to draw on screen paths, refers to x, y coordiantes relative to the draft simulation\nUsed only in yarn sim\n\n            \n\n\n        \n            Index\n            \n                \n                    \n                        \n                            Properties\n                        \n                    \n                    \n                        \n                            \n                                \n                                        \n                                            x_pcent\n                                        \n                                \n                                \n                                        \n                                            y\n                                        \n                                \n                            \n                        \n                    \n                \n            \n        \n\n\n\n            \n                Properties\n                    \n                        \n                                \n                                    \n                                        \n                                        x_pcent\n                                            \n                                                \n                                            \n                                        \n                                    \n                                \n                                \n                                    \n                                        x_pcent:         number\n\n                                    \n                                \n\n\n                                    \n                                        \n                                            Type :         number\n\n                                        \n                                    \n\n\n\n\n\n                        \n                    \n                    \n                        \n                                \n                                    \n                                        \n                                        y\n                                            \n                                                \n                                            \n                                        \n                                    \n                                \n                                \n                                    \n                                        y:         number\n\n                                    \n                                \n\n\n                                    \n                                        \n                                            Type :         number\n\n                                        \n                                    \n\n\n\n\n\n                        \n                    \n            \n    \n\n\n    \n        export interface Vertex {\n  x_pcent: number;\n  y: number;\n}\n\n/**\n * Used to draw on screen paths, refers to x, y coordiantes relative to the draft simulation\n * Used only in yarn sim\n * @param draft_ndx - the row id within the draft of this yarn\n * @param material_id the material id at this row\n * @param verticies - list of points that form this path\n */\nexport interface YarnPath {\n\tdraft_ndx: number;\n  material_id: number;\n  verticies: Array;\n}\n\n/**\n * describes the relationship between weft rows along the same warp\n */\nexport type crossType = \n \t{t:boolean, b:boolean} |\n  {t:null, b:null} | //\"FLOAT\",\n  {t:null, b:true} | //\"UNSET_UNDER\"\n  {t:null, b:false} | //\"UNSET_OVER\"\n  {t:true, b:null} | //\"UNDER_UNSET\"\n  {t:false, b:null} | //\"OVER_UNSET\"\n  {t:false, b:true} | //\"OVER_UNDER\",\n  {t:true, b:false}; //\"UNDER_OVER\", \n\n\n/**\n * A yarn cross describes the relationship betwen two draft cells\n * read from top to bottom. This is used within the sparce \n * draft representation, stores only \"warp\" crossings\n */\nexport interface Crossing {\n  j: number, \n  type: crossType;\n}\n    \n\n\n\n\n\n\n\n\n\n                   \n    \n         results matching \"\"\n        \n    \n    \n        No results matching \"\"\n    \n\n"},"interfaces/ViewModes.html":{"url":"interfaces/ViewModes.html","title":"interface - ViewModes","body":"\n                   \n\n\n\n\n\n\n\n\n\n\n\n\n\n\n  Interfaces\n  \n  ViewModes\n\n\n\n        \n            Info\n        \n        \n            Source\n        \n\n\n\n    \n        \n            File\n        \n        \n            src/app/core/model/datatypes/selectlists.ts\n        \n\n\n\n\n        \n            Index\n            \n                \n                    \n                        \n                            Properties\n                        \n                    \n                    \n                        \n                            \n                                \n                                        \n                                            value\n                                        \n                                \n                                \n                                        \n                                            viewValue\n                                        \n                                \n                            \n                        \n                    \n                \n            \n        \n\n\n\n            \n                Properties\n                    \n                        \n                                \n                                    \n                                        \n                                        value\n                                            \n                                                \n                                            \n                                        \n                                    \n                                \n                                \n                                    \n                                        value:         string\n\n                                    \n                                \n\n\n                                    \n                                        \n                                            Type :         string\n\n                                        \n                                    \n\n\n\n\n\n                        \n                    \n                    \n                        \n                                \n                                    \n                                        \n                                        viewValue\n                                            \n                                                \n                                            \n                                        \n                                    \n                                \n                                \n                                    \n                                        viewValue:         string\n\n                                    \n                                \n\n\n                                    \n                                        \n                                            Type :         string\n\n                                        \n                                    \n\n\n\n\n\n                        \n                    \n            \n    \n\n\n    \n        export interface LoomTypes {\n    value: string;\n    viewValue: string;\n  }\n  \n  export interface MaterialTypes {\n    value: number;\n    viewValue: string;\n  }\n  \n  export interface DensityUnits {\n    value: string;\n    viewValue: string;\n  }\n  \n  export interface ViewModes {\n    value: string;\n    viewValue: string;\n  }\n  \n  \n  /**\n   * Stores the icons and language for determining different \n   * modes within which the mouse points are handled\n   * @param value - reference \n   * @param viewValue - text shown to users\n   * @param icon\n   * @param children, menu to nest within this\n   * @param selected boolean to show if it is selected\n   */\n  export interface DesignMode {\n    value: string;\n    viewValue: string;\n    icon: string;\n    children: Array;\n    selected: boolean;\n  }\n  \n    \n\n\n\n\n\n\n\n\n\n                   \n    \n         results matching \"\"\n        \n    \n    \n        No results matching \"\"\n    \n\n"},"injectables/ViewportService.html":{"url":"injectables/ViewportService.html","title":"injectable - ViewportService","body":"\n                   \n\n\n\n\n\n\n\n\n\n  Injectables\n  ViewportService\n\n\n\n        \n            Info\n        \n        \n            Source\n        \n\n\n\n    \n        \n            File\n        \n        \n            src/app/mixer/provider/viewport.service.ts\n        \n\n\n\n\n\n            \n    Index\n    \n        \n                \n                    \n                        Properties\n                    \n                \n                \n                    \n                        \n                            \n                                absolute\n                            \n                            \n                                objs\n                            \n                            \n                                vp\n                            \n                        \n                    \n                \n\n                \n                    \n                        Methods\n                    \n                \n                \n                    \n                        \n                            \n                                addObj\n                            \n                            \n                                clear\n                            \n                            \n                                getAbsoluteHeight\n                            \n                            \n                                getAbsoluteWidth\n                            \n                            \n                                getBounds\n                            \n                            \n                                getCenterPoint\n                            \n                            \n                                getHeight\n                            \n                            \n                                getTopLeft\n                            \n                            \n                                getWidth\n                            \n                            \n                                move\n                            \n                            \n                                removeObj\n                            \n                            \n                                set\n                            \n                            \n                                setAbsolute\n                            \n                            \n                                setHeight\n                            \n                            \n                                setTopLeft\n                            \n                            \n                                setViewportCenter\n                            \n                            \n                                setWidth\n                            \n                            \n                                updatePoint\n                            \n                        \n                    \n                \n\n\n\n\n\n        \n    \n\n\n            \n    Constructor\n        \n            \n                \n                    \nconstructor()\n                    \n                \n                        \n                            \n                                Defined in src/app/mixer/provider/viewport.service.ts:28\n                            \n                        \n\n            \n        \n\n\n            \n    \n    \n        Methods\n    \n    \n        \n            \n                \n                    \n                    \n                        addObj\n                        \n                    \n                \n            \n            \n                \naddObj(id: number, i: Interlacement)\n                \n            \n\n\n            \n                \n                    Defined in src/app/mixer/provider/viewport.service.ts:57\n                \n            \n\n\n            \n                \n                    called when a new subdraft is added\n\n\n                    \n                        Parameters :\n                        \n                        \n                            \n                                \n                                    Name\n                                    Type\n                                    Optional\n                                    Description\n                                \n                            \n                            \n                                \n                                    id\n                                    \n                                                number\n                                    \n\n                                    \n                                        No\n                                    \n\n\n                                    \n                                        the id of the subdraft\n\n                                    \n                                \n                                \n                                    i\n                                    \n                                                Interlacement\n                                    \n\n                                    \n                                        No\n                                    \n\n\n                                    \n                                        the topleft corner as interlacement\n\n                                    \n                                \n                            \n                        \n                    \n                    \n                    \n                    \n                        Returns :         void\n\n                    \n                    \n                        \n                    \n                \n            \n        \n    \n    \n        \n            \n                \n                    \n                    \n                        clear\n                        \n                    \n                \n            \n            \n                \nclear()\n                \n            \n\n\n            \n                \n                    Defined in src/app/mixer/provider/viewport.service.ts:48\n                \n            \n\n\n            \n                \n\n                    \n                        Returns :         void\n\n                    \n                \n            \n        \n    \n    \n        \n            \n                \n                    \n                    \n                        getAbsoluteHeight\n                        \n                    \n                \n            \n            \n                \ngetAbsoluteHeight()\n                \n            \n\n\n            \n                \n                    Defined in src/app/mixer/provider/viewport.service.ts:130\n                \n            \n\n\n            \n                \n\n                    \n                        Returns :         number\n\n                    \n                \n            \n        \n    \n    \n        \n            \n                \n                    \n                    \n                        getAbsoluteWidth\n                        \n                    \n                \n            \n            \n                \ngetAbsoluteWidth()\n                \n            \n\n\n            \n                \n                    Defined in src/app/mixer/provider/viewport.service.ts:118\n                \n            \n\n\n            \n                \n\n                    \n                        Returns :         number\n\n                    \n                \n            \n        \n    \n    \n        \n            \n                \n                    \n                    \n                        getBounds\n                        \n                    \n                \n            \n            \n                \ngetBounds()\n                \n            \n\n\n            \n                \n                    Defined in src/app/mixer/provider/viewport.service.ts:142\n                \n            \n\n\n            \n                \n\n                    \n                        Returns :         Bounds\n\n                    \n                \n            \n        \n    \n    \n        \n            \n                \n                    \n                    \n                        getCenterPoint\n                        \n                    \n                \n            \n            \n                \ngetCenterPoint()\n                \n            \n\n\n            \n                \n                    Defined in src/app/mixer/provider/viewport.service.ts:150\n                \n            \n\n\n            \n                \n                    this gets the center point of the current viewport\n\n\n                    \n                    \n                    \n                        Returns :         Point\n\n                    \n                    \n                        \n                    \n                \n            \n        \n    \n    \n        \n            \n                \n                    \n                    \n                        getHeight\n                        \n                    \n                \n            \n            \n                \ngetHeight()\n                \n            \n\n\n            \n                \n                    Defined in src/app/mixer/provider/viewport.service.ts:126\n                \n            \n\n\n            \n                \n\n                    \n                        Returns :         number\n\n                    \n                \n            \n        \n    \n    \n        \n            \n                \n                    \n                    \n                        getTopLeft\n                        \n                    \n                \n            \n            \n                \ngetTopLeft()\n                \n            \n\n\n            \n                \n                    Defined in src/app/mixer/provider/viewport.service.ts:138\n                \n            \n\n\n            \n                \n\n                    \n                        Returns :         Point\n\n                    \n                \n            \n        \n    \n    \n        \n            \n                \n                    \n                    \n                        getWidth\n                        \n                    \n                \n            \n            \n                \ngetWidth()\n                \n            \n\n\n            \n                \n                    Defined in src/app/mixer/provider/viewport.service.ts:114\n                \n            \n\n\n            \n                \n\n                    \n                        Returns :         number\n\n                    \n                \n            \n        \n    \n    \n        \n            \n                \n                    \n                    \n                        move\n                        \n                    \n                \n            \n            \n                \nmove(x: number, y: number)\n                \n            \n\n\n            \n                \n                    Defined in src/app/mixer/provider/viewport.service.ts:91\n                \n            \n\n\n            \n                \n                    called when the local view is scrolled to a new part of the page\n\n\n                    \n                        Parameters :\n                        \n                        \n                            \n                                \n                                    Name\n                                    Type\n                                    Optional\n                                \n                            \n                            \n                                \n                                    x\n                                    \n                                                number\n                                    \n\n                                    \n                                        No\n                                    \n\n\n                                \n                                \n                                    y\n                                    \n                                                number\n                                    \n\n                                    \n                                        No\n                                    \n\n\n                                \n                            \n                        \n                    \n                    \n                    \n                    \n                        Returns :         void\n\n                    \n                    \n                        \n                    \n                \n            \n        \n    \n    \n        \n            \n                \n                    \n                    \n                        removeObj\n                        \n                    \n                \n            \n            \n                \nremoveObj(id: number)\n                \n            \n\n\n            \n                \n                    Defined in src/app/mixer/provider/viewport.service.ts:65\n                \n            \n\n\n            \n                \n                    calledd when subdraft is deleted\n\n\n                    \n                        Parameters :\n                        \n                        \n                            \n                                \n                                    Name\n                                    Type\n                                    Optional\n                                    Description\n                                \n                            \n                            \n                                \n                                    id\n                                    \n                                                number\n                                    \n\n                                    \n                                        No\n                                    \n\n\n                                    \n                                        \nthe subdraft id\n\n\n                                    \n                                \n                            \n                        \n                    \n                    \n                    \n                    \n                        Returns :         void\n\n                    \n                    \n                        \n                    \n                \n            \n        \n    \n    \n        \n            \n                \n                    \n                    \n                        set\n                        \n                    \n                \n            \n            \n                \nset(x: number, y: number, width: number, height: number)\n                \n            \n\n\n            \n                \n                    Defined in src/app/mixer/provider/viewport.service.ts:104\n                \n            \n\n\n            \n                \n\n                    \n                        Parameters :\n                        \n                        \n                            \n                                \n                                    Name\n                                    Type\n                                    Optional\n                                \n                            \n                            \n                                \n                                    x\n                                    \n                                                number\n                                    \n\n                                    \n                                        No\n                                    \n\n\n                                \n                                \n                                    y\n                                    \n                                                number\n                                    \n\n                                    \n                                        No\n                                    \n\n\n                                \n                                \n                                    width\n                                    \n                                                number\n                                    \n\n                                    \n                                        No\n                                    \n\n\n                                \n                                \n                                    height\n                                    \n                                                number\n                                    \n\n                                    \n                                        No\n                                    \n\n\n                                \n                            \n                        \n                    \n                    \n                    \n                    \n                        Returns :         void\n\n                    \n                    \n                        \n                    \n                \n            \n        \n    \n    \n        \n            \n                \n                    \n                    \n                        setAbsolute\n                        \n                    \n                \n            \n            \n                \nsetAbsolute(w: number, h: number)\n                \n            \n\n\n            \n                \n                    Defined in src/app/mixer/provider/viewport.service.ts:81\n                \n            \n\n\n            \n                \n\n                    \n                        Parameters :\n                        \n                        \n                            \n                                \n                                    Name\n                                    Type\n                                    Optional\n                                \n                            \n                            \n                                \n                                    w\n                                    \n                                                number\n                                    \n\n                                    \n                                        No\n                                    \n\n\n                                \n                                \n                                    h\n                                    \n                                                number\n                                    \n\n                                    \n                                        No\n                                    \n\n\n                                \n                            \n                        \n                    \n                    \n                    \n                    \n                        Returns :         void\n\n                    \n                    \n                        \n                    \n                \n            \n        \n    \n    \n        \n            \n                \n                    \n                    \n                        setHeight\n                        \n                    \n                \n            \n            \n                \nsetHeight(h: number)\n                \n            \n\n\n            \n                \n                    Defined in src/app/mixer/provider/viewport.service.ts:122\n                \n            \n\n\n            \n                \n\n                    \n                        Parameters :\n                        \n                        \n                            \n                                \n                                    Name\n                                    Type\n                                    Optional\n                                \n                            \n                            \n                                \n                                    h\n                                    \n                                                number\n                                    \n\n                                    \n                                        No\n                                    \n\n\n                                \n                            \n                        \n                    \n                    \n                    \n                    \n                        Returns :         void\n\n                    \n                    \n                        \n                    \n                \n            \n        \n    \n    \n        \n            \n                \n                    \n                    \n                        setTopLeft\n                        \n                    \n                \n            \n            \n                \nsetTopLeft(p: Point)\n                \n            \n\n\n            \n                \n                    Defined in src/app/mixer/provider/viewport.service.ts:134\n                \n            \n\n\n            \n                \n\n                    \n                        Parameters :\n                        \n                        \n                            \n                                \n                                    Name\n                                    Type\n                                    Optional\n                                \n                            \n                            \n                                \n                                    p\n                                    \n                                                Point\n                                    \n\n                                    \n                                        No\n                                    \n\n\n                                \n                            \n                        \n                    \n                    \n                    \n                    \n                        Returns :         void\n\n                    \n                    \n                        \n                    \n                \n            \n        \n    \n    \n        \n            \n                \n                    \n                    \n                        setViewportCenter\n                        \n                    \n                \n            \n            \n                \nsetViewportCenter()\n                \n            \n\n\n            \n                \n                    Defined in src/app/mixer/provider/viewport.service.ts:162\n                \n            \n\n\n            \n                \n                    set the viewport in the center of the screen\n\n\n                    \n                    \n                    \n                        Returns :         Point\n\n                    \n                    \n                        the point for referencing\n\n                    \n                \n            \n        \n    \n    \n        \n            \n                \n                    \n                    \n                        setWidth\n                        \n                    \n                \n            \n            \n                \nsetWidth(w: number)\n                \n            \n\n\n            \n                \n                    Defined in src/app/mixer/provider/viewport.service.ts:110\n                \n            \n\n\n            \n                \n\n                    \n                        Parameters :\n                        \n                        \n                            \n                                \n                                    Name\n                                    Type\n                                    Optional\n                                \n                            \n                            \n                                \n                                    w\n                                    \n                                                number\n                                    \n\n                                    \n                                        No\n                                    \n\n\n                                \n                            \n                        \n                    \n                    \n                    \n                    \n                        Returns :         void\n\n                    \n                    \n                        \n                    \n                \n            \n        \n    \n    \n        \n            \n                \n                    \n                    \n                        updatePoint\n                        \n                    \n                \n            \n            \n                \nupdatePoint(id: number, i: Interlacement)\n                \n            \n\n\n            \n                \n                    Defined in src/app/mixer/provider/viewport.service.ts:74\n                \n            \n\n\n            \n                \n                    called when a subdraft is moved and we need to update its location\n\n\n                    \n                        Parameters :\n                        \n                        \n                            \n                                \n                                    Name\n                                    Type\n                                    Optional\n                                    Description\n                                \n                            \n                            \n                                \n                                    id\n                                    \n                                                number\n                                    \n\n                                    \n                                        No\n                                    \n\n\n                                    \n                                        \nthe subdraft id to move\n\n\n                                    \n                                \n                                \n                                    i\n                                    \n                                                Interlacement\n                                    \n\n                                    \n                                        No\n                                    \n\n\n                                    \n                                        \nthe new position to set to\n\n\n                                    \n                                \n                            \n                        \n                    \n                    \n                    \n                    \n                        Returns :         void\n\n                    \n                    \n                        \n                    \n                \n            \n        \n    \n\n            \n    \n    \n        Properties\n    \n    \n        \n            \n                \n                    \n                    \n                        absolute\n                        \n                    \n                \n            \n                \n                    \n                        Type :         Bounds\n\n                    \n                \n                    \n                        \n                                Defined in src/app/mixer/provider/viewport.service.ts:17\n                        \n                    \n\n            \n                \n                    the total size of scrollable space\n\n                \n            \n\n        \n    \n    \n        \n            \n                \n                    \n                    \n                        objs\n                        \n                    \n                \n            \n                \n                    \n                        Type :     Array\n\n                    \n                \n                    \n                        \n                                Defined in src/app/mixer/provider/viewport.service.ts:28\n                        \n                    \n\n            \n                \n                    a reference to the topleft interlalcement of objects being rendered\nnumber references the unique id of this element\n\n                \n            \n\n        \n    \n    \n        \n            \n                \n                    \n                    \n                        vp\n                        \n                    \n                \n            \n                \n                    \n                        Type :         Bounds\n\n                    \n                \n                    \n                        \n                                Defined in src/app/mixer/provider/viewport.service.ts:22\n                        \n                    \n\n            \n                \n                    the bounds of the viewport within that space\n\n                \n            \n\n        \n    \n\n\n    \n\n\n    \n        import { Injectable } from '@angular/core';\nimport { Bounds, Interlacement, Point } from '../../core/model/datatypes';\n\n\n\n@Injectable({\n  providedIn: 'root'\n})\nexport class ViewportService {\n\n\n\n\n  /**\n   * the total size of scrollable space\n   */\n  absolute: Bounds;\n\n  /**\n   * the bounds of the viewport within that space\n   */\n  vp: Bounds;\n\n  /**\n   * a reference to the topleft interlalcement of objects being rendered\n   * number references the unique id of this element \n   */\n  objs: Array;\n\n  constructor(){\n\n    this.vp = {\n      topleft: {x:0, y:0}, \n      width: 0, \n      height:0\n    };\n\n    this.absolute = {\n      topleft: {x:0, y:0}, \n      width: 0, \n      height:0\n    };\n\n    this.objs = [];\n\n   }\n\n   clear(){\n     this.objs = [];\n   }\n\n  /**\n   * called when a new subdraft is added\n   * @param id the id of the subdraft\n   * @param i the topleft corner as interlacement\n   */   \n   addObj(id: number, i: Interlacement){\n     this.objs.push({id: id, i:i});\n   }\n\n   /**\n    * calledd when subdraft is deleted\n    * @param id - the subdraft id\n    */\n   removeObj(id: number){\n     this.objs  = this.objs.filter(el => el.id != id);\n   }\n\n   /**\n    * called when a subdraft is moved and we need to update its location\n    * @param id - the subdraft id to move\n    * @param i - the new position to set to\n    */\n   updatePoint(id:number, i:Interlacement){\n     this.objs = this.objs.map(el => {\n      if(el.id === id) el.i = i;\n      return el;\n    });\n   }\n\n   setAbsolute(w: number, h: number){\n    this.absolute.width = w;\n    this.absolute.height = h;\n   }\n\n   /**\n    * called when the local view is scrolled to a new part of the page\n    * @param x \n    * @param y \n    */\n  move(x: number, y:number){\n\n    if(x === undefined || y == undefined) return;\n\n    const bleh = {\n      x: this.vp.topleft.x + x,\n      y: this.vp.topleft.y + y\n    }\n\n    this.set(bleh.x, bleh.y, this.vp.width, this.vp.height);\n\n  }\n\n  set(x: number, y: number, width: number, height: number){\n    this.vp.topleft = {x: x, y:y};\n    this.vp.width = width;\n    this.vp.height = height;\n  }\n\n  setWidth(w: number){\n    this.vp.width = w;\n  }\n\n  getWidth(): number{\n    return this.vp.width;\n  }\n\n  getAbsoluteWidth(): number{\n    return this.absolute.width;\n  }\n\n  setHeight(h: number){\n    this.vp.height = h;\n  }\n\n  getHeight(): number{\n    return this.vp.height;\n  }\n\n  getAbsoluteHeight(): number{\n    return this.absolute.height;\n  }\n\n  setTopLeft(p: Point){\n    this.vp.topleft = {x: p.x, y:p.y};\n  }\n\n  getTopLeft(): Point{\n    return this.vp.topleft;\n  }\n\n  getBounds(): Bounds {\n    return this.vp;\n  }\n\n  /**\n   * this gets the center point of the current viewport\n   * @returns \n   */\n  getCenterPoint(): Point{\n    const center: Point = {\n      x: this.vp.topleft.x + this.vp.width/2,\n      y: this.vp.topleft.y + this.vp.height/2\n    }\n    return center;\n  }\n\n  /**\n  * set the viewport in the center of the screen\n  * @returns the point for referencing\n   */\n  setViewportCenter(): Point{\n\n    const abs_topleft: Point = {\n      x: this.absolute.width/2 - this.vp.width/2,\n      y: this.absolute.height/2 - this.vp.height/2\n    }\n\n    this.vp.topleft = abs_topleft;\n    return abs_topleft;\n\n  }\n\n\n  \n\n\n\n}\n\n    \n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n                   \n    \n         results matching \"\"\n        \n    \n    \n        No results matching \"\"\n    \n\n"},"components/VirtualPedalsComponent.html":{"url":"components/VirtualPedalsComponent.html","title":"component - VirtualPedalsComponent","body":"\n                   \n\n\n\n\n\n  Components\n  \n  VirtualPedalsComponent\n\n\n\n        \n            Info\n        \n        \n            Source\n        \n        \n            Template\n        \n        \n            Styles\n        \n        \n            DOM Tree\n        \n\n\n\n    \n    File\n\n\n    src/app/player/virtual-pedals/virtual-pedals.component.ts\n\n\n\n\n\n    \n        Implements\n    \n    \n                    OnInit\n    \n\n\n\n    Metadata\n    \n        \n\n\n\n\n\n\n\n\n\n\n\n            \n                selector\n                app-virtual-pedals\n            \n\n            \n                styleUrls\n                ./virtual-pedals.component.scss\n            \n\n\n\n            \n                templateUrl\n                ./virtual-pedals.component.html\n            \n\n\n\n\n\n\n\n\n        \n    \n\n\n    \n    Index\n    \n        \n                \n                    \n                        Properties\n                    \n                \n                \n                    \n                        \n                            \n                                    Public\n                                pds\n                            \n                        \n                    \n                \n\n                \n                    \n                        Methods\n                    \n                \n                \n                    \n                        \n                            \n                                ngOnInit\n                            \n                            \n                                onKeyPress\n                            \n                        \n                    \n                \n\n\n\n\n                \n                    \n                        HostListeners\n                    \n                \n                \n                    \n                        \n                            \n                                window:keydown\n                            \n                        \n                    \n                \n\n        \n    \n\n\n    \n    Constructor\n        \n            \n                \n                    \nconstructor(pds: PedalsService)\n                    \n                \n                        \n                            \n                                Defined in src/app/player/virtual-pedals/virtual-pedals.component.ts:9\n                            \n                        \n\n                \n                    \n                            \n                                    Parameters :\n                                    \n                                        \n                                            \n                                                Name\n                                                    Type\n                                                Optional\n                                            \n                                        \n                                        \n                                                \n                                                        pds\n                                                  \n                                                        \n                                                                        PedalsService\n                                                        \n                                                  \n                                                    \n                                                            No\n                                                    \n                                                    \n                                                \n                                        \n                                    \n                            \n                    \n                \n            \n        \n\n\n\n\n\n    \n    HostListeners    \n        \n            \n                \n                    \n                    \n                        window:keydown\n                        \n                    \n                \n            \n            \n                \n                    Arguments : '$event' \n                \n            \n            \n                \nwindow:keydown(event: KeyboardEvent)\n                \n            \n\n\n            \n                \n                    Defined in src/app/player/virtual-pedals/virtual-pedals.component.ts:19\n                \n            \n\n\n        \n    \n\n    \n    \n    \n        Methods\n    \n    \n        \n            \n                \n                    \n                    \n                        ngOnInit\n                        \n                    \n                \n            \n            \n                \nngOnInit()\n                \n            \n\n\n            \n                \n                    Defined in src/app/player/virtual-pedals/virtual-pedals.component.ts:15\n                \n            \n\n\n            \n                \n\n                    \n                        Returns :         void\n\n                    \n                \n            \n        \n    \n    \n        \n            \n                \n                    \n                    \n                        onKeyPress\n                        \n                    \n                \n            \n            \n                \nonKeyPress(event: KeyboardEvent)\n                \n            \n\n            \n                \n                    Decorators : \n                    \n                    @HostListener('window:keydown', ['$event'])\n                \n            \n\n            \n                \n                    Defined in src/app/player/virtual-pedals/virtual-pedals.component.ts:19\n                \n            \n\n\n            \n                \n\n                    \n                        Parameters :\n                        \n                        \n                            \n                                \n                                    Name\n                                    Type\n                                    Optional\n                                \n                            \n                            \n                                \n                                    event\n                                    \n                                            KeyboardEvent\n                                    \n\n                                    \n                                        No\n                                    \n\n\n                                \n                            \n                        \n                    \n                    \n                    \n                    \n                        Returns :         void\n\n                    \n                    \n                        \n                    \n                \n            \n        \n    \n\n    \n    \n    \n        Properties\n    \n    \n        \n            \n                \n                    \n                    \n                            Public\n                        pds\n                        \n                    \n                \n            \n                \n                    \n                        Type :         PedalsService\n\n                    \n                \n                    \n                        \n                                Defined in src/app/player/virtual-pedals/virtual-pedals.component.ts:12\n                        \n                    \n\n\n        \n    \n\n\n\n\n\n    \n        import { Component, OnInit, HostListener } from '@angular/core';\nimport { PedalsService } from '../provider/pedals.service';\n\n@Component({\n  selector: 'app-virtual-pedals',\n  templateUrl: './virtual-pedals.component.html',\n  styleUrls: ['./virtual-pedals.component.scss']\n})\nexport class VirtualPedalsComponent implements OnInit {\n\n  constructor(\n    public pds: PedalsService,\n  ) { }\n\n  ngOnInit(): void {\n  }\n\n  @HostListener('window:keydown', ['$event'])\n  onKeyPress(event: KeyboardEvent) {\n    console.log(event);\n    switch(event.key) {\n      case ' ': \n        this.pds.togglePedalByID(0); \n        break;\n      case '1':\n      case '2':\n      case '3':\n      case '4':\n      case '5':\n      case '6':\n      case '7':\n      case '8':\n      case '9':\n        this.pds.togglePedalByID(parseInt(event.key));\n        break;\n      case '0':\n        this.pds.togglePedalByID(10);\n        break;\n      default: \n        console.log(\"unknown key \", event.key);\n        break;\n    }\n  }\n}\n\n    \n\n    \n        Virtual Pedals: {{ pds.num_v_pedals.val }}\n\n\n  \n    \n      +\n    \n    \n      -\n    \n  \n\n  \n    Pedals  -->\n    \n      \n        \n        {{p.id}}\n        \n      \n    \n  \n\n    \n\n    \n                \n                    ./virtual-pedals.component.scss\n                \n                .row {\n  display: flex;\n  flex-direction: row;\n}\n\n.row-item {\n  margin: 0 1em;\n  padding: 1em;\n}\n\n.mat-button {\n  background-color: #ff4081;\n  color: white;\n  width: min-content;\n  height: min-content;\n  min-width: revert;\n  min-height: revert;\n  line-height: normal;\n}\n\n#button-container {\n  padding: 1em 0;\n}\n    \n\n    \n        \n        \n            \n                Legend\n            \n            \n                Html element\n            \n            \n                Component\n            \n            \n                Html element with directive\n            \n        \n    \n\n    \n\n\n\n\n\n\n        var COMPONENT_TEMPLATE = 'Virtual Pedals: {{ pds.num_v_pedals.val }}            +              -            Pedals  -->                          {{p.id}}                    '\n    var COMPONENTS = [{'name': 'ConnectionComponent', 'selector': 'app-connection'},{'name': 'DraftdetailComponent', 'selector': 'app-draftdetail'},{'name': 'ImageComponent', 'selector': 'app-image'},{'name': 'InletComponent', 'selector': 'app-inlet'},{'name': 'MixerComponent', 'selector': 'app-mixer'},{'name': 'MixerViewComponent', 'selector': 'app-mixerview'},{'name': 'NoteComponent', 'selector': 'app-note'},{'name': 'OperationComponent', 'selector': 'app-operation'},{'name': 'OpHelpModal', 'selector': 'app-ophelp'},{'name': 'OpsComponent', 'selector': 'app-ops'},{'name': 'OpSequencerComponent', 'selector': 'app-op-sequencer'},{'name': 'PaletteComponent', 'selector': 'app-palette'},{'name': 'ParameterComponent', 'selector': 'app-parameter'},{'name': 'PlayerComponent', 'selector': 'app-player'},{'name': 'SnackbarComponent', 'selector': 'app-snackbar'},{'name': 'SubdraftComponent', 'selector': 'app-subdraft'},{'name': 'VirtualPedalsComponent', 'selector': 'app-virtual-pedals'},{'name': 'WeavingStateComponent', 'selector': 'app-weaving-state'}];\n    var DIRECTIVES = [{'name': 'MarqueeComponent', 'selector': 'app-marquee'},{'name': 'SelectionComponent', 'selector': 'app-selection'}];\n    var ACTUAL_COMPONENT = {'name': 'VirtualPedalsComponent'};\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n                   \n    \n         results matching \"\"\n        \n    \n    \n        No results matching \"\"\n    \n\n"},"interfaces/WeavingLog.html":{"url":"interfaces/WeavingLog.html","title":"interface - WeavingLog","body":"\n                   \n\n\n\n\n\n\n\n\n\n\n\n\n\n\n  Interfaces\n  \n  WeavingLog\n\n\n\n        \n            Info\n        \n        \n            Source\n        \n\n\n\n    \n        \n            File\n        \n        \n            src/app/player/model/player.ts\n        \n\n\n\n\n        \n            Index\n            \n                \n                    \n                        \n                            Properties\n                        \n                    \n                    \n                        \n                            \n                                \n                                        \n                                            draft\n                                        \n                                \n                                \n                                        \n                                            shortDraft\n                                        \n                                \n                                \n                                        \n                                            states\n                                        \n                                \n                            \n                        \n                    \n                \n            \n        \n\n\n\n            \n                Properties\n                    \n                        \n                                \n                                    \n                                        \n                                        draft\n                                            \n                                                \n                                            \n                                        \n                                    \n                                \n                                \n                                    \n                                        draft:         Draft\n\n                                    \n                                \n\n\n                                    \n                                        \n                                            Type :         Draft\n\n                                        \n                                    \n\n\n\n\n\n                        \n                    \n                    \n                        \n                                \n                                    \n                                        \n                                        shortDraft\n                                            \n                                                \n                                            \n                                        \n                                    \n                                \n                                \n                                    \n                                        shortDraft:         Draft\n\n                                    \n                                \n\n\n                                    \n                                        \n                                            Type :         Draft\n\n                                        \n                                    \n\n\n\n\n\n                        \n                    \n                    \n                        \n                                \n                                    \n                                        \n                                        states\n                                            \n                                                \n                                            \n                                        \n                                    \n                                \n                                \n                                    \n                                        states:         Array\n\n                                    \n                                \n\n\n                                    \n                                        \n                                            Type :         Array\n\n                                        \n                                    \n\n\n\n\n\n                        \n                    \n            \n    \n\n\n    \n        import { Draft } from \"../../core/model/datatypes\"\nimport { initDraft } from \"../../core/model/drafts\";\n\n/** @interface\n * PlayerState represents the Draft Player as an FSM\n * @param draft The Draft currently loaded by the weaver\n * @param row which row of the draft the weaving is at\n * @param weaving whether or not the TC2 is actually running, or the weaver is just previewing the draft\n * @param numPicks the number of rows (picks) that have been sent to the loom so far (because the TC2 needs to receive this as part of the pick data)\n * @param pedal the name (mapped function) of the pedal that triggered this state change\n */\nexport interface PlayerState {\n  draft: Draft,\n  row: number,\n  pedal: string,\n  weaving: boolean,\n  numPicks: number,\n}\n\nexport function copyState(init: PlayerState): PlayerState {\n  return Object.assign({}, init);\n}\n\nexport function initState(): PlayerState { \n  return {\n    draft: initDraft(),\n    row: 0,\n    pedal: \"\",\n    weaving: false,\n    numPicks: 0\n}};\n\nexport interface WeavingPick {\n  pickNum: number,\n  rowData: string,\n}\n\nexport interface WeavingLog {\n  draft: Draft,\n  shortDraft: Draft,\n  states: Array,\n}\n    \n\n\n\n\n\n\n\n\n\n                   \n    \n         results matching \"\"\n        \n    \n    \n        No results matching \"\"\n    \n\n"},"interfaces/WeavingPick.html":{"url":"interfaces/WeavingPick.html","title":"interface - WeavingPick","body":"\n                   \n\n\n\n\n\n\n\n\n\n\n\n\n\n\n  Interfaces\n  \n  WeavingPick\n\n\n\n        \n            Info\n        \n        \n            Source\n        \n\n\n\n    \n        \n            File\n        \n        \n            src/app/player/model/player.ts\n        \n\n\n\n\n        \n            Index\n            \n                \n                    \n                        \n                            Properties\n                        \n                    \n                    \n                        \n                            \n                                \n                                        \n                                            pickNum\n                                        \n                                \n                                \n                                        \n                                            rowData\n                                        \n                                \n                            \n                        \n                    \n                \n            \n        \n\n\n\n            \n                Properties\n                    \n                        \n                                \n                                    \n                                        \n                                        pickNum\n                                            \n                                                \n                                            \n                                        \n                                    \n                                \n                                \n                                    \n                                        pickNum:         number\n\n                                    \n                                \n\n\n                                    \n                                        \n                                            Type :         number\n\n                                        \n                                    \n\n\n\n\n\n                        \n                    \n                    \n                        \n                                \n                                    \n                                        \n                                        rowData\n                                            \n                                                \n                                            \n                                        \n                                    \n                                \n                                \n                                    \n                                        rowData:         string\n\n                                    \n                                \n\n\n                                    \n                                        \n                                            Type :         string\n\n                                        \n                                    \n\n\n\n\n\n                        \n                    \n            \n    \n\n\n    \n        import { Draft } from \"../../core/model/datatypes\"\nimport { initDraft } from \"../../core/model/drafts\";\n\n/** @interface\n * PlayerState represents the Draft Player as an FSM\n * @param draft The Draft currently loaded by the weaver\n * @param row which row of the draft the weaving is at\n * @param weaving whether or not the TC2 is actually running, or the weaver is just previewing the draft\n * @param numPicks the number of rows (picks) that have been sent to the loom so far (because the TC2 needs to receive this as part of the pick data)\n * @param pedal the name (mapped function) of the pedal that triggered this state change\n */\nexport interface PlayerState {\n  draft: Draft,\n  row: number,\n  pedal: string,\n  weaving: boolean,\n  numPicks: number,\n}\n\nexport function copyState(init: PlayerState): PlayerState {\n  return Object.assign({}, init);\n}\n\nexport function initState(): PlayerState { \n  return {\n    draft: initDraft(),\n    row: 0,\n    pedal: \"\",\n    weaving: false,\n    numPicks: 0\n}};\n\nexport interface WeavingPick {\n  pickNum: number,\n  rowData: string,\n}\n\nexport interface WeavingLog {\n  draft: Draft,\n  shortDraft: Draft,\n  states: Array,\n}\n    \n\n\n\n\n\n\n\n\n\n                   \n    \n         results matching \"\"\n        \n    \n    \n        No results matching \"\"\n    \n\n"},"interfaces/WeavingPick-1.html":{"url":"interfaces/WeavingPick-1.html","title":"interface - WeavingPick-1","body":"\n                   \n\n\n\n\n\n\n\n\n\n\n\n\n\n\n  Interfaces\n  \n  WeavingPick\n\n\n\n        \n            Info\n        \n        \n            Source\n        \n\n\n\n    \n        \n            File\n        \n        \n            src/app/player/model/state.ts\n        \n\n\n\n\n        \n            Index\n            \n                \n                    \n                        \n                            Properties\n                        \n                    \n                    \n                        \n                            \n                                \n                                        \n                                            pickNum\n                                        \n                                \n                                \n                                        \n                                            rowData\n                                        \n                                \n                            \n                        \n                    \n                \n            \n        \n\n\n\n            \n                Properties\n                    \n                        \n                                \n                                    \n                                        \n                                        pickNum\n                                            \n                                                \n                                            \n                                        \n                                    \n                                \n                                \n                                    \n                                        pickNum:         number\n\n                                    \n                                \n\n\n                                    \n                                        \n                                            Type :         number\n\n                                        \n                                    \n\n\n\n\n\n                        \n                    \n                    \n                        \n                                \n                                    \n                                        \n                                        rowData\n                                            \n                                                \n                                            \n                                        \n                                    \n                                \n                                \n                                    \n                                        rowData:         string\n\n                                    \n                                \n\n\n                                    \n                                        \n                                            Type :         string\n\n                                        \n                                    \n\n\n\n\n\n                        \n                    \n            \n    \n\n\n    \n        import { Draft } from \"../../core/model/datatypes\"\nimport { initDraft } from \"../../core/model/drafts\";\n\n/** @interface\n * PlayerState represents the Draft Player as an FSM\n * @param draft The Draft currently loaded by the weaver\n * @param row which row of the draft the weaving is at\n * @param weaving whether or not the TC2 is actually running, or the weaver is just previewing the draft\n * @param numPicks the number of rows (picks) that have been sent to the loom so far (because the TC2 needs to receive this as part of the pick data)\n * @param pedal the name (mapped function) of the pedal that triggered this state change\n */\nexport interface PlayerState {\n  draft: Draft,\n  row: number,\n  pedal: string,\n  weaving: boolean,\n  numPicks: number,\n}\n\nexport function copyState(init: PlayerState): PlayerState {\n  return Object.assign({}, init);\n}\n\nexport function initState(): PlayerState { \n  return {\n    draft: initDraft(),\n    row: 0,\n    pedal: \"\",\n    weaving: false,\n    numPicks: 0\n}};\n\nexport interface WeavingPick {\n  pickNum: number,\n  rowData: string\n}\n    \n\n\n\n\n\n\n\n\n\n                   \n    \n         results matching \"\"\n        \n    \n    \n        No results matching \"\"\n    \n\n"},"components/WeavingStateComponent.html":{"url":"components/WeavingStateComponent.html","title":"component - WeavingStateComponent","body":"\n                   \n\n\n\n\n\n  Components\n  \n  WeavingStateComponent\n\n\n\n        \n            Info\n        \n        \n            Source\n        \n        \n            Template\n        \n        \n            Styles\n        \n        \n            DOM Tree\n        \n\n\n\n    \n    File\n\n\n    src/app/player/weaving-state/weaving-state.component.ts\n\n\n\n\n\n    \n        Implements\n    \n    \n                    OnInit\n    \n\n\n\n    Metadata\n    \n        \n\n\n\n\n\n\n\n\n\n\n\n            \n                selector\n                app-weaving-state\n            \n\n            \n                styleUrls\n                ./weaving-state.component.scss\n            \n\n\n\n            \n                templateUrl\n                ./weaving-state.component.html\n            \n\n\n\n\n\n\n\n\n        \n    \n\n\n    \n    Index\n    \n        \n                \n                    \n                        Properties\n                    \n                \n                \n                    \n                        \n                            \n                                cx\n                            \n                            \n                                draft_set\n                            \n                            \n                                draftCanvas\n                            \n                            \n                                ink\n                            \n                            \n                                    Public\n                                map\n                            \n                            \n                                mixerElement\n                            \n                            \n                                ownElement\n                            \n                            \n                                    Public\n                                pds\n                            \n                            \n                                    Public\n                                pls\n                            \n                        \n                    \n                \n\n                \n                    \n                        Methods\n                    \n                \n                \n                    \n                        \n                            \n                                drawCell\n                            \n                            \n                                drawDraft\n                            \n                            \n                                drawProgressBar\n                            \n                            \n                                ngAfterViewInit\n                            \n                            \n                                ngOnInit\n                            \n                        \n                    \n                \n\n                \n                    \n                        Inputs\n                    \n                \n                \n                    \n                        \n                            \n                                default_cell\n                            \n                            \n                                draft\n                            \n                        \n                    \n                \n\n\n\n\n        \n    \n\n\n    \n    Constructor\n        \n            \n                \n                    \nconstructor(pls: PlayerService, pds: PedalsService, map: MappingsService)\n                    \n                \n                        \n                            \n                                Defined in src/app/player/weaving-state/weaving-state.component.ts:24\n                            \n                        \n\n                \n                    \n                            \n                                    Parameters :\n                                    \n                                        \n                                            \n                                                Name\n                                                    Type\n                                                Optional\n                                            \n                                        \n                                        \n                                                \n                                                        pls\n                                                  \n                                                        \n                                                                        PlayerService\n                                                        \n                                                  \n                                                    \n                                                            No\n                                                    \n                                                    \n                                                \n                                                \n                                                        pds\n                                                  \n                                                        \n                                                                        PedalsService\n                                                        \n                                                  \n                                                    \n                                                            No\n                                                    \n                                                    \n                                                \n                                                \n                                                        map\n                                                  \n                                                        \n                                                                        MappingsService\n                                                        \n                                                  \n                                                    \n                                                            No\n                                                    \n                                                    \n                                                \n                                        \n                                    \n                            \n                    \n                \n            \n        \n\n\n    \n    Inputs\n        \n            \n                \n                    \n                        \n                        default_cell\n                    \n                \n                \n                    \n                        Type :         number\n\n                    \n                \n                        \n                            \n                                    Defined in src/app/player/weaving-state/weaving-state.component.ts:16\n                            \n                        \n            \n        \n        \n            \n                \n                    \n                        \n                        draft\n                    \n                \n                \n                    \n                        Type :         Draft\n\n                    \n                \n                        \n                            \n                                    Defined in src/app/player/weaving-state/weaving-state.component.ts:17\n                            \n                        \n            \n        \n\n\n\n\n    \n    \n    \n        Methods\n    \n    \n        \n            \n                \n                    \n                    \n                        drawCell\n                        \n                    \n                \n            \n            \n                \ndrawCell(cell_size: number, i: number, j: number, usecolor: boolean, flipY: boolean)\n                \n            \n\n\n            \n                \n                    Defined in src/app/player/weaving-state/weaving-state.component.ts:80\n                \n            \n\n\n            \n                \n\n                    \n                        Parameters :\n                        \n                        \n                            \n                                \n                                    Name\n                                    Type\n                                    Optional\n                                    Default value\n                                \n                            \n                            \n                                \n                                    cell_size\n                                    \n                                                number\n                                    \n\n                                    \n                                        No\n                                    \n\n                                    \n                                    \n\n                                \n                                \n                                    i\n                                    \n                                                number\n                                    \n\n                                    \n                                        No\n                                    \n\n                                    \n                                    \n\n                                \n                                \n                                    j\n                                    \n                                                number\n                                    \n\n                                    \n                                        No\n                                    \n\n                                    \n                                    \n\n                                \n                                \n                                    usecolor\n                                    \n                                                boolean\n                                    \n\n                                    \n                                        No\n                                    \n\n                                    \n                                    \n\n                                \n                                \n                                    flipY\n                                    \n                                                boolean\n                                    \n\n                                    \n                                        No\n                                    \n\n                                    \n                                        true\n                                    \n\n                                \n                            \n                        \n                    \n                    \n                    \n                    \n                        Returns :         void\n\n                    \n                    \n                        \n                    \n                \n            \n        \n    \n    \n        \n            \n                \n                    \n                    \n                        drawDraft\n                        \n                    \n                \n            \n            \n                \ndrawDraft(flipY: boolean)\n                \n            \n\n\n            \n                \n                    Defined in src/app/player/weaving-state/weaving-state.component.ts:55\n                \n            \n\n\n            \n                \n                    COPIED FROM palette/subdraft\ndraw whetever is stored in the this.pls.draft object to the screen\n\n\n                    \n                        Parameters :\n                        \n                        \n                            \n                                \n                                    Name\n                                    Type\n                                    Optional\n                                    Default value\n                                \n                            \n                            \n                                \n                                    flipY\n                                    \n                                                boolean\n                                    \n\n                                    \n                                        No\n                                    \n\n                                    \n                                        true\n                                    \n\n                                \n                            \n                        \n                    \n                    \n                    \n                    \n                        Returns :         void\n\n                    \n                    \n                        \n                    \n                \n            \n        \n    \n    \n        \n            \n                \n                    \n                    \n                        drawProgressBar\n                        \n                    \n                \n            \n            \n                \ndrawProgressBar(cell_size: number, i: number, width: number, flipY: boolean)\n                \n            \n\n\n            \n                \n                    Defined in src/app/player/weaving-state/weaving-state.component.ts:104\n                \n            \n\n\n            \n                \n\n                    \n                        Parameters :\n                        \n                        \n                            \n                                \n                                    Name\n                                    Type\n                                    Optional\n                                    Default value\n                                \n                            \n                            \n                                \n                                    cell_size\n                                    \n                                                number\n                                    \n\n                                    \n                                        No\n                                    \n\n                                    \n                                    \n\n                                \n                                \n                                    i\n                                    \n                                                number\n                                    \n\n                                    \n                                        No\n                                    \n\n                                    \n                                    \n\n                                \n                                \n                                    width\n                                    \n                                                number\n                                    \n\n                                    \n                                        No\n                                    \n\n                                    \n                                    \n\n                                \n                                \n                                    flipY\n                                    \n                                                boolean\n                                    \n\n                                    \n                                        No\n                                    \n\n                                    \n                                        true\n                                    \n\n                                \n                            \n                        \n                    \n                    \n                    \n                    \n                        Returns :         void\n\n                    \n                    \n                        \n                    \n                \n            \n        \n    \n    \n        \n            \n                \n                    \n                    \n                        ngAfterViewInit\n                        \n                    \n                \n            \n            \n                \nngAfterViewInit()\n                \n            \n\n\n            \n                \n                    Defined in src/app/player/weaving-state/weaving-state.component.ts:36\n                \n            \n\n\n            \n                \n\n                    \n                        Returns :         void\n\n                    \n                \n            \n        \n    \n    \n        \n            \n                \n                    \n                    \n                        ngOnInit\n                        \n                    \n                \n            \n            \n                \nngOnInit()\n                \n            \n\n\n            \n                \n                    Defined in src/app/player/weaving-state/weaving-state.component.ts:34\n                \n            \n\n\n            \n                \n\n                    \n                        Returns :         void\n\n                    \n                \n            \n        \n    \n\n    \n    \n    \n        Properties\n    \n    \n        \n            \n                \n                    \n                    \n                        cx\n                        \n                    \n                \n            \n                \n                    \n                        Type :         any\n\n                    \n                \n                    \n                        \n                                Defined in src/app/player/weaving-state/weaving-state.component.ts:23\n                        \n                    \n\n\n        \n    \n    \n        \n            \n                \n                    \n                    \n                        draft_set\n                        \n                    \n                \n            \n                \n                    \n                        Type :         boolean\n\n                    \n                \n                \n                    \n                        Default value : false\n                    \n                \n                    \n                        \n                                Defined in src/app/player/weaving-state/weaving-state.component.ts:19\n                        \n                    \n\n\n        \n    \n    \n        \n            \n                \n                    \n                    \n                        draftCanvas\n                        \n                    \n                \n            \n                \n                    \n                        Type :     HTMLCanvasElement\n\n                    \n                \n                    \n                        \n                                Defined in src/app/player/weaving-state/weaving-state.component.ts:22\n                        \n                    \n\n\n        \n    \n    \n        \n            \n                \n                    \n                    \n                        ink\n                        \n                    \n                \n            \n                \n                    \n                        Type :         string\n\n                    \n                \n                \n                    \n                        Default value : 'neq'\n                    \n                \n                    \n                        \n                                Defined in src/app/player/weaving-state/weaving-state.component.ts:24\n                        \n                    \n\n\n        \n    \n    \n        \n            \n                \n                    \n                    \n                            Public\n                        map\n                        \n                    \n                \n            \n                \n                    \n                        Type :         MappingsService\n\n                    \n                \n                    \n                        \n                                Defined in src/app/player/weaving-state/weaving-state.component.ts:29\n                        \n                    \n\n\n        \n    \n    \n        \n            \n                \n                    \n                    \n                        mixerElement\n                        \n                    \n                \n            \n                \n                    \n                        Type :     HTMLElement\n\n                    \n                \n                    \n                        \n                                Defined in src/app/player/weaving-state/weaving-state.component.ts:21\n                        \n                    \n\n\n        \n    \n    \n        \n            \n                \n                    \n                    \n                        ownElement\n                        \n                    \n                \n            \n                \n                    \n                        Type :     HTMLElement\n\n                    \n                \n                    \n                        \n                                Defined in src/app/player/weaving-state/weaving-state.component.ts:20\n                        \n                    \n\n\n        \n    \n    \n        \n            \n                \n                    \n                    \n                            Public\n                        pds\n                        \n                    \n                \n            \n                \n                    \n                        Type :         PedalsService\n\n                    \n                \n                    \n                        \n                                Defined in src/app/player/weaving-state/weaving-state.component.ts:28\n                        \n                    \n\n\n        \n    \n    \n        \n            \n                \n                    \n                    \n                            Public\n                        pls\n                        \n                    \n                \n            \n                \n                    \n                        Type :         PlayerService\n\n                    \n                \n                    \n                        \n                                Defined in src/app/player/weaving-state/weaving-state.component.ts:27\n                        \n                    \n\n\n        \n    \n\n\n\n\n\n    \n        import { Component, Input, Output, OnInit} from '@angular/core';\nimport { PlayerService } from '../player.service';\nimport { MaterialsService } from '../../core/provider/materials.service';\nimport { Draft } from '../../core/model/datatypes';\nimport { wefts, warps, isUp, isSet } from '../../core/model/drafts';\nimport { PedalsService } from '../provider/pedals.service';\nimport { MappingsService } from '../provider/mappings.service';\n\n@Component({\n  selector: 'app-weaving-state',\n  templateUrl: './weaving-state.component.html',\n  styleUrls: ['./weaving-state.component.scss']\n})\nexport class WeavingStateComponent implements OnInit {\n\n  @Input()  default_cell: number;\n  @Input('draft') active_draft: Draft;\n\n  draft_set: boolean = false;\n  ownElement: HTMLElement;\n  mixerElement: HTMLElement;\n  draftCanvas: HTMLCanvasElement;\n  cx: any;\n  ink = 'neq'; //can be or, and, neq, not, splice\n\n  constructor(\n    public pls: PlayerService,\n    public pds: PedalsService,\n    public map: MappingsService,\n  ) { \n    this.default_cell = 10;\n  }\n\n  ngOnInit(): void {}\n\n  ngAfterViewInit() {\n    this.ownElement = document.getElementById('player-container');\n    this.mixerElement = document.querySelector('.mat-drawer-container');\n    console.log(\"init w/ element refs \", this.ownElement, this.mixerElement);\n    this.draftCanvas =  document.getElementById('active-draft-canvas');\n    this.cx = this.draftCanvas.getContext(\"2d\");\n\n    this.pls.redraw.on('redraw', () => {\n      console.log(\"redrawing \", this.pls.state);\n      this.drawDraft();\n      // this.resizeContainer();\n    });\n\n  }\n  /**\n   * COPIED FROM palette/subdraft\n   * draw whetever is stored in the this.pls.draft object to the screen\n   * @returns \n   */\n   drawDraft(flipY: boolean = true) {\n\n    if(this.draftCanvas === undefined) return;\n    this.cx = this.draftCanvas.getContext(\"2d\");\n   \n    if(this.pls.draft === null) {\n      this.draftCanvas.width = 0;\n      this.draftCanvas.height = 0;\n\n    } else {\n      this.draft_set = true;\n      this.draftCanvas.width = (warps(this.pls.draft.drawdown)+2) * this.default_cell;\n      this.draftCanvas.height = wefts(this.pls.draft.drawdown) * this.default_cell;\n\n      for (let i = 0; i \n    \n\n    \n        \n  \n    \n      \n        Loom: Online\n      \n      \n        Loom: Offline\n      \n    \n\n    \n      Warps\n      \n    \n\n    \n        Draft Tiling\n    \n\n    \n      \n        Start Weaving\n        Stop Weaving\n      \n    \n    \n    \n      Pedals \n      \n        \n          \n          {{p.id}}\n          \n        \n      \n     -->\n\n  \n\n  \n    \n      Pedals \n      {{pls.pedals}} -->\n      \n        \n          \n            \n              {{p.id}}\n              {{p.u_name}}\n            \n            \n              State: \n              {{p.state}}\n            \n            \n              \n                Operation\n                \n                  \n                    \n                      {{pls.pedalOps.pairs[p.id].name}}\n                    \n                  \n                  \n                    {{op.name}}\n                  \n                \n              \n            \n          \n        \n      \n\n      \n        \n          \n            \n              {{p.id}}\n              {{p.u_name}}\n            \n            \n              State: \n              {{p.state}}\n            \n            \n              \n                Operation\n                \n                  \n                    \n                      {{map.getMap(p.id).name}}\n                    \n                   -->\n                  \n                    {{op.name}}\n                  \n                \n              \n            \n          \n        \n      \n    \n\n    \n      Draft\n      \n      \n      \n    \n  \n\n\n\n    \n\n    \n                \n                    ./weaving-state.component.scss\n                \n                #pedals-draft-container {\n  display: flex;\n  flex-direction: column;\n}\n\n.first-row { \n  flex-wrap: wrap;\n  display: flex;\n  align-items: flex-start;\n  flex-basis: 100%;\n}\n\n.loom-block, .draft-block {\n  display: inline-block;\n}\n\n.draft-block{\n  height: inherit; \n  flex-wrap: nowrap;\n  flex: 1;\n}\n\n.draft-scroll{\n  max-width: 1255px;\n  max-height: 370px;\n  overflow: scroll;\n}\n\n.break{\n  flex-basis: 100%\n}\n\n.player-field-header {\n  padding: 14px;\n  margin: unset;\n  background: #3f51b5;\n  color: #ffffff;\n}\n\n.pedal-field-header {\n  padding: 10px;\n  margin: unset;\n  //background: #3f51b5;\n  margin-bottom: 5px;\n  color: #0a0000;\n}\n\n\n.loom-field, .pedals-field, .draft-field, .op-field {\n  display: block;\n  margin-top: 10px;\n  margin-bottom: 5px;\n}\n\n.online {\n  background-color: rgb(58, 255, 19);\n  color: #222222;\n}\n\n.offline {\n  background-color: rgb(150, 0, 0);\n  color: #ffffff;\n}\n\n.pedal-array, .active-draft, .status-row {\n  display: flex;\n  flex-direction: row;\n}\n\n.pedal-array {\n  margin: 10px;\n}\n\n.pedal-box {\n  background-color: #bbc5ff;\n  margin-right: 10px;\n  margin-left: 10px;\n}\n\n.pedal-box, .data-display, #loom-container {\n  padding: 10px;\n}\n\n.pedal-state {\n  font-size: x-small;\n  color: #444444;\n}\n\n#loom-container {\n  padding-right: 20px;\n}\n\n#draft-container {\n  background-color: rgb(214, 214, 214);\n}\n\n#active-draft-canvas {\n  padding: 10px;\n}\n\n.pedal-box-row > .mat-form-field, .mat-option {\n  width: 130px;\n}\n\n.pedal-field, .pedal-field-label {\n  padding: 2px;\n}\n\n.mat-button {\n  background-color: #ff4081;\n  color: white;\n  width: inherit;\n  margin-left: 10px;\n  margin-right: 10px;\n}\n\n.mat-button.mat-button-disabled {\n  background-color: #fd6d9d;\n  color: rgba(255, 255, 255, 0.50);\n  \n}\n\n.mat-expansion-panel-header, \n.mat-expansion-panel-header.mat-expanded:focus {\n  background: #121f6b;\n}\n\n.mat-expansion-panel-body {\n  padding: 0px;\n}\n\n.mat-expansion-panel, .mat-accordion, .mat-expansion-panel-header,\n.mat-accordion .mat-expansion-panel:last-of-type, \n.mat-accordion .mat-expansion-panel:first-of-type  {\n  border: #ffffff 1px;\n  border-radius: 0pt;\n  border-bottom-left-radius: 0pt;\n  border-bottom-right-radius: 0pt;\n  border-top-left-radius: 0pt;\n  border-top-right-radius: 0pt;\n  border-bottom: 0pt;\n}\n\n.mat-expansion-panel-header:hover, \n.mat-expansion-panel-header.mat-expanded:hover,\n.mat-expansion-panel:not(.mat-expanded), \n.mat-expansion-panel-header:hover:not([aria-disabled=true])   {\n  background: #566be2;\n}\n\n.mat-expansion-panel-header-title, .mat-expansion-indicator{\n  color: white;\n}\n    \n\n    \n        \n        \n            \n                Legend\n            \n            \n                Html element\n            \n            \n                Component\n            \n            \n                Html element with directive\n            \n        \n    \n\n    \n\n\n\n\n\n\n        var COMPONENT_TEMPLATE = '                    Loom: Online                    Loom: Offline                    Warps                      Draft Tiling                      Start Weaving        Stop Weaving                        Pedals                                   {{p.id}}                             -->              Pedals       {{pls.pedals}} -->                                                  {{p.id}}              {{p.u_name}}                                      State:               {{p.state}}                                                      Operation                                                                            {{pls.pedalOps.pairs[p.id].name}}                                                                            {{op.name}}                                                                                                                                      {{p.id}}              {{p.u_name}}                                      State:               {{p.state}}                                                      Operation                                                                            {{map.getMap(p.id).name}}                                       -->                                      {{op.name}}                                                                                                  Draft                        '\n    var COMPONENTS = [{'name': 'ConnectionComponent', 'selector': 'app-connection'},{'name': 'DraftdetailComponent', 'selector': 'app-draftdetail'},{'name': 'ImageComponent', 'selector': 'app-image'},{'name': 'InletComponent', 'selector': 'app-inlet'},{'name': 'MixerComponent', 'selector': 'app-mixer'},{'name': 'MixerViewComponent', 'selector': 'app-mixerview'},{'name': 'NoteComponent', 'selector': 'app-note'},{'name': 'OperationComponent', 'selector': 'app-operation'},{'name': 'OpHelpModal', 'selector': 'app-ophelp'},{'name': 'OpsComponent', 'selector': 'app-ops'},{'name': 'OpSequencerComponent', 'selector': 'app-op-sequencer'},{'name': 'PaletteComponent', 'selector': 'app-palette'},{'name': 'ParameterComponent', 'selector': 'app-parameter'},{'name': 'PlayerComponent', 'selector': 'app-player'},{'name': 'SnackbarComponent', 'selector': 'app-snackbar'},{'name': 'SubdraftComponent', 'selector': 'app-subdraft'},{'name': 'VirtualPedalsComponent', 'selector': 'app-virtual-pedals'},{'name': 'WeavingStateComponent', 'selector': 'app-weaving-state'}];\n    var DIRECTIVES = [{'name': 'MarqueeComponent', 'selector': 'app-marquee'},{'name': 'SelectionComponent', 'selector': 'app-selection'}];\n    var ACTUAL_COMPONENT = {'name': 'WeavingStateComponent'};\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n                   \n    \n         results matching \"\"\n        \n    \n    \n        No results matching \"\"\n    \n\n"},"interfaces/YarnPath.html":{"url":"interfaces/YarnPath.html","title":"interface - YarnPath","body":"\n                   \n\n\n\n\n\n\n\n\n\n\n\n\n\n\n  Interfaces\n  \n  YarnPath\n\n\n\n        \n            Info\n        \n        \n            Source\n        \n\n\n\n    \n        \n            File\n        \n        \n            src/app/core/model/datatypes/yarnsim.ts\n        \n\n\n            \n                Description\n            \n            \n                Used to draw on screen paths, refers to x, y coordiantes relative to the draft simulation\nUsed only in yarn sim\n\n            \n\n\n        \n            Index\n            \n                \n                    \n                        \n                            Properties\n                        \n                    \n                    \n                        \n                            \n                                \n                                        \n                                            draft_ndx\n                                        \n                                \n                                \n                                        \n                                            material_id\n                                        \n                                \n                                \n                                        \n                                            verticies\n                                        \n                                \n                            \n                        \n                    \n                \n            \n        \n\n\n\n            \n                Properties\n                    \n                        \n                                \n                                    \n                                        \n                                        draft_ndx\n                                            \n                                                \n                                            \n                                        \n                                    \n                                \n                                \n                                    \n                                        draft_ndx:         number\n\n                                    \n                                \n\n\n                                    \n                                        \n                                            Type :         number\n\n                                        \n                                    \n\n\n\n\n\n                        \n                    \n                    \n                        \n                                \n                                    \n                                        \n                                        material_id\n                                            \n                                                \n                                            \n                                        \n                                    \n                                \n                                \n                                    \n                                        material_id:         number\n\n                                    \n                                \n\n\n                                    \n                                        \n                                            Type :         number\n\n                                        \n                                    \n\n\n\n\n\n                        \n                    \n                    \n                        \n                                \n                                    \n                                        \n                                        verticies\n                                            \n                                                \n                                            \n                                        \n                                    \n                                \n                                \n                                    \n                                        verticies:         Array\n\n                                    \n                                \n\n\n                                    \n                                        \n                                            Type :         Array\n\n                                        \n                                    \n\n\n\n\n\n                        \n                    \n            \n    \n\n\n    \n        export interface Vertex {\n  x_pcent: number;\n  y: number;\n}\n\n/**\n * Used to draw on screen paths, refers to x, y coordiantes relative to the draft simulation\n * Used only in yarn sim\n * @param draft_ndx - the row id within the draft of this yarn\n * @param material_id the material id at this row\n * @param verticies - list of points that form this path\n */\nexport interface YarnPath {\n\tdraft_ndx: number;\n  material_id: number;\n  verticies: Array;\n}\n\n/**\n * describes the relationship between weft rows along the same warp\n */\nexport type crossType = \n \t{t:boolean, b:boolean} |\n  {t:null, b:null} | //\"FLOAT\",\n  {t:null, b:true} | //\"UNSET_UNDER\"\n  {t:null, b:false} | //\"UNSET_OVER\"\n  {t:true, b:null} | //\"UNDER_UNSET\"\n  {t:false, b:null} | //\"OVER_UNSET\"\n  {t:false, b:true} | //\"OVER_UNDER\",\n  {t:true, b:false}; //\"UNDER_OVER\", \n\n\n/**\n * A yarn cross describes the relationship betwen two draft cells\n * read from top to bottom. This is used within the sparce \n * draft representation, stores only \"warp\" crossings\n */\nexport interface Crossing {\n  j: number, \n  type: crossType;\n}\n    \n\n\n\n\n\n\n\n\n\n                   \n    \n         results matching \"\"\n        \n    \n    \n        No results matching \"\"\n    \n\n"},"dependencies.html":{"url":"dependencies.html","title":"package-dependencies - dependencies","body":"\n                   \n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n    \n        Dependencies\n    \n    \n        \n            @angular/animations : ^13.1.1\n        \n            @angular/cdk : ^13.1.1\n        \n            @angular/common : ^13.1.1\n        \n            @angular/compiler : ^13.1.1\n        \n            @angular/core : ^13.1.1\n        \n            @angular/fire : ^7.0.4\n        \n            @angular/forms : ^13.1.1\n        \n            @angular/material : ^13.1.1\n        \n            @angular/platform-browser : ^13.1.1\n        \n            @angular/platform-browser-dynamic : ^13.1.1\n        \n            @angular/router : ^13.1.1\n        \n            @fortawesome/fontawesome-free : ^6.1.1\n        \n            @ngrx/effects : ^13.0.2\n        \n            @ngrx/entity : ^13.0.2\n        \n            @ngrx/store : ^13.0.2\n        \n            @ngrx/store-devtools : ^13.0.2\n        \n            @types/lodash : ^4.14.149\n        \n            @types/webgl2 : ^0.0.6\n        \n            bulma : ^0.8.0\n        \n            canvas2image : ^1.0.5\n        \n            core-js : ^3.6.4\n        \n            firebase : ^9.4.0\n        \n            lodash : ^4.17.15\n        \n            mathjs : >=7.5.1\n        \n            ngx-color-picker : ^11.0.0\n        \n            rxfire : ^6.0.0\n        \n            rxjs : ^6.5.4\n        \n            tar : >=5.0.10\n        \n            tslib : ^2.3.1\n        \n            zone.js : ~0.11.4\n    \n\n\n\n\n\n\n\n                   \n    \n         results matching \"\"\n        \n    \n    \n        No results matching \"\"\n    \n\n"},"miscellaneous/functions.html":{"url":"miscellaneous/functions.html","title":"miscellaneous-functions - functions","body":"\n                   \n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n  Miscellaneous\n  Functions\n\n\n\n    Index\n    \n        \n            \n                \n                    \n                        \n                            buildTreeOp   (src/.../operation.ts)\n                        \n                        \n                            copyState   (src/.../player.ts)\n                        \n                        \n                            copyState   (src/.../state.ts)\n                        \n                        \n                            formatName   (src/.../op_definitions.ts)\n                        \n                        \n                            formatName   (src/.../formatting.ts)\n                        \n                        \n                            getDefaultParams   (src/.../operation.ts)\n                        \n                        \n                            getDraftsFromInputs   (src/.../operation.ts)\n                        \n                        \n                            getInletsFromInputs   (src/.../operation.ts)\n                        \n                        \n                            getParamsFromInputs   (src/.../operation.ts)\n                        \n                        \n                            getParamValues   (src/.../params.ts)\n                        \n                        \n                            initState   (src/.../player.ts)\n                        \n                        \n                            initState   (src/.../state.ts)\n                        \n                        \n                            makeBlankChainOp   (src/.../op_mappings.ts)\n                        \n                        \n                            makeChainOp   (src/.../op_mappings.ts)\n                        \n                        \n                            makeOpSequencer   (src/.../sequencer.ts)\n                        \n                        \n                            makePairedOp   (src/.../op_mappings.ts)\n                        \n                        \n                            makeSystemsUnique   (src/.../system.ts)\n                        \n                        \n                            makeTopoFactory   (src/.../topology.ts)\n                        \n                        \n                            newMapIndex   (src/.../mappings.service.ts)\n                        \n                        \n                            playerOpFrom   (src/.../op_mappings.ts)\n                        \n                        \n                            playerOpFromTree   (src/.../op_mappings.ts)\n                        \n                        \n                            regexValidator   (src/.../parameter.component.ts)\n                        \n                        \n                            transferSystemsAndShuttles   (src/.../formatting.ts)\n                        \n                    \n                \n            \n        \n    \n\n\n    src/app/mixer/model/operation.ts\n    \n        \n        \n            \n                \n                    \n                    \n                        buildTreeOp\n                        \n                    \n                \n            \n            \n                \nbuildTreeOp(base: GenericOp)\n                \n            \n\n\n\n\n            \n                \n\n                    \n                        Parameters :\n                        \n                        \n                            \n                                \n                                    Name\n                                    Type\n                                    Optional\n                                \n                            \n                            \n                                \n                                    base\n                                    \n                                            GenericOp\n                                    \n\n                                    \n                                        No\n                                    \n\n\n                                \n                            \n                        \n                    \n                    \n                    \n                    \n                        Returns :         TreeOperation\n\n                    \n                    \n                        \n                    \n                \n            \n        \n    \n    \n        \n            \n                \n                    \n                    \n                        getDefaultParams\n                        \n                    \n                \n            \n            \n                \ngetDefaultParams(op)\n                \n            \n\n\n\n\n            \n                \n\n                    \n                        Parameters :\n                        \n                        \n                            \n                                \n                                    Name\n                                    Optional\n                                \n                            \n                            \n                                \n                                    op\n\n                                    \n                                        No\n                                    \n\n\n                                \n                            \n                        \n                    \n                    \n                    \n                    \n                        Returns :         Array\n\n                    \n                    \n                        \n                    \n                \n            \n        \n    \n    \n        \n            \n                \n                    \n                    \n                        getDraftsFromInputs\n                        \n                    \n                \n            \n            \n                \ngetDraftsFromInputs(inputs: Array)\n                \n            \n\n\n\n\n            \n                \n\n                    \n                        Parameters :\n                        \n                        \n                            \n                                \n                                    Name\n                                    Type\n                                    Optional\n                                \n                            \n                            \n                                \n                                    inputs\n                                    \n                                            Array\n                                    \n\n                                    \n                                        No\n                                    \n\n\n                                \n                            \n                        \n                    \n                    \n                    \n                    \n                        Returns :         Array\n\n                    \n                    \n                        \n                    \n                \n            \n        \n    \n    \n        \n            \n                \n                    \n                    \n                        getInletsFromInputs\n                        \n                    \n                \n            \n            \n                \ngetInletsFromInputs(inputs: Array, n: number)\n                \n            \n\n\n\n\n            \n                \n\n                    \n                        Parameters :\n                        \n                        \n                            \n                                \n                                    Name\n                                    Type\n                                    Optional\n                                \n                            \n                            \n                                \n                                    inputs\n                                    \n                                            Array\n                                    \n\n                                    \n                                        No\n                                    \n\n\n                                \n                                \n                                    n\n                                    \n                                                number\n                                    \n\n                                    \n                                        No\n                                    \n\n\n                                \n                            \n                        \n                    \n                    \n                    \n                    \n                        Returns :         InletDrafts\n\n                    \n                    \n                        \n                    \n                \n            \n        \n    \n    \n        \n            \n                \n                    \n                    \n                        getParamsFromInputs\n                        \n                    \n                \n            \n            \n                \ngetParamsFromInputs(inputs: Array)\n                \n            \n\n\n\n\n            \n                \n\n                    \n                        Parameters :\n                        \n                        \n                            \n                                \n                                    Name\n                                    Type\n                                    Optional\n                                \n                            \n                            \n                                \n                                    inputs\n                                    \n                                            Array\n                                    \n\n                                    \n                                        No\n                                    \n\n\n                                \n                            \n                        \n                    \n                    \n                    \n                    \n                        Returns :         Array\n\n                    \n                    \n                        \n                    \n                \n            \n        \n    \n    src/app/player/model/player.ts\n    \n        \n        \n            \n                \n                    \n                    \n                        copyState\n                        \n                    \n                \n            \n            \n                \ncopyState(init: PlayerState)\n                \n            \n\n\n\n\n            \n                \n\n                    \n                        Parameters :\n                        \n                        \n                            \n                                \n                                    Name\n                                    Type\n                                    Optional\n                                \n                            \n                            \n                                \n                                    init\n                                    \n                                                PlayerState\n                                    \n\n                                    \n                                        No\n                                    \n\n\n                                \n                            \n                        \n                    \n                    \n                    \n                    \n                        Returns :         PlayerState\n\n                    \n                    \n                        \n                    \n                \n            \n        \n    \n    \n        \n            \n                \n                    \n                    \n                        initState\n                        \n                    \n                \n            \n            \n                \ninitState()\n                \n            \n\n\n\n\n            \n                \n\n                    \n                        Returns :         PlayerState\n\n                    \n                \n            \n        \n    \n    src/app/player/model/state.ts\n    \n        \n        \n            \n                \n                    \n                    \n                        copyState\n                        \n                    \n                \n            \n            \n                \ncopyState(init: PlayerState)\n                \n            \n\n\n\n\n            \n                \n\n                    \n                        Parameters :\n                        \n                        \n                            \n                                \n                                    Name\n                                    Type\n                                    Optional\n                                \n                            \n                            \n                                \n                                    init\n                                    \n                                                PlayerState\n                                    \n\n                                    \n                                        No\n                                    \n\n\n                                \n                            \n                        \n                    \n                    \n                    \n                    \n                        Returns :         PlayerState\n\n                    \n                    \n                        \n                    \n                \n            \n        \n    \n    \n        \n            \n                \n                    \n                    \n                        initState\n                        \n                    \n                \n            \n            \n                \ninitState()\n                \n            \n\n\n\n\n            \n                \n\n                    \n                        Returns :         PlayerState\n\n                    \n                \n            \n        \n    \n    src/app/mixer/model/op_definitions.ts\n    \n        \n        \n            \n                \n                    \n                    \n                        formatName\n                        \n                    \n                \n            \n            \n                \nformatName(drafts: Array, op_name: string)\n                \n            \n\n\n\n\n            \n                \n\n                    \n                        Parameters :\n                        \n                        \n                            \n                                \n                                    Name\n                                    Type\n                                    Optional\n                                \n                            \n                            \n                                \n                                    drafts\n                                    \n                                            Array\n                                    \n\n                                    \n                                        No\n                                    \n\n\n                                \n                                \n                                    op_name\n                                    \n                                                string\n                                    \n\n                                    \n                                        No\n                                    \n\n\n                                \n                            \n                        \n                    \n                    \n                    \n                    \n                        Returns :         string\n\n                    \n                    \n                        \n                    \n                \n            \n        \n    \n    src/app/mixer/model/operation/formatting.ts\n    \n        \n        \n            \n                \n                    \n                    \n                        formatName\n                        \n                    \n                \n            \n            \n                \nformatName(drafts: Array, op_name: string)\n                \n            \n\n\n\n\n            \n                \n\n                    \n                        Parameters :\n                        \n                        \n                            \n                                \n                                    Name\n                                    Type\n                                    Optional\n                                \n                            \n                            \n                                \n                                    drafts\n                                    \n                                            Array\n                                    \n\n                                    \n                                        No\n                                    \n\n\n                                \n                                \n                                    op_name\n                                    \n                                                string\n                                    \n\n                                    \n                                        No\n                                    \n\n\n                                \n                            \n                        \n                    \n                    \n                    \n                    \n                        Returns :         string\n\n                    \n                    \n                        \n                    \n                \n            \n        \n    \n    \n        \n            \n                \n                    \n                    \n                        transferSystemsAndShuttles\n                        \n                    \n                \n            \n            \n                \ntransferSystemsAndShuttles(d: Draft, drafts: Array, params: any, type: string)\n                \n            \n\n\n\n\n            \n                \n                    transfers data about systems and shuttles from input drafts to output drafts.\n\n\n                    \n                        Parameters :\n                        \n                        \n                            \n                                \n                                    Name\n                                    Type\n                                    Optional\n                                    Description\n                                \n                            \n                            \n                                \n                                    d\n                                    \n                                                Draft\n                                    \n\n                                    \n                                        No\n                                    \n\n\n                                    \n                                        the output draft\n\n                                    \n                                \n                                \n                                    drafts\n                                    \n                                            Array\n                                    \n\n                                    \n                                        No\n                                    \n\n\n                                    \n                                    \n                                \n                                \n                                    params\n                                    \n                                                any\n                                    \n\n                                    \n                                        No\n                                    \n\n\n                                    \n                                    \n                                \n                                \n                                    type\n                                    \n                                                string\n                                    \n\n                                    \n                                        No\n                                    \n\n\n                                    \n                                        how to handle the transfer (first - use the first input data, interlace, layer)\n\n                                    \n                                \n                            \n                        \n                    \n                    \n                    \n                \n            \n        \n    \n    src/app/mixer/model/operation/params.ts\n    \n        \n        \n            \n                \n                    \n                    \n                        getParamValues\n                        \n                    \n                \n            \n            \n                \ngetParamValues(input: Array)\n                \n            \n\n\n\n\n            \n                \n                    Utility function to extract values from an array of Params\n\n\n                    \n                        Parameters :\n                        \n                        \n                            \n                                \n                                    Name\n                                    Type\n                                    Optional\n                                    Description\n                                \n                            \n                            \n                                \n                                    input\n                                    \n                                            Array\n                                    \n\n                                    \n                                        No\n                                    \n\n\n                                    \n                                        Array of OperationParams, any type\n\n                                    \n                                \n                            \n                        \n                    \n                    \n                    \n                    \n                        Returns :         Array\n\n                    \n                    \n                        Array of ParamValues\n\n                    \n                \n            \n        \n    \n    src/app/player/model/op_mappings.ts\n    \n        \n        \n            \n                \n                    \n                    \n                        makeBlankChainOp\n                        \n                    \n                \n            \n            \n                \nmakeBlankChainOp(p?: number)\n                \n            \n\n\n\n\n            \n                \n\n                    \n                        Parameters :\n                        \n                        \n                            \n                                \n                                    Name\n                                    Type\n                                    Optional\n                                \n                            \n                            \n                                \n                                    p\n                                    \n                                                number\n                                    \n\n                                    \n                                        Yes\n                                    \n\n\n                                \n                            \n                        \n                    \n                    \n                    \n                    \n                        Returns :         ChainOp\n\n                    \n                    \n                        \n                    \n                \n            \n        \n    \n    \n        \n            \n                \n                    \n                    \n                        makeChainOp\n                        \n                    \n                \n            \n            \n                \nmakeChainOp(ops: Array, p?: number)\n                \n            \n\n\n\n\n            \n                \n\n                    \n                        Parameters :\n                        \n                        \n                            \n                                \n                                    Name\n                                    Type\n                                    Optional\n                                \n                            \n                            \n                                \n                                    ops\n                                    \n                                            Array\n                                    \n\n                                    \n                                        No\n                                    \n\n\n                                \n                                \n                                    p\n                                    \n                                                number\n                                    \n\n                                    \n                                        Yes\n                                    \n\n\n                                \n                            \n                        \n                    \n                    \n                    \n                    \n                        Returns :         ChainOp\n\n                    \n                    \n                        \n                    \n                \n            \n        \n    \n    \n        \n            \n                \n                    \n                    \n                        makePairedOp\n                        \n                    \n                \n            \n            \n                \nmakePairedOp(p: number, op: PlayerOp)\n                \n            \n\n\n\n\n            \n                \n\n                    \n                        Parameters :\n                        \n                        \n                            \n                                \n                                    Name\n                                    Type\n                                    Optional\n                                \n                            \n                            \n                                \n                                    p\n                                    \n                                                number\n                                    \n\n                                    \n                                        No\n                                    \n\n\n                                \n                                \n                                    op\n                                    \n                                                PlayerOp\n                                    \n\n                                    \n                                        No\n                                    \n\n\n                                \n                            \n                        \n                    \n                    \n                    \n                    \n                        Returns :         PairedOp\n\n                    \n                    \n                        \n                    \n                \n            \n        \n    \n    \n        \n            \n                \n                    \n                    \n                        playerOpFrom\n                        \n                    \n                \n            \n            \n                \nplayerOpFrom(op: GenericOp, params?: Array)\n                \n            \n\n\n\n\n            \n                \n\n                    \n                        Parameters :\n                        \n                        \n                            \n                                \n                                    Name\n                                    Type\n                                    Optional\n                                \n                            \n                            \n                                \n                                    op\n                                    \n                                            GenericOp\n                                    \n\n                                    \n                                        No\n                                    \n\n\n                                \n                                \n                                    params\n                                    \n                                            Array\n                                    \n\n                                    \n                                        Yes\n                                    \n\n\n                                \n                            \n                        \n                    \n                    \n                    \n                \n            \n        \n    \n    \n        \n            \n                \n                    \n                    \n                        playerOpFromTree\n                        \n                    \n                \n            \n            \n                \nplayerOpFromTree(op: PlayableTreeOp)\n                \n            \n\n\n\n\n            \n                \n\n                    \n                        Parameters :\n                        \n                        \n                            \n                                \n                                    Name\n                                    Type\n                                    Optional\n                                \n                            \n                            \n                                \n                                    op\n                                    \n                                                PlayableTreeOp\n                                    \n\n                                    \n                                        No\n                                    \n\n\n                                \n                            \n                        \n                    \n                    \n                    \n                \n            \n        \n    \n    src/app/player/model/sequencer.ts\n    \n        \n        \n            \n                \n                    \n                    \n                        makeOpSequencer\n                        \n                    \n                \n            \n            \n                \nmakeOpSequencer(conf: number, sel_fwd: number, sel_back?: number, start_ops?: Array)\n                \n            \n\n\n\n\n            \n                \n\n                    \n                        Parameters :\n                        \n                        \n                            \n                                \n                                    Name\n                                    Type\n                                    Optional\n                                    Default value\n                                \n                            \n                            \n                                \n                                    conf\n                                    \n                                                number\n                                    \n\n                                    \n                                        No\n                                    \n\n                                    \n                                        0\n                                    \n\n                                \n                                \n                                    sel_fwd\n                                    \n                                                number\n                                    \n\n                                    \n                                        No\n                                    \n\n                                    \n                                        1\n                                    \n\n                                \n                                \n                                    sel_back\n                                    \n                                                number\n                                    \n\n                                    \n                                        Yes\n                                    \n\n                                    \n                                    \n\n                                \n                                \n                                    start_ops\n                                    \n                                            Array\n                                    \n\n                                    \n                                        Yes\n                                    \n\n                                    \n                                    \n\n                                \n                            \n                        \n                    \n                    \n                    \n                \n            \n        \n    \n    src/app/core/model/system.ts\n    \n        \n        \n            \n                \n                    \n                    \n                        makeSystemsUnique\n                        \n                    \n                \n            \n            \n                \nmakeSystemsUnique(systems: Array)\n                \n            \n\n\n\n\n            \n                \n                    takes system maps and makes them all unique by adding a base value to the n+1th map. This helps when interlacing \ndrafts that have different system mappings, and making sure they are each unique. \nThis function will also return standard sized arrays = to the maximum sized input\n\n\n                    \n                        Parameters :\n                        \n                        \n                            \n                                \n                                    Name\n                                    Type\n                                    Optional\n                                    Description\n                                \n                            \n                            \n                                \n                                    systems\n                                    \n                                            Array\n                                    \n\n                                    \n                                        No\n                                    \n\n\n                                    \n                                        the system mappings to compare\n\n                                    \n                                \n                            \n                        \n                    \n                    \n                    \n                    \n                        Returns :     Array>\n\n                    \n                    \n                        \n                    \n                \n            \n        \n    \n    src/app/mixer/model/operation/topology.ts\n    \n        \n        \n            \n                \n                    \n                    \n                        makeTopoFactory\n                        \n                    \n                \n            \n            \n                \nmakeTopoFactory(topo: TopologyName)\n                \n            \n\n\n\n\n            \n                \n\n                    \n                        Parameters :\n                        \n                        \n                            \n                                \n                                    Name\n                                    Type\n                                    Optional\n                                \n                            \n                            \n                                \n                                    topo\n                                    \n                                                TopologyName\n                                    \n\n                                    \n                                        No\n                                    \n\n\n                                \n                            \n                        \n                    \n                    \n                    \n                \n            \n        \n    \n    src/app/player/provider/mappings.service.ts\n    \n        \n        \n            \n                \n                    \n                    \n                        newMapIndex\n                        \n                    \n                \n            \n            \n                \nnewMapIndex()\n                \n            \n\n\n\n\n            \n                \n\n                    \n                        Returns :         MappingIndex\n\n                    \n                \n            \n        \n    \n    src/app/mixer/palette/operation/parameter/parameter.component.ts\n    \n        \n        \n            \n                \n                    \n                    \n                        regexValidator\n                        \n                    \n                \n            \n            \n                \nregexValidator(nameRe: RegExp)\n                \n            \n\n\n\n\n            \n                \n\n                    \n                        Parameters :\n                        \n                        \n                            \n                                \n                                    Name\n                                    Type\n                                    Optional\n                                \n                            \n                            \n                                \n                                    nameRe\n                                    \n                                            RegExp\n                                    \n\n                                    \n                                        No\n                                    \n\n\n                                \n                            \n                        \n                    \n                    \n                    \n                    \n                        Returns :         ValidatorFn\n\n                    \n                    \n                        \n                    \n                \n            \n        \n    \n\n\n\n                   \n    \n         results matching \"\"\n        \n    \n    \n        No results matching \"\"\n    \n\n"},"index.html":{"url":"index.html","title":"getting-started - index","body":"\n                   \n\nAdaCAD\nAdaCAD is a parametric design tools for making woven drafts. It supports a designer in creating drafts by connecting different operations into a model or pipeline that results in drafts. It currently supports outputs and representations for Jacuqard, Floor, and Direct-Tieup Loom. \nYou can use the last release of the tool at https://adacad.org/.\nFor more information about the project and user guides, visit https://adacad.unstable.design/\nAdaCAD does not require any installing or downloading anything on your device, just open the app in your browser (same link as above). \nWe invite anyone interested to hack on AdaCAD, should you wish to dive into the code. If that describes you, read on!\nDevelopment Notes\nThere are three core modules in this repo: \n\nCore: contains components, services, directives, etc. that are used by both weaver (individual draft view) and mixer (generative workspace) modules. Changes to core will affect both deployments and should be checked before pushing.\n\nWeaver: contains all components, services, directives, etc. that are used in \"Fine Tune\" mode for a given draft. This view supports designing on a simulated loom and viewing yarn paths.\n\nMixer: contains all components, services, directives, etc. that are used to design and control the AdaCAD Mixer. This view supports more freeform and parametric experimentation on stitch structures.\n\n\nDeveloper Documentation\nYou can use view automatically generated documentation of our project at http://adacad.unstable.design/AdaCAD/.\nDevelopment Setup\nAdaCAD is built with Angular, a web development framework for progressive web apps. This project was generated with Angular CLI version 7.3.8.\nPrerequisites\n\nNode.JS and Node Package Manager (npm)\nIntermediate JavasScript/TypeScript – if you know JavaScript but not TypeScript, it should be fairly easy to pick up TypeScript basics.\nBasic HTML/CSS – enough to understand how these file types are structured and interact with scripts\n\nInstallation for developers\n\nClone this repository onto your local hard drive.\nOpen your terminal on the local root directory and run npm install to download the requirements. This can take a while.\nOnce installed, run ng serve in the terminal and wait for Angular to compile the app. It should tell you once it's ready. \nNavigate to http://localhost:4200/ and you should see AdaCAD!\n\nCode organization\nThe information here references Angular documentation, such as this page on Angular concepts and architectural patterns.\n\nAn Angular app like AdaCAD is organized into modules (bundles of functionality), each of which has their directory in src/app/. The modules are currently core, mixer, and weaver as described previously.\nEach module provides a \"view\" into the user's design process. The building blocks of these views are Angular components that display some of the data that the user manipulates when designing. Each component has its own subfolder within the module.\nComponents don't handle the actual data manipulation, such as editing drafts or logging the user's history of design operations. For that, we have Angular services, which components use as dependencies. Each module has a provider subdirectory (e.g. src/app/core/provider) that holds the relevant services.\nMany of the files in the repository are automatically generated by the Angular CLI to make each component or service function properly. See the Code scaffolding section for some useful commands when making a new entity.\n\nImportant Files, Vocabulary, and File Locations\nAdaCAD is a large (and growing) application and chances are that you will only need to touch a few files when implementing or augmenting it to your own needs. We are slowly migrating the code from impertive/object-oriented styles to functional/reactive styles, so there is a mixture of styles in this base.  Here, we will list the files in which you can find core information or action points for the program: \n\nCore Data Types:\nYou can find a description of all of the core datatypes used in AdaCAD at /core/model/datatypes.ts.\n\nCell -  This is a single cell or square within the draft. It has two boolean values, one describing the position of the heddle as up/raised or down/lowered, and the second relating to whether or not a weft travels over the warp at this location, which is required for inlay weaving and certain elements of simulation. This value can be set/true or unset/false. \n\nDrawdown - A drawdown is the actual pattern of cells and values that make up the weaving draft. For the purposes of computation the cell at [0][0] always corresponds to the top left corner of the draft in memory.\n\nDraft - A draft stores the drawdown as well as arrays mapping each warp/weft in the draft to a unique material_id, and system_id. Each draft has a unique id, which allows us to crosslink draft inforamation between the model (data) and view components.  \n\nLoom - A Loom is simply a collection of arrays representing the threading, tieup and threadling.\n\nLoomUtil - A loom utility describes a particular kind of loom (jacquard, direct tieup, etc.) and contains all the functions neccessary for producing a threading, tieup and treadling from a drawdown and vice versa. \n\nTree - The tree is a data representation of the relaitonships between operations and drafts within the mixer. It is the \"brain\" of AdaCAD and stores all information relating to screen position of the design components, their current parameter vaues, and their parent/child relationships to other on screen design elements. \n\nOperation - An operation holds all data required to compute specific chagnes to an input draft. The operation object holds information about the kind of data it can receive and how it manipulates that data. All operations available in AdaCAD are described in: (stored in /mixer/provider/operation.service.ts). Adding a new operation at this location adds it to the entire app, without requiring the user to make any custom UI elements for the operation.\n\n\nUI Types:\nThe mixer describes the parametric design view of the AdaCAD interface. This view consists of the following: \n\nPalette - this is the visual space of all the design elements in the mixer\n\nSubdraft - this is the view that holds the visual represeention and provided options on any draft on view in AdaCAD\n\nOperation - this is the view that holds the visual representation of each operation. The operation consists of subtypes: Inlet, which governs the type of input this operation can receive, Parameter, which describe how to represent and validate parameter inputs on screen. The data used to generate inlets and parameters is described by the operation (stored in /mixer/provider/operation.service.ts)\n\nConnection - this is the visual represenation of the connection between drafts and operations. \n\nWeaver - the weaver is separate module from the mixer which stores all the UI features that the user sees and uses when they expand or \"Fine Tune\" a draft.\n\n\nAngular CLI Tips\nCode scaffolding\nThe Angular CLI provides built-in commands to generate the utility files for components, services, and other such things categorized as \"schematics\". These files will be generated in the current directory of the terminal, so navigate to the appropriate subdirectory first.\n\nNew component: \nMake a subfolder in the appropriate module named \nIn this subfolder, run ng generate component \n\n\nNew service:\nIn the appropriate module's provider subfolder, run ng generate service \n\n\nFor other options, refer to the Angular CLI documentation.\n\nDevelopment server\nRun ng serve for a dev server. Navigate to http://localhost:4200/. The app will automatically reload if you save changes in any of the source files.\nBuild\nRun ng build to build the project. The build artifacts will be stored in the dist/ directory. Use the -prod flag for a production build.\nFurther help\nTo get more help on the Angular CLI, use ng help or go to the Angular CLI README.\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n                   \n    \n         results matching \"\"\n        \n    \n    \n        No results matching \"\"\n    \n\n"},"modules.html":{"url":"modules.html","title":"modules - modules","body":"\n                   \n\n\n\n\n    Modules\n\n\n    \n            \n                \n                    \n                        MixerModule\n                    \n                    \n                                \n                                    \n                                        Your browser does not support SVG\n                                    \n                                \n                        \n                            Browse\n                        \n                    \n                \n            \n            \n                \n                    \n                        PlayerModule\n                    \n                    \n                                \n                                    \n                                        Your browser does not support SVG\n                                    \n                                \n                        \n                            Browse\n                        \n                    \n                \n            \n    \n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n                   \n    \n         results matching \"\"\n        \n    \n    \n        No results matching \"\"\n    \n\n"},"overview.html":{"url":"overview.html","title":"overview - overview","body":"\n                   \n\n\n\n    Overview\n\n  \n\n    \n        \n\n\n\n\n\ndependencies\n\ndependencies\n\ncluster_MixerModule\n\n\n\ncluster_MixerModule_declarations\n\n\n\ncluster_MixerModule_imports\n\n\n\ncluster_PlayerModule\n\n\n\ncluster_PlayerModule_declarations\n\n\n\ncluster_PlayerModule_exports\n\n\n\n\nConnectionComponent\n\nConnectionComponent\n\n\n\nMixerModule\n\nMixerModule\n\nMixerModule -->\n\nConnectionComponent->MixerModule\n\n\n\n\n\nDraftdetailComponent\n\nDraftdetailComponent\n\nMixerModule -->\n\nDraftdetailComponent->MixerModule\n\n\n\n\n\nImageComponent\n\nImageComponent\n\nMixerModule -->\n\nImageComponent->MixerModule\n\n\n\n\n\nInletComponent\n\nInletComponent\n\nMixerModule -->\n\nInletComponent->MixerModule\n\n\n\n\n\nMarqueeComponent\n\nMarqueeComponent\n\nMixerModule -->\n\nMarqueeComponent->MixerModule\n\n\n\n\n\nMixerComponent\n\nMixerComponent\n\nMixerModule -->\n\nMixerComponent->MixerModule\n\n\n\n\n\nMixerViewComponent\n\nMixerViewComponent\n\nMixerModule -->\n\nMixerViewComponent->MixerModule\n\n\n\n\n\nNoteComponent\n\nNoteComponent\n\nMixerModule -->\n\nNoteComponent->MixerModule\n\n\n\n\n\nOpHelpModal\n\nOpHelpModal\n\nMixerModule -->\n\nOpHelpModal->MixerModule\n\n\n\n\n\nOperationComponent\n\nOperationComponent\n\nMixerModule -->\n\nOperationComponent->MixerModule\n\n\n\n\n\nOpsComponent\n\nOpsComponent\n\nMixerModule -->\n\nOpsComponent->MixerModule\n\n\n\n\n\nPaletteComponent\n\nPaletteComponent\n\nMixerModule -->\n\nPaletteComponent->MixerModule\n\n\n\n\n\nParameterComponent\n\nParameterComponent\n\nMixerModule -->\n\nParameterComponent->MixerModule\n\n\n\n\n\nSnackbarComponent\n\nSnackbarComponent\n\nMixerModule -->\n\nSnackbarComponent->MixerModule\n\n\n\n\n\nSubdraftComponent\n\nSubdraftComponent\n\nMixerModule -->\n\nSubdraftComponent->MixerModule\n\n\n\n\n\nPlayerModule\n\nPlayerModule\n\nMixerModule -->\n\nPlayerModule->MixerModule\n\n\n\n\n\nPlayerComponent \n\nPlayerComponent \n\nPlayerComponent  -->\n\nPlayerModule->PlayerComponent \n\n\n\n\n\nOpSequencerComponent\n\nOpSequencerComponent\n\nPlayerModule -->\n\nOpSequencerComponent->PlayerModule\n\n\n\n\n\nPlayerComponent\n\nPlayerComponent\n\nPlayerModule -->\n\nPlayerComponent->PlayerModule\n\n\n\n\n\nVirtualPedalsComponent\n\nVirtualPedalsComponent\n\nPlayerModule -->\n\nVirtualPedalsComponent->PlayerModule\n\n\n\n\n\nWeavingStateComponent\n\nWeavingStateComponent\n\nPlayerModule -->\n\nWeavingStateComponent->PlayerModule\n\n\n\n\n\n\n    \n    \n    \n        Zoom in\n        Reset\n        Zoom out\n    \n\n  \n\n    \n        \n            \n                \n                    \n                    \n                        2 Modules\n                    \n                \n            \n        \n        \n            \n                \n                    \n                    18 Components\n                \n            \n        \n        \n            \n                \n                    \n                    2 Directives\n                \n            \n        \n        \n            \n                \n                    \n                    9 Injectables\n                \n            \n        \n        \n            \n                \n                    \n                    30 Classes\n                \n            \n        \n        \n            \n                \n                    \n                    51 Interfaces\n                \n            \n        \n    \n\n\n \n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n                   \n    \n         results matching \"\"\n        \n    \n    \n        No results matching \"\"\n    \n\n"},"properties.html":{"url":"properties.html","title":"package-properties - properties","body":"\n                   \n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n    \n        Properties\n    \n    \n        \n            Version : 2.2.0\n        \n            License : GPL-3.0-or-later\n    \n\n\n\n\n\n                   \n    \n         results matching \"\"\n        \n    \n    \n        No results matching \"\"\n    \n\n"},"miscellaneous/typealiases.html":{"url":"miscellaneous/typealiases.html","title":"miscellaneous-typealiases - typealiases","body":"\n                   \n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n  Miscellaneous\n  Type aliases\n\n\n\n    Index\n    \n        \n            \n                \n                    \n                        \n                            AllRequired   (src/.../topology.ts)\n                        \n                        \n                            AllRequiredPerform   (src/.../topology.ts)\n                        \n                        \n                            BaseNode   (src/.../tree.ts)\n                        \n                        \n                            BoolParam   (src/.../params.ts)\n                        \n                        \n                            BuildableOperation   (src/.../topology.ts)\n                        \n                        \n                            ConstraintDefs   (src/.../topology.ts)\n                        \n                        \n                            ConstraintIndex   (src/.../topology.ts)\n                        \n                        \n                            ConstraintName   (src/.../topology.ts)\n                        \n                        \n                            ConstraintOptions   (src/.../topology.ts)\n                        \n                        \n                            ConstructorArgKeysIndex   (src/.../topology.ts)\n                        \n                        \n                            ConstructorArrayIndex   (src/.../topology.ts)\n                        \n                        \n                            crossType   (src/.../yarnsim.ts)\n                        \n                        \n                            DraftNode   (src/.../tree.ts)\n                        \n                        \n                            DraftParam   (src/.../params.ts)\n                        \n                        \n                            DraftsOptional   (src/.../topology.ts)\n                        \n                        \n                            DraftsOptionalPerform   (src/.../topology.ts)\n                        \n                        \n                            Drawdown   (src/.../drafts.ts)\n                        \n                        \n                            FileParam   (src/.../params.ts)\n                        \n                        \n                            GenericParam   (src/.../params.ts)\n                        \n                        \n                            InletDrafts   (src/.../inlets.ts)\n                        \n                        \n                            Keyed   (src/.../dbnodes.ts)\n                        \n                        \n                            Loom   (src/.../looms.ts)\n                        \n                        \n                            LoomSettings   (src/.../looms.ts)\n                        \n                        \n                            LoomUtil   (src/.../looms.ts)\n                        \n                        \n                            MappingIndex   (src/.../mappings.service.ts)\n                        \n                        \n                            MappingShapes   (src/.../op_mappings.ts)\n                        \n                        \n                            MappingType   (src/.../op_mappings.ts)\n                        \n                        \n                            MultiDraftInput   (src/.../topology.ts)\n                        \n                        \n                            Node   (src/.../tree.ts)\n                        \n                        \n                            NodeValue   (src/.../dbnodes.ts)\n                        \n                        \n                            NoDrafts   (src/.../topology.ts)\n                        \n                        \n                            NoDraftsPerform   (src/.../topology.ts)\n                        \n                        \n                            NoParams   (src/.../topology.ts)\n                        \n                        \n                            NoParamsPerform   (src/.../topology.ts)\n                        \n                        \n                            NumInlet   (src/.../inlets.ts)\n                        \n                        \n                            NumParam   (src/.../params.ts)\n                        \n                        \n                            OpConstraint   (src/.../topology.ts)\n                        \n                        \n                            OpConstructorArgKeys   (src/.../topology.ts)\n                        \n                        \n                            OpConstructorArgs   (src/.../topology.ts)\n                        \n                        \n                            OpConstructorArray   (src/.../topology.ts)\n                        \n                        \n                            Operation   (src/.../operation.ts)\n                        \n                        \n                            Operation   (src/.../operation.service.ts)\n                        \n                        \n                            OperationDescriptors   (src/.../topology.ts)\n                        \n                        \n                            OperationInlet   (src/.../inlets.ts)\n                        \n                        \n                            OpNode   (src/.../tree.ts)\n                        \n                        \n                            OpPerform   (src/.../topology.ts)\n                        \n                        \n                            OpTopology   (src/.../topology.ts)\n                        \n                        \n                            ParamsOptional   (src/.../topology.ts)\n                        \n                        \n                            ParamsOptionalPerform   (src/.../topology.ts)\n                        \n                        \n                            ParamType   (src/.../params.ts)\n                        \n                        \n                            ParamValue   (src/.../params.ts)\n                        \n                        \n                            PedalAction   (src/.../op_mappings.ts)\n                        \n                        \n                            PedalOpMap   (src/.../mappings.service.ts)\n                        \n                        \n                            PedalOpMapping   (src/.../op_mappings.ts)\n                        \n                        \n                            PerformCallSigs   (src/.../topology.ts)\n                        \n                        \n                            PerformDraftInput   (src/.../topology.ts)\n                        \n                        \n                            PerformOutput   (src/.../topology.ts)\n                        \n                        \n                            PlayableTreeOp   (src/.../op_mappings.ts)\n                        \n                        \n                            SelectParam   (src/.../params.ts)\n                        \n                        \n                            SingleInlet   (src/.../inlets.ts)\n                        \n                        \n                            SingleOp   (src/.../op_mappings.ts)\n                        \n                        \n                            StringParam   (src/.../params.ts)\n                        \n                        \n                            TopologyIndex   (src/.../topology.ts)\n                        \n                        \n                            TopologyName   (src/.../topology.ts)\n                        \n                        \n                            TopologyOpIndex   (src/.../topology.ts)\n                        \n                        \n                            YarnCell   (src/.../yarnpaths.ts)\n                        \n                        \n                            YarnMap   (src/.../yarnpaths.ts)\n                        \n                        \n                            YarnSim   (src/.../yarnpaths.ts)\n                        \n                    \n                \n            \n        \n    \n\n\n    src/app/mixer/model/operation/topology.ts\n    \n    \n        \n            \n                \n                    \n                    AllRequired\n                \n            \n            \n                \n                        \n\n                \n            \n        \n    \n    \n        \n            \n                \n                    \n                    AllRequiredPerform\n                \n            \n            \n                \n                        literal type\n\n                \n            \n        \n    \n    \n        \n            \n                \n                    \n                    BuildableOperation\n                \n            \n            \n                \n                        \n\n                \n            \n        \n    \n    \n        \n            \n                \n                    \n                    ConstraintDefs\n                \n            \n            \n                \n                        \n\n                \n            \n        \n    \n    \n        \n            \n                \n                    \n                    ConstraintIndex\n                \n            \n            \n                \n                        literal type\n\n                \n            \n        \n    \n    \n        \n            \n                \n                    \n                    ConstraintName\n                \n            \n            \n                \n                        \n\n                \n            \n        \n    \n    \n        \n            \n                \n                    \n                    ConstraintOptions\n                \n            \n            \n                \n                        \n\n                \n            \n        \n    \n    \n        \n            \n                \n                    \n                    ConstructorArgKeysIndex\n                \n            \n            \n                \n                        \n\n                \n            \n        \n    \n    \n        \n            \n                \n                    \n                    ConstructorArrayIndex\n                \n            \n            \n                \n                        \n\n                \n            \n        \n    \n    \n        \n            \n                \n                    \n                    DraftsOptional\n                \n            \n            \n                \n                        \n\n                \n            \n        \n    \n    \n        \n            \n                \n                    \n                    DraftsOptionalPerform\n                \n            \n            \n                \n                        literal type\n\n                \n            \n        \n    \n    \n        \n            \n                \n                    \n                    MultiDraftInput\n                \n            \n            \n                \n                            InletDrafts | Array\n\n                \n            \n        \n    \n    \n        \n            \n                \n                    \n                    NoDrafts\n                \n            \n            \n                \n                        \n\n                \n            \n        \n    \n    \n        \n            \n                \n                    \n                    NoDraftsPerform\n                \n            \n            \n                \n                    Generic types for perform() functions, describing options \nfor input draft multiplicity (0, 1, N) and param requirement\n\n                \n            \n            \n                \n                        literal type\n\n                \n            \n        \n    \n    \n        \n            \n                \n                    \n                    NoParams\n                \n            \n            \n                \n                        \n\n                \n            \n        \n    \n    \n        \n            \n                \n                    \n                    NoParamsPerform\n                \n            \n            \n                \n                        literal type\n\n                \n            \n        \n    \n    \n        \n            \n                \n                    \n                    OpConstraint\n                \n            \n            \n                \n                        \n\n                \n            \n        \n    \n    \n        \n            \n                \n                    \n                    OpConstructorArgKeys\n                \n            \n            \n                \n                        \n\n                \n            \n        \n    \n    \n        \n            \n                \n                    \n                    OpConstructorArgs\n                \n            \n            \n                \n                        OpConstructorArgKeys | OpConstructorArray\n\n                \n            \n        \n    \n    \n        \n            \n                \n                    \n                    OpConstructorArray\n                \n            \n            \n                \n                        \n\n                \n            \n        \n    \n    \n        \n            \n                \n                    \n                    OperationDescriptors\n                \n            \n            \n                \n                        literal type\n\n                \n            \n        \n    \n    \n        \n            \n                \n                    \n                    OpPerform\n                \n            \n            \n                \n                        \n\n                \n            \n        \n    \n    \n        \n            \n                \n                    \n                    OpTopology\n                \n            \n            \n                \n                        \n\n                \n            \n        \n    \n    \n        \n            \n                \n                    \n                    ParamsOptional\n                \n            \n            \n                \n                        \n\n                \n            \n        \n    \n    \n        \n            \n                \n                    \n                    ParamsOptionalPerform\n                \n            \n            \n                \n                        literal type\n\n                \n            \n        \n    \n    \n        \n            \n                \n                    \n                    PerformCallSigs\n                \n            \n            \n                \n                        literal type\n\n                \n            \n        \n    \n    \n        \n            \n                \n                    \n                    PerformDraftInput\n                \n            \n            \n                \n                    At its heart, an Operation is a very fancy function that outputs a Draft or several Drafts.\nThe function itself is perform(), and the Operation can take inputs in the form of \nDrafts (inlets) or Parameters (params).\n\n                \n            \n            \n                \n                            InletDrafts | Array | Draft | null\n\n                \n            \n        \n    \n    \n        \n            \n                \n                    \n                    PerformOutput\n                \n            \n            \n                \n                            Array | Draft\n\n                \n            \n        \n    \n    \n        \n            \n                \n                    \n                    TopologyIndex\n                \n            \n            \n                \n                        literal type\n\n                \n            \n        \n    \n    \n        \n            \n                \n                    \n                    TopologyName\n                \n            \n            \n                \n                        \n\n                \n            \n        \n    \n    \n        \n            \n                \n                    \n                    TopologyOpIndex\n                \n            \n            \n                \n                        \n\n                \n            \n        \n    \n    src/app/core/model/datatypes/tree.ts\n    \n    \n        \n            \n                \n                    \n                    BaseNode\n                \n            \n            \n                \n                    **************** OBJECTS/TYPES RELATED to OPERATION TREE ****************\n\n                \n            \n            \n                \n                        literal type\n\n                \n            \n        \n    \n    \n        \n            \n                \n                    \n                    DraftNode\n                \n            \n            \n                \n                    a DraftNode is an extension of BaseNode that includes additional params\n\n                \n            \n            \n                \n                        \n\n                \n            \n        \n    \n    \n        \n            \n                \n                    \n                    Node\n                \n            \n            \n                \n                    Allows one to use Node as shorthand for any of these types of nodes\n\n                \n            \n            \n                \n                            BaseNode | OpNode | DraftNode\n\n                \n            \n        \n    \n    \n        \n            \n                \n                    \n                    OpNode\n                \n            \n            \n                \n                    an OpNode is an extension of BaseNode that includes additional params\n\n                \n            \n            \n                \n                        \n\n                \n            \n        \n    \n    src/app/mixer/model/operation/params.ts\n    \n    \n        \n            \n                \n                    \n                    BoolParam\n                \n            \n            \n                \n                    An extension of Param that handles extra requirements for select boolean inputs\n\n                \n            \n            \n                \n                        \n\n                \n            \n        \n    \n    \n        \n            \n                \n                    \n                    DraftParam\n                \n            \n            \n                \n                    UNUSED -- if you want another draft input on an operation, add another inlet\nAn extension of Param that handles extra requirements for select drafts as inputs\n\n                \n            \n            \n                \n                        \n\n                \n            \n        \n    \n    \n        \n            \n                \n                    \n                    FileParam\n                \n            \n            \n                \n                    An extension of Param that handles extra requirements for select file inputs\nCurrently a placeholder should extra data be required.\n\n                \n            \n            \n                \n                        \n\n                \n            \n        \n    \n    \n        \n            \n                \n                    \n                    GenericParam\n                \n            \n            \n                \n                        \n\n                \n            \n        \n    \n    \n        \n            \n                \n                    \n                    NumParam\n                \n            \n            \n                \n                    An extension of Param that handles extra requirements for numeric data inputs\n\n                \n            \n            \n                \n                        \n\n                \n            \n        \n    \n    \n        \n            \n                \n                    \n                    ParamType\n                \n            \n            \n                \n                        \n\n                \n            \n        \n    \n    \n        \n            \n                \n                    \n                    ParamValue\n                \n            \n            \n                \n                        \n\n                \n            \n        \n    \n    \n        \n            \n                \n                    \n                    SelectParam\n                \n            \n            \n                \n                    An extension of Param that handles extra requirements for select list  inputs\n\n                \n            \n            \n                \n                        \n\n                \n            \n        \n    \n    \n        \n            \n                \n                    \n                    StringParam\n                \n            \n            \n                \n                    An extension of Param that handles extra requirements for strings as inputs\n\n                \n            \n            \n                \n                        \n\n                \n            \n        \n    \n    src/app/core/model/datatypes/yarnsim.ts\n    \n    \n        \n            \n                \n                    \n                    crossType\n                \n            \n            \n                \n                    describes the relationship between weft rows along the same warp\n\n                \n            \n            \n                \n                        literal type | literal type | literal type | literal type | literal type | literal type | literal type | literal type\n\n                \n            \n        \n    \n    src/app/core/model/datatypes/drafts.ts\n    \n    \n        \n            \n                \n                    \n                    Drawdown\n                \n            \n            \n                \n                    ***   OBJECTS/TYPES RELATED TO DRAFTS  ******\n\n                \n            \n            \n                \n                            Array>\n\n                \n            \n        \n    \n    src/app/mixer/model/operation/inlets.ts\n    \n    \n        \n            \n                \n                    \n                    InletDrafts\n                \n            \n            \n                \n                        literal type\n\n                \n            \n        \n    \n    \n        \n            \n                \n                    \n                    NumInlet\n                \n            \n            \n                \n                    An extension of Inlet that handles extra requirements for numeric data inputs\n\n                \n            \n            \n                \n                        \n\n                \n            \n        \n    \n    \n        \n            \n                \n                    \n                    OperationInlet\n                \n            \n            \n                \n                    each operation has 0 or more inlets. These are areas where drafts can be entered as inputs to the operation\n\n                \n            \n            \n                \n                        literal type\n\n                \n            \n        \n    \n    \n        \n            \n                \n                    \n                    SingleInlet\n                \n            \n            \n                \n                        \n\n                \n            \n        \n    \n    src/app/player/model/dbnodes.ts\n    \n    \n        \n            \n                \n                    \n                    Keyed\n                \n            \n            \n                \n                        \n\n                \n            \n        \n    \n    \n        \n            \n                \n                    \n                    NodeValue\n                \n            \n            \n                \n                        string | boolean | number | literal type\n\n                \n            \n        \n    \n    src/app/core/model/datatypes/looms.ts\n    \n    \n        \n            \n                \n                    \n                    Loom\n                \n            \n            \n                \n                    a loom is just a threading, tieup, and treadling\n\n                \n            \n            \n                \n                        literal type\n\n                \n            \n        \n    \n    \n        \n            \n                \n                    \n                    LoomSettings\n                \n            \n            \n                \n                    this keeps any user defined preferences associated with a given loom\n\n                \n            \n            \n                \n                        literal type\n\n                \n            \n        \n    \n    \n        \n            \n                \n                    \n                    LoomUtil\n                \n            \n            \n                \n                    \nStore each loom type as a different unit that computes functions based on its particular settings\n\n\n                \n            \n            \n                \n                        literal type\n\n                \n            \n        \n    \n    src/app/player/provider/mappings.service.ts\n    \n    \n        \n            \n                \n                    \n                    MappingIndex\n                \n            \n            \n                \n                        \n\n                \n            \n        \n    \n    \n        \n            \n                \n                    \n                    PedalOpMap\n                \n            \n            \n                \n                        literal type\n\n                \n            \n        \n    \n    src/app/player/model/op_mappings.ts\n    \n    \n        \n            \n                \n                    \n                    MappingShapes\n                \n            \n            \n                \n                        literal type\n\n                \n            \n        \n    \n    \n        \n            \n                \n                    \n                    MappingType\n                \n            \n            \n                \n                        \"pairing\" | \"chain\" | \"sequencer\"\n\n                \n            \n        \n    \n    \n        \n            \n                \n                    \n                    PedalAction\n                \n            \n            \n                \n                        \n\n                \n            \n        \n    \n    \n        \n            \n                \n                    \n                    PedalOpMapping\n                \n            \n            \n                \n                            Array\n\n                \n            \n        \n    \n    \n        \n            \n                \n                    \n                    PlayableTreeOp\n                \n            \n            \n                \n                        \n\n                \n            \n        \n    \n    \n        \n            \n                \n                    \n                    SingleOp\n                \n            \n            \n                \n                            PlayerOp\n\n                \n            \n        \n    \n    src/app/mixer/model/operation.ts\n    \n    \n        \n            \n                \n                    \n                    Operation\n                \n            \n            \n                \n                            TreeOperation\n\n                \n            \n        \n    \n    src/app/mixer/provider/operation.service.ts\n    \n    \n        \n            \n                \n                    \n                    Operation\n                \n            \n            \n                \n                        TreeOperation | DynamicOperation\n\n                \n            \n        \n    \n    src/app/core/model/datatypes/yarnpaths.ts\n    \n    \n        \n            \n                \n                    \n                    YarnCell\n                \n            \n            \n                \n                    a yarn cell holds a binary value representing the direction of the weft yarn through the cell. \nthe binary is organized as NESW and has a 0 if no yarn is at that point, or 1 if there is a yarn at that point\nfor example. 0101 is a weft yarn that travels through the cell, 1100 is a weft yarn that comes in the east (right) size and curves, existing the bottom edge of teh cell\n\n                \n            \n            \n                \n                            number\n\n                \n            \n        \n    \n    \n        \n            \n                \n                    \n                    YarnMap\n                \n            \n            \n                \n                    **** OBJECTS/TYPES FOR SIMULATING YARN PATHS ****\n\n                \n            \n            \n                \n                            Array>\n\n                \n            \n        \n    \n    \n        \n            \n                \n                    \n                    YarnSim\n                \n            \n            \n                \n                    Stores all the simulation information as a 2D array mapped onto the draft\n\n                \n            \n            \n                \n                            Array>\n\n                \n            \n        \n    \n\n\n\n                   \n    \n         results matching \"\"\n        \n    \n    \n        No results matching \"\"\n    \n\n"}}
}
