var COMPODOC_SEARCH_INDEX = {
    "index": {"version":"2.3.9","fields":["title","body"],"fieldVectors":[["title/classes/AbstractOpFactory.html",[0,0.174,1,2.3]],["body/classes/AbstractOpFactory.html",[0,0.319,1,3.115,2,0.856,3,0.045,4,0.039,5,0.033,6,1.411,7,0.039,8,0.806,9,2.695,10,2.695,11,3.418,12,3.418,13,3.418,14,2.879,15,4.496,16,0.895,17,2.78,18,0.859,19,0.01,20,0.436,21,0.148,22,1.129,23,3.477,24,1.456,25,3.217,26,3.703,27,4.515,28,2.78,29,2.78,30,3.24,31,2.78,32,2.78,33,3.503,34,2.78,35,3.24,36,2.78,37,2.78,38,3.503,39,2.78,40,3.24,41,2.78,42,2.78,43,3.503,44,2.78,45,3.24,46,2.78,47,2.78,48,3.503,49,2.78,50,0.263,51,0.836,52,0.605,53,1.06,54,1.193,55,3.503,56,1.465,57,1.433,58,1.231,59,3.503,60,2.831,61,2.026,62,1.465,63,1.441,64,1.465,65,1.465,66,1.697,67,1.167,68,1.465,69,1.759,70,1.361,71,2.929,72,2.538,73,1.733,74,0.878,75,2.249,76,2.879,77,1.523,78,1.523,79,2.355,80,1.465,81,1.76,82,0.986,83,0.141,84,2.264,85,0.497,86,1.139,87,1.465,88,2.835,89,2.768,90,2.879,91,1.003,92,1.231,93,1.523,94,0.204,95,2.355,96,0.856,97,1.338,98,3.429,99,2.626,100,2.026,101,3.33,102,3.33,103,3.33,104,4.427,105,3.703,106,0.15,107,3.56,108,1.231,109,2.542,110,4.427,111,2.033,112,2.367,113,3.503,114,1.583,115,2.021,116,2.705,117,2.538,118,1.573,119,1.003,120,1.361,121,2.264,122,1.465,123,1.523,124,4.209,125,1.465,126,1.523,127,3.703,128,1.231,129,1.315,130,1.55,131,2.768,132,3.443,133,3.24,134,2.461,135,3.368,136,3.703,137,3.989,138,3.443,139,3.503,140,2.879,141,2.879,142,2.879,143,1.465,144,4.182,145,2.355,146,2.355,147,1.523,148,1.523,149,1.523,150,1.523,151,1.523,152,3.115,153,2.264,154,0.736,155,1.089,156,1.123,157,1.465,158,1.523,159,2.104,160,1.315,161,1.315,162,1.465,163,0.468,164,0.331,165,0.565,166,1.465,167,2.264,168,3.503,169,2.264,170,3.24,171,2.264,172,2.264,173,2.264,174,1.465,175,3.712,176,2.768,177,0.901,178,0.403,179,1.523,180,1.523,181,1.523,182,1.523,183,0.814,184,1.523,185,1.361,186,2.264,187,0.516,188,3.779,189,2.59,190,1.193,191,0.925,192,1.523,193,1.193,194,1.315,195,1.315,196,0.925,197,1.091,198,1.315,199,1.315,200,1.06,201,0.925,202,0.302,203,2.485,204,1.315,205,1.523,206,1.272,207,0.774,208,2.264,209,1.747,210,2.355,211,1.523,212,1.465,213,0.834,214,1.523,215,1.315,216,1.123,217,1.523,218,1.523,219,1.523,220,0.925,221,1.523,222,0.834,223,1.465,224,1.523,225,3.333,226,1.523,227,1.172,228,1.966,229,1.639,230,0.736,231,1.361,232,1.465,233,2.264,234,1.465,235,1.465,236,2.879,237,2.879,238,2.879,239,1.523,240,0.793,241,1.523,242,1.523,243,1.966,244,1.523,245,2.355,246,1.523,247,2.355,248,1.523,249,2.879,250,1.523,251,2.355,252,3.115,253,2.355,254,2.879,255,1.523,256,1.523,257,1.523,258,0.471,259,1.523,260,1.523,261,1.523,262,1.523,263,1.523,264,3.694,265,0.781,266,1.465,267,1.465,268,1.523,269,1.523,270,0.651,271,1.523,272,2.264,273,1.845,274,1.523,275,1.523,276,1.523,277,1.523,278,1.523,279,1.523,280,1.543,281,1.333,282,3.503,283,1.523,284,1.523,285,1.523,286,1.523,287,1.523,288,1.523,289,1.361,290,1.523,291,1.465,292,1.465,293,1.523,294,1.411,295,1.465,296,1.523,297,4.029,298,1.123,299,1.523,300,1.523,301,1.523,302,1.523,303,1.523,304,1.523,305,2.355,306,2.355,307,3.24,308,2.355,309,1.523,310,1.523,311,1.523,312,1.523,313,1.523,314,1.465,315,1.003,316,1.523,317,0.005,318,0.005]],["title/classes/BaseOp.html",[0,0.174,25,1.575]],["body/classes/BaseOp.html",[0,0.321,1,2.819,2,0.881,3,0.047,4,0.04,5,0.034,6,1.452,7,0.04,8,0.825,9,1.93,10,1.93,11,2.447,12,2.447,13,2.447,14,2.408,15,4.183,16,0.884,18,0.728,19,0.01,20,0.42,21,0.148,22,0.938,23,2.227,24,0.784,25,3.137,26,3.289,27,4.236,30,2.408,33,3.289,35,2.408,38,3.289,40,2.408,43,3.289,45,2.408,48,3.289,50,0.268,51,0.84,52,0.623,53,1.091,54,1.228,55,3.549,56,1.507,57,1.453,58,1.267,59,3.549,60,2.869,61,2.178,62,1.507,63,1.447,64,1.507,65,1.507,66,1.708,67,1.193,68,1.507,69,1.786,70,1.401,71,2.962,72,2.577,73,1.746,74,0.904,75,2.276,76,2.932,77,1.568,78,1.568,79,2.408,80,1.507,81,1.776,82,1.004,83,0.142,84,2.315,85,0.508,86,1.164,87,1.507,88,2.849,89,2.819,90,2.932,91,1.032,92,1.267,93,1.568,94,0.215,95,2.408,96,0.881,97,1.347,98,3.728,99,2.651,100,2.045,101,3.361,102,3.361,103,3.361,104,4.447,105,3.746,106,0.153,107,3.602,108,1.267,109,2.568,110,4.55,111,2.078,112,2.383,113,3.549,114,1.668,115,2.052,116,2.746,117,2.577,118,1.594,119,1.032,120,1.401,121,2.315,122,1.507,123,1.568,124,4.236,125,1.507,126,1.568,127,3.746,128,1.267,129,1.353,130,1.585,131,2.819,132,3.475,133,3.289,134,2.499,135,3.751,136,3.746,137,4.026,138,3.475,139,3.549,140,2.932,141,2.932,142,2.932,143,1.507,144,4.288,145,2.408,146,2.408,147,1.568,148,1.568,149,1.568,150,1.568,151,1.568,152,3.162,153,2.315,154,0.758,155,1.109,156,1.156,157,1.507,158,1.568,159,2.151,160,1.353,161,1.353,162,1.507,163,0.478,164,0.341,165,0.57,166,1.507,167,2.315,168,3.549,169,2.315,170,3.289,171,2.315,172,2.315,173,2.315,174,1.507,175,3.751,176,3.162,177,0.928,178,0.415,179,1.568,180,1.568,181,1.568,182,1.568,183,0.837,184,1.568,185,1.401,186,2.315,187,0.522,188,3.942,189,2.703,190,1.228,191,0.952,192,1.568,193,1.228,194,1.353,195,1.353,196,0.952,197,1.123,198,1.353,199,1.353,200,1.091,201,0.952,202,0.478,203,3.063,204,1.353,205,1.568,206,1.309,207,0.796,208,2.819,209,1.767,210,3.289,211,1.568,212,1.507,213,0.859,214,1.568,215,1.353,216,1.156,217,1.568,218,1.568,219,1.568,220,1.463,221,2.408,222,1.319,223,2.315,224,2.408,225,3.564,226,2.932,227,1.214,228,2.01,229,1.676,230,0.758,231,1.401,232,1.507,233,2.315,234,1.507,235,1.507,236,3.289,237,3.549,238,3.549,239,1.568,240,0.817,241,1.568,242,1.568,243,2.01,244,1.568,245,2.408,246,1.568,247,2.408,248,1.568,249,2.932,250,1.568,251,2.408,252,3.162,253,2.408,254,2.932,255,1.568,256,1.568,257,2.408,258,0.745,259,1.568,260,1.568,261,1.568,262,2.408,263,1.568,264,3.823,265,0.786,266,1.507,267,1.507,268,1.568,269,1.568,270,0.67,271,1.568,272,2.315,273,1.886,274,1.568,275,1.568,276,1.568,277,1.568,278,1.568,279,1.568,280,1.555,281,1.348,282,3.549,283,1.568,284,1.568,285,1.568,286,1.568,287,1.568,288,1.568,289,1.401,290,1.568,291,1.507,292,1.507,293,1.568,294,1.452,295,1.507,296,1.568,297,4.051,298,1.156,299,1.568,300,1.568,301,1.568,302,1.568,303,1.568,304,1.568,305,2.408,306,2.408,307,3.289,308,2.408,309,1.568,310,1.568,311,1.568,312,1.568,313,1.568,314,1.507,315,1.032,316,1.568,317,0.005,318,0.005,319,0.112,320,4.395,321,2.862,322,2.862,323,3.584,324,2.862,325,2.862,326,2.862,327,2.862,328,2.862,329,2.862,330,2.862,331,2.862,332,2.862,333,2.862,334,2.862,335,2.862]],["title/interfaces/Bounds.html",[106,0.111,336,1.575]],["body/interfaces/Bounds.html",[3,0.107,4,0.092,5,0.077,7,0.092,19,0.01,21,0.139,51,0.767,83,0.126,85,0.478,94,0.27,106,0.21,165,0.64,202,0.714,317,0.008,318,0.008,319,0.197,336,2.796,337,1.17,338,5.782,339,2.874,340,7.271,341,2.674,342,3.671,343,4.968,344,3.46,345,4.325,346,2.02,347,3.456,348,2.242,349,6.831,350,2.053,351,4.107,352,4.886,353,4.58,354,5.269,355,1.781,356,5.269,357,4.325,358,3.747,359,3.916,360,5.782,361,4.886,362,4.886,363,4.886]],["title/classes/Branch.html",[0,0.174,102,1.997]],["body/classes/Branch.html",[0,0.323,1,2.895,2,0.92,3,0.049,4,0.042,5,0.035,6,1.516,7,0.042,9,1.982,10,1.982,11,2.514,12,2.514,13,2.514,14,2.489,15,4.224,16,0.668,18,0.627,19,0.01,20,0.406,21,0.148,22,0.41,23,2.288,25,3.132,26,3.364,27,4.275,30,2.489,33,3.364,35,2.489,38,3.364,40,2.489,43,3.364,45,2.489,48,3.364,50,0.275,51,0.853,52,0.65,53,1.139,54,1.282,55,3.618,56,1.574,57,1.449,58,1.323,59,3.618,60,2.925,61,2.073,62,1.574,63,1.462,64,1.574,65,1.574,66,1.723,67,1.233,68,1.574,69,1.815,70,1.463,71,2.957,72,2.635,73,1.764,74,0.944,75,2.314,76,3.011,77,1.637,78,1.637,79,2.489,80,1.574,81,1.805,82,1.031,83,0.142,84,2.393,85,0.505,86,1.203,87,1.574,88,2.933,89,2.895,90,3.011,91,1.078,92,1.323,93,1.637,94,0.21,95,2.489,96,0.92,97,1.36,98,3.529,99,2.687,100,2.073,101,3.407,102,3.49,103,3.407,104,4.477,105,3.81,106,0.156,107,3.808,108,1.323,109,2.608,110,4.477,111,2.148,112,2.461,113,3.81,114,1.693,115,2.257,116,3.021,117,2.834,118,1.711,119,1.078,120,1.463,121,2.393,122,1.574,123,1.637,124,4.275,125,1.574,126,1.637,127,3.81,128,1.323,129,1.413,130,1.638,131,2.895,132,3.523,133,3.364,134,2.556,135,3.479,136,3.81,137,4.081,138,3.523,139,3.618,140,3.011,141,3.011,142,3.011,143,1.574,144,4.263,145,2.489,146,2.489,147,1.637,148,1.637,149,1.637,150,1.637,151,1.637,152,3.234,153,2.393,154,0.791,155,1.139,156,1.207,157,1.574,158,1.637,159,2.223,160,1.413,161,1.413,162,1.574,163,0.494,164,0.356,165,0.578,166,1.574,167,2.393,168,3.618,169,2.393,170,3.364,171,2.393,172,2.393,173,2.393,174,1.574,175,3.808,176,2.895,177,0.969,178,0.433,179,1.637,180,1.637,181,1.637,182,1.637,183,0.874,184,1.637,185,1.463,186,2.393,187,0.519,188,3.838,189,2.631,190,1.282,191,0.994,192,1.637,193,1.282,194,1.413,195,1.413,196,0.994,197,1.173,198,1.413,199,1.413,200,1.139,201,0.994,202,0.494,203,2.599,204,1.413,205,1.637,206,1.367,207,0.832,208,2.393,209,1.797,210,2.489,211,1.637,212,1.574,213,0.897,214,1.637,215,1.413,216,1.207,217,1.637,218,1.637,219,1.637,220,0.994,221,1.637,222,0.897,223,1.574,224,1.637,225,3.418,226,1.637,227,1.2,228,2.078,229,1.732,230,0.791,231,1.463,232,1.574,233,2.393,234,1.574,235,1.574,236,3.011,237,3.011,238,3.011,239,1.637,240,0.853,241,1.637,242,1.637,243,2.078,244,1.637,245,2.489,246,1.637,247,2.489,248,1.637,249,3.011,250,1.637,251,2.489,252,3.234,253,2.489,254,3.011,255,1.637,256,1.637,257,1.637,258,0.507,259,1.637,260,1.637,261,1.637,262,1.637,263,1.637,264,3.78,265,0.794,266,1.574,267,1.574,268,1.637,269,1.637,270,0.7,271,1.637,272,2.393,273,1.95,274,1.637,275,1.637,276,1.637,277,1.637,278,1.637,279,1.637,280,1.573,281,1.372,282,3.618,283,1.637,284,1.637,285,1.637,286,1.637,287,1.637,288,1.637,289,1.463,290,1.637,291,1.574,292,1.574,293,1.637,294,1.516,295,1.574,296,1.637,297,4.082,298,1.207,299,1.637,300,1.637,301,1.637,302,1.637,303,1.637,304,1.637,305,2.489,306,2.489,307,3.364,308,2.489,309,1.637,310,1.637,311,1.637,312,1.637,313,1.637,314,1.574,315,1.078,316,1.637,317,0.005,318,0.005,319,0.115,364,5.495]],["title/classes/Bus.html",[0,0.174,103,1.997]],["body/classes/Bus.html",[0,0.323,1,2.886,2,0.915,3,0.048,4,0.042,5,0.035,6,1.508,7,0.042,9,1.976,10,1.976,11,2.506,12,2.506,13,2.506,14,2.479,15,4.219,16,0.666,18,0.626,19,0.01,20,0.405,21,0.147,22,0.408,23,2.281,25,3.131,26,3.355,27,4.27,30,2.479,33,3.355,35,2.479,38,3.355,40,2.479,43,3.355,45,2.479,48,3.355,50,0.274,51,0.845,52,0.647,53,1.134,54,1.276,55,3.61,56,1.566,57,1.448,58,1.317,59,3.61,60,3.074,61,2.07,62,1.566,63,1.461,64,1.566,65,1.566,66,1.722,67,1.487,68,1.566,69,1.826,70,1.455,71,2.955,72,2.628,73,1.808,74,0.939,75,2.31,76,3.002,77,1.629,78,1.629,79,2.479,80,1.566,81,1.798,82,1.028,83,0.142,84,2.384,85,0.508,86,1.199,87,1.566,88,2.931,89,2.886,90,3.002,91,1.072,92,1.317,93,1.629,94,0.224,95,2.479,96,0.915,97,1.358,98,3.522,99,2.683,100,2.07,101,3.402,102,3.402,103,3.485,104,4.473,105,3.803,106,0.156,107,3.801,108,1.317,109,2.603,110,4.473,111,2.14,112,2.404,113,3.61,114,1.69,115,2.252,116,3.014,117,2.979,118,1.775,119,1.632,120,2.215,121,3.226,122,2.384,123,2.479,124,4.27,125,1.566,126,1.629,127,3.803,128,1.317,129,1.406,130,1.632,131,2.886,132,3.517,133,3.355,134,2.549,135,3.471,136,3.803,137,4.075,138,3.517,139,3.61,140,3.002,141,3.002,142,3.002,143,1.566,144,4.258,145,2.479,146,2.479,147,1.629,148,1.629,149,1.629,150,1.629,151,1.629,152,3.226,153,2.384,154,0.787,155,1.135,156,1.201,157,1.566,158,1.629,159,2.215,160,1.406,161,1.406,162,1.566,163,0.492,164,0.354,165,0.577,166,1.566,167,2.384,168,3.61,169,2.384,170,3.355,171,2.384,172,2.384,173,2.384,174,1.566,175,3.801,176,2.886,177,0.964,178,0.431,179,1.629,180,1.629,181,1.629,182,1.629,183,0.87,184,1.629,185,1.455,186,2.384,187,0.519,188,3.833,189,2.628,190,1.276,191,0.989,192,1.629,193,1.276,194,1.406,195,1.406,196,0.989,197,1.167,198,1.406,199,1.406,200,1.134,201,0.989,202,0.492,203,2.591,204,1.406,205,1.629,206,1.36,207,0.827,208,2.384,209,1.794,210,2.479,211,1.629,212,1.566,213,0.892,214,1.629,215,1.406,216,1.201,217,1.629,218,1.629,219,1.629,220,0.989,221,1.629,222,0.892,223,1.566,224,1.629,225,3.413,226,1.629,227,1.198,228,2.07,229,1.726,230,0.787,231,1.455,232,1.566,233,2.384,234,1.566,235,1.566,236,3.002,237,3.002,238,3.002,239,1.629,240,0.848,241,1.629,242,1.629,243,2.07,244,1.629,245,2.479,246,1.629,247,2.479,248,1.629,249,3.002,250,1.629,251,2.479,252,3.226,253,2.479,254,3.002,255,1.629,256,1.629,257,1.629,258,0.504,259,1.629,260,1.629,261,1.629,262,1.629,263,1.629,264,3.774,265,0.793,266,1.566,267,1.566,268,1.629,269,1.629,270,0.696,271,1.629,272,2.384,273,1.942,274,1.629,275,1.629,276,1.629,277,1.629,278,1.629,279,1.629,280,1.571,281,1.369,282,3.61,283,1.629,284,1.629,285,1.629,286,1.629,287,1.629,288,1.629,289,1.455,290,1.629,291,1.566,292,1.566,293,1.629,294,1.508,295,1.566,296,1.629,297,4.078,298,1.201,299,1.629,300,1.629,301,1.629,302,1.629,303,1.629,304,1.629,305,2.479,306,2.479,307,3.355,308,2.479,309,1.629,310,1.629,311,1.629,312,1.629,313,1.629,314,1.566,315,1.072,316,1.629,317,0.005,318,0.005,319,0.115,365,5.478]],["title/classes/Cell.html",[0,0.174,366,2.3]],["body/classes/Cell.html",[0,0.217,2,1.675,3,0.088,4,0.076,5,0.09,7,0.076,8,1.297,16,0.97,18,0.776,19,0.01,20,0.38,21,0.134,22,1.042,24,1.561,57,1.355,74,2.183,83,0.088,86,2.317,115,2.362,165,0.62,178,1.277,202,0.752,227,0.876,230,1.441,240,2.168,258,1.429,265,0.791,317,0.007,318,0.007,319,0.176,339,2.563,366,4.609,367,5.442,368,3.108,369,7.595,370,7.595,371,7.595,372,5.951,373,5.657,374,6.912,375,6.912,376,7.991,377,7.991,378,7.991,379,7.991,380,6.912,381,0.883,382,6.912,383,6.418,384,2.074,385,6.278,386,3.787,387,6.912,388,5.032,389,5.442,390,5.442,391,6.278,392,2.422,393,2.048,394,5.442,395,5.442,396,6.912,397,5.442,398,4.327,399,6.091,400,1.659,401,6.091,402,3.641,403,5.442,404,5.442,405,5.442,406,5.442,407,5.442,408,5.442,409,5.442,410,8.919,411,8.994,412,5.442,413,5.442,414,5.442,415,5.442,416,5.442,417,5.442,418,5.442,419,5.442,420,5.442,421,5.442]],["title/interfaces/ChainIndex.html",[106,0.111,422,3.507]],["body/interfaces/ChainIndex.html",[0,0.308,3,0.092,4,0.079,5,0.067,7,0.099,8,1.326,19,0.01,21,0.115,50,0.405,51,0.558,63,1.309,83,0.092,85,0.409,94,0.269,106,0.143,159,2.759,164,0.671,202,0.613,209,1.826,216,2.277,227,0.908,230,1.493,265,0.825,280,1.685,281,1.394,317,0.007,318,0.007,319,0.18,337,1.006,348,2.638,381,0.558,392,1.53,393,1.615,398,3.529,422,5.675,423,4.967,424,1.615,425,3.962,426,4.67,427,1.104,428,6.932,429,2.695,430,1.456,431,3.962,432,3.702,433,3.342,434,2.86,435,3.365,436,3.529,437,2.969,438,3.716,439,3.342,440,4.527,441,2.149,442,4.967,443,4.527,444,2.419,445,4.967,446,4.527,447,4.967,448,4.527,449,4.527,450,3.033,451,4.967,452,2.665,453,1.827,454,3.219,455,4.967,456,4.527,457,4.967,458,4.967,459,4.967,460,6.228,461,4.967,462,2.578,463,4.967,464,1.827,465,4.967,466,4.527,467,2.09,468,1.692,469,2.346,470,4.967,471,4.967,472,6.228,473,4.967,474,4.527,475,4.967,476,5.675,477,3.529,478,4.967,479,4.198,480,2.919,481,3.722,482,4.967,483,2.665,484,4.967,485,3.529,486,2.969,487,2.212,488,4.527,489,3.529,490,4.967,491,3.365,492,4.967,493,3.088,494,4.527,495,4.527,496,3.716,497,4.967,498,4.967,499,4.659,500,3.529,501,5.675,502,4.967,503,4.967,504,4.967,505,3.716,506,4.198,507,4.967,508,2.86,509,6.228,510,4.967,511,3.529,512,4.527,513,4.967,514,4.527,515,4.967,516,4.527,517,4.967]],["title/interfaces/ChainOp.html",[106,0.111,433,2.065]],["body/interfaces/ChainOp.html",[3,0.068,4,0.059,5,0.049,7,0.059,9,1.51,10,1.51,19,0.01,20,0.415,21,0.135,23,3.147,25,1.51,50,0.378,51,0.832,52,0.911,53,1.596,57,1.282,61,1.616,63,1.13,66,1.764,67,1.136,69,1.264,71,3.044,73,0.934,83,0.143,85,0.481,94,0.263,96,1.787,97,1.387,99,2.404,100,1.855,106,0.183,111,1.979,112,1.742,115,1.43,138,2.745,163,0.632,164,0.955,165,0.558,187,0.386,189,1.882,202,0.455,209,1.722,215,1.979,220,1.393,265,0.872,270,0.981,280,1.795,315,1.51,317,0.006,318,0.006,319,0.148,337,0.747,350,1.765,357,2.76,381,0.575,424,1.327,425,4.003,426,3.791,427,1.041,431,2.842,432,3.798,433,3.7,434,2.124,441,2.311,444,1.797,468,1.256,487,2.967,499,3.827,508,2.945,518,2.76,519,3.495,520,2.745,521,3.316,522,4.746,523,1.979,524,1.691,525,3.262,526,2.655,527,3.466,528,3.316,529,3.262,530,2.391,531,2.499,532,3.593,533,1.979,534,2.293,535,0.981,536,2.499,537,3.117,538,2.276,539,2.214,540,2.76,541,4.111,542,4.394,543,3.807,544,3.807,545,3.976,546,3.578,547,4.297,548,3.117,549,4.323,550,4.513,551,4.653,552,4.964,553,4.318,554,3.807,555,3.117,556,3.117,557,2.049,558,3.117,559,4.297,560,3.117,561,3.117,562,2.391,563,2.499,564,2.293,565,3.316,566,4.323,567,2.499,568,5.361,569,3.466,570,3.117,571,4.297,572,3.466,573,4.481,574,2.499,575,3.117,576,1.538,577,3.741,578,3.117,579,3.117,580,3.827,581,2.922,582,3.117,583,2.922,584,3.117,585,3.117,586,3.316,587,2.492,588,2.922,589,3.117,590,4.323,591,1.576,592,4.323,593,3.316,594,4.323,595,3.117,596,1.643,597,4.323,598,3.117,599,3.117,600,2.499,601,3.117,602,2.922,603,3.117,604,2.124,605,3.511,606,2.922,607,1.469,608,2.922,609,2.922,610,4.323,611,3.117,612,2.76,613,3.117,614,2.499,615,4.053,616,3.117,617,2.922,618,4.323,619,4.053,620,3.117,621,3.117,622,3.117,623,4.323,624,4.111,625,4.323,626,4.323,627,4.323,628,3.117,629,3.117,630,3.117,631,3.117,632,3.117,633,3.117,634,2.293,635,3.827,636,3.827,637,3.827,638,3.117,639,2.76]],["title/components/ConnectionComponent.html",[640,0.905,641,1.764]],["body/components/ConnectionComponent.html",[0,0.153,3,0.062,4,0.054,5,0.045,7,0.054,8,1.026,16,0.975,18,0.749,19,0.01,20,0.4,21,0.143,22,1.005,24,1.474,50,0.381,52,0.837,63,1.176,73,1.22,81,1.437,83,0.062,86,1.448,94,0.263,97,1.417,112,2.081,114,1.281,154,1.836,163,0.797,164,0.458,165,0.494,178,1.061,191,1.279,202,0.595,216,2.21,227,0.619,230,1.448,240,1.816,258,1.401,265,0.38,280,1.287,317,0.006,318,0.006,319,0.139,336,2.746,343,3.96,344,2.146,345,4.062,346,2.508,347,4.125,348,1.869,356,4.392,381,0.775,384,1.154,392,2.269,427,1.016,430,0.993,450,2.347,467,2.028,535,0.9,576,1.836,587,2.732,591,1.044,640,1.623,641,2.801,642,2.028,643,1.818,644,1.758,645,1.818,646,2.039,647,3.844,648,2.732,649,3.811,650,3.696,651,7.501,652,2.501,653,6.365,654,2.501,655,5.468,656,6.365,657,6.365,658,4.819,659,6.365,660,6.365,661,6.365,662,4.74,663,6.365,664,6.933,665,6.933,666,6.365,667,4.819,668,6.933,669,4.34,670,2.976,671,4.073,672,5.468,673,5.468,674,6.365,675,3.439,676,3.087,677,5.114,678,5.468,679,3.844,680,3.844,681,3.844,682,3.844,683,3.844,684,3.844,685,4.819,686,4.74,687,3.844,688,2.422,689,3.844,690,3.844,691,3.844,692,3.844,693,3.844,694,5.468,695,5.468,696,3.818,697,3.605,698,5.468,699,3.844,700,6.429,701,2.609,702,5.163,703,5.468,704,4.819,705,5.468,706,2.96,707,2.96,708,3.844,709,4.392,710,4.392,711,5.468,712,3.424,713,3.487,714,5.568,715,3.844,716,3.844,717,4.196,718,4.819,719,3.844,720,3.844,721,3.844,722,3.844,723,3.844,724,3.985,725,3.844,726,3.844,727,3.844,728,3.844,729,3.388,730,2.684,731,3.388,732,3.844,733,3.844,734,2.684,735,1.818,736,3.844,737,3.844,738,3.844,739,3.844,740,3.844,741,6.365,742,3.844,743,6.365,744,3.844,745,3.844,746,3.844,747,3.844,748,3.844,749,3.844,750,3.388,751,6.365,752,5.468,753,3.844,754,7.325,755,5.468,756,3.844,757,5.468,758,3.844,759,3.844,760,5.468,761,3.844,762,3.844,763,3.844,764,5.468,765,5.468,766,3.844,767,5.468,768,3.844,769,4.819,770,5.468,771,5.468,772,3.844,773,3.424,774,3.844,775,2.21,776,3.087,777,2.886,778,3.844,779,3.844,780,3.844,781,3.844,782,3.844,783,6.365,784,6.365,785,3.844,786,3.844,787,3.844,788,3.844,789,3.844,790,3.844,791,6.933,792,5.468,793,5.468,794,5.468,795,3.844,796,3.388,797,3.844,798,5.468,799,3.844,800,2.863,801,3.844,802,3.844,803,6.365,804,3.844,805,5.468,806,6.365,807,3.844,808,3.844,809,2.407,810,3.844,811,2.88,812,3.844,813,3.844,814,3.388,815,5.609,816,3.844,817,5.468,818,6.11,819,5.468,820,4.819,821,3.844,822,3.844,823,3.844,824,3.844,825,3.844,826,3.844,827,3.844,828,3.844,829,3.844,830,2.684,831,2.88,832,3.844,833,3.087,834,2.501,835,2.732,836,3.087,837,3.844,838,3.265,839,3.844,840,3.123,841,1.818,842,1.6,843,1.818,844,1.818,845,1.6,846,1.818,847,1.65,848,1.818,849,1.65,850,1.818,851,1.702,852,1.818,853,1.65,854,1.818,855,1.65,856,1.818,857,1.818,858,1.65,859,1.818,860,1.65,861,1.818,862,1.65,863,1.818,864,1.702,865,1.818,866,1.65,867,1.818,868,1.6,869,1.818,870,1.65,871,1.818,872,1.818,873,1.65,874,1.154,875,1.818,876,1.65,877,1.6,878,1.6,879,1.818,880,1.702,881,1.466,882,1.818]],["title/interfaces/Crossing.html",[106,0.111,883,3.252]],["body/interfaces/Crossing.html",[3,0.101,4,0.087,5,0.073,7,0.087,19,0.01,21,0.143,51,0.861,74,1.958,83,0.136,85,0.359,91,2.235,94,0.265,106,0.205,165,0.624,202,0.674,213,2.248,317,0.008,318,0.008,319,0.19,337,1.106,339,2.986,341,2.009,346,1.908,347,3.946,350,1.984,400,1.488,427,0.972,834,3.427,883,5.579,884,4.615,885,5.237,886,6.017,887,5.621,888,6.017,889,4.104,890,4.939,891,4.104,892,3.283,893,2.61,894,3.667,895,5.579,896,1.889,897,4.807,898,6.017,899,4.778,900,6.23,901,4.615,902,4.977,903,4.326,904,4.086,905,4.977,906,3.88,907,4.326,908,4.977,909,6.017,910,5.579,911,4.615,912,6.017,913,3.539,914,2.504,915,4.615,916,2.931,917,3.88,918,2.835,919,3.88,920,3.7,921,4.977,922,4.977,923,6.467,924,6.467,925,4.977,926,6.017,927,4.977,928,6.017,929,4.977,930,6.017,931,4.977,932,6.017,933,4.977,934,4.977,935,4.977]],["title/classes/DBListener.html",[0,0.174,936,1.934]],["body/classes/DBListener.html",[0,0.326,2,0.907,3,0.048,4,0.041,5,0.035,7,0.041,8,1.022,16,0.857,18,0.301,19,0.01,20,0.272,21,0.126,22,0.747,24,0.972,50,0.272,57,0.924,75,0.98,82,1.391,83,0.124,85,0.457,94,0.244,97,1.314,106,0.114,109,2.198,114,0.69,118,1.34,130,1.62,155,0.61,163,0.714,164,0.535,165,0.509,177,2.777,178,0.789,187,0.5,196,1.495,201,0.98,202,0.32,209,2.003,213,0.884,222,1.829,227,0.474,240,0.84,258,1.113,265,0.801,281,1.294,317,0.005,318,0.005,319,0.114,346,2.02,381,0.78,384,1.969,392,2.013,393,1.737,400,1.575,424,0.673,427,1.037,453,0.955,464,2.127,468,1.348,469,1.87,480,1.062,483,3.866,538,2.064,576,1.614,596,2.823,607,1.577,701,2.627,775,1.19,874,1.348,896,0.742,914,1.815,936,3.621,937,1.441,938,3.092,939,2.433,940,3.756,941,3.762,942,3.329,943,3.762,944,3.762,945,3.329,946,3.774,947,3.999,948,3.329,949,3.649,950,3.284,951,2.945,952,4.34,953,2.945,954,3.933,955,2.595,956,2.945,957,2.945,958,2.595,959,2.595,960,2.056,961,2.082,962,3.092,963,2.983,964,3.392,965,2.91,966,3.329,967,2.595,968,2.595,969,2.945,970,3.593,971,1.494,972,1.494,973,1.494,974,1.494,975,1.494,976,1.441,977,1.347,978,3.475,979,1.347,980,1.813,981,3.29,982,2.199,983,2.199,984,2.615,985,1.347,986,1.304,987,1.989,988,2.763,989,2.763,990,1.494,991,2.763,992,2.279,993,2.763,994,1.494,995,1.494,996,3.092,997,1.494,998,2.763,999,2.279,1000,1.494,1001,1.494,1002,1.494,1003,1.494,1004,3.327,1005,2.279,1006,1.494,1007,1.494,1008,2.279,1009,1.494,1010,1.494,1011,1.989,1012,1.815,1013,1.494,1014,1.441,1015,1.494,1016,3.329,1017,3.933,1018,2.279,1019,4.056,1020,3.999,1021,3.329,1022,2.279,1023,2.279,1024,3.092,1025,3.092,1026,3.092,1027,2.699,1028,3.092,1029,3.092,1030,3.185,1031,1.494,1032,1.494,1033,2.763,1034,2.763,1035,2.763,1036,1.989,1037,1.494,1038,1.494,1039,1.347,1040,1.494,1041,1.441,1042,1.494,1043,1.494,1044,0.864,1045,1.494,1046,1.494,1047,3.185,1048,2.983,1049,1.925,1050,3.649,1051,4.186,1052,3.092,1053,2.279,1054,2.279,1055,3.092,1056,2.412,1057,1.494,1058,1.494,1059,1.494,1060,1.304,1061,1.494,1062,2.279,1063,2.279,1064,2.279,1065,2.279,1066,2.279,1067,2.279,1068,1.494,1069,1.494,1070,1.494,1071,1.494,1072,1.989,1073,1.034,1074,3.092,1075,1.494,1076,1.494,1077,1.441,1078,0.761,1079,1.441,1080,2.763,1081,2.279,1082,2.279,1083,3.092,1084,3.092,1085,2.279,1086,2.279,1087,2.279,1088,3.509,1089,2.279,1090,3.509,1091,1.494,1092,2.279,1093,2.279,1094,2.279,1095,3.546,1096,3.329,1097,3.509,1098,1.441,1099,1.494,1100,2.279,1101,3.649,1102,2.279,1103,3.509,1104,3.855,1105,2.279,1106,3.092,1107,3.762,1108,2.279,1109,1.713,1110,2.279,1111,2.279,1112,2.279,1113,2.199,1114,1.829,1115,2.279,1116,2.279,1117,2.279,1118,2.279,1119,2.763,1120,2.279,1121,2.763,1122,1.494,1123,3.063,1124,1.494,1125,1.494,1126,1.494,1127,1.494,1128,1.494,1129,1.347,1130,2.491,1131,1.494,1132,2.279,1133,2.279,1134,2.279,1135,2.279,1136,2.279,1137,2.279,1138,2.279,1139,2.279,1140,2.279,1141,1.264,1142,2.055,1143,1.264,1144,1.347,1145,1.19,1146,1.494,1147,1.304,1148,1.494,1149,1.304,1150,1.494,1151,1.494,1152,1.494,1153,1.494,1154,1.494,1155,1.494,1156,1.494,1157,1.989,1158,0.98,1159,0.93,1160,2.279,1161,2.199,1162,1.304,1163,1.494,1164,1.494,1165,1.494,1166,1.226,1167,1.494,1168,1.494,1169,0.98,1170,1.494,1171,1.494,1172,1.494,1173,2.279,1174,1.494]],["title/classes/DBListenerArray.html",[0,0.174,1072,1.934]],["body/classes/DBListenerArray.html",[0,0.324,2,0.879,3,0.046,4,0.04,5,0.034,7,0.04,8,1.002,16,0.874,18,0.661,19,0.01,20,0.356,21,0.125,22,0.888,24,1.31,50,0.267,57,0.744,75,0.95,82,1.378,83,0.122,85,0.471,94,0.245,97,1.304,106,0.111,109,2.334,114,0.669,118,1.592,130,1.582,155,0.591,163,0.704,164,0.522,165,0.502,177,2.751,178,0.635,187,0.5,196,0.95,201,0.95,202,0.31,209,1.987,213,0.857,222,1.799,227,0.46,240,0.815,258,1.206,265,0.795,281,1.347,317,0.005,318,0.005,319,0.111,346,1.992,381,0.761,384,1.942,392,1.931,393,1.721,400,1.808,424,1.003,427,0.998,453,0.925,464,1.944,468,1.316,469,1.826,480,1.03,483,3.842,538,2.044,576,1.588,596,3.069,607,1.875,701,2.681,775,1.153,874,1.316,896,1.106,914,1.772,936,3.824,937,1.397,938,3.042,939,2.223,940,3.335,941,3.466,942,2.71,943,3.466,944,3.466,945,3.283,946,3.783,947,3.968,948,2.226,949,3.466,950,3.025,952,3.901,954,3.821,961,2.049,962,3.042,963,2.935,964,3.358,965,3.017,966,3.283,970,3.561,971,1.448,972,1.448,973,1.448,974,1.448,975,1.448,976,1.397,977,1.306,978,3.444,979,1.306,980,1.778,981,3.254,982,2.147,983,2.147,984,2.573,985,1.306,986,1.264,987,2.366,988,2.71,989,2.71,990,1.448,991,2.71,992,2.226,993,2.71,994,1.448,995,1.448,996,3.042,997,1.448,998,2.71,999,2.226,1000,1.448,1001,1.448,1002,1.448,1003,1.448,1004,3.304,1005,2.226,1006,1.448,1007,1.448,1008,2.226,1009,1.448,1010,1.448,1011,1.943,1012,1.772,1013,1.448,1014,1.397,1015,1.448,1016,3.283,1017,3.9,1018,2.226,1019,4.027,1020,3.968,1021,3.283,1022,2.226,1023,2.226,1024,3.042,1025,3.042,1026,3.042,1027,2.655,1028,3.042,1029,3.042,1030,3.151,1031,1.448,1032,1.448,1033,2.71,1034,2.71,1035,2.71,1036,1.943,1037,1.448,1038,1.448,1039,1.306,1040,1.448,1041,1.397,1042,1.448,1043,1.448,1044,1.028,1045,1.448,1046,1.448,1047,3.151,1048,3.885,1049,2.247,1050,3.968,1051,4.327,1052,3.283,1053,2.226,1054,2.226,1055,3.042,1056,2.655,1057,1.448,1058,1.448,1059,1.448,1060,1.264,1061,1.448,1062,2.226,1063,2.71,1064,2.226,1065,2.226,1066,2.226,1067,2.226,1068,2.226,1069,1.448,1070,3.042,1071,1.448,1072,2.366,1073,1.002,1074,3.283,1075,2.226,1076,2.226,1077,2.147,1078,1.133,1079,2.147,1080,2.71,1081,2.226,1082,2.226,1083,3.042,1084,3.042,1085,2.226,1086,2.226,1087,2.226,1088,3.466,1089,2.226,1090,3.466,1091,1.448,1092,2.226,1093,2.226,1094,2.226,1095,3.516,1096,3.283,1097,3.466,1098,2.147,1099,2.226,1100,2.226,1101,3.609,1102,2.226,1103,3.466,1104,3.821,1105,2.226,1106,3.042,1107,3.725,1108,2.71,1109,2.037,1110,2.71,1111,2.71,1112,2.71,1113,2.615,1114,1.942,1115,2.71,1116,2.226,1117,2.226,1118,2.226,1119,2.71,1120,2.226,1121,2.71,1122,1.448,1123,3.025,1124,1.448,1125,1.448,1126,1.448,1127,1.448,1128,1.448,1129,2.742,1130,2.443,1131,1.448,1132,2.226,1133,2.226,1134,2.226,1135,2.226,1136,2.226,1137,2.226,1138,2.226,1139,2.226,1140,2.226,1141,1.225,1142,2.006,1143,1.225,1144,1.306,1145,1.153,1146,1.448,1147,1.264,1148,1.448,1149,1.264,1150,1.448,1151,1.448,1152,1.448,1153,1.448,1154,1.448,1155,1.448,1156,1.448,1157,1.943,1158,0.95,1159,0.902,1160,2.226,1161,2.147,1162,1.264,1163,1.448,1164,1.448,1165,1.448,1166,1.188,1167,1.448,1168,1.448,1169,0.95,1170,1.448,1171,1.448,1172,1.448,1173,2.226,1174,1.448,1175,3.523,1176,3.866,1177,3.267,1178,3.267,1179,4.386,1180,2.854,1181,2.854,1182,2.854,1183,2.854,1184,2.854,1185,2.854,1186,2.854,1187,2.854,1188,2.854,1189,2.292,1190,2.292]],["title/classes/DBNode.html",[0,0.174,940,1.934]],["body/classes/DBNode.html",[0,0.325,2,0.896,3,0.047,4,0.041,5,0.034,7,0.041,8,1.014,16,0.903,18,0.553,19,0.01,20,0.358,21,0.128,22,0.895,24,1.081,50,0.27,57,0.917,75,0.968,82,1.386,83,0.123,85,0.455,94,0.243,97,1.31,106,0.113,109,2.185,114,1.043,118,1.33,130,1.606,155,0.603,163,0.71,164,0.53,165,0.506,177,2.772,178,0.783,187,0.502,196,0.968,201,0.968,202,0.484,209,1.997,213,0.873,222,1.818,227,0.469,240,0.83,258,1.027,265,0.799,281,1.287,317,0.005,318,0.005,319,0.113,346,2.119,381,0.799,384,1.959,392,1.945,393,1.731,400,1.567,424,0.665,427,1.034,453,0.943,464,2.232,468,1.336,469,1.853,480,1.05,483,3.857,538,2.056,576,1.604,596,2.811,607,1.563,701,2.641,775,1.176,874,1.336,896,0.734,914,2.185,936,3.574,937,1.425,938,2.743,939,2.246,940,3.422,941,3.748,942,3.312,943,3.748,944,3.748,945,3.312,946,3.765,947,3.987,948,2.259,949,3.634,950,3.272,954,3.921,961,2.07,962,3.073,963,2.965,964,3.535,965,2.899,966,3.312,970,3.716,971,1.477,972,1.477,973,1.477,974,1.477,975,1.477,976,1.425,977,1.331,978,3.535,979,1.331,980,2.016,981,3.379,982,2.647,983,2.647,984,2.599,985,1.331,986,1.289,987,2.395,988,3.634,989,2.743,990,1.477,991,2.743,992,2.259,993,2.743,994,1.477,995,1.477,996,3.073,997,1.477,998,2.743,999,2.259,1000,1.477,1001,1.477,1002,1.477,1003,1.477,1004,3.395,1005,2.259,1006,1.477,1007,1.477,1008,2.259,1009,1.477,1010,2.259,1011,1.972,1012,1.799,1013,1.477,1014,1.425,1015,1.477,1016,3.312,1017,3.921,1018,2.259,1019,4.045,1020,3.987,1021,3.312,1022,2.259,1023,2.259,1024,3.073,1025,3.073,1026,3.073,1027,2.682,1028,3.073,1029,3.073,1030,3.172,1031,1.477,1032,1.477,1033,2.743,1034,3.073,1035,2.743,1036,1.972,1037,1.477,1038,1.477,1039,1.331,1040,1.477,1041,1.425,1042,1.477,1043,1.477,1044,0.856,1045,1.477,1046,1.477,1047,3.172,1048,2.965,1049,1.913,1050,3.634,1051,4.177,1052,3.073,1053,2.259,1054,2.259,1055,3.073,1056,2.395,1057,1.477,1058,1.477,1059,1.477,1060,1.289,1061,1.477,1062,2.259,1063,2.259,1064,2.259,1065,2.259,1066,2.259,1067,2.259,1068,1.477,1069,1.477,1070,1.477,1071,1.477,1072,1.972,1073,1.022,1074,3.073,1075,1.477,1076,1.477,1077,1.425,1078,0.752,1079,1.425,1080,2.743,1081,2.259,1082,2.259,1083,3.073,1084,3.073,1085,2.259,1086,2.259,1087,2.259,1088,3.492,1089,2.259,1090,3.492,1091,1.477,1092,2.259,1093,2.259,1094,2.259,1095,3.535,1096,3.312,1097,3.492,1098,1.425,1099,1.477,1100,2.259,1101,3.634,1102,2.259,1103,3.492,1104,3.842,1105,2.259,1106,3.073,1107,3.748,1108,2.259,1109,1.698,1110,2.259,1111,2.259,1112,2.259,1113,2.179,1114,1.818,1115,2.259,1116,2.259,1117,2.259,1118,2.259,1119,2.743,1120,2.259,1121,2.743,1122,1.477,1123,3.048,1124,1.477,1125,1.477,1126,1.477,1127,1.477,1128,1.477,1129,1.331,1130,2.473,1131,1.477,1132,2.259,1133,2.259,1134,2.259,1135,2.259,1136,2.259,1137,2.259,1138,2.259,1139,2.259,1140,2.259,1141,1.249,1142,2.036,1143,1.249,1144,1.331,1145,1.176,1146,1.477,1147,1.289,1148,1.477,1149,1.289,1150,1.477,1151,1.477,1152,1.477,1153,1.477,1154,1.477,1155,1.477,1156,1.477,1157,1.972,1158,0.968,1159,0.919,1160,2.259,1161,2.179,1162,1.289,1163,1.477,1164,1.477,1165,1.477,1166,1.211,1167,1.477,1168,1.477,1169,0.968,1170,1.477,1171,1.477,1172,1.477,1173,2.259,1174,1.477,1191,2.543,1192,4.452,1193,2.91,1194,2.91,1195,2.91,1196,2.91,1197,2.91,1198,2.91,1199,2.91,1200,2.91,1201,2.91,1202,2.91,1203,2.565,1204,2.91,1205,2.91,1206,2.91,1207,2.91,1208,2.337,1209,2.91,1210,2.91,1211,2.91]],["title/classes/DBNodeArray.html",[0,0.174,1048,2.138]],["body/classes/DBNodeArray.html",[0,0.327,2,0.919,3,0.049,4,0.042,5,0.035,7,0.042,8,1.03,16,0.846,18,0.561,19,0.01,20,0.33,21,0.113,22,0.753,24,0.98,50,0.275,57,0.77,75,0.993,82,1.304,83,0.124,85,0.465,94,0.242,97,1.319,106,0.115,109,2.213,114,0.699,118,1.624,130,1.637,155,0.618,163,0.718,164,0.54,165,0.512,177,2.755,178,0.657,187,0.497,196,0.993,201,0.993,209,2.01,213,0.896,222,1.842,227,0.481,240,0.852,258,0.931,265,0.803,281,1.302,317,0.005,318,0.005,319,0.115,346,2.032,381,0.77,384,1.981,392,1.962,393,1.744,400,1.585,424,0.682,427,1.009,453,0.967,464,2.254,468,1.362,469,1.889,480,1.076,483,3.876,538,2.165,576,1.625,596,2.836,607,1.593,701,2.634,775,1.206,874,1.362,896,0.752,914,1.834,936,3.593,937,1.461,938,2.786,939,2.275,940,3.502,941,3.527,942,2.786,943,3.527,944,3.527,945,2.786,946,3.667,947,3.778,948,2.303,949,3.527,950,3.079,954,3.87,961,1.877,962,2.786,963,2.688,964,3.305,965,2.836,966,3.113,970,3.607,971,1.514,972,1.514,973,1.514,974,1.514,975,1.514,976,1.461,977,1.365,978,3.489,979,1.365,980,2.042,981,3.305,982,2.222,983,2.222,984,2.634,985,1.365,986,1.322,987,2.01,988,2.786,989,2.786,990,1.514,991,2.786,992,2.303,993,2.786,994,1.514,995,1.514,996,3.113,997,1.514,998,2.786,999,2.303,1000,1.514,1001,1.514,1002,1.514,1003,1.514,1004,3.338,1005,2.303,1006,1.514,1007,1.514,1008,2.303,1009,1.514,1010,1.514,1011,2.01,1012,1.834,1013,1.514,1014,1.461,1015,1.514,1016,3.349,1017,3.947,1018,2.303,1019,4.068,1020,4.012,1021,3.349,1022,2.303,1023,2.303,1024,3.113,1025,3.113,1026,3.113,1027,2.717,1028,3.113,1029,3.113,1030,3.2,1031,1.514,1032,1.514,1033,2.786,1034,2.786,1035,2.786,1036,2.01,1037,1.514,1038,1.514,1039,1.365,1040,1.514,1041,1.461,1042,1.514,1043,1.514,1044,0.873,1045,1.514,1046,1.514,1047,3.2,1048,3.231,1049,2.196,1050,3.947,1051,4.311,1052,3.349,1053,2.303,1054,2.303,1055,3.113,1056,2.923,1057,1.514,1058,1.514,1059,1.514,1060,2.432,1061,1.514,1062,2.303,1063,2.786,1064,2.303,1065,2.303,1066,2.303,1067,2.303,1068,2.303,1069,1.514,1070,3.113,1071,1.514,1072,2.01,1073,1.048,1074,3.113,1075,1.514,1076,1.514,1077,1.461,1078,0.771,1079,1.461,1080,2.786,1081,2.303,1082,2.303,1083,3.113,1084,3.113,1085,2.303,1086,2.303,1087,2.303,1088,3.527,1089,2.303,1090,3.527,1091,1.514,1092,2.303,1093,2.303,1094,2.303,1095,3.558,1096,3.349,1097,3.527,1098,1.461,1099,1.514,1100,2.303,1101,3.666,1102,2.303,1103,3.527,1104,3.87,1105,2.303,1106,3.113,1107,3.778,1108,2.303,1109,1.731,1110,2.303,1111,2.303,1112,2.303,1113,2.222,1114,1.842,1115,2.303,1116,2.303,1117,2.303,1118,2.303,1119,2.786,1120,2.303,1121,2.786,1122,1.514,1123,3.079,1124,1.514,1125,1.514,1126,1.514,1127,1.514,1128,1.514,1129,1.365,1130,2.512,1131,1.514,1132,2.303,1133,2.303,1134,2.303,1135,2.303,1136,2.303,1137,2.303,1138,2.303,1139,2.303,1140,2.303,1141,1.281,1142,2.076,1143,1.281,1144,1.365,1145,1.206,1146,1.514,1147,1.322,1148,1.514,1149,1.322,1150,1.514,1151,1.514,1152,1.514,1153,1.514,1154,1.514,1155,1.514,1156,1.514,1157,2.01,1158,0.993,1159,0.943,1160,2.303,1161,2.222,1162,1.322,1163,1.514,1164,1.514,1165,1.514,1166,1.242,1167,1.514,1168,1.514,1169,0.993,1170,1.514,1171,1.514,1172,1.514,1173,2.303,1174,1.514,1177,3.38,1178,3.38,1191,2.592,1208,2.397,1212,4.538,1213,2.984,1214,2.984,1215,2.984,1216,2.984,1217,2.984,1218,2.984,1219,2.984,1220,2.984,1221,2.984,1222,2.984]],["title/classes/DBTwoWay.html",[0,0.174,1047,1.934]],["body/classes/DBTwoWay.html",[0,0.326,2,0.905,3,0.048,4,0.041,5,0.035,7,0.041,8,1.021,16,0.869,18,0.458,19,0.01,20,0.304,21,0.126,22,0.835,24,1.086,50,0.272,57,0.922,75,0.978,82,1.39,83,0.123,85,0.456,94,0.244,97,1.314,106,0.114,109,2.196,114,0.688,118,1.338,130,1.618,155,0.609,163,0.713,164,0.534,165,0.508,177,2.776,178,0.65,187,0.5,196,0.978,201,0.978,209,2.002,213,0.882,222,1.827,227,0.473,240,0.839,258,1.172,265,0.8,281,1.293,317,0.005,318,0.005,319,0.114,346,2.127,381,0.78,384,1.968,392,1.951,393,1.736,400,1.574,424,0.672,427,1.037,453,0.953,464,1.974,468,1.346,469,1.867,480,1.06,483,3.865,538,2.063,576,1.612,596,2.821,607,1.575,701,2.626,775,1.188,874,1.346,896,0.741,914,1.812,936,3.581,937,1.439,938,2.76,939,2.257,940,3.755,941,3.76,942,3.326,943,3.76,944,3.76,945,3.326,946,3.772,947,3.997,948,3.326,949,3.647,950,3.282,952,4.337,954,3.931,960,2.052,961,2.08,962,3.089,963,2.98,964,3.39,965,2.908,966,3.326,970,3.591,971,1.491,972,1.491,973,1.491,974,1.491,975,1.491,976,1.439,977,1.344,978,3.474,979,1.344,980,1.81,981,3.288,982,2.196,983,2.196,984,2.613,985,1.344,986,1.302,987,1.987,988,2.76,989,2.76,990,1.491,991,2.76,992,2.276,993,2.76,994,1.491,995,1.491,996,3.089,997,1.491,998,2.76,999,2.276,1000,1.491,1001,1.491,1002,1.491,1003,1.491,1004,3.326,1005,2.276,1006,1.491,1007,1.491,1008,2.276,1009,1.491,1010,1.491,1011,1.987,1012,1.812,1013,1.491,1014,1.439,1015,1.491,1016,3.326,1017,3.931,1018,2.276,1019,4.054,1020,3.997,1021,3.326,1022,2.276,1023,2.276,1024,3.089,1025,3.089,1026,3.089,1027,2.696,1028,3.089,1029,3.089,1030,3.183,1031,1.491,1032,1.491,1033,2.76,1034,3.089,1035,2.76,1036,1.987,1037,1.491,1038,1.491,1039,1.344,1040,1.491,1041,1.439,1042,1.491,1043,1.491,1044,0.863,1045,1.491,1046,1.491,1047,3.282,1048,2.98,1049,1.923,1050,3.647,1051,4.185,1052,3.089,1053,2.276,1054,2.276,1055,3.089,1056,2.409,1057,1.491,1058,1.491,1059,1.491,1060,1.302,1061,1.491,1062,2.276,1063,2.276,1064,2.276,1065,2.276,1066,2.276,1067,2.276,1068,1.491,1069,1.491,1070,1.491,1071,1.491,1072,1.987,1073,1.032,1074,3.089,1075,1.491,1076,1.491,1077,1.439,1078,0.759,1079,1.439,1080,2.76,1081,2.276,1082,2.276,1083,3.089,1084,3.089,1085,2.276,1086,2.276,1087,2.276,1088,3.506,1089,2.276,1090,3.506,1091,1.491,1092,2.276,1093,2.276,1094,2.276,1095,3.544,1096,3.326,1097,3.506,1098,1.439,1099,1.491,1100,2.276,1101,3.647,1102,2.276,1103,3.506,1104,3.853,1105,2.276,1106,3.089,1107,3.76,1108,2.276,1109,1.711,1110,2.276,1111,2.276,1112,2.276,1113,2.196,1114,1.827,1115,2.276,1116,2.276,1117,2.276,1118,2.276,1119,2.76,1120,2.276,1121,2.76,1122,1.491,1123,3.06,1124,1.491,1125,1.491,1126,1.491,1127,1.491,1128,1.491,1129,1.344,1130,2.488,1131,1.491,1132,2.276,1133,2.276,1134,2.276,1135,2.276,1136,2.276,1137,2.276,1138,2.276,1139,2.276,1140,2.276,1141,1.261,1142,2.052,1143,1.261,1144,1.344,1145,1.188,1146,1.491,1147,1.302,1148,1.491,1149,1.302,1150,1.491,1151,1.491,1152,1.491,1153,1.491,1154,1.491,1155,1.491,1156,1.491,1157,1.987,1158,0.978,1159,0.928,1160,2.276,1161,2.196,1162,1.302,1163,1.491,1164,1.491,1165,1.491,1166,1.223,1167,1.491,1168,1.491,1169,0.978,1170,1.491,1171,1.491,1172,1.491,1173,2.276,1174,1.491,1223,3.603,1224,2.939,1225,2.939,1226,2.939,1227,2.939,1228,2.939,1229,2.939,1230,2.939,1231,2.939,1232,2.939,1233,2.939,1234,2.939]],["title/classes/DBTwoWayArray.html",[0,0.174,1149,1.934]],["body/classes/DBTwoWayArray.html",[0,0.323,2,0.862,3,0.046,4,0.039,5,0.033,7,0.039,8,0.99,16,0.903,18,0.746,19,0.01,20,0.383,21,0.128,22,1.001,24,1.41,50,0.264,57,0.733,75,0.932,82,1.369,83,0.122,85,0.485,94,0.248,97,1.297,106,0.11,109,2.313,114,0.656,118,1.578,130,2.141,154,0.741,155,0.58,163,0.698,164,0.514,165,0.497,177,2.743,178,0.765,187,0.497,196,0.932,201,0.932,202,0.305,209,1.976,213,1.297,222,1.781,227,0.451,240,0.799,258,1.32,265,0.792,281,1.265,317,0.005,318,0.005,319,0.11,323,1.671,346,2.175,381,0.757,384,1.925,392,1.918,393,1.711,400,1.54,424,0.64,427,0.992,453,0.908,464,1.924,468,1.781,469,1.799,480,1.559,483,3.827,538,2.128,576,1.572,596,2.938,607,1.853,701,2.642,775,1.131,874,1.781,896,0.706,914,1.746,936,3.619,937,1.37,938,3.011,939,2.201,940,3.316,941,3.439,942,2.678,943,3.439,944,3.439,945,3.254,946,3.77,947,3.949,948,2.193,949,3.439,950,3.002,952,3.871,954,3.799,961,2.028,962,3.011,963,2.905,964,3.425,965,3.001,966,3.254,970,3.541,971,1.42,972,1.42,973,1.42,974,1.42,975,1.42,976,1.37,977,1.28,978,3.425,979,1.28,980,1.756,981,3.337,982,2.115,983,2.115,984,2.547,985,1.28,986,1.24,987,1.914,988,2.678,989,2.678,990,1.42,991,2.678,992,2.193,993,2.678,994,1.42,995,1.42,996,3.011,997,1.42,998,2.678,999,2.193,1000,1.42,1001,1.42,1002,1.42,1003,1.42,1004,3.289,1005,2.193,1006,1.42,1007,1.42,1008,2.193,1009,1.42,1010,1.42,1011,1.914,1012,1.746,1013,1.42,1014,1.37,1015,1.42,1016,3.254,1017,3.88,1018,2.193,1019,4.009,1020,3.949,1021,3.254,1022,2.193,1023,2.193,1024,3.011,1025,3.011,1026,3.011,1027,2.628,1028,3.011,1029,3.011,1030,3.129,1031,1.42,1032,1.42,1033,2.678,1034,2.678,1035,2.678,1036,1.914,1037,1.42,1038,1.42,1039,1.28,1040,1.42,1041,1.37,1042,1.42,1043,1.42,1044,0.831,1045,1.42,1046,1.42,1047,3.544,1048,3.81,1049,2.141,1050,3.88,1051,4.269,1052,3.254,1053,2.193,1054,2.193,1055,3.011,1056,2.337,1057,1.42,1058,1.42,1059,1.42,1060,1.24,1061,1.42,1062,2.193,1063,2.678,1064,2.193,1065,2.193,1066,2.193,1067,2.193,1068,2.193,1069,1.42,1070,3.011,1071,1.42,1072,1.914,1073,0.983,1074,3.254,1075,1.42,1076,1.42,1077,1.37,1078,0.723,1079,1.37,1080,2.678,1081,2.193,1082,2.193,1083,3.011,1084,3.011,1085,2.193,1086,2.193,1087,2.193,1088,3.439,1089,2.193,1090,3.439,1091,1.42,1092,2.193,1093,2.193,1094,2.193,1095,3.498,1096,3.254,1097,3.439,1098,1.37,1099,1.42,1100,2.193,1101,3.584,1102,2.193,1103,3.439,1104,3.799,1105,2.193,1106,3.011,1107,3.702,1108,2.678,1109,2.013,1110,2.678,1111,2.678,1112,2.678,1113,2.583,1114,1.925,1115,2.678,1116,2.193,1117,2.193,1118,2.193,1119,3.439,1120,2.193,1121,3.011,1122,1.42,1123,3.129,1124,1.42,1125,1.42,1126,1.42,1127,1.42,1128,1.42,1129,1.28,1130,2.414,1131,1.42,1132,2.193,1133,2.193,1134,2.678,1135,2.193,1136,2.193,1137,3.011,1138,2.193,1139,2.678,1140,2.193,1141,1.855,1142,2.414,1143,1.855,1144,1.977,1145,1.746,1146,2.193,1147,1.914,1148,2.193,1149,1.914,1150,2.193,1151,1.42,1152,1.42,1153,1.42,1154,3.011,1155,1.42,1156,1.42,1157,1.914,1158,0.932,1159,0.884,1160,2.193,1161,2.115,1162,1.24,1163,1.42,1164,1.42,1165,1.42,1166,1.165,1167,1.42,1168,1.42,1169,0.932,1170,1.42,1171,1.42,1172,1.42,1173,2.193,1174,1.42,1175,3.471,1176,3.808,1177,3.218,1178,3.218,1189,2.248,1190,2.248,1235,4.321,1236,3.808,1237,3.808,1238,4.321,1239,2.799,1240,2.799,1241,2.799,1242,2.799,1243,2.799,1244,2.799,1245,2.799,1246,2.799,1247,2.799,1248,2.799,1249,2.799,1250,2.799,1251,2.467]],["title/classes/DBWriteBuffer.html",[0,0.174,1041,2.138]],["body/classes/DBWriteBuffer.html",[0,0.325,2,0.901,3,0.048,4,0.041,5,0.035,7,0.041,8,1.018,16,0.868,18,0.457,19,0.01,20,0.304,21,0.128,22,0.833,24,0.968,50,0.271,57,0.92,75,0.974,82,1.388,83,0.123,85,0.456,94,0.243,97,1.312,106,0.114,109,2.191,114,0.685,118,1.335,130,1.612,155,0.606,163,0.712,164,0.532,165,0.507,177,2.774,178,0.648,187,0.5,196,0.974,201,1.488,202,0.318,209,2,213,0.878,222,1.823,227,0.471,240,0.835,258,1.109,265,0.8,281,1.29,317,0.005,318,0.005,319,0.114,346,2.124,381,0.779,384,1.964,392,1.948,393,1.734,400,1.571,424,0.669,427,1.036,453,0.948,464,1.969,468,1.342,469,1.861,480,1.055,483,3.861,538,2.06,576,1.609,596,2.816,607,1.569,701,2.643,775,1.182,874,1.342,896,0.738,914,1.806,936,3.578,937,1.432,938,2.752,939,2.252,940,3.73,941,3.755,942,3.319,943,3.755,944,3.755,945,3.319,946,3.769,947,3.993,948,2.268,949,3.641,950,3.277,952,4.494,954,3.993,960,2.042,961,2.075,962,3.081,963,2.973,964,3.385,965,2.904,966,3.319,970,3.587,971,1.484,972,1.484,973,1.484,974,1.484,975,1.484,976,1.432,977,1.338,978,3.469,979,1.338,980,1.805,981,3.282,982,2.188,983,2.188,984,2.607,985,1.338,986,1.296,987,1.98,988,2.752,989,2.752,990,1.484,991,2.752,992,2.268,993,2.752,994,1.484,995,1.484,996,3.081,997,1.484,998,2.752,999,2.268,1000,1.484,1001,1.484,1002,1.484,1003,1.484,1004,3.323,1005,2.268,1006,1.484,1007,1.484,1008,2.268,1009,1.484,1010,1.484,1011,1.98,1012,1.806,1013,1.484,1014,1.432,1015,1.484,1016,3.319,1017,3.926,1018,2.268,1019,4.05,1020,3.993,1021,3.319,1022,2.268,1023,2.268,1024,3.081,1025,3.081,1026,3.081,1027,2.69,1028,3.081,1029,3.081,1030,3.485,1031,1.484,1032,1.484,1033,3.319,1034,3.081,1035,2.752,1036,2.402,1037,2.268,1038,2.268,1039,2.045,1040,2.268,1041,2.188,1042,1.484,1043,1.484,1044,0.86,1045,1.484,1046,1.484,1047,3.178,1048,2.973,1049,1.918,1050,3.641,1051,4.181,1052,3.081,1053,2.268,1054,2.268,1055,3.081,1056,2.402,1057,1.484,1058,1.484,1059,1.484,1060,1.296,1061,1.484,1062,2.268,1063,2.268,1064,2.268,1065,2.268,1066,2.268,1067,2.268,1068,1.484,1069,1.484,1070,1.484,1071,1.484,1072,1.98,1073,1.027,1074,3.081,1075,1.484,1076,1.484,1077,1.432,1078,0.756,1079,1.432,1080,2.752,1081,2.268,1082,2.268,1083,3.081,1084,3.081,1085,2.268,1086,2.268,1087,2.268,1088,3.5,1089,2.268,1090,3.5,1091,1.484,1092,2.268,1093,2.268,1094,2.268,1095,3.539,1096,3.319,1097,3.5,1098,1.432,1099,1.484,1100,2.268,1101,3.641,1102,2.268,1103,3.5,1104,3.848,1105,2.268,1106,3.081,1107,3.755,1108,2.268,1109,1.705,1110,2.268,1111,2.268,1112,2.268,1113,2.188,1114,1.823,1115,2.268,1116,2.268,1117,2.268,1118,2.268,1119,2.752,1120,2.268,1121,2.752,1122,1.484,1123,3.055,1124,1.484,1125,1.484,1126,1.484,1127,1.484,1128,1.484,1129,1.338,1130,2.481,1131,1.484,1132,2.268,1133,2.268,1134,2.268,1135,2.268,1136,2.268,1137,2.268,1138,2.268,1139,2.268,1140,2.268,1141,1.256,1142,2.045,1143,1.256,1144,1.338,1145,1.182,1146,1.484,1147,1.296,1148,1.484,1149,1.296,1150,1.484,1151,1.484,1152,1.484,1153,1.484,1154,1.484,1155,1.484,1156,1.484,1157,1.98,1158,0.974,1159,0.924,1160,2.268,1161,2.188,1162,1.296,1163,1.484,1164,1.484,1165,1.484,1166,1.218,1167,1.484,1168,1.484,1169,0.974,1170,1.484,1171,1.484,1172,1.484,1173,2.268,1174,1.484,1223,3.59,1252,2.926,1253,2.926,1254,2.926,1255,2.926,1256,2.926,1257,2.926,1258,2.578,1259,2.578,1260,2.926,1261,2.578,1262,2.578]],["title/classes/DBWriter.html",[0,0.174,1030,1.934]],["body/classes/DBWriter.html",[0,0.326,2,0.903,3,0.048,4,0.041,5,0.035,7,0.041,8,1.019,16,0.869,18,0.458,19,0.01,20,0.304,21,0.128,22,0.834,24,0.969,50,0.272,57,0.921,75,0.976,82,1.389,83,0.123,85,0.456,94,0.244,97,1.313,106,0.114,109,2.193,114,0.687,118,1.336,130,1.615,155,0.608,163,0.712,164,0.533,165,0.508,177,2.775,178,0.649,187,0.5,196,0.976,201,0.976,202,0.319,209,2.001,213,0.88,222,1.825,227,0.472,240,0.837,258,1.111,265,0.8,281,1.292,317,0.005,318,0.005,319,0.114,346,2.126,381,0.779,384,1.966,392,2.011,393,1.735,400,1.572,424,0.67,427,1.036,453,0.951,464,2.123,468,1.344,469,1.864,480,1.058,483,3.863,538,2.061,576,1.61,596,2.818,607,1.572,701,2.625,775,1.185,874,1.344,896,0.739,914,1.809,936,3.58,937,1.435,938,2.756,939,2.255,940,3.753,941,3.757,942,3.323,943,3.757,944,3.757,945,3.323,946,3.771,947,3.995,948,2.272,949,3.644,950,3.28,952,4.334,954,3.995,960,2.047,961,2.078,962,3.085,963,2.976,964,3.387,965,2.906,966,3.323,970,3.589,971,1.488,972,1.488,973,1.488,974,1.488,975,1.488,976,1.435,977,1.341,978,3.542,979,1.341,980,1.808,981,3.285,982,2.192,983,2.192,984,2.61,985,1.341,986,1.299,987,1.983,988,2.756,989,2.756,990,1.488,991,2.756,992,2.272,993,2.756,994,1.488,995,1.488,996,3.085,997,1.488,998,2.756,999,2.272,1000,1.488,1001,1.488,1002,1.488,1003,1.488,1004,3.365,1005,2.272,1006,1.488,1007,1.488,1008,2.272,1009,1.488,1010,1.488,1011,1.983,1012,1.809,1013,1.488,1014,1.435,1015,1.488,1016,3.323,1017,3.929,1018,2.272,1019,4.052,1020,3.995,1021,3.323,1022,2.272,1023,2.272,1024,3.085,1025,3.085,1026,3.085,1027,2.693,1028,3.085,1029,3.085,1030,3.28,1031,1.488,1032,2.272,1033,3.323,1034,3.085,1035,2.756,1036,1.983,1037,1.488,1038,1.488,1039,1.341,1040,1.488,1041,1.435,1042,1.488,1043,1.488,1044,0.861,1045,1.488,1046,1.488,1047,3.181,1048,2.976,1049,1.921,1050,3.644,1051,4.183,1052,3.085,1053,2.272,1054,2.272,1055,3.085,1056,2.406,1057,1.488,1058,1.488,1059,1.488,1060,1.299,1061,1.488,1062,2.272,1063,2.272,1064,2.272,1065,2.272,1066,2.272,1067,2.272,1068,1.488,1069,1.488,1070,1.488,1071,1.488,1072,1.983,1073,1.029,1074,3.085,1075,1.488,1076,1.488,1077,1.435,1078,0.758,1079,1.435,1080,2.756,1081,2.272,1082,2.272,1083,3.085,1084,3.085,1085,2.272,1086,2.272,1087,2.272,1088,3.503,1089,2.272,1090,3.503,1091,1.488,1092,2.272,1093,2.272,1094,2.272,1095,3.542,1096,3.323,1097,3.503,1098,1.435,1099,1.488,1100,2.272,1101,3.644,1102,2.272,1103,3.503,1104,3.851,1105,2.272,1106,3.085,1107,3.757,1108,2.272,1109,1.708,1110,2.272,1111,2.272,1112,2.272,1113,2.192,1114,1.825,1115,2.272,1116,2.272,1117,2.272,1118,2.272,1119,2.756,1120,2.272,1121,2.756,1122,1.488,1123,3.058,1124,1.488,1125,1.488,1126,1.488,1127,1.488,1128,1.488,1129,1.341,1130,2.485,1131,1.488,1132,2.272,1133,2.272,1134,2.272,1135,2.272,1136,2.272,1137,2.272,1138,2.272,1139,2.272,1140,2.272,1141,1.259,1142,2.048,1143,1.259,1144,1.341,1145,1.185,1146,1.488,1147,1.299,1148,1.488,1149,1.299,1150,1.488,1151,1.488,1152,1.488,1153,1.488,1154,1.488,1155,1.488,1156,1.488,1157,1.983,1158,0.976,1159,0.926,1160,2.272,1161,2.192,1162,1.299,1163,1.488,1164,1.488,1165,1.488,1166,1.221,1167,1.488,1168,1.488,1169,0.976,1170,1.488,1171,1.488,1172,1.488,1173,2.272,1174,1.488,1223,3.596,1258,2.584,1259,2.584,1261,2.584,1262,2.584,1263,2.932,1264,2.932,1265,2.932,1266,2.932,1267,2.932,1268,2.932,1269,2.932]],["title/classes/DBWriterArray.html",[0,0.174,1270,3.848]],["body/classes/DBWriterArray.html",[0,0.326,2,0.903,3,0.048,4,0.041,5,0.035,7,0.041,8,1.02,16,0.857,18,0.706,19,0.01,20,0.371,21,0.106,22,0.947,24,1.282,50,0.272,57,0.76,75,0.977,82,1.296,83,0.123,85,0.463,94,0.241,97,1.313,106,0.114,109,2.194,114,0.687,118,1.612,130,1.616,155,0.608,163,0.713,164,0.533,165,0.508,177,2.748,178,0.649,187,0.496,196,0.977,201,0.977,209,2.001,213,0.881,222,1.826,227,0.473,240,0.837,258,1.218,265,0.8,281,1.292,317,0.005,318,0.005,319,0.114,346,2.212,381,0.766,384,1.966,392,1.95,393,1.735,400,1.573,424,0.671,427,1.005,453,0.951,464,1.972,468,1.345,469,1.865,480,1.058,483,3.863,538,2.156,576,1.611,596,2.819,607,1.573,701,2.626,775,1.186,874,1.345,896,0.74,914,1.81,936,3.58,937,1.436,938,2.758,939,2.256,940,3.362,941,3.504,942,2.758,943,3.504,944,3.504,945,2.758,946,3.653,947,3.758,948,2.273,949,3.504,950,3.058,952,3.944,954,3.851,961,1.857,962,2.758,963,2.66,964,3.286,965,2.819,966,3.086,970,3.59,971,1.489,972,1.489,973,1.489,974,1.489,975,1.489,976,1.436,977,1.342,978,3.472,979,1.342,980,1.809,981,3.388,982,2.193,983,2.193,984,2.611,985,1.342,986,1.3,987,1.984,988,2.758,989,2.758,990,1.489,991,2.758,992,2.273,993,2.758,994,1.489,995,1.489,996,3.086,997,1.489,998,2.758,999,2.273,1000,1.489,1001,1.489,1002,1.489,1003,1.489,1004,3.325,1005,2.273,1006,1.489,1007,1.489,1008,2.273,1009,1.489,1010,1.489,1011,1.984,1012,1.81,1013,1.489,1014,1.436,1015,1.489,1016,3.324,1017,3.929,1018,2.273,1019,4.052,1020,3.996,1021,3.324,1022,2.273,1023,2.273,1024,3.086,1025,3.086,1026,3.086,1027,2.694,1028,3.086,1029,3.086,1030,3.362,1031,1.489,1032,1.489,1033,2.758,1034,2.758,1035,2.758,1036,1.984,1037,1.489,1038,1.489,1039,1.342,1040,1.489,1041,1.436,1042,1.489,1043,1.489,1044,0.862,1045,1.489,1046,1.489,1047,3.181,1048,3.855,1049,2.182,1050,3.929,1051,4.3,1052,3.324,1053,2.273,1054,2.273,1055,3.086,1056,2.407,1057,1.489,1058,1.489,1059,1.489,1060,1.3,1061,1.489,1062,2.273,1063,2.758,1064,2.273,1065,2.273,1066,2.273,1067,2.273,1068,2.273,1069,1.489,1070,3.086,1071,1.489,1072,1.984,1073,1.03,1074,3.086,1075,1.489,1076,1.489,1077,1.436,1078,0.758,1079,1.436,1080,2.758,1081,2.273,1082,2.273,1083,3.086,1084,3.086,1085,2.273,1086,2.273,1087,2.273,1088,3.504,1089,2.273,1090,3.504,1091,1.489,1092,2.273,1093,2.273,1094,2.273,1095,3.542,1096,3.324,1097,3.504,1098,1.436,1099,1.489,1100,2.273,1101,3.645,1102,2.273,1103,3.504,1104,3.851,1105,2.273,1106,3.086,1107,3.758,1108,2.273,1109,1.709,1110,2.273,1111,2.273,1112,2.273,1113,2.193,1114,1.826,1115,2.273,1116,2.273,1117,2.273,1118,2.273,1119,3.504,1120,2.273,1121,3.086,1122,1.489,1123,3.181,1124,1.489,1125,1.489,1126,1.489,1127,1.489,1128,1.489,1129,1.342,1130,2.486,1131,1.489,1132,2.273,1133,2.273,1134,2.758,1135,2.273,1136,2.273,1137,3.086,1138,2.273,1139,2.758,1140,2.273,1141,1.259,1142,2.049,1143,1.259,1144,1.342,1145,1.186,1146,1.489,1147,1.3,1148,1.489,1149,1.3,1150,1.489,1151,1.489,1152,1.489,1153,1.489,1154,1.489,1155,1.489,1156,1.489,1157,1.984,1158,0.977,1159,0.927,1160,2.273,1161,2.193,1162,1.3,1163,1.489,1164,1.489,1165,1.489,1166,1.222,1167,1.489,1168,1.489,1169,0.977,1170,1.489,1171,1.489,1172,1.489,1173,2.273,1174,1.489,1175,3.598,1177,3.337,1178,3.337,1189,2.357,1190,2.357,1236,3.949,1237,3.949,1251,2.586,1270,2.586,1271,2.934,1272,2.934,1273,2.934,1274,2.934,1275,2.934,1276,2.934,1277,2.934,1278,2.934]],["title/interfaces/DensityUnits.html",[106,0.111,1279,2.879]],["body/interfaces/DensityUnits.html",[3,0.106,4,0.092,5,0.077,7,0.092,19,0.01,21,0.126,83,0.141,85,0.379,94,0.197,106,0.221,165,0.674,178,1.307,187,0.532,200,2.498,317,0.008,318,0.008,319,0.197,337,1.168,381,0.766,893,2.51,896,1.651,913,3.74,1279,5.105,1280,4.572,1281,5.386,1282,4.318,1283,4.318,1284,4.318,1285,4.572,1286,4.572,1287,4.572,1288,3.74,1289,4.1,1290,4.318,1291,4.572,1292,3.45,1293,3.74,1294,4.572,1295,4.572,1296,4.242,1297,5.405,1298,3.323,1299,4.572,1300,4.708,1301,4.318]],["title/interfaces/DesignActions.html",[106,0.111,1302,3.848]],["body/interfaces/DesignActions.html",[0,0.134,3,0.055,4,0.047,5,0.04,7,0.069,19,0.01,21,0.096,24,1.238,50,0.425,51,0.841,52,0.73,63,1.103,81,1.557,82,0.629,83,0.055,86,2.043,88,2.838,94,0.241,97,1.483,106,0.085,114,0.786,115,2.013,128,1.486,163,0.925,164,0.918,165,0.538,178,1.141,187,0.456,206,1.535,216,2.629,228,1.535,240,1.856,265,0.862,281,1.638,317,0.005,318,0.005,319,0.126,336,2.71,337,0.599,341,1.088,342,1.397,343,1.916,344,1.317,345,3.685,346,2.236,347,3.655,348,2.776,350,1.312,351,2.1,355,1.599,366,3.427,372,2.499,373,2.499,381,0.763,384,1.768,388,2.003,391,2.499,392,1.599,393,1.831,398,3.688,424,1.133,427,0.764,430,0.867,444,1.44,467,2.412,489,3.102,523,2.343,524,1.356,539,1.28,557,1.642,577,2.266,604,1.702,640,1.027,642,1.244,646,1.64,648,2.127,649,1.44,650,1.397,652,1.535,654,1.535,658,2.957,669,2.1,670,1.44,671,4.387,675,3.211,677,3.459,686,2.499,688,1.486,696,5.07,706,2.38,707,1.356,714,4.731,724,2.1,730,2.342,731,2.957,750,2.957,773,2.1,775,2.002,777,2.063,814,6.401,815,6.401,818,5.192,820,4.366,830,5.971,831,2.61,833,2.695,834,2.266,835,2.127,836,2.695,838,3.884,845,1.397,892,1.317,893,1.088,899,3.364,906,2.1,920,2.958,980,2.764,1044,0.645,1078,1.522,1114,1.007,1158,1.117,1166,1.397,1281,3.884,1292,1.767,1296,3.564,1302,4.366,1303,3.355,1304,2.499,1305,3.355,1306,2.695,1307,3.355,1308,3.355,1309,3.355,1310,3.802,1311,2.342,1312,2.266,1313,3.459,1314,2.957,1315,3.979,1316,3.355,1317,2.695,1318,2.957,1319,1.916,1320,2.342,1321,4.955,1322,3.355,1323,3.459,1324,2.695,1325,3.979,1326,3.459,1327,2.342,1328,2.957,1329,2.957,1330,4.366,1331,2.957,1332,3.979,1333,2.695,1334,3.355,1335,2.957,1336,4.366,1337,2.958,1338,3.355,1339,3.355,1340,2.1,1341,2.499,1342,4.366,1343,2.957,1344,4.366,1345,3.547,1346,2.957,1347,2.499,1348,4.955,1349,3.355,1350,3.355,1351,3.355,1352,4.955,1353,3.355,1354,3.355,1355,3.355,1356,3.355,1357,3.355,1358,3.355,1359,3.355,1360,3.355,1361,3.355,1362,2.957,1363,3.355,1364,3.355,1365,3.355,1366,3.355,1367,3.355,1368,3.355,1369,3.355,1370,1.587,1371,3.355,1372,2.499,1373,2.957,1374,2.342,1375,2.695,1376,3.355,1377,3.355,1378,3.355,1379,3.355,1380,3.355,1381,2.957,1382,3.267,1383,3.69,1384,2.957,1385,3.355,1386,2.695,1387,2.695,1388,3.355,1389,3.355,1390,2.957,1391,3.355,1392,4.955,1393,3.355,1394,3.355,1395,3.267,1396,3.355,1397,3.355,1398,2.957,1399,3.355,1400,3.355,1401,3.355,1402,2.695,1403,1.767,1404,2.343,1405,2.499,1406,2.499,1407,2.1,1408,2.957,1409,3.355,1410,2.499,1411,2.499,1412,2.957,1413,3.355,1414,3.355,1415,4.955,1416,6.94,1417,3.355,1418,3.355,1419,3.355,1420,3.355,1421,3.355,1422,3.355,1423,3.355,1424,3.355,1425,3.355,1426,6.505,1427,3.355,1428,3.355,1429,7.159,1430,4.366,1431,4.366,1432,4.955,1433,7.712,1434,5.384,1435,2.957,1436,3.355,1437,3.69,1438,4.366,1439,3.355,1440,2.957,1441,4.112,1442,2.957,1443,4.112,1444,2.695,1445,3.355,1446,3.355,1447,3.355,1448,3.355,1449,3.355,1450,2.83,1451,3.459,1452,4.366,1453,4.366,1454,3.521,1455,3.979,1456,5.192,1457,3.102,1458,4.366,1459,3.102,1460,3.979,1461,3.355,1462,2.957,1463,4.366,1464,2.1,1465,3.355,1466,3.355,1467,2.957,1468,2.957,1469,3.355,1470,3.355,1471,4.366,1472,4.366,1473,2.003,1474,1.767,1475,3.355,1476,3.355,1477,3.355,1478,3.355,1479,3.355,1480,3.355,1481,5.891,1482,6.94,1483,4.955,1484,5.891,1485,3.355,1486,3.355,1487,3.355,1488,3.355,1489,3.355,1490,3.355,1491,3.355,1492,3.355,1493,3.355,1494,3.355,1495,4.955,1496,5.891,1497,5.733,1498,5.891,1499,3.355,1500,3.355,1501,3.355,1502,4.955,1503,4.955,1504,3.355,1505,3.355,1506,3.355,1507,3.355,1508,3.355,1509,2.957,1510,5.891,1511,3.355,1512,2.342,1513,3.355,1514,3.355,1515,3.355,1516,3.355,1517,3.355,1518,3.355,1519,3.355,1520,3.355,1521,3.355,1522,3.355,1523,3.355,1524,3.355,1525,3.355,1526,3.355,1527,3.459,1528,4.955,1529,4.366,1530,4.955,1531,4.955,1532,4.955,1533,4.955,1534,2.83,1535,4.955,1536,4.955,1537,6.505,1538,3.355,1539,5.891,1540,6.505,1541,5.891,1542,6.505,1543,6.505,1544,3.355,1545,6.505,1546,3.355,1547,5.891,1548,3.355,1549,3.355,1550,3.355,1551,3.355,1552,2.499,1553,3.355,1554,1.767,1555,3.355,1556,4.366,1557,3.355,1558,1.767,1559,3.355,1560,5.192,1561,3.355,1562,1.767,1563,3.355,1564,2.212,1565,2.695,1566,2.342,1567,3.355,1568,3.355,1569,3.355,1570,3.355,1571,3.355,1572,3.355,1573,3.355,1574,3.355,1575,3.355,1576,3.355,1577,3.355,1578,3.355,1579,1.767,1580,2.212,1581,3.355,1582,3.688,1583,3.355,1584,2.499,1585,3.355,1586,2.499,1587,3.355,1588,2.1,1589,3.355,1590,2.499,1591,3.355,1592,2.499,1593,3.355,1594,2.499,1595,3.355,1596,2.499,1597,3.355,1598,3.355,1599,3.355]],["title/interfaces/DesignMode.html",[106,0.111,1301,2.879]],["body/interfaces/DesignMode.html",[3,0.104,4,0.089,5,0.075,7,0.089,19,0.01,21,0.14,83,0.14,85,0.472,94,0.192,106,0.219,165,0.669,178,1.302,187,0.533,200,2.432,202,0.694,317,0.008,318,0.008,319,0.194,337,1.138,381,0.836,893,2.642,896,1.921,913,4.352,1279,4.204,1280,4.451,1281,5.364,1282,4.204,1283,4.204,1284,4.204,1285,5.32,1286,5.32,1287,5.32,1288,4.352,1289,4.771,1290,5.024,1291,5.32,1292,3.359,1293,3.642,1294,4.451,1295,4.451,1296,4.729,1297,6.026,1298,3.235,1299,4.451,1300,5.004,1301,5.024]],["title/interfaces/DraftMap.html",[106,0.111,1311,3.049]],["body/interfaces/DraftMap.html",[3,0.09,4,0.078,5,0.065,7,0.078,16,0.603,19,0.01,20,0.383,21,0.125,50,0.277,51,0.903,63,0.94,69,1.843,83,0.135,85,0.491,94,0.272,97,0.94,106,0.204,163,0.875,164,0.832,165,0.699,178,1.11,183,1.622,187,0.405,202,0.603,207,1.946,229,2.114,270,1.884,273,3.56,317,0.007,318,0.007,319,0.178,337,0.989,341,1.797,348,1.894,355,1.505,358,3.166,366,4.035,381,0.549,400,1.679,427,0.994,462,2.536,489,3.47,564,3.037,604,2.813,607,1.946,640,1.667,642,2.593,834,3.199,835,3.001,838,3.309,889,3.037,892,3.255,893,2.484,896,1.931,899,4.595,918,3.68,919,3.47,1004,2.911,1073,2.455,1078,1.432,1109,2.667,1310,3.037,1311,4.882,1340,5.037,1395,4.611,1474,3.684,1584,5.208,1586,5.208,1588,5.536,1590,5.208,1592,5.208,1594,5.208,1596,5.208,1600,4.128,1601,3.423,1602,5.616,1603,6.461,1604,3.001,1605,3.831,1606,3.655,1607,3.87,1608,3.655,1609,4.452,1610,2.92,1611,3.037,1612,4.128,1613,4.452,1614,4.128,1615,3.47,1616,4.452,1617,4.452,1618,6.461,1619,6.461,1620,4.882,1621,3.307,1622,4.175,1623,5.616,1624,5.616,1625,5.208,1626,4.882,1627,5.616,1628,5.79,1629,5.616,1630,5.037,1631,5.616,1632,3.831,1633,4.452,1634,4.452,1635,4.452,1636,4.452,1637,4.452,1638,3.47,1639,4.128,1640,4.452,1641,4.128,1642,4.452,1643,4.128,1644,2.621]],["title/interfaces/DraftNodeProxy.html",[106,0.111,1645,2.3]],["body/interfaces/DraftNodeProxy.html",[3,0.083,4,0.071,5,0.06,7,0.071,16,0.554,18,0.521,19,0.01,20,0.39,21,0.144,50,0.404,51,0.894,57,1.124,61,2.05,63,1.124,67,1.799,69,1.109,73,1.478,74,2.553,81,1.056,82,0.956,83,0.144,85,0.521,91,2.39,94,0.27,100,1.845,106,0.222,155,1.373,165,0.699,183,1.492,187,0.521,202,0.554,207,2.05,230,1.35,270,1.194,317,0.007,318,0.007,319,0.168,336,2.812,337,0.909,339,1.89,341,1.652,348,1.742,355,2.399,381,0.8,400,1.224,402,2.685,424,1.683,427,1.075,441,1.845,535,1.194,539,3.297,640,1.526,646,2.05,675,2.759,688,2.935,701,2.829,735,3.687,893,1.652,894,3.244,896,1.285,961,2.516,1044,1.69,1049,2.093,1078,1.903,1158,1.696,1169,1.696,1312,3.566,1370,3.134,1403,4.257,1404,3.822,1554,3.491,1558,3.491,1562,3.491,1601,3.244,1604,2.188,1621,2.41,1645,3.491,1646,2.793,1647,3.631,1648,4.428,1649,4.428,1650,4.686,1651,2.586,1652,3.244,1653,2.586,1654,2.793,1655,2.793,1656,2.41,1657,3.631,1658,2.331,1659,2.793,1660,2.793,1661,2.331,1662,1.944,1663,2.685,1664,3.736,1665,2.685,1666,2.793,1667,2.793,1668,2.793,1669,2.685,1670,2.331,1671,2.41,1672,2.495,1673,2.793,1674,2.685,1675,3.879,1676,2.685,1677,2.685,1678,3.631,1679,2.41,1680,3.491,1681,4.428,1682,2.586,1683,2.685,1684,2.495,1685,2.793,1686,2.685,1687,2.685,1688,3.631,1689,2.685,1690,2.793,1691,2.793]],["title/interfaces/DraftOperationClassification.html",[106,0.111,1692,3.049]],["body/interfaces/DraftOperationClassification.html",[0,0.245,3,0.059,4,0.051,5,0.043,7,0.051,9,1.306,10,1.306,18,0.37,19,0.01,20,0.308,21,0.1,25,1.306,50,0.417,51,0.826,52,0.788,57,1.044,63,0.888,66,0.769,71,1.79,81,1.275,83,0.085,85,0.472,86,0.959,88,1.79,94,0.246,96,1.115,97,1.491,99,1.306,100,1.008,106,0.133,112,1.847,116,1.656,118,1.514,128,1.604,163,0.779,164,0.916,165,0.281,187,0.478,189,2.494,213,1.087,220,1.205,222,1.572,227,0.844,265,0.867,280,1.447,281,1.214,315,1.306,317,0.005,318,0.005,319,0.133,337,0.646,350,1.387,355,1.422,359,2.162,381,0.668,384,2.024,392,1.831,393,1.542,425,3.856,427,0.929,429,1.998,430,0.936,431,1.772,432,3.085,433,1.712,434,1.837,435,2.162,436,2.267,437,1.907,439,2.477,441,2.394,444,2.248,452,1.712,453,1.174,454,2.992,464,1.174,467,2.282,468,2.024,480,1.89,481,1.907,486,1.907,487,2.416,491,2.162,493,1.984,496,2.387,500,2.267,508,2.658,511,2.267,519,3.305,521,2.068,523,1.712,524,1.463,525,1.772,526,1.656,527,2.162,528,2.068,529,2.564,530,2.068,531,2.162,532,3.106,533,2.477,534,1.984,535,1.227,536,2.162,538,1.458,541,3.515,543,2.992,544,2.068,545,2.477,546,2.396,547,3.127,550,2.162,553,2.992,554,2.068,559,3.127,562,2.992,563,3.127,569,3.127,571,3.127,572,2.162,573,3.696,577,2.396,591,1.422,605,1.907,614,2.162,624,3.515,634,2.87,811,3.242,916,1.712,939,1.343,980,1.743,984,1.554,1012,1.463,1027,1.604,1044,0.697,1073,1.271,1114,1.087,1141,2.642,1159,1.144,1319,2.992,1337,3.127,1345,1.604,1434,2.528,1450,2.068,1454,1.837,1464,2.267,1473,2.162,1527,3.657,1564,2.387,1579,1.907,1582,3.28,1615,2.267,1644,2.477,1661,2.396,1692,3.657,1693,2.697,1694,4.593,1695,2.697,1696,2.697,1697,2.528,1698,2.387,1699,1.712,1700,2.697,1701,3.454,1702,2.697,1703,2.162,1704,2.267,1705,2.528,1706,2.697,1707,3.657,1708,3.901,1709,3.454,1710,2.162,1711,2.697,1712,2.697,1713,3.901,1714,2.267,1715,2.697,1716,2.267,1717,2.697,1718,2.697,1719,3.901,1720,2.528,1721,3.853,1722,2.697,1723,2.697,1724,2.697,1725,2.697,1726,3.454,1727,2.528,1728,2.697,1729,2.267,1730,2.697,1731,3.657,1732,2.697,1733,2.697,1734,2.697,1735,2.697,1736,2.528,1737,2.697,1738,2.528,1739,2.528,1740,2.528,1741,2.528,1742,2.387,1743,2.528,1744,2.697,1745,2.697,1746,4.709,1747,2.697,1748,3.657,1749,2.528,1750,5.73,1751,2.697,1752,2.697,1753,2.697,1754,3.657,1755,3.901,1756,3.657,1757,3.901,1758,2.528,1759,5.556,1760,3.901,1761,3.657,1762,3.901,1763,2.528,1764,2.697,1765,2.528,1766,2.528,1767,2.528,1768,2.528,1769,3.657,1770,2.528,1771,2.528,1772,2.267,1773,3.422,1774,2.528,1775,2.528,1776,2.697,1777,2.528,1778,2.528,1779,3.901,1780,2.528,1781,3.657,1782,2.697,1783,2.528,1784,2.528,1785,2.697,1786,2.697,1787,2.528,1788,2.528,1789,2.387,1790,2.697,1791,2.697,1792,2.697,1793,2.697,1794,2.267,1795,2.697,1796,1.907,1797,2.697,1798,3.853,1799,2.387,1800,2.697,1801,5.024,1802,2.528,1803,2.697,1804,2.697,1805,2.697,1806,2.697,1807,5.024,1808,4.584,1809,2.697,1810,2.528,1811,2.697,1812,2.697,1813,2.697,1814,2.697,1815,2.697,1816,3.901,1817,2.697,1818,3.901,1819,2.697,1820,3.901,1821,2.697,1822,3.901,1823,2.697,1824,3.901,1825,2.697,1826,2.697,1827,2.697,1828,2.697,1829,2.697,1830,3.657,1831,2.697,1832,2.697,1833,3.901,1834,2.697,1835,3.901,1836,2.697,1837,3.901,1838,2.697,1839,3.901,1840,2.697,1841,3.901,1842,2.697,1843,3.657,1844,2.697,1845,3.901,1846,2.697,1847,3.901,1848,2.697,1849,3.901,1850,2.697,1851,3.901,1852,2.697,1853,3.901,1854,3.901,1855,2.697,1856,2.697,1857,4.584,1858,3.696,1859,2.697,1860,2.528,1861,3.454,1862,4.719,1863,2.697,1864,2.697,1865,2.697,1866,2.387,1867,2.697,1868,2.697,1869,2.697,1870,2.697,1871,2.697,1872,3.901,1873,2.697,1874,2.697,1875,3.853,1876,2.697,1877,2.697,1878,2.697,1879,3.901,1880,2.697,1881,2.697,1882,2.162,1883,2.162,1884,2.697,1885,2.697,1886,2.697,1887,2.697,1888,2.697,1889,2.697,1890,3.901,1891,3.901,1892,3.901,1893,2.697,1894,2.697,1895,2.697,1896,2.697,1897,3.901,1898,2.697,1899,2.697,1900,2.697,1901,2.697,1902,2.697,1903,2.697,1904,2.697,1905,2.697,1906,2.697,1907,2.697,1908,2.697,1909,3.901,1910,2.697,1911,2.697,1912,3.127,1913,2.697,1914,2.697,1915,2.697,1916,2.697,1917,2.697,1918,2.267,1919,2.697,1920,2.697,1921,2.697,1922,2.697,1923,2.697,1924,2.697,1925,2.697,1926,2.697,1927,2.697,1928,2.697,1929,2.697,1930,2.697,1931,2.697,1932,2.697,1933,2.697,1934,2.697,1935,2.697,1936,2.697,1937,2.697,1938,2.697,1939,2.697,1940,2.697]],["title/components/DraftdetailComponent.html",[640,0.905,845,1.818]],["body/components/DraftdetailComponent.html",[0,0.142,3,0.058,4,0.05,5,0.042,7,0.05,8,0.971,16,0.97,18,0.684,19,0.01,20,0.412,21,0.14,22,0.918,24,1.521,50,0.423,51,0.876,52,0.775,63,1.135,69,0.775,82,0.668,83,0.058,85,0.206,86,1.37,94,0.184,97,1.298,114,1.212,154,0.943,161,2.882,165,0.276,178,0.516,187,0.43,191,1.184,202,0.387,212,3.525,227,0.573,229,1.973,230,1.37,258,1.377,265,0.734,280,0.719,297,2.532,317,0.005,318,0.005,319,0.131,342,1.482,344,3.229,350,1.883,351,4.189,355,2.315,381,0.512,392,1.655,393,1.183,398,2.228,401,3.137,427,0.791,430,0.92,441,1.697,450,2.616,467,3.254,479,4.983,523,3.619,524,1.438,535,0.834,557,2.532,576,1.772,591,0.966,640,1.473,641,1.438,642,1.918,643,1.683,644,1.628,645,1.683,646,1.862,648,2.616,649,3.779,650,3.665,652,2.366,654,2.366,669,4.189,670,2.872,677,4.671,706,1.438,707,1.438,713,2.835,724,2.228,730,2.485,775,1.438,777,2.154,835,1.528,840,2.033,841,1.683,842,1.482,843,1.683,844,1.683,845,2.786,846,1.683,847,1.528,848,1.683,849,1.528,850,1.683,851,1.576,852,1.683,853,1.528,854,1.683,855,1.528,856,1.683,857,1.683,858,1.528,859,1.683,860,1.528,861,1.683,862,1.528,863,1.683,864,1.576,865,1.683,866,1.528,867,1.683,868,1.482,869,1.683,870,1.528,871,1.683,872,1.683,873,1.528,874,1.068,875,1.683,876,1.528,877,1.482,878,1.482,879,1.683,880,1.576,881,1.357,882,1.683,885,3.239,890,3.411,891,1.95,897,3.089,904,3.411,916,1.683,965,2.392,976,2.532,1044,1.287,1078,1.729,1143,2.221,1145,2.09,1292,2.725,1298,1.806,1300,2.033,1304,2.651,1306,2.858,1312,2.788,1313,4.962,1314,3.137,1319,3.822,1320,2.485,1326,4.671,1327,2.485,1330,6.265,1331,3.137,1332,5.374,1333,2.858,1337,4.569,1340,3.239,1345,3.473,1374,5.178,1382,5.046,1402,4.895,1404,2.882,1405,2.651,1406,5.294,1408,5.372,1411,2.651,1412,6.265,1429,3.137,1430,3.137,1431,3.137,1441,2.485,1464,4.189,1471,5.372,1472,3.137,1474,3.211,1556,5.372,1582,2.228,1588,3.239,1622,3.089,1644,2.447,1662,2.711,1676,2.725,1796,3.525,1810,2.485,1860,3.612,1862,3.411,1941,3.559,1942,5.174,1943,4.255,1944,5.174,1945,6.691,1946,5.897,1947,3.612,1948,5.174,1949,6.095,1950,5.174,1951,7.108,1952,6.095,1953,7.416,1954,5.174,1955,7.653,1956,7.653,1957,6.691,1958,6.691,1959,6.691,1960,5.174,1961,6.691,1962,5.174,1963,3.137,1964,5.374,1965,6.691,1966,7.108,1967,5.174,1968,3.853,1969,5.174,1970,3.559,1971,3.559,1972,3.559,1973,3.853,1974,5.174,1975,5.174,1976,5.174,1977,3.559,1978,3.559,1979,3.559,1980,3.559,1981,3.559,1982,5.174,1983,6.691,1984,3.559,1985,3.559,1986,3.559,1987,5.174,1988,3.559,1989,3.559,1990,3.559,1991,3.559,1992,3.559,1993,3.559,1994,4.155,1995,5.174,1996,3.559,1997,3.559,1998,3.559,1999,3.559,2000,3.559,2001,3.559,2002,7.108,2003,2.228,2004,5.174,2005,3.559,2006,3.559,2007,2.485,2008,2.651,2009,3.559,2010,3.559,2011,3.559,2012,3.559,2013,2.858,2014,3.559,2015,3.559,2016,3.559,2017,2.651,2018,3.559,2019,3.559,2020,3.137,2021,3.559,2022,3.559,2023,3.559,2024,5.174,2025,3.559,2026,3.559,2027,3.559,2028,3.559,2029,3.137,2030,5.174,2031,6.691,2032,5.174,2033,3.559,2034,3.559,2035,3.559,2036,3.559,2037,3.559,2038,5.174,2039,3.559,2040,3.559,2041,3.559,2042,3.559,2043,3.137,2044,3.137,2045,3.559,2046,5.174,2047,3.559,2048,3.137,2049,3.559,2050,5.174,2051,3.559,2052,3.559,2053,3.559,2054,3.559,2055,3.559,2056,3.559,2057,3.559,2058,3.559,2059,3.559,2060,5.174,2061,5.174,2062,2.858,2063,3.559,2064,3.559,2065,2.485,2066,3.559,2067,3.559,2068,5.174,2069,2.651,2070,3.559,2071,3.559,2072,3.559,2073,4.559,2074,4.559,2075,4.155,2076,5.174,2077,5.174,2078,3.853,2079,5.174,2080,4.155,2081,5.174,2082,5.174,2083,5.174,2084,5.174,2085,5.174,2086,6.691,2087,5.174,2088,6.691,2089,6.691,2090,5.174,2091,5.174,2092,3.612,2093,5.174,2094,4.559,2095,3.559,2096,6.095,2097,3.913,2098,4.519,2099,4.031,2100,3.559,2101,2.858,2102,2.033,2103,3.559,2104,2.651,2105,2.858,2106,3.339,2107,3.559,2108,3.559,2109,2.858,2110,3.481,2111,4.255,2112,3.559,2113,2.858,2114,2.347,2115,2.485,2116,2.651,2117,2.725,2118,3.559,2119,1.95,2120,2.651,2121,2.651,2122,1.683,2123,3.559,2124,3.559,2125,3.559,2126,3.559,2127,2.485,2128,2.347,2129,2.651,2130,3.559]],["title/interfaces/DynamicOperation.html",[106,0.111,2131,2.607]],["body/interfaces/DynamicOperation.html",[3,0.058,4,0.05,5,0.042,7,0.085,9,1.28,10,1.28,11,1.623,12,1.623,13,1.623,18,0.622,19,0.01,20,0.429,21,0.138,22,0.487,23,2.149,25,1.28,50,0.334,51,0.602,52,0.772,53,1.353,54,1.523,57,1.423,58,1.571,60,3.144,61,2.314,63,1.482,66,1.746,69,1.809,71,2.73,72,2.215,73,1.834,81,1.535,82,0.666,83,0.135,85,0.528,86,0.94,94,0.214,96,2.412,99,2.41,100,1.86,101,3.497,102,2.783,103,2.783,106,0.188,108,1.571,112,2.131,115,2.283,118,0.873,119,1.28,132,2.877,134,2.533,154,1.367,156,1.433,163,0.904,164,0.724,165,0.687,187,0.502,188,3.705,189,2.631,190,1.523,193,2.611,194,2.441,195,1.678,196,1.181,197,1.392,198,1.678,199,1.678,200,2.32,201,1.718,202,0.727,203,1.678,206,2.361,207,2.062,209,1.334,220,1.181,225,3.705,228,1.623,229,1.353,265,0.881,270,0.831,280,1.68,298,3.279,315,1.28,317,0.005,318,0.005,319,0.131,337,0.633,341,1.15,427,0.46,441,1.693,481,2.719,520,2.441,525,1.737,526,3.497,529,2.978,539,3.135,545,3.159,557,1.737,565,2.026,567,3.988,574,3.081,586,2.948,587,3.282,596,2.026,604,2.619,607,1.245,646,1.86,712,2.221,713,1.944,831,2.719,892,2.388,1036,1.571,1078,0.917,1114,1.065,1166,2.533,1298,1.8,1407,2.221,1459,2.221,1605,1.944,1644,1.678,1656,2.441,1658,2.361,1670,1.623,1694,4.423,1710,3.081,1858,1.944,1943,2.477,2065,3.603,2117,1.869,2131,3.081,2132,2.339,2133,3.739,2134,4.956,2135,5.287,2136,3.844,2137,3.844,2138,3.844,2139,2.642,2140,2.642,2141,2.642,2142,2.477,2143,4.531,2144,2.642,2145,2.642,2146,2.339,2147,2.642,2148,2.642,2149,2.642,2150,2.642,2151,2.477,2152,3.844,2153,2.642,2154,2.026,2155,2.642,2156,2.477,2157,2.477,2158,4.531,2159,5.517,2160,5.517,2161,2.477,2162,4.531,2163,4.531,2164,4.531,2165,4.531,2166,2.642,2167,4.531,2168,2.642,2169,3.844,2170,3.844,2171,3.844,2172,3.844,2173,3.844,2174,6.346,2175,2.477,2176,2.642,2177,2.642,2178,2.642,2179,2.642,2180,2.642,2181,2.642,2182,2.642,2183,2.642,2184,2.477,2185,2.642,2186,2.477,2187,6.301,2188,2.642,2189,2.642,2190,2.642,2191,2.477,2192,2.642,2193,2.642,2194,2.642,2195,2.642,2196,2.642,2197,4.976,2198,2.642,2199,4.531,2200,2.642,2201,3.844,2202,5.835,2203,5.835,2204,5.835,2205,2.642,2206,5.287,2207,5.694,2208,3.844,2209,2.642,2210,4.976,2211,2.642,2212,3.844,2213,3.844,2214,3.844,2215,3.844,2216,3.844,2217,3.844,2218,3.844,2219,3.844,2220,3.844,2221,3.844,2222,4.976,2223,3.844,2224,3.844,2225,2.642,2226,3.844,2227,2.642,2228,2.642,2229,3.844,2230,3.844,2231,2.642,2232,2.642,2233,3.844,2234,2.642,2235,2.642,2236,2.642,2237,2.642,2238,2.642,2239,2.642,2240,2.642,2241,2.339,2242,2.642,2243,2.642,2244,2.642,2245,2.642,2246,2.642,2247,2.642,2248,2.477]],["title/interfaces/FileObj.html",[106,0.111,1680,2.3]],["body/interfaces/FileObj.html",[3,0.083,4,0.072,5,0.06,7,0.072,16,0.556,18,0.522,19,0.01,20,0.39,21,0.144,50,0.405,51,0.875,57,1.125,61,2.052,63,1.125,67,1.802,69,1.112,73,1.48,74,2.465,81,1.058,82,0.958,83,0.144,85,0.53,91,2.394,94,0.268,100,1.847,106,0.222,155,1.375,165,0.699,183,1.495,187,0.524,207,2.052,230,1.353,270,1.196,317,0.007,318,0.007,319,0.169,336,2.815,337,0.911,339,1.894,341,1.656,348,1.745,355,2.291,381,0.729,400,1.226,402,2.69,424,1.517,427,1.076,441,2.251,535,1.196,539,3.298,640,1.375,646,2.052,675,3.367,688,2.939,701,2.83,735,3.69,893,1.656,894,3.248,896,1.288,961,2.268,1044,1.678,1049,2.555,1078,1.905,1158,1.7,1169,1.7,1312,3.035,1370,3.138,1403,3.495,1404,3.138,1554,3.495,1558,3.495,1562,3.495,1601,3.248,1604,2.192,1621,2.415,1645,2.69,1646,2.798,1647,2.798,1648,3.636,1649,3.636,1650,4.431,1651,2.591,1652,3.248,1653,2.591,1654,2.798,1655,2.798,1656,2.415,1657,3.636,1658,2.336,1659,2.798,1660,2.798,1661,2.336,1662,1.948,1663,2.69,1664,4.206,1665,2.69,1666,2.798,1667,2.798,1668,2.798,1669,2.69,1670,2.336,1671,2.415,1672,2.5,1673,2.798,1674,2.69,1675,4.366,1676,2.69,1677,2.69,1678,4.431,1679,2.415,1680,3.883,1681,4.688,1682,3.959,1683,2.69,1684,2.5,1685,2.798,1686,2.69,1687,2.69,1688,3.636,1689,2.69,1690,2.798,1691,2.798]],["title/interfaces/FileSaver.html",[106,0.111,1689,2.3]],["body/interfaces/FileSaver.html",[3,0.085,4,0.073,5,0.062,7,0.073,16,0.568,18,0.534,19,0.01,20,0.394,21,0.14,50,0.407,51,0.878,57,1.141,61,2.073,63,1.141,66,1.771,67,1.827,69,1.136,73,1.501,74,2.486,81,1.082,82,0.98,83,0.144,85,0.522,91,2.428,94,0.266,100,1.873,106,0.222,155,1.395,165,0.701,183,1.528,187,0.519,207,2.073,230,1.383,270,1.223,317,0.007,318,0.007,319,0.171,336,2.838,337,0.932,339,1.936,341,1.693,348,1.784,355,2.303,381,0.737,400,1.253,402,2.75,424,1.539,427,1.082,441,1.873,535,1.223,539,3.312,640,1.395,646,2.073,675,2.802,688,2.981,701,2.837,735,3.721,893,1.693,894,3.295,896,1.316,961,2.3,1044,1.684,1049,2.126,1078,1.925,1158,1.738,1169,1.738,1312,3.079,1370,3.183,1403,3.546,1404,3.183,1554,4.29,1558,3.546,1562,4.29,1601,3.295,1604,2.241,1621,2.469,1645,2.75,1646,2.861,1647,2.861,1648,3.688,1649,3.688,1650,4.462,1651,2.649,1652,3.295,1653,2.649,1654,2.861,1655,2.861,1656,2.469,1657,3.688,1658,2.388,1659,2.861,1660,2.861,1661,2.388,1662,1.991,1663,2.75,1664,3.779,1665,2.75,1666,2.861,1667,2.861,1668,2.861,1669,2.75,1670,2.388,1671,2.469,1672,2.556,1673,2.861,1674,2.75,1675,3.924,1676,2.75,1677,2.75,1678,3.688,1679,2.469,1680,3.546,1681,4.462,1682,2.649,1683,2.75,1684,2.556,1685,2.861,1686,2.75,1687,2.75,1688,4.462,1689,3.546,1690,2.861,1691,2.861]],["title/interfaces/Fileloader.html",[106,0.111,1687,2.3]],["body/interfaces/Fileloader.html",[3,0.085,4,0.074,5,0.062,7,0.074,16,0.571,18,0.536,19,0.01,20,0.394,21,0.138,50,0.408,51,0.878,57,1.145,61,2.078,63,1.145,66,1.674,67,1.833,69,1.142,73,1.506,74,2.683,81,1.087,82,0.984,83,0.144,85,0.522,91,2.435,94,0.266,100,1.879,106,0.223,155,1.399,165,0.701,183,1.535,187,0.519,207,2.078,230,1.389,270,1.229,317,0.007,318,0.007,319,0.172,336,2.843,337,0.936,339,1.945,341,1.701,348,1.793,355,2.306,381,0.739,400,1.259,402,2.763,424,1.543,427,1.083,441,1.879,535,1.229,539,3.315,640,1.399,646,2.078,675,2.811,688,2.99,701,2.839,735,3.728,893,1.701,894,3.305,896,1.323,961,2.307,1044,1.686,1049,2.133,1078,1.929,1158,1.746,1169,1.746,1312,3.088,1370,3.193,1403,3.556,1404,3.193,1554,4.296,1558,3.556,1562,3.556,1601,3.305,1604,2.252,1621,2.481,1645,2.763,1646,2.874,1647,2.874,1648,3.699,1649,3.699,1650,4.469,1651,2.662,1652,3.305,1653,2.662,1654,2.874,1655,2.874,1656,2.481,1657,3.699,1658,2.4,1659,2.874,1660,2.874,1661,2.4,1662,2.001,1663,2.763,1664,3.788,1665,2.763,1666,2.874,1667,2.874,1668,2.874,1669,2.763,1670,2.4,1671,2.481,1672,2.568,1673,2.874,1674,2.763,1675,3.933,1676,2.763,1677,2.763,1678,3.699,1679,2.481,1680,3.556,1681,4.469,1682,2.662,1683,2.763,1684,2.568,1685,2.874,1686,2.763,1687,3.556,1688,3.699,1689,2.763,1690,2.874,1691,2.874]],["title/interfaces/IOTuple.html",[106,0.111,2249,3.507]],["body/interfaces/IOTuple.html",[3,0.083,4,0.071,5,0.06,7,0.071,19,0.01,20,0.368,21,0.143,50,0.414,51,0.835,57,1.322,61,2.17,63,1.124,67,2.194,69,1.603,70,3.244,73,1.803,75,1.696,81,1.807,83,0.131,85,0.48,86,1.35,88,2.831,94,0.235,96,2.04,106,0.168,112,2.426,115,2.265,117,2.844,155,1.373,163,0.93,164,0.928,165,0.701,183,1.939,187,0.295,202,0.554,207,1.419,230,1.95,270,1.194,280,1.03,317,0.007,318,0.007,319,0.168,337,0.909,339,1.89,355,2.249,381,0.504,400,1.591,424,1.515,427,1.012,430,1.317,441,1.845,462,2.331,464,1.652,520,3.918,564,3.631,587,3.161,600,3.956,640,1.717,641,2.678,642,1.89,646,2.05,697,4.369,700,4.094,701,2.884,706,2.678,707,2.678,735,4.154,773,5.281,811,4.107,892,2,896,1.966,916,2.41,970,2.41,987,2.257,1011,2.935,1049,2.326,1078,2.015,1109,2.974,1292,4.107,1312,3.031,1404,3.134,1451,3.558,1604,2.188,1605,2.793,1606,3.361,1610,3.491,1611,3.631,1626,3.558,1651,2.586,1672,2.495,1682,3.736,2092,3.558,2249,5.322,2250,4.094,2251,5.322,2252,5.84,2253,4.935,2254,6.872,2255,5.84,2256,6.872,2257,6.49,2258,5.84,2259,5.84,2260,5.84,2261,5.84,2262,6.872,2263,5.84,2264,4.492,2265,4.492,2266,4.492,2267,4.492,2268,4.492,2269,4.492,2270,4.094,2271,4.492,2272,5.322,2273,2.911,2274,4.492,2275,4.492,2276,6.654,2277,4.492,2278,5.141,2279,4.626,2280,5.322,2281,5.322,2282,5.914,2283,4.492,2284,3.796,2285,4.492,2286,4.492,2287,4.094,2288,4.492,2289,4.492,2290,4.492,2291,4.492,2292,4.492,2293,4.492]],["title/components/ImageComponent.html",[640,0.905,847,1.874]],["body/components/ImageComponent.html",[0,0.247,3,0.101,4,0.087,5,0.073,7,0.087,8,1.406,16,0.815,19,0.01,20,0.403,24,1.106,50,0.31,83,0.101,94,0.226,114,1.755,191,2.062,227,1.297,258,1.051,280,1.253,317,0.008,318,0.008,430,1.601,450,3.215,535,1.452,576,2.216,591,1.683,640,1.668,641,2.504,642,2.778,643,2.931,644,2.835,645,2.931,646,1.725,648,3.456,649,3.969,650,3.849,652,3.427,654,3.427,670,3.59,706,2.504,707,2.504,777,3.119,841,2.931,842,2.58,843,2.931,844,2.931,845,2.58,846,2.931,847,3.59,848,2.931,849,2.66,850,2.931,851,2.745,852,2.931,853,2.66,854,2.931,855,2.66,856,2.931,857,2.931,858,2.66,859,2.931,860,2.66,861,2.931,862,2.66,863,2.931,864,2.745,865,2.931,866,2.66,867,2.931,868,2.58,869,2.931,870,2.66,871,2.931,872,2.931,873,2.66,874,1.86,875,2.931,876,2.66,877,2.58,878,2.58,879,2.931,880,2.745,881,2.363,882,2.931,2294,6.197,2295,6.602,2296,8.052,2297,7.491,2298,6.197,2299,6.197,2300,7.491,2301,7.491,2302,7.491]],["title/interfaces/Ink.html",[106,0.111,1382,2.879]],["body/interfaces/Ink.html",[0,0.212,3,0.086,4,0.075,5,0.063,7,0.075,19,0.01,20,0.447,21,0.136,24,1.461,50,0.266,51,0.784,66,1.129,83,0.086,85,0.308,86,1.99,92,2.354,97,0.901,106,0.135,160,2.513,165,0.583,178,1.272,183,1.555,187,0.521,189,2.847,207,1.895,227,0.856,265,0.81,270,1.245,273,3.515,317,0.007,318,0.007,319,0.173,337,0.948,352,3.958,381,0.869,383,5.468,385,5.07,386,2.912,388,3.173,391,5.07,392,1.848,393,1.991,429,2.596,430,1.373,452,2.513,453,1.723,462,2.431,591,1.443,881,2.596,889,2.912,891,2.912,893,1.723,1159,1.679,1281,5.243,1289,3.327,1296,4.812,1300,5.14,1313,3.71,1345,3.015,1374,3.71,1375,4.268,1382,6.073,1383,3.958,1406,3.958,1632,2.912,1994,4.268,2075,4.268,2092,3.71,2133,2.799,2146,3.504,2303,4.684,2304,6.981,2305,6,2306,6,2307,4.684,2308,4.684,2309,4.684,2310,6.033,2311,5.244,2312,4.684,2313,7.217,2314,7.383,2315,7.217,2316,4.684,2317,4.684,2318,6,2319,4.684,2320,4.684,2321,6,2322,4.684,2323,6,2324,4.684,2325,4.268,2326,4.684,2327,6,2328,4.684,2329,4.268,2330,4.684,2331,4.684,2332,6,2333,4.684,2334,4.684,2335,4.684,2336,4.684,2337,4.684,2338,4.684,2339,4.684,2340,4.684,2341,6,2342,4.684,2343,7.507,2344,4.684,2345,4.684,2346,6,2347,4.684,2348,6,2349,4.684,2350,4.684,2351,4.684,2352,4.268,2353,4.684,2354,4.684,2355,4.684,2356,4.684,2357,4.684,2358,6,2359,4.684,2360,6,2361,4.684,2362,4.684,2363,4.684,2364,4.684]],["title/injectables/InkService.html",[429,1.665,1313,3.049]],["body/injectables/InkService.html",[0,0.196,3,0.08,4,0.069,5,0.058,7,0.069,8,1.213,16,0.943,18,0.739,19,0.01,20,0.458,21,0.13,22,0.992,24,1.577,50,0.246,51,0.76,66,1.373,83,0.08,85,0.419,86,2.035,92,2.174,97,0.832,106,0.125,160,3.058,165,0.561,178,1.211,183,1.892,187,0.517,189,2.71,202,0.787,207,2.139,227,1.164,258,0.832,265,0.79,270,1.15,273,3.427,317,0.007,318,0.007,319,0.164,352,4.816,381,0.864,383,5.193,385,4.816,386,2.69,388,2.931,391,5.385,392,1.756,393,1.98,429,2.466,430,1.269,452,2.322,453,1.592,462,2.958,591,1.333,881,2.931,889,2.69,891,2.69,893,1.592,1159,2.043,1281,4.991,1289,4.048,1296,4.58,1300,5.143,1313,4.514,1345,3.631,1374,4.514,1375,5.193,1382,6.09,1383,3.656,1406,5.385,1632,2.69,1994,5.193,2075,3.943,2092,4.514,2133,3.406,2146,3.237,2303,4.327,2304,4.327,2305,5.699,2306,5.699,2307,4.327,2308,4.327,2309,4.327,2310,5.807,2311,5.048,2312,4.327,2313,7.038,2314,7.226,2315,7.038,2316,4.327,2317,4.327,2318,5.699,2319,4.327,2320,4.327,2321,5.699,2322,4.327,2323,5.699,2324,4.327,2325,3.943,2326,4.327,2327,5.699,2328,4.327,2329,3.943,2330,4.327,2331,4.327,2332,5.699,2333,4.327,2334,4.327,2335,4.327,2336,4.327,2337,4.327,2338,4.327,2339,4.327,2340,4.327,2341,6.773,2342,5.699,2343,7.477,2344,5.699,2345,4.327,2346,5.699,2347,6.773,2348,5.699,2349,5.699,2350,5.699,2351,5.699,2352,5.193,2353,5.699,2354,5.699,2355,5.699,2356,4.327,2357,4.327,2358,5.699,2359,4.327,2360,5.699,2361,5.699,2362,5.699,2363,4.327,2364,4.327,2365,2.931,2366,6.466,2367,7.23,2368,7.23,2369,6.466,2370,3.693,2371,7.23,2372,6.466,2373,4.909,2374,4.909,2375,4.909,2376,4.909,2377,4.909,2378,4.909,2379,4.909,2380,4.909,2381,4.909]],["title/components/InletComponent.html",[640,0.905,849,1.874]],["body/components/InletComponent.html",[0,0.17,3,0.069,4,0.06,5,0.05,7,0.06,8,1.101,16,0.973,18,0.741,19,0.01,20,0.426,21,0.146,22,0.994,24,1.403,50,0.411,51,0.581,52,0.926,58,2.599,67,1.594,73,1.499,81,1.669,83,0.069,85,0.42,86,1.78,88,2.476,94,0.262,97,1.229,114,1.375,134,1.77,164,0.863,178,1.222,187,0.456,189,1.903,191,1.415,197,2.984,227,0.685,240,1.675,258,1.289,265,0.752,280,1.186,281,1.429,317,0.006,318,0.006,319,0.149,342,3.017,344,2.638,348,1.453,381,0.581,427,0.762,430,1.099,441,1.871,450,2.519,467,2.176,524,1.718,535,0.996,576,1.919,587,3.458,588,2.969,591,1.155,640,1.393,641,1.718,642,2.176,643,2.011,644,1.945,645,2.011,646,2.116,648,2.885,649,3.849,650,3.734,652,2.685,654,2.685,670,3.11,676,3.415,677,5.308,706,1.718,707,1.718,712,4.208,713,4.621,730,2.969,734,2.969,777,2.443,835,2.519,841,2.011,842,1.77,843,2.011,844,2.011,845,1.77,846,2.011,847,1.825,848,2.011,849,3.11,850,2.011,851,1.883,852,2.011,853,1.825,854,2.011,855,1.825,856,2.011,857,2.011,858,1.825,859,2.011,860,1.825,861,2.011,862,1.825,863,2.011,864,1.883,865,2.011,866,1.825,867,2.011,868,1.77,869,2.011,870,1.825,871,2.011,872,2.011,873,1.825,874,1.276,875,2.011,876,1.825,877,1.77,878,1.77,879,2.011,880,1.883,881,1.622,882,2.011,906,2.662,980,2.681,1123,2.599,1293,2.429,1319,4.139,1320,2.969,1335,3.748,1345,2.599,1362,5.923,1407,3.675,1534,3.352,1622,4.012,2097,2.082,2098,3.092,2102,3.839,2106,2.33,2114,4.431,2119,3.216,2122,3.989,2127,2.969,2128,2.804,2131,2.539,2278,5.625,2310,4.714,2370,3.352,2382,4.253,2383,6.721,2384,5.869,2385,6.721,2386,5.923,2387,6.721,2388,6.721,2389,6.721,2390,5.869,2391,7.247,2392,7.247,2393,5.869,2394,5.869,2395,7.247,2396,5.923,2397,6.721,2398,6.721,2399,6.387,2400,5.869,2401,4.253,2402,4.253,2403,4.253,2404,4.253,2405,4.253,2406,4.253,2407,5.869,2408,4.253,2409,4.253,2410,4.253,2411,4.253,2412,5.869,2413,4.253,2414,5.869,2415,4.253,2416,5.869,2417,4.253,2418,5.398,2419,4.253,2420,4.253,2421,4.253,2422,4.253,2423,4.253,2424,4.253,2425,3.748,2426,3.748,2427,3.167,2428,4.253,2429,4.253,2430,4.253,2431,3.748,2432,3.748,2433,4.253,2434,4.253,2435,3.415,2436,3.748,2437,2.969,2438,4.253,2439,4.253,2440,3.415,2441,4.253,2442,3.748,2443,6.721,2444,4.253,2445,5.869,2446,5.869,2447,4.253,2448,4.253,2449,3.748,2450,4.253,2451,3.748,2452,5.397,2453,4.253,2454,5.869,2455,4.253,2456,4.253,2457,4.253,2458,4.253,2459,5.869,2460,5.869,2461,4.253,2462,4.253,2463,4.253,2464,3.748,2465,4.253,2466,5.923,2467,7.247,2468,4.253,2469,5.869,2470,7.862,2471,5.869,2472,5.869,2473,5.869,2474,5.663,2475,4.208,2476,4.371,2477,4.371,2478,4.253,2479,3.167,2480,4.253,2481,4.253,2482,4.253,2483,3.415,2484,2.158,2485,2.662,2486,3.167,2487,4.253,2488,3.216,2489,3.748,2490,6.721,2491,3.748,2492,4.253,2493,3.167,2494,2.804,2495,3.415]],["title/interfaces/Interlacement.html",[106,0.111,1310,2.392]],["body/interfaces/Interlacement.html",[3,0.09,4,0.077,5,0.065,7,0.077,16,0.6,19,0.01,20,0.382,21,0.131,50,0.276,51,0.897,63,0.936,69,1.748,83,0.135,85,0.498,94,0.274,97,0.936,106,0.204,163,0.874,164,0.657,165,0.699,178,1.164,183,1.615,187,0.404,202,0.6,207,1.536,229,2.66,270,1.882,273,3.555,317,0.007,318,0.007,319,0.177,337,0.985,341,1.789,348,2.383,355,1.499,358,3.152,366,4.027,381,0.546,400,1.325,427,0.992,462,2.525,489,3.456,564,3.024,604,2.801,607,1.938,640,1.445,642,2.586,834,3.19,835,2.993,838,4.163,889,3.024,892,3.251,893,2.604,896,1.758,899,4.907,918,3.789,919,3.456,1004,2.903,1073,2.684,1078,1.426,1109,2.105,1310,3.821,1311,3.853,1340,4.787,1395,5.461,1474,3.674,1584,5.194,1586,5.194,1588,5.532,1590,5.194,1592,5.194,1594,5.194,1596,5.194,1600,4.111,1601,2.702,1602,4.433,1603,4.433,1604,2.993,1605,3.821,1606,3.639,1607,3.853,1608,3.639,1609,4.433,1610,2.907,1611,3.024,1612,4.111,1613,4.433,1614,4.111,1615,3.456,1616,4.433,1617,4.433,1618,6.451,1619,6.451,1620,4.869,1621,3.298,1622,4.163,1623,5.601,1624,5.601,1625,5.194,1626,4.869,1627,5.601,1628,5.906,1629,5.601,1630,5.029,1631,5.601,1632,3.821,1633,4.433,1634,5.601,1635,5.601,1636,5.601,1637,4.433,1638,3.456,1639,4.111,1640,4.433,1641,4.111,1642,4.433,1643,4.111,1644,2.61]],["title/interfaces/InterlacementVal.html",[106,0.111,1643,3.252]],["body/interfaces/InterlacementVal.html",[3,0.09,4,0.077,5,0.065,7,0.077,16,0.6,19,0.01,20,0.382,21,0.131,50,0.276,51,0.897,63,0.935,69,1.748,83,0.135,85,0.49,94,0.273,97,0.935,106,0.204,163,0.874,164,0.657,165,0.699,178,1.163,183,1.614,187,0.404,202,0.6,207,1.535,229,2.104,270,1.881,273,3.555,317,0.007,318,0.007,319,0.177,337,0.984,341,1.788,348,1.885,355,1.893,358,3.15,366,4.026,381,0.756,400,1.324,427,0.992,462,2.523,489,4.364,564,3.022,604,2.799,607,1.936,640,1.444,642,2.585,834,3.188,835,2.992,838,3.293,889,3.022,892,3.319,893,2.603,896,1.758,899,4.906,918,3.673,919,3.453,1004,3.448,1073,2.683,1078,1.425,1109,2.104,1310,3.022,1311,3.851,1340,4.785,1395,4.596,1474,3.672,1584,5.192,1586,5.192,1588,5.532,1590,5.192,1592,5.192,1594,5.192,1596,5.192,1600,4.108,1601,2.7,1602,4.43,1603,4.43,1604,2.992,1605,3.819,1606,3.637,1607,3.851,1608,3.637,1609,4.43,1610,2.905,1611,3.022,1612,4.108,1613,4.43,1614,4.108,1615,3.453,1616,4.43,1617,4.43,1618,6.449,1619,6.449,1620,4.867,1621,3.296,1622,4.161,1623,5.599,1624,5.599,1625,5.192,1626,4.867,1627,5.599,1628,5.997,1629,5.599,1630,5.027,1631,5.599,1632,3.819,1633,4.43,1634,4.43,1635,4.43,1636,4.43,1637,4.43,1638,4.364,1639,5.192,1640,5.599,1641,5.192,1642,5.599,1643,5.192,1644,2.608]],["title/injectables/LayersService.html",[429,1.665,1315,3.507]],["body/injectables/LayersService.html",[0,0.262,3,0.107,4,0.092,5,0.078,7,0.092,8,1.455,16,0.946,19,0.01,21,0.107,24,1.472,50,0.328,83,0.107,94,0.262,117,3.328,163,0.844,202,0.714,227,1.329,258,1.113,265,0.767,281,1.529,317,0.008,318,0.008,319,0.197,341,2.514,429,2.957,430,1.697,444,3.328,452,3.105,453,2.129,709,6.228,1315,6.228,1386,6.228,1387,6.228,1625,5.775,2365,3.92,2496,6.566,2497,6.228,2498,7.754,2499,7.754,2500,8.253,2501,8.526,2502,8.526,2503,8.253,2504,7.754,2505,6.566,2506,6.566,2507,6.566,2508,8.7,2509,6.566]],["title/interfaces/LoadResponse.html",[106,0.111,1686,2.3]],["body/interfaces/LoadResponse.html",[3,0.085,4,0.074,5,0.062,7,0.074,16,0.571,18,0.536,19,0.01,20,0.394,21,0.138,50,0.408,51,0.878,57,1.145,61,2.078,63,1.145,67,1.833,69,1.142,73,1.506,74,2.49,81,1.087,82,0.984,83,0.144,85,0.522,91,2.435,94,0.269,100,1.879,106,0.223,155,1.399,165,0.701,183,1.535,187,0.519,207,2.078,230,1.389,270,1.229,317,0.007,318,0.007,319,0.172,336,2.843,337,0.936,339,1.945,341,1.701,348,1.793,355,2.306,381,0.739,400,1.259,402,2.763,424,1.543,427,1.083,441,1.879,535,1.229,539,3.315,640,1.399,646,2.078,675,2.811,688,2.99,701,2.839,735,3.728,893,1.701,894,3.305,896,1.323,961,2.307,1044,1.715,1049,2.133,1078,1.929,1158,1.746,1169,2.623,1312,3.088,1370,3.193,1403,3.556,1404,3.193,1554,3.556,1558,3.556,1562,3.556,1601,3.305,1604,2.252,1621,2.481,1645,2.763,1646,2.874,1647,2.874,1648,3.699,1649,3.699,1650,4.469,1651,2.662,1652,3.305,1653,2.662,1654,2.874,1655,2.874,1656,2.481,1657,3.699,1658,2.4,1659,2.874,1660,2.874,1661,2.4,1662,2.001,1663,2.763,1664,3.788,1665,2.763,1666,2.874,1667,2.874,1668,2.874,1669,2.763,1670,2.4,1671,2.481,1672,2.568,1673,2.874,1674,2.763,1675,3.933,1676,2.763,1677,2.763,1678,3.699,1679,2.481,1680,4.152,1681,4.469,1682,2.662,1683,2.763,1684,2.568,1685,2.874,1686,3.556,1687,2.763,1688,3.699,1689,2.763,1690,2.874,1691,2.874]],["title/interfaces/LoomConfig.html",[106,0.111,1707,3.049]],["body/interfaces/LoomConfig.html",[0,0.246,3,0.059,4,0.051,5,0.043,7,0.051,9,1.31,10,1.31,18,0.371,19,0.01,20,0.308,21,0.085,25,1.31,50,0.418,51,0.826,52,0.791,57,1.046,63,0.89,66,0.771,71,1.794,81,1.278,83,0.085,85,0.457,86,0.962,88,1.794,94,0.252,96,1.118,97,1.492,99,1.31,100,1.011,106,0.133,112,1.851,116,1.662,118,1.517,128,1.609,163,0.78,164,0.917,165,0.282,187,0.446,189,2.19,213,1.09,220,1.209,222,1.576,227,0.846,265,0.867,280,1.449,281,1.216,315,1.31,317,0.006,318,0.006,319,0.133,337,0.648,350,1.391,355,1.426,359,2.169,381,0.739,384,2.028,392,1.834,393,1.544,425,3.86,427,0.93,429,2.003,430,0.939,431,1.778,432,3.09,433,1.718,434,1.843,435,2.169,436,2.274,437,1.914,439,2.483,441,2.346,444,2.254,452,1.718,453,1.178,454,2.999,464,1.178,467,2.287,468,2.028,480,1.894,481,1.914,486,1.914,487,2.42,491,2.169,493,1.99,496,2.395,500,2.274,508,2.664,511,2.274,519,3.307,521,2.075,523,1.718,524,1.468,525,1.778,526,1.662,527,2.169,528,2.075,529,2.57,530,2.075,531,2.169,532,3.109,533,2.483,534,1.99,535,1.23,536,2.169,538,1.462,541,3.522,543,2.999,544,2.075,545,2.483,546,2.402,547,3.135,550,2.169,553,2.999,554,2.075,559,3.135,562,2.999,563,3.135,569,3.135,571,3.135,572,2.169,573,3.701,577,2.402,591,1.426,605,1.914,614,2.169,624,3.522,634,2.877,811,3.248,916,1.718,939,1.347,980,1.747,984,1.559,1012,1.468,1027,1.609,1044,0.699,1073,1.275,1114,1.09,1141,2.647,1159,1.148,1319,2.999,1337,4.278,1345,1.609,1434,2.536,1450,2.075,1454,1.843,1464,2.274,1473,2.169,1527,3.666,1564,2.395,1579,1.914,1582,3.287,1615,2.274,1644,2.483,1661,2.402,1692,2.536,1693,2.705,1694,4.033,1695,2.705,1696,2.705,1697,2.536,1698,2.395,1699,1.718,1700,2.705,1701,3.462,1702,2.705,1703,2.169,1704,2.274,1705,2.536,1706,2.705,1707,4.305,1708,5.337,1709,3.462,1710,2.169,1711,2.705,1712,2.705,1713,3.911,1714,2.274,1715,2.705,1716,2.274,1717,2.705,1718,2.705,1719,3.911,1720,2.536,1721,3.861,1722,2.705,1723,2.705,1724,2.705,1725,2.705,1726,3.462,1727,2.536,1728,2.705,1729,2.274,1730,2.705,1731,3.666,1732,2.705,1733,2.705,1734,2.705,1735,2.705,1736,2.536,1737,2.705,1738,2.536,1739,2.536,1740,2.536,1741,2.536,1742,2.395,1743,2.536,1744,2.705,1745,2.705,1746,4.716,1747,2.705,1748,3.666,1749,2.536,1750,5.736,1751,2.705,1752,2.705,1753,2.705,1754,3.666,1755,3.911,1756,3.666,1757,3.911,1758,2.536,1759,5.563,1760,3.911,1761,3.666,1762,3.911,1763,2.536,1764,2.705,1765,2.536,1766,2.536,1767,2.536,1768,2.536,1769,3.666,1770,2.536,1771,2.536,1772,2.274,1773,3.428,1774,2.536,1775,2.536,1776,2.705,1777,2.536,1778,2.536,1779,3.911,1780,2.536,1781,3.666,1782,2.705,1783,2.536,1784,2.536,1785,2.705,1786,2.705,1787,2.536,1788,2.536,1789,2.395,1790,2.705,1791,2.705,1792,2.705,1793,2.705,1794,2.274,1795,2.705,1796,1.914,1797,2.705,1798,3.861,1799,2.395,1800,2.705,1801,5.031,1802,2.536,1803,2.705,1804,2.705,1805,2.705,1806,2.705,1807,5.031,1808,4.593,1809,2.705,1810,2.536,1811,2.705,1812,2.705,1813,2.705,1814,2.705,1815,2.705,1816,3.911,1817,2.705,1818,3.911,1819,2.705,1820,3.911,1821,2.705,1822,3.911,1823,2.705,1824,3.911,1825,2.705,1826,2.705,1827,2.705,1828,2.705,1829,2.705,1830,3.666,1831,2.705,1832,2.705,1833,3.911,1834,2.705,1835,3.911,1836,2.705,1837,3.911,1838,2.705,1839,3.911,1840,2.705,1841,3.911,1842,2.705,1843,3.666,1844,2.705,1845,3.911,1846,2.705,1847,3.911,1848,2.705,1849,3.911,1850,2.705,1851,3.911,1852,2.705,1853,3.911,1854,3.911,1855,2.705,1856,2.705,1857,4.593,1858,3.701,1859,2.705,1860,2.536,1861,3.462,1862,4.725,1863,2.705,1864,2.705,1865,2.705,1866,2.395,1867,2.705,1868,2.705,1869,2.705,1870,2.705,1871,2.705,1872,3.911,1873,2.705,1874,2.705,1875,3.861,1876,2.705,1877,2.705,1878,2.705,1879,3.911,1880,2.705,1881,2.705,1882,2.169,1883,2.169,1884,2.705,1885,2.705,1886,2.705,1887,2.705,1888,2.705,1889,2.705,1890,3.911,1891,3.911,1892,3.911,1893,2.705,1894,2.705,1895,2.705,1896,2.705,1897,3.911,1898,2.705,1899,2.705,1900,2.705,1901,2.705,1902,2.705,1903,2.705,1904,2.705,1905,2.705,1906,2.705,1907,2.705,1908,2.705,1909,3.911,1910,2.705,1911,2.705,1912,3.135,1913,2.705,1914,2.705,1915,2.705,1916,2.705,1917,2.705,1918,2.274,1919,2.705,1920,2.705,1921,2.705,1922,2.705,1923,2.705,1924,2.705,1925,2.705,1926,2.705,1927,2.705,1928,2.705,1929,2.705,1930,2.705,1931,2.705,1932,2.705,1933,2.705,1934,2.705,1935,2.705,1936,2.705,1937,2.705,1938,2.705,1939,2.705,1940,2.705]],["title/interfaces/LoomTypes.html",[106,0.111,1282,2.879]],["body/interfaces/LoomTypes.html",[3,0.106,4,0.091,5,0.077,7,0.091,19,0.01,21,0.126,83,0.141,85,0.378,94,0.196,106,0.221,165,0.673,178,1.306,187,0.531,200,2.487,202,0.709,317,0.008,318,0.008,319,0.196,337,1.164,381,0.764,893,2.504,896,1.644,913,3.725,1279,4.3,1280,4.553,1281,5.383,1282,5.092,1283,4.3,1284,4.3,1285,4.553,1286,4.553,1287,4.553,1288,3.725,1289,4.083,1290,4.3,1291,4.553,1292,3.435,1293,3.725,1294,4.553,1295,4.553,1296,4.232,1297,5.392,1298,3.309,1299,4.553,1300,4.7,1301,4.3,1604,2.799,1714,4.083,2370,3.725,2510,6.521]],["title/injectables/MappingsService.html",[429,1.665,1701,2.879]],["body/injectables/MappingsService.html",[0,0.251,3,0.061,4,0.053,5,0.044,7,0.096,8,1.01,16,0.957,18,0.879,19,0.01,20,0.435,21,0.145,22,1.18,24,1.524,50,0.363,63,0.638,66,0.799,83,0.061,85,0.498,94,0.275,97,0.638,104,1.982,121,4.099,154,0.996,155,1.116,161,1.779,163,0.747,164,0.817,177,1.746,178,0.78,187,0.487,202,0.409,209,1.391,220,1.252,227,0.867,230,0.996,232,2.836,240,1.537,258,1.282,265,0.864,280,1.388,281,0.742,317,0.006,318,0.006,319,0.137,323,2.246,345,1.909,346,1.658,381,0.802,384,1.129,386,2.061,392,1.972,393,1.569,425,4.115,426,4.099,427,1.133,429,2.054,430,0.972,431,3.809,432,1.721,433,2.974,434,1.909,435,2.246,436,2.355,437,1.982,438,2.48,439,3.435,440,3.021,441,2.166,452,1.779,453,1.22,454,3.921,467,2.332,468,1.887,469,1.566,480,1.942,487,1.476,491,2.246,495,3.021,500,2.355,508,3.483,511,2.355,519,3.227,520,1.779,540,5.248,545,3.574,573,3.761,577,2.463,600,2.246,605,1.982,606,2.626,612,2.48,634,2.061,635,4.79,636,3.55,637,2.48,639,3.55,920,3.754,984,1.615,1039,1.721,1109,1.435,1141,1.615,1191,3.075,1292,1.982,1345,1.666,1564,2.48,1566,3.759,1698,2.48,1701,4.146,1709,2.48,1720,4.39,1721,2.355,1726,3.55,1727,2.626,1729,2.355,1731,2.626,1736,2.626,1738,2.626,1739,2.626,1740,3.759,1741,2.626,1742,2.48,1743,2.626,1746,5.557,1748,2.626,1749,2.626,1754,3.759,1756,3.759,1758,2.626,1761,3.759,1763,2.626,1765,2.626,1766,2.626,1767,2.626,1768,2.626,1769,2.626,1770,2.626,1771,2.626,1772,2.355,1773,3.835,1774,2.626,1775,3.759,1777,2.626,1778,3.759,1780,3.759,1781,2.626,1783,3.759,1784,4.39,1787,2.626,1788,2.626,1789,4.146,1798,2.355,1799,4.526,2156,3.759,2365,2.246,2511,3.021,2512,6.865,2513,5.384,2514,5.384,2515,5.113,2516,4.745,2517,5.384,2518,5.384,2519,5.384,2520,5.384,2521,4.745,2522,4.745,2523,5.384,2524,4.745,2525,4.745,2526,4.745,2527,5.384,2528,5.384,2529,3.315,2530,5.384,2531,3.762,2532,5.384,2533,3.762,2534,5.384,2535,3.762,2536,5.384,2537,3.762,2538,5.384,2539,3.762,2540,5.384,2541,3.762,2542,3.762,2543,5.384,2544,3.762,2545,5.384,2546,3.762,2547,3.762,2548,3.762,2549,3.762,2550,5.384,2551,3.762,2552,5.384,2553,3.762,2554,3.762,2555,5.514,2556,3.762,2557,3.762,2558,3.762,2559,3.762,2560,3.762,2561,4.745,2562,3.762,2563,4.745,2564,3.315,2565,3.762,2566,3.762,2567,3.315,2568,3.762,2569,3.762,2570,3.315,2571,3.021,2572,3.762,2573,3.762,2574,3.762,2575,5.384,2576,3.762,2577,3.762,2578,3.762,2579,3.762,2580,3.762,2581,3.762,2582,3.762,2583,3.762,2584,3.762,2585,3.762,2586,3.762,2587,3.762,2588,3.762,2589,3.021,2590,3.762,2591,2.802,2592,3.762,2593,3.762,2594,3.762,2595,3.762,2596,5.384,2597,5.384,2598,3.762,2599,3.762,2600,3.762,2601,3.762,2602,3.762,2603,3.762,2604,3.762,2605,3.762,2606,3.762,2607,3.762,2608,3.762,2609,3.762,2610,5.384,2611,3.762,2612,3.762,2613,3.762,2614,3.315,2615,3.762,2616,3.762,2617,3.762,2618,3.762,2619,3.762,2620,3.762,2621,3.762,2622,3.762,2623,3.762,2624,3.762,2625,3.762,2626,3.762,2627,3.762,2628,3.762,2629,3.762,2630,7.782,2631,3.762,2632,5.384,2633,5.384,2634,5.384,2635,4.324,2636,4.324,2637,4.324,2638,4.324,2639,3.762,2640,3.021,2641,3.762,2642,3.762,2643,3.762,2644,3.762,2645,3.762,2646,3.762,2647,3.762,2648,3.762,2649,3.762,2650,3.762]],["title/directives/MarqueeComponent.html",[842,1.818,878,1.818]],["body/directives/MarqueeComponent.html",[0,0.241,3,0.098,4,0.085,5,0.071,7,0.085,8,1.385,16,0.975,18,0.618,19,0.01,20,0.302,21,0.142,22,0.83,24,1.421,50,0.415,51,0.856,52,1.606,83,0.098,94,0.25,114,1.729,154,2.253,163,0.975,178,1.232,187,0.35,191,2.012,258,1.252,265,0.598,317,0.008,318,0.008,319,0.188,336,3.213,342,3.072,343,4.215,344,2.896,345,3.068,346,2.272,393,1.687,427,1.034,430,1.563,464,2.583,467,3.209,524,2.443,648,3.419,649,3.168,650,3.072,670,3.56,675,3.316,717,4.866,842,3.072,877,2.517,878,3.072,881,2.815,1310,4.044,1336,5.329,1395,4.866,2484,3.745,2651,6.047,2652,7.38,2653,7.021,2654,7.311,2655,6.504,2656,6.047,2657,6.047,2658,6.504,2659,6.047,2660,6.047,2661,6.047,2662,7.38,2663,6.047,2664,6.047,2665,6.047,2666,6.047,2667,6.504,2668,6.047,2669,4.856,2670,5.329,2671,5.329,2672,5.329,2673,4.221]],["title/interfaces/MaterialTypes.html",[106,0.111,1283,2.879]],["body/interfaces/MaterialTypes.html",[3,0.106,4,0.092,5,0.077,7,0.092,19,0.01,21,0.126,83,0.141,85,0.379,94,0.248,106,0.221,165,0.674,178,1.307,187,0.529,200,2.498,317,0.008,318,0.008,319,0.197,337,1.168,381,0.766,893,2.51,896,1.651,913,3.74,1279,4.318,1280,4.572,1281,5.386,1282,4.318,1283,5.105,1284,4.318,1285,4.572,1286,4.572,1287,4.572,1288,3.74,1289,4.1,1290,4.318,1291,4.572,1292,3.45,1293,3.74,1294,4.572,1295,4.572,1296,4.242,1297,5.405,1298,3.323,1299,4.572,1300,4.708,1301,4.318]],["title/classes/Merge.html",[0,0.174,101,1.997]],["body/classes/Merge.html",[0,0.323,1,2.893,2,0.919,3,0.049,4,0.042,5,0.035,6,1.515,7,0.042,9,1.981,10,1.981,11,2.512,12,2.512,13,2.512,14,2.487,15,4.223,16,0.668,18,0.627,19,0.01,20,0.406,21,0.148,22,0.41,23,2.287,25,3.132,26,3.362,27,4.274,30,2.487,33,3.362,35,2.487,38,3.362,40,2.487,43,3.362,45,2.487,48,3.362,50,0.275,51,0.856,52,0.65,53,1.139,54,1.281,55,3.617,56,1.573,57,1.448,58,1.322,59,3.617,60,3.079,61,2.073,62,1.573,63,1.461,64,1.573,65,1.573,66,1.723,67,1.233,68,1.573,69,1.8,70,1.461,71,2.957,72,2.634,73,1.788,74,0.943,75,2.314,76,3.009,77,1.636,78,1.636,79,2.487,80,1.573,81,1.799,82,1.031,83,0.142,84,2.391,85,0.505,86,1.202,87,1.573,88,2.933,89,2.893,90,3.009,91,1.077,92,1.322,93,1.636,94,0.209,95,2.487,96,0.919,97,1.36,98,3.528,99,2.686,100,2.073,101,3.489,102,3.406,103,3.406,104,4.476,105,3.809,106,0.156,107,3.807,108,1.322,109,2.607,110,4.476,111,2.147,112,2.46,113,3.809,114,1.693,115,2.256,116,3.02,117,2.833,118,1.71,119,1.077,120,1.461,121,2.391,122,1.573,123,1.636,124,4.274,125,1.573,126,1.636,127,3.809,128,1.322,129,1.412,130,1.638,131,2.893,132,3.522,133,3.362,134,2.555,135,3.477,136,3.809,137,4.08,138,3.522,139,3.617,140,3.009,141,3.009,142,3.009,143,1.573,144,4.262,145,2.487,146,2.487,147,1.636,148,1.636,149,1.636,150,1.636,151,1.636,152,3.233,153,2.391,154,0.791,155,1.138,156,1.206,157,1.573,158,1.636,159,2.222,160,1.412,161,1.412,162,1.573,163,0.494,164,0.355,165,0.578,166,1.573,167,2.391,168,3.617,169,2.391,170,3.362,171,2.391,172,2.391,173,2.391,174,1.573,175,3.807,176,2.893,177,0.968,178,0.433,179,1.636,180,1.636,181,1.636,182,1.636,183,0.874,184,1.636,185,1.461,186,2.391,187,0.519,188,3.837,189,2.63,190,1.281,191,0.994,192,1.636,193,1.281,194,1.412,195,1.412,196,0.994,197,1.172,198,1.412,199,1.412,200,1.139,201,0.994,202,0.494,203,2.598,204,1.412,205,1.636,206,1.366,207,0.831,208,2.391,209,1.797,210,2.487,211,1.636,212,1.573,213,0.896,214,1.636,215,1.412,216,1.206,217,1.636,218,1.636,219,1.636,220,0.994,221,1.636,222,0.896,223,1.573,224,1.636,225,3.418,226,1.636,227,1.199,228,2.076,229,1.731,230,0.791,231,1.461,232,1.573,233,2.391,234,1.573,235,1.573,236,3.009,237,3.009,238,3.009,239,1.636,240,0.852,241,1.636,242,1.636,243,2.076,244,1.636,245,2.487,246,1.636,247,2.487,248,1.636,249,3.009,250,1.636,251,2.487,252,3.233,253,2.487,254,3.009,255,1.636,256,1.636,257,1.636,258,0.506,259,1.636,260,1.636,261,1.636,262,1.636,263,1.636,264,3.779,265,0.793,266,1.573,267,1.573,268,1.636,269,1.636,270,0.699,271,1.636,272,2.391,273,1.948,274,1.636,275,1.636,276,1.636,277,1.636,278,1.636,279,1.636,280,1.573,281,1.371,282,3.617,283,1.636,284,1.636,285,1.636,286,1.636,287,1.636,288,1.636,289,1.461,290,1.636,291,1.573,292,1.573,293,1.636,294,1.515,295,1.573,296,1.636,297,4.081,298,1.206,299,1.636,300,1.636,301,1.636,302,1.636,303,1.636,304,1.636,305,2.487,306,2.487,307,3.362,308,2.487,309,1.636,310,1.636,311,1.636,312,1.636,313,1.636,314,1.573,315,1.077,316,1.636,317,0.005,318,0.005,319,0.115,2674,5.493]],["title/modules/MixerModule.html",[2675,3.507,2676,3.252]],["body/modules/MixerModule.html",[0,0.231,3,0.094,4,0.081,5,0.068,19,0.01,50,0.46,83,0.094,317,0.008,318,0.008,430,1.497,641,3.46,706,3.46,707,3.46,845,3.565,847,3.675,849,3.675,851,3.792,853,3.675,855,3.675,858,3.675,860,3.675,864,3.792,866,3.675,868,2.992,870,3.675,878,3.565,1328,5.105,1457,4.5,1512,4.044,2676,6.93,2677,3.819,2678,4.739,2679,5.105,2680,5.105,2681,5.105,2682,5.978,2683,4.652,2684,5.793,2685,6.335,2686,6.335,2687,6.335,2688,6.335,2689,5.105,2690,7.188,2691,5.793,2692,5.793,2693,5.793,2694,5.793,2695,5.793,2696,5.793,2697,5.793,2698,5.793,2699,5.793,2700,5.793,2701,5.793,2702,5.793,2703,5.793,2704,5.793,2705,5.793,2706,5.793,2707,5.793,2708,5.793]],["title/components/MixerViewComponent.html",[640,0.905,853,1.874]],["body/components/MixerViewComponent.html",[0,0.154,3,0.063,4,0.103,5,0.046,7,0.089,8,1.028,16,0.973,18,0.819,19,0.01,20,0.418,21,0.143,22,1.099,24,1.507,50,0.347,52,0.839,67,1.487,81,0.799,83,0.063,85,0.402,88,2.178,94,0.257,97,1.432,112,1.157,114,1.283,134,1.604,155,0.799,163,0.829,164,0.459,187,0.369,190,1.654,191,1.283,227,0.621,258,1.401,265,0.631,280,0.779,281,1.08,317,0.006,318,0.006,319,0.139,336,2.94,342,3.515,343,2.201,344,3.281,345,3.866,346,2.346,347,4.013,348,2.178,350,1.838,366,3.357,424,0.881,430,0.996,450,2.351,462,2.506,467,2.719,535,0.903,576,1.838,591,1.046,612,3.612,640,1.321,641,1.557,642,2.031,643,1.822,644,1.763,645,1.822,646,1.073,648,2.736,649,3.812,650,3.697,652,2.506,654,2.506,662,2.87,669,4.345,670,2.979,675,1.604,706,1.557,707,1.557,717,3.612,724,4.59,734,2.69,777,2.889,800,2.87,809,4.345,834,3.354,835,2.736,838,2.301,840,3.64,841,1.822,842,1.604,843,1.822,844,1.822,845,1.604,846,1.822,847,1.654,848,1.822,849,1.654,850,1.822,851,1.707,852,1.822,853,2.979,854,1.822,855,1.654,856,1.822,857,1.822,858,1.654,859,1.822,860,1.654,861,1.822,862,1.654,863,1.822,864,1.707,865,1.822,866,1.654,867,1.822,868,1.604,869,1.822,870,1.654,871,1.822,872,1.822,873,1.654,874,1.157,875,1.822,876,1.654,877,1.604,878,1.604,879,1.822,880,1.707,881,1.47,882,1.822,906,3.43,939,1.429,961,1.872,965,2.501,980,2.121,1044,1.466,1114,1.157,1145,1.557,1323,5.119,1324,3.095,1325,5.574,1326,4.845,1327,2.69,1345,2.426,1402,3.095,1410,5.169,1411,4.747,1454,1.955,1455,3.095,1457,4.345,1460,4.4,1473,4.548,1474,4.013,1534,3.129,1662,2.089,1912,2.301,1946,4.828,1947,4.845,1968,4.747,2003,2.413,2007,2.69,2008,2.87,2017,4.08,2048,3.396,2062,3.095,2097,3.12,2098,3.656,2099,2.886,2102,3.129,2106,3.001,2109,5.119,2110,3.129,2111,2.69,2113,3.095,2114,4.576,2115,3.824,2117,2.03,2119,3.803,2122,3.014,2128,2.541,2129,4.747,2154,2.201,2474,4.08,2475,2.413,2476,2.87,2477,4.747,2483,5.119,2488,4.017,2493,2.87,2495,4.4,2673,2.69,2709,3.854,2710,5.478,2711,6.373,2712,5.478,2713,6.373,2714,7.619,2715,6.373,2716,5.478,2717,5.478,2718,4.828,2719,5.478,2720,5.478,2721,5.478,2722,6.941,2723,5.478,2724,6.941,2725,5.478,2726,6.373,2727,6.373,2728,3.854,2729,5.478,2730,3.854,2731,3.854,2732,3.854,2733,5.478,2734,3.854,2735,4.828,2736,3.854,2737,5.478,2738,3.854,2739,5.478,2740,3.854,2741,3.396,2742,5.478,2743,3.854,2744,3.854,2745,3.854,2746,3.854,2747,5.478,2748,3.854,2749,3.854,2750,3.854,2751,3.854,2752,3.854,2753,3.854,2754,3.854,2755,3.854,2756,3.854,2757,3.854,2758,3.854,2759,3.854,2760,3.854,2761,3.854,2762,3.854,2763,3.854,2764,4.4,2765,3.854,2766,4.828,2767,3.854,2768,3.095,2769,3.854,2770,5.478,2771,4.143,2772,3.854,2773,7.059,2774,3.854,2775,3.854,2776,3.854,2777,5.119,2778,5.478,2779,3.095,2780,3.396,2781,5.478,2782,5.478,2783,3.396,2784,3.854,2785,7.838,2786,3.854,2787,3.854,2788,3.854,2789,3.854,2790,3.854,2791,6.941,2792,3.854,2793,3.854,2794,3.854,2795,3.854,2796,3.854,2797,3.854,2798,3.854,2799,3.854,2800,5.478,2801,3.854,2802,3.854,2803,5.478,2804,3.854,2805,3.854,2806,3.854,2807,3.854,2808,3.854,2809,3.854,2810,3.854,2811,3.854,2812,3.854,2813,3.854,2814,3.854,2815,3.854,2816,3.396,2817,3.854,2818,3.854,2819,3.854,2820,3.854,2821,5.478,2822,3.854,2823,4.4,2824,3.396,2825,3.854,2826,3.854,2827,3.854,2828,3.854,2829,3.854,2830,3.854,2831,3.854,2832,3.854,2833,3.854,2834,3.854,2835,3.854,2836,3.854,2837,5.617,2838,5.478,2839,3.854,2840,3.396,2841,3.854,2842,5.478,2843,3.396,2844,5.478,2845,4.4,2846,3.095,2847,3.854,2848,3.854,2849,3.805,2850,3.396,2851,3.854,2852,3.854,2853,3.854,2854,3.854,2855,3.854,2856,3.396,2857,3.854]],["title/interfaces/NodeComponentProxy.html",[106,0.111,1663,2.3]],["body/interfaces/NodeComponentProxy.html",[3,0.084,4,0.073,5,0.061,7,0.073,16,0.565,18,0.531,19,0.01,20,0.393,21,0.143,50,0.407,51,0.877,57,1.137,61,2.068,63,1.137,67,1.821,69,1.13,73,1.496,74,2.568,81,1.076,82,0.974,83,0.144,85,0.522,91,2.419,94,0.268,100,1.867,106,0.222,155,1.39,165,0.7,183,1.52,187,0.522,202,0.565,207,2.068,230,1.375,270,1.216,317,0.007,318,0.007,319,0.17,336,3.129,337,0.927,339,1.926,341,1.684,348,1.775,355,2.3,381,0.735,400,1.247,402,2.735,424,1.698,427,1.08,441,1.867,535,1.216,539,3.309,640,1.39,646,2.068,675,2.792,688,2.971,701,2.836,735,3.713,893,1.684,894,3.283,896,1.309,961,2.539,1044,1.695,1049,2.119,1078,1.92,1158,1.728,1169,1.728,1312,3.068,1370,3.172,1403,3.533,1404,3.172,1554,3.533,1558,3.533,1562,3.533,1601,3.283,1604,2.229,1621,2.456,1645,2.735,1646,2.845,1647,2.845,1648,3.675,1649,3.675,1650,4.704,1651,2.635,1652,3.283,1653,2.635,1654,2.845,1655,2.845,1656,2.456,1657,3.675,1658,2.375,1659,3.675,1660,3.675,1661,3.068,1662,1.981,1663,3.533,1664,3.77,1665,2.735,1666,2.845,1667,2.845,1668,2.845,1669,2.735,1670,2.375,1671,2.456,1672,2.542,1673,2.845,1674,2.735,1675,3.914,1676,2.735,1677,2.735,1678,3.675,1679,2.456,1680,3.533,1681,4.454,1682,2.635,1683,2.735,1684,2.542,1685,2.845,1686,2.735,1687,2.735,1688,3.675,1689,2.735,1690,2.845,1691,2.845]],["title/interfaces/NodeMethods.html",[106,0.111,983,2.138]],["body/interfaces/NodeMethods.html",[0,0.329,3,0.05,4,0.043,5,0.036,7,0.043,8,1.048,16,0.505,19,0.01,20,0.232,21,0.075,24,0.827,50,0.28,57,0.786,75,1.022,82,1.319,83,0.125,85,0.454,94,0.243,97,1.329,106,0.118,109,2.246,114,0.719,118,1.375,130,1.673,155,0.636,163,0.727,164,0.552,165,0.518,177,2.766,178,0.672,187,0.499,196,1.022,201,1.022,209,1.987,213,0.922,222,1.869,240,0.876,258,1.056,265,0.808,281,1.318,317,0.005,318,0.005,337,0.548,346,2.058,381,0.776,384,2.006,392,1.981,393,1.758,400,1.605,424,0.702,427,1.017,453,0.996,464,2.018,468,1.392,469,1.931,480,1.108,483,3.898,538,2.091,576,1.649,596,2.864,607,1.628,701,2.647,775,1.241,874,1.392,896,0.774,914,1.874,936,3.614,937,1.503,938,2.835,939,2.309,940,3.405,941,3.566,942,2.835,943,3.566,944,3.566,945,2.835,946,3.803,947,4.039,948,2.353,949,3.566,950,3.113,954,3.901,961,1.91,962,2.835,963,2.735,964,3.338,965,2.864,966,3.159,970,3.636,971,1.558,972,1.558,973,1.558,974,1.558,975,1.558,976,1.503,977,1.405,978,3.517,979,1.405,980,1.86,981,3.338,982,2.27,983,2.735,984,2.672,985,1.405,986,1.36,987,2.054,988,2.835,989,2.835,990,1.558,991,2.835,992,2.353,993,2.835,994,1.558,995,1.558,996,3.159,997,1.558,998,2.835,999,2.353,1000,1.558,1001,1.558,1002,1.558,1003,1.558,1004,3.359,1005,2.353,1006,1.558,1007,1.558,1008,2.353,1009,1.558,1010,1.558,1011,2.054,1012,1.874,1013,1.558,1014,1.503,1015,1.558,1016,3.391,1017,3.976,1018,2.353,1019,4.094,1020,4.039,1021,3.391,1022,2.353,1023,2.353,1024,3.159,1025,3.159,1026,3.159,1027,2.757,1028,3.159,1029,3.159,1030,3.232,1031,1.558,1032,1.558,1033,2.835,1034,2.835,1035,2.835,1036,2.054,1037,1.558,1038,1.558,1039,1.405,1040,1.558,1041,1.503,1042,1.558,1043,1.558,1044,0.892,1045,1.558,1046,1.558,1047,3.232,1048,3.048,1049,1.967,1050,3.702,1051,4.218,1052,3.159,1053,2.353,1054,2.353,1055,3.159,1056,2.475,1057,1.558,1058,1.558,1059,1.558,1060,1.36,1061,1.558,1062,2.353,1063,2.353,1064,2.353,1065,2.353,1066,2.353,1067,2.353,1068,1.558,1069,1.558,1070,1.558,1071,1.558,1072,2.054,1073,1.078,1074,3.159,1075,1.558,1076,1.558,1077,1.503,1078,0.794,1079,1.503,1080,2.835,1081,2.353,1082,2.353,1083,3.159,1084,3.159,1085,2.353,1086,2.353,1087,2.353,1088,3.566,1089,2.353,1090,3.566,1091,1.558,1092,2.353,1093,2.353,1094,2.353,1095,3.584,1096,3.391,1097,3.566,1098,1.503,1099,1.558,1100,2.353,1101,3.702,1102,2.353,1103,3.566,1104,3.901,1105,2.353,1106,3.159,1107,3.812,1108,2.353,1109,1.769,1110,2.353,1111,2.353,1112,2.353,1113,2.27,1114,1.869,1115,2.353,1116,2.353,1117,2.353,1118,2.353,1119,2.835,1120,2.353,1121,2.835,1122,1.558,1123,3.113,1124,1.558,1125,1.558,1126,1.558,1127,1.558,1128,1.558,1129,1.405,1130,2.556,1131,1.558,1132,2.353,1133,2.353,1134,2.353,1135,2.353,1136,2.353,1137,2.353,1138,2.353,1139,2.353,1140,2.353,1141,1.318,1142,2.121,1143,1.318,1144,1.405,1145,1.241,1146,1.558,1147,1.36,1148,1.558,1149,1.36,1150,1.558,1151,1.558,1152,1.558,1153,1.558,1154,1.558,1155,1.558,1156,1.558,1157,2.054,1158,1.022,1159,0.97,1160,2.353,1161,2.27,1162,1.36,1163,1.558,1164,1.558,1165,1.558,1166,1.278,1167,1.558,1168,1.558,1169,1.022,1170,1.558,1171,1.558,1172,1.558,1173,2.353,1174,1.558,2858,3.071,2859,3.071]],["title/interfaces/NodeParams.html",[106,0.111,950,1.934]],["body/interfaces/NodeParams.html",[0,0.327,3,0.049,4,0.042,5,0.035,7,0.042,8,0.564,19,0.01,20,0.331,21,0.127,22,1.145,50,0.276,57,0.774,75,1.001,82,1.308,83,0.124,85,0.452,94,0.247,97,1.322,106,0.116,109,2.222,114,0.704,118,1.357,130,1.646,155,0.623,163,0.72,164,0.543,165,0.514,177,2.797,178,0.661,187,0.511,196,1.001,201,1.001,209,1.975,213,0.902,222,1.849,240,0.858,258,0.774,265,0.804,281,1.306,317,0.005,318,0.005,319,0.116,337,0.536,346,2.039,381,0.771,384,1.987,392,1.967,393,1.747,400,1.59,424,0.687,427,1.054,453,1.997,464,1.997,468,1.37,469,1.9,480,1.084,483,3.882,538,2.077,576,1.631,596,2.843,607,1.602,701,2.637,775,1.215,874,1.37,896,0.758,914,2.676,936,3.599,937,1.472,938,2.799,939,2.284,940,3.385,941,3.537,942,2.799,943,3.537,944,3.537,945,2.799,946,3.673,947,3.787,948,2.316,949,3.537,950,3.208,954,4.019,961,1.885,962,2.799,963,2.7,964,3.565,965,2.843,966,3.125,970,3.798,971,1.525,972,1.525,973,1.525,974,1.525,975,1.525,976,1.472,977,1.375,978,3.623,979,1.375,980,1.836,981,3.565,982,2.234,983,2.234,984,2.644,985,1.375,986,1.331,987,2.021,988,2.799,989,2.799,990,1.525,991,2.799,992,2.316,993,2.799,994,1.525,995,1.525,996,3.125,997,1.525,998,2.799,999,2.316,1000,1.525,1001,1.525,1002,1.525,1003,1.525,1004,3.343,1005,2.316,1006,1.525,1007,1.525,1008,2.316,1009,1.525,1010,1.525,1011,2.021,1012,1.844,1013,1.525,1014,1.472,1015,1.525,1016,3.36,1017,3.954,1018,2.316,1019,4.074,1020,4.019,1021,3.36,1022,2.316,1023,2.316,1024,3.125,1025,3.125,1026,3.125,1027,2.728,1028,3.125,1029,3.125,1030,3.208,1031,1.525,1032,1.525,1033,2.799,1034,2.799,1035,2.799,1036,2.021,1037,1.525,1038,1.525,1039,1.375,1040,1.525,1041,1.472,1042,1.525,1043,1.525,1044,0.878,1045,1.525,1046,1.525,1047,3.208,1048,3.015,1049,1.946,1050,3.676,1051,4.202,1052,3.125,1053,2.316,1054,2.316,1055,3.125,1056,2.443,1057,1.525,1058,1.525,1059,1.525,1060,1.331,1061,1.525,1062,2.316,1063,2.316,1064,2.316,1065,2.316,1066,2.316,1067,2.316,1068,1.525,1069,1.525,1070,1.525,1071,1.525,1072,2.021,1073,1.055,1074,3.125,1075,1.525,1076,1.525,1077,1.472,1078,0.777,1079,1.472,1080,2.799,1081,2.316,1082,2.316,1083,3.125,1084,3.125,1085,2.316,1086,2.316,1087,2.316,1088,3.537,1089,2.316,1090,3.537,1091,1.525,1092,2.316,1093,2.316,1094,2.316,1095,3.565,1096,3.36,1097,3.537,1098,1.472,1099,1.525,1100,2.316,1101,3.676,1102,2.316,1103,3.537,1104,3.878,1105,2.316,1106,3.125,1107,3.787,1108,2.316,1109,1.741,1110,2.316,1111,2.316,1112,2.316,1113,2.234,1114,1.849,1115,2.316,1116,2.316,1117,2.316,1118,2.316,1119,2.799,1120,2.316,1121,2.799,1122,1.525,1123,3.087,1124,1.525,1125,1.525,1126,1.525,1127,1.525,1128,1.525,1129,1.375,1130,2.523,1131,1.525,1132,2.316,1133,2.316,1134,2.316,1135,2.316,1136,2.316,1137,2.316,1138,2.316,1139,2.316,1140,2.316,1141,1.29,1142,2.087,1143,1.29,1144,1.375,1145,1.215,1146,1.525,1147,1.331,1148,1.525,1149,1.331,1150,1.525,1151,1.525,1152,1.525,1153,1.525,1154,1.525,1155,1.525,1156,1.525,1157,2.021,1158,1.001,1159,0.95,1160,2.316,1161,2.234,1162,1.331,1163,1.525,1164,1.525,1165,1.525,1166,1.252,1167,1.525,1168,1.525,1169,1.001,1170,1.525,1171,1.525,1172,1.525,1173,2.316,1174,1.525]],["title/components/NoteComponent.html",[640,0.905,855,1.874]],["body/components/NoteComponent.html",[0,0.164,3,0.093,4,0.058,5,0.049,7,0.081,8,1.078,16,0.967,18,0.768,19,0.01,20,0.408,21,0.142,22,1.032,24,1.477,50,0.376,52,0.897,67,1.56,73,1.281,81,1.482,83,0.067,88,2.259,94,0.265,97,1.275,114,1.346,134,2.977,154,1.522,163,0.625,165,0.32,178,1.036,191,1.372,216,2.321,227,0.664,240,2.041,258,1.382,265,0.654,280,0.834,281,1.133,317,0.006,318,0.006,319,0.146,336,2.809,342,2.752,343,3.281,344,2.595,345,2.092,346,2.036,347,3.483,348,2.444,350,1.894,351,4.477,366,2.172,384,1.238,398,3.597,424,0.942,427,0.928,430,1.065,444,1.77,450,2.466,505,3.788,535,0.966,538,1.148,576,1.894,591,1.119,640,1.37,641,1.666,642,2.13,643,1.95,644,1.886,645,1.95,646,1.148,648,2.838,649,3.838,650,3.722,652,2.628,654,2.628,662,4.278,667,5.063,669,4.477,670,3.069,671,5.95,675,3.584,685,5.063,686,5.799,688,3.448,696,5.577,706,1.666,707,1.666,717,3.788,724,2.581,775,1.666,777,2.977,800,4.278,809,2.581,830,5.436,831,3.767,833,3.311,834,3.271,835,2.838,836,3.311,838,3.43,840,4.084,841,1.95,842,1.716,843,1.95,844,1.95,845,1.716,846,1.95,847,1.77,848,1.95,849,1.77,850,1.95,851,1.826,852,1.95,853,1.77,854,1.95,855,3.069,856,1.95,857,1.95,858,1.77,859,1.95,860,1.77,861,1.95,862,1.77,863,1.95,864,1.826,865,1.95,866,1.77,867,1.95,868,1.716,869,1.95,870,1.77,871,1.95,872,1.95,873,1.77,874,1.238,875,1.95,876,1.77,877,1.716,878,1.716,879,1.95,880,1.826,881,1.572,882,1.95,892,2.255,903,4.616,920,3.43,939,1.529,965,1.618,980,2.2,1039,2.628,1191,3.281,1293,2.355,1296,2.259,1304,3.071,1310,2.259,1317,3.311,1318,3.634,1323,4.616,1324,3.311,1340,2.581,1341,4.924,1342,5.063,1343,3.634,1344,5.063,1345,2.928,1346,3.634,1347,4.278,1370,2.717,1381,5.063,1398,3.634,1405,3.071,1410,4.278,1435,3.634,1437,3.071,1438,3.634,1443,2.879,1450,3.281,1451,4.011,1452,5.063,1453,5.063,1454,2.915,1455,4.614,1456,5.063,1457,2.581,1458,3.634,1459,2.581,1460,3.311,1462,3.634,1463,3.634,1464,2.581,1467,3.634,1468,6.302,1653,4.253,1662,1.572,1679,2.717,1789,3.788,2043,3.634,2069,3.071,2097,4.183,2098,4.634,2099,4.292,2110,2.355,2117,2.172,2119,2.259,2122,2.717,2127,4.616,2128,2.718,2474,3.071,2475,2.581,2476,3.071,2477,3.071,2484,2.092,2485,2.581,2718,5.063,2735,5.063,2816,3.634,2823,3.311,2824,3.634,2840,5.063,2845,3.311,2849,3.43,2860,4.123,2861,6.612,2862,5.745,2863,6.302,2864,6.612,2865,6.612,2866,4.123,2867,6.612,2868,5.745,2869,4.123,2870,4.123,2871,5.745,2872,4.123,2873,4.123,2874,5.745,2875,4.123,2876,4.123,2877,4.123,2878,5.745,2879,5.745,2880,4.123,2881,4.123,2882,4.123,2883,4.123,2884,4.123,2885,7.151,2886,4.123,2887,4.123,2888,4.123,2889,4.123,2890,4.123,2891,4.123,2892,4.123,2893,4.123,2894,4.123,2895,4.123,2896,4.123,2897,5.745,2898,4.123,2899,3.634,2900,4.123,2901,5.745,2902,5.745,2903,4.123,2904,4.123,2905,4.123,2906,4.123,2907,4.123,2908,4.123,2909,4.123,2910,4.123,2911,4.123,2912,4.123,2913,4.123,2914,4.123,2915,4.123,2916,4.123,2917,4.123,2918,4.123,2919,4.123,2920,4.123,2921,4.123,2922,4.123,2923,4.123,2924,4.123,2925,4.123,2926,4.123,2927,4.123,2928,4.123,2929,5.745,2930,5.745,2931,5.745,2932,4.123,2933,3.071,2934,3.071,2935,4.123,2936,5.745,2937,4.123,2938,4.123,2939,4.123,2940,4.123,2941,4.123,2942,4.123,2943,4.123,2944,4.123,2945,4.123,2946,4.123]],["title/classes/OnlineStatus.html",[0,0.174,1157,1.934]],["body/classes/OnlineStatus.html",[0,0.325,2,0.896,3,0.047,4,0.041,5,0.034,7,0.041,8,1.014,16,0.878,18,0.297,19,0.01,20,0.27,21,0.126,22,0.742,24,1.081,50,0.27,57,0.917,75,0.968,82,1.386,83,0.123,85,0.455,94,0.243,97,1.31,106,0.113,109,2.185,114,0.682,118,1.33,130,1.606,155,0.603,163,0.71,164,0.53,165,0.506,177,2.772,178,0.645,187,0.5,196,0.968,201,0.968,202,0.317,209,1.997,213,0.873,222,1.818,227,0.469,240,0.83,258,1.167,265,0.799,281,1.287,317,0.005,318,0.005,319,0.113,346,2.01,381,0.789,384,2.15,392,2.006,393,1.766,400,1.567,424,0.665,427,1.034,453,0.943,464,1.963,468,1.336,469,1.853,480,1.05,483,3.857,538,2.056,576,1.604,596,2.811,607,1.563,701,2.658,775,1.176,874,1.336,896,0.734,914,1.799,936,3.646,937,1.425,938,2.743,939,2.246,940,3.727,941,3.748,942,3.312,943,3.748,944,3.748,945,3.312,946,3.765,947,3.987,948,3.312,949,3.634,950,3.048,952,4.413,954,3.987,955,2.565,958,2.565,959,2.565,960,2.032,961,2.07,962,3.073,963,2.965,964,3.379,965,2.899,966,3.312,967,2.565,968,2.565,970,3.581,971,1.477,972,1.477,973,1.477,974,1.477,975,1.477,976,1.425,977,1.331,978,3.464,979,1.331,980,1.799,981,3.276,982,2.179,983,2.179,984,2.599,985,1.331,986,1.289,987,1.972,988,2.743,989,2.743,990,1.477,991,2.743,992,2.259,993,2.743,994,1.477,995,1.477,996,3.073,997,1.477,998,2.743,999,2.259,1000,1.477,1001,1.477,1002,1.477,1003,1.477,1004,3.319,1005,2.259,1006,1.477,1007,1.477,1008,2.259,1009,1.477,1010,1.477,1011,1.972,1012,1.799,1013,1.477,1014,1.425,1015,1.477,1016,3.312,1017,3.921,1018,2.259,1019,4.045,1020,3.987,1021,3.312,1022,2.259,1023,2.259,1024,3.073,1025,3.073,1026,3.073,1027,2.682,1028,3.073,1029,3.073,1030,3.172,1031,1.477,1032,1.477,1033,3.312,1034,2.743,1035,2.743,1036,1.972,1037,1.477,1038,1.477,1039,1.331,1040,1.477,1041,1.425,1042,1.477,1043,1.477,1044,0.856,1045,1.477,1046,1.477,1047,3.172,1048,2.965,1049,1.913,1050,3.634,1051,4.177,1052,3.073,1053,2.259,1054,2.259,1055,3.073,1056,2.395,1057,1.477,1058,1.477,1059,1.477,1060,1.289,1061,1.477,1062,2.259,1063,2.259,1064,2.259,1065,2.259,1066,2.259,1067,2.259,1068,1.477,1069,1.477,1070,1.477,1071,1.477,1072,1.972,1073,1.022,1074,3.312,1075,1.477,1076,1.477,1077,1.425,1078,0.752,1079,1.425,1080,2.743,1081,2.259,1082,2.259,1083,3.073,1084,3.073,1085,2.259,1086,2.259,1087,2.259,1088,3.492,1089,2.259,1090,3.492,1091,1.477,1092,2.259,1093,2.259,1094,2.259,1095,3.535,1096,3.312,1097,3.492,1098,1.425,1099,1.477,1100,2.259,1101,3.634,1102,2.259,1103,3.492,1104,3.842,1105,2.259,1106,3.073,1107,3.748,1108,2.259,1109,1.698,1110,2.259,1111,2.259,1112,2.259,1113,2.179,1114,1.818,1115,2.259,1116,2.259,1117,2.259,1118,2.259,1119,2.743,1120,2.259,1121,2.743,1122,1.477,1123,3.048,1124,1.477,1125,1.477,1126,1.477,1127,1.477,1128,1.477,1129,1.331,1130,2.473,1131,1.477,1132,2.259,1133,2.259,1134,2.259,1135,2.259,1136,2.259,1137,2.259,1138,2.259,1139,2.259,1140,2.259,1141,1.249,1142,2.036,1143,1.249,1144,1.331,1145,1.176,1146,1.477,1147,1.289,1148,1.477,1149,1.289,1150,1.477,1151,1.477,1152,1.477,1153,1.477,1154,1.477,1155,1.477,1156,1.477,1157,2.682,1158,1.482,1159,1.406,1160,3.073,1161,2.965,1162,1.972,1163,2.259,1164,2.259,1165,2.259,1166,1.853,1167,2.259,1168,2.259,1169,1.482,1170,2.259,1171,1.477,1172,3.073,1173,2.259,1174,1.477,2947,2.91,2948,2.91,2949,2.91,2950,2.91,2951,2.91,2952,2.91,2953,2.91]],["title/interfaces/OpClassifier.html",[106,0.111,176,2.3]],["body/interfaces/OpClassifier.html",[0,0.324,1,2.897,3,0.049,4,0.042,5,0.035,6,1.518,7,0.042,9,1.984,10,1.984,11,2.515,12,2.515,13,2.515,14,2.491,15,4.225,16,0.325,18,0.628,19,0.01,20,0.406,21,0.148,22,0.41,23,2.289,25,3.133,26,3.366,27,4.276,30,2.491,33,3.366,35,2.491,38,3.366,40,2.491,43,3.366,45,2.491,48,3.366,50,0.275,51,0.846,52,0.651,53,1.141,54,1.284,55,3.62,56,1.576,57,1.449,58,1.325,59,3.62,60,2.926,61,2.074,62,1.576,63,1.456,64,1.576,65,1.576,66,1.724,67,1.234,68,1.576,69,1.785,70,1.464,71,2.957,72,2.637,73,1.765,74,0.945,75,2.316,76,3.366,77,1.639,78,1.639,79,2.491,80,1.576,81,1.779,82,1.032,83,0.142,84,2.395,85,0.501,86,1.204,87,1.576,88,2.87,89,2.897,90,3.366,91,1.079,92,1.325,93,1.639,94,0.21,95,2.491,96,0.921,97,1.36,98,3.53,99,2.688,100,2.074,101,3.408,102,3.408,103,3.408,104,4.477,105,3.812,106,0.156,107,3.665,108,1.325,109,2.609,110,4.477,111,2.15,112,2.408,113,3.62,114,1.63,115,2.099,116,2.81,117,2.637,118,1.626,119,1.079,120,1.464,121,2.395,122,1.576,123,1.639,124,4.276,125,1.576,126,1.639,127,3.962,128,1.325,129,1.415,130,1.64,131,2.897,132,3.524,133,3.366,134,2.557,135,3.48,136,3.812,137,4.335,138,3.741,139,3.62,140,3.013,141,3.013,142,3.013,143,1.576,144,4.264,145,2.491,146,2.491,147,1.639,148,1.639,149,1.639,150,1.639,151,1.639,152,3.236,153,2.395,154,0.792,155,1.139,156,1.209,157,1.576,158,1.639,159,2.225,160,1.415,161,1.415,162,1.576,163,0.495,164,0.356,165,0.578,166,1.576,167,2.395,168,3.62,169,2.395,170,3.366,171,2.395,172,2.395,173,2.395,174,1.576,175,3.809,176,3.236,177,1.474,178,0.659,179,2.491,180,1.639,181,1.639,182,1.639,183,0.875,184,1.639,185,1.464,186,2.395,187,0.523,188,3.838,189,2.631,190,1.284,191,0.995,192,1.639,193,1.284,194,1.415,195,1.415,196,0.995,197,1.174,198,1.415,199,1.415,200,1.141,201,0.995,202,0.495,203,2.601,204,1.415,205,1.639,206,1.368,207,0.833,208,2.395,209,1.798,210,2.491,211,1.639,212,1.576,213,0.898,214,1.639,215,1.415,216,1.209,217,1.639,218,1.639,219,1.639,220,0.995,221,1.639,222,0.898,223,1.576,224,1.639,225,3.42,226,1.639,227,1.2,228,2.079,229,1.734,230,0.792,231,1.464,232,1.576,233,2.395,234,1.576,235,1.576,236,3.013,237,3.013,238,3.013,239,1.639,240,0.854,241,1.639,242,1.639,243,2.079,244,1.639,245,2.491,246,1.639,247,2.491,248,1.639,249,3.013,250,1.639,251,2.491,252,3.236,253,2.491,254,3.013,255,1.639,256,1.639,257,1.639,258,0.507,259,1.639,260,1.639,261,1.639,262,1.639,263,1.639,264,3.781,265,0.794,266,1.576,267,1.576,268,1.639,269,1.639,270,0.701,271,1.639,272,2.395,273,1.951,274,1.639,275,1.639,276,1.639,277,1.639,278,1.639,279,1.639,280,1.573,281,1.372,282,3.62,283,1.639,284,1.639,285,1.639,286,1.639,287,1.639,288,1.639,289,1.464,290,1.639,291,1.576,292,1.576,293,1.639,294,1.518,295,1.576,296,1.639,297,4.082,298,1.209,299,1.639,300,1.639,301,1.639,302,1.639,303,1.639,304,1.639,305,2.491,306,2.491,307,3.366,308,2.491,309,1.639,310,1.639,311,1.639,312,1.639,313,1.639,314,1.576,315,1.079,316,1.639,317,0.005,318,0.005,319,0.116,337,0.534]],["title/interfaces/OpComponentProxy.html",[106,0.111,1674,2.3]],["body/interfaces/OpComponentProxy.html",[3,0.084,4,0.073,5,0.061,7,0.073,16,0.563,18,0.529,19,0.01,20,0.423,21,0.141,50,0.406,51,0.876,57,1.377,61,2.315,63,1.134,67,1.816,69,1.126,73,1.492,74,2.565,81,1.072,82,0.97,83,0.144,85,0.527,91,2.413,94,0.268,100,1.862,106,0.222,155,1.386,165,0.7,183,1.514,187,0.522,202,0.563,207,2.064,230,1.37,270,1.567,317,0.007,318,0.007,319,0.17,336,2.828,337,0.923,339,1.918,341,1.677,348,1.768,355,2.298,381,0.734,400,1.242,402,2.724,424,1.529,427,1.079,441,1.862,535,1.212,539,3.306,640,1.537,646,2.064,675,2.785,688,2.963,701,2.834,735,3.708,893,1.677,894,3.63,896,1.304,961,2.286,1044,1.682,1049,2.113,1078,1.916,1158,1.721,1169,1.721,1312,3.06,1370,3.164,1403,3.524,1404,3.164,1554,3.524,1558,3.524,1562,3.524,1601,3.275,1604,2.22,1621,2.446,1645,2.724,1646,2.834,1647,2.834,1648,3.665,1649,3.665,1650,4.7,1651,2.624,1652,3.275,1653,2.624,1654,2.834,1655,2.834,1656,2.446,1657,4.063,1658,2.366,1659,2.834,1660,2.834,1661,2.366,1662,1.973,1663,2.724,1664,3.762,1665,2.724,1666,2.834,1667,2.834,1668,2.834,1669,2.724,1670,2.366,1671,2.446,1672,2.532,1673,3.665,1674,3.524,1675,3.906,1676,2.724,1677,2.724,1678,3.665,1679,2.446,1680,3.524,1681,4.449,1682,2.624,1683,2.724,1684,2.532,1685,2.834,1686,2.724,1687,2.724,1688,3.665,1689,2.724,1690,2.834,1691,2.834]],["title/components/OpHelpModal.html",[640,0.905,858,1.874]],["body/components/OpHelpModal.html",[0,0.201,3,0.082,4,0.071,5,0.059,7,0.071,8,1.233,16,0.954,18,0.748,19,0.01,20,0.431,21,0.144,22,0.69,24,1.172,50,0.388,51,0.768,52,1.095,57,1.241,61,2.159,63,1.114,66,1.395,69,1.43,72,2.82,73,1.466,81,1.71,83,0.082,85,0.381,94,0.198,97,0.853,112,1.972,114,1.539,116,3.005,153,3.461,154,2.055,163,0.844,178,1.236,187,0.478,191,1.674,202,0.715,227,0.81,243,2.301,252,2.65,258,1.114,280,1.328,317,0.007,318,0.007,319,0.167,381,0.65,386,3.6,424,1.502,430,1.3,441,1.829,450,2.82,467,2.713,520,3.107,535,1.178,576,2.055,587,2.82,591,1.366,640,1.516,641,2.033,642,2.436,643,2.379,644,2.301,645,2.379,646,1.4,648,3.141,649,3.907,650,3.79,652,3.005,654,3.005,670,3.33,706,2.033,707,2.033,777,2.735,831,2.65,841,2.379,842,2.094,843,2.379,844,2.379,845,2.094,846,2.379,847,2.159,848,2.379,849,2.159,850,2.379,851,2.228,852,2.379,853,2.159,854,2.379,855,2.159,856,2.379,857,2.379,858,3.33,859,2.379,860,2.159,861,2.379,862,2.159,863,2.379,864,2.228,865,2.379,866,2.159,867,2.379,868,2.094,869,2.379,870,2.159,871,2.379,872,2.379,873,2.159,874,1.51,875,2.379,876,2.159,877,2.094,878,2.094,879,2.379,880,2.228,881,1.919,882,2.379,1044,1.548,1319,4.179,1320,3.512,1326,5.416,1327,3.512,1345,2.228,1405,3.747,1662,2.506,1947,5.763,1963,4.434,1968,4.893,2003,3.15,2007,3.512,2008,3.747,2017,4.893,2097,2.463,2110,4.179,2117,2.65,2122,2.379,2131,3.003,2133,4.348,2134,5.108,2175,3.512,2435,5.277,2442,4.434,2479,3.747,2488,3.6,2933,3.747,2954,5.031,2955,6.571,2956,7.317,2957,6.571,2958,7.317,2959,8.049,2960,8.049,2961,7.317,2962,6.571,2963,5.031,2964,5.031,2965,5.031,2966,5.031,2967,5.031,2968,5.031,2969,5.031,2970,5.031,2971,5.031,2972,5.031,2973,5.031,2974,5.031,2975,5.031,2976,5.031,2977,5.031,2978,5.031,2979,5.031,2980,5.031,2981,5.031,2982,5.031,2983,5.031,2984,6.571,2985,6.571,2986,6.571,2987,5.791,2988,6.571,2989,6.571,2990,6.571,2991,6.571,2992,6.571,2993,6.571,2994,6.571,2995,5.791,2996,6.571,2997,5.277,2998,5.791,2999,5.791,3000,6.571,3001,3.747,3002,5.031,3003,5.031,3004,5.031,3005,6.571,3006,5.031]],["title/interfaces/OpInput.html",[106,0.111,525,2.138]],["body/interfaces/OpInput.html",[3,0.058,4,0.05,5,0.042,7,0.086,9,1.295,10,1.295,11,1.642,12,1.642,13,1.642,18,0.626,19,0.01,20,0.421,21,0.132,22,0.493,23,2.167,25,1.295,50,0.336,51,0.606,52,0.781,53,1.369,54,1.541,57,1.426,58,1.59,60,3.159,61,2.23,63,1.484,66,1.701,69,1.845,71,2.542,72,2.235,73,1.838,81,1.541,82,0.674,83,0.135,85,0.527,86,1.623,94,0.215,96,2.467,99,2.424,100,1.87,101,3.51,102,2.802,103,2.802,106,0.189,108,1.59,112,2.233,115,2.093,118,0.883,119,1.295,132,2.897,134,2.55,154,1.379,156,1.451,163,0.906,164,0.729,165,0.687,187,0.483,188,3.373,189,2.488,190,1.541,193,2.629,194,2.462,195,1.698,196,1.195,197,1.409,198,1.698,199,1.698,200,2.336,201,1.733,202,0.731,203,1.698,206,2.382,207,2.071,209,0.928,220,1.195,225,3.373,228,1.642,229,1.369,265,0.882,270,0.841,280,1.684,298,3.288,315,1.295,317,0.005,318,0.005,319,0.132,337,0.641,341,1.164,427,0.466,441,1.705,481,2.743,520,2.462,525,2.549,526,3.403,529,2.999,539,3.143,545,3.177,557,1.758,565,2.051,567,4.011,574,3.108,586,4.074,587,3.492,596,2.043,604,1.822,607,1.828,646,1.87,712,2.248,713,1.967,831,1.891,892,2.404,1036,1.59,1078,0.928,1114,1.078,1166,2.55,1298,1.822,1407,3.26,1459,2.248,1605,1.967,1644,1.698,1656,2.462,1658,2.382,1670,1.642,1694,4.441,1710,3.108,1858,1.967,1943,2.507,2065,3.635,2117,1.891,2131,2.143,2132,2.367,2133,3.539,2134,3.635,2135,3.878,2136,3.878,2137,3.878,2138,3.878,2139,2.674,2140,2.674,2141,2.674,2142,3.635,2143,5.004,2144,3.878,2145,3.878,2146,3.433,2147,3.878,2148,3.878,2149,2.674,2150,2.674,2151,2.507,2152,3.878,2153,2.674,2154,2.051,2155,2.674,2156,2.507,2157,2.507,2158,4.562,2159,5.54,2160,5.54,2161,2.507,2162,4.562,2163,4.562,2164,4.562,2165,4.562,2166,2.674,2167,4.562,2168,2.674,2169,3.878,2170,3.878,2171,3.878,2172,3.878,2173,3.878,2174,6.358,2175,2.507,2176,2.674,2177,2.674,2178,2.674,2179,2.674,2180,2.674,2181,2.674,2182,2.674,2183,2.674,2184,2.507,2185,2.674,2186,2.507,2187,6.314,2188,2.674,2189,2.674,2190,2.674,2191,2.507,2192,2.674,2193,2.674,2194,2.674,2195,2.674,2196,2.674,2197,5.004,2198,2.674,2199,4.562,2200,2.674,2201,3.878,2202,5.854,2203,5.854,2204,5.854,2205,2.674,2206,5.312,2207,5.715,2208,3.878,2209,2.674,2210,5.004,2211,2.674,2212,3.878,2213,3.878,2214,3.878,2215,3.878,2216,3.878,2217,3.878,2218,3.878,2219,3.878,2220,3.878,2221,3.878,2222,5.004,2223,3.878,2224,3.878,2225,2.674,2226,3.878,2227,2.674,2228,2.674,2229,3.878,2230,3.878,2231,2.674,2232,2.674,2233,3.878,2234,2.674,2235,2.674,2236,2.674,2237,2.674,2238,2.674,2239,2.674,2240,2.674,2241,2.367,2242,2.674,2243,2.674,2244,2.674,2245,2.674,2246,2.674,2247,2.674,2248,2.507]],["title/classes/OpSequencer.html",[0,0.174,431,2.138]],["body/classes/OpSequencer.html",[0,0.175,2,1.348,3,0.071,4,0.061,5,0.052,7,0.061,8,1.123,16,0.971,18,0.811,19,0.01,20,0.419,21,0.141,22,1.134,24,1.475,50,0.299,51,0.433,63,1.015,66,0.93,71,2.332,83,0.097,85,0.5,94,0.271,96,2.101,109,2.16,112,1.797,114,1.403,118,2.063,154,2.101,163,0.932,164,1.055,178,1.149,187,0.347,197,2.35,202,0.476,227,0.964,243,2.002,258,1.157,265,0.86,281,1.181,317,0.006,318,0.006,319,0.152,323,3.574,346,1.348,350,1.16,381,0.726,388,2.614,392,1.853,393,1.756,426,4.468,427,0.952,431,3.591,432,3.514,433,3.633,441,2.361,456,5.48,462,3.121,466,6.813,468,2.437,474,5.892,476,6.64,477,4.593,479,5.464,487,1.718,491,4.935,493,2.399,494,6.37,505,3.948,508,2.221,512,5.48,514,5.892,516,5.892,519,3.329,520,2.831,522,4.499,532,2.841,534,2.399,538,1.219,539,1.67,541,3.897,543,3.897,545,2.07,546,2.002,551,4.18,553,2.5,713,3.739,811,3.594,881,1.67,1159,1.383,1191,3.42,1661,2.739,1726,2.886,1742,2.886,1772,2.741,1773,3.038,1882,4.38,2080,4.809,2253,3.26,2352,3.516,2370,4.638,2451,3.858,2635,3.516,2636,4.809,2637,4.809,2638,5.48,2640,3.516,3007,3.858,3008,5.987,3009,5.987,3010,5.987,3011,6.014,3012,6.014,3013,6.014,3014,6.014,3015,4.809,3016,5.277,3017,5.277,3018,5.277,3019,7.336,3020,4.809,3021,5.987,3022,5.987,3023,5.987,3024,5.987,3025,5.987,3026,6.824,3027,4.378,3028,4.378,3029,4.378,3030,4.378,3031,4.378,3032,4.378,3033,5.277,3034,4.378,3035,3.858,3036,4.378,3037,5.277,3038,4.378,3039,5.277,3040,6.465,3041,4.378,3042,4.378,3043,3.858,3044,4.378,3045,4.378,3046,4.378,3047,4.378,3048,4.378,3049,3.516,3050,4.378,3051,4.378,3052,4.378,3053,4.378,3054,4.378,3055,7.932,3056,4.378,3057,4.378,3058,4.378,3059,7.682,3060,4.378,3061,4.378,3062,5.987,3063,4.378,3064,4.378,3065,4.378,3066,2.886,3067,5.987,3068,4.378,3069,4.378,3070,5.987,3071,4.378,3072,4.378,3073,4.378,3074,3.858,3075,4.378,3076,5.987]],["title/components/OpSequencerComponent.html",[640,0.905,862,1.874]],["body/components/OpSequencerComponent.html",[0,0.181,3,0.074,4,0.064,5,0.054,7,0.064,8,1.153,16,0.847,18,0.465,19,0.01,20,0.373,21,0.13,22,0.624,24,0.811,50,0.373,63,1.32,83,0.074,96,2.143,114,1.439,164,0.731,191,1.514,227,0.99,258,1.042,280,1.777,317,0.006,318,0.006,319,0.156,342,1.893,344,2.925,350,1.843,351,2.847,388,2.715,425,3.927,426,4.501,430,1.175,437,4.1,438,2.999,439,3.681,450,2.637,454,4.446,467,3.134,480,2.894,487,1.785,501,4.935,506,4.576,521,2.598,535,1.065,573,3.367,576,1.974,577,2.08,591,1.235,619,5.203,640,1.442,641,1.838,642,2.279,643,2.151,644,2.08,645,2.151,646,1.266,648,2.987,649,3.874,650,3.757,652,2.811,654,2.811,670,3.199,706,1.838,707,1.838,777,2.558,809,2.847,834,3.409,835,3.52,840,4.257,841,2.151,842,1.893,843,2.151,844,2.151,845,1.893,846,2.151,847,1.952,848,2.151,849,1.952,850,2.151,851,2.014,852,2.151,853,1.952,854,2.151,855,1.952,856,2.151,857,2.151,858,1.952,859,2.151,860,1.952,861,2.151,862,3.199,863,2.151,864,2.014,865,2.151,866,1.952,867,2.151,868,1.893,869,2.151,870,1.952,871,2.151,872,2.151,873,1.952,874,1.365,875,2.151,876,1.952,877,1.893,878,1.893,879,2.151,880,2.014,881,1.735,882,2.151,891,4.265,1298,3.118,1300,2.598,1534,3.509,1662,2.343,1704,2.847,1705,3.175,1716,2.847,1799,5.132,2097,3.927,2098,4.541,2099,3.237,2102,4.684,2104,3.387,2106,4.57,2110,3.975,2111,3.175,2116,4.576,2117,4.226,2119,4.922,2120,3.387,2122,3.944,2311,3.175,2475,5.438,2484,2.308,2485,2.847,2488,4.493,2494,5.407,2515,5.797,2771,2.715,2849,3.668,2933,3.387,2934,3.387,3077,8.022,3078,6.443,3079,4.548,3080,6.959,3081,6.145,3082,5.986,3083,3.653,3084,4.548,3085,4.548,3086,4.548,3087,4.548,3088,4.548,3089,5.415,3090,5.415,3091,5.986,3092,3.653,3093,3.653,3094,5.986,3095,5.986,3096,5.589,3097,4.008,3098,4.935,3099,4.935,3100,2.999,3101,4.008,3102,4.548,3103,5.415,3104,3.653,3105,6.064,3106,4.548,3107,5.415,3108,4.008,3109,4.548,3110,4.008,3111,6.862,3112,6.924,3113,3.653,3114,3.653,3115,3.653,3116,3.653,3117,4.935,3118,3.653,3119,7.123,3120,6.789,3121,5.589,3122,3.653,3123,3.653,3124,5.589,3125,3.653,3126,3.653,3127,3.653,3128,3.653,3129,3.653,3130,3.653,3131,3.653,3132,3.653,3133,3.653,3134,3.653,3135,3.653,3136,5.415,3137,4.548,3138,4.548,3139,4.548,3140,4.548,3141,4.548,3142,4.548,3143,4.548,3144,4.548,3145,4.548]],["title/interfaces/OperationClassification.html",[106,0.111,2248,3.049]],["body/interfaces/OperationClassification.html",[3,0.059,4,0.051,5,0.043,7,0.086,9,1.306,10,1.306,11,1.656,12,1.656,13,1.656,18,0.629,19,0.01,20,0.421,21,0.13,22,0.497,23,2.181,25,1.306,50,0.337,51,0.609,52,0.788,53,1.381,54,1.554,57,1.382,58,1.604,60,3.17,61,2.235,63,1.48,66,1.705,69,1.797,71,2.55,72,2.248,73,1.842,81,1.546,82,0.679,83,0.136,85,0.526,86,0.959,94,0.185,96,2.472,99,2.433,100,1.877,101,3.519,102,2.815,103,2.815,106,0.19,108,1.604,112,2.148,115,2.103,118,0.891,119,1.306,132,2.911,134,2.562,154,1.387,156,1.463,163,0.908,164,0.733,165,0.688,187,0.492,188,3.385,189,2.643,190,1.554,193,2.642,194,2.477,195,1.712,196,1.205,197,1.421,198,1.712,199,1.712,200,2.347,201,1.743,202,0.734,203,1.712,206,2.396,207,2.077,209,0.936,220,1.205,225,3.385,228,1.656,229,1.381,265,0.882,270,0.848,280,1.687,298,3.294,315,1.306,317,0.005,318,0.005,319,0.133,337,0.646,341,1.174,427,0.47,441,2.077,481,2.759,520,2.477,525,1.772,526,3.412,529,3.013,539,3.149,545,3.19,557,1.772,565,2.068,567,4.027,574,3.127,586,2.992,587,3.302,596,2.056,604,1.837,607,1.271,646,1.877,712,2.267,713,1.984,831,1.907,892,2.647,1036,1.604,1078,0.936,1114,1.087,1166,2.562,1298,2.658,1407,2.267,1459,2.267,1605,1.984,1644,1.712,1656,2.477,1658,2.396,1670,1.656,1694,4.793,1710,3.127,1858,1.984,1943,2.528,2065,3.657,2117,1.907,2131,2.162,2132,2.387,2133,3.553,2134,3.657,2135,3.901,2136,3.901,2137,3.901,2138,3.901,2139,2.697,2140,2.697,2141,2.697,2142,2.528,2143,4.584,2144,2.697,2145,2.697,2146,2.387,2147,2.697,2148,2.697,2149,2.697,2150,2.697,2151,2.528,2152,3.901,2153,2.697,2154,2.068,2155,2.697,2156,2.528,2157,2.528,2158,4.584,2159,5.556,2160,5.556,2161,2.528,2162,4.584,2163,4.584,2164,4.584,2165,4.584,2166,2.697,2167,4.584,2168,2.697,2169,3.901,2170,3.901,2171,3.901,2172,3.901,2173,3.901,2174,6.366,2175,2.528,2176,2.697,2177,2.697,2178,2.697,2179,2.697,2180,2.697,2181,2.697,2182,2.697,2183,2.697,2184,2.528,2185,2.697,2186,2.528,2187,6.323,2188,2.697,2189,2.697,2190,2.697,2191,2.528,2192,2.697,2193,2.697,2194,2.697,2195,2.697,2196,2.697,2197,5.024,2198,2.697,2199,4.584,2200,2.697,2201,3.901,2202,5.867,2203,5.867,2204,5.867,2205,2.697,2206,5.33,2207,5.73,2208,3.901,2209,2.697,2210,5.024,2211,2.697,2212,3.901,2213,3.901,2214,3.901,2215,3.901,2216,3.901,2217,3.901,2218,3.901,2219,3.901,2220,3.901,2221,3.901,2222,5.024,2223,3.901,2224,3.901,2225,2.697,2226,3.901,2227,2.697,2228,2.697,2229,3.901,2230,3.901,2231,2.697,2232,2.697,2233,3.901,2234,2.697,2235,2.697,2236,2.697,2237,2.697,2238,2.697,2239,2.697,2240,2.697,2241,2.387,2242,2.697,2243,2.697,2244,2.697,2245,2.697,2246,3.901,2247,3.901,2248,3.657]],["title/interfaces/OperationParam.html",[54,1.874,106,0.111]],["body/interfaces/OperationParam.html",[0,0.184,3,0.075,4,0.065,5,0.095,7,0.065,19,0.01,20,0.435,21,0.149,24,0.823,51,0.797,53,1.758,54,3.638,57,1.052,63,1.188,66,1.317,69,1.003,73,1.836,81,1.285,82,1.164,83,0.141,85,0.477,86,1.856,94,0.275,96,1.419,106,0.117,119,1.663,120,2.257,129,3.809,154,1.856,155,1.285,156,1.863,165,0.694,178,1.316,183,2.193,185,3.036,187,0.533,189,2.916,200,1.758,202,0.762,204,2.18,229,1.758,265,0.774,270,1.453,281,0.909,294,2.339,297,4.029,317,0.007,318,0.007,319,0.158,337,0.823,339,1.71,381,0.848,384,1.384,393,1.418,400,1.107,427,0.909,480,1.663,542,3.04,557,2.257,587,1.979,702,4.618,892,2.434,1011,2.746,1044,1.442,1372,3.434,1473,2.752,1566,3.219,1579,3.267,1684,2.257,1858,2.526,1866,4.089,1973,5.998,2078,3.434,2121,6.38,2133,2.429,2241,3.04,2279,5.623,2370,4.841,3001,3.434,3100,5.589,3146,3.434,3147,4.063,3148,4.61,3149,4.61,3150,4.61,3151,3.703,3152,4.063,3153,4.063,3154,6.61,3155,3.703,3156,5.918,3157,4.063,3158,5.465,3159,5.219,3160,5.465,3161,3.434,3162,5.465,3163,5.465,3164,5.465,3165,4.618,3166,7.616,3167,4.063,3168,4.981,3169,4.063,3170,3.703,3171,4.063,3172,4.063,3173,4.063,3174,5.219,3175,5.582,3176,3.703,3177,3.434,3178,3.434,3179,4.981,3180,3.219,3181,3.219,3182,3.703,3183,3.703,3184,3.703,3185,3.703,3186,4.063,3187,4.063,3188,4.063,3189,4.063,3190,4.063,3191,5.465,3192,5.465,3193,5.465,3194,4.063,3195,4.063,3196,5.465,3197,4.063,3198,4.063,3199,4.063,3200,4.063,3201,3.703]],["title/interfaces/OperationProperties.html",[106,0.111,208,2.3]],["body/interfaces/OperationProperties.html",[0,0.324,1,2.897,3,0.049,4,0.042,5,0.035,6,1.518,7,0.042,9,1.984,10,1.984,11,2.516,12,2.516,13,2.516,14,2.492,15,4.226,16,0.326,18,0.628,19,0.01,20,0.406,21,0.147,22,0.755,23,2.29,25,3.133,26,3.366,27,4.276,30,2.492,33,3.366,35,2.492,38,3.366,40,2.492,43,3.366,45,2.492,48,3.366,50,0.275,51,0.846,52,0.651,53,1.141,54,1.284,55,3.621,56,1.576,57,1.468,58,1.325,59,3.621,60,2.927,61,2.074,62,1.576,63,1.456,64,1.576,65,1.576,66,1.742,67,1.235,68,1.576,69,1.785,70,1.465,71,2.968,72,2.637,73,1.765,74,0.945,75,2.316,76,3.366,77,1.64,78,1.64,79,2.492,80,1.576,81,1.779,82,1.032,83,0.142,84,2.395,85,0.508,86,1.205,87,1.576,88,2.87,89,2.897,90,3.014,91,1.079,92,1.325,93,1.64,94,0.225,95,2.492,96,0.921,97,1.36,98,3.531,99,2.688,100,2.074,101,3.409,102,3.409,103,3.409,104,4.478,105,3.813,106,0.156,107,3.666,108,1.325,109,2.609,110,4.478,111,2.151,112,2.408,113,3.621,114,1.63,115,2.1,116,2.81,117,2.637,118,1.626,119,1.079,120,1.465,121,2.395,122,1.576,123,1.64,124,4.276,125,1.576,126,1.64,127,3.813,128,1.325,129,1.415,130,1.64,131,2.897,132,3.524,133,3.366,134,2.558,135,3.481,136,3.813,137,4.083,138,3.524,139,3.621,140,3.014,141,3.014,142,3.014,143,1.576,144,4.265,145,2.492,146,2.492,147,1.64,148,1.64,149,1.64,150,1.64,151,1.64,152,3.237,153,2.395,154,0.793,155,1.14,156,1.209,157,1.576,158,1.64,159,2.226,160,1.415,161,1.415,162,1.576,163,0.495,164,0.356,165,0.578,166,1.576,167,2.395,168,3.621,169,2.395,170,3.366,171,2.395,172,2.395,173,2.395,174,1.576,175,3.81,176,2.897,177,0.97,178,0.434,179,1.64,180,1.64,181,1.64,182,1.64,183,0.876,184,1.64,185,1.465,186,2.897,187,0.519,188,3.839,189,2.632,190,1.952,191,1.513,192,2.492,193,1.952,194,1.415,195,1.415,196,0.996,197,1.174,198,1.415,199,1.415,200,1.141,201,0.996,202,0.495,203,3.291,204,1.415,205,1.64,206,1.369,207,0.833,208,2.897,209,1.869,210,3.621,211,1.64,212,1.576,213,0.898,214,1.64,215,1.415,216,1.209,217,1.64,218,1.64,219,1.64,220,0.996,221,1.64,222,0.898,223,1.576,224,1.64,225,3.42,226,1.64,227,1.2,228,2.08,229,1.734,230,0.793,231,1.465,232,1.576,233,2.395,234,1.576,235,1.576,236,3.014,237,3.014,238,3.014,239,1.64,240,0.854,241,1.64,242,1.64,243,2.08,244,1.64,245,2.492,246,1.64,247,2.492,248,1.64,249,3.014,250,1.64,251,2.492,252,3.237,253,2.492,254,3.014,255,1.64,256,1.64,257,1.64,258,0.507,259,1.64,260,1.64,261,1.64,262,1.64,263,1.64,264,3.781,265,0.794,266,1.576,267,1.576,268,1.64,269,1.64,270,0.701,271,1.64,272,2.395,273,1.952,274,1.64,275,1.64,276,1.64,277,1.64,278,1.64,279,1.64,280,1.574,281,1.372,282,3.621,283,1.64,284,1.64,285,1.64,286,1.64,287,1.64,288,1.64,289,1.465,290,1.64,291,1.576,292,1.576,293,1.64,294,1.518,295,1.576,296,1.64,297,4.083,298,1.209,299,1.64,300,1.64,301,1.64,302,1.64,303,1.64,304,1.64,305,2.492,306,2.492,307,3.366,308,2.492,309,1.64,310,1.64,311,1.64,312,1.64,313,1.64,314,1.576,315,1.079,316,1.64,317,0.005,318,0.005,319,0.116,337,0.534]],["title/components/OpsComponent.html",[640,0.905,860,1.874]],["body/components/OpsComponent.html",[0,0.191,3,0.078,4,0.067,5,0.056,7,0.067,8,1.193,16,0.963,18,0.777,19,0.01,20,0.435,21,0.141,22,1.044,24,1.413,50,0.416,67,1.726,74,1.511,83,0.078,85,0.368,88,2.44,96,1.957,97,1.211,114,1.489,154,1.891,164,0.57,178,1.102,187,0.489,191,1.592,227,0.771,258,1.29,265,0.473,280,1.538,281,1.5,317,0.007,318,0.007,319,0.162,342,1.992,344,2.802,350,1.267,351,2.995,359,3.795,430,1.236,441,2.266,450,2.728,467,2.936,535,1.121,576,2.015,577,2.188,591,1.299,640,1.479,641,1.933,642,2.357,643,2.263,644,2.188,645,2.263,646,1.332,648,3.064,649,3.891,650,3.774,652,2.908,654,2.908,670,3.265,706,1.933,707,1.933,734,3.34,773,2.995,776,3.843,777,2.646,835,2.054,840,4.523,841,2.263,842,1.992,843,2.263,844,2.263,845,1.992,846,2.263,847,2.054,848,2.263,849,2.054,850,2.263,851,2.119,852,2.263,853,2.054,854,2.263,855,2.054,856,2.263,857,2.263,858,2.054,859,2.263,860,3.265,861,2.263,862,2.054,863,2.263,864,2.119,865,2.263,866,2.054,867,2.263,868,1.992,869,2.263,870,2.054,871,2.263,872,2.263,873,2.054,874,1.436,875,2.263,876,2.054,877,1.992,878,1.992,879,2.263,880,2.119,881,1.825,882,2.263,965,1.878,980,2.376,1044,1.523,1293,2.733,1319,4.523,1320,3.34,1325,6.11,1326,5.311,1327,3.34,1345,3.507,1411,5.317,1441,3.34,1534,2.733,1662,2.723,1883,2.856,1918,2.995,1947,5.311,1968,5.317,2003,2.995,2007,3.34,2008,3.563,2013,3.843,2017,4.734,2062,3.843,2097,3.495,2098,4.007,2099,3.349,2102,4.077,2106,2.621,2110,4.523,2111,3.34,2113,3.843,2114,3.155,2115,3.34,2116,3.563,2119,3.483,2122,3.006,2154,2.733,2191,3.34,2418,5.734,2427,3.563,2436,4.217,2479,3.563,2485,2.995,2488,3.483,2489,5.603,2771,3.795,2843,4.217,2849,2.856,2933,3.563,2934,4.734,3015,5.106,3089,5.603,3090,5.603,3094,3.843,3096,5.106,3103,5.603,3104,5.106,3105,4.438,3202,4.785,3203,7.139,3204,6.357,3205,6.357,3206,7.139,3207,7.139,3208,6.357,3209,6.357,3210,6.357,3211,6.357,3212,6.357,3213,4.785,3214,6.357,3215,4.785,3216,4.785,3217,6.357,3218,4.785,3219,6.357,3220,4.785,3221,6.357,3222,4.785,3223,4.785,3224,4.785,3225,4.785,3226,4.785,3227,7.139,3228,4.785,3229,4.785,3230,4.785,3231,4.785,3232,4.785,3233,6.357,3234,4.785,3235,4.785,3236,4.785,3237,4.785,3238,4.785,3239,4.785,3240,4.785,3241,4.785,3242,6.357,3243,4.785,3244,4.785,3245,4.785,3246,4.785,3247,4.785,3248,4.785,3249,4.785,3250,4.785,3251,4.785,3252,4.785,3253,4.785,3254,4.785,3255,4.785,3256,4.785,3257,4.785,3258,6.357,3259,5.603,3260,6.357,3261,4.785,3262,7.139,3263,4.785,3264,4.785,3265,4.785]],["title/interfaces/PairedOp.html",[106,0.111,605,2.3]],["body/interfaces/PairedOp.html",[3,0.068,4,0.059,5,0.05,7,0.059,9,1.513,10,1.513,19,0.01,20,0.416,21,0.135,23,3.15,25,1.513,50,0.378,51,0.832,52,0.913,53,1.6,57,1.283,61,1.618,63,1.283,66,1.764,67,1.139,69,1.265,71,3.044,73,0.936,83,0.143,85,0.454,94,0.263,96,1.292,97,1.388,99,2.407,100,1.857,106,0.183,111,1.984,112,1.745,115,1.434,138,2.749,163,0.632,164,0.974,165,0.559,187,0.387,189,1.885,202,0.456,209,1.724,215,1.984,220,1.396,265,0.873,270,0.983,280,1.801,315,1.513,317,0.006,318,0.006,319,0.148,337,0.748,350,1.767,357,2.766,381,0.575,424,0.959,425,3.832,426,3.795,427,1.042,431,2.846,432,3.887,433,3.578,434,2.128,441,2.179,444,1.8,468,1.259,487,2.969,499,3.833,508,2.95,518,2.766,519,3.496,520,1.984,521,2.396,522,4.75,523,1.984,524,1.695,525,3.266,526,2.659,527,3.471,528,3.321,529,3.266,530,2.396,531,2.504,532,3.594,533,1.984,534,2.298,535,0.983,536,2.504,537,3.124,538,2.278,539,2.217,540,2.766,541,4.115,542,4.399,543,3.811,544,3.811,545,3.978,546,3.581,547,4.301,548,3.124,549,4.33,550,4.517,551,4.658,552,4.969,553,4.321,554,3.811,555,3.124,556,3.124,557,2.053,558,3.124,559,4.301,560,3.124,561,3.124,562,2.396,563,2.504,564,2.298,565,3.321,566,4.33,567,2.504,568,5.366,569,3.471,570,3.124,571,4.301,572,3.471,573,4.483,574,2.504,575,3.124,576,1.54,577,3.743,578,3.124,579,3.124,580,3.833,581,2.929,582,3.124,583,2.929,584,3.124,585,3.124,586,3.321,587,2.495,588,2.929,589,3.124,590,4.33,591,1.579,592,4.33,593,3.321,594,4.33,595,3.124,596,1.646,597,4.33,598,3.124,599,3.124,600,2.504,601,3.124,602,4.059,603,4.33,604,2.128,605,3.795,606,2.929,607,1.473,608,2.929,609,2.929,610,4.33,611,3.124,612,2.766,613,3.124,614,2.504,615,4.059,616,3.124,617,2.929,618,4.33,619,4.059,620,3.124,621,3.124,622,3.124,623,4.33,624,4.115,625,4.33,626,4.33,627,4.33,628,3.124,629,3.124,630,3.124,631,3.124,632,3.124,633,3.124,634,2.298,635,3.833,636,3.833,637,3.833,638,3.124,639,2.766]],["title/components/ParameterComponent.html",[640,0.905,866,1.874]],["body/components/ParameterComponent.html",[0,0.162,3,0.066,4,0.057,5,0.067,7,0.057,8,1.066,16,0.963,18,0.726,19,0.01,20,0.418,21,0.144,22,0.9,24,1.17,50,0.355,51,0.562,52,0.884,66,0.862,67,1.543,73,1.584,74,1.283,81,1.75,83,0.092,86,1.505,88,2.241,94,0.249,97,1.112,114,1.331,155,0.841,156,2.297,163,0.442,164,0.483,165,0.674,178,1.286,187,0.329,191,1.351,197,3.315,223,2.994,227,0.654,258,1.205,265,0.562,280,0.821,281,1.666,317,0.006,318,0.006,319,0.144,342,2.73,344,3.345,348,2.241,350,1.881,381,0.562,424,0.928,430,1.049,450,2.439,462,2.6,464,1.316,467,2.108,489,3.558,535,0.951,554,2.319,576,1.881,591,1.102,640,1.359,641,1.641,642,2.108,643,1.92,644,1.857,645,1.92,646,2.214,648,2.814,649,3.832,650,3.717,652,2.6,654,2.6,670,3.049,676,3.261,677,5.22,706,1.641,707,1.641,713,4.628,730,2.835,734,2.835,777,2.366,834,1.857,835,3.484,840,3.745,841,1.92,842,1.69,843,1.92,844,1.92,845,1.69,846,1.92,847,1.743,848,1.92,849,1.743,850,1.92,851,1.798,852,1.92,853,1.743,854,1.92,855,1.743,856,1.92,857,1.92,858,1.743,859,1.92,860,1.743,861,1.92,862,1.743,863,1.92,864,1.798,865,1.92,866,3.049,867,1.92,868,1.69,869,1.92,870,1.743,871,1.92,872,1.92,873,1.743,874,1.219,875,1.92,876,1.743,877,1.69,878,1.69,879,1.92,880,1.798,881,1.549,882,1.92,906,4.105,980,2.488,1044,0.781,1145,2.297,1293,4.772,1296,2.225,1390,3.578,1474,2.994,1534,2.319,1611,2.225,1662,2.168,1671,1.92,1714,2.542,1883,2.424,2097,1.988,2098,3.454,2099,2.139,2102,2.319,2105,6.005,2106,3.114,2109,3.261,2110,3.246,2111,3.968,2114,2.677,2119,3.114,2121,3.024,2122,3.359,2127,2.835,2128,2.677,2133,2.994,2272,3.261,2278,5.667,2370,3.745,2386,5.779,2396,5.779,2418,5.266,2425,3.578,2426,3.578,2427,3.024,2431,3.578,2432,3.578,2449,6.829,2464,3.578,2466,6.59,2474,4.233,2475,2.542,2476,3.024,2477,3.024,2483,3.261,2484,2.06,2485,4.98,2486,4.233,2488,3.114,2493,3.024,2495,3.261,2741,3.578,2771,3.915,2837,5.009,2849,2.424,2856,3.578,2987,6.26,2998,3.578,3105,4.578,3156,2.835,3159,6.045,3161,6.045,3165,6.045,3170,3.261,3174,6.045,3175,3.024,3177,6.045,3178,6.045,3266,3.578,3267,6.557,3268,5.684,3269,5.684,3270,5.684,3271,6.557,3272,6.557,3273,6.557,3274,5.684,3275,4.06,3276,4.06,3277,4.06,3278,4.06,3279,4.06,3280,5.684,3281,4.06,3282,4.06,3283,5.684,3284,4.06,3285,4.06,3286,4.06,3287,4.06,3288,4.06,3289,4.06,3290,4.06,3291,4.06,3292,4.06,3293,4.06,3294,5.684,3295,5.684,3296,5.009,3297,4.06,3298,3.578,3299,4.06,3300,4.06,3301,5.684,3302,4.06,3303,4.06,3304,4.06,3305,3.578,3306,4.06,3307,5.684,3308,4.06,3309,7.749,3310,7.103,3311,4.06,3312,4.06,3313,4.06,3314,4.06,3315,4.06,3316,4.06,3317,4.06,3318,4.06,3319,4.06,3320,7.477,3321,7.103,3322,7.477,3323,4.06,3324,4.06,3325,4.06,3326,5.684,3327,4.06,3328,4.06,3329,5.684,3330,5.684,3331,5.684,3332,5.684,3333,4.06,3334,4.06,3335,3.578,3336,7.103,3337,4.06,3338,5.684,3339,5.009,3340,5.684,3341,4.06,3342,4.06,3343,4.06,3344,5.684,3345,5.684,3346,5.684,3347,4.06,3348,4.06]],["title/classes/Params.html",[0,0.174,57,0.74]],["body/classes/Params.html",[0,0.171,2,1.321,3,0.07,4,0.06,5,0.086,7,0.06,8,1.108,16,0.858,18,0.806,19,0.01,20,0.445,21,0.149,22,1.082,24,1.441,51,0.72,53,1.636,54,3.531,57,1.145,63,0.728,66,1.254,69,0.934,73,1.801,81,1.224,82,1.267,83,0.14,85,0.468,86,1.136,94,0.277,106,0.109,119,1.548,120,2.1,129,3.728,154,1.788,155,1.224,156,1.734,165,0.686,178,1.322,183,2.129,185,2.891,187,0.537,189,2.938,200,1.636,202,0.735,204,2.029,229,1.636,231,3.561,265,0.755,270,1.383,281,0.846,294,2.177,297,4.358,317,0.007,318,0.006,323,4.912,381,0.78,384,1.772,393,1.35,400,1.03,427,0.876,480,1.548,587,1.841,702,4.398,892,2.317,1011,2.615,1044,1.136,1372,3.195,1473,2.561,1566,2.995,1579,3.557,1684,2.1,1858,2.351,1866,3.893,1973,5.871,2078,3.195,2121,6.527,2133,2.26,2241,2.829,2279,5.503,2370,4.613,3001,4.398,3100,5.747,3146,3.195,3151,3.446,3152,3.781,3153,3.781,3154,6.486,3155,3.446,3156,6.086,3157,3.781,3158,5.204,3159,5.681,3160,5.204,3161,3.195,3162,5.204,3163,5.204,3164,5.204,3165,4.398,3166,7.76,3167,3.781,3168,4.743,3169,3.781,3170,3.446,3171,3.781,3172,3.781,3173,3.781,3174,5.681,3175,6.127,3176,3.446,3177,3.195,3178,3.195,3179,4.743,3180,2.995,3181,2.995,3182,3.446,3183,3.446,3184,3.446,3185,3.446,3186,3.781,3187,3.781,3188,5.204,3189,5.204,3190,5.204,3191,6.411,3192,5.204,3193,5.204,3194,3.781,3195,3.781,3196,5.204,3197,5.204,3198,5.204,3199,3.781,3200,3.781,3201,3.446,3349,4.29,3350,4.29,3351,4.29,3352,4.29,3353,4.29,3354,4.29,3355,4.29,3356,4.29]],["title/interfaces/Pedal.html",[106,0.111,519,1.714]],["body/interfaces/Pedal.html",[0,0.254,3,0.063,4,0.054,5,0.045,7,0.054,19,0.01,20,0.347,21,0.124,22,0.751,50,0.381,51,0.631,63,0.653,66,0.818,82,0.723,83,0.104,85,0.441,94,0.209,97,1.243,106,0.098,117,2.35,118,1.707,154,1.02,155,0.798,163,0.755,164,0.758,177,2.25,178,0.793,187,0.479,193,1.653,202,0.419,209,1.415,216,2.213,220,1.282,222,2.404,227,0.882,265,0.863,280,0.779,281,1.607,289,1.885,317,0.006,318,0.006,319,0.139,337,0.687,350,1.45,353,3.823,355,2.292,368,2.2,381,0.631,384,1.644,386,4.293,392,1.487,393,1.791,400,1.315,427,1.085,429,2.088,430,0.995,439,1.822,444,3.269,452,1.822,453,1.775,464,1.775,468,2.617,469,2.28,477,2.411,493,3.491,519,3.438,535,2.022,538,1.072,576,1.688,591,1.487,697,3.61,874,2.404,914,2.213,936,3.609,939,1.428,940,3.073,946,1.762,950,2.425,964,3.663,965,2.501,977,1.762,978,3.484,979,1.762,980,2.12,981,1.762,985,1.762,986,1.706,1004,2.28,1012,2.213,1030,3.073,1044,1.41,1047,3.374,1049,2.406,1056,2.425,1060,1.706,1072,2.425,1078,1.415,1095,3.353,1109,1.469,1114,1.644,1123,2.822,1129,1.762,1130,3.584,1142,1.762,1143,2.35,1144,1.762,1145,2.213,1147,2.425,1149,2.425,1157,2.425,1159,1.217,1162,3.771,1169,2.44,1450,3.128,1454,1.954,1579,2.029,1580,2.54,1610,2.029,1630,3.428,1638,3.428,1699,1.822,1703,3.269,1794,3.428,1875,2.411,1882,2.299,1912,4.143,2437,3.823,2484,2.778,3180,3.823,3357,3.094,3358,5.573,3359,4.398,3360,4.398,3361,4.398,3362,4.398,3363,5.117,3364,5.573,3365,3.094,3366,4.398,3367,3.094,3368,3.094,3369,5.888,3370,6.118,3371,5.573,3372,5.573,3373,4.143,3374,5.573,3375,4.398,3376,5.573,3377,5.118,3378,5.888,3379,5.888,3380,5.573,3381,5.573,3382,3.094,3383,4.398,3384,4.398,3385,4.398,3386,3.094,3387,2.689,3388,6.294,3389,3.61,3390,5.117,3391,2.2,3392,2.11,3393,3.094,3394,3.094,3395,3.094,3396,3.094,3397,3.094,3398,3.094,3399,4.398,3400,4.398,3401,3.094,3402,4.398,3403,3.094,3404,3.428,3405,4.398,3406,3.094,3407,3.094,3408,5.117,3409,3.094,3410,3.094,3411,3.094,3412,3.094,3413,3.094,3414,3.094,3415,3.094,3416,3.094,3417,4.398,3418,3.094,3419,3.094,3420,3.094,3421,3.094,3422,4.398,3423,3.094,3424,3.094,3425,3.094,3426,3.094,3427,3.094,3428,3.094,3429,3.094,3430,3.094,3431,3.094,3432,3.094,3433,3.094,3434,3.094,3435,3.094,3436,3.094,3437,3.094,3438,3.094,3439,3.094,3440,3.094,3441,3.094,3442,3.094,3443,3.094,3444,3.094,3445,3.094,3446,3.094,3447,3.094,3448,3.094,3449,4.398,3450,5.117,3451,4.398,3452,4.398,3453,3.094,3454,4.398,3455,6.118,3456,5.573,3457,3.094,3458,3.094,3459,5.573,3460,4.398,3461,4.398,3462,4.398,3463,4.398,3464,4.398,3465,3.094,3466,3.094,3467,3.094,3468,3.094,3469,3.094,3470,5.117,3471,3.094,3472,3.094,3473,3.094,3474,4.398,3475,3.094,3476,3.094,3477,3.094,3478,3.094,3479,3.094,3480,3.094,3481,3.094,3482,3.094,3483,3.094,3484,3.094,3485,3.094,3486,3.094,3487,3.094,3488,3.094,3489,3.094,3490,3.094,3491,3.094,3492,3.094,3493,3.094,3494,3.094,3495,3.094,3496,3.094,3497,2.869,3498,3.094,3499,3.094,3500,3.094,3501,3.094,3502,3.094,3503,3.094,3504,2.869]],["title/classes/PedalConfig.html",[0,0.174,1709,2.879]],["body/classes/PedalConfig.html",[0,0.23,2,1,3,0.053,4,0.046,5,0.038,7,0.046,8,0.908,9,1.172,10,1.172,16,0.931,18,0.835,19,0.01,20,0.417,21,0.136,22,1.107,24,1.439,25,1.172,50,0.408,51,0.808,52,0.707,57,0.98,63,0.82,66,0.69,71,1.653,81,1.198,83,0.079,85,0.487,86,0.861,88,1.653,94,0.264,96,1.49,97,1.472,99,1.172,100,0.904,106,0.123,112,1.922,116,1.486,118,1.422,128,1.439,163,0.745,164,0.885,165,0.252,187,0.478,189,2.076,202,0.353,213,1.452,220,1.081,222,1.452,227,0.931,258,1.261,265,0.855,280,1.451,281,1.14,315,1.172,317,0.005,318,0.005,319,0.123,323,1.94,350,1.281,355,1.314,359,2.888,381,0.773,384,2.232,392,1.739,393,1.464,425,4.04,427,1.013,429,1.845,430,0.84,431,1.59,432,3.284,433,1.537,434,1.649,435,1.94,436,2.034,437,1.712,439,2.288,441,2.382,444,2.077,452,1.537,453,1.053,454,2.763,464,1.053,467,2.143,468,2.232,480,1.745,481,2.549,486,1.712,487,2.269,491,1.94,493,1.78,496,2.142,500,2.034,508,2.933,511,2.034,519,3.319,521,2.763,523,1.537,524,1.313,525,1.59,526,1.486,527,1.94,528,1.856,529,2.368,530,1.856,531,1.94,532,2.988,533,2.288,534,1.78,535,1.133,536,1.94,538,1.347,541,3.301,543,2.763,544,1.856,545,2.288,546,2.213,547,2.888,550,1.94,553,2.763,554,1.856,559,2.888,562,2.763,563,2.888,569,2.888,571,2.888,572,1.94,573,3.509,577,2.644,591,1.314,605,1.712,614,1.94,624,3.301,634,3.509,811,3.045,916,2.288,939,1.205,980,1.61,984,1.395,1012,1.313,1027,1.439,1044,0.625,1073,1.698,1114,0.975,1141,2.749,1159,1.026,1191,2.763,1319,2.763,1337,2.888,1345,1.439,1434,2.268,1450,1.856,1454,1.649,1464,2.034,1473,1.94,1527,3.378,1564,2.142,1579,1.712,1582,3.029,1615,2.034,1644,2.288,1661,2.213,1692,2.268,1693,2.42,1694,3.823,1695,2.42,1696,2.42,1697,2.268,1698,2.142,1699,1.537,1700,2.42,1701,3.19,1702,2.42,1703,1.94,1704,2.034,1705,2.268,1706,2.42,1707,3.378,1708,3.603,1709,3.811,1710,1.94,1711,3.603,1712,3.603,1713,4.769,1714,3.029,1715,3.603,1716,2.034,1717,2.42,1718,2.42,1719,4.769,1720,4.036,1721,4.287,1722,3.603,1723,4.305,1724,2.42,1725,3.603,1726,3.19,1727,2.268,1728,2.42,1729,2.034,1730,2.42,1731,3.378,1732,4.305,1733,2.42,1734,3.603,1735,2.42,1736,2.268,1737,4.769,1738,2.268,1739,2.268,1740,3.378,1741,2.268,1742,2.142,1743,2.268,1744,2.42,1745,3.603,1746,5.451,1747,2.42,1748,3.378,1749,2.268,1750,5.538,1751,2.42,1752,2.42,1753,3.603,1754,3.378,1755,3.603,1756,3.378,1757,3.603,1758,2.268,1759,5.815,1760,3.603,1761,3.378,1762,3.603,1763,2.268,1764,3.603,1765,2.268,1766,2.268,1767,2.268,1768,2.268,1769,3.378,1770,2.268,1771,2.268,1772,2.034,1773,3.249,1774,2.268,1775,3.378,1776,2.42,1777,2.268,1778,3.378,1779,3.603,1780,3.378,1781,3.378,1782,2.42,1783,3.378,1784,2.268,1785,3.603,1786,2.42,1787,2.268,1788,2.268,1789,2.142,1790,2.42,1791,2.42,1792,2.42,1793,2.42,1794,2.034,1795,2.42,1796,1.712,1797,2.42,1798,3.619,1799,2.142,1800,2.42,1801,4.769,1802,2.268,1803,2.42,1804,2.42,1805,2.42,1806,2.42,1807,4.769,1808,4.305,1809,2.42,1810,2.268,1811,2.42,1812,2.42,1813,2.42,1814,2.42,1815,2.42,1816,3.603,1817,2.42,1818,3.603,1819,2.42,1820,3.603,1821,2.42,1822,3.603,1823,2.42,1824,3.603,1825,2.42,1826,2.42,1827,2.42,1828,2.42,1829,2.42,1830,3.378,1831,2.42,1832,2.42,1833,3.603,1834,2.42,1835,3.603,1836,2.42,1837,3.603,1838,2.42,1839,3.603,1840,2.42,1841,3.603,1842,2.42,1843,3.378,1844,2.42,1845,3.603,1846,2.42,1847,3.603,1848,2.42,1849,3.603,1850,2.42,1851,3.603,1852,2.42,1853,3.603,1854,3.603,1855,2.42,1856,2.42,1857,4.305,1858,3.509,1859,2.42,1860,2.268,1861,3.19,1862,4.515,1863,2.42,1864,2.42,1865,2.42,1866,2.142,1867,2.42,1868,2.42,1869,2.42,1870,2.42,1871,2.42,1872,3.603,1873,2.42,1874,2.42,1875,3.619,1876,2.42,1877,2.42,1878,2.42,1879,3.603,1880,2.42,1881,2.42,1882,1.94,1883,1.94,1884,2.42,1885,2.42,1886,2.42,1887,2.42,1888,2.42,1889,2.42,1890,3.603,1891,3.603,1892,3.603,1893,2.42,1894,2.42,1895,2.42,1896,2.42,1897,3.603,1898,2.42,1899,2.42,1900,2.42,1901,2.42,1902,2.42,1903,2.42,1904,2.42,1905,2.42,1906,2.42,1907,2.42,1908,2.42,1909,3.603,1910,2.42,1911,2.42,1912,2.888,1913,2.42,1914,2.42,1915,2.42,1916,2.42,1917,2.42,1918,2.034,1919,2.42,1920,2.42,1921,2.42,1922,2.42,1923,2.42,1924,2.42,1925,2.42,1926,2.42,1927,2.42,1928,2.42,1929,2.42,1930,2.42,1931,2.42,1932,2.42,1933,2.42,1934,2.42,1935,2.42,1936,2.42,1937,2.42,1938,2.42,1939,2.42,1940,2.42,2516,4.264,2521,4.264,2522,4.264,2524,4.264,2525,4.264,2526,4.264,3505,4.838,3506,4.838,3507,4.838,3508,4.838,3509,3.249,3510,3.249,3511,3.249,3512,3.249,3513,3.249,3514,3.249,3515,3.249,3516,3.249,3517,3.249,3518,3.249,3519,3.249,3520,3.249,3521,3.249,3522,3.249,3523,3.249,3524,3.249,3525,3.249,3526,3.249]],["title/interfaces/PedalEvent.html",[106,0.111,522,2.879]],["body/interfaces/PedalEvent.html",[3,0.068,4,0.058,5,0.049,7,0.058,9,1.504,10,1.504,19,0.01,20,0.428,21,0.138,22,0.986,23,3.143,25,1.504,50,0.378,51,0.831,52,0.908,53,1.59,57,1.28,61,1.612,63,1.128,66,1.803,67,1.132,69,1.26,71,3.059,73,0.93,83,0.143,85,0.453,94,0.265,96,1.284,97,1.386,99,2.399,100,1.851,106,0.183,111,1.972,112,1.738,115,1.425,138,2.738,163,0.63,164,0.93,165,0.557,187,0.437,189,1.877,202,0.454,209,1.496,215,1.972,220,1.388,265,0.872,270,0.977,280,1.781,315,1.504,317,0.006,318,0.006,319,0.147,337,0.744,350,1.762,357,3.817,381,0.573,424,0.953,425,3.825,426,3.785,427,1.09,431,2.834,432,3.795,433,3.57,434,2.116,441,2.175,444,1.79,468,1.252,487,2.963,499,3.817,508,2.938,518,2.749,519,3.483,520,1.972,521,2.382,522,4.738,523,1.972,524,1.685,525,3.256,526,2.648,527,3.457,528,3.307,529,3.256,530,2.382,531,2.489,532,3.591,533,1.972,534,2.285,535,0.977,536,2.489,537,3.106,538,2.274,539,2.208,540,2.749,541,4.104,542,4.385,543,3.799,544,3.799,545,3.973,546,3.574,547,4.29,548,3.106,549,4.312,550,4.507,551,4.644,552,4.954,553,4.312,554,3.799,555,3.106,556,3.106,557,2.041,558,3.106,559,4.29,560,3.106,561,3.106,562,2.382,563,2.489,564,2.285,565,3.307,566,4.312,567,2.489,568,5.352,569,3.457,570,3.106,571,4.29,572,3.457,573,4.477,574,2.489,575,3.106,576,1.534,577,3.737,578,3.106,579,3.106,580,3.817,581,2.911,582,3.106,583,2.911,584,3.106,585,3.106,586,3.307,587,2.485,588,2.911,589,3.106,590,4.312,591,1.572,592,4.312,593,3.307,594,4.312,595,3.106,596,1.636,597,4.312,598,3.106,599,3.106,600,3.457,601,4.312,602,2.911,603,3.106,604,2.116,605,3.504,606,2.911,607,1.464,608,2.911,609,2.911,610,4.312,611,3.106,612,2.749,613,3.106,614,2.489,615,4.042,616,3.106,617,2.911,618,4.312,619,4.042,620,3.106,621,3.106,622,3.106,623,4.312,624,4.104,625,4.312,626,4.312,627,4.312,628,3.106,629,3.106,630,3.106,631,3.106,632,3.106,633,3.106,634,2.285,635,3.817,636,3.817,637,3.817,638,3.106,639,2.749]],["title/classes/PedalStatus.html",[0,0.174,1703,2.607]],["body/classes/PedalStatus.html",[0,0.25,2,1.154,3,0.061,4,0.053,5,0.044,7,0.053,8,1.007,16,0.935,18,0.383,19,0.01,20,0.269,21,0.139,22,0.514,24,0.669,50,0.378,51,0.621,63,0.635,66,0.796,82,0.703,83,0.102,85,0.437,94,0.162,97,1.23,106,0.095,117,2.305,118,1.686,154,0.993,155,0.776,163,0.745,164,0.747,177,1.215,178,0.778,187,0.42,193,1.608,202,0.408,209,1.622,216,2.17,220,1.247,222,2.386,227,1.011,265,0.86,280,0.758,281,1.596,289,1.834,317,0.006,318,0.006,319,0.136,350,1.422,353,2.616,355,2.281,368,2.14,381,0.621,384,1.612,386,4.135,392,1.458,393,1.777,400,0.9,427,1.032,429,2.048,430,0.968,439,1.772,444,3.113,452,1.772,453,1.741,464,1.741,468,2.594,469,2.235,477,2.346,493,3.438,519,3.41,535,1.968,538,1.043,576,1.662,591,1.458,697,2.471,874,2.386,914,2.17,936,3.72,939,1.39,940,1.66,946,1.714,950,2.378,964,3.703,965,2.463,977,1.714,978,3.637,979,1.714,980,2.281,981,1.714,985,2.456,986,1.66,1004,2.235,1012,1.514,1030,3.443,1044,1.395,1047,3.343,1049,2.456,1056,2.378,1060,1.66,1072,2.779,1078,1.388,1095,3.318,1109,1.429,1114,1.612,1123,2.779,1129,3.135,1130,3.556,1142,1.714,1143,2.305,1144,1.714,1145,2.17,1147,1.66,1149,2.779,1157,2.779,1159,1.184,1162,3.753,1169,2.414,1450,2.14,1454,1.901,1579,1.974,1580,2.471,1610,2.828,1630,3.362,1638,2.346,1699,1.772,1703,3.746,1794,2.346,1875,2.346,1882,2.237,1912,4.091,2437,3.749,2484,2.724,3180,3.749,3357,3.01,3358,4.312,3359,3.01,3360,3.01,3361,3.01,3362,3.01,3363,4.312,3364,3.01,3365,3.01,3366,4.312,3367,3.01,3368,4.312,3369,6.243,3370,6.062,3371,6.062,3372,6.062,3373,4.091,3374,5.504,3375,4.312,3376,6.062,3377,5.427,3378,6.243,3379,6.243,3380,6.062,3381,6.062,3382,5.04,3383,5.504,3384,5.504,3385,5.504,3386,4.312,3387,2.616,3388,6.243,3389,3.54,3390,5.04,3391,2.14,3392,2.053,3393,3.01,3394,3.01,3395,3.01,3396,3.01,3397,3.01,3398,3.01,3399,4.312,3400,4.312,3401,3.01,3402,4.312,3403,3.01,3404,3.362,3405,4.312,3406,3.01,3407,3.01,3408,5.04,3409,3.01,3410,3.01,3411,3.01,3412,3.01,3413,3.01,3414,3.01,3415,3.01,3416,3.01,3417,4.312,3418,3.01,3419,3.01,3420,3.01,3421,3.01,3422,4.312,3423,3.01,3424,3.01,3425,3.01,3426,3.01,3427,3.01,3428,3.01,3429,3.01,3430,3.01,3431,3.01,3432,3.01,3433,3.01,3434,3.01,3435,3.01,3436,3.01,3437,3.01,3438,3.01,3439,3.01,3440,3.01,3441,3.01,3442,3.01,3443,3.01,3444,3.01,3445,3.01,3446,3.01,3447,3.01,3448,3.01,3449,4.312,3450,5.04,3451,4.312,3452,4.312,3453,3.01,3454,4.312,3455,6.062,3456,5.504,3457,3.01,3458,3.01,3459,5.504,3460,4.312,3461,4.312,3462,4.312,3463,4.312,3464,4.312,3465,3.01,3466,3.01,3467,3.01,3468,3.01,3469,3.01,3470,5.04,3471,3.01,3472,3.01,3473,3.01,3474,4.312,3475,3.01,3476,3.01,3477,3.01,3478,3.01,3479,3.01,3480,3.01,3481,3.01,3482,3.01,3483,3.01,3484,3.01,3485,3.01,3486,3.01,3487,3.01,3488,3.01,3489,3.01,3490,3.01,3491,3.01,3492,3.01,3493,3.01,3494,3.01,3495,3.01,3496,3.01,3497,2.791,3498,3.01,3499,3.01,3500,3.01,3501,3.01,3502,3.01,3503,3.01,3504,2.791,3527,5.369,3528,3.747,3529,3.747,3530,3.747,3531,3.747,3532,3.747,3533,3.747,3534,3.747,3535,3.747,3536,3.747,3537,3.747,3538,3.747,3539,3.747,3540,3.747]],["title/injectables/PedalsService.html",[429,1.665,439,2.065]],["body/injectables/PedalsService.html",[0,0.237,3,0.055,4,0.048,5,0.04,7,0.048,8,0.939,16,0.977,18,0.791,19,0.01,20,0.395,21,0.137,22,1.062,24,1.454,50,0.365,51,0.588,63,0.577,66,1.063,82,0.939,83,0.097,85,0.458,94,0.197,97,1.183,106,0.086,117,2.148,118,1.611,154,1.734,155,0.705,163,0.712,164,0.707,177,1.103,178,1.011,187,0.379,193,1.46,202,0.37,209,1.534,216,2.022,220,1.132,222,2.324,227,1.055,258,1.363,265,0.848,280,0.687,281,1.558,289,1.665,317,0.005,318,0.005,319,0.127,350,1.325,353,2.374,355,2.212,368,2.858,381,0.816,384,1.502,386,3.999,392,1.612,393,1.725,400,0.816,427,1.025,429,1.909,430,0.879,439,2.367,444,3.133,452,1.608,453,1.622,464,1.622,468,2.609,469,2.083,477,2.129,493,3.253,519,3.437,535,2.007,538,0.947,576,1.573,577,1.556,591,1.895,697,2.242,701,1.074,874,2.474,914,2.022,936,3.5,939,1.261,940,2.216,946,1.556,950,2.216,964,3.842,965,2.33,977,1.556,978,3.338,979,1.556,980,2.179,981,1.556,985,1.556,986,1.506,1004,2.083,1012,1.374,1030,2.9,1044,1.404,1047,3.232,1049,2.496,1056,2.216,1060,1.506,1072,2.216,1078,1.293,1095,3.192,1109,1.297,1114,1.502,1123,2.63,1129,1.556,1130,3.451,1142,2.716,1143,2.148,1144,1.556,1145,2.022,1147,1.506,1149,2.216,1157,2.216,1159,1.074,1162,3.72,1169,2.577,1191,2.858,1450,1.942,1454,1.725,1579,1.791,1580,2.242,1610,1.791,1630,3.133,1638,2.129,1699,2.808,1703,3.545,1794,2.129,1875,2.129,1882,3.545,1912,3.909,2365,2.03,2437,3.494,2484,3.013,2589,2.731,2614,2.997,3049,2.731,3180,3.494,3181,2.374,3357,2.731,3358,4.019,3359,2.731,3360,2.731,3361,2.731,3362,2.731,3363,4.769,3364,2.731,3365,2.731,3366,4.019,3367,2.731,3368,2.731,3369,6.06,3370,6.06,3371,5.862,3372,5.862,3373,3.909,3374,5.259,3375,4.019,3376,5.862,3377,5.268,3378,6.06,3379,6.06,3380,5.862,3381,5.862,3382,2.731,3383,5.259,3384,5.259,3385,5.259,3386,2.731,3387,2.374,3388,6.06,3389,3.299,3390,4.769,3391,1.942,3392,2.742,3393,2.731,3394,2.731,3395,2.731,3396,2.731,3397,2.731,3398,2.731,3399,4.019,3400,4.019,3401,2.731,3402,4.019,3403,2.731,3404,3.133,3405,4.019,3406,2.731,3407,2.731,3408,4.769,3409,2.731,3410,2.731,3411,2.731,3412,2.731,3413,2.731,3414,2.731,3415,2.731,3416,2.731,3417,4.019,3418,2.731,3419,2.731,3420,2.731,3421,2.731,3422,4.019,3423,2.731,3424,2.731,3425,2.731,3426,2.731,3427,2.731,3428,4.769,3429,4.769,3430,2.731,3431,2.731,3432,2.731,3433,2.731,3434,2.731,3435,2.731,3436,2.731,3437,2.731,3438,2.731,3439,2.731,3440,2.731,3441,2.731,3442,2.731,3443,2.731,3444,2.731,3445,2.731,3446,2.731,3447,2.731,3448,2.731,3449,4.019,3450,4.769,3451,4.019,3452,4.019,3453,2.731,3454,4.019,3455,5.862,3456,5.259,3457,2.731,3458,2.731,3459,5.259,3460,4.019,3461,4.019,3462,4.019,3463,4.019,3464,4.019,3465,2.731,3466,2.731,3467,2.731,3468,2.731,3469,2.731,3470,4.769,3471,2.731,3472,2.731,3473,2.731,3474,4.019,3475,2.731,3476,2.731,3477,2.731,3478,2.731,3479,2.731,3480,2.731,3481,2.731,3482,2.731,3483,2.731,3484,4.019,3485,2.731,3486,2.731,3487,4.769,3488,2.731,3489,2.731,3490,2.731,3491,2.731,3492,2.731,3493,2.731,3494,4.019,3495,2.731,3496,2.731,3497,3.727,3498,4.019,3499,2.731,3500,2.731,3501,5.259,3502,2.731,3503,4.019,3504,2.533,3541,5.004,3542,5.004,3543,5.004,3544,5.937,3545,5.004,3546,5.004,3547,5.004,3548,5.233,3549,5.004,3550,5.004,3551,5.004,3552,3.401,3553,3.401,3554,3.401,3555,3.401,3556,3.401,3557,3.401,3558,3.401,3559,3.401,3560,3.401,3561,3.401,3562,3.401,3563,3.401,3564,3.401,3565,3.401,3566,3.401,3567,3.401,3568,3.401,3569,3.401,3570,3.401,3571,3.401,3572,3.401,3573,3.401,3574,3.401,3575,3.401,3576,3.401,3577,3.401,3578,3.401,3579,3.401,3580,3.401,3581,3.401,3582,3.401,3583,3.401,3584,3.401,3585,3.401,3586,3.401,3587,3.401,3588,3.401,3589,3.401,3590,3.401,3591,3.401,3592,3.401,3593,3.401,3594,3.401,3595,3.401,3596,3.401,3597,3.401,3598,3.401,3599,3.401,3600,3.401,3601,3.401,3602,3.401,3603,3.401,3604,3.401,3605,3.401]],["title/classes/Pipe.html",[0,0.174,99,1.575]],["body/classes/Pipe.html",[0,0.323,1,2.895,2,0.92,3,0.049,4,0.042,5,0.035,6,1.516,7,0.042,9,1.982,10,1.982,11,2.514,12,2.514,13,2.514,14,2.489,15,4.224,16,0.668,18,0.627,19,0.01,20,0.406,21,0.148,22,0.41,23,2.288,25,3.132,26,3.364,27,4.275,30,2.489,33,3.364,35,2.489,38,3.364,40,2.489,43,3.364,45,2.489,48,3.364,50,0.275,51,0.862,52,0.65,53,1.139,54,1.282,55,3.618,56,1.574,57,1.449,58,1.323,59,3.618,60,2.925,61,2.073,62,1.574,63,1.462,64,1.574,65,1.574,66,1.723,67,1.233,68,1.574,69,1.784,70,1.463,71,2.957,72,2.635,73,1.764,74,0.944,75,2.314,76,3.011,77,1.637,78,1.637,79,2.489,80,1.574,81,1.805,82,1.031,83,0.142,84,2.393,85,0.501,86,1.203,87,1.574,88,2.933,89,2.895,90,3.011,91,1.078,92,1.323,93,1.637,94,0.21,95,2.489,96,0.92,97,1.36,98,3.529,99,2.752,100,2.073,101,3.407,102,3.407,103,3.407,104,4.477,105,3.81,106,0.156,107,3.808,108,1.323,109,2.608,110,4.477,111,2.148,112,2.503,113,3.961,114,1.693,115,2.257,116,3.021,117,2.635,118,1.625,119,1.078,120,1.463,121,2.393,122,1.574,123,1.637,124,4.275,125,1.574,126,1.637,127,3.81,128,1.323,129,1.413,130,1.638,131,2.895,132,3.523,133,3.364,134,2.556,135,3.479,136,3.81,137,4.081,138,3.523,139,3.618,140,3.011,141,3.011,142,3.011,143,1.574,144,4.263,145,2.489,146,2.489,147,1.637,148,1.637,149,1.637,150,1.637,151,1.637,152,3.234,153,2.393,154,0.791,155,1.139,156,1.207,157,1.574,158,1.637,159,2.223,160,1.413,161,1.413,162,1.574,163,0.494,164,0.356,165,0.578,166,1.574,167,2.393,168,3.618,169,2.393,170,3.364,171,2.393,172,2.393,173,2.393,174,1.574,175,3.808,176,2.895,177,0.969,178,0.433,179,1.637,180,1.637,181,1.637,182,1.637,183,0.874,184,1.637,185,1.463,186,2.393,187,0.519,188,3.838,189,2.631,190,1.282,191,0.994,192,1.637,193,1.282,194,1.413,195,1.413,196,0.994,197,1.173,198,1.413,199,1.413,200,1.139,201,0.994,202,0.494,203,2.599,204,1.413,205,1.637,206,1.367,207,0.832,208,2.393,209,1.797,210,2.489,211,1.637,212,1.574,213,0.897,214,1.637,215,1.413,216,1.207,217,1.637,218,1.637,219,1.637,220,0.994,221,1.637,222,0.897,223,1.574,224,1.637,225,3.418,226,1.637,227,1.2,228,2.078,229,1.732,230,0.791,231,1.463,232,1.574,233,2.393,234,1.574,235,1.574,236,3.011,237,3.011,238,3.011,239,1.637,240,0.853,241,1.637,242,1.637,243,2.078,244,1.637,245,2.489,246,1.637,247,2.489,248,1.637,249,3.011,250,1.637,251,2.489,252,3.234,253,2.489,254,3.011,255,1.637,256,1.637,257,1.637,258,0.507,259,1.637,260,1.637,261,1.637,262,1.637,263,1.637,264,3.78,265,0.794,266,1.574,267,1.574,268,1.637,269,1.637,270,0.7,271,1.637,272,2.393,273,1.95,274,1.637,275,1.637,276,1.637,277,1.637,278,1.637,279,1.637,280,1.573,281,1.372,282,3.618,283,1.637,284,1.637,285,1.637,286,1.637,287,1.637,288,1.637,289,1.463,290,1.637,291,1.574,292,1.574,293,1.637,294,1.516,295,1.574,296,1.637,297,4.082,298,1.207,299,1.637,300,1.637,301,1.637,302,1.637,303,1.637,304,1.637,305,2.489,306,2.489,307,3.364,308,2.489,309,1.637,310,1.637,311,1.637,312,1.637,313,1.637,314,1.574,315,1.078,316,1.637,317,0.005,318,0.005,319,0.115,3606,5.495]],["title/components/PlayerComponent.html",[640,0.905,868,1.818]],["body/components/PlayerComponent.html",[0,0.163,3,0.067,4,0.058,5,0.048,7,0.058,8,1.074,16,0.947,18,0.585,19,0.01,20,0.375,21,0.138,22,0.785,24,1.339,50,0.389,51,0.829,52,0.893,67,1.554,73,1.277,81,1.366,83,0.067,86,1.516,88,1.402,94,0.172,97,0.695,108,1.816,114,1.341,154,1.086,164,0.488,178,0.829,191,1.365,197,1.61,216,1.657,227,0.922,258,1.318,264,2.081,265,0.566,280,1.333,281,0.809,317,0.006,318,0.006,319,0.145,342,2.383,344,2.587,350,1.746,372,3.054,373,3.054,381,0.769,384,1.718,386,2.247,388,2.448,392,1.554,393,0.937,426,2.16,430,1.06,437,3.953,438,2.704,450,2.457,467,2.445,468,1.718,485,2.568,487,3.131,523,1.939,524,1.657,535,1.544,538,1.593,576,1.89,591,1.554,640,1.366,641,1.657,642,2.122,643,1.939,644,1.876,645,1.939,646,1.142,648,2.83,649,3.836,650,3.721,652,2.618,654,2.618,669,4.467,670,3.062,688,1.816,706,1.657,707,1.657,724,4.467,777,2.745,809,2.568,831,3.015,834,3.433,835,3.221,840,3.269,841,1.939,842,1.707,843,1.939,844,1.939,845,1.707,846,1.939,847,1.76,848,1.939,849,1.76,850,1.939,851,1.816,852,1.939,853,1.76,854,1.939,855,1.76,856,1.939,857,1.939,858,1.76,859,1.939,860,1.76,861,1.939,862,2.457,863,1.939,864,1.816,865,1.939,866,1.76,867,1.939,868,2.97,869,1.939,870,1.76,871,1.939,872,1.939,873,1.76,874,1.231,875,1.939,876,2.457,877,1.707,878,1.707,879,1.939,880,1.816,881,1.564,882,1.939,891,4.112,980,2.194,1298,2.081,1304,3.054,1337,2.448,1341,4.91,1345,1.816,1437,3.054,1440,3.615,1441,2.863,1442,3.615,1443,2.863,1444,3.294,1474,2.16,1534,3.269,1552,3.054,1565,6.725,1644,1.939,1716,2.568,1802,2.863,1830,2.863,1947,3.996,1964,3.294,2003,3.583,2097,3.492,2098,4.497,2099,2.16,2101,3.294,2102,4.075,2104,3.054,2106,3.136,2117,3.473,2119,4.884,2120,3.054,2122,3.676,2311,2.863,2475,5.386,2484,3.62,2485,4.128,2488,2.247,2494,4.948,2771,3.417,2849,3.417,3078,3.294,3082,5.73,3083,3.294,3091,4.597,3092,5.295,3093,3.294,3095,5.295,3098,3.294,3099,5.295,3100,2.704,3101,3.615,3105,3.996,3110,3.615,3111,6.725,3112,6.796,3113,3.294,3114,3.294,3115,3.294,3116,3.294,3117,4.597,3118,3.294,3119,7.061,3120,6.857,3121,4.597,3122,3.294,3123,3.294,3124,5.295,3125,3.294,3126,3.294,3127,3.294,3128,3.294,3129,3.294,3130,3.294,3131,3.294,3132,3.294,3133,3.294,3134,3.294,3135,3.294,3136,3.615,3377,2.863,3404,2.568,3504,3.054,3607,4.101,3608,6.593,3609,5.724,3610,6.593,3611,6.593,3612,6.593,3613,6.593,3614,6.288,3615,7.135,3616,5.724,3617,5.724,3618,4.101,3619,4.101,3620,4.101,3621,4.101,3622,4.101,3623,4.101,3624,4.101,3625,5.724,3626,4.101,3627,5.724,3628,4.101,3629,4.101,3630,4.101,3631,4.101,3632,5.724,3633,4.101,3634,3.615,3635,3.294,3636,3.615,3637,3.615,3638,4.101,3639,4.101,3640,3.615,3641,3.615,3642,4.101,3643,5.724,3644,4.101,3645,4.101,3646,5.724,3647,5.724,3648,4.101,3649,4.101,3650,4.101,3651,4.101,3652,6.288,3653,5.724,3654,4.101,3655,5.724,3656,4.101,3657,3.615,3658,3.615,3659,3.615,3660,3.615,3661,3.615,3662,4.101,3663,4.101,3664,4.101,3665,6.593,3666,5.81,3667,3.615,3668,3.615,3669,3.615,3670,4.101,3671,4.101,3672,4.101,3673,5.724,3674,4.101,3675,5.724,3676,4.101,3677,5.724,3678,5.724,3679,3.294,3680,4.101,3681,4.101,3682,4.101,3683,4.101,3684,4.101,3685,4.101,3686,5.044,3687,3.615,3688,4.101,3689,4.101]],["title/modules/PlayerModule.html",[2675,3.507,2682,3.049]],["body/modules/PlayerModule.html",[0,0.26,3,0.106,4,0.091,5,0.077,19,0.01,50,0.445,83,0.106,280,1.318,317,0.008,318,0.008,430,1.685,591,1.771,862,3.779,868,3.799,873,3.779,874,1.957,876,3.779,1457,4.835,1512,4.553,2677,4.3,2678,5.092,2682,6.388,2683,5.238,2685,6.807,2686,5.747,2687,6.807,2688,6.807,2689,5.747,3078,5.238,3634,5.747,3635,5.238,3636,5.747,3690,5.747,3691,5.747,3692,5.747,3693,6.521,3694,7.723,3695,7.723,3696,5.747,3697,6.521,3698,5.747,3699,6.521]],["title/interfaces/PlayerOp.html",[106,0.111,432,1.997]],["body/interfaces/PlayerOp.html",[3,0.067,4,0.058,5,0.048,7,0.058,9,1.479,10,1.479,19,0.01,20,0.427,21,0.142,22,1.171,23,3.124,25,1.479,50,0.375,51,0.829,52,0.893,53,1.564,57,1.273,61,1.593,63,1.118,66,1.797,67,1.114,69,1.246,71,3.054,73,0.915,83,0.143,85,0.45,94,0.265,96,1.263,97,1.38,99,2.378,100,1.835,106,0.181,111,1.939,112,1.718,115,1.402,138,2.707,163,0.623,164,0.925,165,0.553,187,0.462,189,2.433,209,1.479,215,1.939,220,1.365,265,0.87,270,0.961,280,1.797,315,1.479,317,0.006,318,0.006,319,0.145,337,0.732,350,1.746,357,2.704,381,0.769,424,0.937,425,4.047,426,3.758,427,1.086,431,2.802,432,3.83,433,3.549,434,2.081,441,2.164,444,1.76,468,1.231,487,2.945,499,3.774,508,2.904,518,2.704,519,3.418,520,1.939,521,2.342,522,4.347,523,1.939,524,1.657,525,3.227,526,2.618,527,3.417,528,3.269,529,3.673,530,2.342,531,2.448,532,3.581,533,1.939,534,2.247,535,0.961,536,4.259,537,5.313,538,2.265,539,2.183,540,2.704,541,4.075,542,4.347,543,3.765,544,3.765,545,3.96,546,3.556,547,4.259,548,3.054,549,4.263,550,4.48,551,4.603,552,4.91,553,4.286,554,3.765,555,3.054,556,3.054,557,2.008,558,3.054,559,4.259,560,3.054,561,3.054,562,2.342,563,2.448,564,2.247,565,3.269,566,4.263,567,2.448,568,5.313,569,3.417,570,3.054,571,4.259,572,3.417,573,4.459,574,2.448,575,3.054,576,1.516,577,3.722,578,3.054,579,3.054,580,3.774,581,2.863,582,3.054,583,2.863,584,3.054,585,3.054,586,3.269,587,2.457,588,2.863,589,3.054,590,4.263,591,1.554,592,4.263,593,3.269,594,4.263,595,3.054,596,1.61,597,4.263,598,3.054,599,3.054,600,2.448,601,3.054,602,2.863,603,3.054,604,2.081,605,3.473,606,2.863,607,1.44,608,2.863,609,2.863,610,4.263,611,3.054,612,2.704,613,3.054,614,2.448,615,3.996,616,3.054,617,2.863,618,4.263,619,3.996,620,3.054,621,3.054,622,3.054,623,4.263,624,4.075,625,4.263,626,4.263,627,4.263,628,3.054,629,3.054,630,3.054,631,3.054,632,3.054,633,3.054,634,2.247,635,3.774,636,3.774,637,3.774,638,3.054,639,2.704]],["title/injectables/PlayerService.html",[429,1.665,437,2.3]],["body/injectables/PlayerService.html",[0,0.232,3,0.053,4,0.046,5,0.039,7,0.046,8,0.914,9,1.182,10,1.182,16,0.941,18,0.8,19,0.01,20,0.404,21,0.133,22,1.051,24,1.396,25,1.182,50,0.409,51,0.866,52,0.713,57,0.985,63,0.985,66,0.696,71,1.664,81,1.204,83,0.079,85,0.453,86,0.868,88,1.664,94,0.246,96,1.009,97,1.473,99,1.182,100,0.912,106,0.124,112,1.744,116,1.499,118,1.43,128,1.452,154,1.29,163,0.748,164,0.888,165,0.254,178,0.706,187,0.432,189,2.085,202,0.53,213,0.984,220,1.091,222,1.462,227,0.936,258,1.221,265,0.856,280,1.389,281,1.268,315,1.182,317,0.005,318,0.005,319,0.124,350,1.29,355,1.866,359,1.957,381,0.68,384,1.931,392,1.746,393,1.47,425,3.75,427,0.935,429,1.857,430,0.847,431,1.605,432,3.144,433,1.55,434,1.663,435,1.957,436,2.052,437,2.565,439,3.25,441,2.301,444,2.494,452,1.55,453,1.063,454,3.925,464,1.063,467,2.902,468,2.238,480,1.757,481,1.727,486,1.727,487,2.524,491,1.957,493,1.796,496,2.161,500,2.052,508,2.471,511,2.052,519,3.3,521,1.872,523,1.55,524,1.325,525,1.605,526,1.499,527,1.957,528,1.872,529,2.384,530,1.872,531,1.957,532,3.189,533,2.303,534,1.796,535,1.507,536,1.957,538,1.356,541,3.319,543,2.782,544,1.872,545,2.303,546,2.228,547,2.907,550,1.957,553,2.782,554,1.872,559,2.907,562,2.782,563,2.907,569,2.907,571,2.907,572,1.957,573,3.524,577,2.942,591,1.866,605,1.727,614,1.957,624,4.113,634,2.668,811,3.061,916,1.55,939,1.216,980,1.934,984,1.407,1012,1.968,1027,1.452,1044,0.631,1073,1.151,1114,0.984,1141,2.494,1159,1.538,1191,2.782,1319,2.782,1337,2.907,1345,1.452,1434,2.289,1450,1.872,1454,1.663,1464,3.638,1473,2.907,1527,3.4,1564,2.161,1579,1.727,1582,3.049,1615,2.052,1644,2.303,1661,2.228,1692,2.289,1693,2.441,1694,3.84,1695,2.441,1696,2.441,1697,2.289,1698,2.161,1699,2.303,1700,2.441,1701,4.531,1702,2.441,1703,1.957,1704,2.052,1705,2.289,1706,2.441,1707,4.057,1708,3.627,1709,3.211,1710,1.957,1711,2.441,1712,2.441,1713,3.627,1714,2.052,1715,2.441,1716,2.052,1717,2.441,1718,2.441,1719,3.627,1720,2.289,1721,3.638,1722,2.441,1723,2.441,1724,2.441,1725,2.441,1726,3.211,1727,2.289,1728,2.441,1729,2.052,1730,2.441,1731,3.4,1732,2.441,1733,2.441,1734,2.441,1735,2.441,1736,2.289,1737,2.441,1738,2.289,1739,2.289,1740,2.289,1741,2.289,1742,2.161,1743,2.289,1744,2.441,1745,2.441,1746,4.49,1747,2.441,1748,3.4,1749,2.289,1750,5.554,1751,2.441,1752,2.441,1753,2.441,1754,3.4,1755,3.627,1756,3.4,1757,3.627,1758,2.289,1759,5.364,1760,3.627,1761,3.4,1762,3.627,1763,2.289,1764,2.441,1765,2.289,1766,2.289,1767,2.289,1768,2.289,1769,4.057,1770,2.289,1771,2.289,1772,2.052,1773,3.264,1774,2.289,1775,2.289,1776,2.441,1777,2.289,1778,2.289,1779,3.627,1780,2.289,1781,3.4,1782,2.441,1783,2.289,1784,2.289,1785,2.441,1786,2.441,1787,2.289,1788,2.289,1789,2.161,1790,2.441,1791,2.441,1792,2.441,1793,2.441,1794,3.049,1795,3.627,1796,2.565,1797,4.328,1798,4.669,1799,4.531,1800,2.441,1801,4.79,1802,2.289,1803,2.441,1804,2.441,1805,2.441,1806,2.441,1807,4.79,1808,4.328,1809,2.441,1810,2.289,1811,2.441,1812,2.441,1813,2.441,1814,2.441,1815,2.441,1816,3.627,1817,2.441,1818,3.627,1819,2.441,1820,3.627,1821,2.441,1822,3.627,1823,2.441,1824,3.627,1825,2.441,1826,2.441,1827,2.441,1828,2.441,1829,2.441,1830,3.4,1831,2.441,1832,2.441,1833,3.627,1834,2.441,1835,3.627,1836,2.441,1837,3.627,1838,2.441,1839,3.627,1840,2.441,1841,3.627,1842,2.441,1843,3.4,1844,2.441,1845,3.627,1846,2.441,1847,3.627,1848,2.441,1849,3.627,1850,2.441,1851,3.627,1852,2.441,1853,3.627,1854,3.627,1855,2.441,1856,2.441,1857,4.328,1858,3.766,1859,2.441,1860,2.289,1861,3.211,1862,4.748,1863,2.441,1864,2.441,1865,2.441,1866,2.161,1867,2.441,1868,2.441,1869,2.441,1870,2.441,1871,2.441,1872,3.627,1873,2.441,1874,2.441,1875,3.638,1876,2.441,1877,2.441,1878,2.441,1879,3.627,1880,2.441,1881,2.441,1882,3.469,1883,1.957,1884,2.441,1885,2.441,1886,2.441,1887,2.441,1888,2.441,1889,3.627,1890,3.627,1891,3.627,1892,3.627,1893,2.441,1894,2.441,1895,2.441,1896,2.441,1897,3.627,1898,2.441,1899,3.627,1900,2.441,1901,2.441,1902,2.441,1903,2.441,1904,2.441,1905,2.441,1906,2.441,1907,2.441,1908,3.627,1909,3.627,1910,2.441,1911,2.441,1912,4.103,1913,3.627,1914,2.441,1915,2.441,1916,2.441,1917,2.441,1918,2.052,1919,2.441,1920,3.627,1921,2.441,1922,2.441,1923,2.441,1924,2.441,1925,2.441,1926,2.441,1927,2.441,1928,2.441,1929,2.441,1930,2.441,1931,2.441,1932,2.441,1933,4.79,1934,2.441,1935,2.441,1936,2.441,1937,2.441,1938,2.441,1939,2.441,1940,2.441,2365,1.957,3020,2.633,3049,2.633,3548,5.121,3700,4.87,3701,4.87,3702,4.87,3703,4.87,3704,4.87,3705,4.87,3706,4.87,3707,4.87,3708,3.278,3709,3.278,3710,3.278,3711,3.278,3712,3.278,3713,3.278,3714,3.278,3715,3.278,3716,3.278,3717,3.278,3718,3.278,3719,3.278,3720,3.278,3721,3.278,3722,3.278,3723,3.278,3724,3.278,3725,3.278,3726,3.278,3727,3.278,3728,2.889,3729,3.278]],["title/interfaces/PlayerState.html",[106,0.111,532,1.818]],["body/interfaces/PlayerState.html",[3,0.102,4,0.088,5,0.074,7,0.088,19,0.01,20,0.313,21,0.14,50,0.377,51,0.906,52,1.361,66,1.717,83,0.136,94,0.268,106,0.205,119,2.255,163,0.819,165,0.666,187,0.486,202,0.68,265,0.745,317,0.008,318,0.008,319,0.191,337,1.116,350,2.336,355,1.697,381,0.8,393,1.429,486,3.293,487,2.956,519,3.462,524,2.526,532,3.672,533,2.957,535,1.465,538,1.74,546,2.86,591,2.395,593,4.981,918,2.86,1044,1.203,1073,2.644,1114,1.877,1159,1.975,1632,3.426,1699,2.957,1773,3.172,1796,3.967,2273,3.571,3066,4.122,3373,3.732,3391,3.571,3392,3.426,3730,5.021,3731,5.258,3732,5.258,3733,5.258,3734,4.365,3735,4.365,3736,4.122,3737,4.122,3738,4.365,3739,4.365,3740,4.365,3741,4.365]],["title/interfaces/PlayerState-1.html",[106,0.092,164,0.433,532,1.515]],["body/interfaces/PlayerState-1.html",[3,0.101,4,0.087,5,0.073,7,0.087,19,0.01,20,0.31,21,0.139,50,0.375,51,0.91,52,1.349,66,1.71,83,0.139,85,0.359,94,0.268,106,0.212,119,2.235,163,0.815,165,0.664,187,0.485,202,0.674,265,0.741,317,0.008,318,0.008,319,0.19,337,1.106,350,2.332,355,1.683,381,0.797,393,1.417,486,3.264,487,2.94,519,3.455,524,2.504,532,3.665,533,2.931,535,1.452,538,1.725,546,2.835,591,2.391,593,4.971,918,2.835,1044,1.192,1073,2.63,1114,1.86,1159,1.958,1632,3.395,1699,2.931,1773,3.144,1796,3.946,2273,3.539,3066,4.086,3373,3.7,3389,4.086,3391,3.539,3392,3.395,3731,5.23,3732,5.23,3733,5.23,3734,4.326,3735,4.326,3736,4.086,3737,4.086,3738,4.326,3739,4.326,3740,4.326,3741,4.326,3742,4.615,3743,4.615,3744,4.977]],["title/interfaces/Point.html",[106,0.111,345,2.216]],["body/interfaces/Point.html",[3,0.106,4,0.092,5,0.077,7,0.092,19,0.01,21,0.134,51,0.766,83,0.126,85,0.478,94,0.27,106,0.209,165,0.639,202,0.712,229,2.498,317,0.008,318,0.008,319,0.197,336,2.362,337,1.168,338,5.772,339,2.871,340,6.824,341,2.673,342,3.432,343,4.422,344,3.235,345,4.323,346,2.623,347,4.488,348,2.238,349,6.824,350,2.051,351,4.1,352,4.877,353,4.572,354,5.26,355,1.778,356,5.26,357,4.318,358,3.74,359,3.91,360,5.772,361,4.877,362,4.877,363,4.877,892,2.57,1290,4.318,3745,6.549,3746,6.549,3747,5.772,3748,6.549,3749,6.549,3750,6.549]],["title/classes/Render.html",[0,0.174,1443,3.049]],["body/classes/Render.html",[0,0.243,2,1.384,3,0.073,4,0.063,5,0.053,7,0.063,8,1.144,16,0.981,18,0.862,19,0.01,20,0.422,21,0.145,22,1.157,24,1.573,50,0.346,51,0.851,69,0.978,83,0.073,85,0.353,94,0.276,97,0.762,155,0.931,163,0.807,164,1.004,165,0.349,178,0.883,187,0.494,202,0.489,227,0.724,230,1.615,231,2.984,258,1.356,265,0.899,273,1.929,298,1.816,317,0.006,318,0.006,319,0.155,346,2.461,347,4.211,350,1.615,358,3.482,368,3.482,381,0.851,392,1.22,446,4.896,477,4.854,523,2.126,576,1.615,769,5.373,773,5.119,811,3.211,885,2.814,1345,3.285,1347,5.152,1443,5.178,1457,4.331,1474,3.211,1552,4.54,1671,2.883,2069,5.774,2154,2.567,2370,3.951,2399,6.537,2440,3.61,2771,3.639,2773,6.833,2845,4.896,3100,5.559,3156,6.052,3335,3.962,3339,3.962,3404,4.854,3679,6.227,3751,4.495,3752,6.917,3753,6.917,3754,6.917,3755,6.917,3756,6.096,3757,7.417,3758,6.096,3759,6.096,3760,6.917,3761,7.417,3762,6.096,3763,7.417,3764,7.417,3765,6.096,3766,6.096,3767,6.096,3768,6.096,3769,6.917,3770,7.417,3771,4.495,3772,6.917,3773,4.495,3774,6.917,3775,4.495,3776,4.495,3777,4.495,3778,4.495,3779,4.495,3780,4.495,3781,6.096,3782,4.495,3783,4.495,3784,6.096,3785,4.495,3786,6.096,3787,4.495,3788,4.495,3789,5.373,3790,6.096,3791,4.495,3792,4.495,3793,4.495,3794,4.495,3795,4.495,3796,4.495,3797,4.495,3798,4.495,3799,4.495,3800,6.096,3801,4.495,3802,6.096,3803,4.495,3804,4.495,3805,4.495,3806,4.495,3807,3.962,3808,4.495,3809,4.495,3810,4.495,3811,4.495,3812,4.495,3813,4.495,3814,4.495,3815,4.495,3816,7.753,3817,6.917,3818,6.096,3819,4.495,3820,8.176,3821,4.495,3822,4.495,3823,4.495,3824,4.495,3825,4.495,3826,6.917,3827,6.917,3828,6.096,3829,6.096,3830,4.495,3831,7.417,3832,4.495,3833,4.495,3834,4.495,3835,4.495,3836,7.995,3837,4.495,3838,4.495,3839,4.495,3840,4.495,3841,4.495,3842,4.495,3843,4.495,3844,4.495,3845,4.495,3846,4.495,3847,4.495,3848,4.495,3849,3.962,3850,4.495,3851,4.495,3852,4.495,3853,4.495,3854,4.495]],["title/interfaces/SaveObj.html",[106,0.111,1677,2.3]],["body/interfaces/SaveObj.html",[3,0.082,4,0.071,5,0.06,7,0.071,16,0.549,18,0.515,19,0.01,20,0.388,21,0.147,50,0.403,51,0.873,57,1.116,61,2.039,63,1.116,67,1.787,69,1.098,73,1.468,74,2.453,81,1.045,82,0.946,83,0.143,85,0.532,91,2.374,94,0.267,100,1.832,106,0.221,155,1.364,165,0.698,183,1.476,187,0.523,202,0.549,207,2.039,230,1.336,270,1.182,317,0.007,318,0.007,319,0.167,336,2.801,337,0.9,339,2.441,341,1.635,348,1.724,355,2.285,381,0.725,400,1.211,402,2.657,424,1.504,427,1.072,441,2.242,535,1.182,539,3.29,640,1.364,646,2.299,675,3.353,688,2.915,701,2.826,735,3.672,893,1.635,894,3.222,896,1.272,961,2.249,1044,1.687,1049,2.545,1078,1.893,1158,1.679,1169,1.679,1312,3.011,1370,3.113,1403,3.467,1404,3.113,1554,3.467,1558,3.467,1562,3.467,1601,3.222,1604,2.165,1621,3.672,1645,2.657,1646,2.763,1647,2.763,1648,3.606,1649,3.606,1650,4.414,1651,2.559,1652,3.222,1653,2.559,1654,2.763,1655,2.763,1656,2.385,1657,3.606,1658,2.307,1659,2.763,1660,2.763,1661,2.307,1662,1.924,1663,2.657,1664,4.191,1665,2.657,1666,2.763,1667,2.763,1668,2.763,1669,2.657,1670,2.307,1671,2.385,1672,2.469,1673,2.763,1674,2.657,1675,4.432,1676,3.467,1677,3.467,1678,4.414,1679,3.672,1680,3.467,1681,4.414,1682,2.559,1683,2.657,1684,2.469,1685,2.763,1686,2.657,1687,2.657,1688,3.606,1689,2.657,1690,2.763,1691,2.763]],["title/classes/Seed.html",[0,0.174,100,1.215]],["body/classes/Seed.html",[0,0.323,1,2.894,2,0.92,3,0.049,4,0.042,5,0.035,6,1.515,7,0.042,9,1.982,10,1.982,11,2.513,12,2.513,13,2.513,14,2.488,15,4.224,16,0.668,18,0.627,19,0.01,20,0.406,21,0.148,22,0.623,23,2.287,25,3.132,26,3.363,27,4.274,30,2.488,33,3.363,35,2.488,38,3.363,40,2.488,43,3.363,45,2.488,48,3.363,50,0.275,51,0.862,52,0.65,53,1.139,54,1.282,55,3.618,56,1.573,57,1.448,58,1.323,59,3.618,60,2.924,61,2.073,62,1.573,63,1.461,64,1.573,65,1.573,66,1.723,67,1.233,68,1.573,69,1.784,70,1.462,71,2.957,72,2.834,73,1.789,74,0.943,75,2.314,76,3.01,77,1.636,78,1.636,79,2.488,80,1.573,81,1.805,82,1.031,83,0.142,84,2.392,85,0.501,86,1.455,87,1.573,88,2.919,89,2.894,90,3.01,91,1.077,92,1.323,93,1.636,94,0.21,95,2.488,96,0.92,97,1.36,98,3.528,99,2.687,100,2.123,101,3.407,102,3.407,103,3.407,104,4.476,105,3.81,106,0.156,107,3.807,108,2.011,109,2.607,110,4.476,111,2.598,112,2.461,113,3.81,114,1.693,115,2.098,116,2.808,117,2.635,118,1.624,119,1.077,120,1.462,121,2.392,122,1.573,123,1.636,124,4.274,125,1.573,126,1.636,127,3.81,128,1.323,129,1.412,130,1.638,131,2.894,132,3.522,133,3.363,134,2.555,135,3.478,136,3.81,137,4.081,138,3.522,139,3.618,140,3.01,141,3.01,142,3.01,143,1.573,144,4.263,145,2.488,146,2.488,147,1.636,148,1.636,149,1.636,150,1.636,151,1.636,152,3.233,153,2.392,154,0.791,155,1.138,156,1.207,157,1.573,158,1.636,159,2.223,160,1.412,161,1.412,162,1.573,163,0.494,164,0.356,165,0.578,166,1.573,167,2.392,168,3.618,169,2.392,170,3.363,171,2.392,172,2.392,173,2.392,174,1.573,175,3.807,176,2.894,177,0.968,178,0.433,179,1.636,180,1.636,181,1.636,182,1.636,183,0.874,184,1.636,185,1.462,186,2.392,187,0.519,188,3.837,189,2.631,190,1.282,191,0.994,192,1.636,193,1.282,194,1.412,195,1.412,196,0.994,197,1.172,198,1.412,199,1.412,200,1.139,201,0.994,202,0.494,203,2.598,204,1.412,205,1.636,206,1.366,207,0.831,208,2.392,209,1.797,210,2.488,211,1.636,212,1.573,213,0.896,214,1.636,215,1.412,216,1.207,217,1.636,218,1.636,219,1.636,220,0.994,221,1.636,222,0.896,223,1.573,224,1.636,225,3.418,226,1.636,227,1.199,228,2.077,229,1.732,230,0.791,231,1.462,232,1.573,233,2.392,234,1.573,235,1.573,236,3.01,237,3.01,238,3.01,239,1.636,240,0.852,241,1.636,242,1.636,243,2.077,244,1.636,245,2.488,246,1.636,247,2.488,248,1.636,249,3.01,250,1.636,251,2.488,252,3.233,253,2.488,254,3.01,255,1.636,256,1.636,257,1.636,258,0.506,259,1.636,260,1.636,261,1.636,262,1.636,263,1.636,264,3.779,265,0.794,266,1.573,267,1.573,268,1.636,269,1.636,270,0.7,271,1.636,272,2.392,273,1.949,274,1.636,275,1.636,276,1.636,277,1.636,278,1.636,279,1.636,280,1.573,281,1.371,282,3.618,283,1.636,284,1.636,285,1.636,286,1.636,287,1.636,288,1.636,289,1.462,290,1.636,291,1.573,292,1.573,293,1.636,294,1.515,295,1.573,296,1.636,297,4.081,298,1.207,299,1.636,300,1.636,301,1.636,302,1.636,303,1.636,304,1.636,305,2.488,306,2.488,307,3.363,308,2.488,309,1.636,310,1.636,311,1.636,312,1.636,313,1.636,314,1.573,315,1.077,316,1.636,317,0.005,318,0.005,319,0.115,3855,5.494]],["title/classes/Selection.html",[0,0.174,881,1.665]],["body/classes/Selection.html",[0,0.292,2,1.843,3,0.097,4,0.084,5,0.071,7,0.084,8,1.376,16,0.986,18,0.612,19,0.01,20,0.299,21,0.138,22,0.821,24,1.575,50,0.299,52,1.303,83,0.097,94,0.249,163,0.798,164,0.984,202,0.651,230,1.943,240,2.093,258,1.345,264,3.722,265,0.854,317,0.008,318,0.008,319,0.186,342,3.301,344,3.112,368,4.189,381,0.592,881,3.153,897,4.379,917,4.592,1039,3.627,1310,4.647,1621,3.469,1622,4.379,2044,6.989,2484,4.024,2777,6.639,2779,6.639,3856,5.986,3857,8.266,3858,8.266,3859,8.266,3860,8.266,3861,8.266,3862,8.266,3863,7.335,3864,8.266,3865,5.986,3866,5.986,3867,5.986,3868,5.986,3869,5.986,3870,5.986,3871,5.986,3872,5.986,3873,5.986,3874,5.986,3875,5.986,3876,7.335,3877,5.986,3878,5.986,3879,5.986,3880,7.335,3881,5.986,3882,7.335,3883,7.335,3884,7.931,3885,5.986,3886,5.986,3887,7.335,3888,5.986]],["title/directives/SelectionComponent.html",[842,1.818,880,1.934]],["body/directives/SelectionComponent.html",[0,0.241,3,0.098,4,0.085,5,0.071,7,0.085,8,1.385,16,0.975,18,0.618,19,0.01,20,0.302,21,0.142,22,0.83,24,1.421,50,0.398,51,0.856,52,1.316,83,0.098,94,0.25,114,1.729,154,2.253,163,0.975,178,1.232,187,0.35,191,2.012,258,1.252,265,0.598,281,1.455,317,0.008,318,0.008,319,0.188,336,3.213,342,3.072,343,4.215,344,2.896,345,3.068,346,2.272,393,1.687,427,1.034,430,1.563,464,2.583,467,3.209,648,3.419,649,3.168,650,3.072,670,3.56,675,3.316,717,4.866,842,3.316,877,2.517,880,3.269,881,3.244,1310,4.044,1395,4.866,2484,3.745,2653,7.021,2654,7.311,2655,6.504,2658,6.504,2667,6.504,2669,4.856,2670,5.329,2671,5.329,2672,5.329,2673,4.221,3889,6.047,3890,6.047,3891,6.047,3892,6.047,3893,6.047,3894,6.047,3895,7.38,3896,6.047,3897,6.047,3898,6.047,3899,6.047,3900,6.047,3901,6.047,3902,6.047]],["title/injectables/SequencerService.html",[429,1.665,454,2.494]],["body/injectables/SequencerService.html",[0,0.308,3,0.072,4,0.062,5,0.052,7,0.085,8,1.494,16,0.983,18,0.869,19,0.01,20,0.433,21,0.145,22,1.187,24,1.543,50,0.369,51,0.438,63,1.35,71,2.063,83,0.072,85,0.427,94,0.274,106,0.113,118,1.689,154,2.158,159,2.955,164,0.918,178,1.18,187,0.257,202,0.482,209,1.905,216,2.439,227,0.972,230,1.599,258,1.381,265,0.763,280,1.559,281,1.354,317,0.006,318,0.006,319,0.153,323,2.645,346,1.364,348,2.063,381,0.68,392,1.203,393,1.57,398,3.779,422,3.558,423,3.905,424,1.013,425,3.776,426,4.556,427,0.891,428,6.393,429,2.302,430,1.145,431,4.386,432,3.956,433,3.487,434,2.248,435,2.645,436,2.774,437,2.334,438,2.921,439,3.648,440,3.558,441,2.147,442,5.32,443,4.848,444,2.591,445,5.32,446,4.848,447,5.32,448,4.848,449,4.848,450,3.164,451,5.32,452,2.095,453,1.436,454,3.448,455,3.905,456,5.515,457,6.051,458,3.905,459,3.905,460,5.32,461,3.905,462,2.027,463,3.905,464,2.226,465,3.905,466,3.558,467,2.546,468,2.213,469,1.844,470,5.32,471,6.051,472,6.498,473,3.905,474,5.515,475,3.905,476,6.393,477,4.299,478,3.905,479,5.114,480,2.938,481,3.884,482,5.32,483,2.095,484,3.905,485,2.774,486,2.334,487,1.739,488,3.558,489,2.774,490,3.905,491,2.645,492,3.905,493,2.427,494,3.558,495,3.558,496,2.921,497,3.905,498,5.32,499,3.98,500,2.774,501,4.848,502,3.905,503,3.905,504,3.905,505,3.98,506,4.496,507,5.32,508,4.039,509,5.32,510,3.905,511,2.774,512,5.921,513,3.905,514,5.921,515,3.905,516,5.921,517,3.905,532,2.513,538,1.233,539,1.69,952,5.027,1191,3.448,1208,3.558,2365,2.645,3011,5.32,3012,5.32,3013,5.32,3014,5.32,3015,4.848,3016,5.32,3017,5.32,3018,5.32,3020,3.558,3033,3.905,3035,3.905,3037,3.905,3039,3.905,3040,5.32,3043,3.905,3903,6.037,3904,6.037,3905,6.037,3906,6.037,3907,6.037,3908,4.431,3909,4.431,3910,4.431,3911,4.431,3912,4.431,3913,4.431,3914,4.431,3915,4.431,3916,4.431,3917,4.431,3918,4.431,3919,4.431,3920,4.431,3921,4.431,3922,4.431,3923,4.431,3924,4.431,3925,4.431,3926,4.431,3927,4.431,3928,4.431,3929,4.431,3930,4.431,3931,4.431,3932,3.905]],["title/classes/Shape.html",[0,0.174,92,1.934]],["body/classes/Shape.html",[0,0.265,2,1.579,3,0.083,4,0.072,5,0.061,7,0.072,8,1.248,16,0.988,18,0.828,19,0.01,20,0.428,21,0.145,22,1.111,24,1.569,50,0.256,51,0.658,82,1.248,83,0.083,85,0.489,92,3.995,94,0.277,122,2.701,163,0.558,164,0.61,187,0.453,202,0.558,207,1.427,227,1.304,230,1.762,243,3.043,258,1.407,265,0.731,281,1.011,317,0.007,318,0.007,319,0.169,336,2.993,342,3.253,344,3.315,350,1.956,358,2.929,368,3.8,384,1.539,424,1.521,427,1.077,428,5.343,485,3.21,520,2.425,576,1.358,775,2.072,777,2.769,897,4.834,914,2.688,918,2.345,1056,2.271,1143,3.354,1158,2.214,1387,5.343,1454,2.602,1512,3.58,1610,2.701,1620,5.456,1639,4.955,1652,4.191,1721,3.21,2273,3.8,2571,4.118,2673,3.58,2766,4.519,2768,5.343,2777,5.343,2779,4.118,2846,4.118,3305,4.519,3391,2.929,3392,2.809,3932,6.887,3933,5.128,3934,5.863,3935,6.653,3936,6.653,3937,6.653,3938,7.385,3939,8.098,3940,7.385,3941,6.653,3942,6.887,3943,6.887,3944,7.815,3945,6.653,3946,5.343,3947,6.653,3948,5.863,3949,7.385,3950,6.653,3951,5.128,3952,5.128,3953,5.128,3954,5.128,3955,5.128,3956,5.128,3957,5.128,3958,5.128,3959,5.128,3960,5.128,3961,5.128,3962,5.128,3963,5.128,3964,5.128,3965,5.128,3966,5.128,3967,5.128,3968,6.653,3969,5.128,3970,7.815,3971,5.343,3972,5.128,3973,6.653,3974,5.128,3975,6.653,3976,5.128,3977,5.128,3978,5.128,3979,5.128,3980,5.128,3981,5.128,3982,5.128,3983,6.653,3984,4.519,3985,5.128,3986,5.128,3987,5.128,3988,5.128,3989,6.653,3990,6.653,3991,5.128,3992,5.128,3993,5.128]],["title/classes/Shape-1.html",[0,0.145,92,1.611,164,0.433]],["body/classes/Shape-1.html",[0,0.321,2,1.715,3,0.091,4,0.078,5,0.066,7,0.078,8,1.316,16,0.956,18,0.717,19,0.01,20,0.351,21,0.138,22,0.962,24,1.438,50,0.351,51,0.839,52,1.213,69,1.527,82,1.316,83,0.091,85,0.481,92,3.813,94,0.273,97,1.367,115,1.904,163,0.763,165,0.625,202,0.763,227,1.13,265,0.694,317,0.007,318,0.007,319,0.178,336,3.192,366,4.045,381,0.694,384,1.672,424,1.604,450,3.011,462,3.512,671,5.718,675,3.706,688,3.679,777,2.319,830,4.897,889,4.207,890,5.062,892,2.186,893,2.274,899,3.182,916,3.317,918,3.686,1044,1.072,1166,2.319,1329,4.91,1370,3.631,1529,4.91,1582,4.807,1607,4.897,1653,3.559,1662,2.928,2106,3.844,2270,5.634,2440,4.475,2486,4.149,2497,5.634,2669,4.475,3728,6.767,3994,5.571,3995,7.015,3996,7.015,3997,7.015,3998,7.015,3999,7.015,4000,7.015,4001,7.015,4002,8.059,4003,7.015,4004,7.678,4005,7.678,4006,8.059,4007,7.015,4008,7.015,4009,7.015,4010,7.015,4011,5.571,4012,7.678,4013,5.571,4014,5.571,4015,5.571,4016,5.571,4017,5.571,4018,8.48,4019,7.015,4020,5.571,4021,7.015,4022,7.015,4023,5.571,4024,5.571,4025,5.571,4026,4.91,4027,5.571,4028,5.571,4029,5.571,4030,7.015,4031,5.571,4032,5.571,4033,5.571,4034,4.91,4035,5.571,4036,5.571,4037,5.571,4038,5.571,4039,5.571,4040,5.571,4041,5.571]],["title/classes/Shuttle.html",[0,0.174,1652,2.138]],["body/classes/Shuttle.html",[0,0.207,2,1.602,3,0.085,4,0.073,5,0.061,7,0.073,8,1.26,16,0.993,18,0.866,19,0.01,20,0.443,21,0.149,22,1.209,24,1.572,83,0.085,86,1.97,94,0.273,118,1.652,163,0.731,164,0.799,187,0.52,202,0.566,227,0.838,230,1.378,240,1.485,243,3.721,258,1.413,265,0.805,298,2.103,317,0.007,318,0.007,319,0.171,368,2.972,381,0.824,392,2.019,393,1.189,400,1.249,427,1.1,775,3.175,835,2.233,911,3.875,1203,6.926,1560,4.586,1652,3.982,1671,4.008,1679,3.847,2122,4.008,2295,5.919,2494,3.431,3387,3.633,3946,5.394,3971,5.394,4042,5.204,4043,5.204,4044,7.859,4045,8.135,4046,7.859,4047,8.135,4048,7.859,4049,7.859,4050,7.859,4051,7.859,4052,6.716,4053,6.716,4054,6.716,4055,5.919,4056,5.919,4057,6.716,4058,6.716,4059,6.716,4060,5.204,4061,5.204,4062,5.204,4063,5.204,4064,5.204,4065,5.204,4066,5.204,4067,5.204,4068,5.204,4069,5.204,4070,5.204,4071,5.204,4072,5.204,4073,5.204,4074,6.716,4075,5.204,4076,5.204,4077,6.716,4078,5.204,4079,6.716,4080,5.204,4081,5.204,4082,5.204,4083,4.586,4084,5.204,4085,5.204,4086,6.716,4087,6.554,4088,5.204,4089,5.204,4090,8.135,4091,5.919,4092,5.204,4093,4.586,4094,7.437,4095,7.437,4096,5.204,4097,5.204,4098,5.204,4099,5.204,4100,5.204,4101,5.204]],["title/components/SnackbarComponent.html",[640,0.905,870,1.874]],["body/components/SnackbarComponent.html",[0,0.23,3,0.094,4,0.081,5,0.068,7,0.081,8,1.346,16,0.931,18,0.59,19,0.01,20,0.408,21,0.136,22,0.792,24,1.03,50,0.39,52,1.256,83,0.094,94,0.216,114,1.68,134,2.402,187,0.416,191,1.921,227,0.929,258,0.979,280,1.167,317,0.008,318,0.008,319,0.182,336,3.086,344,2.265,350,1.529,430,1.491,450,3.078,467,2.893,535,1.352,576,2.162,591,1.567,640,1.617,641,2.332,642,2.659,643,2.729,644,2.64,645,2.729,646,1.606,648,3.349,649,3.949,650,3.83,652,3.28,654,3.28,670,3.503,675,3.248,706,2.332,707,2.332,777,2.985,830,4.029,835,2.477,841,2.729,842,2.402,843,2.729,844,2.729,845,2.402,846,2.729,847,2.477,848,2.729,849,2.477,850,2.729,851,2.556,852,2.729,853,2.477,854,2.729,855,2.477,856,2.729,857,2.729,858,2.477,859,2.729,860,2.477,861,2.729,862,2.477,863,2.729,864,2.556,865,2.729,866,2.477,867,2.729,868,2.402,869,2.729,870,3.503,871,2.729,872,2.729,873,2.477,874,1.732,875,2.729,876,2.477,877,2.402,878,2.402,879,2.729,880,2.556,881,2.201,882,2.729,939,2.14,1044,1.57,1684,4.109,2003,3.613,2007,4.029,2097,2.825,2098,3.778,2099,3.04,2110,3.296,2115,4.029,2122,2.729,2127,4.029,2479,4.298,2488,3.162,2673,4.029,2771,3.445,2823,4.635,2934,4.298,3104,4.635,4034,6.32,4102,5.771,4103,7.802,4104,7.802,4105,7.171,4106,5.771,4107,7.171,4108,5.771,4109,5.771,4110,5.771,4111,5.771,4112,5.771,4113,5.771,4114,5.771,4115,5.771,4116,5.771,4117,5.771,4118,5.771,4119,5.771,4120,5.771,4121,7.171,4122,5.771,4123,5.771,4124,5.771]],["title/interfaces/StatusMessage.html",[106,0.111,1683,2.3]],["body/interfaces/StatusMessage.html",[3,0.085,4,0.073,5,0.062,7,0.073,16,0.568,18,0.534,19,0.01,20,0.394,21,0.14,50,0.407,51,0.878,57,1.141,61,2.073,63,1.141,67,1.827,69,1.136,73,1.501,74,2.486,81,1.082,82,0.98,83,0.144,85,0.522,91,2.428,94,0.268,100,1.873,106,0.222,155,1.395,165,0.701,183,1.528,187,0.522,207,2.073,230,1.383,270,1.223,317,0.007,318,0.007,319,0.171,336,2.838,337,0.932,339,1.936,341,1.693,348,1.784,355,2.303,381,0.806,400,1.253,402,2.75,424,1.539,427,1.127,441,1.873,535,1.223,539,3.312,640,1.395,646,2.073,675,2.802,688,2.981,701,2.837,735,3.721,893,1.693,894,3.295,896,1.316,961,2.3,1044,1.684,1049,2.126,1078,1.925,1158,1.738,1169,1.738,1312,3.079,1370,3.183,1403,3.546,1404,3.183,1554,3.546,1558,3.546,1562,3.546,1601,3.295,1604,2.241,1621,2.469,1645,2.75,1646,2.861,1647,2.861,1648,3.688,1649,3.688,1650,4.462,1651,2.649,1652,3.295,1653,2.649,1654,2.861,1655,2.861,1656,2.469,1657,3.688,1658,2.388,1659,2.861,1660,2.861,1661,2.388,1662,1.991,1663,2.75,1664,3.779,1665,2.75,1666,2.861,1667,2.861,1668,2.861,1669,2.75,1670,2.388,1671,2.469,1672,2.556,1673,2.861,1674,2.75,1675,3.924,1676,2.75,1677,2.75,1678,3.688,1679,2.469,1680,3.546,1681,4.462,1682,2.649,1683,3.546,1684,3.852,1685,4.311,1686,2.75,1687,2.75,1688,3.688,1689,2.75,1690,2.861,1691,2.861]],["title/classes/System.html",[0,0.174,2452,3.252]],["body/classes/System.html",[0,0.274,2,1.657,3,0.087,4,0.075,5,0.064,7,0.075,8,1.288,16,0.964,18,0.813,19,0.01,20,0.437,21,0.141,22,1.092,24,1.467,50,0.269,66,1.457,69,1.171,81,1.115,83,0.112,85,0.438,86,2.001,94,0.248,97,1.349,115,1.839,163,0.894,164,0.641,165,0.417,178,0.78,187,0.461,190,2.31,202,0.585,204,2.545,227,0.867,230,1.818,243,3.64,258,1.281,265,0.856,298,2.174,317,0.007,318,0.007,319,0.174,339,2.545,368,3.919,381,0.856,392,1.461,393,1.23,424,1.23,427,1.108,523,3.245,773,4.296,775,3.215,776,4.322,887,4.791,892,2.693,916,3.245,917,3.369,918,3.64,963,2.634,1288,3.073,1317,4.322,1580,3.548,1608,4.524,1611,3.76,1622,3.212,1671,3.887,1679,3.887,1798,4.296,1861,4.524,1918,3.369,2154,3.919,2452,6.596,2591,4.008,3201,5.511,3387,3.757,3946,5.511,3971,5.511,4055,6.048,4056,6.048,4083,4.743,4087,7.013,4091,6.048,4093,4.743,4125,4.743,4126,6.862,4127,6.862,4128,6.862,4129,6.068,4130,6.862,4131,7.556,4132,7.958,4133,7.958,4134,6.862,4135,6.862,4136,6.862,4137,5.381,4138,5.381,4139,5.381,4140,5.381,4141,5.381,4142,5.381,4143,5.381,4144,6.862,4145,5.381,4146,5.381,4147,5.381,4148,5.381,4149,5.381,4150,5.381,4151,4.743,4152,4.743,4153,4.743,4154,4.743,4155,4.743,4156,6.048,4157,4.743,4158,4.743,4159,5.381,4160,5.381,4161,5.381,4162,5.381,4163,7.556,4164,5.381,4165,5.381,4166,5.381,4167,5.381,4168,5.381,4169,5.381,4170,5.381,4171,4.743,4172,5.381,4173,5.381,4174,5.381,4175,6.862,4176,5.381,4177,5.381,4178,6.862,4179,5.381,4180,5.381]],["title/interfaces/TopologyDef.html",[106,0.111,107,2.3]],["body/interfaces/TopologyDef.html",[0,0.324,1,2.906,3,0.049,4,0.042,5,0.035,6,1.525,7,0.042,9,1.99,10,1.99,11,2.523,12,2.523,13,2.523,14,2.5,15,4.23,16,0.327,18,0.629,19,0.01,20,0.406,21,0.148,22,0.412,23,2.296,25,3.135,26,3.374,27,4.28,30,2.5,33,3.374,35,2.5,38,3.374,40,2.5,43,3.374,45,2.5,48,3.374,50,0.276,51,0.846,52,0.654,53,1.147,54,1.29,55,3.628,56,1.584,57,1.45,58,1.331,59,3.628,60,2.933,61,2.077,62,1.584,63,1.457,64,1.584,65,1.584,66,1.726,67,1.239,68,1.584,69,1.787,70,1.472,71,2.959,72,2.644,73,1.767,74,0.95,75,2.32,76,3.022,77,1.647,78,1.647,79,2.5,80,1.584,81,1.801,82,1.035,83,0.143,84,3.244,85,0.502,86,1.209,87,1.584,88,2.922,89,3.488,90,3.022,91,1.084,92,1.331,93,1.647,94,0.21,95,2.5,96,0.926,97,1.362,98,3.787,99,2.692,100,2.077,101,3.414,102,3.414,103,3.414,104,4.481,105,3.82,106,0.156,107,3.816,108,1.331,109,2.613,110,4.481,111,2.158,112,2.41,113,3.628,114,1.633,115,2.105,116,2.817,117,2.644,118,1.629,119,1.084,120,1.472,121,2.404,122,1.584,123,1.647,124,4.28,125,1.584,126,1.647,127,3.82,128,1.331,129,1.422,130,1.646,131,2.906,132,3.529,133,3.374,134,2.564,135,3.488,136,3.82,137,4.089,138,3.529,139,3.628,140,3.022,141,3.022,142,3.022,143,1.584,144,4.27,145,2.5,146,2.5,147,1.647,148,1.647,149,1.647,150,1.647,151,1.647,152,3.244,153,2.404,154,0.796,155,1.143,156,1.215,157,1.584,158,1.647,159,2.234,160,1.422,161,1.422,162,1.584,163,0.496,164,0.358,165,0.579,166,1.584,167,2.404,168,3.628,169,2.404,170,3.374,171,2.404,172,2.404,173,2.404,174,1.584,175,3.816,176,2.906,177,0.975,178,0.436,179,1.647,180,1.647,181,1.647,182,1.647,183,0.88,184,1.647,185,1.472,186,2.404,187,0.519,188,3.842,189,2.634,190,1.29,191,1.001,192,1.647,193,1.29,194,1.422,195,1.422,196,1.001,197,1.18,198,1.422,199,1.422,200,1.147,201,1.001,202,0.327,203,2.609,204,1.422,205,1.647,206,1.375,207,0.837,208,2.404,209,1.801,210,2.5,211,1.647,212,1.584,213,0.902,214,1.647,215,1.422,216,1.215,217,1.647,218,1.647,219,1.647,220,1.001,221,1.647,222,0.902,223,1.584,224,1.647,225,3.426,226,1.647,227,1.202,228,2.087,229,1.741,230,0.796,231,1.472,232,1.584,233,2.404,234,1.584,235,1.584,236,3.022,237,3.022,238,3.022,239,1.647,240,0.858,241,1.647,242,1.647,243,2.087,244,1.647,245,2.5,246,1.647,247,2.5,248,1.647,249,3.022,250,1.647,251,2.5,252,3.244,253,2.5,254,3.022,255,1.647,256,1.647,257,1.647,258,0.51,259,1.647,260,1.647,261,1.647,262,1.647,263,1.647,264,3.787,265,0.795,266,1.584,267,1.584,268,1.647,269,1.647,270,0.704,271,1.647,272,2.404,273,1.959,274,1.647,275,1.647,276,1.647,277,1.647,278,1.647,279,1.647,280,1.576,281,1.375,282,3.628,283,1.647,284,1.647,285,1.647,286,1.647,287,1.647,288,1.647,289,1.472,290,1.647,291,1.584,292,1.584,293,1.647,294,1.525,295,1.584,296,1.647,297,4.086,298,1.215,299,1.647,300,1.647,301,1.647,302,1.647,303,1.647,304,1.647,305,2.5,306,2.5,307,3.374,308,2.5,309,1.647,310,1.647,311,1.647,312,1.647,313,1.647,314,1.584,315,1.084,316,1.647,317,0.005,318,0.005,319,0.116,337,0.536]],["title/interfaces/TreeNode.html",[106,0.111,735,2.065]],["body/interfaces/TreeNode.html",[3,0.084,4,0.072,5,0.061,7,0.072,19,0.01,20,0.371,21,0.144,50,0.416,51,0.837,57,1.329,61,2.062,63,1.133,67,2.328,69,1.454,70,2.527,73,1.913,75,1.718,81,1.777,83,0.132,85,0.506,86,1.367,88,2.773,94,0.201,96,2.412,106,0.17,112,2.495,115,1.764,117,3.363,155,1.384,163,0.852,164,0.795,165,0.702,183,1.955,187,0.299,202,0.562,207,1.437,230,1.962,270,1.209,280,1.043,317,0.007,318,0.007,319,0.17,337,0.921,339,1.914,355,2.257,381,0.511,400,1.604,424,1.18,427,1.017,430,1.334,441,1.437,462,2.361,464,1.673,520,3.503,564,2.828,587,2.868,600,3.082,640,1.722,641,2.7,642,2.478,646,2.181,697,3.403,700,4.146,701,2.895,706,2.7,707,2.7,735,4.162,773,4.905,811,3.519,892,2.026,896,1.975,916,3.16,970,2.441,987,2.286,1011,2.286,1049,2.111,1078,2.148,1109,3.095,1292,4.127,1312,3.056,1404,3.16,1451,3.604,1604,2.215,1605,2.828,1606,3.403,1610,2.719,1611,3.661,1626,3.604,1651,2.619,1672,2.527,1682,3.759,2092,3.604,2249,4.146,2250,4.146,2251,4.146,2252,4.549,2253,3.844,2254,5.888,2255,4.549,2256,5.888,2257,5.888,2258,4.549,2259,4.549,2260,4.549,2261,4.549,2262,4.549,2263,5.888,2264,4.549,2265,4.549,2266,4.549,2267,4.549,2268,4.549,2269,4.549,2270,4.146,2271,4.549,2272,5.366,2273,2.948,2274,4.549,2275,4.549,2276,6.676,2277,4.549,2278,5.172,2279,4.664,2280,5.366,2281,5.366,2282,5.95,2283,4.549,2284,3.844,2285,4.549,2286,4.549,2287,5.366,2288,4.549,2289,4.549,2290,4.549,2291,5.888,2292,5.888,2293,5.888]],["title/interfaces/TreeNodeProxy.html",[106,0.111,1669,2.3]],["body/interfaces/TreeNodeProxy.html",[3,0.084,4,0.072,5,0.061,7,0.072,16,0.562,18,0.528,19,0.01,20,0.392,21,0.141,50,0.406,51,0.876,57,1.134,61,2.063,63,1.134,67,2.204,69,1.125,73,1.811,74,2.476,81,1.071,82,0.97,83,0.144,85,0.527,91,2.412,94,0.27,100,1.861,106,0.222,155,1.386,165,0.7,183,1.513,187,0.518,202,0.562,207,2.063,230,1.369,270,1.211,317,0.007,318,0.007,319,0.17,336,2.827,337,0.922,339,1.917,341,1.676,348,1.766,355,2.298,381,0.734,400,1.241,402,2.723,424,1.529,427,1.079,441,1.861,535,1.211,539,3.306,640,1.386,646,2.182,675,2.784,688,2.962,701,2.866,735,3.707,893,1.676,894,3.629,896,1.686,961,2.285,1044,1.682,1049,2.112,1078,2.149,1158,1.72,1169,1.72,1312,3.059,1370,3.162,1403,3.523,1404,3.162,1554,3.523,1558,3.523,1562,3.523,1601,3.273,1604,2.218,1621,2.444,1645,2.723,1646,2.832,1647,2.832,1648,3.664,1649,3.664,1650,4.448,1651,2.623,1652,3.273,1653,2.623,1654,2.832,1655,2.832,1656,2.444,1657,3.664,1658,2.364,1659,2.832,1660,2.832,1661,2.364,1662,1.971,1663,2.723,1664,3.977,1665,3.523,1666,3.664,1667,2.832,1668,2.832,1669,3.523,1670,2.364,1671,2.444,1672,2.53,1673,2.832,1674,2.723,1675,3.905,1676,2.723,1677,2.723,1678,3.664,1679,2.444,1680,3.523,1681,4.448,1682,2.623,1683,2.723,1684,2.53,1685,2.832,1686,2.723,1687,2.723,1688,3.664,1689,2.723,1690,2.832,1691,2.832]],["title/interfaces/TreeOperation.html",[106,0.111,526,1.997]],["body/interfaces/TreeOperation.html",[3,0.058,4,0.05,5,0.042,7,0.086,9,1.29,10,1.29,11,1.636,12,1.636,13,1.636,18,0.625,19,0.01,20,0.429,21,0.135,22,0.491,23,2.162,25,1.29,50,0.335,51,0.605,52,0.779,53,1.364,54,1.535,57,1.425,58,1.584,60,3.154,61,2.317,63,1.483,66,1.749,69,1.792,71,2.735,72,2.229,73,1.837,81,1.539,82,0.671,83,0.135,85,0.528,86,0.947,94,0.184,96,2.418,99,2.419,100,1.867,101,3.506,102,2.796,103,2.796,106,0.189,108,1.584,112,2.138,115,2.089,118,0.88,119,1.29,132,2.891,134,2.545,154,1.375,156,1.445,163,0.906,164,0.728,165,0.687,187,0.497,188,3.713,189,2.636,190,2.229,193,2.624,194,2.456,195,1.692,196,1.19,197,1.404,198,1.692,199,1.692,200,2.331,201,1.728,202,0.73,203,1.692,206,2.375,207,2.068,209,0.924,220,1.19,225,3.713,228,1.636,229,1.364,265,0.881,270,0.838,280,1.683,298,3.285,315,1.29,317,0.005,318,0.005,319,0.132,337,0.638,341,1.16,427,0.464,441,1.701,481,2.735,520,2.456,525,1.751,526,3.506,529,2.992,539,3.141,545,3.172,557,1.751,565,2.043,567,4.004,574,3.1,586,2.966,587,3.29,596,2.038,604,1.815,607,1.256,646,1.983,712,2.24,713,1.96,831,1.884,892,2.632,1036,1.584,1078,0.924,1114,1.074,1166,2.545,1298,1.815,1407,2.24,1459,2.24,1605,1.96,1644,1.692,1656,2.456,1658,2.375,1670,1.636,1694,4.435,1710,3.1,1858,1.96,1943,2.497,2065,3.625,2117,1.884,2131,2.136,2132,2.358,2133,3.533,2134,3.625,2135,3.867,2136,3.867,2137,3.867,2138,3.867,2139,2.664,2140,2.664,2141,2.664,2142,2.497,2143,4.553,2144,2.664,2145,2.664,2146,2.358,2147,2.664,2148,2.664,2149,2.664,2150,2.664,2151,2.497,2152,3.867,2153,2.664,2154,2.043,2155,2.664,2156,2.497,2157,2.497,2158,4.553,2159,5.533,2160,5.533,2161,2.497,2162,4.553,2163,4.553,2164,4.553,2165,4.553,2166,2.664,2167,4.553,2168,2.664,2169,3.867,2170,3.867,2171,3.867,2172,3.867,2173,3.867,2174,6.354,2175,2.497,2176,2.664,2177,2.664,2178,2.664,2179,2.664,2180,2.664,2181,2.664,2182,2.664,2183,2.664,2184,2.497,2185,2.664,2186,2.497,2187,6.31,2188,2.664,2189,2.664,2190,2.664,2191,2.497,2192,2.664,2193,2.664,2194,2.664,2195,2.664,2196,2.664,2197,4.995,2198,2.664,2199,4.553,2200,2.664,2201,3.867,2202,5.848,2203,5.848,2204,5.848,2205,2.664,2206,5.305,2207,5.709,2208,3.867,2209,2.664,2210,4.995,2211,2.664,2212,3.867,2213,3.867,2214,3.867,2215,3.867,2216,3.867,2217,3.867,2218,3.867,2219,3.867,2220,3.867,2221,3.867,2222,4.995,2223,3.867,2224,3.867,2225,2.664,2226,3.867,2227,2.664,2228,2.664,2229,3.867,2230,3.867,2231,2.664,2232,2.664,2233,3.867,2234,2.664,2235,2.664,2236,2.664,2237,2.664,2238,2.664,2239,2.664,2240,2.664,2241,2.358,2242,2.664,2243,2.664,2244,2.664,2245,2.664,2246,2.664,2247,2.664,2248,2.497]],["title/interfaces/Vertex.html",[106,0.111,901,3.252]],["body/interfaces/Vertex.html",[3,0.101,4,0.087,5,0.073,7,0.087,19,0.01,21,0.136,51,0.849,74,1.965,83,0.136,85,0.361,91,2.709,94,0.27,106,0.205,165,0.625,202,0.677,213,1.867,317,0.008,318,0.008,319,0.191,337,1.11,339,2.785,341,2.435,346,2.312,347,4.589,350,1.989,400,1.494,427,0.974,834,2.846,883,4.634,884,4.634,885,5.244,886,4.997,887,5.243,888,4.997,889,3.409,890,4.102,891,3.409,892,3.365,893,2.435,894,3.046,895,4.634,896,1.569,897,4.483,898,4.997,899,3.554,900,5.593,901,5.593,902,6.727,903,5.243,904,4.951,905,6.031,906,4.701,907,5.243,908,6.031,909,6.031,910,5.593,911,4.634,912,6.031,913,3.554,914,2.514,915,4.634,916,2.942,917,3.895,918,2.846,919,3.895,920,3.714,921,4.997,922,4.997,923,6.478,924,6.478,925,4.997,926,6.031,927,4.997,928,6.031,929,4.997,930,6.031,931,4.997,932,6.031,933,4.997,934,4.997,935,4.997]],["title/interfaces/ViewModes.html",[106,0.111,1284,2.879]],["body/interfaces/ViewModes.html",[3,0.106,4,0.092,5,0.077,7,0.092,19,0.01,21,0.126,83,0.141,85,0.379,94,0.197,106,0.221,165,0.674,178,1.307,187,0.532,200,2.498,317,0.008,318,0.008,319,0.197,337,1.168,381,0.766,893,2.51,896,1.651,913,3.74,1279,4.318,1280,4.572,1281,5.386,1282,4.318,1283,4.318,1284,5.105,1285,4.572,1286,4.572,1287,4.572,1288,3.74,1289,4.1,1290,4.318,1291,4.572,1292,3.45,1293,3.74,1294,4.572,1295,4.572,1296,4.242,1297,5.405,1298,3.323,1299,4.572,1300,4.708,1301,4.318]],["title/injectables/ViewportService.html",[429,1.665,1323,3.049]],["body/injectables/ViewportService.html",[0,0.175,3,0.071,4,0.061,5,0.052,7,0.061,8,1.124,16,0.978,18,0.857,19,0.01,20,0.42,21,0.14,22,1.151,24,1.597,50,0.3,52,0.954,83,0.071,85,0.347,94,0.278,97,1.158,163,0.652,165,0.63,202,0.743,222,1.798,227,1.1,240,1.71,258,1.439,265,0.84,281,1.565,317,0.006,318,0.006,319,0.152,336,3.025,341,1.943,342,3.055,343,4.532,344,3.114,345,4.479,346,2.612,347,4.512,348,2.048,384,2.381,398,4.967,427,1.15,429,2.285,430,1.133,452,2.073,453,1.421,462,2.741,577,2.005,696,6.028,710,4.813,714,5.895,717,3.951,718,5.281,777,2.494,800,4.463,838,4.076,893,1.943,1292,3.156,1310,4.531,1323,4.183,1410,5.909,1454,3.04,1474,3.156,1509,3.863,1611,3.283,1628,4.183,1630,3.751,1662,2.285,1883,3.577,2020,5.281,2129,5.466,2154,2.503,2253,4.463,2365,2.616,2437,3.06,2486,5.909,2570,5.281,2764,4.813,2780,5.281,2783,5.281,3404,4.595,3679,6.372,3737,3.951,3747,5.281,3942,6.469,3943,6.469,3948,5.281,4181,4.383,4182,6.828,4183,6.828,4184,5.992,4185,7.34,4186,7.34,4187,7.34,4188,7.34,4189,7.34,4190,7.34,4191,5.992,4192,5.992,4193,5.992,4194,5.992,4195,7.34,4196,5.992,4197,5.992,4198,5.992,4199,4.383,4200,4.383,4201,4.383,4202,4.383,4203,4.383,4204,4.383,4205,4.383,4206,4.383,4207,4.383,4208,5.992,4209,4.383,4210,5.281,4211,5.992,4212,4.383,4213,5.992,4214,5.992,4215,5.992,4216,4.383,4217,5.992,4218,4.383,4219,5.992,4220,4.383,4221,5.992,4222,4.383,4223,4.383,4224,5.992,4225,4.383,4226,4.383,4227,4.383,4228,5.992,4229,4.383,4230,5.992,4231,5.992,4232,5.281,4233,4.383,4234,5.992,4235,4.383,4236,7.34,4237,4.383,4238,4.383,4239,4.383,4240,4.383,4241,4.383,4242,4.383,4243,4.383,4244,4.383,4245,5.992,4246,5.992,4247,4.383,4248,4.383,4249,4.383,4250,5.992,4251,5.992,4252,4.383,4253,4.383,4254,7.34,4255,7.34,4256,7.34,4257,4.383,4258,4.383,4259,5.992,4260,5.992,4261,6.828,4262,4.383,4263,4.383]],["title/components/VirtualPedalsComponent.html",[640,0.905,873,1.874]],["body/components/VirtualPedalsComponent.html",[0,0.216,3,0.088,4,0.076,5,0.064,7,0.076,8,1.292,16,0.896,18,0.703,19,0.01,20,0.412,21,0.123,22,0.944,24,1.228,50,0.344,83,0.088,114,1.613,154,1.432,163,0.824,164,0.644,177,1.753,191,1.8,197,3.129,227,1.109,235,2.848,258,1.284,280,1.093,317,0.007,318,0.007,319,0.175,342,3.153,344,2.702,350,2.006,430,1.397,439,3.893,450,2.955,467,2.808,468,2.526,535,1.267,576,2.112,591,1.468,640,1.569,641,2.185,642,2.553,643,2.557,644,2.473,645,2.557,646,1.505,648,3.25,649,3.93,650,3.812,652,3.149,654,3.149,670,3.422,706,2.185,707,2.185,713,4.856,777,2.866,809,3.385,811,2.848,831,2.848,841,2.557,842,2.251,843,2.557,844,2.557,845,2.251,846,2.557,847,2.321,848,2.557,849,2.321,850,2.557,851,2.395,852,2.557,853,2.321,854,2.557,855,2.321,856,2.557,857,2.557,858,2.321,859,2.557,860,2.321,861,2.557,862,2.321,863,2.557,864,2.395,865,2.557,866,2.321,867,2.557,868,2.251,869,2.557,870,2.321,871,2.557,872,2.557,873,3.422,874,2.643,875,2.557,876,2.321,877,2.251,878,2.251,879,2.557,880,2.395,881,2.062,882,2.557,965,3.129,1079,2.647,1306,4.343,1347,4.027,1534,3.088,1552,4.027,1704,3.385,1729,4.31,2003,3.385,2097,2.647,2098,3.626,2099,2.848,2102,3.088,2106,2.963,2114,3.565,2115,5.287,2119,2.963,2122,3.255,2128,4.539,2488,3.772,2515,5.937,2529,4.766,2846,4.343,2849,4.11,3156,5.566,3698,7.417,3789,4.766,4264,8.416,4265,5.408,4266,7.573,4267,6.884,4268,6.884,4269,6.884,4270,6.884,4271,5.408,4272,5.408,4273,7.972,4274,6.884,4275,5.408,4276,6.884,4277,6.884,4278,5.408,4279,5.408,4280,5.408,4281,5.408,4282,5.408,4283,5.408,4284,4.766,4285,5.408,4286,5.408,4287,5.408,4288,5.408,4289,6.884,4290,6.884,4291,5.408]],["title/interfaces/WeavingLog.html",[106,0.111,3743,3.252]],["body/interfaces/WeavingLog.html",[3,0.102,4,0.088,5,0.074,7,0.088,19,0.01,20,0.315,21,0.132,50,0.378,51,0.913,52,1.371,66,1.722,83,0.14,85,0.47,94,0.253,106,0.214,119,2.272,163,0.823,165,0.667,187,0.438,265,0.749,317,0.008,318,0.008,319,0.192,337,1.124,350,2.228,355,1.71,381,0.623,393,1.44,486,3.318,487,2.472,519,3.301,524,2.545,532,3.581,533,2.978,535,1.475,538,1.753,546,2.881,591,2.283,593,4.631,918,2.881,1044,1.212,1073,2.211,1114,1.89,1159,1.99,1632,3.451,1699,2.978,1773,3.196,1796,3.985,2273,3.597,3066,4.152,3373,3.76,3389,5.545,3391,3.597,3392,3.451,3731,4.397,3732,5.281,3733,5.281,3734,4.397,3735,4.397,3736,4.152,3737,4.152,3738,4.397,3739,4.397,3740,4.397,3741,4.397,3742,4.69,3743,5.634,3744,6.755]],["title/interfaces/WeavingPick.html",[106,0.111,1699,2.065]],["body/interfaces/WeavingPick.html",[3,0.104,4,0.09,5,0.075,7,0.09,19,0.01,20,0.32,21,0.124,50,0.382,51,0.889,52,1.391,66,1.733,83,0.137,94,0.264,106,0.207,119,2.306,163,0.83,165,0.67,187,0.49,265,0.755,317,0.008,318,0.008,319,0.194,337,1.14,350,2.239,355,1.735,381,0.633,393,1.461,486,3.367,487,2.508,519,3.317,524,2.583,532,3.596,533,3.023,535,1.497,538,1.779,546,2.924,591,2.295,593,4.66,918,2.924,1044,1.23,1073,2.244,1114,1.918,1159,2.019,1632,3.502,1699,3.609,1773,3.243,1796,4.02,2273,3.651,3066,4.214,3373,3.816,3391,3.651,3392,3.502,3730,5.134,3731,4.462,3732,5.328,3733,5.328,3734,4.462,3735,4.462,3736,4.214,3737,4.214,3738,4.462,3739,4.462,3740,5.9,3741,5.9]],["title/interfaces/WeavingPick-1.html",[106,0.092,164,0.433,1699,1.721]],["body/interfaces/WeavingPick-1.html",[3,0.103,4,0.089,5,0.075,7,0.089,19,0.01,20,0.317,21,0.123,50,0.38,51,0.9,52,1.379,66,1.726,83,0.14,85,0.367,94,0.264,106,0.214,119,2.285,163,0.826,165,0.668,187,0.488,265,0.751,317,0.008,318,0.008,319,0.193,337,1.13,350,2.232,355,1.72,381,0.627,393,1.448,486,3.337,487,2.486,519,3.307,524,2.559,532,3.587,533,2.995,535,1.484,538,1.763,546,2.897,591,2.288,593,4.642,918,2.897,1044,1.219,1073,2.223,1114,1.901,1159,2.001,1632,3.47,1699,3.59,1773,3.214,1796,3.998,2273,3.618,3066,4.176,3373,3.781,3389,4.176,3391,3.618,3392,3.47,3731,4.422,3732,5.299,3733,5.299,3734,4.422,3735,4.422,3736,4.176,3737,4.176,3738,4.422,3739,4.422,3740,5.883,3741,5.883,3742,4.717,3743,4.717,3744,5.087]],["title/components/WeavingStateComponent.html",[640,0.905,876,1.874]],["body/components/WeavingStateComponent.html",[0,0.154,3,0.063,4,0.054,5,0.046,7,0.054,8,1.028,16,0.944,18,0.709,19,0.01,20,0.392,21,0.141,22,0.952,24,1.359,50,0.381,51,0.863,52,0.839,73,1.222,74,1.217,81,1.135,83,0.063,85,0.317,86,1.021,88,1.317,94,0.258,114,1.283,154,1.942,163,0.798,164,0.459,178,1.062,187,0.223,191,1.283,197,1.512,227,0.882,230,1.451,240,1.1,258,1.292,265,0.381,280,1.107,317,0.006,318,0.006,319,0.139,341,1.776,342,2.28,344,2.877,346,1.186,350,1.838,355,2.175,372,2.87,373,2.87,381,0.827,388,3.27,392,1.991,393,1.252,430,0.996,437,3.862,438,2.541,439,3.467,450,2.351,464,1.776,467,2.825,468,1.913,485,2.413,487,1.512,519,3.198,523,1.822,524,1.557,535,1.626,576,1.838,591,2.292,640,1.321,641,1.557,642,2.031,643,1.822,644,1.763,645,1.822,646,1.073,648,2.736,649,3.812,650,3.697,652,2.506,654,2.506,669,4.345,670,2.979,686,4.747,688,2.426,706,1.557,707,1.557,724,4.345,777,2.653,809,2.413,831,3.862,834,2.915,835,2.979,840,2.201,841,1.822,842,1.604,843,1.822,844,1.822,845,1.604,846,1.822,847,1.654,848,1.822,849,1.654,850,1.822,851,1.707,852,1.822,853,1.654,854,1.822,855,1.654,856,1.822,857,1.822,858,1.654,859,1.822,860,1.654,861,1.822,862,1.654,863,1.822,864,1.707,865,1.822,866,1.654,867,1.822,868,1.604,869,1.822,870,1.654,871,1.822,872,1.822,873,1.654,874,1.157,875,1.822,876,2.979,877,1.604,878,1.604,879,1.822,880,1.707,881,1.47,882,1.822,891,4.017,899,3.129,903,3.824,987,2.426,1044,0.741,1162,2.823,1169,1.283,1332,3.095,1333,3.095,1337,3.805,1341,4.747,1370,2.591,1382,4.202,1383,4.747,1384,3.396,1437,4.08,1497,5.617,1534,3.129,1662,1.47,1704,2.413,1729,3.43,1843,5.119,1964,4.4,2069,2.87,2097,3.589,2098,4.293,2099,2.03,2101,3.095,2102,4.72,2104,2.87,2105,3.095,2106,4.528,2110,2.201,2116,2.87,2117,3.862,2119,4.836,2120,2.87,2122,4.056,2475,4.907,2484,3.234,2485,2.413,2488,4.294,2493,2.87,2494,4.834,2515,5.461,2771,3.27,2849,3.27,2850,3.396,3082,5.574,3083,3.095,3091,5.119,3092,3.095,3093,3.095,3094,6.545,3095,5.889,3096,3.095,3097,4.828,3098,5.119,3099,4.4,3100,3.612,3105,5.689,3107,5.617,3108,3.396,3111,5.889,3112,6.119,3113,3.095,3114,3.095,3115,3.095,3116,3.095,3117,5.119,3118,3.095,3119,6.838,3120,6.545,3121,4.4,3122,3.095,3123,3.095,3124,5.119,3125,3.095,3126,3.095,3127,3.095,3128,3.095,3129,3.095,3130,3.095,3131,3.095,3132,3.095,3133,3.095,3134,3.095,3135,3.095,3259,3.396,3377,2.69,3404,2.413,3614,4.828,3635,7.005,3637,3.396,3640,5.617,3641,4.828,3652,3.396,3657,3.396,3658,3.396,3659,3.396,3660,3.396,3661,4.828,3666,3.396,3667,3.396,3668,3.396,3669,3.396,3686,4.828,3687,4.828,4292,8.721,4293,3.854,4294,6.373,4295,5.478,4296,6.373,4297,6.373,4298,6.373,4299,5.478,4300,5.478,4301,5.478,4302,3.854,4303,3.854,4304,3.854,4305,5.478,4306,3.854,4307,5.478,4308,5.478,4309,3.854,4310,5.478,4311,5.478,4312,5.478,4313,3.854,4314,3.854,4315,3.854,4316,3.854,4317,3.854,4318,3.854,4319,3.854,4320,3.854,4321,3.854,4322,3.854,4323,3.854,4324,5.478,4325,3.854,4326,5.478,4327,3.854,4328,3.854,4329,3.854,4330,5.478,4331,5.478,4332,3.854,4333,3.854,4334,3.854,4335,6.373,4336,5.478,4337,5.478,4338,3.854,4339,3.854,4340,3.854,4341,3.854,4342,3.854,4343,3.854,4344,3.854,4345,3.854,4346,3.854,4347,3.854,4348,3.854,4349,5.478,4350,3.854]],["title/interfaces/YarnPath.html",[106,0.111,915,3.252]],["body/interfaces/YarnPath.html",[3,0.101,4,0.087,5,0.073,7,0.087,19,0.01,21,0.139,51,0.847,74,1.954,83,0.136,85,0.466,91,2.7,94,0.269,106,0.204,165,0.624,202,0.673,213,1.857,317,0.008,318,0.008,319,0.19,337,1.104,339,2.775,341,2.426,346,2.304,347,4.238,350,1.982,400,1.485,427,0.971,834,2.83,883,4.608,884,4.608,885,5.234,886,4.969,887,5.225,888,4.969,889,3.39,890,4.079,891,3.39,892,3.36,893,2.426,894,3.029,895,4.608,896,1.56,897,4.468,898,4.969,899,3.534,900,5.574,901,4.608,902,4.969,903,5.225,904,4.934,905,6.011,906,4.686,907,5.225,908,6.011,909,6.875,910,6.376,911,4.608,912,6.875,913,3.534,914,2.5,915,5.574,916,2.926,917,3.874,918,2.83,919,3.874,920,3.694,921,4.969,922,4.969,923,6.462,924,6.462,925,4.969,926,6.011,927,4.969,928,6.011,929,4.969,930,6.011,931,4.969,932,6.011,933,4.969,934,4.969,935,4.969]],["title/dependencies.html",[2678,3.466,4351,2.922]],["body/dependencies.html",[19,0.01,317,0.008,318,0.008,430,1.708,712,4.139,729,5.826,986,2.928,2013,5.309,2122,3.126,2427,4.923,2678,4.358,3696,5.826,4352,6.611,4353,9.076,4354,6.611,4355,6.611,4356,6.611,4357,6.611,4358,6.611,4359,7.786,4360,6.253,4361,6.611,4362,6.611,4363,6.611,4364,6.611,4365,6.611,4366,8.545,4367,6.611,4368,7.786,4369,6.611,4370,6.611,4371,6.611,4372,6.611,4373,6.611,4374,6.611,4375,6.611,4376,6.611,4377,6.611,4378,6.611,4379,6.611,4380,5.826,4381,6.611,4382,6.611,4383,6.611,4384,6.611,4385,6.611,4386,6.611,4387,6.611,4388,6.611,4389,6.611,4390,6.611,4391,6.611,4392,6.611,4393,6.611,4394,6.611,4395,6.611,4396,6.611,4397,6.611,4398,6.611]],["title/miscellaneous/functions.html",[82,0.986,4399,2.71]],["body/miscellaneous/functions.html",[6,2.605,7,0.072,18,0.928,19,0.01,20,0.454,21,0.148,22,1.246,24,1.614,51,0.731,56,3.507,57,1.374,60,2.274,66,1.414,69,1.839,73,1.648,81,1.62,82,0.963,85,0.534,88,2.275,94,0.269,98,3.378,115,1.755,118,1.638,154,1.36,155,1.064,163,0.559,164,0.611,175,2.705,178,0.965,187,0.496,190,2.204,202,0.804,204,2.428,265,0.508,270,1.203,280,1.638,295,2.705,298,2.69,317,0.007,318,0.007,323,4.836,424,1.174,432,3.046,433,3.149,434,3.378,435,3.975,441,1.429,485,4.169,518,3.385,526,2.348,529,3.827,530,3.803,532,3.566,533,3.926,534,4.284,538,1.853,546,3.046,562,2.932,565,2.932,577,3.576,580,4.39,581,4.648,583,3.584,586,4.466,605,2.705,609,3.584,615,3.584,617,3.584,624,2.932,1044,1.281,1288,2.932,1407,3.214,1580,3.385,1608,3.385,1611,3.648,1620,3.584,1622,3.975,1697,4.648,1698,4.39,1798,4.169,1918,3.214,2132,3.385,2151,3.584,2157,3.584,2161,3.584,2186,3.584,2452,5.503,2511,4.124,2555,4.124,2563,6.512,2591,3.824,2635,4.124,2636,5.348,2637,5.348,2638,5.348,2640,4.124,3007,4.525,3146,3.824,3175,4.959,3181,3.584,3182,4.124,3183,4.124,3184,4.124,3185,4.124,3266,4.525,3296,4.525,3298,4.525,3730,4.124,3742,3.824,4125,4.525,4129,4.124,4151,4.525,4152,4.525,4153,4.525,4154,4.525,4155,4.525,4156,5.868,4157,4.525,4158,4.525,4399,3.824,4400,6.658,4401,7.14,4402,6.658,4403,6.658,4404,7.819,4405,5.134,4406,6.658,4407,6.658,4408,6.658,4409,6.658,4410,4.525,4411,6.658,4412,7.14,4413,5.134,4414,6.658,4415,5.134,4416,6.658,4417,4.525,4418,4.525,4419,6.658,4420,5.134,4421,6.658,4422,5.134,4423,6.658,4424,5.134,4425,5.134,4426,5.134,4427,4.525,4428,5.134,4429,5.134,4430,5.134]],["title/index.html",[7,0.051,4431,3.638,4432,3.638]],["body/index.html",[4,0.06,5,0.07,18,0.44,19,0.008,21,0.07,51,0.858,61,1.197,63,1.434,66,0.914,67,1.168,69,1.717,72,1.847,73,0.96,75,2.25,80,3.116,81,1.226,82,0.807,96,2.351,106,0.109,108,3.225,112,1.291,117,1.847,119,2.134,129,2.035,130,2.134,155,1.226,156,2.391,160,2.035,161,2.798,178,0.623,183,2.131,202,0.468,213,1.291,230,1.14,234,3.116,270,1.789,272,4.337,273,1.847,281,1.436,291,2.266,292,3.116,298,1.738,317,0.007,318,0.006,339,2.507,341,2.192,348,2.022,354,3.455,355,2.142,358,2.457,359,2.568,361,4.406,362,3.204,363,5.424,366,3.562,381,0.426,385,3.204,386,3.242,399,3.792,400,1.033,424,1.882,427,0.558,443,7.004,444,2.902,448,3.455,449,3.455,453,1.395,462,2.706,481,2.266,485,2.694,488,6.337,505,2.837,542,2.837,557,3.31,587,1.847,591,1.606,600,2.568,602,3.004,607,2.374,608,3.004,640,1.509,642,3.098,644,3.093,646,1.647,650,3.178,651,5.214,696,3.004,701,1.359,704,5.214,709,3.455,710,3.455,834,1.968,835,1.847,877,2.815,885,2.694,889,2.357,890,2.837,892,2.996,893,2.192,895,4.406,896,1.705,897,2.568,904,2.837,907,3.004,910,3.204,913,2.457,916,3.198,917,2.694,920,2.568,961,2.609,987,2.995,1044,1.607,1060,1.905,1077,2.106,1098,2.106,1113,2.106,1145,2.391,1147,3.862,1158,1.432,1159,1.359,1161,2.106,1288,2.457,1340,4.559,1372,3.204,1373,3.792,1374,3.004,1441,4.13,1444,3.455,1451,3.004,1459,2.694,1474,4.497,1565,4.752,1566,3.004,1579,3.836,1588,4.559,1608,3.901,1610,4.022,1611,3.242,1612,3.204,1614,5.036,1628,4.13,1638,2.694,1641,3.204,1644,3.893,1658,3.697,1664,2.183,1665,2.266,1670,1.968,1675,2.266,1679,2.035,1714,2.694,1716,2.694,1721,2.694,1772,2.694,1796,4.022,1861,2.837,1862,2.837,1883,2.568,2029,3.792,2073,5.214,2074,5.214,2080,3.455,2094,3.792,2097,2.106,2129,3.204,2133,3.562,2142,5.084,2184,3.004,2273,2.457,2284,3.204,2287,3.455,2311,3.004,2325,3.455,2435,6.132,2491,3.792,2497,5.849,2564,3.792,2567,5.214,2571,4.752,2589,3.455,2591,4.406,2675,6.132,2677,4.801,2678,2.837,2764,4.752,2768,3.455,2863,3.792,2899,5.214,2995,3.792,2997,3.455,2999,6.418,3001,5.036,3074,3.792,3147,3.792,3168,3.455,3181,4.13,3392,2.357,3497,3.204,3736,3.901,3807,3.792,3849,6.418,3934,3.792,3984,3.792,4026,3.792,4129,3.455,4210,3.792,4232,3.792,4351,3.455,4360,3.455,4380,7.123,4427,3.792,4433,6.762,4434,4.302,4435,7.283,4436,4.302,4437,4.302,4438,5.916,4439,4.302,4440,4.302,4441,4.302,4442,4.302,4443,4.302,4444,4.302,4445,4.302,4446,7.283,4447,4.302,4448,4.302,4449,4.302,4450,4.302,4451,4.302,4452,4.302,4453,4.302,4454,4.302,4455,4.302,4456,4.302,4457,4.302,4458,7.283,4459,4.302,4460,4.302,4461,7.89,4462,7.283,4463,4.302,4464,4.302,4465,4.302,4466,4.302,4467,4.302,4468,4.302,4469,5.916,4470,4.302,4471,4.302,4472,4.302,4473,4.302,4474,4.302,4475,4.302,4476,4.302,4477,4.302,4478,5.916,4479,5.916,4480,4.302,4481,4.302,4482,4.302,4483,8.082,4484,4.302,4485,4.302,4486,4.302,4487,4.302,4488,5.916,4489,4.302,4490,4.302,4491,4.302,4492,4.302,4493,4.302,4494,4.302,4495,4.302,4496,4.302,4497,4.302,4498,4.302,4499,4.302,4500,4.302,4501,5.916,4502,4.302,4503,4.302,4504,6.762,4505,7.283,4506,4.302,4507,4.302,4508,7.89,4509,4.302,4510,4.302,4511,4.302,4512,6.762,4513,5.916,4514,5.916,4515,4.302,4516,4.302,4517,4.302,4518,4.302,4519,3.792,4520,4.302,4521,4.302,4522,4.302,4523,6.762,4524,5.916,4525,5.916,4526,4.302,4527,4.302,4528,4.302,4529,4.302,4530,5.916,4531,7.283,4532,4.302,4533,4.302,4534,4.302,4535,5.916,4536,5.916,4537,4.302,4538,4.302,4539,4.302,4540,5.916,4541,4.302,4542,5.916,4543,4.302,4544,4.302,4545,4.302,4546,4.302,4547,4.302,4548,4.302,4549,4.302,4550,4.302,4551,4.302,4552,4.302,4553,4.302,4554,4.302,4555,4.302,4556,4.302,4557,4.302,4558,4.302,4559,4.302,4560,4.302,4561,4.302,4562,4.302,4563,5.916,4564,3.792,4565,4.302,4566,4.302,4567,4.302,4568,4.302,4569,4.302,4570,4.302,4571,4.302,4572,4.302,4573,4.302,4574,4.302,4575,4.302,4576,4.302,4577,4.302,4578,4.302,4579,4.302,4580,3.792,4581,4.302,4582,4.302,4583,4.302,4584,4.302,4585,4.302,4586,4.302,4587,4.302,4588,4.302,4589,4.302,4590,4.302,4591,5.916,4592,4.302,4593,4.302,4594,6.762,4595,5.916,4596,4.302,4597,4.302,4598,4.302,4599,4.302,4600,4.302,4601,4.302,4602,4.302,4603,4.302,4604,4.302,4605,4.302,4606,4.302,4607,4.302,4608,6.762,4609,4.302,4610,4.302,4611,5.916,4612,4.302,4613,7.635,4614,4.302,4615,4.302,4616,4.302,4617,4.302,4618,4.302,4619,4.302]],["title/modules.html",[2677,3.941]],["body/modules.html",[19,0.009,317,0.009,318,0.009,662,6.077,2676,5.339,2677,4.727,2682,5.005,4360,6.554,4620,8.16,4621,8.16]],["title/overview.html",[4622,5.268]],["body/overview.html",[2,1.95,19,0.01,317,0.008,318,0.008,337,1.13,641,3.284,642,2.349,706,3.284,707,3.284,796,5.582,811,3.998,845,3.384,847,3.489,849,3.489,851,3.6,853,3.489,855,3.489,858,3.489,860,3.489,862,3.489,864,3.6,866,3.489,868,3.682,870,3.489,873,3.489,876,3.489,877,2.637,878,3.384,1457,4.752,1512,4.422,2365,3.781,2676,6.951,2677,4.176,2678,5.005,2679,5.582,2680,5.582,2681,5.582,2682,6.349,2683,5.087,3690,5.582,3691,5.582,3692,5.582,4284,5.582,4622,5.582,4623,6.334,4624,6.334]],["title/properties.html",[319,0.134,4351,2.922]],["body/properties.html",[19,0.009,317,0.009,318,0.009,319,0.183,1664,3.644,4625,7.182,4626,7.182,4627,7.182,4628,7.182,4629,7.182]],["title/miscellaneous/typealiases.html",[4399,2.71,4630,5.257]],["body/miscellaneous/typealiases.html",[5,0.056,6,2.426,7,0.067,9,2.292,10,2.292,11,2.907,12,2.907,13,2.907,15,3.759,16,0.52,18,0.489,19,0.01,21,0.149,27,3.759,51,0.805,53,2.423,57,1.21,58,2.814,60,3.368,61,1.769,62,2.519,63,1.462,64,2.519,65,2.519,66,1.349,67,1.298,68,2.519,69,1.723,70,2.341,71,2.172,72,2.052,73,1.905,74,1.51,75,2.115,81,1.317,82,1.192,84,3.347,85,0.489,86,1.266,87,3.347,89,3.347,94,0.191,98,3.224,110,3.347,112,1.435,118,1.176,119,1.725,120,2.341,124,3.347,125,3.347,128,2.118,129,3.928,131,3.347,135,3.347,143,3.347,152,3.347,156,1.932,157,3.347,159,2.341,160,2.261,161,2.261,162,2.519,163,0.776,164,0.756,165,0.644,166,2.519,167,3.347,169,3.347,171,3.347,172,3.347,173,3.347,174,3.347,178,0.693,183,1.399,185,2.341,186,3.347,187,0.277,207,1.331,231,4.467,233,3.347,266,3.347,267,3.347,270,1.12,314,3.347,315,2.292,317,0.007,318,0.007,339,1.773,345,3.224,355,2.149,358,2.731,361,3.561,362,3.561,363,3.561,366,4.006,381,0.629,400,1.148,424,1.453,425,2.341,426,2.519,432,2.187,480,1.725,505,3.153,506,3.561,518,3.153,526,2.907,528,3.629,540,4.19,544,3.629,557,2.341,564,2.62,580,4.19,587,2.727,634,3.482,635,4.19,636,4.19,637,3.153,639,4.19,646,1.331,701,2.255,702,4.732,884,3.561,885,5.2,887,3.338,891,2.62,896,1.206,897,2.855,900,4.732,904,3.153,907,3.338,916,2.261,917,4.761,918,2.187,919,2.994,920,2.855,937,2.341,961,1.634,982,3.11,1014,3.11,1044,1.373,1049,1.51,1158,1.591,1288,2.731,1312,2.907,1386,3.84,1588,3.978,1600,3.561,1604,3.063,1605,3.482,1606,3.153,1607,3.338,1610,2.519,1662,1.824,1672,2.341,1773,2.426,1973,6.186,2078,3.561,2099,2.519,2131,2.855,2132,3.153,2250,3.84,2251,3.84,2276,6.358,2278,5.309,2279,5.961,2280,5.103,2281,5.103,2282,6.108,2284,3.561,2329,3.84,2370,4.344,2494,3.153,2511,3.84,2555,5.103,2561,5.6,2997,3.84,3146,3.561,3151,5.103,3154,6.775,3155,5.103,3159,4.732,3161,4.732,3165,4.732,3174,4.732,3176,3.84,3177,4.732,3178,4.732,3179,5.103,4171,4.214,4399,3.561,4401,4.214,4410,7.525,4412,7.173,4417,8.089,4418,5.6,4519,4.214,4564,4.214,4580,5.6,4631,4.782,4632,7.605,4633,4.782,4634,4.782,4635,7.605,4636,6.354,4637,7.137,4638,6.354,4639,4.782,4640,6.354,4641,7.137,4642,6.354,4643,6.354,4644,4.782,4645,4.782,4646,4.782,4647,4.782,4648,4.782,4649,4.782,4650,4.782,4651,4.782,4652,6.354,4653,4.782,4654,4.782,4655,4.782,4656,4.782,4657,4.782,4658,4.782,4659,4.782,4660,4.782]]],"invertedIndex":[["",{"_index":19,"title":{},"body":{"classes/AbstractOpFactory.html":{},"classes/BaseOp.html":{},"interfaces/Bounds.html":{},"classes/Branch.html":{},"classes/Bus.html":{},"classes/Cell.html":{},"interfaces/ChainIndex.html":{},"interfaces/ChainOp.html":{},"components/ConnectionComponent.html":{},"interfaces/Crossing.html":{},"classes/DBListener.html":{},"classes/DBListenerArray.html":{},"classes/DBNode.html":{},"classes/DBNodeArray.html":{},"classes/DBTwoWay.html":{},"classes/DBTwoWayArray.html":{},"classes/DBWriteBuffer.html":{},"classes/DBWriter.html":{},"classes/DBWriterArray.html":{},"interfaces/DensityUnits.html":{},"interfaces/DesignActions.html":{},"interfaces/DesignMode.html":{},"interfaces/DraftMap.html":{},"interfaces/DraftNodeProxy.html":{},"interfaces/DraftOperationClassification.html":{},"components/DraftdetailComponent.html":{},"interfaces/DynamicOperation.html":{},"interfaces/FileObj.html":{},"interfaces/FileSaver.html":{},"interfaces/Fileloader.html":{},"interfaces/IOTuple.html":{},"components/ImageComponent.html":{},"interfaces/Ink.html":{},"injectables/InkService.html":{},"components/InletComponent.html":{},"interfaces/Interlacement.html":{},"interfaces/InterlacementVal.html":{},"injectables/LayersService.html":{},"interfaces/LoadResponse.html":{},"interfaces/LoomConfig.html":{},"interfaces/LoomTypes.html":{},"injectables/MappingsService.html":{},"directives/MarqueeComponent.html":{},"interfaces/MaterialTypes.html":{},"classes/Merge.html":{},"modules/MixerModule.html":{},"components/MixerViewComponent.html":{},"interfaces/NodeComponentProxy.html":{},"interfaces/NodeMethods.html":{},"interfaces/NodeParams.html":{},"components/NoteComponent.html":{},"classes/OnlineStatus.html":{},"interfaces/OpClassifier.html":{},"interfaces/OpComponentProxy.html":{},"components/OpHelpModal.html":{},"interfaces/OpInput.html":{},"classes/OpSequencer.html":{},"components/OpSequencerComponent.html":{},"interfaces/OperationClassification.html":{},"interfaces/OperationParam.html":{},"interfaces/OperationProperties.html":{},"components/OpsComponent.html":{},"interfaces/PairedOp.html":{},"components/ParameterComponent.html":{},"classes/Params.html":{},"interfaces/Pedal.html":{},"classes/PedalConfig.html":{},"interfaces/PedalEvent.html":{},"classes/PedalStatus.html":{},"injectables/PedalsService.html":{},"classes/Pipe.html":{},"components/PlayerComponent.html":{},"modules/PlayerModule.html":{},"interfaces/PlayerOp.html":{},"injectables/PlayerService.html":{},"interfaces/PlayerState.html":{},"interfaces/PlayerState-1.html":{},"interfaces/Point.html":{},"classes/Render.html":{},"interfaces/SaveObj.html":{},"classes/Seed.html":{},"classes/Selection.html":{},"directives/SelectionComponent.html":{},"injectables/SequencerService.html":{},"classes/Shape.html":{},"classes/Shape-1.html":{},"classes/Shuttle.html":{},"components/SnackbarComponent.html":{},"interfaces/StatusMessage.html":{},"classes/System.html":{},"interfaces/TopologyDef.html":{},"interfaces/TreeNode.html":{},"interfaces/TreeNodeProxy.html":{},"interfaces/TreeOperation.html":{},"interfaces/Vertex.html":{},"interfaces/ViewModes.html":{},"injectables/ViewportService.html":{},"components/VirtualPedalsComponent.html":{},"interfaces/WeavingLog.html":{},"interfaces/WeavingPick.html":{},"interfaces/WeavingPick-1.html":{},"components/WeavingStateComponent.html":{},"interfaces/YarnPath.html":{},"dependencies.html":{},"miscellaneous/functions.html":{},"index.html":{},"modules.html":{},"overview.html":{},"properties.html":{},"miscellaneous/typealiases.html":{}}}],["0",{"_index":163,"title":{},"body":{"classes/AbstractOpFactory.html":{},"classes/BaseOp.html":{},"classes/Branch.html":{},"classes/Bus.html":{},"interfaces/ChainOp.html":{},"components/ConnectionComponent.html":{},"classes/DBListener.html":{},"classes/DBListenerArray.html":{},"classes/DBNode.html":{},"classes/DBNodeArray.html":{},"classes/DBTwoWay.html":{},"classes/DBTwoWayArray.html":{},"classes/DBWriteBuffer.html":{},"classes/DBWriter.html":{},"classes/DBWriterArray.html":{},"interfaces/DesignActions.html":{},"interfaces/DraftMap.html":{},"interfaces/DraftOperationClassification.html":{},"interfaces/DynamicOperation.html":{},"interfaces/IOTuple.html":{},"interfaces/Interlacement.html":{},"interfaces/InterlacementVal.html":{},"injectables/LayersService.html":{},"interfaces/LoomConfig.html":{},"injectables/MappingsService.html":{},"directives/MarqueeComponent.html":{},"classes/Merge.html":{},"components/MixerViewComponent.html":{},"interfaces/NodeMethods.html":{},"interfaces/NodeParams.html":{},"components/NoteComponent.html":{},"classes/OnlineStatus.html":{},"interfaces/OpClassifier.html":{},"components/OpHelpModal.html":{},"interfaces/OpInput.html":{},"classes/OpSequencer.html":{},"interfaces/OperationClassification.html":{},"interfaces/OperationProperties.html":{},"interfaces/PairedOp.html":{},"components/ParameterComponent.html":{},"interfaces/Pedal.html":{},"classes/PedalConfig.html":{},"interfaces/PedalEvent.html":{},"classes/PedalStatus.html":{},"injectables/PedalsService.html":{},"classes/Pipe.html":{},"interfaces/PlayerOp.html":{},"injectables/PlayerService.html":{},"interfaces/PlayerState.html":{},"interfaces/PlayerState-1.html":{},"classes/Render.html":{},"classes/Seed.html":{},"classes/Selection.html":{},"directives/SelectionComponent.html":{},"classes/Shape.html":{},"classes/Shape-1.html":{},"classes/Shuttle.html":{},"classes/System.html":{},"interfaces/TopologyDef.html":{},"interfaces/TreeNode.html":{},"interfaces/TreeOperation.html":{},"injectables/ViewportService.html":{},"components/VirtualPedalsComponent.html":{},"interfaces/WeavingLog.html":{},"interfaces/WeavingPick.html":{},"interfaces/WeavingPick-1.html":{},"components/WeavingStateComponent.html":{},"miscellaneous/functions.html":{},"miscellaneous/typealiases.html":{}}}],["0.0.1",{"_index":4379,"title":{},"body":{"dependencies.html":{}}}],["0.0.6",{"_index":4373,"title":{},"body":{"dependencies.html":{}}}],["0.11.4",{"_index":4398,"title":{},"body":{"dependencies.html":{}}}],["0.50",{"_index":3118,"title":{},"body":{"components/OpSequencerComponent.html":{},"components/PlayerComponent.html":{},"components/WeavingStateComponent.html":{}}}],["0.8.0",{"_index":4375,"title":{},"body":{"dependencies.html":{}}}],["00d1b2",{"_index":2479,"title":{},"body":{"components/InletComponent.html":{},"components/OpHelpModal.html":{},"components/OpsComponent.html":{},"components/SnackbarComponent.html":{}}}],["0101",{"_index":4654,"title":{},"body":{"miscellaneous/typealiases.html":{}}}],["0][0",{"_index":4571,"title":{},"body":{"index.html":{}}}],["0a0000",{"_index":4341,"title":{},"body":{"components/WeavingStateComponent.html":{}}}],["0pt",{"_index":3112,"title":{},"body":{"components/OpSequencerComponent.html":{},"components/PlayerComponent.html":{},"components/WeavingStateComponent.html":{}}}],["0px",{"_index":840,"title":{},"body":{"components/ConnectionComponent.html":{},"components/DraftdetailComponent.html":{},"components/MixerViewComponent.html":{},"components/NoteComponent.html":{},"components/OpSequencerComponent.html":{},"components/OpsComponent.html":{},"components/ParameterComponent.html":{},"components/PlayerComponent.html":{},"components/WeavingStateComponent.html":{}}}],["1",{"_index":164,"title":{"interfaces/PlayerState-1.html":{},"classes/Shape-1.html":{},"interfaces/WeavingPick-1.html":{}},"body":{"classes/AbstractOpFactory.html":{},"classes/BaseOp.html":{},"classes/Branch.html":{},"classes/Bus.html":{},"interfaces/ChainIndex.html":{},"interfaces/ChainOp.html":{},"components/ConnectionComponent.html":{},"classes/DBListener.html":{},"classes/DBListenerArray.html":{},"classes/DBNode.html":{},"classes/DBNodeArray.html":{},"classes/DBTwoWay.html":{},"classes/DBTwoWayArray.html":{},"classes/DBWriteBuffer.html":{},"classes/DBWriter.html":{},"classes/DBWriterArray.html":{},"interfaces/DesignActions.html":{},"interfaces/DraftMap.html":{},"interfaces/DraftOperationClassification.html":{},"interfaces/DynamicOperation.html":{},"interfaces/IOTuple.html":{},"components/InletComponent.html":{},"interfaces/Interlacement.html":{},"interfaces/InterlacementVal.html":{},"interfaces/LoomConfig.html":{},"injectables/MappingsService.html":{},"classes/Merge.html":{},"components/MixerViewComponent.html":{},"interfaces/NodeMethods.html":{},"interfaces/NodeParams.html":{},"classes/OnlineStatus.html":{},"interfaces/OpClassifier.html":{},"interfaces/OpInput.html":{},"classes/OpSequencer.html":{},"components/OpSequencerComponent.html":{},"interfaces/OperationClassification.html":{},"interfaces/OperationProperties.html":{},"components/OpsComponent.html":{},"interfaces/PairedOp.html":{},"components/ParameterComponent.html":{},"interfaces/Pedal.html":{},"classes/PedalConfig.html":{},"interfaces/PedalEvent.html":{},"classes/PedalStatus.html":{},"injectables/PedalsService.html":{},"classes/Pipe.html":{},"components/PlayerComponent.html":{},"interfaces/PlayerOp.html":{},"injectables/PlayerService.html":{},"classes/Render.html":{},"classes/Seed.html":{},"classes/Selection.html":{},"injectables/SequencerService.html":{},"classes/Shape.html":{},"classes/Shuttle.html":{},"classes/System.html":{},"interfaces/TopologyDef.html":{},"interfaces/TreeNode.html":{},"interfaces/TreeOperation.html":{},"components/VirtualPedalsComponent.html":{},"components/WeavingStateComponent.html":{},"miscellaneous/functions.html":{},"miscellaneous/typealiases.html":{}}}],["1).length",{"_index":2216,"title":{},"body":{"interfaces/DynamicOperation.html":{},"interfaces/OpInput.html":{},"interfaces/OperationClassification.html":{},"interfaces/TreeOperation.html":{}}}],["1.0.5",{"_index":4377,"title":{},"body":{"dependencies.html":{}}}],["1.1em",{"_index":3337,"title":{},"body":{"components/ParameterComponent.html":{}}}],["1.25",{"_index":3822,"title":{},"body":{"classes/Render.html":{}}}],["1.2em",{"_index":3006,"title":{},"body":{"components/OpHelpModal.html":{}}}],["1.5",{"_index":3821,"title":{},"body":{"classes/Render.html":{}}}],["1.75",{"_index":3819,"title":{},"body":{"classes/Render.html":{}}}],["1.8em",{"_index":3004,"title":{},"body":{"components/OpHelpModal.html":{}}}],["10",{"_index":2069,"title":{},"body":{"components/DraftdetailComponent.html":{},"components/NoteComponent.html":{},"classes/Render.html":{},"components/WeavingStateComponent.html":{}}}],["100",{"_index":2771,"title":{},"body":{"components/MixerViewComponent.html":{},"components/OpSequencerComponent.html":{},"components/OpsComponent.html":{},"components/ParameterComponent.html":{},"components/PlayerComponent.html":{},"classes/Render.html":{},"components/SnackbarComponent.html":{},"components/WeavingStateComponent.html":{}}}],["10px",{"_index":3105,"title":{},"body":{"components/OpSequencerComponent.html":{},"components/OpsComponent.html":{},"components/ParameterComponent.html":{},"components/PlayerComponent.html":{},"components/WeavingStateComponent.html":{}}}],["11.0.0",{"_index":4389,"title":{},"body":{"dependencies.html":{}}}],["1100",{"_index":4655,"title":{},"body":{"miscellaneous/typealiases.html":{}}}],["12",{"_index":3790,"title":{},"body":{"classes/Render.html":{}}}],["121f6b",{"_index":3123,"title":{},"body":{"components/OpSequencerComponent.html":{},"components/PlayerComponent.html":{},"components/WeavingStateComponent.html":{}}}],["1255px",{"_index":4339,"title":{},"body":{"components/WeavingStateComponent.html":{}}}],["129",{"_index":3346,"title":{},"body":{"components/ParameterComponent.html":{}}}],["13.0.2",{"_index":4366,"title":{},"body":{"dependencies.html":{}}}],["13.1.1",{"_index":4353,"title":{},"body":{"dependencies.html":{}}}],["130px",{"_index":4350,"title":{},"body":{"components/WeavingStateComponent.html":{}}}],["14px",{"_index":3096,"title":{},"body":{"components/OpSequencerComponent.html":{},"components/OpsComponent.html":{},"components/WeavingStateComponent.html":{}}}],["15",{"_index":769,"title":{},"body":{"components/ConnectionComponent.html":{},"classes/Render.html":{}}}],["15*this.scale/this.default_cell_size",{"_index":756,"title":{},"body":{"components/ConnectionComponent.html":{}}}],["150",{"_index":4039,"title":{},"body":{"classes/Shape-1.html":{}}}],["16px",{"_index":2852,"title":{},"body":{"components/MixerViewComponent.html":{}}}],["18",{"_index":4623,"title":{},"body":{"overview.html":{}}}],["18px",{"_index":2107,"title":{},"body":{"components/DraftdetailComponent.html":{}}}],["19",{"_index":4343,"title":{},"body":{"components/WeavingStateComponent.html":{}}}],["1]+1",{"_index":4167,"title":{},"body":{"classes/System.html":{}}}],["1em",{"_index":2115,"title":{},"body":{"components/DraftdetailComponent.html":{},"components/MixerViewComponent.html":{},"components/OpsComponent.html":{},"components/SnackbarComponent.html":{},"components/VirtualPedalsComponent.html":{}}}],["1px",{"_index":3127,"title":{},"body":{"components/OpSequencerComponent.html":{},"components/PlayerComponent.html":{},"components/WeavingStateComponent.html":{}}}],["2",{"_index":811,"title":{},"body":{"components/ConnectionComponent.html":{},"interfaces/DraftOperationClassification.html":{},"interfaces/IOTuple.html":{},"interfaces/LoomConfig.html":{},"classes/OpSequencer.html":{},"classes/PedalConfig.html":{},"injectables/PlayerService.html":{},"classes/Render.html":{},"interfaces/TreeNode.html":{},"components/VirtualPedalsComponent.html":{},"overview.html":{}}}],["2.2.0",{"_index":4625,"title":{},"body":{"properties.html":{}}}],["2.3.1",{"_index":4396,"title":{},"body":{"dependencies.html":{}}}],["20",{"_index":2928,"title":{},"body":{"components/NoteComponent.html":{}}}],["200",{"_index":2885,"title":{},"body":{"components/NoteComponent.html":{}}}],["200px",{"_index":2108,"title":{},"body":{"components/DraftdetailComponent.html":{}}}],["20px",{"_index":2116,"title":{},"body":{"components/DraftdetailComponent.html":{},"components/OpSequencerComponent.html":{},"components/OpsComponent.html":{},"components/WeavingStateComponent.html":{}}}],["210px",{"_index":3101,"title":{},"body":{"components/OpSequencerComponent.html":{},"components/PlayerComponent.html":{}}}],["214",{"_index":4349,"title":{},"body":{"components/WeavingStateComponent.html":{}}}],["222222",{"_index":4344,"title":{},"body":{"components/WeavingStateComponent.html":{}}}],["25",{"_index":3335,"title":{},"body":{"components/ParameterComponent.html":{},"classes/Render.html":{}}}],["250",{"_index":2778,"title":{},"body":{"components/MixerViewComponent.html":{}}}],["250px",{"_index":2844,"title":{},"body":{"components/MixerViewComponent.html":{}}}],["255",{"_index":3117,"title":{},"body":{"components/OpSequencerComponent.html":{},"components/PlayerComponent.html":{},"components/WeavingStateComponent.html":{}}}],["257px",{"_index":2847,"title":{},"body":{"components/MixerViewComponent.html":{}}}],["2640",{"_index":1811,"title":{},"body":{"interfaces/DraftOperationClassification.html":{},"interfaces/LoomConfig.html":{},"classes/PedalConfig.html":{},"injectables/PlayerService.html":{}}}],["2d",{"_index":1607,"title":{},"body":{"interfaces/DraftMap.html":{},"interfaces/Interlacement.html":{},"interfaces/InterlacementVal.html":{},"classes/Shape-1.html":{},"miscellaneous/typealiases.html":{}}}],["2em",{"_index":3264,"title":{},"body":{"components/OpsComponent.html":{}}}],["2px",{"_index":2850,"title":{},"body":{"components/MixerViewComponent.html":{},"components/WeavingStateComponent.html":{}}}],["3",{"_index":2846,"title":{},"body":{"components/MixerViewComponent.html":{},"classes/Shape.html":{},"components/VirtualPedalsComponent.html":{}}}],["3*this.scale",{"_index":793,"title":{},"body":{"components/ConnectionComponent.html":{}}}],["3*this.scale/this.default_cell_size",{"_index":768,"title":{},"body":{"components/ConnectionComponent.html":{}}}],["3.0",{"_index":4628,"title":{},"body":{"properties.html":{}}}],["3.6.4",{"_index":4382,"title":{},"body":{"dependencies.html":{}}}],["30",{"_index":796,"title":{},"body":{"components/ConnectionComponent.html":{},"overview.html":{}}}],["30px",{"_index":2474,"title":{},"body":{"components/InletComponent.html":{},"components/MixerViewComponent.html":{},"components/NoteComponent.html":{},"components/ParameterComponent.html":{}}}],["32px",{"_index":2839,"title":{},"body":{"components/MixerViewComponent.html":{}}}],["333333",{"_index":2843,"title":{},"body":{"components/MixerViewComponent.html":{},"components/OpsComponent.html":{}}}],["34px",{"_index":2487,"title":{},"body":{"components/InletComponent.html":{}}}],["350",{"_index":2776,"title":{},"body":{"components/MixerViewComponent.html":{}}}],["35px",{"_index":2492,"title":{},"body":{"components/InletComponent.html":{}}}],["370px",{"_index":4340,"title":{},"body":{"components/WeavingStateComponent.html":{}}}],["3d3d3d",{"_index":2103,"title":{},"body":{"components/DraftdetailComponent.html":{}}}],["3f51b5",{"_index":3097,"title":{},"body":{"components/OpSequencerComponent.html":{},"components/WeavingStateComponent.html":{}}}],["4",{"_index":3789,"title":{},"body":{"classes/Render.html":{},"components/VirtualPedalsComponent.html":{}}}],["4.14.149",{"_index":4371,"title":{},"body":{"dependencies.html":{}}}],["4.17.15",{"_index":4385,"title":{},"body":{"dependencies.html":{}}}],["40px",{"_index":3341,"title":{},"body":{"components/ParameterComponent.html":{}}}],["42",{"_index":2118,"title":{},"body":{"components/DraftdetailComponent.html":{}}}],["444444",{"_index":4347,"title":{},"body":{"components/WeavingStateComponent.html":{}}}],["48px",{"_index":2838,"title":{},"body":{"components/MixerViewComponent.html":{}}}],["4px",{"_index":2489,"title":{},"body":{"components/InletComponent.html":{},"components/OpsComponent.html":{}}}],["5",{"_index":1347,"title":{},"body":{"interfaces/DesignActions.html":{},"components/NoteComponent.html":{},"classes/Render.html":{},"components/VirtualPedalsComponent.html":{}}}],["5.0.10",{"_index":4394,"title":{},"body":{"dependencies.html":{}}}],["50",{"_index":1390,"title":{},"body":{"interfaces/DesignActions.html":{},"components/ParameterComponent.html":{}}}],["51",{"_index":4624,"title":{},"body":{"overview.html":{}}}],["566be2",{"_index":3134,"title":{},"body":{"components/OpSequencerComponent.html":{},"components/PlayerComponent.html":{},"components/WeavingStateComponent.html":{}}}],["5px",{"_index":3687,"title":{},"body":{"components/PlayerComponent.html":{},"components/WeavingStateComponent.html":{}}}],["6",{"_index":4282,"title":{},"body":{"components/VirtualPedalsComponent.html":{}}}],["6.0.0",{"_index":4391,"title":{},"body":{"dependencies.html":{}}}],["6.1.1",{"_index":4364,"title":{},"body":{"dependencies.html":{}}}],["6.5.4",{"_index":4392,"title":{},"body":{"dependencies.html":{}}}],["60",{"_index":1422,"title":{},"body":{"interfaces/DesignActions.html":{}}}],["60px",{"_index":3340,"title":{},"body":{"components/ParameterComponent.html":{}}}],["64",{"_index":3345,"title":{},"body":{"components/ParameterComponent.html":{}}}],["666666",{"_index":2922,"title":{},"body":{"components/NoteComponent.html":{}}}],["6px",{"_index":2495,"title":{},"body":{"components/InletComponent.html":{},"components/MixerViewComponent.html":{},"components/ParameterComponent.html":{}}}],["7",{"_index":4283,"title":{},"body":{"components/VirtualPedalsComponent.html":{}}}],["7.0.4",{"_index":4357,"title":{},"body":{"dependencies.html":{}}}],["7.3.8",{"_index":4484,"title":{},"body":{"index.html":{}}}],["7.5.1",{"_index":4386,"title":{},"body":{"dependencies.html":{}}}],["70",{"_index":3338,"title":{},"body":{"components/ParameterComponent.html":{}}}],["75",{"_index":3339,"title":{},"body":{"components/ParameterComponent.html":{},"classes/Render.html":{}}}],["8",{"_index":1552,"title":{},"body":{"interfaces/DesignActions.html":{},"components/PlayerComponent.html":{},"classes/Render.html":{},"components/VirtualPedalsComponent.html":{}}}],["8.ng",{"_index":3140,"title":{},"body":{"components/OpSequencerComponent.html":{}}}],["80",{"_index":2126,"title":{},"body":{"components/DraftdetailComponent.html":{}}}],["800",{"_index":2935,"title":{},"body":{"components/NoteComponent.html":{}}}],["8em",{"_index":2111,"title":{},"body":{"components/DraftdetailComponent.html":{},"components/MixerViewComponent.html":{},"components/OpSequencerComponent.html":{},"components/OpsComponent.html":{},"components/ParameterComponent.html":{}}}],["8px",{"_index":2483,"title":{},"body":{"components/InletComponent.html":{},"components/MixerViewComponent.html":{},"components/ParameterComponent.html":{}}}],["9",{"_index":4284,"title":{},"body":{"components/VirtualPedalsComponent.html":{},"overview.html":{}}}],["9.4.0",{"_index":4383,"title":{},"body":{"dependencies.html":{}}}],["95",{"_index":3103,"title":{},"body":{"components/OpSequencerComponent.html":{},"components/OpsComponent.html":{}}}],["9em",{"_index":2857,"title":{},"body":{"components/MixerViewComponent.html":{}}}],["9px",{"_index":2856,"title":{},"body":{"components/MixerViewComponent.html":{},"components/ParameterComponent.html":{}}}],["_active",{"_index":941,"title":{},"body":{"classes/DBListener.html":{},"classes/DBListenerArray.html":{},"classes/DBNode.html":{},"classes/DBNodeArray.html":{},"classes/DBTwoWay.html":{},"classes/DBTwoWayArray.html":{},"classes/DBWriteBuffer.html":{},"classes/DBWriter.html":{},"classes/DBWriterArray.html":{},"interfaces/NodeMethods.html":{},"interfaces/NodeParams.html":{},"classes/OnlineStatus.html":{}}}],["_active_draft",{"_index":3645,"title":{},"body":{"components/PlayerComponent.html":{}}}],["_bitmap.jpg",{"_index":1544,"title":{},"body":{"interfaces/DesignActions.html":{}}}],["_bounds:bounds",{"_index":1355,"title":{},"body":{"interfaces/DesignActions.html":{}}}],["_dbref",{"_index":942,"title":{},"body":{"classes/DBListener.html":{},"classes/DBListenerArray.html":{},"classes/DBNode.html":{},"classes/DBNodeArray.html":{},"classes/DBTwoWay.html":{},"classes/DBTwoWayArray.html":{},"classes/DBWriteBuffer.html":{},"classes/DBWriter.html":{},"classes/DBWriterArray.html":{},"interfaces/NodeMethods.html":{},"interfaces/NodeParams.html":{},"classes/OnlineStatus.html":{}}}],["_draft:draft",{"_index":1351,"title":{},"body":{"interfaces/DesignActions.html":{}}}],["_filter",{"_index":3209,"title":{},"body":{"components/OpsComponent.html":{}}}],["_filter(value",{"_index":3217,"title":{},"body":{"components/OpsComponent.html":{}}}],["_name",{"_index":943,"title":{},"body":{"classes/DBListener.html":{},"classes/DBListenerArray.html":{},"classes/DBNode.html":{},"classes/DBNodeArray.html":{},"classes/DBTwoWay.html":{},"classes/DBTwoWayArray.html":{},"classes/DBWriteBuffer.html":{},"classes/DBWriter.html":{},"classes/DBWriterArray.html":{},"interfaces/NodeMethods.html":{},"interfaces/NodeParams.html":{},"classes/OnlineStatus.html":{}}}],["_pos",{"_index":3011,"title":{},"body":{"classes/OpSequencer.html":{},"injectables/SequencerService.html":{}}}],["_ref",{"_index":1033,"title":{},"body":{"classes/DBListener.html":{},"classes/DBListenerArray.html":{},"classes/DBNode.html":{},"classes/DBNodeArray.html":{},"classes/DBTwoWay.html":{},"classes/DBTwoWayArray.html":{},"classes/DBWriteBuffer.html":{},"classes/DBWriter.html":{},"classes/DBWriterArray.html":{},"interfaces/NodeMethods.html":{},"interfaces/NodeParams.html":{},"classes/OnlineStatus.html":{}}}],["_scale",{"_index":1381,"title":{},"body":{"interfaces/DesignActions.html":{},"components/NoteComponent.html":{}}}],["_scale:number",{"_index":1346,"title":{},"body":{"interfaces/DesignActions.html":{},"components/NoteComponent.html":{}}}],["_val",{"_index":944,"title":{},"body":{"classes/DBListener.html":{},"classes/DBListenerArray.html":{},"classes/DBNode.html":{},"classes/DBNodeArray.html":{},"classes/DBTwoWay.html":{},"classes/DBTwoWayArray.html":{},"classes/DBWriteBuffer.html":{},"classes/DBWriter.html":{},"classes/DBWriterArray.html":{},"interfaces/NodeMethods.html":{},"interfaces/NodeParams.html":{},"classes/OnlineStatus.html":{}}}],["a.click",{"_index":1545,"title":{},"body":{"interfaces/DesignActions.html":{}}}],["a.download",{"_index":1542,"title":{},"body":{"interfaces/DesignActions.html":{}}}],["a.href",{"_index":1540,"title":{},"body":{"interfaces/DesignActions.html":{}}}],["above",{"_index":2995,"title":{},"body":{"components/OpHelpModal.html":{},"index.html":{}}}],["abs_topleft",{"_index":4261,"title":{},"body":{"injectables/ViewportService.html":{}}}],["absolute",{"_index":838,"title":{},"body":{"components/ConnectionComponent.html":{},"interfaces/DesignActions.html":{},"interfaces/DraftMap.html":{},"interfaces/Interlacement.html":{},"interfaces/InterlacementVal.html":{},"components/MixerViewComponent.html":{},"components/NoteComponent.html":{},"injectables/ViewportService.html":{}}}],["absolution",{"_index":1504,"title":{},"body":{"interfaces/DesignActions.html":{}}}],["abstract",{"_index":988,"title":{},"body":{"classes/DBListener.html":{},"classes/DBListenerArray.html":{},"classes/DBNode.html":{},"classes/DBNodeArray.html":{},"classes/DBTwoWay.html":{},"classes/DBTwoWayArray.html":{},"classes/DBWriteBuffer.html":{},"classes/DBWriter.html":{},"classes/DBWriterArray.html":{},"interfaces/NodeMethods.html":{},"interfaces/NodeParams.html":{},"classes/OnlineStatus.html":{}}}],["abstractcontrol",{"_index":3294,"title":{},"body":{"components/ParameterComponent.html":{}}}],["abstractopfactory",{"_index":1,"title":{"classes/AbstractOpFactory.html":{}},"body":{"classes/AbstractOpFactory.html":{},"classes/BaseOp.html":{},"classes/Branch.html":{},"classes/Bus.html":{},"classes/Merge.html":{},"interfaces/OpClassifier.html":{},"interfaces/OperationProperties.html":{},"classes/Pipe.html":{},"classes/Seed.html":{},"interfaces/TopologyDef.html":{}}}],["acc",{"_index":4178,"title":{},"body":{"classes/System.html":{}}}],["acc.concat(ds",{"_index":2160,"title":{},"body":{"interfaces/DynamicOperation.html":{},"interfaces/OpInput.html":{},"interfaces/OperationClassification.html":{},"interfaces/TreeOperation.html":{}}}],["acc.concat(el",{"_index":2155,"title":{},"body":{"interfaces/DynamicOperation.html":{},"interfaces/OpInput.html":{},"interfaces/OperationClassification.html":{},"interfaces/TreeOperation.html":{}}}],["accept",{"_index":153,"title":{},"body":{"classes/AbstractOpFactory.html":{},"classes/BaseOp.html":{},"classes/Branch.html":{},"classes/Bus.html":{},"classes/Merge.html":{},"interfaces/OpClassifier.html":{},"components/OpHelpModal.html":{},"interfaces/OperationProperties.html":{},"classes/Pipe.html":{},"classes/Seed.html":{},"interfaces/TopologyDef.html":{}}}],["access",{"_index":3305,"title":{},"body":{"components/ParameterComponent.html":{},"classes/Shape.html":{}}}],["accessors",{"_index":1191,"title":{},"body":{"classes/DBNode.html":{},"classes/DBNodeArray.html":{},"injectables/MappingsService.html":{},"components/NoteComponent.html":{},"classes/OpSequencer.html":{},"classes/PedalConfig.html":{},"injectables/PedalsService.html":{},"injectables/PlayerService.html":{},"injectables/SequencerService.html":{}}}],["accordingly",{"_index":3467,"title":{},"body":{"interfaces/Pedal.html":{},"classes/PedalStatus.html":{},"injectables/PedalsService.html":{}}}],["accordion",{"_index":3124,"title":{},"body":{"components/OpSequencerComponent.html":{},"components/PlayerComponent.html":{},"components/WeavingStateComponent.html":{}}}],["account",{"_index":2252,"title":{},"body":{"interfaces/IOTuple.html":{},"interfaces/TreeNode.html":{}}}],["action",{"_index":359,"title":{},"body":{"interfaces/Bounds.html":{},"interfaces/DraftOperationClassification.html":{},"interfaces/LoomConfig.html":{},"components/OpsComponent.html":{},"classes/PedalConfig.html":{},"injectables/PlayerService.html":{},"interfaces/Point.html":{},"index.html":{}}}],["active",{"_index":464,"title":{},"body":{"interfaces/ChainIndex.html":{},"classes/DBListener.html":{},"classes/DBListenerArray.html":{},"classes/DBNode.html":{},"classes/DBNodeArray.html":{},"classes/DBTwoWay.html":{},"classes/DBTwoWayArray.html":{},"classes/DBWriteBuffer.html":{},"classes/DBWriter.html":{},"classes/DBWriterArray.html":{},"interfaces/DraftOperationClassification.html":{},"interfaces/IOTuple.html":{},"interfaces/LoomConfig.html":{},"directives/MarqueeComponent.html":{},"interfaces/NodeMethods.html":{},"interfaces/NodeParams.html":{},"classes/OnlineStatus.html":{},"components/ParameterComponent.html":{},"interfaces/Pedal.html":{},"classes/PedalConfig.html":{},"classes/PedalStatus.html":{},"injectables/PedalsService.html":{},"injectables/PlayerService.html":{},"directives/SelectionComponent.html":{},"injectables/SequencerService.html":{},"interfaces/TreeNode.html":{},"components/WeavingStateComponent.html":{}}}],["active(tf",{"_index":1009,"title":{},"body":{"classes/DBListener.html":{},"classes/DBListenerArray.html":{},"classes/DBNode.html":{},"classes/DBNodeArray.html":{},"classes/DBTwoWay.html":{},"classes/DBTwoWayArray.html":{},"classes/DBWriteBuffer.html":{},"classes/DBWriter.html":{},"classes/DBWriterArray.html":{},"interfaces/NodeMethods.html":{},"interfaces/NodeParams.html":{},"classes/OnlineStatus.html":{}}}],["active_draft",{"_index":3377,"title":{},"body":{"interfaces/Pedal.html":{},"classes/PedalStatus.html":{},"injectables/PedalsService.html":{},"components/PlayerComponent.html":{},"components/WeavingStateComponent.html":{}}}],["actual",{"_index":2567,"title":{},"body":{"injectables/MappingsService.html":{},"index.html":{}}}],["actual_component",{"_index":882,"title":{},"body":{"components/ConnectionComponent.html":{},"components/DraftdetailComponent.html":{},"components/ImageComponent.html":{},"components/InletComponent.html":{},"components/MixerViewComponent.html":{},"components/NoteComponent.html":{},"components/OpHelpModal.html":{},"components/OpSequencerComponent.html":{},"components/OpsComponent.html":{},"components/ParameterComponent.html":{},"components/PlayerComponent.html":{},"components/SnackbarComponent.html":{},"components/VirtualPedalsComponent.html":{},"components/WeavingStateComponent.html":{}}}],["actually",{"_index":3734,"title":{},"body":{"interfaces/PlayerState.html":{},"interfaces/PlayerState-1.html":{},"interfaces/WeavingLog.html":{},"interfaces/WeavingPick.html":{},"interfaces/WeavingPick-1.html":{}}}],["ada",{"_index":1554,"title":{},"body":{"interfaces/DesignActions.html":{},"interfaces/DraftNodeProxy.html":{},"interfaces/FileObj.html":{},"interfaces/FileSaver.html":{},"interfaces/Fileloader.html":{},"interfaces/LoadResponse.html":{},"interfaces/NodeComponentProxy.html":{},"interfaces/OpComponentProxy.html":{},"interfaces/SaveObj.html":{},"interfaces/StatusMessage.html":{},"interfaces/TreeNodeProxy.html":{}}}],["adacad",{"_index":1147,"title":{},"body":{"classes/DBListener.html":{},"classes/DBListenerArray.html":{},"classes/DBNode.html":{},"classes/DBNodeArray.html":{},"classes/DBTwoWay.html":{},"classes/DBTwoWayArray.html":{},"classes/DBWriteBuffer.html":{},"classes/DBWriter.html":{},"classes/DBWriterArray.html":{},"interfaces/NodeMethods.html":{},"interfaces/NodeParams.html":{},"classes/OnlineStatus.html":{},"interfaces/Pedal.html":{},"classes/PedalStatus.html":{},"injectables/PedalsService.html":{},"index.html":{}}}],["add",{"_index":480,"title":{},"body":{"interfaces/ChainIndex.html":{},"classes/DBListener.html":{},"classes/DBListenerArray.html":{},"classes/DBNode.html":{},"classes/DBNodeArray.html":{},"classes/DBTwoWay.html":{},"classes/DBTwoWayArray.html":{},"classes/DBWriteBuffer.html":{},"classes/DBWriter.html":{},"classes/DBWriterArray.html":{},"interfaces/DraftOperationClassification.html":{},"interfaces/LoomConfig.html":{},"injectables/MappingsService.html":{},"interfaces/NodeMethods.html":{},"interfaces/NodeParams.html":{},"classes/OnlineStatus.html":{},"components/OpSequencerComponent.html":{},"interfaces/OperationParam.html":{},"classes/Params.html":{},"classes/PedalConfig.html":{},"injectables/PlayerService.html":{},"injectables/SequencerService.html":{},"miscellaneous/typealiases.html":{}}}],["addchainop",{"_index":3903,"title":{},"body":{"injectables/SequencerService.html":{}}}],["addchainop(o",{"_index":498,"title":{},"body":{"interfaces/ChainIndex.html":{},"injectables/SequencerService.html":{}}}],["added",{"_index":222,"title":{},"body":{"classes/AbstractOpFactory.html":{},"classes/BaseOp.html":{},"classes/Branch.html":{},"classes/Bus.html":{},"classes/DBListener.html":{},"classes/DBListenerArray.html":{},"classes/DBNode.html":{},"classes/DBNodeArray.html":{},"classes/DBTwoWay.html":{},"classes/DBTwoWayArray.html":{},"classes/DBWriteBuffer.html":{},"classes/DBWriter.html":{},"classes/DBWriterArray.html":{},"interfaces/DraftOperationClassification.html":{},"interfaces/LoomConfig.html":{},"classes/Merge.html":{},"interfaces/NodeMethods.html":{},"interfaces/NodeParams.html":{},"classes/OnlineStatus.html":{},"interfaces/OpClassifier.html":{},"interfaces/OperationProperties.html":{},"interfaces/Pedal.html":{},"classes/PedalConfig.html":{},"classes/PedalStatus.html":{},"injectables/PedalsService.html":{},"classes/Pipe.html":{},"injectables/PlayerService.html":{},"classes/Seed.html":{},"interfaces/TopologyDef.html":{},"injectables/ViewportService.html":{}}}],["adding",{"_index":4129,"title":{},"body":{"classes/System.html":{},"miscellaneous/functions.html":{},"index.html":{}}}],["additional",{"_index":2281,"title":{},"body":{"interfaces/IOTuple.html":{},"interfaces/TreeNode.html":{},"miscellaneous/typealiases.html":{}}}],["addnode",{"_index":1175,"title":{},"body":{"classes/DBListenerArray.html":{},"classes/DBTwoWayArray.html":{},"classes/DBWriterArray.html":{}}}],["addnode(initval",{"_index":1134,"title":{},"body":{"classes/DBListener.html":{},"classes/DBListenerArray.html":{},"classes/DBNode.html":{},"classes/DBNodeArray.html":{},"classes/DBTwoWay.html":{},"classes/DBTwoWayArray.html":{},"classes/DBWriteBuffer.html":{},"classes/DBWriter.html":{},"classes/DBWriterArray.html":{},"interfaces/NodeMethods.html":{},"interfaces/NodeParams.html":{},"classes/OnlineStatus.html":{}}}],["addnode(key",{"_index":1099,"title":{},"body":{"classes/DBListener.html":{},"classes/DBListenerArray.html":{},"classes/DBNode.html":{},"classes/DBNodeArray.html":{},"classes/DBTwoWay.html":{},"classes/DBTwoWayArray.html":{},"classes/DBWriteBuffer.html":{},"classes/DBWriter.html":{},"classes/DBWriterArray.html":{},"interfaces/NodeMethods.html":{},"interfaces/NodeParams.html":{},"classes/OnlineStatus.html":{}}}],["addobj",{"_index":4184,"title":{},"body":{"injectables/ViewportService.html":{}}}],["addobj(id",{"_index":4198,"title":{},"body":{"injectables/ViewportService.html":{}}}],["addop",{"_index":3015,"title":{},"body":{"classes/OpSequencer.html":{},"components/OpsComponent.html":{},"injectables/SequencerService.html":{}}}],["addop(defs.basket",{"_index":1827,"title":{},"body":{"interfaces/DraftOperationClassification.html":{},"interfaces/LoomConfig.html":{},"classes/PedalConfig.html":{},"injectables/PlayerService.html":{}}}],["addop(defs.bindwarpfloats",{"_index":1852,"title":{},"body":{"interfaces/DraftOperationClassification.html":{},"interfaces/LoomConfig.html":{},"classes/PedalConfig.html":{},"injectables/PlayerService.html":{}}}],["addop(defs.bindweftfloats",{"_index":1850,"title":{},"body":{"interfaces/DraftOperationClassification.html":{},"interfaces/LoomConfig.html":{},"classes/PedalConfig.html":{},"injectables/PlayerService.html":{}}}],["addop(defs.flipx",{"_index":1842,"title":{},"body":{"interfaces/DraftOperationClassification.html":{},"interfaces/LoomConfig.html":{},"classes/PedalConfig.html":{},"injectables/PlayerService.html":{}}}],["addop(defs.flipy",{"_index":1844,"title":{},"body":{"interfaces/DraftOperationClassification.html":{},"interfaces/LoomConfig.html":{},"classes/PedalConfig.html":{},"injectables/PlayerService.html":{}}}],["addop(defs.invert",{"_index":1834,"title":{},"body":{"interfaces/DraftOperationClassification.html":{},"interfaces/LoomConfig.html":{},"classes/PedalConfig.html":{},"injectables/PlayerService.html":{}}}],["addop(defs.makesymmetric",{"_index":1846,"title":{},"body":{"interfaces/DraftOperationClassification.html":{},"interfaces/LoomConfig.html":{},"classes/PedalConfig.html":{},"injectables/PlayerService.html":{}}}],["addop(defs.random",{"_index":1831,"title":{},"body":{"interfaces/DraftOperationClassification.html":{},"interfaces/LoomConfig.html":{},"classes/PedalConfig.html":{},"injectables/PlayerService.html":{}}}],["addop(defs.rib",{"_index":1829,"title":{},"body":{"interfaces/DraftOperationClassification.html":{},"interfaces/LoomConfig.html":{},"classes/PedalConfig.html":{},"injectables/PlayerService.html":{}}}],["addop(defs.rotate",{"_index":1832,"title":{},"body":{"interfaces/DraftOperationClassification.html":{},"interfaces/LoomConfig.html":{},"classes/PedalConfig.html":{},"injectables/PlayerService.html":{}}}],["addop(defs.satin",{"_index":1823,"title":{},"body":{"interfaces/DraftOperationClassification.html":{},"interfaces/LoomConfig.html":{},"classes/PedalConfig.html":{},"injectables/PlayerService.html":{}}}],["addop(defs.shiftx",{"_index":1836,"title":{},"body":{"interfaces/DraftOperationClassification.html":{},"interfaces/LoomConfig.html":{},"classes/PedalConfig.html":{},"injectables/PlayerService.html":{}}}],["addop(defs.shifty",{"_index":1838,"title":{},"body":{"interfaces/DraftOperationClassification.html":{},"interfaces/LoomConfig.html":{},"classes/PedalConfig.html":{},"injectables/PlayerService.html":{}}}],["addop(defs.slope",{"_index":1840,"title":{},"body":{"interfaces/DraftOperationClassification.html":{},"interfaces/LoomConfig.html":{},"classes/PedalConfig.html":{},"injectables/PlayerService.html":{}}}],["addop(defs.stretch",{"_index":1848,"title":{},"body":{"interfaces/DraftOperationClassification.html":{},"interfaces/LoomConfig.html":{},"classes/PedalConfig.html":{},"injectables/PlayerService.html":{}}}],["addop(defs.tabby",{"_index":1819,"title":{},"body":{"interfaces/DraftOperationClassification.html":{},"interfaces/LoomConfig.html":{},"classes/PedalConfig.html":{},"injectables/PlayerService.html":{}}}],["addop(defs.twill",{"_index":1821,"title":{},"body":{"interfaces/DraftOperationClassification.html":{},"interfaces/LoomConfig.html":{},"classes/PedalConfig.html":{},"injectables/PlayerService.html":{}}}],["addop(defs.waffle",{"_index":1825,"title":{},"body":{"interfaces/DraftOperationClassification.html":{},"interfaces/LoomConfig.html":{},"classes/PedalConfig.html":{},"injectables/PlayerService.html":{}}}],["addop(name",{"_index":3219,"title":{},"body":{"components/OpsComponent.html":{}}}],["addop(o",{"_index":3033,"title":{},"body":{"classes/OpSequencer.html":{},"injectables/SequencerService.html":{}}}],["addop(op",{"_index":1815,"title":{},"body":{"interfaces/DraftOperationClassification.html":{},"interfaces/LoomConfig.html":{},"classes/PedalConfig.html":{},"injectables/PlayerService.html":{}}}],["addoperation",{"_index":2516,"title":{},"body":{"injectables/MappingsService.html":{},"classes/PedalConfig.html":{}}}],["addoperation(o",{"_index":1740,"title":{},"body":{"interfaces/DraftOperationClassification.html":{},"interfaces/LoomConfig.html":{},"injectables/MappingsService.html":{},"classes/PedalConfig.html":{},"injectables/PlayerService.html":{}}}],["addopfromsearch",{"_index":3210,"title":{},"body":{"components/OpsComponent.html":{}}}],["addopfromsearch(event",{"_index":3221,"title":{},"body":{"components/OpsComponent.html":{}}}],["addpedal",{"_index":3505,"title":{},"body":{"classes/PedalConfig.html":{}}}],["addpedal(p",{"_index":1734,"title":{},"body":{"interfaces/DraftOperationClassification.html":{},"interfaces/LoomConfig.html":{},"classes/PedalConfig.html":{},"injectables/PlayerService.html":{}}}],["addpedals",{"_index":3904,"title":{},"body":{"injectables/SequencerService.html":{}}}],["addpedals(fwd_pedal",{"_index":470,"title":{},"body":{"interfaces/ChainIndex.html":{},"injectables/SequencerService.html":{}}}],["adds",{"_index":1113,"title":{},"body":{"classes/DBListener.html":{},"classes/DBListenerArray.html":{},"classes/DBNode.html":{},"classes/DBNodeArray.html":{},"classes/DBTwoWay.html":{},"classes/DBTwoWayArray.html":{},"classes/DBWriteBuffer.html":{},"classes/DBWriter.html":{},"classes/DBWriterArray.html":{},"interfaces/NodeMethods.html":{},"interfaces/NodeParams.html":{},"classes/OnlineStatus.html":{},"index.html":{}}}],["addshuttle",{"_index":3941,"title":{},"body":{"classes/Shape.html":{}}}],["addshuttle(shuttle",{"_index":3959,"title":{},"body":{"classes/Shape.html":{}}}],["addsingleop",{"_index":3905,"title":{},"body":{"injectables/SequencerService.html":{}}}],["addsingleop(o",{"_index":482,"title":{},"body":{"interfaces/ChainIndex.html":{},"injectables/SequencerService.html":{}}}],["addtochain",{"_index":3906,"title":{},"body":{"injectables/SequencerService.html":{}}}],["addtochain(ch_id",{"_index":507,"title":{},"body":{"interfaces/ChainIndex.html":{},"injectables/SequencerService.html":{}}}],["addvpedal",{"_index":3501,"title":{},"body":{"interfaces/Pedal.html":{},"classes/PedalStatus.html":{},"injectables/PedalsService.html":{}}}],["adj",{"_index":2912,"title":{},"body":{"components/NoteComponent.html":{}}}],["adj:point",{"_index":2910,"title":{},"body":{"components/NoteComponent.html":{}}}],["adjust",{"_index":2075,"title":{},"body":{"components/DraftdetailComponent.html":{},"interfaces/Ink.html":{},"injectables/InkService.html":{}}}],["adjusted",{"_index":2800,"title":{},"body":{"components/MixerViewComponent.html":{}}}],["affect",{"_index":4465,"title":{},"body":{"index.html":{}}}],["aid",{"_index":2065,"title":{},"body":{"components/DraftdetailComponent.html":{},"interfaces/DynamicOperation.html":{},"interfaces/OpInput.html":{},"interfaces/OperationClassification.html":{},"interfaces/TreeOperation.html":{}}}],["algorithmically",{"_index":1859,"title":{},"body":{"interfaces/DraftOperationClassification.html":{},"interfaces/LoomConfig.html":{},"classes/PedalConfig.html":{},"injectables/PlayerService.html":{}}}],["aliases",{"_index":4631,"title":{},"body":{"miscellaneous/typealiases.html":{}}}],["align",{"_index":2485,"title":{},"body":{"components/InletComponent.html":{},"components/NoteComponent.html":{},"components/OpSequencerComponent.html":{},"components/OpsComponent.html":{},"components/ParameterComponent.html":{},"components/PlayerComponent.html":{},"components/WeavingStateComponent.html":{}}}],["align:middle",{"_index":3334,"title":{},"body":{"components/ParameterComponent.html":{}}}],["aligned",{"_index":3685,"title":{},"body":{"components/PlayerComponent.html":{}}}],["alive",{"_index":3437,"title":{},"body":{"interfaces/Pedal.html":{},"classes/PedalStatus.html":{},"injectables/PedalsService.html":{}}}],["all_req",{"_index":142,"title":{},"body":{"classes/AbstractOpFactory.html":{},"classes/BaseOp.html":{},"classes/Branch.html":{},"classes/Bus.html":{},"classes/Merge.html":{},"interfaces/OpClassifier.html":{},"interfaces/OperationProperties.html":{},"classes/Pipe.html":{},"classes/Seed.html":{},"interfaces/TopologyDef.html":{}}}],["all_system_codes",{"_index":2385,"title":{},"body":{"components/InletComponent.html":{}}}],["allmaps",{"_index":2641,"title":{},"body":{"injectables/MappingsService.html":{}}}],["allops",{"_index":3239,"title":{},"body":{"components/OpsComponent.html":{}}}],["allops.map(el",{"_index":3242,"title":{},"body":{"components/OpsComponent.html":{}}}],["allowable",{"_index":3158,"title":{},"body":{"interfaces/OperationParam.html":{},"classes/Params.html":{}}}],["allowed",{"_index":205,"title":{},"body":{"classes/AbstractOpFactory.html":{},"classes/BaseOp.html":{},"classes/Branch.html":{},"classes/Bus.html":{},"classes/Merge.html":{},"interfaces/OpClassifier.html":{},"interfaces/OperationProperties.html":{},"classes/Pipe.html":{},"classes/Seed.html":{},"interfaces/TopologyDef.html":{}}}],["allows",{"_index":2284,"title":{},"body":{"interfaces/IOTuple.html":{},"interfaces/TreeNode.html":{},"index.html":{},"miscellaneous/typealiases.html":{}}}],["allrequired",{"_index":9,"title":{},"body":{"classes/AbstractOpFactory.html":{},"classes/BaseOp.html":{},"classes/Branch.html":{},"classes/Bus.html":{},"interfaces/ChainOp.html":{},"interfaces/DraftOperationClassification.html":{},"interfaces/DynamicOperation.html":{},"interfaces/LoomConfig.html":{},"classes/Merge.html":{},"interfaces/OpClassifier.html":{},"interfaces/OpInput.html":{},"interfaces/OperationClassification.html":{},"interfaces/OperationProperties.html":{},"interfaces/PairedOp.html":{},"classes/PedalConfig.html":{},"interfaces/PedalEvent.html":{},"classes/Pipe.html":{},"interfaces/PlayerOp.html":{},"injectables/PlayerService.html":{},"classes/Seed.html":{},"interfaces/TopologyDef.html":{},"interfaces/TreeOperation.html":{},"miscellaneous/typealiases.html":{}}}],["allrequired(...args",{"_index":26,"title":{},"body":{"classes/AbstractOpFactory.html":{},"classes/BaseOp.html":{},"classes/Branch.html":{},"classes/Bus.html":{},"classes/Merge.html":{},"interfaces/OpClassifier.html":{},"interfaces/OperationProperties.html":{},"classes/Pipe.html":{},"classes/Seed.html":{},"interfaces/TopologyDef.html":{}}}],["allrequired(args",{"_index":14,"title":{},"body":{"classes/AbstractOpFactory.html":{},"classes/BaseOp.html":{},"classes/Branch.html":{},"classes/Bus.html":{},"classes/Merge.html":{},"interfaces/OpClassifier.html":{},"interfaces/OperationProperties.html":{},"classes/Pipe.html":{},"classes/Seed.html":{},"interfaces/TopologyDef.html":{}}}],["allrequiredperform",{"_index":173,"title":{},"body":{"classes/AbstractOpFactory.html":{},"classes/BaseOp.html":{},"classes/Branch.html":{},"classes/Bus.html":{},"classes/Merge.html":{},"interfaces/OpClassifier.html":{},"interfaces/OperationProperties.html":{},"classes/Pipe.html":{},"classes/Seed.html":{},"interfaces/TopologyDef.html":{},"miscellaneous/typealiases.html":{}}}],["along",{"_index":919,"title":{},"body":{"interfaces/Crossing.html":{},"interfaces/DraftMap.html":{},"interfaces/Interlacement.html":{},"interfaces/InterlacementVal.html":{},"interfaces/Vertex.html":{},"interfaces/YarnPath.html":{},"miscellaneous/typealiases.html":{}}}],["already",{"_index":1564,"title":{},"body":{"interfaces/DesignActions.html":{},"interfaces/DraftOperationClassification.html":{},"interfaces/LoomConfig.html":{},"injectables/MappingsService.html":{},"classes/PedalConfig.html":{},"injectables/PlayerService.html":{}}}],["always",{"_index":709,"title":{},"body":{"components/ConnectionComponent.html":{},"injectables/LayersService.html":{},"index.html":{}}}],["and/or",{"_index":3748,"title":{},"body":{"interfaces/Point.html":{}}}],["angular",{"_index":443,"title":{},"body":{"interfaces/ChainIndex.html":{},"injectables/SequencerService.html":{},"index.html":{}}}],["angular/animations",{"_index":4352,"title":{},"body":{"dependencies.html":{}}}],["angular/cdk",{"_index":4354,"title":{},"body":{"dependencies.html":{}}}],["angular/cdk/keycodes",{"_index":2430,"title":{},"body":{"components/InletComponent.html":{}}}],["angular/cdk/scrolling",{"_index":2010,"title":{},"body":{"components/DraftdetailComponent.html":{}}}],["angular/common",{"_index":3696,"title":{},"body":{"modules/PlayerModule.html":{},"dependencies.html":{}}}],["angular/compiler",{"_index":4355,"title":{},"body":{"dependencies.html":{}}}],["angular/core",{"_index":430,"title":{},"body":{"interfaces/ChainIndex.html":{},"components/ConnectionComponent.html":{},"interfaces/DesignActions.html":{},"interfaces/DraftOperationClassification.html":{},"components/DraftdetailComponent.html":{},"interfaces/IOTuple.html":{},"components/ImageComponent.html":{},"interfaces/Ink.html":{},"injectables/InkService.html":{},"components/InletComponent.html":{},"injectables/LayersService.html":{},"interfaces/LoomConfig.html":{},"injectables/MappingsService.html":{},"directives/MarqueeComponent.html":{},"modules/MixerModule.html":{},"components/MixerViewComponent.html":{},"components/NoteComponent.html":{},"components/OpHelpModal.html":{},"components/OpSequencerComponent.html":{},"components/OpsComponent.html":{},"components/ParameterComponent.html":{},"interfaces/Pedal.html":{},"classes/PedalConfig.html":{},"classes/PedalStatus.html":{},"injectables/PedalsService.html":{},"components/PlayerComponent.html":{},"modules/PlayerModule.html":{},"injectables/PlayerService.html":{},"directives/SelectionComponent.html":{},"injectables/SequencerService.html":{},"components/SnackbarComponent.html":{},"interfaces/TreeNode.html":{},"injectables/ViewportService.html":{},"components/VirtualPedalsComponent.html":{},"components/WeavingStateComponent.html":{},"dependencies.html":{}}}],["angular/fire",{"_index":4356,"title":{},"body":{"dependencies.html":{}}}],["angular/fire/database",{"_index":979,"title":{},"body":{"classes/DBListener.html":{},"classes/DBListenerArray.html":{},"classes/DBNode.html":{},"classes/DBNodeArray.html":{},"classes/DBTwoWay.html":{},"classes/DBTwoWayArray.html":{},"classes/DBWriteBuffer.html":{},"classes/DBWriter.html":{},"classes/DBWriterArray.html":{},"interfaces/NodeMethods.html":{},"interfaces/NodeParams.html":{},"classes/OnlineStatus.html":{},"interfaces/Pedal.html":{},"classes/PedalStatus.html":{},"injectables/PedalsService.html":{}}}],["angular/forms",{"_index":2427,"title":{},"body":{"components/InletComponent.html":{},"components/OpsComponent.html":{},"components/ParameterComponent.html":{},"dependencies.html":{}}}],["angular/material",{"_index":4358,"title":{},"body":{"dependencies.html":{}}}],["angular/material/dialog",{"_index":1327,"title":{},"body":{"interfaces/DesignActions.html":{},"components/DraftdetailComponent.html":{},"components/MixerViewComponent.html":{},"components/OpHelpModal.html":{},"components/OpsComponent.html":{}}}],["angular/material/snack",{"_index":4114,"title":{},"body":{"components/SnackbarComponent.html":{}}}],["angular/material/tooltip",{"_index":3232,"title":{},"body":{"components/OpsComponent.html":{}}}],["angular/platform",{"_index":4359,"title":{},"body":{"dependencies.html":{}}}],["angular/router",{"_index":4361,"title":{},"body":{"dependencies.html":{}}}],["another",{"_index":702,"title":{},"body":{"components/ConnectionComponent.html":{},"interfaces/OperationParam.html":{},"classes/Params.html":{},"miscellaneous/typealiases.html":{}}}],["anyone",{"_index":4454,"title":{},"body":{"index.html":{}}}],["anything",{"_index":1772,"title":{},"body":{"interfaces/DraftOperationClassification.html":{},"interfaces/LoomConfig.html":{},"injectables/MappingsService.html":{},"classes/OpSequencer.html":{},"classes/PedalConfig.html":{},"injectables/PlayerService.html":{},"index.html":{}}}],["app",{"_index":650,"title":{},"body":{"components/ConnectionComponent.html":{},"interfaces/DesignActions.html":{},"components/DraftdetailComponent.html":{},"components/ImageComponent.html":{},"components/InletComponent.html":{},"directives/MarqueeComponent.html":{},"components/MixerViewComponent.html":{},"components/NoteComponent.html":{},"components/OpHelpModal.html":{},"components/OpSequencerComponent.html":{},"components/OpsComponent.html":{},"components/ParameterComponent.html":{},"components/PlayerComponent.html":{},"directives/SelectionComponent.html":{},"components/SnackbarComponent.html":{},"components/VirtualPedalsComponent.html":{},"components/WeavingStateComponent.html":{},"index.html":{}}}],["appearance",{"_index":2855,"title":{},"body":{"components/MixerViewComponent.html":{}}}],["application",{"_index":4547,"title":{},"body":{"index.html":{}}}],["applies",{"_index":1864,"title":{},"body":{"interfaces/DraftOperationClassification.html":{},"interfaces/LoomConfig.html":{},"classes/PedalConfig.html":{},"injectables/PlayerService.html":{}}}],["apply",{"_index":274,"title":{},"body":{"classes/AbstractOpFactory.html":{},"classes/BaseOp.html":{},"classes/Branch.html":{},"classes/Bus.html":{},"classes/Merge.html":{},"interfaces/OpClassifier.html":{},"interfaces/OperationProperties.html":{},"classes/Pipe.html":{},"classes/Seed.html":{},"interfaces/TopologyDef.html":{}}}],["appropriate",{"_index":4608,"title":{},"body":{"index.html":{}}}],["apps",{"_index":4482,"title":{},"body":{"index.html":{}}}],["architectural",{"_index":4517,"title":{},"body":{"index.html":{}}}],["areas",{"_index":2329,"title":{},"body":{"interfaces/Ink.html":{},"injectables/InkService.html":{},"miscellaneous/typealiases.html":{}}}],["aren't",{"_index":2232,"title":{},"body":{"interfaces/DynamicOperation.html":{},"interfaces/OpInput.html":{},"interfaces/OperationClassification.html":{},"interfaces/TreeOperation.html":{}}}],["arg",{"_index":2196,"title":{},"body":{"interfaces/DynamicOperation.html":{},"interfaces/OpInput.html":{},"interfaces/OperationClassification.html":{},"interfaces/TreeOperation.html":{}}}],["args",{"_index":23,"title":{},"body":{"classes/AbstractOpFactory.html":{},"classes/BaseOp.html":{},"classes/Branch.html":{},"classes/Bus.html":{},"interfaces/ChainOp.html":{},"interfaces/DynamicOperation.html":{},"classes/Merge.html":{},"interfaces/OpClassifier.html":{},"interfaces/OpInput.html":{},"interfaces/OperationClassification.html":{},"interfaces/OperationProperties.html":{},"interfaces/PairedOp.html":{},"interfaces/PedalEvent.html":{},"classes/Pipe.html":{},"interfaces/PlayerOp.html":{},"classes/Seed.html":{},"interfaces/TopologyDef.html":{},"interfaces/TreeOperation.html":{}}}],["args.displayname",{"_index":246,"title":{},"body":{"classes/AbstractOpFactory.html":{},"classes/BaseOp.html":{},"classes/Branch.html":{},"classes/Bus.html":{},"classes/Merge.html":{},"interfaces/OpClassifier.html":{},"interfaces/OperationProperties.html":{},"classes/Pipe.html":{},"classes/Seed.html":{},"interfaces/TopologyDef.html":{}}}],["args.dx",{"_index":248,"title":{},"body":{"classes/AbstractOpFactory.html":{},"classes/BaseOp.html":{},"classes/Branch.html":{},"classes/Bus.html":{},"classes/Merge.html":{},"interfaces/OpClassifier.html":{},"interfaces/OperationProperties.html":{},"classes/Pipe.html":{},"classes/Seed.html":{},"interfaces/TopologyDef.html":{}}}],["args.inlets",{"_index":253,"title":{},"body":{"classes/AbstractOpFactory.html":{},"classes/BaseOp.html":{},"classes/Branch.html":{},"classes/Bus.html":{},"classes/Merge.html":{},"interfaces/OpClassifier.html":{},"interfaces/OperationProperties.html":{},"classes/Pipe.html":{},"classes/Seed.html":{},"interfaces/TopologyDef.html":{}}}],["args.name",{"_index":244,"title":{},"body":{"classes/AbstractOpFactory.html":{},"classes/BaseOp.html":{},"classes/Branch.html":{},"classes/Bus.html":{},"classes/Merge.html":{},"interfaces/OpClassifier.html":{},"interfaces/OperationProperties.html":{},"classes/Pipe.html":{},"classes/Seed.html":{},"interfaces/TopologyDef.html":{}}}],["args.params",{"_index":251,"title":{},"body":{"classes/AbstractOpFactory.html":{},"classes/BaseOp.html":{},"classes/Branch.html":{},"classes/Bus.html":{},"classes/Merge.html":{},"interfaces/OpClassifier.html":{},"interfaces/OperationProperties.html":{},"classes/Pipe.html":{},"classes/Seed.html":{},"interfaces/TopologyDef.html":{}}}],["args.perform",{"_index":250,"title":{},"body":{"classes/AbstractOpFactory.html":{},"classes/BaseOp.html":{},"classes/Branch.html":{},"classes/Bus.html":{},"classes/Merge.html":{},"interfaces/OpClassifier.html":{},"interfaces/OperationProperties.html":{},"classes/Pipe.html":{},"classes/Seed.html":{},"interfaces/TopologyDef.html":{}}}],["arguments",{"_index":235,"title":{},"body":{"classes/AbstractOpFactory.html":{},"classes/BaseOp.html":{},"classes/Branch.html":{},"classes/Bus.html":{},"classes/Merge.html":{},"interfaces/OpClassifier.html":{},"interfaces/OperationProperties.html":{},"classes/Pipe.html":{},"classes/Seed.html":{},"interfaces/TopologyDef.html":{},"components/VirtualPedalsComponent.html":{}}}],["arranges",{"_index":3368,"title":{},"body":{"interfaces/Pedal.html":{},"classes/PedalStatus.html":{},"injectables/PedalsService.html":{}}}],["array",{"_index":85,"title":{},"body":{"classes/AbstractOpFactory.html":{},"classes/BaseOp.html":{},"interfaces/Bounds.html":{},"classes/Branch.html":{},"classes/Bus.html":{},"interfaces/ChainIndex.html":{},"interfaces/ChainOp.html":{},"interfaces/Crossing.html":{},"classes/DBListener.html":{},"classes/DBListenerArray.html":{},"classes/DBNode.html":{},"classes/DBNodeArray.html":{},"classes/DBTwoWay.html":{},"classes/DBTwoWayArray.html":{},"classes/DBWriteBuffer.html":{},"classes/DBWriter.html":{},"classes/DBWriterArray.html":{},"interfaces/DensityUnits.html":{},"interfaces/DesignMode.html":{},"interfaces/DraftMap.html":{},"interfaces/DraftNodeProxy.html":{},"interfaces/DraftOperationClassification.html":{},"components/DraftdetailComponent.html":{},"interfaces/DynamicOperation.html":{},"interfaces/FileObj.html":{},"interfaces/FileSaver.html":{},"interfaces/Fileloader.html":{},"interfaces/IOTuple.html":{},"interfaces/Ink.html":{},"injectables/InkService.html":{},"components/InletComponent.html":{},"interfaces/Interlacement.html":{},"interfaces/InterlacementVal.html":{},"interfaces/LoadResponse.html":{},"interfaces/LoomConfig.html":{},"interfaces/LoomTypes.html":{},"injectables/MappingsService.html":{},"interfaces/MaterialTypes.html":{},"classes/Merge.html":{},"components/MixerViewComponent.html":{},"interfaces/NodeComponentProxy.html":{},"interfaces/NodeMethods.html":{},"interfaces/NodeParams.html":{},"classes/OnlineStatus.html":{},"interfaces/OpClassifier.html":{},"interfaces/OpComponentProxy.html":{},"components/OpHelpModal.html":{},"interfaces/OpInput.html":{},"classes/OpSequencer.html":{},"interfaces/OperationClassification.html":{},"interfaces/OperationParam.html":{},"interfaces/OperationProperties.html":{},"components/OpsComponent.html":{},"interfaces/PairedOp.html":{},"classes/Params.html":{},"interfaces/Pedal.html":{},"classes/PedalConfig.html":{},"interfaces/PedalEvent.html":{},"classes/PedalStatus.html":{},"injectables/PedalsService.html":{},"classes/Pipe.html":{},"interfaces/PlayerOp.html":{},"injectables/PlayerService.html":{},"interfaces/PlayerState-1.html":{},"interfaces/Point.html":{},"classes/Render.html":{},"interfaces/SaveObj.html":{},"classes/Seed.html":{},"injectables/SequencerService.html":{},"classes/Shape.html":{},"classes/Shape-1.html":{},"interfaces/StatusMessage.html":{},"classes/System.html":{},"interfaces/TopologyDef.html":{},"interfaces/TreeNode.html":{},"interfaces/TreeNodeProxy.html":{},"interfaces/TreeOperation.html":{},"interfaces/Vertex.html":{},"interfaces/ViewModes.html":{},"injectables/ViewportService.html":{},"interfaces/WeavingLog.html":{},"interfaces/WeavingPick-1.html":{},"components/WeavingStateComponent.html":{},"interfaces/YarnPath.html":{},"miscellaneous/functions.html":{},"miscellaneous/typealiases.html":{}}}],["array's",{"_index":4003,"title":{},"body":{"classes/Shape-1.html":{}}}],["array;//array",{"_index":2562,"title":{},"body":{"injectables/MappingsService.html":{}}}],["arrays",{"_index":1608,"title":{},"body":{"interfaces/DraftMap.html":{},"interfaces/Interlacement.html":{},"interfaces/InterlacementVal.html":{},"classes/System.html":{},"miscellaneous/functions.html":{},"index.html":{}}}],["artifacts",{"_index":4614,"title":{},"body":{"index.html":{}}}],["asking",{"_index":2362,"title":{},"body":{"interfaces/Ink.html":{},"injectables/InkService.html":{}}}],["assign",{"_index":1619,"title":{},"body":{"interfaces/DraftMap.html":{},"interfaces/Interlacement.html":{},"interfaces/InterlacementVal.html":{}}}],["assigned",{"_index":604,"title":{},"body":{"interfaces/ChainOp.html":{},"interfaces/DesignActions.html":{},"interfaces/DraftMap.html":{},"interfaces/DynamicOperation.html":{},"interfaces/Interlacement.html":{},"interfaces/InterlacementVal.html":{},"interfaces/OpInput.html":{},"interfaces/OperationClassification.html":{},"interfaces/PairedOp.html":{},"interfaces/PedalEvent.html":{},"interfaces/PlayerOp.html":{},"interfaces/TreeOperation.html":{}}}],["assignment",{"_index":2149,"title":{},"body":{"interfaces/DynamicOperation.html":{},"interfaces/OpInput.html":{},"interfaces/OperationClassification.html":{},"interfaces/TreeOperation.html":{}}}],["associate",{"_index":2996,"title":{},"body":{"components/OpHelpModal.html":{}}}],["associated",{"_index":207,"title":{},"body":{"classes/AbstractOpFactory.html":{},"classes/BaseOp.html":{},"classes/Branch.html":{},"classes/Bus.html":{},"interfaces/DraftMap.html":{},"interfaces/DraftNodeProxy.html":{},"interfaces/DynamicOperation.html":{},"interfaces/FileObj.html":{},"interfaces/FileSaver.html":{},"interfaces/Fileloader.html":{},"interfaces/IOTuple.html":{},"interfaces/Ink.html":{},"injectables/InkService.html":{},"interfaces/Interlacement.html":{},"interfaces/InterlacementVal.html":{},"interfaces/LoadResponse.html":{},"classes/Merge.html":{},"interfaces/NodeComponentProxy.html":{},"interfaces/OpClassifier.html":{},"interfaces/OpComponentProxy.html":{},"interfaces/OpInput.html":{},"interfaces/OperationClassification.html":{},"interfaces/OperationProperties.html":{},"classes/Pipe.html":{},"interfaces/SaveObj.html":{},"classes/Seed.html":{},"classes/Shape.html":{},"interfaces/StatusMessage.html":{},"interfaces/TopologyDef.html":{},"interfaces/TreeNode.html":{},"interfaces/TreeNodeProxy.html":{},"interfaces/TreeOperation.html":{},"miscellaneous/typealiases.html":{}}}],["associted",{"_index":2283,"title":{},"body":{"interfaces/IOTuple.html":{},"interfaces/TreeNode.html":{}}}],["assume",{"_index":2566,"title":{},"body":{"injectables/MappingsService.html":{}}}],["assumes",{"_index":1076,"title":{},"body":{"classes/DBListener.html":{},"classes/DBListenerArray.html":{},"classes/DBNode.html":{},"classes/DBNodeArray.html":{},"classes/DBTwoWay.html":{},"classes/DBTwoWayArray.html":{},"classes/DBWriteBuffer.html":{},"classes/DBWriter.html":{},"classes/DBWriterArray.html":{},"interfaces/NodeMethods.html":{},"interfaces/NodeParams.html":{},"classes/OnlineStatus.html":{}}}],["async",{"_index":1547,"title":{},"body":{"interfaces/DesignActions.html":{}}}],["atop",{"_index":2321,"title":{},"body":{"interfaces/Ink.html":{},"injectables/InkService.html":{}}}],["attach",{"_index":946,"title":{},"body":{"classes/DBListener.html":{},"classes/DBListenerArray.html":{},"classes/DBNode.html":{},"classes/DBNodeArray.html":{},"classes/DBTwoWay.html":{},"classes/DBTwoWayArray.html":{},"classes/DBWriteBuffer.html":{},"classes/DBWriter.html":{},"classes/DBWriterArray.html":{},"interfaces/NodeMethods.html":{},"interfaces/NodeParams.html":{},"classes/OnlineStatus.html":{},"interfaces/Pedal.html":{},"classes/PedalStatus.html":{},"injectables/PedalsService.html":{}}}],["attachchildnode",{"_index":1176,"title":{},"body":{"classes/DBListenerArray.html":{},"classes/DBTwoWayArray.html":{}}}],["attachchildnode(node",{"_index":1115,"title":{},"body":{"classes/DBListener.html":{},"classes/DBListenerArray.html":{},"classes/DBNode.html":{},"classes/DBNodeArray.html":{},"classes/DBTwoWay.html":{},"classes/DBTwoWayArray.html":{},"classes/DBWriteBuffer.html":{},"classes/DBWriter.html":{},"classes/DBWriterArray.html":{},"interfaces/NodeMethods.html":{},"interfaces/NodeParams.html":{},"classes/OnlineStatus.html":{}}}],["attached",{"_index":3410,"title":{},"body":{"interfaces/Pedal.html":{},"classes/PedalStatus.html":{},"injectables/PedalsService.html":{}}}],["attaching",{"_index":1108,"title":{},"body":{"classes/DBListener.html":{},"classes/DBListenerArray.html":{},"classes/DBNode.html":{},"classes/DBNodeArray.html":{},"classes/DBTwoWay.html":{},"classes/DBTwoWayArray.html":{},"classes/DBWriteBuffer.html":{},"classes/DBWriter.html":{},"classes/DBWriterArray.html":{},"interfaces/NodeMethods.html":{},"interfaces/NodeParams.html":{},"classes/OnlineStatus.html":{}}}],["attempting",{"_index":1170,"title":{},"body":{"classes/DBListener.html":{},"classes/DBListenerArray.html":{},"classes/DBNode.html":{},"classes/DBNodeArray.html":{},"classes/DBTwoWay.html":{},"classes/DBTwoWayArray.html":{},"classes/DBWriteBuffer.html":{},"classes/DBWriter.html":{},"classes/DBWriterArray.html":{},"interfaces/NodeMethods.html":{},"interfaces/NodeParams.html":{},"classes/OnlineStatus.html":{}}}],["augmenting",{"_index":4552,"title":{},"body":{"index.html":{}}}],["auto",{"_index":2940,"title":{},"body":{"components/NoteComponent.html":{}}}],["automatically",{"_index":1614,"title":{},"body":{"interfaces/DraftMap.html":{},"interfaces/Interlacement.html":{},"interfaces/InterlacementVal.html":{},"index.html":{}}}],["available",{"_index":1670,"title":{},"body":{"interfaces/DraftNodeProxy.html":{},"interfaces/DynamicOperation.html":{},"interfaces/FileObj.html":{},"interfaces/FileSaver.html":{},"interfaces/Fileloader.html":{},"interfaces/LoadResponse.html":{},"interfaces/NodeComponentProxy.html":{},"interfaces/OpComponentProxy.html":{},"interfaces/OpInput.html":{},"interfaces/OperationClassification.html":{},"interfaces/SaveObj.html":{},"interfaces/StatusMessage.html":{},"interfaces/TreeNodeProxy.html":{},"interfaces/TreeOperation.html":{},"index.html":{}}}],["availpedals",{"_index":1720,"title":{},"body":{"interfaces/DraftOperationClassification.html":{},"interfaces/LoomConfig.html":{},"injectables/MappingsService.html":{},"classes/PedalConfig.html":{},"injectables/PlayerService.html":{}}}],["b",{"_index":1527,"title":{},"body":{"interfaces/DesignActions.html":{},"interfaces/DraftOperationClassification.html":{},"interfaces/LoomConfig.html":{},"classes/PedalConfig.html":{},"injectables/PlayerService.html":{}}}],["b.getcontext('2d",{"_index":1530,"title":{},"body":{"interfaces/DesignActions.html":{}}}],["b.height",{"_index":1532,"title":{},"body":{"interfaces/DesignActions.html":{}}}],["b.width",{"_index":1531,"title":{},"body":{"interfaces/DesignActions.html":{}}}],["b71c1c",{"_index":3265,"title":{},"body":{"components/OpsComponent.html":{}}}],["b:boolean",{"_index":922,"title":{},"body":{"interfaces/Crossing.html":{},"interfaces/Vertex.html":{},"interfaces/YarnPath.html":{}}}],["b:false",{"_index":928,"title":{},"body":{"interfaces/Crossing.html":{},"interfaces/Vertex.html":{},"interfaces/YarnPath.html":{}}}],["b:null",{"_index":924,"title":{},"body":{"interfaces/Crossing.html":{},"interfaces/Vertex.html":{},"interfaces/YarnPath.html":{}}}],["b:true",{"_index":926,"title":{},"body":{"interfaces/Crossing.html":{},"interfaces/Vertex.html":{},"interfaces/YarnPath.html":{}}}],["b_from",{"_index":656,"title":{},"body":{"components/ConnectionComponent.html":{}}}],["b_to",{"_index":657,"title":{},"body":{"components/ConnectionComponent.html":{}}}],["back",{"_index":479,"title":{},"body":{"interfaces/ChainIndex.html":{},"components/DraftdetailComponent.html":{},"classes/OpSequencer.html":{},"injectables/SequencerService.html":{}}}],["backdrop",{"_index":2049,"title":{},"body":{"components/DraftdetailComponent.html":{}}}],["background",{"_index":2102,"title":{},"body":{"components/DraftdetailComponent.html":{},"components/InletComponent.html":{},"components/MixerViewComponent.html":{},"components/OpSequencerComponent.html":{},"components/OpsComponent.html":{},"components/ParameterComponent.html":{},"components/PlayerComponent.html":{},"components/VirtualPedalsComponent.html":{},"components/WeavingStateComponent.html":{}}}],["backwards",{"_index":560,"title":{},"body":{"interfaces/ChainOp.html":{},"interfaces/PairedOp.html":{},"interfaces/PedalEvent.html":{},"interfaces/PlayerOp.html":{}}}],["banner",{"_index":2147,"title":{},"body":{"interfaces/DynamicOperation.html":{},"interfaces/OpInput.html":{},"interfaces/OperationClassification.html":{},"interfaces/TreeOperation.html":{}}}],["bar",{"_index":4115,"title":{},"body":{"components/SnackbarComponent.html":{}}}],["base",{"_index":298,"title":{},"body":{"classes/AbstractOpFactory.html":{},"classes/BaseOp.html":{},"classes/Branch.html":{},"classes/Bus.html":{},"interfaces/DynamicOperation.html":{},"classes/Merge.html":{},"interfaces/OpClassifier.html":{},"interfaces/OpInput.html":{},"interfaces/OperationClassification.html":{},"interfaces/OperationProperties.html":{},"classes/Pipe.html":{},"classes/Render.html":{},"classes/Seed.html":{},"classes/Shuttle.html":{},"classes/System.html":{},"interfaces/TopologyDef.html":{},"interfaces/TreeOperation.html":{},"miscellaneous/functions.html":{},"index.html":{}}}],["base.classifier.input_drafts",{"_index":2198,"title":{},"body":{"interfaces/DynamicOperation.html":{},"interfaces/OpInput.html":{},"interfaces/OperationClassification.html":{},"interfaces/TreeOperation.html":{}}}],["base.classifier.input_params",{"_index":2206,"title":{},"body":{"interfaces/DynamicOperation.html":{},"interfaces/OpInput.html":{},"interfaces/OperationClassification.html":{},"interfaces/TreeOperation.html":{}}}],["base.classifier.type",{"_index":2197,"title":{},"body":{"interfaces/DynamicOperation.html":{},"interfaces/OpInput.html":{},"interfaces/OperationClassification.html":{},"interfaces/TreeOperation.html":{}}}],["base.displayname",{"_index":2237,"title":{},"body":{"interfaces/DynamicOperation.html":{},"interfaces/OpInput.html":{},"interfaces/OperationClassification.html":{},"interfaces/TreeOperation.html":{}}}],["base.dx",{"_index":2238,"title":{},"body":{"interfaces/DynamicOperation.html":{},"interfaces/OpInput.html":{},"interfaces/OperationClassification.html":{},"interfaces/TreeOperation.html":{}}}],["base.inlets",{"_index":2236,"title":{},"body":{"interfaces/DynamicOperation.html":{},"interfaces/OpInput.html":{},"interfaces/OperationClassification.html":{},"interfaces/TreeOperation.html":{}}}],["base.inlets.filter((i",{"_index":2214,"title":{},"body":{"interfaces/DynamicOperation.html":{},"interfaces/OpInput.html":{},"interfaces/OperationClassification.html":{},"interfaces/TreeOperation.html":{}}}],["base.inlets.length",{"_index":2227,"title":{},"body":{"interfaces/DynamicOperation.html":{},"interfaces/OpInput.html":{},"interfaces/OperationClassification.html":{},"interfaces/TreeOperation.html":{}}}],["base.max_inputs",{"_index":2239,"title":{},"body":{"interfaces/DynamicOperation.html":{},"interfaces/OpInput.html":{},"interfaces/OperationClassification.html":{},"interfaces/TreeOperation.html":{}}}],["base.name",{"_index":2201,"title":{},"body":{"interfaces/DynamicOperation.html":{},"interfaces/OpInput.html":{},"interfaces/OperationClassification.html":{},"interfaces/TreeOperation.html":{}}}],["base.old_names",{"_index":2235,"title":{},"body":{"interfaces/DynamicOperation.html":{},"interfaces/OpInput.html":{},"interfaces/OperationClassification.html":{},"interfaces/TreeOperation.html":{}}}],["base.params",{"_index":2240,"title":{},"body":{"interfaces/DynamicOperation.html":{},"interfaces/OpInput.html":{},"interfaces/OperationClassification.html":{},"interfaces/TreeOperation.html":{}}}],["base_cell",{"_index":3752,"title":{},"body":{"classes/Render.html":{}}}],["base_clear_x",{"_index":3841,"title":{},"body":{"classes/Render.html":{}}}],["base_clear_y",{"_index":3843,"title":{},"body":{"classes/Render.html":{}}}],["base_fill_x",{"_index":3845,"title":{},"body":{"classes/Render.html":{}}}],["base_fill_y",{"_index":3847,"title":{},"body":{"classes/Render.html":{}}}],["base_op",{"_index":626,"title":{},"body":{"interfaces/ChainOp.html":{},"interfaces/PairedOp.html":{},"interfaces/PedalEvent.html":{},"interfaces/PlayerOp.html":{}}}],["base_op.perform(d",{"_index":629,"title":{},"body":{"interfaces/ChainOp.html":{},"interfaces/PairedOp.html":{},"interfaces/PedalEvent.html":{},"interfaces/PlayerOp.html":{}}}],["base_op.perform(getdefaultparams(base_op",{"_index":628,"title":{},"body":{"interfaces/ChainOp.html":{},"interfaces/PairedOp.html":{},"interfaces/PedalEvent.html":{},"interfaces/PlayerOp.html":{}}}],["based",{"_index":128,"title":{},"body":{"classes/AbstractOpFactory.html":{},"classes/BaseOp.html":{},"classes/Branch.html":{},"classes/Bus.html":{},"interfaces/DesignActions.html":{},"interfaces/DraftOperationClassification.html":{},"interfaces/LoomConfig.html":{},"classes/Merge.html":{},"interfaces/OpClassifier.html":{},"interfaces/OperationProperties.html":{},"classes/PedalConfig.html":{},"classes/Pipe.html":{},"injectables/PlayerService.html":{},"classes/Seed.html":{},"interfaces/TopologyDef.html":{},"miscellaneous/typealiases.html":{}}}],["basenode",{"_index":2276,"title":{},"body":{"interfaces/IOTuple.html":{},"interfaces/TreeNode.html":{},"miscellaneous/typealiases.html":{}}}],["baseop",{"_index":25,"title":{"classes/BaseOp.html":{}},"body":{"classes/AbstractOpFactory.html":{},"classes/BaseOp.html":{},"classes/Branch.html":{},"classes/Bus.html":{},"interfaces/ChainOp.html":{},"interfaces/DraftOperationClassification.html":{},"interfaces/DynamicOperation.html":{},"interfaces/LoomConfig.html":{},"classes/Merge.html":{},"interfaces/OpClassifier.html":{},"interfaces/OpInput.html":{},"interfaces/OperationClassification.html":{},"interfaces/OperationProperties.html":{},"interfaces/PairedOp.html":{},"classes/PedalConfig.html":{},"interfaces/PedalEvent.html":{},"classes/Pipe.html":{},"interfaces/PlayerOp.html":{},"injectables/PlayerService.html":{},"classes/Seed.html":{},"interfaces/TopologyDef.html":{},"interfaces/TreeOperation.html":{}}}],["baseop(...args",{"_index":282,"title":{},"body":{"classes/AbstractOpFactory.html":{},"classes/BaseOp.html":{},"classes/Branch.html":{},"classes/Bus.html":{},"classes/Merge.html":{},"interfaces/OpClassifier.html":{},"interfaces/OperationProperties.html":{},"classes/Pipe.html":{},"classes/Seed.html":{},"interfaces/TopologyDef.html":{}}}],["basic",{"_index":602,"title":{},"body":{"interfaces/ChainOp.html":{},"interfaces/PairedOp.html":{},"interfaces/PedalEvent.html":{},"interfaces/PlayerOp.html":{},"index.html":{}}}],["basics",{"_index":4493,"title":{},"body":{"index.html":{}}}],["basis",{"_index":3686,"title":{},"body":{"components/PlayerComponent.html":{},"components/WeavingStateComponent.html":{}}}],["basket",{"_index":1826,"title":{},"body":{"interfaces/DraftOperationClassification.html":{},"interfaces/LoomConfig.html":{},"classes/PedalConfig.html":{},"injectables/PlayerService.html":{}}}],["bbc5ff",{"_index":3108,"title":{},"body":{"components/OpSequencerComponent.html":{},"components/WeavingStateComponent.html":{}}}],["before",{"_index":1641,"title":{},"body":{"interfaces/DraftMap.html":{},"interfaces/Interlacement.html":{},"interfaces/InterlacementVal.html":{},"index.html":{}}}],["being",{"_index":1630,"title":{},"body":{"interfaces/DraftMap.html":{},"interfaces/Interlacement.html":{},"interfaces/InterlacementVal.html":{},"interfaces/Pedal.html":{},"classes/PedalStatus.html":{},"injectables/PedalsService.html":{},"injectables/ViewportService.html":{}}}],["belong",{"_index":2290,"title":{},"body":{"interfaces/IOTuple.html":{},"interfaces/TreeNode.html":{}}}],["belonging",{"_index":3983,"title":{},"body":{"classes/Shape.html":{}}}],["between",{"_index":916,"title":{},"body":{"interfaces/Crossing.html":{},"interfaces/DraftOperationClassification.html":{},"components/DraftdetailComponent.html":{},"interfaces/IOTuple.html":{},"interfaces/LoomConfig.html":{},"classes/PedalConfig.html":{},"injectables/PlayerService.html":{},"classes/Shape-1.html":{},"classes/System.html":{},"interfaces/TreeNode.html":{},"interfaces/Vertex.html":{},"interfaces/YarnPath.html":{},"index.html":{},"miscellaneous/typealiases.html":{}}}],["betwen",{"_index":888,"title":{},"body":{"interfaces/Crossing.html":{},"interfaces/Vertex.html":{},"interfaces/YarnPath.html":{}}}],["big",{"_index":2179,"title":{},"body":{"interfaces/DynamicOperation.html":{},"interfaces/OpInput.html":{},"interfaces/OperationClassification.html":{},"interfaces/TreeOperation.html":{}}}],["binary",{"_index":4652,"title":{},"body":{"miscellaneous/typealiases.html":{}}}],["bind(this",{"_index":2609,"title":{},"body":{"injectables/MappingsService.html":{}}}],["bindings",{"_index":1711,"title":{},"body":{"interfaces/DraftOperationClassification.html":{},"interfaces/LoomConfig.html":{},"classes/PedalConfig.html":{},"injectables/PlayerService.html":{}}}],["bindwarp",{"_index":1851,"title":{},"body":{"interfaces/DraftOperationClassification.html":{},"interfaces/LoomConfig.html":{},"classes/PedalConfig.html":{},"injectables/PlayerService.html":{}}}],["bindweft",{"_index":1849,"title":{},"body":{"interfaces/DraftOperationClassification.html":{},"interfaces/LoomConfig.html":{},"classes/PedalConfig.html":{},"injectables/PlayerService.html":{}}}],["bitmap",{"_index":1369,"title":{},"body":{"interfaces/DesignActions.html":{}}}],["bitmapimage",{"_index":2942,"title":{},"body":{"components/NoteComponent.html":{}}}],["black",{"_index":2310,"title":{},"body":{"interfaces/Ink.html":{},"injectables/InkService.html":{},"components/InletComponent.html":{}}}],["bleh",{"_index":4249,"title":{},"body":{"injectables/ViewportService.html":{}}}],["bleh.y",{"_index":4253,"title":{},"body":{"injectables/ViewportService.html":{}}}],["block",{"_index":2117,"title":{},"body":{"components/DraftdetailComponent.html":{},"interfaces/DynamicOperation.html":{},"components/MixerViewComponent.html":{},"components/NoteComponent.html":{},"components/OpHelpModal.html":{},"interfaces/OpInput.html":{},"components/OpSequencerComponent.html":{},"interfaces/OperationClassification.html":{},"components/PlayerComponent.html":{},"interfaces/TreeOperation.html":{},"components/WeavingStateComponent.html":{}}}],["blocks",{"_index":4528,"title":{},"body":{"index.html":{}}}],["blue",{"_index":3688,"title":{},"body":{"components/PlayerComponent.html":{}}}],["bmp",{"_index":1688,"title":{},"body":{"interfaces/DraftNodeProxy.html":{},"interfaces/FileObj.html":{},"interfaces/FileSaver.html":{},"interfaces/Fileloader.html":{},"interfaces/LoadResponse.html":{},"interfaces/NodeComponentProxy.html":{},"interfaces/OpComponentProxy.html":{},"interfaces/SaveObj.html":{},"interfaces/StatusMessage.html":{},"interfaces/TreeNodeProxy.html":{}}}],["body",{"_index":2104,"title":{},"body":{"components/DraftdetailComponent.html":{},"components/OpSequencerComponent.html":{},"components/PlayerComponent.html":{},"components/WeavingStateComponent.html":{}}}],["bold",{"_index":3104,"title":{},"body":{"components/OpSequencerComponent.html":{},"components/OpsComponent.html":{},"components/SnackbarComponent.html":{}}}],["bool",{"_index":3201,"title":{},"body":{"interfaces/OperationParam.html":{},"classes/Params.html":{},"classes/System.html":{}}}],["boolean",{"_index":381,"title":{},"body":{"classes/Cell.html":{},"interfaces/ChainIndex.html":{},"interfaces/ChainOp.html":{},"components/ConnectionComponent.html":{},"classes/DBListener.html":{},"classes/DBListenerArray.html":{},"classes/DBNode.html":{},"classes/DBNodeArray.html":{},"classes/DBTwoWay.html":{},"classes/DBTwoWayArray.html":{},"classes/DBWriteBuffer.html":{},"classes/DBWriter.html":{},"classes/DBWriterArray.html":{},"interfaces/DensityUnits.html":{},"interfaces/DesignActions.html":{},"interfaces/DesignMode.html":{},"interfaces/DraftMap.html":{},"interfaces/DraftNodeProxy.html":{},"interfaces/DraftOperationClassification.html":{},"components/DraftdetailComponent.html":{},"interfaces/FileObj.html":{},"interfaces/FileSaver.html":{},"interfaces/Fileloader.html":{},"interfaces/IOTuple.html":{},"interfaces/Ink.html":{},"injectables/InkService.html":{},"components/InletComponent.html":{},"interfaces/Interlacement.html":{},"interfaces/InterlacementVal.html":{},"interfaces/LoadResponse.html":{},"interfaces/LoomConfig.html":{},"interfaces/LoomTypes.html":{},"injectables/MappingsService.html":{},"interfaces/MaterialTypes.html":{},"interfaces/NodeComponentProxy.html":{},"interfaces/NodeMethods.html":{},"interfaces/NodeParams.html":{},"classes/OnlineStatus.html":{},"interfaces/OpComponentProxy.html":{},"components/OpHelpModal.html":{},"classes/OpSequencer.html":{},"interfaces/OperationParam.html":{},"interfaces/PairedOp.html":{},"components/ParameterComponent.html":{},"classes/Params.html":{},"interfaces/Pedal.html":{},"classes/PedalConfig.html":{},"interfaces/PedalEvent.html":{},"classes/PedalStatus.html":{},"injectables/PedalsService.html":{},"components/PlayerComponent.html":{},"interfaces/PlayerOp.html":{},"injectables/PlayerService.html":{},"interfaces/PlayerState.html":{},"interfaces/PlayerState-1.html":{},"classes/Render.html":{},"interfaces/SaveObj.html":{},"classes/Selection.html":{},"injectables/SequencerService.html":{},"classes/Shape-1.html":{},"classes/Shuttle.html":{},"interfaces/StatusMessage.html":{},"classes/System.html":{},"interfaces/TreeNode.html":{},"interfaces/TreeNodeProxy.html":{},"interfaces/ViewModes.html":{},"interfaces/WeavingLog.html":{},"interfaces/WeavingPick.html":{},"interfaces/WeavingPick-1.html":{},"components/WeavingStateComponent.html":{},"index.html":{},"miscellaneous/typealiases.html":{}}}],["boolparam",{"_index":3165,"title":{},"body":{"interfaces/OperationParam.html":{},"components/ParameterComponent.html":{},"classes/Params.html":{},"miscellaneous/typealiases.html":{}}}],["boolparam.falsestate",{"_index":3331,"title":{},"body":{"components/ParameterComponent.html":{}}}],["boolparam.truestate",{"_index":3330,"title":{},"body":{"components/ParameterComponent.html":{}}}],["border",{"_index":2475,"title":{},"body":{"components/InletComponent.html":{},"components/MixerViewComponent.html":{},"components/NoteComponent.html":{},"components/OpSequencerComponent.html":{},"components/ParameterComponent.html":{},"components/PlayerComponent.html":{},"components/WeavingStateComponent.html":{}}}],["border:thin",{"_index":2842,"title":{},"body":{"components/MixerViewComponent.html":{}}}],["both",{"_index":130,"title":{},"body":{"classes/AbstractOpFactory.html":{},"classes/BaseOp.html":{},"classes/Branch.html":{},"classes/Bus.html":{},"classes/DBListener.html":{},"classes/DBListenerArray.html":{},"classes/DBNode.html":{},"classes/DBNodeArray.html":{},"classes/DBTwoWay.html":{},"classes/DBTwoWayArray.html":{},"classes/DBWriteBuffer.html":{},"classes/DBWriter.html":{},"classes/DBWriterArray.html":{},"classes/Merge.html":{},"interfaces/NodeMethods.html":{},"interfaces/NodeParams.html":{},"classes/OnlineStatus.html":{},"interfaces/OpClassifier.html":{},"interfaces/OperationProperties.html":{},"classes/Pipe.html":{},"classes/Seed.html":{},"interfaces/TopologyDef.html":{},"index.html":{}}}],["bottom",{"_index":891,"title":{},"body":{"interfaces/Crossing.html":{},"components/DraftdetailComponent.html":{},"interfaces/Ink.html":{},"injectables/InkService.html":{},"components/OpSequencerComponent.html":{},"components/PlayerComponent.html":{},"interfaces/Vertex.html":{},"components/WeavingStateComponent.html":{},"interfaces/YarnPath.html":{},"miscellaneous/typealiases.html":{}}}],["bottomright",{"_index":799,"title":{},"body":{"components/ConnectionComponent.html":{}}}],["bound",{"_index":1713,"title":{},"body":{"interfaces/DraftOperationClassification.html":{},"interfaces/LoomConfig.html":{},"classes/PedalConfig.html":{},"injectables/PlayerService.html":{}}}],["bounds",{"_index":336,"title":{"interfaces/Bounds.html":{}},"body":{"interfaces/Bounds.html":{},"components/ConnectionComponent.html":{},"interfaces/DesignActions.html":{},"interfaces/DraftNodeProxy.html":{},"interfaces/FileObj.html":{},"interfaces/FileSaver.html":{},"interfaces/Fileloader.html":{},"interfaces/LoadResponse.html":{},"directives/MarqueeComponent.html":{},"components/MixerViewComponent.html":{},"interfaces/NodeComponentProxy.html":{},"components/NoteComponent.html":{},"interfaces/OpComponentProxy.html":{},"interfaces/Point.html":{},"interfaces/SaveObj.html":{},"directives/SelectionComponent.html":{},"classes/Shape.html":{},"classes/Shape-1.html":{},"components/SnackbarComponent.html":{},"interfaces/StatusMessage.html":{},"interfaces/TreeNodeProxy.html":{},"injectables/ViewportService.html":{}}}],["bounds(value",{"_index":1353,"title":{},"body":{"interfaces/DesignActions.html":{}}}],["bounds.height",{"_index":4034,"title":{},"body":{"classes/Shape-1.html":{},"components/SnackbarComponent.html":{}}}],["bounds.topleft.y",{"_index":4032,"title":{},"body":{"classes/Shape-1.html":{}}}],["bounds.width",{"_index":4033,"title":{},"body":{"classes/Shape-1.html":{}}}],["bounds:bounds",{"_index":2669,"title":{},"body":{"directives/MarqueeComponent.html":{},"directives/SelectionComponent.html":{},"classes/Shape-1.html":{}}}],["boundsstring",{"_index":3993,"title":{},"body":{"classes/Shape.html":{}}}],["box",{"_index":3107,"title":{},"body":{"components/OpSequencerComponent.html":{},"components/WeavingStateComponent.html":{}}}],["brain",{"_index":4586,"title":{},"body":{"index.html":{}}}],["branch",{"_index":102,"title":{"classes/Branch.html":{}},"body":{"classes/AbstractOpFactory.html":{},"classes/BaseOp.html":{},"classes/Branch.html":{},"classes/Bus.html":{},"interfaces/DynamicOperation.html":{},"classes/Merge.html":{},"interfaces/OpClassifier.html":{},"interfaces/OpInput.html":{},"interfaces/OperationClassification.html":{},"interfaces/OperationProperties.html":{},"classes/Pipe.html":{},"classes/Seed.html":{},"interfaces/TopologyDef.html":{},"interfaces/TreeOperation.html":{}}}],["branchop",{"_index":2229,"title":{},"body":{"interfaces/DynamicOperation.html":{},"interfaces/OpInput.html":{},"interfaces/OperationClassification.html":{},"interfaces/TreeOperation.html":{}}}],["branchoperation",{"_index":312,"title":{},"body":{"classes/AbstractOpFactory.html":{},"classes/BaseOp.html":{},"classes/Branch.html":{},"classes/Bus.html":{},"classes/Merge.html":{},"interfaces/OpClassifier.html":{},"interfaces/OperationProperties.html":{},"classes/Pipe.html":{},"classes/Seed.html":{},"interfaces/TopologyDef.html":{}}}],["break",{"_index":197,"title":{},"body":{"classes/AbstractOpFactory.html":{},"classes/BaseOp.html":{},"classes/Branch.html":{},"classes/Bus.html":{},"interfaces/DynamicOperation.html":{},"components/InletComponent.html":{},"classes/Merge.html":{},"interfaces/OpClassifier.html":{},"interfaces/OpInput.html":{},"classes/OpSequencer.html":{},"interfaces/OperationClassification.html":{},"interfaces/OperationProperties.html":{},"components/ParameterComponent.html":{},"classes/Pipe.html":{},"components/PlayerComponent.html":{},"classes/Seed.html":{},"interfaces/TopologyDef.html":{},"interfaces/TreeOperation.html":{},"components/VirtualPedalsComponent.html":{},"components/WeavingStateComponent.html":{}}}],["breaks",{"_index":4021,"title":{},"body":{"classes/Shape-1.html":{}}}],["broader",{"_index":1609,"title":{},"body":{"interfaces/DraftMap.html":{},"interfaces/Interlacement.html":{},"interfaces/InterlacementVal.html":{}}}],["browse",{"_index":4621,"title":{},"body":{"modules.html":{}}}],["browser",{"_index":4360,"title":{},"body":{"dependencies.html":{},"index.html":{},"modules.html":{}}}],["buffer",{"_index":1045,"title":{},"body":{"classes/DBListener.html":{},"classes/DBListenerArray.html":{},"classes/DBNode.html":{},"classes/DBNodeArray.html":{},"classes/DBTwoWay.html":{},"classes/DBTwoWayArray.html":{},"classes/DBWriteBuffer.html":{},"classes/DBWriter.html":{},"classes/DBWriterArray.html":{},"interfaces/NodeMethods.html":{},"interfaces/NodeParams.html":{},"classes/OnlineStatus.html":{}}}],["build",{"_index":4613,"title":{},"body":{"index.html":{}}}],["buildableoperation",{"_index":315,"title":{},"body":{"classes/AbstractOpFactory.html":{},"classes/BaseOp.html":{},"classes/Branch.html":{},"classes/Bus.html":{},"interfaces/ChainOp.html":{},"interfaces/DraftOperationClassification.html":{},"interfaces/DynamicOperation.html":{},"interfaces/LoomConfig.html":{},"classes/Merge.html":{},"interfaces/OpClassifier.html":{},"interfaces/OpInput.html":{},"interfaces/OperationClassification.html":{},"interfaces/OperationProperties.html":{},"interfaces/PairedOp.html":{},"classes/PedalConfig.html":{},"interfaces/PedalEvent.html":{},"classes/Pipe.html":{},"interfaces/PlayerOp.html":{},"injectables/PlayerService.html":{},"classes/Seed.html":{},"interfaces/TopologyDef.html":{},"interfaces/TreeOperation.html":{},"miscellaneous/typealiases.html":{}}}],["building",{"_index":4527,"title":{},"body":{"index.html":{}}}],["buildtreeop",{"_index":4400,"title":{},"body":{"miscellaneous/functions.html":{}}}],["buildtreeop(base",{"_index":2186,"title":{},"body":{"interfaces/DynamicOperation.html":{},"interfaces/OpInput.html":{},"interfaces/OperationClassification.html":{},"interfaces/TreeOperation.html":{},"miscellaneous/functions.html":{}}}],["built",{"_index":4478,"title":{},"body":{"index.html":{}}}],["bulma",{"_index":4374,"title":{},"body":{"dependencies.html":{}}}],["bundles",{"_index":4520,"title":{},"body":{"index.html":{}}}],["bus",{"_index":103,"title":{"classes/Bus.html":{}},"body":{"classes/AbstractOpFactory.html":{},"classes/BaseOp.html":{},"classes/Branch.html":{},"classes/Bus.html":{},"interfaces/DynamicOperation.html":{},"classes/Merge.html":{},"interfaces/OpClassifier.html":{},"interfaces/OpInput.html":{},"interfaces/OperationClassification.html":{},"interfaces/OperationProperties.html":{},"classes/Pipe.html":{},"classes/Seed.html":{},"interfaces/TopologyDef.html":{},"interfaces/TreeOperation.html":{}}}],["busoperation",{"_index":313,"title":{},"body":{"classes/AbstractOpFactory.html":{},"classes/BaseOp.html":{},"classes/Branch.html":{},"classes/Bus.html":{},"classes/Merge.html":{},"interfaces/OpClassifier.html":{},"interfaces/OperationProperties.html":{},"classes/Pipe.html":{},"classes/Seed.html":{},"interfaces/TopologyDef.html":{}}}],["button",{"_index":2849,"title":{},"body":{"components/MixerViewComponent.html":{},"components/NoteComponent.html":{},"components/OpSequencerComponent.html":{},"components/OpsComponent.html":{},"components/ParameterComponent.html":{},"components/PlayerComponent.html":{},"components/VirtualPedalsComponent.html":{},"components/WeavingStateComponent.html":{}}}],["button.cxn",{"_index":2481,"title":{},"body":{"components/InletComponent.html":{}}}],["button.input",{"_index":2478,"title":{},"body":{"components/InletComponent.html":{}}}],["button.is",{"_index":3342,"title":{},"body":{"components/ParameterComponent.html":{}}}],["button.mat",{"_index":3113,"title":{},"body":{"components/OpSequencerComponent.html":{},"components/PlayerComponent.html":{},"components/WeavingStateComponent.html":{}}}],["button.selected",{"_index":2854,"title":{},"body":{"components/MixerViewComponent.html":{}}}],["c",{"_index":144,"title":{},"body":{"classes/AbstractOpFactory.html":{},"classes/BaseOp.html":{},"classes/Branch.html":{},"classes/Bus.html":{},"classes/Merge.html":{},"interfaces/OpClassifier.html":{},"interfaces/OperationProperties.html":{},"classes/Pipe.html":{},"classes/Seed.html":{},"interfaces/TopologyDef.html":{}}}],["c.category",{"_index":1891,"title":{},"body":{"interfaces/DraftOperationClassification.html":{},"interfaces/LoomConfig.html":{},"classes/PedalConfig.html":{},"injectables/PlayerService.html":{}}}],["c130",{"_index":3139,"title":{},"body":{"components/OpSequencerComponent.html":{}}}],["calc(100vh",{"_index":3675,"title":{},"body":{"components/PlayerComponent.html":{}}}],["calculatebounds",{"_index":664,"title":{},"body":{"components/ConnectionComponent.html":{}}}],["call",{"_index":216,"title":{},"body":{"classes/AbstractOpFactory.html":{},"classes/BaseOp.html":{},"classes/Branch.html":{},"classes/Bus.html":{},"interfaces/ChainIndex.html":{},"components/ConnectionComponent.html":{},"interfaces/DesignActions.html":{},"classes/Merge.html":{},"components/NoteComponent.html":{},"interfaces/OpClassifier.html":{},"interfaces/OperationProperties.html":{},"interfaces/Pedal.html":{},"classes/PedalStatus.html":{},"injectables/PedalsService.html":{},"classes/Pipe.html":{},"components/PlayerComponent.html":{},"classes/Seed.html":{},"injectables/SequencerService.html":{},"interfaces/TopologyDef.html":{}}}],["called",{"_index":398,"title":{},"body":{"classes/Cell.html":{},"interfaces/ChainIndex.html":{},"interfaces/DesignActions.html":{},"components/DraftdetailComponent.html":{},"components/NoteComponent.html":{},"injectables/SequencerService.html":{},"injectables/ViewportService.html":{}}}],["calledd",{"_index":4213,"title":{},"body":{"injectables/ViewportService.html":{}}}],["calls",{"_index":1392,"title":{},"body":{"interfaces/DesignActions.html":{}}}],["can't",{"_index":3073,"title":{},"body":{"classes/OpSequencer.html":{}}}],["canvas",{"_index":688,"title":{},"body":{"components/ConnectionComponent.html":{},"interfaces/DesignActions.html":{},"interfaces/DraftNodeProxy.html":{},"interfaces/FileObj.html":{},"interfaces/FileSaver.html":{},"interfaces/Fileloader.html":{},"interfaces/LoadResponse.html":{},"interfaces/NodeComponentProxy.html":{},"components/NoteComponent.html":{},"interfaces/OpComponentProxy.html":{},"components/PlayerComponent.html":{},"interfaces/SaveObj.html":{},"classes/Shape-1.html":{},"interfaces/StatusMessage.html":{},"interfaces/TreeNodeProxy.html":{},"components/WeavingStateComponent.html":{}}}],["canvas2image",{"_index":4376,"title":{},"body":{"dependencies.html":{}}}],["case",{"_index":713,"title":{},"body":{"components/ConnectionComponent.html":{},"components/DraftdetailComponent.html":{},"interfaces/DynamicOperation.html":{},"components/InletComponent.html":{},"interfaces/OpInput.html":{},"classes/OpSequencer.html":{},"interfaces/OperationClassification.html":{},"components/ParameterComponent.html":{},"interfaces/TreeOperation.html":{},"components/VirtualPedalsComponent.html":{}}}],["catch",{"_index":1174,"title":{},"body":{"classes/DBListener.html":{},"classes/DBListenerArray.html":{},"classes/DBNode.html":{},"classes/DBNodeArray.html":{},"classes/DBTwoWay.html":{},"classes/DBTwoWayArray.html":{},"classes/DBWriteBuffer.html":{},"classes/DBWriter.html":{},"classes/DBWriterArray.html":{},"interfaces/NodeMethods.html":{},"interfaces/NodeParams.html":{},"classes/OnlineStatus.html":{}}}],["catch(result",{"_index":1026,"title":{},"body":{"classes/DBListener.html":{},"classes/DBListenerArray.html":{},"classes/DBNode.html":{},"classes/DBNodeArray.html":{},"classes/DBTwoWay.html":{},"classes/DBTwoWayArray.html":{},"classes/DBWriteBuffer.html":{},"classes/DBWriter.html":{},"classes/DBWriterArray.html":{},"interfaces/NodeMethods.html":{},"interfaces/NodeParams.html":{},"classes/OnlineStatus.html":{}}}],["categorized",{"_index":4606,"title":{},"body":{"index.html":{}}}],["category",{"_index":1694,"title":{},"body":{"interfaces/DraftOperationClassification.html":{},"interfaces/DynamicOperation.html":{},"interfaces/LoomConfig.html":{},"interfaces/OpInput.html":{},"interfaces/OperationClassification.html":{},"classes/PedalConfig.html":{},"injectables/PlayerService.html":{},"interfaces/TreeOperation.html":{}}}],["cdkscrollable",{"_index":1983,"title":{},"body":{"components/DraftdetailComponent.html":{}}}],["cell",{"_index":366,"title":{"classes/Cell.html":{}},"body":{"classes/Cell.html":{},"interfaces/DesignActions.html":{},"interfaces/DraftMap.html":{},"interfaces/Interlacement.html":{},"interfaces/InterlacementVal.html":{},"components/MixerViewComponent.html":{},"components/NoteComponent.html":{},"classes/Shape-1.html":{},"index.html":{},"miscellaneous/typealiases.html":{}}}],["cell_factor",{"_index":2713,"title":{},"body":{"components/MixerViewComponent.html":{}}}],["cell_size",{"_index":4307,"title":{},"body":{"components/WeavingStateComponent.html":{}}}],["cells",{"_index":889,"title":{},"body":{"interfaces/Crossing.html":{},"interfaces/DraftMap.html":{},"interfaces/Ink.html":{},"injectables/InkService.html":{},"interfaces/Interlacement.html":{},"interfaces/InterlacementVal.html":{},"classes/Shape-1.html":{},"interfaces/Vertex.html":{},"interfaces/YarnPath.html":{},"index.html":{}}}],["center",{"_index":2486,"title":{},"body":{"components/InletComponent.html":{},"components/ParameterComponent.html":{},"classes/Shape-1.html":{},"injectables/ViewportService.html":{}}}],["certain",{"_index":4566,"title":{},"body":{"index.html":{}}}],["ch",{"_index":499,"title":{},"body":{"interfaces/ChainIndex.html":{},"interfaces/ChainOp.html":{},"interfaces/PairedOp.html":{},"interfaces/PedalEvent.html":{},"interfaces/PlayerOp.html":{},"injectables/SequencerService.html":{}}}],["ch.id",{"_index":501,"title":{},"body":{"interfaces/ChainIndex.html":{},"components/OpSequencerComponent.html":{},"injectables/SequencerService.html":{}}}],["ch_id",{"_index":3913,"title":{},"body":{"injectables/SequencerService.html":{}}}],["chagnes",{"_index":4590,"title":{},"body":{"index.html":{}}}],["chain",{"_index":425,"title":{},"body":{"interfaces/ChainIndex.html":{},"interfaces/ChainOp.html":{},"interfaces/DraftOperationClassification.html":{},"interfaces/LoomConfig.html":{},"injectables/MappingsService.html":{},"components/OpSequencerComponent.html":{},"interfaces/PairedOp.html":{},"classes/PedalConfig.html":{},"interfaces/PedalEvent.html":{},"interfaces/PlayerOp.html":{},"injectables/PlayerService.html":{},"injectables/SequencerService.html":{},"miscellaneous/typealiases.html":{}}}],["chain(id",{"_index":2532,"title":{},"body":{"injectables/MappingsService.html":{}}}],["chain(pedalid",{"_index":1753,"title":{},"body":{"interfaces/DraftOperationClassification.html":{},"interfaces/LoomConfig.html":{},"classes/PedalConfig.html":{},"injectables/PlayerService.html":{}}}],["chainable",{"_index":2588,"title":{},"body":{"injectables/MappingsService.html":{}}}],["chainarray",{"_index":2517,"title":{},"body":{"injectables/MappingsService.html":{}}}],["chainarray(id",{"_index":2534,"title":{},"body":{"injectables/MappingsService.html":{}}}],["chainindex",{"_index":422,"title":{"interfaces/ChainIndex.html":{}},"body":{"interfaces/ChainIndex.html":{},"injectables/SequencerService.html":{}}}],["chainop",{"_index":433,"title":{"interfaces/ChainOp.html":{}},"body":{"interfaces/ChainIndex.html":{},"interfaces/ChainOp.html":{},"interfaces/DraftOperationClassification.html":{},"interfaces/LoomConfig.html":{},"injectables/MappingsService.html":{},"classes/OpSequencer.html":{},"interfaces/PairedOp.html":{},"classes/PedalConfig.html":{},"interfaces/PedalEvent.html":{},"interfaces/PlayerOp.html":{},"injectables/PlayerService.html":{},"injectables/SequencerService.html":{},"miscellaneous/functions.html":{}}}],["chains",{"_index":457,"title":{},"body":{"interfaces/ChainIndex.html":{},"injectables/SequencerService.html":{}}}],["chaintopedal",{"_index":3506,"title":{},"body":{"classes/PedalConfig.html":{}}}],["chaintopedal(pedalid",{"_index":1764,"title":{},"body":{"interfaces/DraftOperationClassification.html":{},"interfaces/LoomConfig.html":{},"classes/PedalConfig.html":{},"injectables/PlayerService.html":{}}}],["chances",{"_index":4548,"title":{},"body":{"index.html":{}}}],["change",{"_index":1114,"title":{},"body":{"classes/DBListener.html":{},"classes/DBListenerArray.html":{},"classes/DBNode.html":{},"classes/DBNodeArray.html":{},"classes/DBTwoWay.html":{},"classes/DBTwoWayArray.html":{},"classes/DBWriteBuffer.html":{},"classes/DBWriter.html":{},"classes/DBWriterArray.html":{},"interfaces/DesignActions.html":{},"interfaces/DraftOperationClassification.html":{},"interfaces/DynamicOperation.html":{},"interfaces/LoomConfig.html":{},"components/MixerViewComponent.html":{},"interfaces/NodeMethods.html":{},"interfaces/NodeParams.html":{},"classes/OnlineStatus.html":{},"interfaces/OpInput.html":{},"interfaces/OperationClassification.html":{},"interfaces/Pedal.html":{},"classes/PedalConfig.html":{},"classes/PedalStatus.html":{},"injectables/PedalsService.html":{},"injectables/PlayerService.html":{},"interfaces/PlayerState.html":{},"interfaces/PlayerState-1.html":{},"interfaces/TreeOperation.html":{},"interfaces/WeavingLog.html":{},"interfaces/WeavingPick.html":{},"interfaces/WeavingPick-1.html":{}}}],["changed",{"_index":1093,"title":{},"body":{"classes/DBListener.html":{},"classes/DBListenerArray.html":{},"classes/DBNode.html":{},"classes/DBNodeArray.html":{},"classes/DBTwoWay.html":{},"classes/DBTwoWayArray.html":{},"classes/DBWriteBuffer.html":{},"classes/DBWriter.html":{},"classes/DBWriterArray.html":{},"interfaces/NodeMethods.html":{},"interfaces/NodeParams.html":{},"classes/OnlineStatus.html":{}}}],["changedetectionstrategy",{"_index":1308,"title":{},"body":{"interfaces/DesignActions.html":{}}}],["changedetectorref",{"_index":2761,"title":{},"body":{"components/MixerViewComponent.html":{}}}],["changeloomwidth",{"_index":3700,"title":{},"body":{"injectables/PlayerService.html":{}}}],["changeloomwidth(e",{"_index":3708,"title":{},"body":{"injectables/PlayerService.html":{}}}],["changes",{"_index":1145,"title":{},"body":{"classes/DBListener.html":{},"classes/DBListenerArray.html":{},"classes/DBNode.html":{},"classes/DBNodeArray.html":{},"classes/DBTwoWay.html":{},"classes/DBTwoWayArray.html":{},"classes/DBWriteBuffer.html":{},"classes/DBWriter.html":{},"classes/DBWriterArray.html":{},"components/DraftdetailComponent.html":{},"components/MixerViewComponent.html":{},"interfaces/NodeMethods.html":{},"interfaces/NodeParams.html":{},"classes/OnlineStatus.html":{},"components/ParameterComponent.html":{},"interfaces/Pedal.html":{},"classes/PedalStatus.html":{},"injectables/PedalsService.html":{},"index.html":{}}}],["changing",{"_index":196,"title":{},"body":{"classes/AbstractOpFactory.html":{},"classes/BaseOp.html":{},"classes/Branch.html":{},"classes/Bus.html":{},"classes/DBListener.html":{},"classes/DBListenerArray.html":{},"classes/DBNode.html":{},"classes/DBNodeArray.html":{},"classes/DBTwoWay.html":{},"classes/DBTwoWayArray.html":{},"classes/DBWriteBuffer.html":{},"classes/DBWriter.html":{},"classes/DBWriterArray.html":{},"interfaces/DynamicOperation.html":{},"classes/Merge.html":{},"interfaces/NodeMethods.html":{},"interfaces/NodeParams.html":{},"classes/OnlineStatus.html":{},"interfaces/OpClassifier.html":{},"interfaces/OpInput.html":{},"interfaces/OperationClassification.html":{},"interfaces/OperationProperties.html":{},"classes/Pipe.html":{},"classes/Seed.html":{},"interfaces/TopologyDef.html":{},"interfaces/TreeOperation.html":{}}}],["charge",{"_index":1794,"title":{},"body":{"interfaces/DraftOperationClassification.html":{},"interfaces/LoomConfig.html":{},"interfaces/Pedal.html":{},"classes/PedalConfig.html":{},"classes/PedalStatus.html":{},"injectables/PedalsService.html":{},"injectables/PlayerService.html":{}}}],["check",{"_index":1166,"title":{},"body":{"classes/DBListener.html":{},"classes/DBListenerArray.html":{},"classes/DBNode.html":{},"classes/DBNodeArray.html":{},"classes/DBTwoWay.html":{},"classes/DBTwoWayArray.html":{},"classes/DBWriteBuffer.html":{},"classes/DBWriter.html":{},"classes/DBWriterArray.html":{},"interfaces/DesignActions.html":{},"interfaces/DynamicOperation.html":{},"interfaces/NodeMethods.html":{},"interfaces/NodeParams.html":{},"classes/OnlineStatus.html":{},"interfaces/OpInput.html":{},"interfaces/OperationClassification.html":{},"classes/Shape-1.html":{},"interfaces/TreeOperation.html":{}}}],["checkalive",{"_index":1172,"title":{},"body":{"classes/DBListener.html":{},"classes/DBListenerArray.html":{},"classes/DBNode.html":{},"classes/DBNodeArray.html":{},"classes/DBTwoWay.html":{},"classes/DBTwoWayArray.html":{},"classes/DBWriteBuffer.html":{},"classes/DBWriter.html":{},"classes/DBWriterArray.html":{},"interfaces/NodeMethods.html":{},"interfaces/NodeParams.html":{},"classes/OnlineStatus.html":{}}}],["checked",{"_index":4467,"title":{},"body":{"index.html":{}}}],["checks",{"_index":2361,"title":{},"body":{"interfaces/Ink.html":{},"injectables/InkService.html":{}}}],["child",{"_index":596,"title":{},"body":{"interfaces/ChainOp.html":{},"classes/DBListener.html":{},"classes/DBListenerArray.html":{},"classes/DBNode.html":{},"classes/DBNodeArray.html":{},"classes/DBTwoWay.html":{},"classes/DBTwoWayArray.html":{},"classes/DBWriteBuffer.html":{},"classes/DBWriter.html":{},"classes/DBWriterArray.html":{},"interfaces/DynamicOperation.html":{},"interfaces/NodeMethods.html":{},"interfaces/NodeParams.html":{},"classes/OnlineStatus.html":{},"interfaces/OpInput.html":{},"interfaces/OperationClassification.html":{},"interfaces/PairedOp.html":{},"interfaces/PedalEvent.html":{},"interfaces/PlayerOp.html":{},"interfaces/TreeOperation.html":{}}}],["child')).length",{"_index":2204,"title":{},"body":{"interfaces/DynamicOperation.html":{},"interfaces/OpInput.html":{},"interfaces/OperationClassification.html":{},"interfaces/TreeOperation.html":{}}}],["child's",{"_index":1112,"title":{},"body":{"classes/DBListener.html":{},"classes/DBListenerArray.html":{},"classes/DBNode.html":{},"classes/DBNodeArray.html":{},"classes/DBTwoWay.html":{},"classes/DBTwoWayArray.html":{},"classes/DBWriteBuffer.html":{},"classes/DBWriter.html":{},"classes/DBWriterArray.html":{},"interfaces/NodeMethods.html":{},"interfaces/NodeParams.html":{},"classes/OnlineStatus.html":{}}}],["child(this.parentnode.ref",{"_index":1102,"title":{},"body":{"classes/DBListener.html":{},"classes/DBListenerArray.html":{},"classes/DBNode.html":{},"classes/DBNodeArray.html":{},"classes/DBTwoWay.html":{},"classes/DBTwoWayArray.html":{},"classes/DBWriteBuffer.html":{},"classes/DBWriter.html":{},"classes/DBWriterArray.html":{},"interfaces/NodeMethods.html":{},"interfaces/NodeParams.html":{},"classes/OnlineStatus.html":{}}}],["childkeys",{"_index":1127,"title":{},"body":{"classes/DBListener.html":{},"classes/DBListenerArray.html":{},"classes/DBNode.html":{},"classes/DBNodeArray.html":{},"classes/DBTwoWay.html":{},"classes/DBTwoWayArray.html":{},"classes/DBWriteBuffer.html":{},"classes/DBWriter.html":{},"classes/DBWriterArray.html":{},"interfaces/NodeMethods.html":{},"interfaces/NodeParams.html":{},"classes/OnlineStatus.html":{}}}],["childnode",{"_index":1103,"title":{},"body":{"classes/DBListener.html":{},"classes/DBListenerArray.html":{},"classes/DBNode.html":{},"classes/DBNodeArray.html":{},"classes/DBTwoWay.html":{},"classes/DBTwoWayArray.html":{},"classes/DBWriteBuffer.html":{},"classes/DBWriter.html":{},"classes/DBWriterArray.html":{},"interfaces/NodeMethods.html":{},"interfaces/NodeParams.html":{},"classes/OnlineStatus.html":{}}}],["childnode.attach",{"_index":1136,"title":{},"body":{"classes/DBListener.html":{},"classes/DBListenerArray.html":{},"classes/DBNode.html":{},"classes/DBNodeArray.html":{},"classes/DBTwoWay.html":{},"classes/DBTwoWayArray.html":{},"classes/DBWriteBuffer.html":{},"classes/DBWriter.html":{},"classes/DBWriterArray.html":{},"interfaces/NodeMethods.html":{},"interfaces/NodeParams.html":{},"classes/OnlineStatus.html":{}}}],["childref",{"_index":1101,"title":{},"body":{"classes/DBListener.html":{},"classes/DBListenerArray.html":{},"classes/DBNode.html":{},"classes/DBNodeArray.html":{},"classes/DBTwoWay.html":{},"classes/DBTwoWayArray.html":{},"classes/DBWriteBuffer.html":{},"classes/DBWriter.html":{},"classes/DBWriterArray.html":{},"interfaces/NodeMethods.html":{},"interfaces/NodeParams.html":{},"classes/OnlineStatus.html":{}}}],["children",{"_index":1297,"title":{},"body":{"interfaces/DensityUnits.html":{},"interfaces/DesignMode.html":{},"interfaces/LoomTypes.html":{},"interfaces/MaterialTypes.html":{},"interfaces/ViewModes.html":{}}}],["circular",{"_index":3008,"title":{},"body":{"classes/OpSequencer.html":{}}}],["class",{"_index":0,"title":{"classes/AbstractOpFactory.html":{},"classes/BaseOp.html":{},"classes/Branch.html":{},"classes/Bus.html":{},"classes/Cell.html":{},"classes/DBListener.html":{},"classes/DBListenerArray.html":{},"classes/DBNode.html":{},"classes/DBNodeArray.html":{},"classes/DBTwoWay.html":{},"classes/DBTwoWayArray.html":{},"classes/DBWriteBuffer.html":{},"classes/DBWriter.html":{},"classes/DBWriterArray.html":{},"classes/Merge.html":{},"classes/OnlineStatus.html":{},"classes/OpSequencer.html":{},"classes/Params.html":{},"classes/PedalConfig.html":{},"classes/PedalStatus.html":{},"classes/Pipe.html":{},"classes/Render.html":{},"classes/Seed.html":{},"classes/Selection.html":{},"classes/Shape.html":{},"classes/Shape-1.html":{},"classes/Shuttle.html":{},"classes/System.html":{}},"body":{"classes/AbstractOpFactory.html":{},"classes/BaseOp.html":{},"classes/Branch.html":{},"classes/Bus.html":{},"classes/Cell.html":{},"interfaces/ChainIndex.html":{},"components/ConnectionComponent.html":{},"classes/DBListener.html":{},"classes/DBListenerArray.html":{},"classes/DBNode.html":{},"classes/DBNodeArray.html":{},"classes/DBTwoWay.html":{},"classes/DBTwoWayArray.html":{},"classes/DBWriteBuffer.html":{},"classes/DBWriter.html":{},"classes/DBWriterArray.html":{},"interfaces/DesignActions.html":{},"interfaces/DraftOperationClassification.html":{},"components/DraftdetailComponent.html":{},"components/ImageComponent.html":{},"interfaces/Ink.html":{},"injectables/InkService.html":{},"components/InletComponent.html":{},"injectables/LayersService.html":{},"interfaces/LoomConfig.html":{},"injectables/MappingsService.html":{},"directives/MarqueeComponent.html":{},"classes/Merge.html":{},"modules/MixerModule.html":{},"components/MixerViewComponent.html":{},"interfaces/NodeMethods.html":{},"interfaces/NodeParams.html":{},"components/NoteComponent.html":{},"classes/OnlineStatus.html":{},"interfaces/OpClassifier.html":{},"components/OpHelpModal.html":{},"classes/OpSequencer.html":{},"components/OpSequencerComponent.html":{},"interfaces/OperationParam.html":{},"interfaces/OperationProperties.html":{},"components/OpsComponent.html":{},"components/ParameterComponent.html":{},"classes/Params.html":{},"interfaces/Pedal.html":{},"classes/PedalConfig.html":{},"classes/PedalStatus.html":{},"injectables/PedalsService.html":{},"classes/Pipe.html":{},"components/PlayerComponent.html":{},"modules/PlayerModule.html":{},"injectables/PlayerService.html":{},"classes/Render.html":{},"classes/Seed.html":{},"classes/Selection.html":{},"directives/SelectionComponent.html":{},"injectables/SequencerService.html":{},"classes/Shape.html":{},"classes/Shape-1.html":{},"classes/Shuttle.html":{},"components/SnackbarComponent.html":{},"classes/System.html":{},"interfaces/TopologyDef.html":{},"injectables/ViewportService.html":{},"components/VirtualPedalsComponent.html":{},"components/WeavingStateComponent.html":{}}}],["class.category",{"_index":3089,"title":{},"body":{"components/OpSequencerComponent.html":{},"components/OpsComponent.html":{}}}],["class.dx",{"_index":3090,"title":{},"body":{"components/OpSequencerComponent.html":{},"components/OpsComponent.html":{}}}],["classes",{"_index":2,"title":{},"body":{"classes/AbstractOpFactory.html":{},"classes/BaseOp.html":{},"classes/Branch.html":{},"classes/Bus.html":{},"classes/Cell.html":{},"classes/DBListener.html":{},"classes/DBListenerArray.html":{},"classes/DBNode.html":{},"classes/DBNodeArray.html":{},"classes/DBTwoWay.html":{},"classes/DBTwoWayArray.html":{},"classes/DBWriteBuffer.html":{},"classes/DBWriter.html":{},"classes/DBWriterArray.html":{},"classes/Merge.html":{},"classes/OnlineStatus.html":{},"classes/OpSequencer.html":{},"classes/Params.html":{},"classes/PedalConfig.html":{},"classes/PedalStatus.html":{},"classes/Pipe.html":{},"classes/Render.html":{},"classes/Seed.html":{},"classes/Selection.html":{},"classes/Shape.html":{},"classes/Shape-1.html":{},"classes/Shuttle.html":{},"classes/System.html":{},"overview.html":{}}}],["classifier",{"_index":226,"title":{},"body":{"classes/AbstractOpFactory.html":{},"classes/BaseOp.html":{},"classes/Branch.html":{},"classes/Bus.html":{},"classes/Merge.html":{},"interfaces/OpClassifier.html":{},"interfaces/OperationProperties.html":{},"classes/Pipe.html":{},"classes/Seed.html":{},"interfaces/TopologyDef.html":{}}}],["classifiers",{"_index":275,"title":{},"body":{"classes/AbstractOpFactory.html":{},"classes/BaseOp.html":{},"classes/Branch.html":{},"classes/Bus.html":{},"classes/Merge.html":{},"interfaces/OpClassifier.html":{},"interfaces/OperationProperties.html":{},"classes/Pipe.html":{},"classes/Seed.html":{},"interfaces/TopologyDef.html":{}}}],["classifies",{"_index":95,"title":{},"body":{"classes/AbstractOpFactory.html":{},"classes/BaseOp.html":{},"classes/Branch.html":{},"classes/Bus.html":{},"classes/Merge.html":{},"interfaces/OpClassifier.html":{},"interfaces/OperationProperties.html":{},"classes/Pipe.html":{},"classes/Seed.html":{},"interfaces/TopologyDef.html":{}}}],["classify",{"_index":2246,"title":{},"body":{"interfaces/DynamicOperation.html":{},"interfaces/OpInput.html":{},"interfaces/OperationClassification.html":{},"interfaces/TreeOperation.html":{}}}],["clear",{"_index":4185,"title":{},"body":{"injectables/ViewportService.html":{}}}],["cleared",{"_index":1038,"title":{},"body":{"classes/DBListener.html":{},"classes/DBListenerArray.html":{},"classes/DBNode.html":{},"classes/DBNodeArray.html":{},"classes/DBTwoWay.html":{},"classes/DBTwoWayArray.html":{},"classes/DBWriteBuffer.html":{},"classes/DBWriter.html":{},"classes/DBWriterArray.html":{},"interfaces/NodeMethods.html":{},"interfaces/NodeParams.html":{},"classes/OnlineStatus.html":{}}}],["clearlayers",{"_index":2501,"title":{},"body":{"injectables/LayersService.html":{}}}],["clears",{"_index":2349,"title":{},"body":{"interfaces/Ink.html":{},"injectables/InkService.html":{}}}],["clearselection",{"_index":2347,"title":{},"body":{"interfaces/Ink.html":{},"injectables/InkService.html":{}}}],["cli",{"_index":4483,"title":{},"body":{"index.html":{}}}],["click",{"_index":2052,"title":{},"body":{"components/DraftdetailComponent.html":{}}}],["click($event",{"_index":2042,"title":{},"body":{"components/DraftdetailComponent.html":{}}}],["clicks",{"_index":1975,"title":{},"body":{"components/DraftdetailComponent.html":{}}}],["clone",{"_index":4500,"title":{},"body":{"index.html":{}}}],["close",{"_index":1947,"title":{},"body":{"components/DraftdetailComponent.html":{},"components/MixerViewComponent.html":{},"components/OpHelpModal.html":{},"components/OpsComponent.html":{},"components/PlayerComponent.html":{}}}],["clunky",{"_index":447,"title":{},"body":{"interfaces/ChainIndex.html":{},"injectables/SequencerService.html":{}}}],["cluster_mixermodule",{"_index":2679,"title":{},"body":{"modules/MixerModule.html":{},"overview.html":{}}}],["cluster_mixermodule_declarations",{"_index":2681,"title":{},"body":{"modules/MixerModule.html":{},"overview.html":{}}}],["cluster_mixermodule_imports",{"_index":2680,"title":{},"body":{"modules/MixerModule.html":{},"overview.html":{}}}],["cluster_playermodule",{"_index":3690,"title":{},"body":{"modules/PlayerModule.html":{},"overview.html":{}}}],["cluster_playermodule_declarations",{"_index":3691,"title":{},"body":{"modules/PlayerModule.html":{},"overview.html":{}}}],["cluster_playermodule_exports",{"_index":3692,"title":{},"body":{"modules/PlayerModule.html":{},"overview.html":{}}}],["cm",{"_index":2067,"title":{},"body":{"components/DraftdetailComponent.html":{}}}],["code",{"_index":2435,"title":{},"body":{"components/InletComponent.html":{},"components/OpHelpModal.html":{},"index.html":{}}}],["col",{"_index":3970,"title":{},"body":{"classes/Shape.html":{}}}],["collection",{"_index":2564,"title":{},"body":{"injectables/MappingsService.html":{},"index.html":{}}}],["color",{"_index":2122,"title":{},"body":{"components/DraftdetailComponent.html":{},"components/InletComponent.html":{},"components/MixerViewComponent.html":{},"components/NoteComponent.html":{},"components/OpHelpModal.html":{},"components/OpSequencerComponent.html":{},"components/OpsComponent.html":{},"components/ParameterComponent.html":{},"components/PlayerComponent.html":{},"classes/Shuttle.html":{},"components/SnackbarComponent.html":{},"components/VirtualPedalsComponent.html":{},"components/WeavingStateComponent.html":{},"dependencies.html":{}}}],["color:#ffffff",{"_index":3689,"title":{},"body":{"components/PlayerComponent.html":{}}}],["colors",{"_index":2076,"title":{},"body":{"components/DraftdetailComponent.html":{}}}],["colortable",{"_index":2300,"title":{},"body":{"components/ImageComponent.html":{}}}],["cols",{"_index":4018,"title":{},"body":{"classes/Shape-1.html":{}}}],["colshuttlemapping",{"_index":1596,"title":{},"body":{"interfaces/DesignActions.html":{},"interfaces/DraftMap.html":{},"interfaces/Interlacement.html":{},"interfaces/InterlacementVal.html":{}}}],["colsystemmapping",{"_index":1594,"title":{},"body":{"interfaces/DesignActions.html":{},"interfaces/DraftMap.html":{},"interfaces/Interlacement.html":{},"interfaces/InterlacementVal.html":{}}}],["column",{"_index":351,"title":{},"body":{"interfaces/Bounds.html":{},"interfaces/DesignActions.html":{},"components/DraftdetailComponent.html":{},"components/NoteComponent.html":{},"components/OpSequencerComponent.html":{},"components/OpsComponent.html":{},"interfaces/Point.html":{}}}],["column/warp",{"_index":1631,"title":{},"body":{"interfaces/DraftMap.html":{},"interfaces/Interlacement.html":{},"interfaces/InterlacementVal.html":{}}}],["columns",{"_index":1627,"title":{},"body":{"interfaces/DraftMap.html":{},"interfaces/Interlacement.html":{},"interfaces/InterlacementVal.html":{}}}],["combination",{"_index":603,"title":{},"body":{"interfaces/ChainOp.html":{},"interfaces/PairedOp.html":{},"interfaces/PedalEvent.html":{},"interfaces/PlayerOp.html":{}}}],["combine",{"_index":288,"title":{},"body":{"classes/AbstractOpFactory.html":{},"classes/BaseOp.html":{},"classes/Branch.html":{},"classes/Bus.html":{},"classes/Merge.html":{},"interfaces/OpClassifier.html":{},"interfaces/OperationProperties.html":{},"classes/Pipe.html":{},"classes/Seed.html":{},"interfaces/TopologyDef.html":{}}}],["come",{"_index":3167,"title":{},"body":{"interfaces/OperationParam.html":{},"classes/Params.html":{}}}],["comes",{"_index":4656,"title":{},"body":{"miscellaneous/typealiases.html":{}}}],["coming",{"_index":1667,"title":{},"body":{"interfaces/DraftNodeProxy.html":{},"interfaces/FileObj.html":{},"interfaces/FileSaver.html":{},"interfaces/Fileloader.html":{},"interfaces/LoadResponse.html":{},"interfaces/NodeComponentProxy.html":{},"interfaces/OpComponentProxy.html":{},"interfaces/SaveObj.html":{},"interfaces/StatusMessage.html":{},"interfaces/TreeNodeProxy.html":{}}}],["commands",{"_index":4542,"title":{},"body":{"index.html":{}}}],["comment",{"_index":2929,"title":{},"body":{"components/NoteComponent.html":{}}}],["commonmodule",{"_index":3695,"title":{},"body":{"modules/PlayerModule.html":{}}}],["communicate",{"_index":353,"title":{},"body":{"interfaces/Bounds.html":{},"interfaces/Pedal.html":{},"classes/PedalStatus.html":{},"injectables/PedalsService.html":{},"interfaces/Point.html":{}}}],["compare",{"_index":4157,"title":{},"body":{"classes/System.html":{},"miscellaneous/functions.html":{}}}],["compares",{"_index":2307,"title":{},"body":{"interfaces/Ink.html":{},"injectables/InkService.html":{}}}],["compatible",{"_index":579,"title":{},"body":{"interfaces/ChainOp.html":{},"interfaces/PairedOp.html":{},"interfaces/PedalEvent.html":{},"interfaces/PlayerOp.html":{}}}],["compdoc",{"_index":4378,"title":{},"body":{"dependencies.html":{}}}],["compile",{"_index":4510,"title":{},"body":{"index.html":{}}}],["complex",{"_index":2217,"title":{},"body":{"interfaces/DynamicOperation.html":{},"interfaces/OpInput.html":{},"interfaces/OperationClassification.html":{},"interfaces/TreeOperation.html":{}}}],["complicated",{"_index":2592,"title":{},"body":{"injectables/MappingsService.html":{}}}],["compoment",{"_index":695,"title":{},"body":{"components/ConnectionComponent.html":{}}}],["component",{"_index":640,"title":{"components/ConnectionComponent.html":{},"components/DraftdetailComponent.html":{},"components/ImageComponent.html":{},"components/InletComponent.html":{},"components/MixerViewComponent.html":{},"components/NoteComponent.html":{},"components/OpHelpModal.html":{},"components/OpSequencerComponent.html":{},"components/OpsComponent.html":{},"components/ParameterComponent.html":{},"components/PlayerComponent.html":{},"components/SnackbarComponent.html":{},"components/VirtualPedalsComponent.html":{},"components/WeavingStateComponent.html":{}},"body":{"components/ConnectionComponent.html":{},"interfaces/DesignActions.html":{},"interfaces/DraftMap.html":{},"interfaces/DraftNodeProxy.html":{},"components/DraftdetailComponent.html":{},"interfaces/FileObj.html":{},"interfaces/FileSaver.html":{},"interfaces/Fileloader.html":{},"interfaces/IOTuple.html":{},"components/ImageComponent.html":{},"components/InletComponent.html":{},"interfaces/Interlacement.html":{},"interfaces/InterlacementVal.html":{},"interfaces/LoadResponse.html":{},"components/MixerViewComponent.html":{},"interfaces/NodeComponentProxy.html":{},"components/NoteComponent.html":{},"interfaces/OpComponentProxy.html":{},"components/OpHelpModal.html":{},"components/OpSequencerComponent.html":{},"components/OpsComponent.html":{},"components/ParameterComponent.html":{},"components/PlayerComponent.html":{},"interfaces/SaveObj.html":{},"components/SnackbarComponent.html":{},"interfaces/StatusMessage.html":{},"interfaces/TreeNode.html":{},"interfaces/TreeNodeProxy.html":{},"components/VirtualPedalsComponent.html":{},"components/WeavingStateComponent.html":{},"index.html":{}}}],["component's",{"_index":1479,"title":{},"body":{"interfaces/DesignActions.html":{}}}],["component_id",{"_index":1603,"title":{},"body":{"interfaces/DraftMap.html":{},"interfaces/Interlacement.html":{},"interfaces/InterlacementVal.html":{}}}],["component_template",{"_index":843,"title":{},"body":{"components/ConnectionComponent.html":{},"components/DraftdetailComponent.html":{},"components/ImageComponent.html":{},"components/InletComponent.html":{},"components/MixerViewComponent.html":{},"components/NoteComponent.html":{},"components/OpHelpModal.html":{},"components/OpSequencerComponent.html":{},"components/OpsComponent.html":{},"components/ParameterComponent.html":{},"components/PlayerComponent.html":{},"components/SnackbarComponent.html":{},"components/VirtualPedalsComponent.html":{},"components/WeavingStateComponent.html":{}}}],["components",{"_index":642,"title":{},"body":{"components/ConnectionComponent.html":{},"interfaces/DesignActions.html":{},"interfaces/DraftMap.html":{},"components/DraftdetailComponent.html":{},"interfaces/IOTuple.html":{},"components/ImageComponent.html":{},"components/InletComponent.html":{},"interfaces/Interlacement.html":{},"interfaces/InterlacementVal.html":{},"components/MixerViewComponent.html":{},"components/NoteComponent.html":{},"components/OpHelpModal.html":{},"components/OpSequencerComponent.html":{},"components/OpsComponent.html":{},"components/ParameterComponent.html":{},"components/PlayerComponent.html":{},"components/SnackbarComponent.html":{},"interfaces/TreeNode.html":{},"components/VirtualPedalsComponent.html":{},"components/WeavingStateComponent.html":{},"index.html":{},"overview.html":{}}}],["compressed",{"_index":1647,"title":{},"body":{"interfaces/DraftNodeProxy.html":{},"interfaces/FileObj.html":{},"interfaces/FileSaver.html":{},"interfaces/Fileloader.html":{},"interfaces/LoadResponse.html":{},"interfaces/NodeComponentProxy.html":{},"interfaces/OpComponentProxy.html":{},"interfaces/SaveObj.html":{},"interfaces/StatusMessage.html":{},"interfaces/TreeNodeProxy.html":{}}}],["computation",{"_index":4570,"title":{},"body":{"index.html":{}}}],["compute",{"_index":4589,"title":{},"body":{"index.html":{}}}],["computes",{"_index":4649,"title":{},"body":{"miscellaneous/typealiases.html":{}}}],["concepts",{"_index":4516,"title":{},"body":{"index.html":{}}}],["conductive",{"_index":4130,"title":{},"body":{"classes/System.html":{}}}],["conf",{"_index":2640,"title":{},"body":{"injectables/MappingsService.html":{},"classes/OpSequencer.html":{},"miscellaneous/functions.html":{}}}],["confirm",{"_index":3024,"title":{},"body":{"classes/OpSequencer.html":{}}}],["confirmed",{"_index":3069,"title":{},"body":{"classes/OpSequencer.html":{}}}],["connect",{"_index":2257,"title":{},"body":{"interfaces/IOTuple.html":{},"interfaces/TreeNode.html":{}}}],["connected",{"_index":2261,"title":{},"body":{"interfaces/IOTuple.html":{},"interfaces/TreeNode.html":{}}}],["connecting",{"_index":4437,"title":{},"body":{"index.html":{}}}],["connectino",{"_index":1377,"title":{},"body":{"interfaces/DesignActions.html":{}}}],["connection",{"_index":651,"title":{},"body":{"components/ConnectionComponent.html":{},"index.html":{}}}],["connection'},{'name",{"_index":844,"title":{},"body":{"components/ConnectionComponent.html":{},"components/DraftdetailComponent.html":{},"components/ImageComponent.html":{},"components/InletComponent.html":{},"components/MixerViewComponent.html":{},"components/NoteComponent.html":{},"components/OpHelpModal.html":{},"components/OpSequencerComponent.html":{},"components/OpsComponent.html":{},"components/ParameterComponent.html":{},"components/PlayerComponent.html":{},"components/SnackbarComponent.html":{},"components/VirtualPedalsComponent.html":{},"components/WeavingStateComponent.html":{}}}],["connection.component.html",{"_index":655,"title":{},"body":{"components/ConnectionComponent.html":{}}}],["connection.component.scss",{"_index":653,"title":{},"body":{"components/ConnectionComponent.html":{}}}],["connectioncomponent",{"_index":641,"title":{"components/ConnectionComponent.html":{}},"body":{"components/ConnectionComponent.html":{},"components/DraftdetailComponent.html":{},"interfaces/IOTuple.html":{},"components/ImageComponent.html":{},"components/InletComponent.html":{},"modules/MixerModule.html":{},"components/MixerViewComponent.html":{},"components/NoteComponent.html":{},"components/OpHelpModal.html":{},"components/OpSequencerComponent.html":{},"components/OpsComponent.html":{},"components/ParameterComponent.html":{},"components/PlayerComponent.html":{},"components/SnackbarComponent.html":{},"interfaces/TreeNode.html":{},"components/VirtualPedalsComponent.html":{},"components/WeavingStateComponent.html":{},"overview.html":{}}}],["connections",{"_index":697,"title":{},"body":{"components/ConnectionComponent.html":{},"interfaces/IOTuple.html":{},"interfaces/Pedal.html":{},"classes/PedalStatus.html":{},"injectables/PedalsService.html":{},"interfaces/TreeNode.html":{}}}],["consists",{"_index":4595,"title":{},"body":{"index.html":{}}}],["console.error(\"attempitng",{"_index":1483,"title":{},"body":{"interfaces/DesignActions.html":{}}}],["console.error(\"attempting",{"_index":764,"title":{},"body":{"components/ConnectionComponent.html":{}}}],["console.error(\"cound",{"_index":2898,"title":{},"body":{"components/NoteComponent.html":{}}}],["console.error(\"note",{"_index":2915,"title":{},"body":{"components/NoteComponent.html":{}}}],["console.log(\"a",{"_index":1901,"title":{},"body":{"interfaces/DraftOperationClassification.html":{},"interfaces/LoomConfig.html":{},"classes/PedalConfig.html":{},"injectables/PlayerService.html":{}}}],["console.log(\"anywhere",{"_index":2051,"title":{},"body":{"components/DraftdetailComponent.html":{}}}],["console.log(\"are",{"_index":3436,"title":{},"body":{"interfaces/Pedal.html":{},"classes/PedalStatus.html":{},"injectables/PedalsService.html":{}}}],["console.log(\"attempitng",{"_index":1491,"title":{},"body":{"interfaces/DesignActions.html":{}}}],["console.log(\"child",{"_index":1090,"title":{},"body":{"classes/DBListener.html":{},"classes/DBListenerArray.html":{},"classes/DBNode.html":{},"classes/DBNodeArray.html":{},"classes/DBTwoWay.html":{},"classes/DBTwoWayArray.html":{},"classes/DBWriteBuffer.html":{},"classes/DBWriter.html":{},"classes/DBWriterArray.html":{},"interfaces/NodeMethods.html":{},"interfaces/NodeParams.html":{},"classes/OnlineStatus.html":{}}}],["console.log(\"created",{"_index":3902,"title":{},"body":{"directives/SelectionComponent.html":{}}}],["console.log(\"draft",{"_index":1801,"title":{},"body":{"interfaces/DraftOperationClassification.html":{},"interfaces/LoomConfig.html":{},"classes/PedalConfig.html":{},"injectables/PlayerService.html":{}}}],["console.log(\"filtering",{"_index":2580,"title":{},"body":{"injectables/MappingsService.html":{}}}],["console.log(\"forward",{"_index":3064,"title":{},"body":{"classes/OpSequencer.html":{}}}],["console.log(\"init",{"_index":3657,"title":{},"body":{"components/PlayerComponent.html":{},"components/WeavingStateComponent.html":{}}}],["console.log(\"ng",{"_index":3646,"title":{},"body":{"components/PlayerComponent.html":{}}}],["console.log(\"node",{"_index":1065,"title":{},"body":{"classes/DBListener.html":{},"classes/DBListenerArray.html":{},"classes/DBNode.html":{},"classes/DBNodeArray.html":{},"classes/DBTwoWay.html":{},"classes/DBTwoWayArray.html":{},"classes/DBWriteBuffer.html":{},"classes/DBWriter.html":{},"classes/DBWriterArray.html":{},"interfaces/NodeMethods.html":{},"interfaces/NodeParams.html":{},"classes/OnlineStatus.html":{}}}],["console.log(\"op",{"_index":2200,"title":{},"body":{"interfaces/DynamicOperation.html":{},"interfaces/OpInput.html":{},"interfaces/OperationClassification.html":{},"interfaces/TreeOperation.html":{}}}],["console.log(\"overwriting",{"_index":1043,"title":{},"body":{"classes/DBListener.html":{},"classes/DBListenerArray.html":{},"classes/DBNode.html":{},"classes/DBNodeArray.html":{},"classes/DBTwoWay.html":{},"classes/DBTwoWayArray.html":{},"classes/DBWriteBuffer.html":{},"classes/DBWriter.html":{},"classes/DBWriterArray.html":{},"interfaces/NodeMethods.html":{},"interfaces/NodeParams.html":{},"classes/OnlineStatus.html":{}}}],["console.log(\"pedals",{"_index":1875,"title":{},"body":{"interfaces/DraftOperationClassification.html":{},"interfaces/LoomConfig.html":{},"interfaces/Pedal.html":{},"classes/PedalConfig.html":{},"classes/PedalStatus.html":{},"injectables/PedalsService.html":{},"injectables/PlayerService.html":{}}}],["console.log(\"perform",{"_index":2209,"title":{},"body":{"interfaces/DynamicOperation.html":{},"interfaces/OpInput.html":{},"interfaces/OperationClassification.html":{},"interfaces/TreeOperation.html":{}}}],["console.log(\"player",{"_index":1907,"title":{},"body":{"interfaces/DraftOperationClassification.html":{},"interfaces/LoomConfig.html":{},"classes/PedalConfig.html":{},"injectables/PlayerService.html":{}}}],["console.log(\"redrawing",{"_index":3668,"title":{},"body":{"components/PlayerComponent.html":{},"components/WeavingStateComponent.html":{}}}],["console.log(\"resizing",{"_index":3670,"title":{},"body":{"components/PlayerComponent.html":{}}}],["console.log(\"result",{"_index":1577,"title":{},"body":{"interfaces/DesignActions.html":{}}}],["console.log(\"scale",{"_index":4029,"title":{},"body":{"classes/Shape-1.html":{}}}],["console.log(\"toggling",{"_index":3504,"title":{},"body":{"interfaces/Pedal.html":{},"classes/PedalStatus.html":{},"injectables/PedalsService.html":{},"components/PlayerComponent.html":{}}}],["console.log(\"unknown",{"_index":4287,"title":{},"body":{"components/VirtualPedalsComponent.html":{}}}],["console.log(\"weaving",{"_index":3469,"title":{},"body":{"interfaces/Pedal.html":{},"classes/PedalStatus.html":{},"injectables/PedalsService.html":{}}}],["console.log('child",{"_index":1100,"title":{},"body":{"classes/DBListener.html":{},"classes/DBListenerArray.html":{},"classes/DBNode.html":{},"classes/DBNodeArray.html":{},"classes/DBTwoWay.html":{},"classes/DBTwoWayArray.html":{},"classes/DBWriteBuffer.html":{},"classes/DBWriter.html":{},"classes/DBWriterArray.html":{},"interfaces/NodeMethods.html":{},"interfaces/NodeParams.html":{},"classes/OnlineStatus.html":{}}}],["console.log('mapping",{"_index":1924,"title":{},"body":{"interfaces/DraftOperationClassification.html":{},"interfaces/LoomConfig.html":{},"classes/PedalConfig.html":{},"injectables/PlayerService.html":{}}}],["console.log('no",{"_index":497,"title":{},"body":{"interfaces/ChainIndex.html":{},"injectables/SequencerService.html":{}}}],["console.log('op",{"_index":633,"title":{},"body":{"interfaces/ChainOp.html":{},"interfaces/PairedOp.html":{},"interfaces/PedalEvent.html":{},"interfaces/PlayerOp.html":{}}}],["console.log('pedal",{"_index":1871,"title":{},"body":{"interfaces/DraftOperationClassification.html":{},"interfaces/LoomConfig.html":{},"classes/PedalConfig.html":{},"injectables/PlayerService.html":{}}}],["console.log('pedals",{"_index":3452,"title":{},"body":{"interfaces/Pedal.html":{},"classes/PedalStatus.html":{},"injectables/PedalsService.html":{}}}],["console.log('player",{"_index":1921,"title":{},"body":{"interfaces/DraftOperationClassification.html":{},"interfaces/LoomConfig.html":{},"classes/PedalConfig.html":{},"injectables/PlayerService.html":{}}}],["console.log('sequencer",{"_index":3063,"title":{},"body":{"classes/OpSequencer.html":{}}}],["console.log('viewport",{"_index":2787,"title":{},"body":{"components/MixerViewComponent.html":{}}}],["console.log('writer",{"_index":3408,"title":{},"body":{"interfaces/Pedal.html":{},"classes/PedalStatus.html":{},"injectables/PedalsService.html":{}}}],["console.log((nameorargs.name",{"_index":239,"title":{},"body":{"classes/AbstractOpFactory.html":{},"classes/BaseOp.html":{},"classes/Branch.html":{},"classes/Bus.html":{},"classes/Merge.html":{},"interfaces/OpClassifier.html":{},"interfaces/OperationProperties.html":{},"classes/Pipe.html":{},"classes/Seed.html":{},"interfaces/TopologyDef.html":{}}}],["console.log(`unmapping",{"_index":2620,"title":{},"body":{"injectables/MappingsService.html":{}}}],["console.log(`unpairing",{"_index":1786,"title":{},"body":{"interfaces/DraftOperationClassification.html":{},"interfaces/LoomConfig.html":{},"classes/PedalConfig.html":{},"injectables/PlayerService.html":{}}}],["console.log(e",{"_index":1914,"title":{},"body":{"interfaces/DraftOperationClassification.html":{},"interfaces/LoomConfig.html":{},"classes/PedalConfig.html":{},"injectables/PlayerService.html":{}}}],["console.log(event",{"_index":4279,"title":{},"body":{"components/VirtualPedalsComponent.html":{}}}],["console.log(i",{"_index":4040,"title":{},"body":{"classes/Shape-1.html":{}}}],["console.log(name",{"_index":2644,"title":{},"body":{"injectables/MappingsService.html":{}}}],["console.log(o",{"_index":495,"title":{},"body":{"interfaces/ChainIndex.html":{},"injectables/MappingsService.html":{},"injectables/SequencerService.html":{}}}],["console.log(ops",{"_index":1893,"title":{},"body":{"interfaces/DraftOperationClassification.html":{},"interfaces/LoomConfig.html":{},"classes/PedalConfig.html":{},"injectables/PlayerService.html":{}}}],["console.log(parentkeys",{"_index":1126,"title":{},"body":{"classes/DBListener.html":{},"classes/DBListenerArray.html":{},"classes/DBNode.html":{},"classes/DBNodeArray.html":{},"classes/DBTwoWay.html":{},"classes/DBTwoWayArray.html":{},"classes/DBWriteBuffer.html":{},"classes/DBWriter.html":{},"classes/DBWriterArray.html":{},"interfaces/NodeMethods.html":{},"interfaces/NodeParams.html":{},"classes/OnlineStatus.html":{}}}],["console.log(res",{"_index":2156,"title":{},"body":{"interfaces/DynamicOperation.html":{},"injectables/MappingsService.html":{},"interfaces/OpInput.html":{},"interfaces/OperationClassification.html":{},"interfaces/TreeOperation.html":{}}}],["console.log(result",{"_index":1027,"title":{},"body":{"classes/DBListener.html":{},"classes/DBListenerArray.html":{},"classes/DBNode.html":{},"classes/DBNodeArray.html":{},"classes/DBTwoWay.html":{},"classes/DBTwoWayArray.html":{},"classes/DBWriteBuffer.html":{},"classes/DBWriter.html":{},"classes/DBWriterArray.html":{},"interfaces/DraftOperationClassification.html":{},"interfaces/LoomConfig.html":{},"interfaces/NodeMethods.html":{},"interfaces/NodeParams.html":{},"classes/OnlineStatus.html":{},"classes/PedalConfig.html":{},"injectables/PlayerService.html":{}}}],["console.log(startpattern",{"_index":1804,"title":{},"body":{"interfaces/DraftOperationClassification.html":{},"interfaces/LoomConfig.html":{},"classes/PedalConfig.html":{},"injectables/PlayerService.html":{}}}],["console.log(this",{"_index":998,"title":{},"body":{"classes/DBListener.html":{},"classes/DBListenerArray.html":{},"classes/DBNode.html":{},"classes/DBNodeArray.html":{},"classes/DBTwoWay.html":{},"classes/DBTwoWayArray.html":{},"classes/DBWriteBuffer.html":{},"classes/DBWriter.html":{},"classes/DBWriterArray.html":{},"interfaces/NodeMethods.html":{},"interfaces/NodeParams.html":{},"classes/OnlineStatus.html":{}}}],["console.log(this.draft.id",{"_index":2671,"title":{},"body":{"directives/MarqueeComponent.html":{},"directives/SelectionComponent.html":{}}}],["console.log(this.getmap(p",{"_index":2581,"title":{},"body":{"injectables/MappingsService.html":{}}}],["console.log(this.mappings",{"_index":1923,"title":{},"body":{"interfaces/DraftOperationClassification.html":{},"interfaces/LoomConfig.html":{},"classes/PedalConfig.html":{},"injectables/PlayerService.html":{}}}],["console.log(this.name",{"_index":1003,"title":{},"body":{"classes/DBListener.html":{},"classes/DBListenerArray.html":{},"classes/DBNode.html":{},"classes/DBNodeArray.html":{},"classes/DBTwoWay.html":{},"classes/DBTwoWayArray.html":{},"classes/DBWriteBuffer.html":{},"classes/DBWriter.html":{},"classes/DBWriterArray.html":{},"interfaces/NodeMethods.html":{},"interfaces/NodeParams.html":{},"classes/OnlineStatus.html":{}}}],["console.log(this.nodes",{"_index":1064,"title":{},"body":{"classes/DBListener.html":{},"classes/DBListenerArray.html":{},"classes/DBNode.html":{},"classes/DBNodeArray.html":{},"classes/DBTwoWay.html":{},"classes/DBTwoWayArray.html":{},"classes/DBWriteBuffer.html":{},"classes/DBWriter.html":{},"classes/DBWriterArray.html":{},"interfaces/NodeMethods.html":{},"interfaces/NodeParams.html":{},"classes/OnlineStatus.html":{}}}],["console.log(this.nodes[n",{"_index":1066,"title":{},"body":{"classes/DBListener.html":{},"classes/DBListenerArray.html":{},"classes/DBNode.html":{},"classes/DBNodeArray.html":{},"classes/DBTwoWay.html":{},"classes/DBTwoWayArray.html":{},"classes/DBWriteBuffer.html":{},"classes/DBWriter.html":{},"classes/DBWriterArray.html":{},"interfaces/NodeMethods.html":{},"interfaces/NodeParams.html":{},"classes/OnlineStatus.html":{}}}],["console.log(this.ops",{"_index":511,"title":{},"body":{"interfaces/ChainIndex.html":{},"interfaces/DraftOperationClassification.html":{},"interfaces/LoomConfig.html":{},"injectables/MappingsService.html":{},"classes/PedalConfig.html":{},"injectables/PlayerService.html":{},"injectables/SequencerService.html":{}}}],["console.log(this.oss.getop('germanify",{"_index":1867,"title":{},"body":{"interfaces/DraftOperationClassification.html":{},"interfaces/LoomConfig.html":{},"classes/PedalConfig.html":{},"injectables/PlayerService.html":{}}}],["console.log(this.parentnode",{"_index":1125,"title":{},"body":{"classes/DBListener.html":{},"classes/DBListenerArray.html":{},"classes/DBNode.html":{},"classes/DBNodeArray.html":{},"classes/DBTwoWay.html":{},"classes/DBTwoWayArray.html":{},"classes/DBWriteBuffer.html":{},"classes/DBWriter.html":{},"classes/DBWriterArray.html":{},"interfaces/NodeMethods.html":{},"interfaces/NodeParams.html":{},"classes/OnlineStatus.html":{}}}],["console.log(this.seq",{"_index":496,"title":{},"body":{"interfaces/ChainIndex.html":{},"interfaces/DraftOperationClassification.html":{},"interfaces/LoomConfig.html":{},"classes/PedalConfig.html":{},"injectables/PlayerService.html":{},"injectables/SequencerService.html":{}}}],["console.log(this.state",{"_index":1928,"title":{},"body":{"interfaces/DraftOperationClassification.html":{},"interfaces/LoomConfig.html":{},"classes/PedalConfig.html":{},"injectables/PlayerService.html":{}}}],["console.log(this.status",{"_index":3435,"title":{},"body":{"interfaces/Pedal.html":{},"classes/PedalStatus.html":{},"injectables/PedalsService.html":{}}}],["const",{"_index":97,"title":{},"body":{"classes/AbstractOpFactory.html":{},"classes/BaseOp.html":{},"classes/Branch.html":{},"classes/Bus.html":{},"interfaces/ChainOp.html":{},"components/ConnectionComponent.html":{},"classes/DBListener.html":{},"classes/DBListenerArray.html":{},"classes/DBNode.html":{},"classes/DBNodeArray.html":{},"classes/DBTwoWay.html":{},"classes/DBTwoWayArray.html":{},"classes/DBWriteBuffer.html":{},"classes/DBWriter.html":{},"classes/DBWriterArray.html":{},"interfaces/DesignActions.html":{},"interfaces/DraftMap.html":{},"interfaces/DraftOperationClassification.html":{},"components/DraftdetailComponent.html":{},"interfaces/Ink.html":{},"injectables/InkService.html":{},"components/InletComponent.html":{},"interfaces/Interlacement.html":{},"interfaces/InterlacementVal.html":{},"interfaces/LoomConfig.html":{},"injectables/MappingsService.html":{},"classes/Merge.html":{},"components/MixerViewComponent.html":{},"interfaces/NodeMethods.html":{},"interfaces/NodeParams.html":{},"components/NoteComponent.html":{},"classes/OnlineStatus.html":{},"interfaces/OpClassifier.html":{},"components/OpHelpModal.html":{},"interfaces/OperationProperties.html":{},"components/OpsComponent.html":{},"interfaces/PairedOp.html":{},"components/ParameterComponent.html":{},"interfaces/Pedal.html":{},"classes/PedalConfig.html":{},"interfaces/PedalEvent.html":{},"classes/PedalStatus.html":{},"injectables/PedalsService.html":{},"classes/Pipe.html":{},"components/PlayerComponent.html":{},"interfaces/PlayerOp.html":{},"injectables/PlayerService.html":{},"classes/Render.html":{},"classes/Seed.html":{},"classes/Shape-1.html":{},"classes/System.html":{},"interfaces/TopologyDef.html":{},"injectables/ViewportService.html":{}}}],["constrain",{"_index":320,"title":{},"body":{"classes/BaseOp.html":{}}}],["constrain(c",{"_index":257,"title":{},"body":{"classes/AbstractOpFactory.html":{},"classes/BaseOp.html":{},"classes/Branch.html":{},"classes/Bus.html":{},"classes/Merge.html":{},"interfaces/OpClassifier.html":{},"interfaces/OperationProperties.html":{},"classes/Pipe.html":{},"classes/Seed.html":{},"interfaces/TopologyDef.html":{}}}],["constraint",{"_index":127,"title":{},"body":{"classes/AbstractOpFactory.html":{},"classes/BaseOp.html":{},"classes/Branch.html":{},"classes/Bus.html":{},"classes/Merge.html":{},"interfaces/OpClassifier.html":{},"interfaces/OperationProperties.html":{},"classes/Pipe.html":{},"classes/Seed.html":{},"interfaces/TopologyDef.html":{}}}],["constraint[\"input_drafts",{"_index":181,"title":{},"body":{"classes/AbstractOpFactory.html":{},"classes/BaseOp.html":{},"classes/Branch.html":{},"classes/Bus.html":{},"classes/Merge.html":{},"interfaces/OpClassifier.html":{},"interfaces/OperationProperties.html":{},"classes/Pipe.html":{},"classes/Seed.html":{},"interfaces/TopologyDef.html":{}}}],["constraint[\"input_params",{"_index":182,"title":{},"body":{"classes/AbstractOpFactory.html":{},"classes/BaseOp.html":{},"classes/Branch.html":{},"classes/Bus.html":{},"classes/Merge.html":{},"interfaces/OpClassifier.html":{},"interfaces/OperationProperties.html":{},"classes/Pipe.html":{},"classes/Seed.html":{},"interfaces/TopologyDef.html":{}}}],["constraintdefs",{"_index":143,"title":{},"body":{"classes/AbstractOpFactory.html":{},"classes/BaseOp.html":{},"classes/Branch.html":{},"classes/Bus.html":{},"classes/Merge.html":{},"interfaces/OpClassifier.html":{},"interfaces/OperationProperties.html":{},"classes/Pipe.html":{},"classes/Seed.html":{},"interfaces/TopologyDef.html":{},"miscellaneous/typealiases.html":{}}}],["constraintdefs[\"all_req",{"_index":151,"title":{},"body":{"classes/AbstractOpFactory.html":{},"classes/BaseOp.html":{},"classes/Branch.html":{},"classes/Bus.html":{},"classes/Merge.html":{},"interfaces/OpClassifier.html":{},"interfaces/OperationProperties.html":{},"classes/Pipe.html":{},"classes/Seed.html":{},"interfaces/TopologyDef.html":{}}}],["constraintdefs[\"drafts_opt",{"_index":149,"title":{},"body":{"classes/AbstractOpFactory.html":{},"classes/BaseOp.html":{},"classes/Branch.html":{},"classes/Bus.html":{},"classes/Merge.html":{},"interfaces/OpClassifier.html":{},"interfaces/OperationProperties.html":{},"classes/Pipe.html":{},"classes/Seed.html":{},"interfaces/TopologyDef.html":{}}}],["constraintdefs[\"no_drafts",{"_index":147,"title":{},"body":{"classes/AbstractOpFactory.html":{},"classes/BaseOp.html":{},"classes/Branch.html":{},"classes/Bus.html":{},"classes/Merge.html":{},"interfaces/OpClassifier.html":{},"interfaces/OperationProperties.html":{},"classes/Pipe.html":{},"classes/Seed.html":{},"interfaces/TopologyDef.html":{}}}],["constraintdefs[\"no_params",{"_index":148,"title":{},"body":{"classes/AbstractOpFactory.html":{},"classes/BaseOp.html":{},"classes/Branch.html":{},"classes/Bus.html":{},"classes/Merge.html":{},"interfaces/OpClassifier.html":{},"interfaces/OperationProperties.html":{},"classes/Pipe.html":{},"classes/Seed.html":{},"interfaces/TopologyDef.html":{}}}],["constraintdefs[\"params_opt",{"_index":150,"title":{},"body":{"classes/AbstractOpFactory.html":{},"classes/BaseOp.html":{},"classes/Branch.html":{},"classes/Bus.html":{},"classes/Merge.html":{},"interfaces/OpClassifier.html":{},"interfaces/OperationProperties.html":{},"classes/Pipe.html":{},"classes/Seed.html":{},"interfaces/TopologyDef.html":{}}}],["constraintindex",{"_index":152,"title":{},"body":{"classes/AbstractOpFactory.html":{},"classes/BaseOp.html":{},"classes/Branch.html":{},"classes/Bus.html":{},"classes/Merge.html":{},"interfaces/OpClassifier.html":{},"interfaces/OperationProperties.html":{},"classes/Pipe.html":{},"classes/Seed.html":{},"interfaces/TopologyDef.html":{},"miscellaneous/typealiases.html":{}}}],["constraintindex[constraintname",{"_index":158,"title":{},"body":{"classes/AbstractOpFactory.html":{},"classes/BaseOp.html":{},"classes/Branch.html":{},"classes/Bus.html":{},"classes/Merge.html":{},"interfaces/OpClassifier.html":{},"interfaces/OperationProperties.html":{},"classes/Pipe.html":{},"classes/Seed.html":{},"interfaces/TopologyDef.html":{}}}],["constraintname",{"_index":135,"title":{},"body":{"classes/AbstractOpFactory.html":{},"classes/BaseOp.html":{},"classes/Branch.html":{},"classes/Bus.html":{},"classes/Merge.html":{},"interfaces/OpClassifier.html":{},"interfaces/OperationProperties.html":{},"classes/Pipe.html":{},"classes/Seed.html":{},"interfaces/TopologyDef.html":{},"miscellaneous/typealiases.html":{}}}],["constraintname[c][\"input_drafts",{"_index":145,"title":{},"body":{"classes/AbstractOpFactory.html":{},"classes/BaseOp.html":{},"classes/Branch.html":{},"classes/Bus.html":{},"classes/Merge.html":{},"interfaces/OpClassifier.html":{},"interfaces/OperationProperties.html":{},"classes/Pipe.html":{},"classes/Seed.html":{},"interfaces/TopologyDef.html":{}}}],["constraintname[c][\"input_params",{"_index":146,"title":{},"body":{"classes/AbstractOpFactory.html":{},"classes/BaseOp.html":{},"classes/Branch.html":{},"classes/Bus.html":{},"classes/Merge.html":{},"interfaces/OpClassifier.html":{},"interfaces/OperationProperties.html":{},"classes/Pipe.html":{},"classes/Seed.html":{},"interfaces/TopologyDef.html":{}}}],["constraintoptions",{"_index":131,"title":{},"body":{"classes/AbstractOpFactory.html":{},"classes/BaseOp.html":{},"classes/Branch.html":{},"classes/Bus.html":{},"classes/Merge.html":{},"interfaces/OpClassifier.html":{},"interfaces/OperationProperties.html":{},"classes/Pipe.html":{},"classes/Seed.html":{},"interfaces/TopologyDef.html":{},"miscellaneous/typealiases.html":{}}}],["constructor",{"_index":227,"title":{},"body":{"classes/AbstractOpFactory.html":{},"classes/BaseOp.html":{},"classes/Branch.html":{},"classes/Bus.html":{},"classes/Cell.html":{},"interfaces/ChainIndex.html":{},"components/ConnectionComponent.html":{},"classes/DBListener.html":{},"classes/DBListenerArray.html":{},"classes/DBNode.html":{},"classes/DBNodeArray.html":{},"classes/DBTwoWay.html":{},"classes/DBTwoWayArray.html":{},"classes/DBWriteBuffer.html":{},"classes/DBWriter.html":{},"classes/DBWriterArray.html":{},"interfaces/DraftOperationClassification.html":{},"components/DraftdetailComponent.html":{},"components/ImageComponent.html":{},"interfaces/Ink.html":{},"injectables/InkService.html":{},"components/InletComponent.html":{},"injectables/LayersService.html":{},"interfaces/LoomConfig.html":{},"injectables/MappingsService.html":{},"classes/Merge.html":{},"components/MixerViewComponent.html":{},"components/NoteComponent.html":{},"classes/OnlineStatus.html":{},"interfaces/OpClassifier.html":{},"components/OpHelpModal.html":{},"classes/OpSequencer.html":{},"components/OpSequencerComponent.html":{},"interfaces/OperationProperties.html":{},"components/OpsComponent.html":{},"components/ParameterComponent.html":{},"interfaces/Pedal.html":{},"classes/PedalConfig.html":{},"classes/PedalStatus.html":{},"injectables/PedalsService.html":{},"classes/Pipe.html":{},"components/PlayerComponent.html":{},"injectables/PlayerService.html":{},"classes/Render.html":{},"classes/Seed.html":{},"injectables/SequencerService.html":{},"classes/Shape.html":{},"classes/Shape-1.html":{},"classes/Shuttle.html":{},"components/SnackbarComponent.html":{},"classes/System.html":{},"interfaces/TopologyDef.html":{},"injectables/ViewportService.html":{},"components/VirtualPedalsComponent.html":{},"components/WeavingStateComponent.html":{}}}],["constructor(@inject(mat_snack_bar_data",{"_index":4116,"title":{},"body":{"components/SnackbarComponent.html":{}}}],["constructor(data",{"_index":4106,"title":{},"body":{"components/SnackbarComponent.html":{}}}],["constructor(db",{"_index":3386,"title":{},"body":{"interfaces/Pedal.html":{},"classes/PedalStatus.html":{},"injectables/PedalsService.html":{}}}],["constructor(dialogref",{"_index":1963,"title":{},"body":{"components/DraftdetailComponent.html":{},"components/OpHelpModal.html":{}}}],["constructor(lengthnode",{"_index":1052,"title":{},"body":{"classes/DBListener.html":{},"classes/DBListenerArray.html":{},"classes/DBNode.html":{},"classes/DBNodeArray.html":{},"classes/DBTwoWay.html":{},"classes/DBTwoWayArray.html":{},"classes/DBWriteBuffer.html":{},"classes/DBWriter.html":{},"classes/DBWriterArray.html":{},"interfaces/NodeMethods.html":{},"interfaces/NodeParams.html":{},"classes/OnlineStatus.html":{}}}],["constructor(nameorargs",{"_index":321,"title":{},"body":{"classes/BaseOp.html":{}}}],["constructor(notes",{"_index":2866,"title":{},"body":{"components/NoteComponent.html":{}}}],["constructor(ops",{"_index":3213,"title":{},"body":{"components/OpsComponent.html":{}}}],["constructor(params",{"_index":949,"title":{},"body":{"classes/DBListener.html":{},"classes/DBListenerArray.html":{},"classes/DBNode.html":{},"classes/DBNodeArray.html":{},"classes/DBTwoWay.html":{},"classes/DBTwoWayArray.html":{},"classes/DBWriteBuffer.html":{},"classes/DBWriter.html":{},"classes/DBWriterArray.html":{},"interfaces/NodeMethods.html":{},"interfaces/NodeParams.html":{},"classes/OnlineStatus.html":{}}}],["constructor(pds",{"_index":2529,"title":{},"body":{"injectables/MappingsService.html":{},"components/VirtualPedalsComponent.html":{}}}],["constructor(pedalarray",{"_index":1722,"title":{},"body":{"interfaces/DraftOperationClassification.html":{},"interfaces/LoomConfig.html":{},"classes/PedalConfig.html":{},"injectables/PlayerService.html":{}}}],["constructor(pedals",{"_index":3020,"title":{},"body":{"classes/OpSequencer.html":{},"injectables/PlayerService.html":{},"injectables/SequencerService.html":{}}}],["constructor(pls",{"_index":3083,"title":{},"body":{"components/OpSequencerComponent.html":{},"components/PlayerComponent.html":{},"components/WeavingStateComponent.html":{}}}],["constructor(private",{"_index":1405,"title":{},"body":{"interfaces/DesignActions.html":{},"components/DraftdetailComponent.html":{},"components/NoteComponent.html":{},"components/OpHelpModal.html":{}}}],["constructor(public",{"_index":734,"title":{},"body":{"components/ConnectionComponent.html":{},"components/InletComponent.html":{},"components/MixerViewComponent.html":{},"components/OpsComponent.html":{},"components/ParameterComponent.html":{}}}],["constructor(setting",{"_index":380,"title":{},"body":{"classes/Cell.html":{}}}],["constructor(shape_canvas",{"_index":4008,"title":{},"body":{"classes/Shape-1.html":{}}}],["constructor(shuttledict",{"_index":4057,"title":{},"body":{"classes/Shuttle.html":{}}}],["constructor(systemdict",{"_index":4134,"title":{},"body":{"classes/System.html":{}}}],["constructor(tree",{"_index":676,"title":{},"body":{"components/ConnectionComponent.html":{},"components/InletComponent.html":{},"components/ParameterComponent.html":{}}}],["constructor(view_frames",{"_index":3771,"title":{},"body":{"classes/Render.html":{}}}],["constructor(view_frames:boolean",{"_index":3814,"title":{},"body":{"classes/Render.html":{}}}],["constructor(viewport",{"_index":2728,"title":{},"body":{"components/MixerViewComponent.html":{}}}],["constructorargkeysindex",{"_index":266,"title":{},"body":{"classes/AbstractOpFactory.html":{},"classes/BaseOp.html":{},"classes/Branch.html":{},"classes/Bus.html":{},"classes/Merge.html":{},"interfaces/OpClassifier.html":{},"interfaces/OperationProperties.html":{},"classes/Pipe.html":{},"classes/Seed.html":{},"interfaces/TopologyDef.html":{},"miscellaneous/typealiases.html":{}}}],["constructorargkeysindex[constraint[\"constraint\"]][topo[\"type",{"_index":268,"title":{},"body":{"classes/AbstractOpFactory.html":{},"classes/BaseOp.html":{},"classes/Branch.html":{},"classes/Bus.html":{},"classes/Merge.html":{},"interfaces/OpClassifier.html":{},"interfaces/OperationProperties.html":{},"classes/Pipe.html":{},"classes/Seed.html":{},"interfaces/TopologyDef.html":{}}}],["constructorarrayindex",{"_index":267,"title":{},"body":{"classes/AbstractOpFactory.html":{},"classes/BaseOp.html":{},"classes/Branch.html":{},"classes/Bus.html":{},"classes/Merge.html":{},"interfaces/OpClassifier.html":{},"interfaces/OperationProperties.html":{},"classes/Pipe.html":{},"classes/Seed.html":{},"interfaces/TopologyDef.html":{},"miscellaneous/typealiases.html":{}}}],["constructorarrayindex[constraint[\"constraint\"]][topo[\"type",{"_index":269,"title":{},"body":{"classes/AbstractOpFactory.html":{},"classes/BaseOp.html":{},"classes/Branch.html":{},"classes/Bus.html":{},"classes/Merge.html":{},"interfaces/OpClassifier.html":{},"interfaces/OperationProperties.html":{},"classes/Pipe.html":{},"classes/Seed.html":{},"interfaces/TopologyDef.html":{}}}],["container",{"_index":831,"title":{},"body":{"components/ConnectionComponent.html":{},"interfaces/DesignActions.html":{},"interfaces/DynamicOperation.html":{},"components/NoteComponent.html":{},"components/OpHelpModal.html":{},"interfaces/OpInput.html":{},"interfaces/OperationClassification.html":{},"components/PlayerComponent.html":{},"interfaces/TreeOperation.html":{},"components/VirtualPedalsComponent.html":{},"components/WeavingStateComponent.html":{}}}],["container').offsetparent",{"_index":2790,"title":{},"body":{"components/MixerViewComponent.html":{}}}],["container.offsetheight",{"_index":1489,"title":{},"body":{"interfaces/DesignActions.html":{}}}],["container.style.transform",{"_index":836,"title":{},"body":{"components/ConnectionComponent.html":{},"interfaces/DesignActions.html":{},"components/NoteComponent.html":{}}}],["container.style.transformorigin",{"_index":833,"title":{},"body":{"components/ConnectionComponent.html":{},"interfaces/DesignActions.html":{},"components/NoteComponent.html":{}}}],["container:active",{"_index":2939,"title":{},"body":{"components/NoteComponent.html":{}}}],["container:hover",{"_index":2938,"title":{},"body":{"components/NoteComponent.html":{}}}],["contains",{"_index":2142,"title":{},"body":{"interfaces/DynamicOperation.html":{},"interfaces/OpInput.html":{},"interfaces/OperationClassification.html":{},"interfaces/TreeOperation.html":{},"index.html":{}}}],["content",{"_index":2128,"title":{},"body":{"components/DraftdetailComponent.html":{},"components/InletComponent.html":{},"components/MixerViewComponent.html":{},"components/NoteComponent.html":{},"components/ParameterComponent.html":{},"components/VirtualPedalsComponent.html":{}}}],["content:flex",{"_index":2931,"title":{},"body":{"components/NoteComponent.html":{}}}],["content:space",{"_index":4122,"title":{},"body":{"components/SnackbarComponent.html":{}}}],["contents",{"_index":2941,"title":{},"body":{"components/NoteComponent.html":{}}}],["context",{"_index":1529,"title":{},"body":{"interfaces/DesignActions.html":{},"classes/Shape-1.html":{}}}],["context.drawimage(this.canvas",{"_index":1536,"title":{},"body":{"interfaces/DesignActions.html":{}}}],["context.fillrect(0,0,b.width,b.height",{"_index":1535,"title":{},"body":{"interfaces/DesignActions.html":{}}}],["context.fillstyle",{"_index":1533,"title":{},"body":{"interfaces/DesignActions.html":{}}}],["context.getimagedata(bounds.topleft.x",{"_index":4031,"title":{},"body":{"classes/Shape-1.html":{}}}],["control",{"_index":1714,"title":{},"body":{"interfaces/DraftOperationClassification.html":{},"interfaces/LoomConfig.html":{},"interfaces/LoomTypes.html":{},"components/ParameterComponent.html":{},"classes/PedalConfig.html":{},"injectables/PlayerService.html":{},"index.html":{}}}],["control.value",{"_index":3304,"title":{},"body":{"components/ParameterComponent.html":{}}}],["controls",{"_index":2998,"title":{},"body":{"components/OpHelpModal.html":{},"components/ParameterComponent.html":{}}}],["convert",{"_index":2191,"title":{},"body":{"interfaces/DynamicOperation.html":{},"interfaces/OpInput.html":{},"interfaces/OperationClassification.html":{},"components/OpsComponent.html":{},"interfaces/TreeOperation.html":{}}}],["converting",{"_index":4002,"title":{},"body":{"classes/Shape-1.html":{}}}],["converts",{"_index":4023,"title":{},"body":{"classes/Shape-1.html":{}}}],["convoluted",{"_index":276,"title":{},"body":{"classes/AbstractOpFactory.html":{},"classes/BaseOp.html":{},"classes/Branch.html":{},"classes/Bus.html":{},"classes/Merge.html":{},"interfaces/OpClassifier.html":{},"interfaces/OperationProperties.html":{},"classes/Pipe.html":{},"classes/Seed.html":{},"interfaces/TopologyDef.html":{}}}],["coordiantes",{"_index":905,"title":{},"body":{"interfaces/Crossing.html":{},"interfaces/Vertex.html":{},"interfaces/YarnPath.html":{}}}],["coordinate",{"_index":1510,"title":{},"body":{"interfaces/DesignActions.html":{}}}],["coordinates",{"_index":3746,"title":{},"body":{"interfaces/Point.html":{}}}],["coords",{"_index":1456,"title":{},"body":{"interfaces/DesignActions.html":{},"components/NoteComponent.html":{}}}],["cooresponding",{"_index":2353,"title":{},"body":{"interfaces/Ink.html":{},"injectables/InkService.html":{}}}],["copied",{"_index":4310,"title":{},"body":{"components/WeavingStateComponent.html":{}}}],["copies",{"_index":2333,"title":{},"body":{"interfaces/Ink.html":{},"injectables/InkService.html":{}}}],["copy",{"_index":1944,"title":{},"body":{"components/DraftdetailComponent.html":{}}}],["copymap",{"_index":2602,"title":{},"body":{"injectables/MappingsService.html":{}}}],["copymap(p",{"_index":2616,"title":{},"body":{"injectables/MappingsService.html":{}}}],["copymap(r.p_select_b",{"_index":2619,"title":{},"body":{"injectables/MappingsService.html":{}}}],["copystate",{"_index":534,"title":{},"body":{"interfaces/ChainOp.html":{},"interfaces/DraftOperationClassification.html":{},"interfaces/LoomConfig.html":{},"classes/OpSequencer.html":{},"interfaces/PairedOp.html":{},"classes/PedalConfig.html":{},"interfaces/PedalEvent.html":{},"interfaces/PlayerOp.html":{},"injectables/PlayerService.html":{},"miscellaneous/functions.html":{}}}],["copystate(init",{"_index":546,"title":{},"body":{"interfaces/ChainOp.html":{},"interfaces/DraftOperationClassification.html":{},"interfaces/LoomConfig.html":{},"classes/OpSequencer.html":{},"interfaces/PairedOp.html":{},"classes/PedalConfig.html":{},"interfaces/PedalEvent.html":{},"interfaces/PlayerOp.html":{},"injectables/PlayerService.html":{},"interfaces/PlayerState.html":{},"interfaces/PlayerState-1.html":{},"interfaces/WeavingLog.html":{},"interfaces/WeavingPick.html":{},"interfaces/WeavingPick-1.html":{},"miscellaneous/functions.html":{}}}],["copystate(state",{"_index":1927,"title":{},"body":{"interfaces/DraftOperationClassification.html":{},"interfaces/LoomConfig.html":{},"classes/PedalConfig.html":{},"injectables/PlayerService.html":{}}}],["core",{"_index":4380,"title":{},"body":{"dependencies.html":{},"index.html":{}}}],["core/core.module",{"_index":2689,"title":{},"body":{"modules/MixerModule.html":{},"modules/PlayerModule.html":{}}}],["core/model/cell",{"_index":1329,"title":{},"body":{"interfaces/DesignActions.html":{},"classes/Shape-1.html":{}}}],["core/model/datatypes",{"_index":52,"title":{},"body":{"classes/AbstractOpFactory.html":{},"classes/BaseOp.html":{},"classes/Branch.html":{},"classes/Bus.html":{},"interfaces/ChainOp.html":{},"components/ConnectionComponent.html":{},"interfaces/DesignActions.html":{},"interfaces/DraftOperationClassification.html":{},"components/DraftdetailComponent.html":{},"interfaces/DynamicOperation.html":{},"components/InletComponent.html":{},"interfaces/LoomConfig.html":{},"directives/MarqueeComponent.html":{},"classes/Merge.html":{},"components/MixerViewComponent.html":{},"components/NoteComponent.html":{},"interfaces/OpClassifier.html":{},"components/OpHelpModal.html":{},"interfaces/OpInput.html":{},"interfaces/OperationClassification.html":{},"interfaces/OperationProperties.html":{},"interfaces/PairedOp.html":{},"components/ParameterComponent.html":{},"classes/PedalConfig.html":{},"interfaces/PedalEvent.html":{},"classes/Pipe.html":{},"components/PlayerComponent.html":{},"interfaces/PlayerOp.html":{},"injectables/PlayerService.html":{},"interfaces/PlayerState.html":{},"interfaces/PlayerState-1.html":{},"classes/Seed.html":{},"classes/Selection.html":{},"directives/SelectionComponent.html":{},"classes/Shape-1.html":{},"components/SnackbarComponent.html":{},"interfaces/TopologyDef.html":{},"interfaces/TreeOperation.html":{},"injectables/ViewportService.html":{},"interfaces/WeavingLog.html":{},"interfaces/WeavingPick.html":{},"interfaces/WeavingPick-1.html":{},"components/WeavingStateComponent.html":{}}}],["core/model/datatypes.ts",{"_index":4560,"title":{},"body":{"index.html":{}}}],["core/model/draft",{"_index":3901,"title":{},"body":{"directives/SelectionComponent.html":{}}}],["core/model/drafts",{"_index":524,"title":{},"body":{"interfaces/ChainOp.html":{},"interfaces/DesignActions.html":{},"interfaces/DraftOperationClassification.html":{},"components/DraftdetailComponent.html":{},"components/InletComponent.html":{},"interfaces/LoomConfig.html":{},"directives/MarqueeComponent.html":{},"interfaces/PairedOp.html":{},"classes/PedalConfig.html":{},"interfaces/PedalEvent.html":{},"components/PlayerComponent.html":{},"interfaces/PlayerOp.html":{},"injectables/PlayerService.html":{},"interfaces/PlayerState.html":{},"interfaces/PlayerState-1.html":{},"interfaces/WeavingLog.html":{},"interfaces/WeavingPick.html":{},"interfaces/WeavingPick-1.html":{},"components/WeavingStateComponent.html":{}}}],["core/model/looms",{"_index":2009,"title":{},"body":{"components/DraftdetailComponent.html":{}}}],["core/model/util",{"_index":1318,"title":{},"body":{"interfaces/DesignActions.html":{},"components/NoteComponent.html":{}}}],["core/provider/designmodes.service",{"_index":2011,"title":{},"body":{"components/DraftdetailComponent.html":{}}}],["core/provider/file.service",{"_index":1322,"title":{},"body":{"interfaces/DesignActions.html":{}}}],["core/provider/materials.service",{"_index":1333,"title":{},"body":{"interfaces/DesignActions.html":{},"components/DraftdetailComponent.html":{},"components/WeavingStateComponent.html":{}}}],["core/provider/notes.service",{"_index":2892,"title":{},"body":{"components/NoteComponent.html":{}}}],["core/provider/systems.service",{"_index":2428,"title":{},"body":{"components/InletComponent.html":{}}}],["core/provider/workspace.service",{"_index":1331,"title":{},"body":{"interfaces/DesignActions.html":{},"components/DraftdetailComponent.html":{}}}],["coremodule",{"_index":2688,"title":{},"body":{"modules/MixerModule.html":{},"modules/PlayerModule.html":{}}}],["corner",{"_index":710,"title":{},"body":{"components/ConnectionComponent.html":{},"injectables/ViewportService.html":{},"index.html":{}}}],["corners",{"_index":3110,"title":{},"body":{"components/OpSequencerComponent.html":{},"components/PlayerComponent.html":{}}}],["correctly",{"_index":223,"title":{},"body":{"classes/AbstractOpFactory.html":{},"classes/BaseOp.html":{},"classes/Branch.html":{},"classes/Bus.html":{},"classes/Merge.html":{},"interfaces/OpClassifier.html":{},"interfaces/OperationProperties.html":{},"components/ParameterComponent.html":{},"classes/Pipe.html":{},"classes/Seed.html":{},"interfaces/TopologyDef.html":{}}}],["correspond",{"_index":2512,"title":{},"body":{"injectables/MappingsService.html":{}}}],["corresponding",{"_index":352,"title":{},"body":{"interfaces/Bounds.html":{},"interfaces/Ink.html":{},"injectables/InkService.html":{},"interfaces/Point.html":{}}}],["corresponds",{"_index":4572,"title":{},"body":{"index.html":{}}}],["count",{"_index":2500,"title":{},"body":{"injectables/LayersService.html":{}}}],["counter:number",{"_index":1385,"title":{},"body":{"interfaces/DesignActions.html":{}}}],["counter_limit",{"_index":1389,"title":{},"body":{"interfaces/DesignActions.html":{}}}],["create",{"_index":228,"title":{},"body":{"classes/AbstractOpFactory.html":{},"classes/BaseOp.html":{},"classes/Branch.html":{},"classes/Bus.html":{},"interfaces/DesignActions.html":{},"interfaces/DynamicOperation.html":{},"classes/Merge.html":{},"interfaces/OpClassifier.html":{},"interfaces/OpInput.html":{},"interfaces/OperationClassification.html":{},"interfaces/OperationProperties.html":{},"classes/Pipe.html":{},"classes/Seed.html":{},"interfaces/TopologyDef.html":{},"interfaces/TreeOperation.html":{}}}],["created",{"_index":1109,"title":{},"body":{"classes/DBListener.html":{},"classes/DBListenerArray.html":{},"classes/DBNode.html":{},"classes/DBNodeArray.html":{},"classes/DBTwoWay.html":{},"classes/DBTwoWayArray.html":{},"classes/DBWriteBuffer.html":{},"classes/DBWriter.html":{},"classes/DBWriterArray.html":{},"interfaces/DraftMap.html":{},"interfaces/IOTuple.html":{},"interfaces/Interlacement.html":{},"interfaces/InterlacementVal.html":{},"injectables/MappingsService.html":{},"interfaces/NodeMethods.html":{},"interfaces/NodeParams.html":{},"classes/OnlineStatus.html":{},"interfaces/Pedal.html":{},"classes/PedalStatus.html":{},"injectables/PedalsService.html":{},"interfaces/TreeNode.html":{}}}],["createdraft",{"_index":1334,"title":{},"body":{"interfaces/DesignActions.html":{}}}],["createlayer",{"_index":2502,"title":{},"body":{"injectables/LayersService.html":{}}}],["creates",{"_index":3171,"title":{},"body":{"interfaces/OperationParam.html":{},"classes/Params.html":{}}}],["creating",{"_index":1098,"title":{},"body":{"classes/DBListener.html":{},"classes/DBListenerArray.html":{},"classes/DBNode.html":{},"classes/DBNodeArray.html":{},"classes/DBTwoWay.html":{},"classes/DBTwoWayArray.html":{},"classes/DBWriteBuffer.html":{},"classes/DBWriter.html":{},"classes/DBWriterArray.html":{},"interfaces/NodeMethods.html":{},"interfaces/NodeParams.html":{},"classes/OnlineStatus.html":{},"index.html":{}}}],["cross",{"_index":886,"title":{},"body":{"interfaces/Crossing.html":{},"interfaces/Vertex.html":{},"interfaces/YarnPath.html":{}}}],["crossing",{"_index":883,"title":{"interfaces/Crossing.html":{}},"body":{"interfaces/Crossing.html":{},"interfaces/Vertex.html":{},"interfaces/YarnPath.html":{}}}],["crossings",{"_index":898,"title":{},"body":{"interfaces/Crossing.html":{},"interfaces/Vertex.html":{},"interfaces/YarnPath.html":{}}}],["crosslink",{"_index":4576,"title":{},"body":{"index.html":{}}}],["crosstype",{"_index":900,"title":{},"body":{"interfaces/Crossing.html":{},"interfaces/Vertex.html":{},"interfaces/YarnPath.html":{},"miscellaneous/typealiases.html":{}}}],["curr_ops",{"_index":1756,"title":{},"body":{"interfaces/DraftOperationClassification.html":{},"interfaces/LoomConfig.html":{},"injectables/MappingsService.html":{},"classes/PedalConfig.html":{},"injectables/PlayerService.html":{}}}],["current",{"_index":462,"title":{},"body":{"interfaces/ChainIndex.html":{},"interfaces/DraftMap.html":{},"interfaces/IOTuple.html":{},"interfaces/Ink.html":{},"injectables/InkService.html":{},"interfaces/Interlacement.html":{},"interfaces/InterlacementVal.html":{},"components/MixerViewComponent.html":{},"classes/OpSequencer.html":{},"components/ParameterComponent.html":{},"injectables/SequencerService.html":{},"classes/Shape-1.html":{},"interfaces/TreeNode.html":{},"injectables/ViewportService.html":{},"index.html":{}}}],["current_scale",{"_index":1691,"title":{},"body":{"interfaces/DraftNodeProxy.html":{},"interfaces/FileObj.html":{},"interfaces/FileSaver.html":{},"interfaces/Fileloader.html":{},"interfaces/LoadResponse.html":{},"interfaces/NodeComponentProxy.html":{},"interfaces/OpComponentProxy.html":{},"interfaces/SaveObj.html":{},"interfaces/StatusMessage.html":{},"interfaces/TreeNodeProxy.html":{}}}],["current_view",{"_index":3753,"title":{},"body":{"classes/Render.html":{}}}],["currently",{"_index":119,"title":{},"body":{"classes/AbstractOpFactory.html":{},"classes/BaseOp.html":{},"classes/Branch.html":{},"classes/Bus.html":{},"interfaces/DynamicOperation.html":{},"classes/Merge.html":{},"interfaces/OpClassifier.html":{},"interfaces/OpInput.html":{},"interfaces/OperationClassification.html":{},"interfaces/OperationParam.html":{},"interfaces/OperationProperties.html":{},"classes/Params.html":{},"classes/Pipe.html":{},"interfaces/PlayerState.html":{},"interfaces/PlayerState-1.html":{},"classes/Seed.html":{},"interfaces/TopologyDef.html":{},"interfaces/TreeOperation.html":{},"interfaces/WeavingLog.html":{},"interfaces/WeavingPick.html":{},"interfaces/WeavingPick-1.html":{},"index.html":{},"miscellaneous/typealiases.html":{}}}],["currentrow",{"_index":1933,"title":{},"body":{"interfaces/DraftOperationClassification.html":{},"interfaces/LoomConfig.html":{},"classes/PedalConfig.html":{},"injectables/PlayerService.html":{}}}],["curves",{"_index":4658,"title":{},"body":{"miscellaneous/typealiases.html":{}}}],["custom",{"_index":1862,"title":{},"body":{"interfaces/DraftOperationClassification.html":{},"components/DraftdetailComponent.html":{},"interfaces/LoomConfig.html":{},"classes/PedalConfig.html":{},"injectables/PlayerService.html":{},"index.html":{}}}],["cx",{"_index":686,"title":{},"body":{"components/ConnectionComponent.html":{},"interfaces/DesignActions.html":{},"components/NoteComponent.html":{},"components/WeavingStateComponent.html":{}}}],["cx.beginpath",{"_index":807,"title":{},"body":{"components/ConnectionComponent.html":{}}}],["cx.fillstyle",{"_index":2921,"title":{},"body":{"components/NoteComponent.html":{}}}],["cx.filltext(this.note.text,this.bounds.topleft.x",{"_index":2926,"title":{},"body":{"components/NoteComponent.html":{}}}],["cx.font",{"_index":2923,"title":{},"body":{"components/NoteComponent.html":{}}}],["cx.lineto(this.bounds.width",{"_index":819,"title":{},"body":{"components/ConnectionComponent.html":{}}}],["cx.linewidth",{"_index":812,"title":{},"body":{"components/ConnectionComponent.html":{}}}],["cx.moveto(this.bounds.topleft.x",{"_index":817,"title":{},"body":{"components/ConnectionComponent.html":{}}}],["cx.setlinedash([scale",{"_index":810,"title":{},"body":{"components/ConnectionComponent.html":{}}}],["cx.stroke",{"_index":821,"title":{},"body":{"components/ConnectionComponent.html":{}}}],["cx.strokestyle",{"_index":808,"title":{},"body":{"components/ConnectionComponent.html":{}}}],["cxn",{"_index":2277,"title":{},"body":{"interfaces/IOTuple.html":{},"interfaces/TreeNode.html":{}}}],["d",{"_index":624,"title":{},"body":{"interfaces/ChainOp.html":{},"interfaces/DraftOperationClassification.html":{},"interfaces/LoomConfig.html":{},"interfaces/PairedOp.html":{},"classes/PedalConfig.html":{},"interfaces/PedalEvent.html":{},"interfaces/PlayerOp.html":{},"injectables/PlayerService.html":{},"miscellaneous/functions.html":{}}}],["d.gen_name",{"_index":1910,"title":{},"body":{"interfaces/DraftOperationClassification.html":{},"interfaces/LoomConfig.html":{},"classes/PedalConfig.html":{},"injectables/PlayerService.html":{}}}],["d.id",{"_index":1897,"title":{},"body":{"interfaces/DraftOperationClassification.html":{},"interfaces/LoomConfig.html":{},"classes/PedalConfig.html":{},"injectables/PlayerService.html":{}}}],["data",{"_index":1044,"title":{},"body":{"classes/DBListener.html":{},"classes/DBListenerArray.html":{},"classes/DBNode.html":{},"classes/DBNodeArray.html":{},"classes/DBTwoWay.html":{},"classes/DBTwoWayArray.html":{},"classes/DBWriteBuffer.html":{},"classes/DBWriter.html":{},"classes/DBWriterArray.html":{},"interfaces/DesignActions.html":{},"interfaces/DraftNodeProxy.html":{},"interfaces/DraftOperationClassification.html":{},"components/DraftdetailComponent.html":{},"interfaces/FileObj.html":{},"interfaces/FileSaver.html":{},"interfaces/Fileloader.html":{},"interfaces/LoadResponse.html":{},"interfaces/LoomConfig.html":{},"components/MixerViewComponent.html":{},"interfaces/NodeComponentProxy.html":{},"interfaces/NodeMethods.html":{},"interfaces/NodeParams.html":{},"classes/OnlineStatus.html":{},"interfaces/OpComponentProxy.html":{},"components/OpHelpModal.html":{},"interfaces/OperationParam.html":{},"components/OpsComponent.html":{},"components/ParameterComponent.html":{},"classes/Params.html":{},"interfaces/Pedal.html":{},"classes/PedalConfig.html":{},"classes/PedalStatus.html":{},"injectables/PedalsService.html":{},"injectables/PlayerService.html":{},"interfaces/PlayerState.html":{},"interfaces/PlayerState-1.html":{},"interfaces/SaveObj.html":{},"classes/Shape-1.html":{},"components/SnackbarComponent.html":{},"interfaces/StatusMessage.html":{},"interfaces/TreeNodeProxy.html":{},"interfaces/WeavingLog.html":{},"interfaces/WeavingPick.html":{},"interfaces/WeavingPick-1.html":{},"components/WeavingStateComponent.html":{},"miscellaneous/functions.html":{},"index.html":{},"miscellaneous/typealiases.html":{}}}],["data.bounds",{"_index":4117,"title":{},"body":{"components/SnackbarComponent.html":{}}}],["data.default_cell_size",{"_index":2786,"title":{},"body":{"components/MixerViewComponent.html":{}}}],["data.id",{"_index":2023,"title":{},"body":{"components/DraftdetailComponent.html":{}}}],["data.ink",{"_index":2025,"title":{},"body":{"components/DraftdetailComponent.html":{}}}],["data.length",{"_index":1940,"title":{},"body":{"interfaces/DraftOperationClassification.html":{},"interfaces/LoomConfig.html":{},"classes/PedalConfig.html":{},"injectables/PlayerService.html":{}}}],["data.measurescrolloffset(\"left",{"_index":2039,"title":{},"body":{"components/DraftdetailComponent.html":{}}}],["data.measurescrolloffset(\"top",{"_index":2037,"title":{},"body":{"components/DraftdetailComponent.html":{}}}],["data.message",{"_index":4119,"title":{},"body":{"components/SnackbarComponent.html":{}}}],["data.op.displayname",{"_index":2984,"title":{},"body":{"components/OpHelpModal.html":{}}}],["data.op.dx",{"_index":2985,"title":{},"body":{"components/OpHelpModal.html":{}}}],["data.op.max_inputs",{"_index":2986,"title":{},"body":{"components/OpHelpModal.html":{}}}],["data.op.name",{"_index":2974,"title":{},"body":{"components/OpHelpModal.html":{}}}],["data.op.perform",{"_index":3000,"title":{},"body":{"components/OpHelpModal.html":{}}}],["data.scale",{"_index":4120,"title":{},"body":{"components/SnackbarComponent.html":{}}}],["data.zoom",{"_index":2774,"title":{},"body":{"components/MixerViewComponent.html":{}}}],["data:application/json;charset=utf",{"_index":1551,"title":{},"body":{"interfaces/DesignActions.html":{}}}],["database",{"_index":978,"title":{},"body":{"classes/DBListener.html":{},"classes/DBListenerArray.html":{},"classes/DBNode.html":{},"classes/DBNodeArray.html":{},"classes/DBTwoWay.html":{},"classes/DBTwoWayArray.html":{},"classes/DBWriteBuffer.html":{},"classes/DBWriter.html":{},"classes/DBWriterArray.html":{},"interfaces/NodeMethods.html":{},"interfaces/NodeParams.html":{},"classes/OnlineStatus.html":{},"interfaces/Pedal.html":{},"classes/PedalStatus.html":{},"injectables/PedalsService.html":{}}}],["databasereference",{"_index":954,"title":{},"body":{"classes/DBListener.html":{},"classes/DBListenerArray.html":{},"classes/DBNode.html":{},"classes/DBNodeArray.html":{},"classes/DBTwoWay.html":{},"classes/DBTwoWayArray.html":{},"classes/DBWriteBuffer.html":{},"classes/DBWriter.html":{},"classes/DBWriterArray.html":{},"interfaces/NodeMethods.html":{},"interfaces/NodeParams.html":{},"classes/OnlineStatus.html":{}}}],["datatypes",{"_index":3807,"title":{},"body":{"classes/Render.html":{},"index.html":{}}}],["date",{"_index":3361,"title":{},"body":{"interfaces/Pedal.html":{},"classes/PedalStatus.html":{},"injectables/PedalsService.html":{}}}],["db",{"_index":964,"title":{},"body":{"classes/DBListener.html":{},"classes/DBListenerArray.html":{},"classes/DBNode.html":{},"classes/DBNodeArray.html":{},"classes/DBTwoWay.html":{},"classes/DBTwoWayArray.html":{},"classes/DBWriteBuffer.html":{},"classes/DBWriter.html":{},"classes/DBWriterArray.html":{},"interfaces/NodeMethods.html":{},"interfaces/NodeParams.html":{},"classes/OnlineStatus.html":{},"interfaces/Pedal.html":{},"classes/PedalStatus.html":{},"injectables/PedalsService.html":{}}}],["dblistener",{"_index":936,"title":{"classes/DBListener.html":{}},"body":{"classes/DBListener.html":{},"classes/DBListenerArray.html":{},"classes/DBNode.html":{},"classes/DBNodeArray.html":{},"classes/DBTwoWay.html":{},"classes/DBTwoWayArray.html":{},"classes/DBWriteBuffer.html":{},"classes/DBWriter.html":{},"classes/DBWriterArray.html":{},"interfaces/NodeMethods.html":{},"interfaces/NodeParams.html":{},"classes/OnlineStatus.html":{},"interfaces/Pedal.html":{},"classes/PedalStatus.html":{},"injectables/PedalsService.html":{}}}],["dblistener(params(listeners[l",{"_index":3401,"title":{},"body":{"interfaces/Pedal.html":{},"classes/PedalStatus.html":{},"injectables/PedalsService.html":{}}}],["dblistener(this.db",{"_index":3398,"title":{},"body":{"interfaces/Pedal.html":{},"classes/PedalStatus.html":{},"injectables/PedalsService.html":{}}}],["dblistener:141",{"_index":2953,"title":{},"body":{"classes/OnlineStatus.html":{}}}],["dblistenerarray",{"_index":1072,"title":{"classes/DBListenerArray.html":{}},"body":{"classes/DBListener.html":{},"classes/DBListenerArray.html":{},"classes/DBNode.html":{},"classes/DBNodeArray.html":{},"classes/DBTwoWay.html":{},"classes/DBTwoWayArray.html":{},"classes/DBWriteBuffer.html":{},"classes/DBWriter.html":{},"classes/DBWriterArray.html":{},"interfaces/NodeMethods.html":{},"interfaces/NodeParams.html":{},"classes/OnlineStatus.html":{},"interfaces/Pedal.html":{},"classes/PedalStatus.html":{},"injectables/PedalsService.html":{}}}],["dblistenerarray(this.num_pedals",{"_index":3413,"title":{},"body":{"interfaces/Pedal.html":{},"classes/PedalStatus.html":{},"injectables/PedalsService.html":{}}}],["dbnode",{"_index":940,"title":{"classes/DBNode.html":{}},"body":{"classes/DBListener.html":{},"classes/DBListenerArray.html":{},"classes/DBNode.html":{},"classes/DBNodeArray.html":{},"classes/DBTwoWay.html":{},"classes/DBTwoWayArray.html":{},"classes/DBWriteBuffer.html":{},"classes/DBWriter.html":{},"classes/DBWriterArray.html":{},"interfaces/NodeMethods.html":{},"interfaces/NodeParams.html":{},"classes/OnlineStatus.html":{},"interfaces/Pedal.html":{},"classes/PedalStatus.html":{},"injectables/PedalsService.html":{}}}],["dbnode:121",{"_index":958,"title":{},"body":{"classes/DBListener.html":{},"classes/OnlineStatus.html":{}}}],["dbnode:122",{"_index":959,"title":{},"body":{"classes/DBListener.html":{},"classes/OnlineStatus.html":{}}}],["dbnode:123",{"_index":956,"title":{},"body":{"classes/DBListener.html":{}}}],["dbnode:124",{"_index":955,"title":{},"body":{"classes/DBListener.html":{},"classes/OnlineStatus.html":{}}}],["dbnode:125",{"_index":957,"title":{},"body":{"classes/DBListener.html":{}}}],["dbnode:126",{"_index":953,"title":{},"body":{"classes/DBListener.html":{}}}],["dbnode:132",{"_index":967,"title":{},"body":{"classes/DBListener.html":{},"classes/OnlineStatus.html":{}}}],["dbnode:149",{"_index":968,"title":{},"body":{"classes/DBListener.html":{},"classes/OnlineStatus.html":{}}}],["dbnode:166",{"_index":1268,"title":{},"body":{"classes/DBWriter.html":{}}}],["dbnode:167",{"_index":1258,"title":{},"body":{"classes/DBWriteBuffer.html":{},"classes/DBWriter.html":{}}}],["dbnode:168",{"_index":1265,"title":{},"body":{"classes/DBWriter.html":{}}}],["dbnode:170",{"_index":1267,"title":{},"body":{"classes/DBWriter.html":{}}}],["dbnode:171",{"_index":1264,"title":{},"body":{"classes/DBWriter.html":{}}}],["dbnode:177",{"_index":1261,"title":{},"body":{"classes/DBWriteBuffer.html":{},"classes/DBWriter.html":{}}}],["dbnode:188",{"_index":1262,"title":{},"body":{"classes/DBWriteBuffer.html":{},"classes/DBWriter.html":{}}}],["dbnode:197",{"_index":1257,"title":{},"body":{"classes/DBWriteBuffer.html":{}}}],["dbnode:198",{"_index":1254,"title":{},"body":{"classes/DBWriteBuffer.html":{}}}],["dbnode:200",{"_index":1256,"title":{},"body":{"classes/DBWriteBuffer.html":{}}}],["dbnode:201",{"_index":1253,"title":{},"body":{"classes/DBWriteBuffer.html":{}}}],["dbnode:220",{"_index":1229,"title":{},"body":{"classes/DBTwoWay.html":{}}}],["dbnode:221",{"_index":1230,"title":{},"body":{"classes/DBTwoWay.html":{}}}],["dbnode:222",{"_index":1227,"title":{},"body":{"classes/DBTwoWay.html":{}}}],["dbnode:223",{"_index":1226,"title":{},"body":{"classes/DBTwoWay.html":{}}}],["dbnode:224",{"_index":1228,"title":{},"body":{"classes/DBTwoWay.html":{}}}],["dbnode:225",{"_index":1225,"title":{},"body":{"classes/DBTwoWay.html":{}}}],["dbnode:231",{"_index":1231,"title":{},"body":{"classes/DBTwoWay.html":{}}}],["dbnode:248",{"_index":1232,"title":{},"body":{"classes/DBTwoWay.html":{}}}],["dbnode:36",{"_index":1259,"title":{},"body":{"classes/DBWriteBuffer.html":{},"classes/DBWriter.html":{}}}],["dbnode:44",{"_index":960,"title":{},"body":{"classes/DBListener.html":{},"classes/DBTwoWay.html":{},"classes/DBWriteBuffer.html":{},"classes/DBWriter.html":{},"classes/OnlineStatus.html":{}}}],["dbnode:648",{"_index":2949,"title":{},"body":{"classes/OnlineStatus.html":{}}}],["dbnode:650",{"_index":2951,"title":{},"body":{"classes/OnlineStatus.html":{}}}],["dbnode:651",{"_index":2948,"title":{},"body":{"classes/OnlineStatus.html":{}}}],["dbnodearray",{"_index":1048,"title":{"classes/DBNodeArray.html":{}},"body":{"classes/DBListener.html":{},"classes/DBListenerArray.html":{},"classes/DBNode.html":{},"classes/DBNodeArray.html":{},"classes/DBTwoWay.html":{},"classes/DBTwoWayArray.html":{},"classes/DBWriteBuffer.html":{},"classes/DBWriter.html":{},"classes/DBWriterArray.html":{},"interfaces/NodeMethods.html":{},"interfaces/NodeParams.html":{},"classes/OnlineStatus.html":{}}}],["dbnodearray:287",{"_index":1251,"title":{},"body":{"classes/DBTwoWayArray.html":{},"classes/DBWriterArray.html":{}}}],["dbnodearray:294",{"_index":1190,"title":{},"body":{"classes/DBListenerArray.html":{},"classes/DBTwoWayArray.html":{},"classes/DBWriterArray.html":{}}}],["dbnodearray:298",{"_index":1189,"title":{},"body":{"classes/DBListenerArray.html":{},"classes/DBTwoWayArray.html":{},"classes/DBWriterArray.html":{}}}],["dbnodearray:313",{"_index":1180,"title":{},"body":{"classes/DBListenerArray.html":{}}}],["dbnodearray:314",{"_index":1182,"title":{},"body":{"classes/DBListenerArray.html":{}}}],["dbnodearray:315",{"_index":1181,"title":{},"body":{"classes/DBListenerArray.html":{}}}],["dbnodearray:377",{"_index":1187,"title":{},"body":{"classes/DBListenerArray.html":{}}}],["dbnodearray:458",{"_index":1273,"title":{},"body":{"classes/DBWriterArray.html":{}}}],["dbnodearray:459",{"_index":1272,"title":{},"body":{"classes/DBWriterArray.html":{}}}],["dbnodearray:460",{"_index":1274,"title":{},"body":{"classes/DBWriterArray.html":{}}}],["dbnodearray:510",{"_index":1240,"title":{},"body":{"classes/DBTwoWayArray.html":{}}}],["dbnodearray:511",{"_index":1239,"title":{},"body":{"classes/DBTwoWayArray.html":{}}}],["dbnodearray:512",{"_index":1241,"title":{},"body":{"classes/DBTwoWayArray.html":{}}}],["dbnodes",{"_index":1142,"title":{},"body":{"classes/DBListener.html":{},"classes/DBListenerArray.html":{},"classes/DBNode.html":{},"classes/DBNodeArray.html":{},"classes/DBTwoWay.html":{},"classes/DBTwoWayArray.html":{},"classes/DBWriteBuffer.html":{},"classes/DBWriter.html":{},"classes/DBWriterArray.html":{},"interfaces/NodeMethods.html":{},"interfaces/NodeParams.html":{},"classes/OnlineStatus.html":{},"interfaces/Pedal.html":{},"classes/PedalStatus.html":{},"injectables/PedalsService.html":{}}}],["dbtwoway",{"_index":1047,"title":{"classes/DBTwoWay.html":{}},"body":{"classes/DBListener.html":{},"classes/DBListenerArray.html":{},"classes/DBNode.html":{},"classes/DBNodeArray.html":{},"classes/DBTwoWay.html":{},"classes/DBTwoWayArray.html":{},"classes/DBWriteBuffer.html":{},"classes/DBWriter.html":{},"classes/DBWriterArray.html":{},"interfaces/NodeMethods.html":{},"interfaces/NodeParams.html":{},"classes/OnlineStatus.html":{},"interfaces/Pedal.html":{},"classes/PedalStatus.html":{},"injectables/PedalsService.html":{}}}],["dbtwoway(params('num",{"_index":3416,"title":{},"body":{"interfaces/Pedal.html":{},"classes/PedalStatus.html":{},"injectables/PedalsService.html":{}}}],["dbtwoway(params('v",{"_index":3418,"title":{},"body":{"interfaces/Pedal.html":{},"classes/PedalStatus.html":{},"injectables/PedalsService.html":{}}}],["dbtwowayarray",{"_index":1149,"title":{"classes/DBTwoWayArray.html":{}},"body":{"classes/DBListener.html":{},"classes/DBListenerArray.html":{},"classes/DBNode.html":{},"classes/DBNodeArray.html":{},"classes/DBTwoWay.html":{},"classes/DBTwoWayArray.html":{},"classes/DBWriteBuffer.html":{},"classes/DBWriter.html":{},"classes/DBWriterArray.html":{},"interfaces/NodeMethods.html":{},"interfaces/NodeParams.html":{},"classes/OnlineStatus.html":{},"interfaces/Pedal.html":{},"classes/PedalStatus.html":{},"injectables/PedalsService.html":{}}}],["dbtwowayarray(this.num_v_pedals",{"_index":3420,"title":{},"body":{"interfaces/Pedal.html":{},"classes/PedalStatus.html":{},"injectables/PedalsService.html":{}}}],["dbwritebuffer",{"_index":1041,"title":{"classes/DBWriteBuffer.html":{}},"body":{"classes/DBListener.html":{},"classes/DBListenerArray.html":{},"classes/DBNode.html":{},"classes/DBNodeArray.html":{},"classes/DBTwoWay.html":{},"classes/DBTwoWayArray.html":{},"classes/DBWriteBuffer.html":{},"classes/DBWriter.html":{},"classes/DBWriterArray.html":{},"interfaces/NodeMethods.html":{},"interfaces/NodeParams.html":{},"classes/OnlineStatus.html":{}}}],["dbwriter",{"_index":1030,"title":{"classes/DBWriter.html":{}},"body":{"classes/DBListener.html":{},"classes/DBListenerArray.html":{},"classes/DBNode.html":{},"classes/DBNodeArray.html":{},"classes/DBTwoWay.html":{},"classes/DBTwoWayArray.html":{},"classes/DBWriteBuffer.html":{},"classes/DBWriter.html":{},"classes/DBWriterArray.html":{},"interfaces/NodeMethods.html":{},"interfaces/NodeParams.html":{},"classes/OnlineStatus.html":{},"interfaces/Pedal.html":{},"classes/PedalStatus.html":{},"injectables/PedalsService.html":{}}}],["dbwriter({...params(writers[w",{"_index":3406,"title":{},"body":{"interfaces/Pedal.html":{},"classes/PedalStatus.html":{},"injectables/PedalsService.html":{}}}],["dbwriter:199",{"_index":1255,"title":{},"body":{"classes/DBWriteBuffer.html":{}}}],["dbwriter:207",{"_index":1260,"title":{},"body":{"classes/DBWriteBuffer.html":{}}}],["dbwriterarray",{"_index":1270,"title":{"classes/DBWriterArray.html":{}},"body":{"classes/DBWriterArray.html":{}}}],["de",{"_index":1634,"title":{},"body":{"interfaces/DraftMap.html":{},"interfaces/Interlacement.html":{},"interfaces/InterlacementVal.html":{}}}],["declarations",{"_index":2685,"title":{},"body":{"modules/MixerModule.html":{},"modules/PlayerModule.html":{}}}],["decorators",{"_index":2003,"title":{},"body":{"components/DraftdetailComponent.html":{},"components/MixerViewComponent.html":{},"components/OpHelpModal.html":{},"components/OpsComponent.html":{},"components/PlayerComponent.html":{},"components/SnackbarComponent.html":{},"components/VirtualPedalsComponent.html":{}}}],["default",{"_index":154,"title":{},"body":{"classes/AbstractOpFactory.html":{},"classes/BaseOp.html":{},"classes/Branch.html":{},"classes/Bus.html":{},"components/ConnectionComponent.html":{},"classes/DBTwoWayArray.html":{},"components/DraftdetailComponent.html":{},"interfaces/DynamicOperation.html":{},"injectables/MappingsService.html":{},"directives/MarqueeComponent.html":{},"classes/Merge.html":{},"components/NoteComponent.html":{},"interfaces/OpClassifier.html":{},"components/OpHelpModal.html":{},"interfaces/OpInput.html":{},"classes/OpSequencer.html":{},"interfaces/OperationClassification.html":{},"interfaces/OperationParam.html":{},"interfaces/OperationProperties.html":{},"components/OpsComponent.html":{},"classes/Params.html":{},"interfaces/Pedal.html":{},"classes/PedalStatus.html":{},"injectables/PedalsService.html":{},"classes/Pipe.html":{},"components/PlayerComponent.html":{},"injectables/PlayerService.html":{},"classes/Seed.html":{},"directives/SelectionComponent.html":{},"injectables/SequencerService.html":{},"interfaces/TopologyDef.html":{},"interfaces/TreeOperation.html":{},"components/VirtualPedalsComponent.html":{},"components/WeavingStateComponent.html":{},"miscellaneous/functions.html":{}}}],["default_cell",{"_index":1341,"title":{},"body":{"interfaces/DesignActions.html":{},"components/NoteComponent.html":{},"components/PlayerComponent.html":{},"components/WeavingStateComponent.html":{}}}],["default_cell_size",{"_index":674,"title":{},"body":{"components/ConnectionComponent.html":{}}}],["default_params",{"_index":210,"title":{},"body":{"classes/AbstractOpFactory.html":{},"classes/BaseOp.html":{},"classes/Branch.html":{},"classes/Bus.html":{},"classes/Merge.html":{},"interfaces/OpClassifier.html":{},"interfaces/OperationProperties.html":{},"classes/Pipe.html":{},"classes/Seed.html":{},"interfaces/TopologyDef.html":{}}}],["defaults",{"_index":3387,"title":{},"body":{"interfaces/Pedal.html":{},"classes/PedalStatus.html":{},"injectables/PedalsService.html":{},"classes/Shuttle.html":{},"classes/System.html":{}}}],["defaults[w",{"_index":3407,"title":{},"body":{"interfaces/Pedal.html":{},"classes/PedalStatus.html":{},"injectables/PedalsService.html":{}}}],["defined",{"_index":16,"title":{},"body":{"classes/AbstractOpFactory.html":{},"classes/BaseOp.html":{},"classes/Branch.html":{},"classes/Bus.html":{},"classes/Cell.html":{},"components/ConnectionComponent.html":{},"classes/DBListener.html":{},"classes/DBListenerArray.html":{},"classes/DBNode.html":{},"classes/DBNodeArray.html":{},"classes/DBTwoWay.html":{},"classes/DBTwoWayArray.html":{},"classes/DBWriteBuffer.html":{},"classes/DBWriter.html":{},"classes/DBWriterArray.html":{},"interfaces/DraftMap.html":{},"interfaces/DraftNodeProxy.html":{},"components/DraftdetailComponent.html":{},"interfaces/FileObj.html":{},"interfaces/FileSaver.html":{},"interfaces/Fileloader.html":{},"components/ImageComponent.html":{},"injectables/InkService.html":{},"components/InletComponent.html":{},"interfaces/Interlacement.html":{},"interfaces/InterlacementVal.html":{},"injectables/LayersService.html":{},"interfaces/LoadResponse.html":{},"injectables/MappingsService.html":{},"directives/MarqueeComponent.html":{},"classes/Merge.html":{},"components/MixerViewComponent.html":{},"interfaces/NodeComponentProxy.html":{},"interfaces/NodeMethods.html":{},"components/NoteComponent.html":{},"classes/OnlineStatus.html":{},"interfaces/OpClassifier.html":{},"interfaces/OpComponentProxy.html":{},"components/OpHelpModal.html":{},"classes/OpSequencer.html":{},"components/OpSequencerComponent.html":{},"interfaces/OperationProperties.html":{},"components/OpsComponent.html":{},"components/ParameterComponent.html":{},"classes/Params.html":{},"classes/PedalConfig.html":{},"classes/PedalStatus.html":{},"injectables/PedalsService.html":{},"classes/Pipe.html":{},"components/PlayerComponent.html":{},"injectables/PlayerService.html":{},"classes/Render.html":{},"interfaces/SaveObj.html":{},"classes/Seed.html":{},"classes/Selection.html":{},"directives/SelectionComponent.html":{},"injectables/SequencerService.html":{},"classes/Shape.html":{},"classes/Shape-1.html":{},"classes/Shuttle.html":{},"components/SnackbarComponent.html":{},"interfaces/StatusMessage.html":{},"classes/System.html":{},"interfaces/TopologyDef.html":{},"interfaces/TreeNodeProxy.html":{},"injectables/ViewportService.html":{},"components/VirtualPedalsComponent.html":{},"components/WeavingStateComponent.html":{},"miscellaneous/typealiases.html":{}}}],["definition",{"_index":368,"title":{},"body":{"classes/Cell.html":{},"interfaces/Pedal.html":{},"classes/PedalStatus.html":{},"injectables/PedalsService.html":{},"classes/Render.html":{},"classes/Selection.html":{},"classes/Shape.html":{},"classes/Shuttle.html":{},"classes/System.html":{}}}],["defs",{"_index":1695,"title":{},"body":{"interfaces/DraftOperationClassification.html":{},"interfaces/LoomConfig.html":{},"classes/PedalConfig.html":{},"injectables/PlayerService.html":{}}}],["defs.tabby.perform([1",{"_index":1809,"title":{},"body":{"interfaces/DraftOperationClassification.html":{},"interfaces/LoomConfig.html":{},"classes/PedalConfig.html":{},"injectables/PlayerService.html":{}}}],["defs.tile.name",{"_index":1854,"title":{},"body":{"interfaces/DraftOperationClassification.html":{},"interfaces/LoomConfig.html":{},"classes/PedalConfig.html":{},"injectables/PlayerService.html":{}}}],["defs.tile.perform([init.draft",{"_index":1855,"title":{},"body":{"interfaces/DraftOperationClassification.html":{},"interfaces/LoomConfig.html":{},"classes/PedalConfig.html":{},"injectables/PlayerService.html":{}}}],["delete",{"_index":1789,"title":{},"body":{"interfaces/DraftOperationClassification.html":{},"interfaces/LoomConfig.html":{},"injectables/MappingsService.html":{},"components/NoteComponent.html":{},"classes/PedalConfig.html":{},"injectables/PlayerService.html":{}}}],["delete(id",{"_index":2874,"title":{},"body":{"components/NoteComponent.html":{}}}],["deleted",{"_index":4214,"title":{},"body":{"injectables/ViewportService.html":{}}}],["deletenote",{"_index":2864,"title":{},"body":{"components/NoteComponent.html":{}}}],["deleting",{"_index":2269,"title":{},"body":{"interfaces/IOTuple.html":{},"interfaces/TreeNode.html":{}}}],["delimit",{"_index":3985,"title":{},"body":{"classes/Shape.html":{}}}],["delopat",{"_index":3016,"title":{},"body":{"classes/OpSequencer.html":{},"injectables/SequencerService.html":{}}}],["delopat(x",{"_index":3035,"title":{},"body":{"classes/OpSequencer.html":{},"injectables/SequencerService.html":{}}}],["densityunits",{"_index":1279,"title":{"interfaces/DensityUnits.html":{}},"body":{"interfaces/DensityUnits.html":{},"interfaces/DesignMode.html":{},"interfaces/LoomTypes.html":{},"interfaces/MaterialTypes.html":{},"interfaces/ViewModes.html":{}}}],["dependencies",{"_index":2678,"title":{"dependencies.html":{}},"body":{"modules/MixerModule.html":{},"modules/PlayerModule.html":{},"dependencies.html":{},"index.html":{},"overview.html":{}}}],["depends",{"_index":703,"title":{},"body":{"components/ConnectionComponent.html":{}}}],["deployments",{"_index":4466,"title":{},"body":{"index.html":{}}}],["desc",{"_index":984,"title":{},"body":{"classes/DBListener.html":{},"classes/DBListenerArray.html":{},"classes/DBNode.html":{},"classes/DBNodeArray.html":{},"classes/DBTwoWay.html":{},"classes/DBTwoWayArray.html":{},"classes/DBWriteBuffer.html":{},"classes/DBWriter.html":{},"classes/DBWriterArray.html":{},"interfaces/DraftOperationClassification.html":{},"interfaces/LoomConfig.html":{},"injectables/MappingsService.html":{},"interfaces/NodeMethods.html":{},"interfaces/NodeParams.html":{},"classes/OnlineStatus.html":{},"classes/PedalConfig.html":{},"injectables/PlayerService.html":{}}}],["describe",{"_index":4600,"title":{},"body":{"index.html":{}}}],["described",{"_index":4523,"title":{},"body":{"index.html":{}}}],["describes",{"_index":339,"title":{},"body":{"interfaces/Bounds.html":{},"classes/Cell.html":{},"interfaces/Crossing.html":{},"interfaces/DraftNodeProxy.html":{},"interfaces/FileObj.html":{},"interfaces/FileSaver.html":{},"interfaces/Fileloader.html":{},"interfaces/IOTuple.html":{},"interfaces/LoadResponse.html":{},"interfaces/NodeComponentProxy.html":{},"interfaces/OpComponentProxy.html":{},"interfaces/OperationParam.html":{},"interfaces/Point.html":{},"interfaces/SaveObj.html":{},"interfaces/StatusMessage.html":{},"classes/System.html":{},"interfaces/TreeNode.html":{},"interfaces/TreeNodeProxy.html":{},"interfaces/Vertex.html":{},"interfaces/YarnPath.html":{},"index.html":{},"miscellaneous/typealiases.html":{}}}],["describing",{"_index":160,"title":{},"body":{"classes/AbstractOpFactory.html":{},"classes/BaseOp.html":{},"classes/Branch.html":{},"classes/Bus.html":{},"interfaces/Ink.html":{},"injectables/InkService.html":{},"classes/Merge.html":{},"interfaces/OpClassifier.html":{},"interfaces/OperationProperties.html":{},"classes/Pipe.html":{},"classes/Seed.html":{},"interfaces/TopologyDef.html":{},"index.html":{},"miscellaneous/typealiases.html":{}}}],["description",{"_index":202,"title":{},"body":{"classes/AbstractOpFactory.html":{},"classes/BaseOp.html":{},"interfaces/Bounds.html":{},"classes/Branch.html":{},"classes/Bus.html":{},"classes/Cell.html":{},"interfaces/ChainIndex.html":{},"interfaces/ChainOp.html":{},"components/ConnectionComponent.html":{},"interfaces/Crossing.html":{},"classes/DBListener.html":{},"classes/DBListenerArray.html":{},"classes/DBNode.html":{},"classes/DBTwoWayArray.html":{},"classes/DBWriteBuffer.html":{},"classes/DBWriter.html":{},"interfaces/DesignMode.html":{},"interfaces/DraftMap.html":{},"interfaces/DraftNodeProxy.html":{},"components/DraftdetailComponent.html":{},"interfaces/DynamicOperation.html":{},"interfaces/IOTuple.html":{},"injectables/InkService.html":{},"interfaces/Interlacement.html":{},"interfaces/InterlacementVal.html":{},"injectables/LayersService.html":{},"interfaces/LoomTypes.html":{},"injectables/MappingsService.html":{},"classes/Merge.html":{},"interfaces/NodeComponentProxy.html":{},"classes/OnlineStatus.html":{},"interfaces/OpClassifier.html":{},"interfaces/OpComponentProxy.html":{},"components/OpHelpModal.html":{},"interfaces/OpInput.html":{},"classes/OpSequencer.html":{},"interfaces/OperationClassification.html":{},"interfaces/OperationParam.html":{},"interfaces/OperationProperties.html":{},"interfaces/PairedOp.html":{},"classes/Params.html":{},"interfaces/Pedal.html":{},"classes/PedalConfig.html":{},"interfaces/PedalEvent.html":{},"classes/PedalStatus.html":{},"injectables/PedalsService.html":{},"classes/Pipe.html":{},"injectables/PlayerService.html":{},"interfaces/PlayerState.html":{},"interfaces/PlayerState-1.html":{},"interfaces/Point.html":{},"classes/Render.html":{},"interfaces/SaveObj.html":{},"classes/Seed.html":{},"classes/Selection.html":{},"injectables/SequencerService.html":{},"classes/Shape.html":{},"classes/Shape-1.html":{},"classes/Shuttle.html":{},"classes/System.html":{},"interfaces/TopologyDef.html":{},"interfaces/TreeNode.html":{},"interfaces/TreeNodeProxy.html":{},"interfaces/TreeOperation.html":{},"interfaces/Vertex.html":{},"injectables/ViewportService.html":{},"interfaces/YarnPath.html":{},"miscellaneous/functions.html":{},"index.html":{}}}],["descriptive",{"_index":184,"title":{},"body":{"classes/AbstractOpFactory.html":{},"classes/BaseOp.html":{},"classes/Branch.html":{},"classes/Bus.html":{},"classes/Merge.html":{},"interfaces/OpClassifier.html":{},"interfaces/OperationProperties.html":{},"classes/Pipe.html":{},"classes/Seed.html":{},"interfaces/TopologyDef.html":{}}}],["design",{"_index":272,"title":{},"body":{"classes/AbstractOpFactory.html":{},"classes/BaseOp.html":{},"classes/Branch.html":{},"classes/Bus.html":{},"classes/Merge.html":{},"interfaces/OpClassifier.html":{},"interfaces/OperationProperties.html":{},"classes/Pipe.html":{},"classes/Seed.html":{},"interfaces/TopologyDef.html":{},"index.html":{}}}],["designactionchange(e",{"_index":2053,"title":{},"body":{"components/DraftdetailComponent.html":{}}}],["designactions",{"_index":1302,"title":{"interfaces/DesignActions.html":{}},"body":{"interfaces/DesignActions.html":{}}}],["designer",{"_index":4436,"title":{},"body":{"index.html":{}}}],["designing",{"_index":4469,"title":{},"body":{"index.html":{}}}],["designmode",{"_index":1301,"title":{"interfaces/DesignMode.html":{}},"body":{"interfaces/DensityUnits.html":{},"interfaces/DesignMode.html":{},"interfaces/LoomTypes.html":{},"interfaces/MaterialTypes.html":{},"interfaces/ViewModes.html":{}}}],["designmodesservice",{"_index":1966,"title":{},"body":{"components/DraftdetailComponent.html":{}}}],["detach",{"_index":947,"title":{},"body":{"classes/DBListener.html":{},"classes/DBListenerArray.html":{},"classes/DBNode.html":{},"classes/DBNodeArray.html":{},"classes/DBTwoWay.html":{},"classes/DBTwoWayArray.html":{},"classes/DBWriteBuffer.html":{},"classes/DBWriter.html":{},"classes/DBWriterArray.html":{},"interfaces/NodeMethods.html":{},"interfaces/NodeParams.html":{},"classes/OnlineStatus.html":{}}}],["detail",{"_index":2096,"title":{},"body":{"components/DraftdetailComponent.html":{}}}],["details",{"_index":2936,"title":{},"body":{"components/NoteComponent.html":{}}}],["determining",{"_index":1287,"title":{},"body":{"interfaces/DensityUnits.html":{},"interfaces/DesignMode.html":{},"interfaces/LoomTypes.html":{},"interfaces/MaterialTypes.html":{},"interfaces/ViewModes.html":{}}}],["dev",{"_index":4612,"title":{},"body":{"index.html":{}}}],["developer",{"_index":4475,"title":{},"body":{"index.html":{}}}],["developers",{"_index":4499,"title":{},"body":{"index.html":{}}}],["development",{"_index":4458,"title":{},"body":{"index.html":{}}}],["device",{"_index":1161,"title":{},"body":{"classes/DBListener.html":{},"classes/DBListenerArray.html":{},"classes/DBNode.html":{},"classes/DBNodeArray.html":{},"classes/DBTwoWay.html":{},"classes/DBTwoWayArray.html":{},"classes/DBWriteBuffer.html":{},"classes/DBWriter.html":{},"classes/DBWriterArray.html":{},"interfaces/NodeMethods.html":{},"interfaces/NodeParams.html":{},"classes/OnlineStatus.html":{},"index.html":{}}}],["devices",{"_index":1165,"title":{},"body":{"classes/DBListener.html":{},"classes/DBListenerArray.html":{},"classes/DBNode.html":{},"classes/DBNodeArray.html":{},"classes/DBTwoWay.html":{},"classes/DBTwoWayArray.html":{},"classes/DBWriteBuffer.html":{},"classes/DBWriter.html":{},"classes/DBWriterArray.html":{},"interfaces/NodeMethods.html":{},"interfaces/NodeParams.html":{},"classes/OnlineStatus.html":{}}}],["devtools",{"_index":4369,"title":{},"body":{"dependencies.html":{}}}],["dialog",{"_index":1411,"title":{},"body":{"interfaces/DesignActions.html":{},"components/DraftdetailComponent.html":{},"components/MixerViewComponent.html":{},"components/OpsComponent.html":{}}}],["dialogref",{"_index":1968,"title":{},"body":{"components/DraftdetailComponent.html":{},"components/MixerViewComponent.html":{},"components/OpHelpModal.html":{},"components/OpsComponent.html":{}}}],["didn't",{"_index":1442,"title":{},"body":{"interfaces/DesignActions.html":{},"components/PlayerComponent.html":{}}}],["different",{"_index":1288,"title":{},"body":{"interfaces/DensityUnits.html":{},"interfaces/DesignMode.html":{},"interfaces/LoomTypes.html":{},"interfaces/MaterialTypes.html":{},"classes/System.html":{},"interfaces/ViewModes.html":{},"miscellaneous/functions.html":{},"index.html":{},"miscellaneous/typealiases.html":{}}}],["differently",{"_index":2220,"title":{},"body":{"interfaces/DynamicOperation.html":{},"interfaces/OpInput.html":{},"interfaces/OperationClassification.html":{},"interfaces/TreeOperation.html":{}}}],["dims",{"_index":1560,"title":{},"body":{"interfaces/DesignActions.html":{},"classes/Shuttle.html":{}}}],["dims:({{bounds.width",{"_index":4121,"title":{},"body":{"components/SnackbarComponent.html":{}}}],["direct",{"_index":234,"title":{},"body":{"classes/AbstractOpFactory.html":{},"classes/BaseOp.html":{},"classes/Branch.html":{},"classes/Bus.html":{},"classes/Merge.html":{},"interfaces/OpClassifier.html":{},"interfaces/OperationProperties.html":{},"classes/Pipe.html":{},"classes/Seed.html":{},"interfaces/TopologyDef.html":{},"index.html":{}}}],["direction",{"_index":2099,"title":{},"body":{"components/DraftdetailComponent.html":{},"components/MixerViewComponent.html":{},"components/NoteComponent.html":{},"components/OpSequencerComponent.html":{},"components/OpsComponent.html":{},"components/ParameterComponent.html":{},"components/PlayerComponent.html":{},"components/SnackbarComponent.html":{},"components/VirtualPedalsComponent.html":{},"components/WeavingStateComponent.html":{},"miscellaneous/typealiases.html":{}}}],["directive",{"_index":842,"title":{"directives/MarqueeComponent.html":{},"directives/SelectionComponent.html":{}},"body":{"components/ConnectionComponent.html":{},"components/DraftdetailComponent.html":{},"components/ImageComponent.html":{},"components/InletComponent.html":{},"directives/MarqueeComponent.html":{},"components/MixerViewComponent.html":{},"components/NoteComponent.html":{},"components/OpHelpModal.html":{},"components/OpSequencerComponent.html":{},"components/OpsComponent.html":{},"components/ParameterComponent.html":{},"components/PlayerComponent.html":{},"directives/SelectionComponent.html":{},"components/SnackbarComponent.html":{},"components/VirtualPedalsComponent.html":{},"components/WeavingStateComponent.html":{}}}],["directives",{"_index":877,"title":{},"body":{"components/ConnectionComponent.html":{},"components/DraftdetailComponent.html":{},"components/ImageComponent.html":{},"components/InletComponent.html":{},"directives/MarqueeComponent.html":{},"components/MixerViewComponent.html":{},"components/NoteComponent.html":{},"components/OpHelpModal.html":{},"components/OpSequencerComponent.html":{},"components/OpsComponent.html":{},"components/ParameterComponent.html":{},"components/PlayerComponent.html":{},"directives/SelectionComponent.html":{},"components/SnackbarComponent.html":{},"components/VirtualPedalsComponent.html":{},"components/WeavingStateComponent.html":{},"index.html":{},"overview.html":{}}}],["directly",{"_index":206,"title":{},"body":{"classes/AbstractOpFactory.html":{},"classes/BaseOp.html":{},"classes/Branch.html":{},"classes/Bus.html":{},"interfaces/DesignActions.html":{},"interfaces/DynamicOperation.html":{},"classes/Merge.html":{},"interfaces/OpClassifier.html":{},"interfaces/OpInput.html":{},"interfaces/OperationClassification.html":{},"interfaces/OperationProperties.html":{},"classes/Pipe.html":{},"classes/Seed.html":{},"interfaces/TopologyDef.html":{},"interfaces/TreeOperation.html":{}}}],["directory",{"_index":4505,"title":{},"body":{"index.html":{}}}],["dirty",{"_index":2272,"title":{},"body":{"interfaces/IOTuple.html":{},"components/ParameterComponent.html":{},"interfaces/TreeNode.html":{}}}],["disable_drag",{"_index":658,"title":{},"body":{"components/ConnectionComponent.html":{},"interfaces/DesignActions.html":{}}}],["disable_drag:boolean",{"_index":733,"title":{},"body":{"components/ConnectionComponent.html":{}}}],["disableclose",{"_index":1572,"title":{},"body":{"interfaces/DesignActions.html":{}}}],["disabled",{"_index":3114,"title":{},"body":{"components/OpSequencerComponent.html":{},"components/PlayerComponent.html":{},"components/WeavingStateComponent.html":{}}}],["disabled=true",{"_index":3133,"title":{},"body":{"components/OpSequencerComponent.html":{},"components/PlayerComponent.html":{},"components/WeavingStateComponent.html":{}}}],["disabledrag",{"_index":665,"title":{},"body":{"components/ConnectionComponent.html":{}}}],["display",{"_index":2097,"title":{},"body":{"components/DraftdetailComponent.html":{},"components/InletComponent.html":{},"components/MixerViewComponent.html":{},"components/NoteComponent.html":{},"components/OpHelpModal.html":{},"components/OpSequencerComponent.html":{},"components/OpsComponent.html":{},"components/ParameterComponent.html":{},"components/PlayerComponent.html":{},"components/SnackbarComponent.html":{},"components/VirtualPedalsComponent.html":{},"components/WeavingStateComponent.html":{},"index.html":{}}}],["display:flex",{"_index":2937,"title":{},"body":{"components/NoteComponent.html":{}}}],["display:none",{"_index":2946,"title":{},"body":{"components/NoteComponent.html":{}}}],["displayname",{"_index":188,"title":{},"body":{"classes/AbstractOpFactory.html":{},"classes/BaseOp.html":{},"classes/Branch.html":{},"classes/Bus.html":{},"interfaces/DynamicOperation.html":{},"classes/Merge.html":{},"interfaces/OpClassifier.html":{},"interfaces/OpInput.html":{},"interfaces/OperationClassification.html":{},"interfaces/OperationProperties.html":{},"classes/Pipe.html":{},"classes/Seed.html":{},"interfaces/TopologyDef.html":{},"interfaces/TreeOperation.html":{}}}],["displaynames",{"_index":3205,"title":{},"body":{"components/OpsComponent.html":{}}}],["displaynames:array",{"_index":3238,"title":{},"body":{"components/OpsComponent.html":{}}}],["dist",{"_index":4615,"title":{},"body":{"index.html":{}}}],["div",{"_index":2714,"title":{},"body":{"components/MixerViewComponent.html":{}}}],["div.cdk",{"_index":2943,"title":{},"body":{"components/NoteComponent.html":{}}}],["dive",{"_index":4457,"title":{},"body":{"index.html":{}}}],["dm",{"_index":1951,"title":{},"body":{"components/DraftdetailComponent.html":{}}}],["dm.getselecteddesignmode('drawdown_editing_style').viewvalue",{"_index":2095,"title":{},"body":{"components/DraftdetailComponent.html":{}}}],["dm.getselecteddesignmode(\\'drawdown_editing_style\\').viewvalue",{"_index":2130,"title":{},"body":{"components/DraftdetailComponent.html":{}}}],["docs",{"_index":293,"title":{},"body":{"classes/AbstractOpFactory.html":{},"classes/BaseOp.html":{},"classes/Branch.html":{},"classes/Bus.html":{},"classes/Merge.html":{},"interfaces/OpClassifier.html":{},"interfaces/OperationProperties.html":{},"classes/Pipe.html":{},"classes/Seed.html":{},"interfaces/TopologyDef.html":{}}}],["documenation",{"_index":2958,"title":{},"body":{"components/OpHelpModal.html":{}}}],["document.createelement('a",{"_index":1537,"title":{},"body":{"interfaces/DesignActions.html":{}}}],["document.getelementbyid(\"notecanvas",{"_index":2903,"title":{},"body":{"components/NoteComponent.html":{}}}],["document.getelementbyid(\"scale",{"_index":1485,"title":{},"body":{"interfaces/DesignActions.html":{}}}],["document.getelementbyid('active",{"_index":3660,"title":{},"body":{"components/PlayerComponent.html":{},"components/WeavingStateComponent.html":{}}}],["document.getelementbyid('cxn",{"_index":832,"title":{},"body":{"components/ConnectionComponent.html":{}}}],["document.getelementbyid('global",{"_index":2812,"title":{},"body":{"components/MixerViewComponent.html":{}}}],["document.getelementbyid('inlet'+to.id",{"_index":778,"title":{},"body":{"components/ConnectionComponent.html":{}}}],["document.getelementbyid('player",{"_index":4325,"title":{},"body":{"components/WeavingStateComponent.html":{}}}],["document.getelementbyid('scale",{"_index":1465,"title":{},"body":{"interfaces/DesignActions.html":{}}}],["document.getelementbyid('scalenote",{"_index":2916,"title":{},"body":{"components/NoteComponent.html":{}}}],["document.getelementbyid('scrollable",{"_index":2789,"title":{},"body":{"components/MixerViewComponent.html":{}}}],["document.getelementbyid('svg",{"_index":749,"title":{},"body":{"components/ConnectionComponent.html":{}}}],["document.getelementbyid(from.id",{"_index":789,"title":{},"body":{"components/ConnectionComponent.html":{}}}],["document.getelementbyid(this.id.tostring",{"_index":1436,"title":{},"body":{"interfaces/DesignActions.html":{}}}],["document.queryselector(\"#player",{"_index":3654,"title":{},"body":{"components/PlayerComponent.html":{}}}],["document.queryselector(\"app",{"_index":3671,"title":{},"body":{"components/PlayerComponent.html":{}}}],["document.queryselector(\"mat",{"_index":3680,"title":{},"body":{"components/PlayerComponent.html":{}}}],["document.queryselector('.mat",{"_index":4327,"title":{},"body":{"components/WeavingStateComponent.html":{}}}],["document.queryselector('app",{"_index":3656,"title":{},"body":{"components/PlayerComponent.html":{}}}],["document.queryselector('mat",{"_index":3663,"title":{},"body":{"components/PlayerComponent.html":{}}}],["document.write",{"_index":4028,"title":{},"body":{"classes/Shape-1.html":{}}}],["documentation",{"_index":2999,"title":{},"body":{"components/OpHelpModal.html":{},"index.html":{}}}],["doesn't",{"_index":1771,"title":{},"body":{"interfaces/DraftOperationClassification.html":{},"interfaces/LoomConfig.html":{},"injectables/MappingsService.html":{},"classes/PedalConfig.html":{},"injectables/PlayerService.html":{}}}],["dom",{"_index":645,"title":{},"body":{"components/ConnectionComponent.html":{},"components/DraftdetailComponent.html":{},"components/ImageComponent.html":{},"components/InletComponent.html":{},"components/MixerViewComponent.html":{},"components/NoteComponent.html":{},"components/OpHelpModal.html":{},"components/OpSequencerComponent.html":{},"components/OpsComponent.html":{},"components/ParameterComponent.html":{},"components/PlayerComponent.html":{},"components/SnackbarComponent.html":{},"components/VirtualPedalsComponent.html":{},"components/WeavingStateComponent.html":{}}}],["don't",{"_index":1566,"title":{},"body":{"interfaces/DesignActions.html":{},"injectables/MappingsService.html":{},"interfaces/OperationParam.html":{},"classes/Params.html":{},"index.html":{}}}],["doublecheck",{"_index":221,"title":{},"body":{"classes/AbstractOpFactory.html":{},"classes/BaseOp.html":{},"classes/Branch.html":{},"classes/Bus.html":{},"classes/Merge.html":{},"interfaces/OpClassifier.html":{},"interfaces/OperationProperties.html":{},"classes/Pipe.html":{},"classes/Seed.html":{},"interfaces/TopologyDef.html":{}}}],["down",{"_index":2317,"title":{},"body":{"interfaces/Ink.html":{},"injectables/InkService.html":{}}}],["down/lowered",{"_index":4562,"title":{},"body":{"index.html":{}}}],["download",{"_index":4026,"title":{},"body":{"classes/Shape-1.html":{},"index.html":{}}}],["downloading",{"_index":4452,"title":{},"body":{"index.html":{}}}],["downs",{"_index":2320,"title":{},"body":{"interfaces/Ink.html":{},"injectables/InkService.html":{}}}],["downstream",{"_index":1668,"title":{},"body":{"interfaces/DraftNodeProxy.html":{},"interfaces/FileObj.html":{},"interfaces/FileSaver.html":{},"interfaces/Fileloader.html":{},"interfaces/LoadResponse.html":{},"interfaces/NodeComponentProxy.html":{},"interfaces/OpComponentProxy.html":{},"interfaces/SaveObj.html":{},"interfaces/StatusMessage.html":{},"interfaces/TreeNodeProxy.html":{}}}],["draft",{"_index":51,"title":{},"body":{"classes/AbstractOpFactory.html":{},"classes/BaseOp.html":{},"interfaces/Bounds.html":{},"classes/Branch.html":{},"classes/Bus.html":{},"interfaces/ChainIndex.html":{},"interfaces/ChainOp.html":{},"interfaces/Crossing.html":{},"interfaces/DesignActions.html":{},"interfaces/DraftMap.html":{},"interfaces/DraftNodeProxy.html":{},"interfaces/DraftOperationClassification.html":{},"components/DraftdetailComponent.html":{},"interfaces/DynamicOperation.html":{},"interfaces/FileObj.html":{},"interfaces/FileSaver.html":{},"interfaces/Fileloader.html":{},"interfaces/IOTuple.html":{},"interfaces/Ink.html":{},"injectables/InkService.html":{},"components/InletComponent.html":{},"interfaces/Interlacement.html":{},"interfaces/InterlacementVal.html":{},"interfaces/LoadResponse.html":{},"interfaces/LoomConfig.html":{},"directives/MarqueeComponent.html":{},"classes/Merge.html":{},"interfaces/NodeComponentProxy.html":{},"interfaces/OpClassifier.html":{},"interfaces/OpComponentProxy.html":{},"components/OpHelpModal.html":{},"interfaces/OpInput.html":{},"classes/OpSequencer.html":{},"interfaces/OperationClassification.html":{},"interfaces/OperationParam.html":{},"interfaces/OperationProperties.html":{},"interfaces/PairedOp.html":{},"components/ParameterComponent.html":{},"classes/Params.html":{},"interfaces/Pedal.html":{},"classes/PedalConfig.html":{},"interfaces/PedalEvent.html":{},"classes/PedalStatus.html":{},"injectables/PedalsService.html":{},"classes/Pipe.html":{},"components/PlayerComponent.html":{},"interfaces/PlayerOp.html":{},"injectables/PlayerService.html":{},"interfaces/PlayerState.html":{},"interfaces/PlayerState-1.html":{},"interfaces/Point.html":{},"classes/Render.html":{},"interfaces/SaveObj.html":{},"classes/Seed.html":{},"directives/SelectionComponent.html":{},"injectables/SequencerService.html":{},"classes/Shape.html":{},"classes/Shape-1.html":{},"interfaces/StatusMessage.html":{},"interfaces/TopologyDef.html":{},"interfaces/TreeNode.html":{},"interfaces/TreeNodeProxy.html":{},"interfaces/TreeOperation.html":{},"interfaces/Vertex.html":{},"interfaces/WeavingLog.html":{},"interfaces/WeavingPick.html":{},"interfaces/WeavingPick-1.html":{},"components/WeavingStateComponent.html":{},"interfaces/YarnPath.html":{},"miscellaneous/functions.html":{},"index.html":{},"miscellaneous/typealiases.html":{}}}],["draft(value",{"_index":1349,"title":{},"body":{"interfaces/DesignActions.html":{}}}],["draft({name",{"_index":3895,"title":{},"body":{"directives/SelectionComponent.html":{}}}],["draft.drawdown[row",{"_index":1935,"title":{},"body":{"interfaces/DraftOperationClassification.html":{},"interfaces/LoomConfig.html":{},"classes/PedalConfig.html":{},"injectables/PlayerService.html":{}}}],["draft.rowsystemmapping.map((val",{"_index":3852,"title":{},"body":{"classes/Render.html":{}}}],["draft.ts",{"_index":3963,"title":{},"body":{"classes/Shape.html":{}}}],["draft.visiblerows",{"_index":1636,"title":{},"body":{"interfaces/DraftMap.html":{},"interfaces/Interlacement.html":{},"interfaces/InterlacementVal.html":{}}}],["draft.visiblerows[si",{"_index":1637,"title":{},"body":{"interfaces/DraftMap.html":{},"interfaces/Interlacement.html":{},"interfaces/InterlacementVal.html":{}}}],["draft:draft",{"_index":2015,"title":{},"body":{"components/DraftdetailComponent.html":{}}}],["draft_id",{"_index":1648,"title":{},"body":{"interfaces/DraftNodeProxy.html":{},"interfaces/FileObj.html":{},"interfaces/FileSaver.html":{},"interfaces/Fileloader.html":{},"interfaces/LoadResponse.html":{},"interfaces/NodeComponentProxy.html":{},"interfaces/OpComponentProxy.html":{},"interfaces/SaveObj.html":{},"interfaces/StatusMessage.html":{},"interfaces/TreeNodeProxy.html":{}}}],["draft_input",{"_index":595,"title":{},"body":{"interfaces/ChainOp.html":{},"interfaces/PairedOp.html":{},"interfaces/PedalEvent.html":{},"interfaces/PlayerOp.html":{}}}],["draft_input]).then((output",{"_index":599,"title":{},"body":{"interfaces/ChainOp.html":{},"interfaces/PairedOp.html":{},"interfaces/PedalEvent.html":{},"interfaces/PlayerOp.html":{}}}],["draft_name",{"_index":1649,"title":{},"body":{"interfaces/DraftNodeProxy.html":{},"interfaces/FileObj.html":{},"interfaces/FileSaver.html":{},"interfaces/Fileloader.html":{},"interfaces/LoadResponse.html":{},"interfaces/NodeComponentProxy.html":{},"interfaces/OpComponentProxy.html":{},"interfaces/SaveObj.html":{},"interfaces/StatusMessage.html":{},"interfaces/TreeNodeProxy.html":{}}}],["draft_ndx",{"_index":909,"title":{},"body":{"interfaces/Crossing.html":{},"interfaces/Vertex.html":{},"interfaces/YarnPath.html":{}}}],["draft_nodes",{"_index":1678,"title":{},"body":{"interfaces/DraftNodeProxy.html":{},"interfaces/FileObj.html":{},"interfaces/FileSaver.html":{},"interfaces/Fileloader.html":{},"interfaces/LoadResponse.html":{},"interfaces/NodeComponentProxy.html":{},"interfaces/OpComponentProxy.html":{},"interfaces/SaveObj.html":{},"interfaces/StatusMessage.html":{},"interfaces/TreeNodeProxy.html":{}}}],["draft_set",{"_index":3640,"title":{},"body":{"components/PlayerComponent.html":{},"components/WeavingStateComponent.html":{}}}],["draft_visible",{"_index":1403,"title":{},"body":{"interfaces/DesignActions.html":{},"interfaces/DraftNodeProxy.html":{},"interfaces/FileObj.html":{},"interfaces/FileSaver.html":{},"interfaces/Fileloader.html":{},"interfaces/LoadResponse.html":{},"interfaces/NodeComponentProxy.html":{},"interfaces/OpComponentProxy.html":{},"interfaces/SaveObj.html":{},"interfaces/StatusMessage.html":{},"interfaces/TreeNodeProxy.html":{}}}],["draftcanvas",{"_index":4296,"title":{},"body":{"components/WeavingStateComponent.html":{}}}],["draftclassification",{"_index":1797,"title":{},"body":{"interfaces/DraftOperationClassification.html":{},"interfaces/LoomConfig.html":{},"classes/PedalConfig.html":{},"injectables/PlayerService.html":{}}}],["draftdetail",{"_index":1948,"title":{},"body":{"components/DraftdetailComponent.html":{}}}],["draftdetail'},{'name",{"_index":846,"title":{},"body":{"components/ConnectionComponent.html":{},"components/DraftdetailComponent.html":{},"components/ImageComponent.html":{},"components/InletComponent.html":{},"components/MixerViewComponent.html":{},"components/NoteComponent.html":{},"components/OpHelpModal.html":{},"components/OpSequencerComponent.html":{},"components/OpsComponent.html":{},"components/ParameterComponent.html":{},"components/PlayerComponent.html":{},"components/SnackbarComponent.html":{},"components/VirtualPedalsComponent.html":{},"components/WeavingStateComponent.html":{}}}],["draftdetail.component.html",{"_index":1950,"title":{},"body":{"components/DraftdetailComponent.html":{}}}],["draftdetail.component.scss",{"_index":1949,"title":{},"body":{"components/DraftdetailComponent.html":{}}}],["draftdetailcomponent",{"_index":845,"title":{"components/DraftdetailComponent.html":{}},"body":{"components/ConnectionComponent.html":{},"interfaces/DesignActions.html":{},"components/DraftdetailComponent.html":{},"components/ImageComponent.html":{},"components/InletComponent.html":{},"modules/MixerModule.html":{},"components/MixerViewComponent.html":{},"components/NoteComponent.html":{},"components/OpHelpModal.html":{},"components/OpSequencerComponent.html":{},"components/OpsComponent.html":{},"components/ParameterComponent.html":{},"components/PlayerComponent.html":{},"components/SnackbarComponent.html":{},"components/VirtualPedalsComponent.html":{},"components/WeavingStateComponent.html":{},"overview.html":{}}}],["draftmap",{"_index":1311,"title":{"interfaces/DraftMap.html":{}},"body":{"interfaces/DesignActions.html":{},"interfaces/DraftMap.html":{},"interfaces/Interlacement.html":{},"interfaces/InterlacementVal.html":{}}}],["draftnode",{"_index":2282,"title":{},"body":{"interfaces/IOTuple.html":{},"interfaces/TreeNode.html":{},"miscellaneous/typealiases.html":{}}}],["draftnodeproxy",{"_index":1645,"title":{"interfaces/DraftNodeProxy.html":{}},"body":{"interfaces/DraftNodeProxy.html":{},"interfaces/FileObj.html":{},"interfaces/FileSaver.html":{},"interfaces/Fileloader.html":{},"interfaces/LoadResponse.html":{},"interfaces/NodeComponentProxy.html":{},"interfaces/OpComponentProxy.html":{},"interfaces/SaveObj.html":{},"interfaces/StatusMessage.html":{},"interfaces/TreeNodeProxy.html":{}}}],["draftoperationclassification",{"_index":1692,"title":{"interfaces/DraftOperationClassification.html":{}},"body":{"interfaces/DraftOperationClassification.html":{},"interfaces/LoomConfig.html":{},"classes/PedalConfig.html":{},"injectables/PlayerService.html":{}}}],["draftparam",{"_index":3178,"title":{},"body":{"interfaces/OperationParam.html":{},"components/ParameterComponent.html":{},"classes/Params.html":{},"miscellaneous/typealiases.html":{}}}],["draftrow",{"_index":1934,"title":{},"body":{"interfaces/DraftOperationClassification.html":{},"interfaces/LoomConfig.html":{},"classes/PedalConfig.html":{},"injectables/PlayerService.html":{}}}],["draftrow.length",{"_index":1939,"title":{},"body":{"interfaces/DraftOperationClassification.html":{},"interfaces/LoomConfig.html":{},"classes/PedalConfig.html":{},"injectables/PlayerService.html":{}}}],["drafts",{"_index":69,"title":{},"body":{"classes/AbstractOpFactory.html":{},"classes/BaseOp.html":{},"classes/Branch.html":{},"classes/Bus.html":{},"interfaces/ChainOp.html":{},"interfaces/DraftMap.html":{},"interfaces/DraftNodeProxy.html":{},"components/DraftdetailComponent.html":{},"interfaces/DynamicOperation.html":{},"interfaces/FileObj.html":{},"interfaces/FileSaver.html":{},"interfaces/Fileloader.html":{},"interfaces/IOTuple.html":{},"interfaces/Interlacement.html":{},"interfaces/InterlacementVal.html":{},"interfaces/LoadResponse.html":{},"classes/Merge.html":{},"interfaces/NodeComponentProxy.html":{},"interfaces/OpClassifier.html":{},"interfaces/OpComponentProxy.html":{},"components/OpHelpModal.html":{},"interfaces/OpInput.html":{},"interfaces/OperationClassification.html":{},"interfaces/OperationParam.html":{},"interfaces/OperationProperties.html":{},"interfaces/PairedOp.html":{},"classes/Params.html":{},"interfaces/PedalEvent.html":{},"classes/Pipe.html":{},"interfaces/PlayerOp.html":{},"classes/Render.html":{},"interfaces/SaveObj.html":{},"classes/Seed.html":{},"classes/Shape-1.html":{},"interfaces/StatusMessage.html":{},"classes/System.html":{},"interfaces/TopologyDef.html":{},"interfaces/TreeNode.html":{},"interfaces/TreeNodeProxy.html":{},"interfaces/TreeOperation.html":{},"miscellaneous/functions.html":{},"index.html":{},"miscellaneous/typealiases.html":{}}}],["drafts.foreach(draft",{"_index":2055,"title":{},"body":{"components/DraftdetailComponent.html":{}}}],["drafts/color",{"_index":2301,"title":{},"body":{"components/ImageComponent.html":{}}}],["drafts_opt",{"_index":140,"title":{},"body":{"classes/AbstractOpFactory.html":{},"classes/BaseOp.html":{},"classes/Branch.html":{},"classes/Bus.html":{},"classes/Merge.html":{},"interfaces/OpClassifier.html":{},"interfaces/OperationProperties.html":{},"classes/Pipe.html":{},"classes/Seed.html":{},"interfaces/TopologyDef.html":{}}}],["draftsoptional",{"_index":10,"title":{},"body":{"classes/AbstractOpFactory.html":{},"classes/BaseOp.html":{},"classes/Branch.html":{},"classes/Bus.html":{},"interfaces/ChainOp.html":{},"interfaces/DraftOperationClassification.html":{},"interfaces/DynamicOperation.html":{},"interfaces/LoomConfig.html":{},"classes/Merge.html":{},"interfaces/OpClassifier.html":{},"interfaces/OpInput.html":{},"interfaces/OperationClassification.html":{},"interfaces/OperationProperties.html":{},"interfaces/PairedOp.html":{},"classes/PedalConfig.html":{},"interfaces/PedalEvent.html":{},"classes/Pipe.html":{},"interfaces/PlayerOp.html":{},"injectables/PlayerService.html":{},"classes/Seed.html":{},"interfaces/TopologyDef.html":{},"interfaces/TreeOperation.html":{},"miscellaneous/typealiases.html":{}}}],["draftsoptional(...args",{"_index":33,"title":{},"body":{"classes/AbstractOpFactory.html":{},"classes/BaseOp.html":{},"classes/Branch.html":{},"classes/Bus.html":{},"classes/Merge.html":{},"interfaces/OpClassifier.html":{},"interfaces/OperationProperties.html":{},"classes/Pipe.html":{},"classes/Seed.html":{},"interfaces/TopologyDef.html":{}}}],["draftsoptional(args",{"_index":30,"title":{},"body":{"classes/AbstractOpFactory.html":{},"classes/BaseOp.html":{},"classes/Branch.html":{},"classes/Bus.html":{},"classes/Merge.html":{},"interfaces/OpClassifier.html":{},"interfaces/OperationProperties.html":{},"classes/Pipe.html":{},"classes/Seed.html":{},"interfaces/TopologyDef.html":{}}}],["draftsoptionalperform",{"_index":172,"title":{},"body":{"classes/AbstractOpFactory.html":{},"classes/BaseOp.html":{},"classes/Branch.html":{},"classes/Bus.html":{},"classes/Merge.html":{},"interfaces/OpClassifier.html":{},"interfaces/OperationProperties.html":{},"classes/Pipe.html":{},"classes/Seed.html":{},"interfaces/TopologyDef.html":{},"miscellaneous/typealiases.html":{}}}],["drafttiling",{"_index":1708,"title":{},"body":{"interfaces/DraftOperationClassification.html":{},"interfaces/LoomConfig.html":{},"classes/PedalConfig.html":{},"injectables/PlayerService.html":{}}}],["drag",{"_index":2944,"title":{},"body":{"components/NoteComponent.html":{}}}],["dragend",{"_index":2717,"title":{},"body":{"components/MixerViewComponent.html":{}}}],["dragend($event",{"_index":2733,"title":{},"body":{"components/MixerViewComponent.html":{}}}],["draggable",{"_index":2763,"title":{},"body":{"components/MixerViewComponent.html":{}}}],["dragging",{"_index":2816,"title":{},"body":{"components/MixerViewComponent.html":{},"components/NoteComponent.html":{}}}],["dragmove",{"_index":2718,"title":{},"body":{"components/MixerViewComponent.html":{},"components/NoteComponent.html":{}}}],["dragmove($event",{"_index":2735,"title":{},"body":{"components/MixerViewComponent.html":{},"components/NoteComponent.html":{}}}],["dragstart",{"_index":2719,"title":{},"body":{"components/MixerViewComponent.html":{}}}],["dragstart($event",{"_index":2737,"title":{},"body":{"components/MixerViewComponent.html":{}}}],["draw",{"_index":903,"title":{},"body":{"interfaces/Crossing.html":{},"components/NoteComponent.html":{},"interfaces/Vertex.html":{},"components/WeavingStateComponent.html":{},"interfaces/YarnPath.html":{}}}],["drawcell",{"_index":4299,"title":{},"body":{"components/WeavingStateComponent.html":{}}}],["drawcell(cell_size",{"_index":4304,"title":{},"body":{"components/WeavingStateComponent.html":{}}}],["drawconnection",{"_index":666,"title":{},"body":{"components/ConnectionComponent.html":{}}}],["drawdown",{"_index":1588,"title":{},"body":{"interfaces/DesignActions.html":{},"interfaces/DraftMap.html":{},"components/DraftdetailComponent.html":{},"interfaces/Interlacement.html":{},"interfaces/InterlacementVal.html":{},"index.html":{},"miscellaneous/typealiases.html":{}}}],["drawdown/interlacement",{"_index":1617,"title":{},"body":{"interfaces/DraftMap.html":{},"interfaces/Interlacement.html":{},"interfaces/InterlacementVal.html":{}}}],["drawdown_editing_style",{"_index":2031,"title":{},"body":{"components/DraftdetailComponent.html":{}}}],["drawdraft",{"_index":3614,"title":{},"body":{"components/PlayerComponent.html":{},"components/WeavingStateComponent.html":{}}}],["drawdraft(flipy",{"_index":4308,"title":{},"body":{"components/WeavingStateComponent.html":{}}}],["drawer",{"_index":2101,"title":{},"body":{"components/DraftdetailComponent.html":{},"components/PlayerComponent.html":{},"components/WeavingStateComponent.html":{}}}],["drawforprint",{"_index":667,"title":{},"body":{"components/ConnectionComponent.html":{},"components/NoteComponent.html":{}}}],["drawforprint(canvas",{"_index":685,"title":{},"body":{"components/ConnectionComponent.html":{},"components/NoteComponent.html":{}}}],["drawing",{"_index":3749,"title":{},"body":{"interfaces/Point.html":{}}}],["drawn",{"_index":2498,"title":{},"body":{"injectables/LayersService.html":{}}}],["drawprogressbar",{"_index":4300,"title":{},"body":{"components/WeavingStateComponent.html":{}}}],["drawprogressbar(cell_size",{"_index":4313,"title":{},"body":{"components/WeavingStateComponent.html":{}}}],["draws",{"_index":2309,"title":{},"body":{"interfaces/Ink.html":{},"injectables/InkService.html":{}}}],["drive",{"_index":4503,"title":{},"body":{"index.html":{}}}],["dropdown",{"_index":2247,"title":{},"body":{"interfaces/DynamicOperation.html":{},"interfaces/OpInput.html":{},"interfaces/OperationClassification.html":{},"interfaces/TreeOperation.html":{}}}],["ds",{"_index":2159,"title":{},"body":{"interfaces/DynamicOperation.html":{},"interfaces/OpInput.html":{},"interfaces/OperationClassification.html":{},"interfaces/TreeOperation.html":{}}}],["dst",{"_index":2604,"title":{},"body":{"injectables/MappingsService.html":{}}}],["duplicate",{"_index":2081,"title":{},"body":{"components/DraftdetailComponent.html":{}}}],["dx",{"_index":189,"title":{},"body":{"classes/AbstractOpFactory.html":{},"classes/BaseOp.html":{},"classes/Branch.html":{},"classes/Bus.html":{},"interfaces/ChainOp.html":{},"interfaces/DraftOperationClassification.html":{},"interfaces/DynamicOperation.html":{},"interfaces/Ink.html":{},"injectables/InkService.html":{},"components/InletComponent.html":{},"interfaces/LoomConfig.html":{},"classes/Merge.html":{},"interfaces/OpClassifier.html":{},"interfaces/OpInput.html":{},"interfaces/OperationClassification.html":{},"interfaces/OperationParam.html":{},"interfaces/OperationProperties.html":{},"interfaces/PairedOp.html":{},"classes/Params.html":{},"classes/PedalConfig.html":{},"interfaces/PedalEvent.html":{},"classes/Pipe.html":{},"interfaces/PlayerOp.html":{},"injectables/PlayerService.html":{},"classes/Seed.html":{},"interfaces/TopologyDef.html":{},"interfaces/TreeOperation.html":{}}}],["dyanmic",{"_index":2993,"title":{},"body":{"components/OpHelpModal.html":{}}}],["dynamic",{"_index":712,"title":{},"body":{"components/ConnectionComponent.html":{},"interfaces/DynamicOperation.html":{},"components/InletComponent.html":{},"interfaces/OpInput.html":{},"interfaces/OperationClassification.html":{},"interfaces/TreeOperation.html":{},"dependencies.html":{}}}],["dynamic_param_id",{"_index":2134,"title":{},"body":{"interfaces/DynamicOperation.html":{},"components/OpHelpModal.html":{},"interfaces/OpInput.html":{},"interfaces/OperationClassification.html":{},"interfaces/TreeOperation.html":{}}}],["dynamic_param_name",{"_index":2959,"title":{},"body":{"components/OpHelpModal.html":{}}}],["dynamic_param_type",{"_index":2135,"title":{},"body":{"interfaces/DynamicOperation.html":{},"interfaces/OpInput.html":{},"interfaces/OperationClassification.html":{},"interfaces/TreeOperation.html":{}}}],["dynamic_type",{"_index":2960,"title":{},"body":{"components/OpHelpModal.html":{}}}],["dynamically",{"_index":2242,"title":{},"body":{"interfaces/DynamicOperation.html":{},"interfaces/OpInput.html":{},"interfaces/OperationClassification.html":{},"interfaces/TreeOperation.html":{}}}],["dynamicoperation",{"_index":2131,"title":{"interfaces/DynamicOperation.html":{}},"body":{"interfaces/DynamicOperation.html":{},"components/InletComponent.html":{},"components/OpHelpModal.html":{},"interfaces/OpInput.html":{},"interfaces/OperationClassification.html":{},"interfaces/TreeOperation.html":{},"miscellaneous/typealiases.html":{}}}],["e",{"_index":1912,"title":{},"body":{"interfaces/DraftOperationClassification.html":{},"interfaces/LoomConfig.html":{},"components/MixerViewComponent.html":{},"interfaces/Pedal.html":{},"classes/PedalConfig.html":{},"classes/PedalStatus.html":{},"injectables/PedalsService.html":{},"injectables/PlayerService.html":{}}}],["e.g",{"_index":1459,"title":{},"body":{"interfaces/DesignActions.html":{},"interfaces/DynamicOperation.html":{},"components/NoteComponent.html":{},"interfaces/OpInput.html":{},"interfaces/OperationClassification.html":{},"interfaces/TreeOperation.html":{},"index.html":{}}}],["e.id",{"_index":3460,"title":{},"body":{"interfaces/Pedal.html":{},"classes/PedalStatus.html":{},"injectables/PedalsService.html":{}}}],["e.source",{"_index":2797,"title":{},"body":{"components/MixerViewComponent.html":{}}}],["e.val",{"_index":3459,"title":{},"body":{"interfaces/Pedal.html":{},"classes/PedalStatus.html":{},"injectables/PedalsService.html":{}}}],["e.value",{"_index":2798,"title":{},"body":{"components/MixerViewComponent.html":{}}}],["each",{"_index":424,"title":{},"body":{"interfaces/ChainIndex.html":{},"interfaces/ChainOp.html":{},"classes/DBListener.html":{},"classes/DBListenerArray.html":{},"classes/DBNode.html":{},"classes/DBNodeArray.html":{},"classes/DBTwoWay.html":{},"classes/DBTwoWayArray.html":{},"classes/DBWriteBuffer.html":{},"classes/DBWriter.html":{},"classes/DBWriterArray.html":{},"interfaces/DesignActions.html":{},"interfaces/DraftNodeProxy.html":{},"interfaces/FileObj.html":{},"interfaces/FileSaver.html":{},"interfaces/Fileloader.html":{},"interfaces/IOTuple.html":{},"interfaces/LoadResponse.html":{},"components/MixerViewComponent.html":{},"interfaces/NodeComponentProxy.html":{},"interfaces/NodeMethods.html":{},"interfaces/NodeParams.html":{},"components/NoteComponent.html":{},"classes/OnlineStatus.html":{},"interfaces/OpComponentProxy.html":{},"components/OpHelpModal.html":{},"interfaces/PairedOp.html":{},"components/ParameterComponent.html":{},"interfaces/PedalEvent.html":{},"interfaces/PlayerOp.html":{},"interfaces/SaveObj.html":{},"injectables/SequencerService.html":{},"classes/Shape.html":{},"classes/Shape-1.html":{},"interfaces/StatusMessage.html":{},"classes/System.html":{},"interfaces/TreeNode.html":{},"interfaces/TreeNodeProxy.html":{},"miscellaneous/functions.html":{},"index.html":{},"miscellaneous/typealiases.html":{}}}],["easily",{"_index":1660,"title":{},"body":{"interfaces/DraftNodeProxy.html":{},"interfaces/FileObj.html":{},"interfaces/FileSaver.html":{},"interfaces/Fileloader.html":{},"interfaces/LoadResponse.html":{},"interfaces/NodeComponentProxy.html":{},"interfaces/OpComponentProxy.html":{},"interfaces/SaveObj.html":{},"interfaces/StatusMessage.html":{},"interfaces/TreeNodeProxy.html":{}}}],["east",{"_index":4657,"title":{},"body":{"miscellaneous/typealiases.html":{}}}],["easy",{"_index":1665,"title":{},"body":{"interfaces/DraftNodeProxy.html":{},"interfaces/FileObj.html":{},"interfaces/FileSaver.html":{},"interfaces/Fileloader.html":{},"interfaces/LoadResponse.html":{},"interfaces/NodeComponentProxy.html":{},"interfaces/OpComponentProxy.html":{},"interfaces/SaveObj.html":{},"interfaces/StatusMessage.html":{},"interfaces/TreeNodeProxy.html":{},"index.html":{}}}],["eddle",{"_index":1522,"title":{},"body":{"interfaces/DesignActions.html":{}}}],["edge",{"_index":4659,"title":{},"body":{"miscellaneous/typealiases.html":{}}}],["editing",{"_index":2094,"title":{},"body":{"components/DraftdetailComponent.html":{},"index.html":{}}}],["el",{"_index":2154,"title":{},"body":{"interfaces/DynamicOperation.html":{},"components/MixerViewComponent.html":{},"interfaces/OpInput.html":{},"interfaces/OperationClassification.html":{},"components/OpsComponent.html":{},"classes/Render.html":{},"classes/System.html":{},"interfaces/TreeOperation.html":{},"injectables/ViewportService.html":{}}}],["el.displayname",{"_index":3244,"title":{},"body":{"components/OpsComponent.html":{}}}],["el.drafts",{"_index":2165,"title":{},"body":{"interfaces/DynamicOperation.html":{},"interfaces/OpInput.html":{},"interfaces/OperationClassification.html":{},"interfaces/TreeOperation.html":{}}}],["el.drafts).reduce((acc",{"_index":2158,"title":{},"body":{"interfaces/DynamicOperation.html":{},"interfaces/OpInput.html":{},"interfaces/OperationClassification.html":{},"interfaces/TreeOperation.html":{}}}],["el.i",{"_index":4244,"title":{},"body":{"injectables/ViewportService.html":{}}}],["el.id",{"_index":2437,"title":{},"body":{"components/InletComponent.html":{},"interfaces/Pedal.html":{},"classes/PedalStatus.html":{},"injectables/PedalsService.html":{},"injectables/ViewportService.html":{}}}],["el.inlet",{"_index":2162,"title":{},"body":{"interfaces/DynamicOperation.html":{},"interfaces/OpInput.html":{},"interfaces/OperationClassification.html":{},"interfaces/TreeOperation.html":{}}}],["el.length",{"_index":4176,"title":{},"body":{"classes/System.html":{}}}],["el.name",{"_index":2436,"title":{},"body":{"components/InletComponent.html":{},"components/OpsComponent.html":{}}}],["el.op_name",{"_index":2203,"title":{},"body":{"interfaces/DynamicOperation.html":{},"interfaces/OpInput.html":{},"interfaces/OperationClassification.html":{},"interfaces/TreeOperation.html":{}}}],["el.params).reduce((acc",{"_index":2153,"title":{},"body":{"interfaces/DynamicOperation.html":{},"interfaces/OpInput.html":{},"interfaces/OperationClassification.html":{},"interfaces/TreeOperation.html":{}}}],["el.struct_id",{"_index":1896,"title":{},"body":{"interfaces/DraftOperationClassification.html":{},"interfaces/LoomConfig.html":{},"classes/PedalConfig.html":{},"injectables/PlayerService.html":{}}}],["el.style.transform.split(/\\w",{"_index":2804,"title":{},"body":{"components/MixerViewComponent.html":{}}}],["el.value",{"_index":2178,"title":{},"body":{"interfaces/DynamicOperation.html":{},"interfaces/OpInput.html":{},"interfaces/OperationClassification.html":{},"interfaces/TreeOperation.html":{}}}],["element",{"_index":777,"title":{},"body":{"components/ConnectionComponent.html":{},"interfaces/DesignActions.html":{},"components/DraftdetailComponent.html":{},"components/ImageComponent.html":{},"components/InletComponent.html":{},"components/MixerViewComponent.html":{},"components/NoteComponent.html":{},"components/OpHelpModal.html":{},"components/OpSequencerComponent.html":{},"components/OpsComponent.html":{},"components/ParameterComponent.html":{},"components/PlayerComponent.html":{},"classes/Shape.html":{},"classes/Shape-1.html":{},"components/SnackbarComponent.html":{},"injectables/ViewportService.html":{},"components/VirtualPedalsComponent.html":{},"components/WeavingStateComponent.html":{}}}],["element.offsetleft",{"_index":781,"title":{},"body":{"components/ConnectionComponent.html":{}}}],["elementref",{"_index":1305,"title":{},"body":{"interfaces/DesignActions.html":{}}}],["elements",{"_index":2497,"title":{},"body":{"injectables/LayersService.html":{},"classes/Shape-1.html":{},"index.html":{}}}],["elsewhere",{"_index":1110,"title":{},"body":{"classes/DBListener.html":{},"classes/DBListenerArray.html":{},"classes/DBNode.html":{},"classes/DBNodeArray.html":{},"classes/DBTwoWay.html":{},"classes/DBTwoWayArray.html":{},"classes/DBWriteBuffer.html":{},"classes/DBWriter.html":{},"classes/DBWriterArray.html":{},"interfaces/NodeMethods.html":{},"interfaces/NodeParams.html":{},"classes/OnlineStatus.html":{}}}],["emit",{"_index":938,"title":{},"body":{"classes/DBListener.html":{},"classes/DBListenerArray.html":{},"classes/DBNode.html":{},"classes/DBNodeArray.html":{},"classes/DBTwoWay.html":{},"classes/DBTwoWayArray.html":{},"classes/DBWriteBuffer.html":{},"classes/DBWriter.html":{},"classes/DBWriterArray.html":{},"interfaces/NodeMethods.html":{},"interfaces/NodeParams.html":{},"classes/OnlineStatus.html":{}}}],["emitting",{"_index":1013,"title":{},"body":{"classes/DBListener.html":{},"classes/DBListenerArray.html":{},"classes/DBNode.html":{},"classes/DBNodeArray.html":{},"classes/DBTwoWay.html":{},"classes/DBTwoWayArray.html":{},"classes/DBWriteBuffer.html":{},"classes/DBWriter.html":{},"classes/DBWriterArray.html":{},"interfaces/NodeMethods.html":{},"interfaces/NodeParams.html":{},"classes/OnlineStatus.html":{}}}],["enable",{"_index":3443,"title":{},"body":{"interfaces/Pedal.html":{},"classes/PedalStatus.html":{},"injectables/PedalsService.html":{}}}],["enabled",{"_index":762,"title":{},"body":{"components/ConnectionComponent.html":{}}}],["enabledrag",{"_index":668,"title":{},"body":{"components/ConnectionComponent.html":{}}}],["encodeuricomponent(out.json",{"_index":1553,"title":{},"body":{"interfaces/DesignActions.html":{}}}],["end",{"_index":1039,"title":{},"body":{"classes/DBListener.html":{},"classes/DBListenerArray.html":{},"classes/DBNode.html":{},"classes/DBNodeArray.html":{},"classes/DBTwoWay.html":{},"classes/DBTwoWayArray.html":{},"classes/DBWriteBuffer.html":{},"classes/DBWriter.html":{},"classes/DBWriterArray.html":{},"injectables/MappingsService.html":{},"interfaces/NodeMethods.html":{},"interfaces/NodeParams.html":{},"components/NoteComponent.html":{},"classes/OnlineStatus.html":{},"classes/Selection.html":{}}}],["endcol",{"_index":3938,"title":{},"body":{"classes/Shape.html":{}}}],["endlabel",{"_index":4044,"title":{},"body":{"classes/Shuttle.html":{}}}],["endposition.x",{"_index":1499,"title":{},"body":{"interfaces/DesignActions.html":{}}}],["endposition.y",{"_index":1501,"title":{},"body":{"interfaces/DesignActions.html":{}}}],["ends",{"_index":1143,"title":{},"body":{"classes/DBListener.html":{},"classes/DBListenerArray.html":{},"classes/DBNode.html":{},"classes/DBNodeArray.html":{},"classes/DBTwoWay.html":{},"classes/DBTwoWayArray.html":{},"classes/DBWriteBuffer.html":{},"classes/DBWriter.html":{},"classes/DBWriterArray.html":{},"components/DraftdetailComponent.html":{},"interfaces/NodeMethods.html":{},"interfaces/NodeParams.html":{},"classes/OnlineStatus.html":{},"interfaces/Pedal.html":{},"classes/PedalStatus.html":{},"injectables/PedalsService.html":{},"classes/Shape.html":{}}}],["enough",{"_index":4495,"title":{},"body":{"index.html":{}}}],["enter",{"_index":2255,"title":{},"body":{"interfaces/IOTuple.html":{},"interfaces/TreeNode.html":{}}}],["entered",{"_index":4645,"title":{},"body":{"miscellaneous/typealiases.html":{}}}],["entering",{"_index":2150,"title":{},"body":{"interfaces/DynamicOperation.html":{},"interfaces/OpInput.html":{},"interfaces/OperationClassification.html":{},"interfaces/TreeOperation.html":{}}}],["entire",{"_index":4592,"title":{},"body":{"index.html":{}}}],["entity",{"_index":4543,"title":{},"body":{"index.html":{}}}],["entries",{"_index":2565,"title":{},"body":{"injectables/MappingsService.html":{}}}],["entry",{"_index":2932,"title":{},"body":{"components/NoteComponent.html":{}}}],["ep10cm",{"_index":2087,"title":{},"body":{"components/DraftdetailComponent.html":{}}}],["epi",{"_index":2085,"title":{},"body":{"components/DraftdetailComponent.html":{}}}],["equal",{"_index":2312,"title":{},"body":{"interfaces/Ink.html":{},"injectables/InkService.html":{}}}],["erasing",{"_index":2318,"title":{},"body":{"interfaces/Ink.html":{},"injectables/InkService.html":{}}}],["err",{"_index":3347,"title":{},"body":{"components/ParameterComponent.html":{}}}],["error",{"_index":2121,"title":{},"body":{"components/DraftdetailComponent.html":{},"interfaces/OperationParam.html":{},"components/ParameterComponent.html":{},"classes/Params.html":{}}}],["etc",{"_index":4462,"title":{},"body":{"index.html":{}}}],["evenly",{"_index":4123,"title":{},"body":{"components/SnackbarComponent.html":{}}}],["event",{"_index":965,"title":{},"body":{"classes/DBListener.html":{},"classes/DBListenerArray.html":{},"classes/DBNode.html":{},"classes/DBNodeArray.html":{},"classes/DBTwoWay.html":{},"classes/DBTwoWayArray.html":{},"classes/DBWriteBuffer.html":{},"classes/DBWriter.html":{},"classes/DBWriterArray.html":{},"components/DraftdetailComponent.html":{},"components/MixerViewComponent.html":{},"interfaces/NodeMethods.html":{},"interfaces/NodeParams.html":{},"components/NoteComponent.html":{},"classes/OnlineStatus.html":{},"components/OpsComponent.html":{},"interfaces/Pedal.html":{},"classes/PedalStatus.html":{},"injectables/PedalsService.html":{},"components/VirtualPedalsComponent.html":{}}}],["event.key",{"_index":4288,"title":{},"body":{"components/VirtualPedalsComponent.html":{}}}],["event.option.value",{"_index":3256,"title":{},"body":{"components/OpsComponent.html":{}}}],["event.pointerposition",{"_index":2824,"title":{},"body":{"components/MixerViewComponent.html":{},"components/NoteComponent.html":{}}}],["event.target",{"_index":2045,"title":{},"body":{"components/DraftdetailComponent.html":{}}}],["eventemitter",{"_index":980,"title":{},"body":{"classes/DBListener.html":{},"classes/DBListenerArray.html":{},"classes/DBNode.html":{},"classes/DBNodeArray.html":{},"classes/DBTwoWay.html":{},"classes/DBTwoWayArray.html":{},"classes/DBWriteBuffer.html":{},"classes/DBWriter.html":{},"classes/DBWriterArray.html":{},"interfaces/DesignActions.html":{},"interfaces/DraftOperationClassification.html":{},"components/InletComponent.html":{},"interfaces/LoomConfig.html":{},"components/MixerViewComponent.html":{},"interfaces/NodeMethods.html":{},"interfaces/NodeParams.html":{},"components/NoteComponent.html":{},"classes/OnlineStatus.html":{},"components/OpsComponent.html":{},"components/ParameterComponent.html":{},"interfaces/Pedal.html":{},"classes/PedalConfig.html":{},"classes/PedalStatus.html":{},"injectables/PedalsService.html":{},"components/PlayerComponent.html":{},"injectables/PlayerService.html":{}}}],["events",{"_index":939,"title":{},"body":{"classes/DBListener.html":{},"classes/DBListenerArray.html":{},"classes/DBNode.html":{},"classes/DBNodeArray.html":{},"classes/DBTwoWay.html":{},"classes/DBTwoWayArray.html":{},"classes/DBWriteBuffer.html":{},"classes/DBWriter.html":{},"classes/DBWriterArray.html":{},"interfaces/DraftOperationClassification.html":{},"interfaces/LoomConfig.html":{},"components/MixerViewComponent.html":{},"interfaces/NodeMethods.html":{},"interfaces/NodeParams.html":{},"components/NoteComponent.html":{},"classes/OnlineStatus.html":{},"interfaces/Pedal.html":{},"classes/PedalConfig.html":{},"classes/PedalStatus.html":{},"injectables/PedalsService.html":{},"injectables/PlayerService.html":{},"components/SnackbarComponent.html":{}}}],["everything",{"_index":193,"title":{},"body":{"classes/AbstractOpFactory.html":{},"classes/BaseOp.html":{},"classes/Branch.html":{},"classes/Bus.html":{},"interfaces/DynamicOperation.html":{},"classes/Merge.html":{},"interfaces/OpClassifier.html":{},"interfaces/OpInput.html":{},"interfaces/OperationClassification.html":{},"interfaces/OperationProperties.html":{},"interfaces/Pedal.html":{},"classes/PedalStatus.html":{},"injectables/PedalsService.html":{},"classes/Pipe.html":{},"classes/Seed.html":{},"interfaces/TopologyDef.html":{},"interfaces/TreeOperation.html":{}}}],["exactly",{"_index":113,"title":{},"body":{"classes/AbstractOpFactory.html":{},"classes/BaseOp.html":{},"classes/Branch.html":{},"classes/Bus.html":{},"classes/Merge.html":{},"interfaces/OpClassifier.html":{},"interfaces/OperationProperties.html":{},"classes/Pipe.html":{},"classes/Seed.html":{},"interfaces/TopologyDef.html":{}}}],["example",{"_index":564,"title":{},"body":{"interfaces/ChainOp.html":{},"interfaces/DraftMap.html":{},"interfaces/IOTuple.html":{},"interfaces/Interlacement.html":{},"interfaces/InterlacementVal.html":{},"interfaces/PairedOp.html":{},"interfaces/PedalEvent.html":{},"interfaces/PlayerOp.html":{},"interfaces/TreeNode.html":{},"miscellaneous/typealiases.html":{}}}],["execute",{"_index":613,"title":{},"body":{"interfaces/ChainOp.html":{},"interfaces/PairedOp.html":{},"interfaces/PedalEvent.html":{},"interfaces/PlayerOp.html":{}}}],["executes",{"_index":2171,"title":{},"body":{"interfaces/DynamicOperation.html":{},"interfaces/OpInput.html":{},"interfaces/OperationClassification.html":{},"interfaces/TreeOperation.html":{}}}],["existing",{"_index":506,"title":{},"body":{"interfaces/ChainIndex.html":{},"components/OpSequencerComponent.html":{},"injectables/SequencerService.html":{},"miscellaneous/typealiases.html":{}}}],["exists",{"_index":1615,"title":{},"body":{"interfaces/DraftMap.html":{},"interfaces/DraftOperationClassification.html":{},"interfaces/Interlacement.html":{},"interfaces/InterlacementVal.html":{},"interfaces/LoomConfig.html":{},"classes/PedalConfig.html":{},"injectables/PlayerService.html":{}}}],["expand",{"_index":4604,"title":{},"body":{"index.html":{}}}],["expanded",{"_index":3131,"title":{},"body":{"components/OpSequencerComponent.html":{},"components/PlayerComponent.html":{},"components/WeavingStateComponent.html":{}}}],["expanded:focus",{"_index":3122,"title":{},"body":{"components/OpSequencerComponent.html":{},"components/PlayerComponent.html":{},"components/WeavingStateComponent.html":{}}}],["expanded:hover",{"_index":3129,"title":{},"body":{"components/OpSequencerComponent.html":{},"components/PlayerComponent.html":{},"components/WeavingStateComponent.html":{}}}],["expansion",{"_index":3119,"title":{},"body":{"components/OpSequencerComponent.html":{},"components/PlayerComponent.html":{},"components/WeavingStateComponent.html":{}}}],["expansionpanel",{"_index":3662,"title":{},"body":{"components/PlayerComponent.html":{}}}],["expansionpanel.close",{"_index":3664,"title":{},"body":{"components/PlayerComponent.html":{}}}],["expects",{"_index":1037,"title":{},"body":{"classes/DBListener.html":{},"classes/DBListenerArray.html":{},"classes/DBNode.html":{},"classes/DBNodeArray.html":{},"classes/DBTwoWay.html":{},"classes/DBTwoWayArray.html":{},"classes/DBWriteBuffer.html":{},"classes/DBWriter.html":{},"classes/DBWriterArray.html":{},"interfaces/NodeMethods.html":{},"interfaces/NodeParams.html":{},"classes/OnlineStatus.html":{}}}],["experimentation",{"_index":4473,"title":{},"body":{"index.html":{}}}],["explaining",{"_index":3163,"title":{},"body":{"interfaces/OperationParam.html":{},"classes/Params.html":{}}}],["export",{"_index":83,"title":{},"body":{"classes/AbstractOpFactory.html":{},"classes/BaseOp.html":{},"interfaces/Bounds.html":{},"classes/Branch.html":{},"classes/Bus.html":{},"classes/Cell.html":{},"interfaces/ChainIndex.html":{},"interfaces/ChainOp.html":{},"components/ConnectionComponent.html":{},"interfaces/Crossing.html":{},"classes/DBListener.html":{},"classes/DBListenerArray.html":{},"classes/DBNode.html":{},"classes/DBNodeArray.html":{},"classes/DBTwoWay.html":{},"classes/DBTwoWayArray.html":{},"classes/DBWriteBuffer.html":{},"classes/DBWriter.html":{},"classes/DBWriterArray.html":{},"interfaces/DensityUnits.html":{},"interfaces/DesignActions.html":{},"interfaces/DesignMode.html":{},"interfaces/DraftMap.html":{},"interfaces/DraftNodeProxy.html":{},"interfaces/DraftOperationClassification.html":{},"components/DraftdetailComponent.html":{},"interfaces/DynamicOperation.html":{},"interfaces/FileObj.html":{},"interfaces/FileSaver.html":{},"interfaces/Fileloader.html":{},"interfaces/IOTuple.html":{},"components/ImageComponent.html":{},"interfaces/Ink.html":{},"injectables/InkService.html":{},"components/InletComponent.html":{},"interfaces/Interlacement.html":{},"interfaces/InterlacementVal.html":{},"injectables/LayersService.html":{},"interfaces/LoadResponse.html":{},"interfaces/LoomConfig.html":{},"interfaces/LoomTypes.html":{},"injectables/MappingsService.html":{},"directives/MarqueeComponent.html":{},"interfaces/MaterialTypes.html":{},"classes/Merge.html":{},"modules/MixerModule.html":{},"components/MixerViewComponent.html":{},"interfaces/NodeComponentProxy.html":{},"interfaces/NodeMethods.html":{},"interfaces/NodeParams.html":{},"components/NoteComponent.html":{},"classes/OnlineStatus.html":{},"interfaces/OpClassifier.html":{},"interfaces/OpComponentProxy.html":{},"components/OpHelpModal.html":{},"interfaces/OpInput.html":{},"classes/OpSequencer.html":{},"components/OpSequencerComponent.html":{},"interfaces/OperationClassification.html":{},"interfaces/OperationParam.html":{},"interfaces/OperationProperties.html":{},"components/OpsComponent.html":{},"interfaces/PairedOp.html":{},"components/ParameterComponent.html":{},"classes/Params.html":{},"interfaces/Pedal.html":{},"classes/PedalConfig.html":{},"interfaces/PedalEvent.html":{},"classes/PedalStatus.html":{},"injectables/PedalsService.html":{},"classes/Pipe.html":{},"components/PlayerComponent.html":{},"modules/PlayerModule.html":{},"interfaces/PlayerOp.html":{},"injectables/PlayerService.html":{},"interfaces/PlayerState.html":{},"interfaces/PlayerState-1.html":{},"interfaces/Point.html":{},"classes/Render.html":{},"interfaces/SaveObj.html":{},"classes/Seed.html":{},"classes/Selection.html":{},"directives/SelectionComponent.html":{},"injectables/SequencerService.html":{},"classes/Shape.html":{},"classes/Shape-1.html":{},"classes/Shuttle.html":{},"components/SnackbarComponent.html":{},"interfaces/StatusMessage.html":{},"classes/System.html":{},"interfaces/TopologyDef.html":{},"interfaces/TreeNode.html":{},"interfaces/TreeNodeProxy.html":{},"interfaces/TreeOperation.html":{},"interfaces/Vertex.html":{},"interfaces/ViewModes.html":{},"injectables/ViewportService.html":{},"components/VirtualPedalsComponent.html":{},"interfaces/WeavingLog.html":{},"interfaces/WeavingPick.html":{},"interfaces/WeavingPick-1.html":{},"components/WeavingStateComponent.html":{},"interfaces/YarnPath.html":{}}}],["exports",{"_index":3694,"title":{},"body":{"modules/PlayerModule.html":{}}}],["extends",{"_index":209,"title":{},"body":{"classes/AbstractOpFactory.html":{},"classes/BaseOp.html":{},"classes/Branch.html":{},"classes/Bus.html":{},"interfaces/ChainIndex.html":{},"interfaces/ChainOp.html":{},"classes/DBListener.html":{},"classes/DBListenerArray.html":{},"classes/DBNode.html":{},"classes/DBNodeArray.html":{},"classes/DBTwoWay.html":{},"classes/DBTwoWayArray.html":{},"classes/DBWriteBuffer.html":{},"classes/DBWriter.html":{},"classes/DBWriterArray.html":{},"interfaces/DynamicOperation.html":{},"injectables/MappingsService.html":{},"classes/Merge.html":{},"interfaces/NodeMethods.html":{},"interfaces/NodeParams.html":{},"classes/OnlineStatus.html":{},"interfaces/OpClassifier.html":{},"interfaces/OpInput.html":{},"interfaces/OperationClassification.html":{},"interfaces/OperationProperties.html":{},"interfaces/PairedOp.html":{},"interfaces/Pedal.html":{},"interfaces/PedalEvent.html":{},"classes/PedalStatus.html":{},"injectables/PedalsService.html":{},"classes/Pipe.html":{},"interfaces/PlayerOp.html":{},"classes/Seed.html":{},"injectables/SequencerService.html":{},"interfaces/TopologyDef.html":{},"interfaces/TreeOperation.html":{}}}],["extension",{"_index":2279,"title":{},"body":{"interfaces/IOTuple.html":{},"interfaces/OperationParam.html":{},"classes/Params.html":{},"interfaces/TreeNode.html":{},"miscellaneous/typealiases.html":{}}}],["extra",{"_index":3154,"title":{},"body":{"interfaces/OperationParam.html":{},"classes/Params.html":{},"miscellaneous/typealiases.html":{}}}],["extract",{"_index":3182,"title":{},"body":{"interfaces/OperationParam.html":{},"classes/Params.html":{},"miscellaneous/functions.html":{}}}],["f6ff00",{"_index":3109,"title":{},"body":{"components/OpSequencerComponent.html":{}}}],["fa",{"_index":2314,"title":{},"body":{"interfaces/Ink.html":{},"injectables/InkService.html":{}}}],["factor",{"_index":2715,"title":{},"body":{"components/MixerViewComponent.html":{}}}],["factor:number",{"_index":2767,"title":{},"body":{"components/MixerViewComponent.html":{}}}],["factory",{"_index":271,"title":{},"body":{"classes/AbstractOpFactory.html":{},"classes/BaseOp.html":{},"classes/Branch.html":{},"classes/Bus.html":{},"classes/Merge.html":{},"interfaces/OpClassifier.html":{},"interfaces/OperationProperties.html":{},"classes/Pipe.html":{},"classes/Seed.html":{},"interfaces/TopologyDef.html":{}}}],["factory/typescript",{"_index":279,"title":{},"body":{"classes/AbstractOpFactory.html":{},"classes/BaseOp.html":{},"classes/Branch.html":{},"classes/Bus.html":{},"classes/Merge.html":{},"interfaces/OpClassifier.html":{},"interfaces/OperationProperties.html":{},"classes/Pipe.html":{},"classes/Seed.html":{},"interfaces/TopologyDef.html":{}}}],["fairly",{"_index":4492,"title":{},"body":{"index.html":{}}}],["false",{"_index":393,"title":{},"body":{"classes/Cell.html":{},"interfaces/ChainIndex.html":{},"classes/DBListener.html":{},"classes/DBListenerArray.html":{},"classes/DBNode.html":{},"classes/DBNodeArray.html":{},"classes/DBTwoWay.html":{},"classes/DBTwoWayArray.html":{},"classes/DBWriteBuffer.html":{},"classes/DBWriter.html":{},"classes/DBWriterArray.html":{},"interfaces/DesignActions.html":{},"interfaces/DraftOperationClassification.html":{},"components/DraftdetailComponent.html":{},"interfaces/Ink.html":{},"injectables/InkService.html":{},"interfaces/LoomConfig.html":{},"injectables/MappingsService.html":{},"directives/MarqueeComponent.html":{},"interfaces/NodeMethods.html":{},"interfaces/NodeParams.html":{},"classes/OnlineStatus.html":{},"classes/OpSequencer.html":{},"interfaces/OperationParam.html":{},"classes/Params.html":{},"interfaces/Pedal.html":{},"classes/PedalConfig.html":{},"classes/PedalStatus.html":{},"injectables/PedalsService.html":{},"components/PlayerComponent.html":{},"injectables/PlayerService.html":{},"interfaces/PlayerState.html":{},"interfaces/PlayerState-1.html":{},"directives/SelectionComponent.html":{},"injectables/SequencerService.html":{},"classes/Shuttle.html":{},"classes/System.html":{},"interfaces/WeavingLog.html":{},"interfaces/WeavingPick.html":{},"interfaces/WeavingPick-1.html":{},"components/WeavingStateComponent.html":{}}}],["falsestate",{"_index":3162,"title":{},"body":{"interfaces/OperationParam.html":{},"classes/Params.html":{}}}],["fancy",{"_index":65,"title":{},"body":{"classes/AbstractOpFactory.html":{},"classes/BaseOp.html":{},"classes/Branch.html":{},"classes/Bus.html":{},"classes/Merge.html":{},"interfaces/OpClassifier.html":{},"interfaces/OperationProperties.html":{},"classes/Pipe.html":{},"classes/Seed.html":{},"interfaces/TopologyDef.html":{},"miscellaneous/typealiases.html":{}}}],["far",{"_index":1632,"title":{},"body":{"interfaces/DraftMap.html":{},"interfaces/Ink.html":{},"injectables/InkService.html":{},"interfaces/Interlacement.html":{},"interfaces/InterlacementVal.html":{},"interfaces/PlayerState.html":{},"interfaces/PlayerState-1.html":{},"interfaces/WeavingLog.html":{},"interfaces/WeavingPick.html":{},"interfaces/WeavingPick-1.html":{}}}],["fas",{"_index":2313,"title":{},"body":{"interfaces/Ink.html":{},"injectables/InkService.html":{}}}],["fc",{"_index":2386,"title":{},"body":{"components/InletComponent.html":{},"components/ParameterComponent.html":{}}}],["fd6d9d",{"_index":3115,"title":{},"body":{"components/OpSequencerComponent.html":{},"components/PlayerComponent.html":{},"components/WeavingStateComponent.html":{}}}],["features",{"_index":4602,"title":{},"body":{"index.html":{}}}],["few",{"_index":4550,"title":{},"body":{"index.html":{}}}],["ff3860",{"_index":2123,"title":{},"body":{"components/DraftdetailComponent.html":{}}}],["ff4081",{"_index":809,"title":{},"body":{"components/ConnectionComponent.html":{},"components/MixerViewComponent.html":{},"components/NoteComponent.html":{},"components/OpSequencerComponent.html":{},"components/PlayerComponent.html":{},"components/VirtualPedalsComponent.html":{},"components/WeavingStateComponent.html":{}}}],["fff",{"_index":2490,"title":{},"body":{"components/InletComponent.html":{}}}],["ffffff",{"_index":3098,"title":{},"body":{"components/OpSequencerComponent.html":{},"components/PlayerComponent.html":{},"components/WeavingStateComponent.html":{}}}],["field",{"_index":3094,"title":{},"body":{"components/OpSequencerComponent.html":{},"components/OpsComponent.html":{},"components/WeavingStateComponent.html":{}}}],["fields",{"_index":224,"title":{},"body":{"classes/AbstractOpFactory.html":{},"classes/BaseOp.html":{},"classes/Branch.html":{},"classes/Bus.html":{},"classes/Merge.html":{},"interfaces/OpClassifier.html":{},"interfaces/OperationProperties.html":{},"classes/Pipe.html":{},"classes/Seed.html":{},"interfaces/TopologyDef.html":{}}}],["file",{"_index":5,"title":{},"body":{"classes/AbstractOpFactory.html":{},"classes/BaseOp.html":{},"interfaces/Bounds.html":{},"classes/Branch.html":{},"classes/Bus.html":{},"classes/Cell.html":{},"interfaces/ChainIndex.html":{},"interfaces/ChainOp.html":{},"components/ConnectionComponent.html":{},"interfaces/Crossing.html":{},"classes/DBListener.html":{},"classes/DBListenerArray.html":{},"classes/DBNode.html":{},"classes/DBNodeArray.html":{},"classes/DBTwoWay.html":{},"classes/DBTwoWayArray.html":{},"classes/DBWriteBuffer.html":{},"classes/DBWriter.html":{},"classes/DBWriterArray.html":{},"interfaces/DensityUnits.html":{},"interfaces/DesignActions.html":{},"interfaces/DesignMode.html":{},"interfaces/DraftMap.html":{},"interfaces/DraftNodeProxy.html":{},"interfaces/DraftOperationClassification.html":{},"components/DraftdetailComponent.html":{},"interfaces/DynamicOperation.html":{},"interfaces/FileObj.html":{},"interfaces/FileSaver.html":{},"interfaces/Fileloader.html":{},"interfaces/IOTuple.html":{},"components/ImageComponent.html":{},"interfaces/Ink.html":{},"injectables/InkService.html":{},"components/InletComponent.html":{},"interfaces/Interlacement.html":{},"interfaces/InterlacementVal.html":{},"injectables/LayersService.html":{},"interfaces/LoadResponse.html":{},"interfaces/LoomConfig.html":{},"interfaces/LoomTypes.html":{},"injectables/MappingsService.html":{},"directives/MarqueeComponent.html":{},"interfaces/MaterialTypes.html":{},"classes/Merge.html":{},"modules/MixerModule.html":{},"components/MixerViewComponent.html":{},"interfaces/NodeComponentProxy.html":{},"interfaces/NodeMethods.html":{},"interfaces/NodeParams.html":{},"components/NoteComponent.html":{},"classes/OnlineStatus.html":{},"interfaces/OpClassifier.html":{},"interfaces/OpComponentProxy.html":{},"components/OpHelpModal.html":{},"interfaces/OpInput.html":{},"classes/OpSequencer.html":{},"components/OpSequencerComponent.html":{},"interfaces/OperationClassification.html":{},"interfaces/OperationParam.html":{},"interfaces/OperationProperties.html":{},"components/OpsComponent.html":{},"interfaces/PairedOp.html":{},"components/ParameterComponent.html":{},"classes/Params.html":{},"interfaces/Pedal.html":{},"classes/PedalConfig.html":{},"interfaces/PedalEvent.html":{},"classes/PedalStatus.html":{},"injectables/PedalsService.html":{},"classes/Pipe.html":{},"components/PlayerComponent.html":{},"modules/PlayerModule.html":{},"interfaces/PlayerOp.html":{},"injectables/PlayerService.html":{},"interfaces/PlayerState.html":{},"interfaces/PlayerState-1.html":{},"interfaces/Point.html":{},"classes/Render.html":{},"interfaces/SaveObj.html":{},"classes/Seed.html":{},"classes/Selection.html":{},"directives/SelectionComponent.html":{},"injectables/SequencerService.html":{},"classes/Shape.html":{},"classes/Shape-1.html":{},"classes/Shuttle.html":{},"components/SnackbarComponent.html":{},"interfaces/StatusMessage.html":{},"classes/System.html":{},"interfaces/TopologyDef.html":{},"interfaces/TreeNode.html":{},"interfaces/TreeNodeProxy.html":{},"interfaces/TreeOperation.html":{},"interfaces/Vertex.html":{},"interfaces/ViewModes.html":{},"injectables/ViewportService.html":{},"components/VirtualPedalsComponent.html":{},"interfaces/WeavingLog.html":{},"interfaces/WeavingPick.html":{},"interfaces/WeavingPick-1.html":{},"components/WeavingStateComponent.html":{},"interfaces/YarnPath.html":{},"index.html":{},"miscellaneous/typealiases.html":{}}}],["fileloader",{"_index":1687,"title":{"interfaces/Fileloader.html":{}},"body":{"interfaces/DraftNodeProxy.html":{},"interfaces/FileObj.html":{},"interfaces/FileSaver.html":{},"interfaces/Fileloader.html":{},"interfaces/LoadResponse.html":{},"interfaces/NodeComponentProxy.html":{},"interfaces/OpComponentProxy.html":{},"interfaces/SaveObj.html":{},"interfaces/StatusMessage.html":{},"interfaces/TreeNodeProxy.html":{}}}],["filename",{"_index":1681,"title":{},"body":{"interfaces/DraftNodeProxy.html":{},"interfaces/FileObj.html":{},"interfaces/FileSaver.html":{},"interfaces/Fileloader.html":{},"interfaces/LoadResponse.html":{},"interfaces/NodeComponentProxy.html":{},"interfaces/OpComponentProxy.html":{},"interfaces/SaveObj.html":{},"interfaces/StatusMessage.html":{},"interfaces/TreeNodeProxy.html":{}}}],["fileobj",{"_index":1680,"title":{"interfaces/FileObj.html":{}},"body":{"interfaces/DraftNodeProxy.html":{},"interfaces/FileObj.html":{},"interfaces/FileSaver.html":{},"interfaces/Fileloader.html":{},"interfaces/LoadResponse.html":{},"interfaces/NodeComponentProxy.html":{},"interfaces/OpComponentProxy.html":{},"interfaces/SaveObj.html":{},"interfaces/StatusMessage.html":{},"interfaces/TreeNodeProxy.html":{}}}],["fileparam",{"_index":3177,"title":{},"body":{"interfaces/OperationParam.html":{},"components/ParameterComponent.html":{},"classes/Params.html":{},"miscellaneous/typealiases.html":{}}}],["files",{"_index":1658,"title":{},"body":{"interfaces/DraftNodeProxy.html":{},"interfaces/DynamicOperation.html":{},"interfaces/FileObj.html":{},"interfaces/FileSaver.html":{},"interfaces/Fileloader.html":{},"interfaces/LoadResponse.html":{},"interfaces/NodeComponentProxy.html":{},"interfaces/OpComponentProxy.html":{},"interfaces/OpInput.html":{},"interfaces/OperationClassification.html":{},"interfaces/SaveObj.html":{},"interfaces/StatusMessage.html":{},"interfaces/TreeNodeProxy.html":{},"interfaces/TreeOperation.html":{},"index.html":{}}}],["filesaver",{"_index":1689,"title":{"interfaces/FileSaver.html":{}},"body":{"interfaces/DraftNodeProxy.html":{},"interfaces/FileObj.html":{},"interfaces/FileSaver.html":{},"interfaces/Fileloader.html":{},"interfaces/LoadResponse.html":{},"interfaces/NodeComponentProxy.html":{},"interfaces/OpComponentProxy.html":{},"interfaces/SaveObj.html":{},"interfaces/StatusMessage.html":{},"interfaces/TreeNodeProxy.html":{}}}],["fileservice",{"_index":1321,"title":{},"body":{"interfaces/DesignActions.html":{}}}],["filled",{"_index":4004,"title":{},"body":{"classes/Shape-1.html":{}}}],["filling",{"_index":3937,"title":{},"body":{"classes/Shape.html":{}}}],["fills",{"_index":3961,"title":{},"body":{"classes/Shape.html":{}}}],["filter",{"_index":2653,"title":{},"body":{"directives/MarqueeComponent.html":{},"directives/SelectionComponent.html":{}}}],["filter(el",{"_index":3854,"title":{},"body":{"classes/Render.html":{}}}],["filteredoptions",{"_index":3206,"title":{},"body":{"components/OpsComponent.html":{}}}],["filtervalue",{"_index":3249,"title":{},"body":{"components/OpsComponent.html":{}}}],["find",{"_index":2899,"title":{},"body":{"components/NoteComponent.html":{},"index.html":{}}}],["fine",{"_index":2073,"title":{},"body":{"components/DraftdetailComponent.html":{},"index.html":{}}}],["finetune",{"_index":1563,"title":{},"body":{"interfaces/DesignActions.html":{}}}],["firebase",{"_index":986,"title":{},"body":{"classes/DBListener.html":{},"classes/DBListenerArray.html":{},"classes/DBNode.html":{},"classes/DBNodeArray.html":{},"classes/DBTwoWay.html":{},"classes/DBTwoWayArray.html":{},"classes/DBWriteBuffer.html":{},"classes/DBWriter.html":{},"classes/DBWriterArray.html":{},"interfaces/NodeMethods.html":{},"interfaces/NodeParams.html":{},"classes/OnlineStatus.html":{},"interfaces/Pedal.html":{},"classes/PedalStatus.html":{},"injectables/PedalsService.html":{},"dependencies.html":{}}}],["firebase/database",{"_index":977,"title":{},"body":{"classes/DBListener.html":{},"classes/DBListenerArray.html":{},"classes/DBNode.html":{},"classes/DBNodeArray.html":{},"classes/DBTwoWay.html":{},"classes/DBTwoWayArray.html":{},"classes/DBWriteBuffer.html":{},"classes/DBWriter.html":{},"classes/DBWriterArray.html":{},"interfaces/NodeMethods.html":{},"interfaces/NodeParams.html":{},"classes/OnlineStatus.html":{},"interfaces/Pedal.html":{},"classes/PedalStatus.html":{},"injectables/PedalsService.html":{}}}],["first",{"_index":485,"title":{},"body":{"interfaces/ChainIndex.html":{},"components/PlayerComponent.html":{},"injectables/SequencerService.html":{},"classes/Shape.html":{},"components/WeavingStateComponent.html":{},"miscellaneous/functions.html":{},"index.html":{}}}],["first_op",{"_index":1761,"title":{},"body":{"interfaces/DraftOperationClassification.html":{},"interfaces/LoomConfig.html":{},"injectables/MappingsService.html":{},"classes/PedalConfig.html":{},"injectables/PlayerService.html":{}}}],["flag",{"_index":1372,"title":{},"body":{"interfaces/DesignActions.html":{},"interfaces/OperationParam.html":{},"classes/Params.html":{},"index.html":{}}}],["flex",{"_index":2098,"title":{},"body":{"components/DraftdetailComponent.html":{},"components/InletComponent.html":{},"components/MixerViewComponent.html":{},"components/NoteComponent.html":{},"components/OpSequencerComponent.html":{},"components/OpsComponent.html":{},"components/ParameterComponent.html":{},"components/PlayerComponent.html":{},"components/SnackbarComponent.html":{},"components/VirtualPedalsComponent.html":{},"components/WeavingStateComponent.html":{}}}],["flipx",{"_index":1841,"title":{},"body":{"interfaces/DraftOperationClassification.html":{},"interfaces/LoomConfig.html":{},"classes/PedalConfig.html":{},"injectables/PlayerService.html":{}}}],["flipy",{"_index":1843,"title":{},"body":{"interfaces/DraftOperationClassification.html":{},"interfaces/LoomConfig.html":{},"classes/PedalConfig.html":{},"injectables/PlayerService.html":{},"components/WeavingStateComponent.html":{}}}],["float",{"_index":925,"title":{},"body":{"interfaces/Crossing.html":{},"interfaces/Vertex.html":{},"interfaces/YarnPath.html":{}}}],["floor",{"_index":4442,"title":{},"body":{"index.html":{}}}],["following",{"_index":4596,"title":{},"body":{"index.html":{}}}],["font",{"_index":2110,"title":{},"body":{"components/DraftdetailComponent.html":{},"components/MixerViewComponent.html":{},"components/NoteComponent.html":{},"components/OpHelpModal.html":{},"components/OpSequencerComponent.html":{},"components/OpsComponent.html":{},"components/ParameterComponent.html":{},"components/SnackbarComponent.html":{},"components/WeavingStateComponent.html":{}}}],["foor",{"_index":1376,"title":{},"body":{"interfaces/DesignActions.html":{}}}],["footer",{"_index":2125,"title":{},"body":{"components/DraftdetailComponent.html":{}}}],["for(let",{"_index":2440,"title":{},"body":{"components/InletComponent.html":{},"classes/Render.html":{},"classes/Shape-1.html":{}}}],["for_timeline:boolean",{"_index":1690,"title":{},"body":{"interfaces/DraftNodeProxy.html":{},"interfaces/FileObj.html":{},"interfaces/FileSaver.html":{},"interfaces/Fileloader.html":{},"interfaces/LoadResponse.html":{},"interfaces/NodeComponentProxy.html":{},"interfaces/OpComponentProxy.html":{},"interfaces/SaveObj.html":{},"interfaces/StatusMessage.html":{},"interfaces/TreeNodeProxy.html":{}}}],["forbiddeninput",{"_index":3303,"title":{},"body":{"components/ParameterComponent.html":{}}}],["force",{"_index":1440,"title":{},"body":{"interfaces/DesignActions.html":{},"components/PlayerComponent.html":{}}}],["forever",{"_index":2271,"title":{},"body":{"interfaces/IOTuple.html":{},"interfaces/TreeNode.html":{}}}],["form",{"_index":74,"title":{},"body":{"classes/AbstractOpFactory.html":{},"classes/BaseOp.html":{},"classes/Branch.html":{},"classes/Bus.html":{},"classes/Cell.html":{},"interfaces/Crossing.html":{},"interfaces/DraftNodeProxy.html":{},"interfaces/FileObj.html":{},"interfaces/FileSaver.html":{},"interfaces/Fileloader.html":{},"interfaces/LoadResponse.html":{},"classes/Merge.html":{},"interfaces/NodeComponentProxy.html":{},"interfaces/OpClassifier.html":{},"interfaces/OpComponentProxy.html":{},"interfaces/OperationProperties.html":{},"components/OpsComponent.html":{},"components/ParameterComponent.html":{},"classes/Pipe.html":{},"interfaces/SaveObj.html":{},"classes/Seed.html":{},"interfaces/StatusMessage.html":{},"interfaces/TopologyDef.html":{},"interfaces/TreeNodeProxy.html":{},"interfaces/Vertex.html":{},"components/WeavingStateComponent.html":{},"interfaces/YarnPath.html":{},"miscellaneous/typealiases.html":{}}}],["format",{"_index":2140,"title":{},"body":{"interfaces/DynamicOperation.html":{},"interfaces/OpInput.html":{},"interfaces/OperationClassification.html":{},"interfaces/TreeOperation.html":{}}}],["formatname",{"_index":4404,"title":{},"body":{"miscellaneous/functions.html":{}}}],["formatname(drafts",{"_index":4423,"title":{},"body":{"miscellaneous/functions.html":{}}}],["formatted",{"_index":3332,"title":{},"body":{"components/ParameterComponent.html":{}}}],["formatting",{"_index":3559,"title":{},"body":{"injectables/PedalsService.html":{}}}],["formcontrol",{"_index":2418,"title":{},"body":{"components/InletComponent.html":{},"components/OpsComponent.html":{},"components/ParameterComponent.html":{}}}],["formcontrol(this.draftparam.value",{"_index":3319,"title":{},"body":{"components/ParameterComponent.html":{}}}],["formcontrol(this.param.value",{"_index":3310,"title":{},"body":{"components/ParameterComponent.html":{}}}],["formcontrol(this.parsedefaultinletvalue(this.inlet.type",{"_index":2450,"title":{},"body":{"components/InletComponent.html":{}}}],["formcontrol(this.stringparam.value",{"_index":3315,"title":{},"body":{"components/ParameterComponent.html":{}}}],["formgroupdirective",{"_index":2425,"title":{},"body":{"components/InletComponent.html":{},"components/ParameterComponent.html":{}}}],["fortawesome/fontawesome",{"_index":4362,"title":{},"body":{"dependencies.html":{}}}],["forward",{"_index":541,"title":{},"body":{"interfaces/ChainOp.html":{},"interfaces/DraftOperationClassification.html":{},"interfaces/LoomConfig.html":{},"classes/OpSequencer.html":{},"interfaces/PairedOp.html":{},"classes/PedalConfig.html":{},"interfaces/PedalEvent.html":{},"interfaces/PlayerOp.html":{},"injectables/PlayerService.html":{}}}],["forward.perform(res",{"_index":3071,"title":{},"body":{"classes/OpSequencer.html":{}}}],["found",{"_index":2343,"title":{},"body":{"interfaces/Ink.html":{},"injectables/InkService.html":{}}}],["frames",{"_index":2088,"title":{},"body":{"components/DraftdetailComponent.html":{}}}],["framework",{"_index":4480,"title":{},"body":{"index.html":{}}}],["free",{"_index":4363,"title":{},"body":{"dependencies.html":{}}}],["freeform",{"_index":4472,"title":{},"body":{"index.html":{}}}],["frequently",{"_index":1388,"title":{},"body":{"interfaces/DesignActions.html":{}}}],["from.bounds.topleft.x",{"_index":792,"title":{},"body":{"components/ConnectionComponent.html":{}}}],["from.bounds.topleft.y",{"_index":794,"title":{},"body":{"components/ConnectionComponent.html":{}}}],["from.id",{"_index":786,"title":{},"body":{"components/ConnectionComponent.html":{}}}],["from_comp",{"_index":823,"title":{},"body":{"components/ConnectionComponent.html":{}}}],["from_comp.bounds.height",{"_index":829,"title":{},"body":{"components/ConnectionComponent.html":{}}}],["from_comp.bounds.topleft.x",{"_index":827,"title":{},"body":{"components/ConnectionComponent.html":{}}}],["from_comp.bounds.topleft.y",{"_index":828,"title":{},"body":{"components/ConnectionComponent.html":{}}}],["from_io",{"_index":737,"title":{},"body":{"components/ConnectionComponent.html":{}}}],["from_io.tn.node.id",{"_index":742,"title":{},"body":{"components/ConnectionComponent.html":{}}}],["front",{"_index":2499,"title":{},"body":{"injectables/LayersService.html":{}}}],["fs",{"_index":1409,"title":{},"body":{"interfaces/DesignActions.html":{}}}],["fsm",{"_index":3731,"title":{},"body":{"interfaces/PlayerState.html":{},"interfaces/PlayerState-1.html":{},"interfaces/WeavingLog.html":{},"interfaces/WeavingPick.html":{},"interfaces/WeavingPick-1.html":{}}}],["function",{"_index":66,"title":{},"body":{"classes/AbstractOpFactory.html":{},"classes/BaseOp.html":{},"classes/Branch.html":{},"classes/Bus.html":{},"interfaces/ChainOp.html":{},"interfaces/DraftOperationClassification.html":{},"interfaces/DynamicOperation.html":{},"interfaces/FileSaver.html":{},"interfaces/Fileloader.html":{},"interfaces/Ink.html":{},"injectables/InkService.html":{},"interfaces/LoomConfig.html":{},"injectables/MappingsService.html":{},"classes/Merge.html":{},"interfaces/OpClassifier.html":{},"components/OpHelpModal.html":{},"interfaces/OpInput.html":{},"classes/OpSequencer.html":{},"interfaces/OperationClassification.html":{},"interfaces/OperationParam.html":{},"interfaces/OperationProperties.html":{},"interfaces/PairedOp.html":{},"components/ParameterComponent.html":{},"classes/Params.html":{},"interfaces/Pedal.html":{},"classes/PedalConfig.html":{},"interfaces/PedalEvent.html":{},"classes/PedalStatus.html":{},"injectables/PedalsService.html":{},"classes/Pipe.html":{},"interfaces/PlayerOp.html":{},"injectables/PlayerService.html":{},"interfaces/PlayerState.html":{},"interfaces/PlayerState-1.html":{},"classes/Seed.html":{},"classes/System.html":{},"interfaces/TopologyDef.html":{},"interfaces/TreeOperation.html":{},"interfaces/WeavingLog.html":{},"interfaces/WeavingPick.html":{},"interfaces/WeavingPick-1.html":{},"miscellaneous/functions.html":{},"index.html":{},"miscellaneous/typealiases.html":{}}}],["function(init",{"_index":568,"title":{},"body":{"interfaces/ChainOp.html":{},"interfaces/PairedOp.html":{},"interfaces/PedalEvent.html":{},"interfaces/PlayerOp.html":{}}}],["functional/reactive",{"_index":4557,"title":{},"body":{"index.html":{}}}],["functionality",{"_index":4521,"title":{},"body":{"index.html":{}}}],["functions",{"_index":82,"title":{"miscellaneous/functions.html":{}},"body":{"classes/AbstractOpFactory.html":{},"classes/BaseOp.html":{},"classes/Branch.html":{},"classes/Bus.html":{},"classes/DBListener.html":{},"classes/DBListenerArray.html":{},"classes/DBNode.html":{},"classes/DBNodeArray.html":{},"classes/DBTwoWay.html":{},"classes/DBTwoWayArray.html":{},"classes/DBWriteBuffer.html":{},"classes/DBWriter.html":{},"classes/DBWriterArray.html":{},"interfaces/DesignActions.html":{},"interfaces/DraftNodeProxy.html":{},"components/DraftdetailComponent.html":{},"interfaces/DynamicOperation.html":{},"interfaces/FileObj.html":{},"interfaces/FileSaver.html":{},"interfaces/Fileloader.html":{},"interfaces/LoadResponse.html":{},"classes/Merge.html":{},"interfaces/NodeComponentProxy.html":{},"interfaces/NodeMethods.html":{},"interfaces/NodeParams.html":{},"classes/OnlineStatus.html":{},"interfaces/OpClassifier.html":{},"interfaces/OpComponentProxy.html":{},"interfaces/OpInput.html":{},"interfaces/OperationClassification.html":{},"interfaces/OperationParam.html":{},"interfaces/OperationProperties.html":{},"classes/Params.html":{},"interfaces/Pedal.html":{},"classes/PedalStatus.html":{},"injectables/PedalsService.html":{},"classes/Pipe.html":{},"interfaces/SaveObj.html":{},"classes/Seed.html":{},"classes/Shape.html":{},"classes/Shape-1.html":{},"interfaces/StatusMessage.html":{},"interfaces/TopologyDef.html":{},"interfaces/TreeNodeProxy.html":{},"interfaces/TreeOperation.html":{},"miscellaneous/functions.html":{},"index.html":{},"miscellaneous/typealiases.html":{}}}],["further",{"_index":4618,"title":{},"body":{"index.html":{}}}],["fwd",{"_index":474,"title":{},"body":{"interfaces/ChainIndex.html":{},"classes/OpSequencer.html":{},"injectables/SequencerService.html":{}}}],["fwd_pedal",{"_index":3910,"title":{},"body":{"injectables/SequencerService.html":{}}}],["g",{"_index":3170,"title":{},"body":{"interfaces/OperationParam.html":{},"components/ParameterComponent.html":{},"classes/Params.html":{}}}],["gap",{"_index":3106,"title":{},"body":{"components/OpSequencerComponent.html":{}}}],["gen_name",{"_index":1584,"title":{},"body":{"interfaces/DesignActions.html":{},"interfaces/DraftMap.html":{},"interfaces/Interlacement.html":{},"interfaces/InterlacementVal.html":{}}}],["generalizes",{"_index":1075,"title":{},"body":{"classes/DBListener.html":{},"classes/DBListenerArray.html":{},"classes/DBNode.html":{},"classes/DBNodeArray.html":{},"classes/DBTwoWay.html":{},"classes/DBTwoWayArray.html":{},"classes/DBWriteBuffer.html":{},"classes/DBWriter.html":{},"classes/DBWriterArray.html":{},"interfaces/NodeMethods.html":{},"interfaces/NodeParams.html":{},"classes/OnlineStatus.html":{}}}],["generate",{"_index":108,"title":{},"body":{"classes/AbstractOpFactory.html":{},"classes/BaseOp.html":{},"classes/Branch.html":{},"classes/Bus.html":{},"interfaces/DynamicOperation.html":{},"classes/Merge.html":{},"interfaces/OpClassifier.html":{},"interfaces/OpInput.html":{},"interfaces/OperationClassification.html":{},"interfaces/OperationProperties.html":{},"classes/Pipe.html":{},"components/PlayerComponent.html":{},"classes/Seed.html":{},"interfaces/TopologyDef.html":{},"interfaces/TreeOperation.html":{},"index.html":{}}}],["generated",{"_index":1340,"title":{},"body":{"interfaces/DesignActions.html":{},"interfaces/DraftMap.html":{},"components/DraftdetailComponent.html":{},"interfaces/Interlacement.html":{},"interfaces/InterlacementVal.html":{},"components/NoteComponent.html":{},"index.html":{}}}],["generates",{"_index":116,"title":{},"body":{"classes/AbstractOpFactory.html":{},"classes/BaseOp.html":{},"classes/Branch.html":{},"classes/Bus.html":{},"interfaces/DraftOperationClassification.html":{},"interfaces/LoomConfig.html":{},"classes/Merge.html":{},"interfaces/OpClassifier.html":{},"components/OpHelpModal.html":{},"interfaces/OperationProperties.html":{},"classes/PedalConfig.html":{},"classes/Pipe.html":{},"injectables/PlayerService.html":{},"classes/Seed.html":{},"interfaces/TopologyDef.html":{}}}],["generative",{"_index":4464,"title":{},"body":{"index.html":{}}}],["generic",{"_index":159,"title":{},"body":{"classes/AbstractOpFactory.html":{},"classes/BaseOp.html":{},"classes/Branch.html":{},"classes/Bus.html":{},"interfaces/ChainIndex.html":{},"classes/Merge.html":{},"interfaces/OpClassifier.html":{},"interfaces/OperationProperties.html":{},"classes/Pipe.html":{},"classes/Seed.html":{},"injectables/SequencerService.html":{},"interfaces/TopologyDef.html":{},"miscellaneous/typealiases.html":{}}}],["genericop",{"_index":529,"title":{},"body":{"interfaces/ChainOp.html":{},"interfaces/DraftOperationClassification.html":{},"interfaces/DynamicOperation.html":{},"interfaces/LoomConfig.html":{},"interfaces/OpInput.html":{},"interfaces/OperationClassification.html":{},"interfaces/PairedOp.html":{},"classes/PedalConfig.html":{},"interfaces/PedalEvent.html":{},"interfaces/PlayerOp.html":{},"injectables/PlayerService.html":{},"interfaces/TreeOperation.html":{},"miscellaneous/functions.html":{}}}],["genericparam",{"_index":3179,"title":{},"body":{"interfaces/OperationParam.html":{},"classes/Params.html":{},"miscellaneous/typealiases.html":{}}}],["germanify",{"_index":1868,"title":{},"body":{"interfaces/DraftOperationClassification.html":{},"interfaces/LoomConfig.html":{},"classes/PedalConfig.html":{},"injectables/PlayerService.html":{}}}],["get(query(this.ref",{"_index":1024,"title":{},"body":{"classes/DBListener.html":{},"classes/DBListenerArray.html":{},"classes/DBNode.html":{},"classes/DBNodeArray.html":{},"classes/DBTwoWay.html":{},"classes/DBTwoWayArray.html":{},"classes/DBWriteBuffer.html":{},"classes/DBWriter.html":{},"classes/DBWriterArray.html":{},"interfaces/NodeMethods.html":{},"interfaces/NodeParams.html":{},"classes/OnlineStatus.html":{}}}],["getabsoluteheight",{"_index":4186,"title":{},"body":{"injectables/ViewportService.html":{}}}],["getabsolutewidth",{"_index":4187,"title":{},"body":{"injectables/ViewportService.html":{}}}],["getactive",{"_index":1208,"title":{},"body":{"classes/DBNode.html":{},"classes/DBNodeArray.html":{},"injectables/SequencerService.html":{}}}],["getactive_draft",{"_index":3585,"title":{},"body":{"injectables/PedalsService.html":{}}}],["getbounds",{"_index":4188,"title":{},"body":{"injectables/ViewportService.html":{}}}],["getcelldims",{"_index":3756,"title":{},"body":{"classes/Render.html":{}}}],["getcelldims(type",{"_index":3781,"title":{},"body":{"classes/Render.html":{}}}],["getcenterpoint",{"_index":4189,"title":{},"body":{"injectables/ViewportService.html":{}}}],["getchar",{"_index":4132,"title":{},"body":{"classes/System.html":{}}}],["getcolor",{"_index":4048,"title":{},"body":{"classes/Shuttle.html":{}}}],["getcurrent",{"_index":3051,"title":{},"body":{"classes/OpSequencer.html":{}}}],["getcurrentview",{"_index":3757,"title":{},"body":{"classes/Render.html":{}}}],["getcx",{"_index":2720,"title":{},"body":{"components/MixerViewComponent.html":{}}}],["getcx(obj",{"_index":2739,"title":{},"body":{"components/MixerViewComponent.html":{}}}],["getdatabase",{"_index":3366,"title":{},"body":{"interfaces/Pedal.html":{},"classes/PedalStatus.html":{},"injectables/PedalsService.html":{}}}],["getdefaultparams",{"_index":530,"title":{},"body":{"interfaces/ChainOp.html":{},"interfaces/DraftOperationClassification.html":{},"interfaces/LoomConfig.html":{},"interfaces/PairedOp.html":{},"classes/PedalConfig.html":{},"interfaces/PedalEvent.html":{},"interfaces/PlayerOp.html":{},"injectables/PlayerService.html":{},"miscellaneous/functions.html":{}}}],["getdefaultparams(base_op",{"_index":630,"title":{},"body":{"interfaces/ChainOp.html":{},"interfaces/PairedOp.html":{},"interfaces/PedalEvent.html":{},"interfaces/PlayerOp.html":{}}}],["getdefaultparams(op",{"_index":565,"title":{},"body":{"interfaces/ChainOp.html":{},"interfaces/DynamicOperation.html":{},"interfaces/OpInput.html":{},"interfaces/OperationClassification.html":{},"interfaces/PairedOp.html":{},"interfaces/PedalEvent.html":{},"interfaces/PlayerOp.html":{},"interfaces/TreeOperation.html":{},"miscellaneous/functions.html":{}}}],["getdraft",{"_index":3728,"title":{},"body":{"injectables/PlayerService.html":{},"classes/Shape-1.html":{}}}],["getdraftid",{"_index":2654,"title":{},"body":{"directives/MarqueeComponent.html":{},"directives/SelectionComponent.html":{}}}],["getdraftname",{"_index":1335,"title":{},"body":{"interfaces/DesignActions.html":{},"components/InletComponent.html":{}}}],["getdraftname(draft",{"_index":1543,"title":{},"body":{"interfaces/DesignActions.html":{}}}],["getdraftname(sd",{"_index":2463,"title":{},"body":{"components/InletComponent.html":{}}}],["getdraftsfrominputs",{"_index":4407,"title":{},"body":{"miscellaneous/functions.html":{}}}],["getdraftsfrominputs(inputs",{"_index":2157,"title":{},"body":{"interfaces/DynamicOperation.html":{},"interfaces/OpInput.html":{},"interfaces/OperationClassification.html":{},"interfaces/TreeOperation.html":{},"miscellaneous/functions.html":{}}}],["getdraftsfrominputs(op_inputs)[0",{"_index":2205,"title":{},"body":{"interfaces/DynamicOperation.html":{},"interfaces/OpInput.html":{},"interfaces/OperationClassification.html":{},"interfaces/TreeOperation.html":{}}}],["getfrontlayer",{"_index":2503,"title":{},"body":{"injectables/LayersService.html":{}}}],["getfrontlayer():number",{"_index":2509,"title":{},"body":{"injectables/LayersService.html":{}}}],["getheddle",{"_index":371,"title":{},"body":{"classes/Cell.html":{}}}],["getheddle():boolean",{"_index":418,"title":{},"body":{"classes/Cell.html":{}}}],["getheight",{"_index":3942,"title":{},"body":{"classes/Shape.html":{},"injectables/ViewportService.html":{}}}],["getid",{"_index":4049,"title":{},"body":{"classes/Shuttle.html":{}}}],["getimagedata",{"_index":4006,"title":{},"body":{"classes/Shape-1.html":{}}}],["getink",{"_index":2366,"title":{},"body":{"injectables/InkService.html":{}}}],["getink(name",{"_index":2344,"title":{},"body":{"interfaces/Ink.html":{},"injectables/InkService.html":{}}}],["getinks",{"_index":2367,"title":{},"body":{"injectables/InkService.html":{}}}],["getinks():array",{"_index":2336,"title":{},"body":{"interfaces/Ink.html":{},"injectables/InkService.html":{}}}],["getinletsfrominputs",{"_index":4408,"title":{},"body":{"miscellaneous/functions.html":{}}}],["getinletsfrominputs(inputs",{"_index":2161,"title":{},"body":{"interfaces/DynamicOperation.html":{},"interfaces/OpInput.html":{},"interfaces/OperationClassification.html":{},"interfaces/TreeOperation.html":{},"miscellaneous/functions.html":{}}}],["getinputname",{"_index":2390,"title":{},"body":{"components/InletComponent.html":{}}}],["getinputname(id",{"_index":2407,"title":{},"body":{"components/InletComponent.html":{}}}],["getinputname(input",{"_index":2473,"title":{},"body":{"components/InletComponent.html":{}}}],["getinterpolationdims(type",{"_index":3830,"title":{},"body":{"classes/Render.html":{}}}],["getismapped",{"_index":3047,"title":{},"body":{"classes/OpSequencer.html":{}}}],["getleft",{"_index":3857,"title":{},"body":{"classes/Selection.html":{}}}],["getlength",{"_index":1218,"title":{},"body":{"classes/DBNodeArray.html":{}}}],["getloom_online",{"_index":3581,"title":{},"body":{"injectables/PedalsService.html":{}}}],["getloom_ready",{"_index":3587,"title":{},"body":{"injectables/PedalsService.html":{}}}],["getmap",{"_index":2518,"title":{},"body":{"injectables/MappingsService.html":{}}}],["getmap(id",{"_index":2536,"title":{},"body":{"injectables/MappingsService.html":{}}}],["getmapoptions",{"_index":2519,"title":{},"body":{"injectables/MappingsService.html":{}}}],["getmapoptions(p",{"_index":2538,"title":{},"body":{"injectables/MappingsService.html":{}}}],["getmatrix",{"_index":2721,"title":{},"body":{"components/MixerViewComponent.html":{}}}],["getmatrix(el",{"_index":2742,"title":{},"body":{"components/MixerViewComponent.html":{}}}],["getname",{"_index":1203,"title":{},"body":{"classes/DBNode.html":{},"classes/Shuttle.html":{}}}],["getnextvisiblerow",{"_index":3758,"title":{},"body":{"classes/Render.html":{}}}],["getnextvisiblerow(ndx",{"_index":3784,"title":{},"body":{"classes/Render.html":{}}}],["getnow",{"_index":948,"title":{},"body":{"classes/DBListener.html":{},"classes/DBListenerArray.html":{},"classes/DBNode.html":{},"classes/DBNodeArray.html":{},"classes/DBTwoWay.html":{},"classes/DBTwoWayArray.html":{},"classes/DBWriteBuffer.html":{},"classes/DBWriter.html":{},"classes/DBWriterArray.html":{},"interfaces/NodeMethods.html":{},"interfaces/NodeParams.html":{},"classes/OnlineStatus.html":{}}}],["getnum_pedals",{"_index":3593,"title":{},"body":{"injectables/PedalsService.html":{}}}],["getnum_picks",{"_index":3589,"title":{},"body":{"injectables/PedalsService.html":{}}}],["getnum_v_pedals",{"_index":3599,"title":{},"body":{"injectables/PedalsService.html":{}}}],["getnummappings",{"_index":3525,"title":{},"body":{"classes/PedalConfig.html":{}}}],["getnumpedals",{"_index":3523,"title":{},"body":{"classes/PedalConfig.html":{}}}],["getoffset",{"_index":3759,"title":{},"body":{"classes/Render.html":{}}}],["getoffset(type",{"_index":3786,"title":{},"body":{"classes/Render.html":{}}}],["getop",{"_index":2520,"title":{},"body":{"injectables/MappingsService.html":{}}}],["getop(name",{"_index":2540,"title":{},"body":{"injectables/MappingsService.html":{}}}],["getp_pedal_array",{"_index":3597,"title":{},"body":{"injectables/PedalsService.html":{}}}],["getparamsfrominputs",{"_index":4409,"title":{},"body":{"miscellaneous/functions.html":{}}}],["getparamsfrominputs(inputs",{"_index":2151,"title":{},"body":{"interfaces/DynamicOperation.html":{},"interfaces/OpInput.html":{},"interfaces/OperationClassification.html":{},"interfaces/TreeOperation.html":{},"miscellaneous/functions.html":{}}}],["getparamsfrominputs(op_inputs",{"_index":2231,"title":{},"body":{"interfaces/DynamicOperation.html":{},"interfaces/OpInput.html":{},"interfaces/OperationClassification.html":{},"interfaces/TreeOperation.html":{}}}],["getparamvalues",{"_index":56,"title":{},"body":{"classes/AbstractOpFactory.html":{},"classes/BaseOp.html":{},"classes/Branch.html":{},"classes/Bus.html":{},"classes/Merge.html":{},"interfaces/OpClassifier.html":{},"interfaces/OperationProperties.html":{},"classes/Pipe.html":{},"classes/Seed.html":{},"interfaces/TopologyDef.html":{},"miscellaneous/functions.html":{}}}],["getparamvalues(input",{"_index":3185,"title":{},"body":{"interfaces/OperationParam.html":{},"classes/Params.html":{},"miscellaneous/functions.html":{}}}],["getparamvalues(params",{"_index":256,"title":{},"body":{"classes/AbstractOpFactory.html":{},"classes/BaseOp.html":{},"classes/Branch.html":{},"classes/Bus.html":{},"classes/Merge.html":{},"interfaces/OpClassifier.html":{},"interfaces/OperationProperties.html":{},"classes/Pipe.html":{},"classes/Seed.html":{},"interfaces/TopologyDef.html":{}}}],["getpedal_states",{"_index":3595,"title":{},"body":{"injectables/PedalsService.html":{}}}],["getpedals",{"_index":3578,"title":{},"body":{"injectables/PedalsService.html":{}}}],["getpi_online",{"_index":3579,"title":{},"body":{"injectables/PedalsService.html":{}}}],["getpick_data",{"_index":3591,"title":{},"body":{"injectables/PedalsService.html":{}}}],["getpos",{"_index":3932,"title":{},"body":{"injectables/SequencerService.html":{},"classes/Shape.html":{}}}],["getready",{"_index":1221,"title":{},"body":{"classes/DBNodeArray.html":{}}}],["getreadytoweave",{"_index":3049,"title":{},"body":{"classes/OpSequencer.html":{},"injectables/PedalsService.html":{},"injectables/PlayerService.html":{}}}],["getref",{"_index":1201,"title":{},"body":{"classes/DBNode.html":{}}}],["gets",{"_index":2253,"title":{},"body":{"interfaces/IOTuple.html":{},"classes/OpSequencer.html":{},"interfaces/TreeNode.html":{},"injectables/ViewportService.html":{}}}],["getscale",{"_index":2889,"title":{},"body":{"components/NoteComponent.html":{}}}],["getselected",{"_index":2368,"title":{},"body":{"injectables/InkService.html":{}}}],["getselected():string",{"_index":2359,"title":{},"body":{"interfaces/Ink.html":{},"injectables/InkService.html":{}}}],["getsequencer",{"_index":2558,"title":{},"body":{"injectables/MappingsService.html":{}}}],["gettarget",{"_index":3858,"title":{},"body":{"classes/Selection.html":{}}}],["gettargetid",{"_index":3859,"title":{},"body":{"classes/Selection.html":{}}}],["gettextinterval",{"_index":3760,"title":{},"body":{"classes/Render.html":{}}}],["getthickness",{"_index":4050,"title":{},"body":{"classes/Shuttle.html":{}}}],["getting",{"_index":4431,"title":{"index.html":{}},"body":{}}],["gettop",{"_index":3860,"title":{},"body":{"classes/Selection.html":{}}}],["gettopleft",{"_index":4190,"title":{},"body":{"injectables/ViewportService.html":{}}}],["gettype",{"_index":4051,"title":{},"body":{"classes/Shuttle.html":{}}}],["getv_pedal_array",{"_index":3603,"title":{},"body":{"injectables/PedalsService.html":{}}}],["getv_pedal_states",{"_index":3601,"title":{},"body":{"injectables/PedalsService.html":{}}}],["getvacuum_on",{"_index":3583,"title":{},"body":{"injectables/PedalsService.html":{}}}],["getval",{"_index":1205,"title":{},"body":{"classes/DBNode.html":{}}}],["getweaving",{"_index":3726,"title":{},"body":{"injectables/PlayerService.html":{}}}],["getwidth",{"_index":3943,"title":{},"body":{"classes/Shape.html":{},"injectables/ViewportService.html":{}}}],["getzoom",{"_index":3761,"title":{},"body":{"classes/Render.html":{}}}],["give",{"_index":215,"title":{},"body":{"classes/AbstractOpFactory.html":{},"classes/BaseOp.html":{},"classes/Branch.html":{},"classes/Bus.html":{},"interfaces/ChainOp.html":{},"classes/Merge.html":{},"interfaces/OpClassifier.html":{},"interfaces/OperationProperties.html":{},"interfaces/PairedOp.html":{},"interfaces/PedalEvent.html":{},"classes/Pipe.html":{},"interfaces/PlayerOp.html":{},"classes/Seed.html":{},"interfaces/TopologyDef.html":{}}}],["given",{"_index":358,"title":{},"body":{"interfaces/Bounds.html":{},"interfaces/DraftMap.html":{},"interfaces/Interlacement.html":{},"interfaces/InterlacementVal.html":{},"interfaces/Point.html":{},"classes/Render.html":{},"classes/Shape.html":{},"index.html":{},"miscellaneous/typealiases.html":{}}}],["global",{"_index":1473,"title":{},"body":{"interfaces/DesignActions.html":{},"interfaces/DraftOperationClassification.html":{},"interfaces/LoomConfig.html":{},"components/MixerViewComponent.html":{},"interfaces/OperationParam.html":{},"classes/Params.html":{},"classes/PedalConfig.html":{},"injectables/PlayerService.html":{}}}],["global.offsetleft",{"_index":2814,"title":{},"body":{"components/MixerViewComponent.html":{}}}],["global.offsetparent",{"_index":2817,"title":{},"body":{"components/MixerViewComponent.html":{}}}],["global.offsettop",{"_index":2815,"title":{},"body":{"components/MixerViewComponent.html":{}}}],["global_view",{"_index":2841,"title":{},"body":{"components/MixerViewComponent.html":{}}}],["globaloffset",{"_index":2813,"title":{},"body":{"components/MixerViewComponent.html":{}}}],["globaloffset.x",{"_index":2828,"title":{},"body":{"components/MixerViewComponent.html":{}}}],["globaloffset.y",{"_index":2832,"title":{},"body":{"components/MixerViewComponent.html":{}}}],["globalregex",{"_index":3299,"title":{},"body":{"components/ParameterComponent.html":{}}}],["globalregex.test(control.value",{"_index":3302,"title":{},"body":{"components/ParameterComponent.html":{}}}],["go",{"_index":2080,"title":{},"body":{"components/DraftdetailComponent.html":{},"classes/OpSequencer.html":{},"index.html":{}}}],["goes",{"_index":700,"title":{},"body":{"components/ConnectionComponent.html":{},"interfaces/IOTuple.html":{},"interfaces/TreeNode.html":{}}}],["governs",{"_index":4599,"title":{},"body":{"index.html":{}}}],["gpl",{"_index":4627,"title":{},"body":{"properties.html":{}}}],["grey",{"_index":2840,"title":{},"body":{"components/MixerViewComponent.html":{},"components/NoteComponent.html":{}}}],["group",{"_index":3262,"title":{},"body":{"components/OpsComponent.html":{}}}],["groups",{"_index":2302,"title":{},"body":{"components/ImageComponent.html":{}}}],["growing",{"_index":4546,"title":{},"body":{"index.html":{}}}],["guides",{"_index":4447,"title":{},"body":{"index.html":{}}}],["h",{"_index":3679,"title":{},"body":{"components/PlayerComponent.html":{},"classes/Render.html":{},"injectables/ViewportService.html":{}}}],["h+t).tostring",{"_index":3682,"title":{},"body":{"components/PlayerComponent.html":{}}}],["h2",{"_index":3003,"title":{},"body":{"components/OpHelpModal.html":{}}}],["h3",{"_index":2933,"title":{},"body":{"components/NoteComponent.html":{},"components/OpHelpModal.html":{},"components/OpSequencerComponent.html":{},"components/OpsComponent.html":{}}}],["h4",{"_index":2836,"title":{},"body":{"components/MixerViewComponent.html":{}}}],["hack",{"_index":608,"title":{},"body":{"interfaces/ChainOp.html":{},"interfaces/PairedOp.html":{},"interfaces/PedalEvent.html":{},"interfaces/PlayerOp.html":{},"index.html":{}}}],["handle",{"_index":4427,"title":{},"body":{"miscellaneous/functions.html":{},"index.html":{}}}],["handled",{"_index":1291,"title":{},"body":{"interfaces/DensityUnits.html":{},"interfaces/DesignMode.html":{},"interfaces/LoomTypes.html":{},"interfaces/MaterialTypes.html":{},"interfaces/ViewModes.html":{}}}],["handlefile",{"_index":3269,"title":{},"body":{"components/ParameterComponent.html":{}}}],["handlefile(obj",{"_index":3280,"title":{},"body":{"components/ParameterComponent.html":{}}}],["handles",{"_index":1973,"title":{},"body":{"components/DraftdetailComponent.html":{},"interfaces/OperationParam.html":{},"classes/Params.html":{},"miscellaneous/typealiases.html":{}}}],["handling",{"_index":3555,"title":{},"body":{"injectables/PedalsService.html":{}}}],["handlle",{"_index":77,"title":{},"body":{"classes/AbstractOpFactory.html":{},"classes/BaseOp.html":{},"classes/Branch.html":{},"classes/Bus.html":{},"classes/Merge.html":{},"interfaces/OpClassifier.html":{},"interfaces/OperationProperties.html":{},"classes/Pipe.html":{},"classes/Seed.html":{},"interfaces/TopologyDef.html":{}}}],["happen",{"_index":601,"title":{},"body":{"interfaces/ChainOp.html":{},"interfaces/PairedOp.html":{},"interfaces/PedalEvent.html":{},"interfaces/PlayerOp.html":{}}}],["happening",{"_index":1581,"title":{},"body":{"interfaces/DesignActions.html":{}}}],["hard",{"_index":4502,"title":{},"body":{"index.html":{}}}],["hardware",{"_index":3358,"title":{},"body":{"interfaces/Pedal.html":{},"classes/PedalStatus.html":{},"injectables/PedalsService.html":{}}}],["has_active_connection",{"_index":1400,"title":{},"body":{"interfaces/DesignActions.html":{}}}],["hasbackdrop",{"_index":1573,"title":{},"body":{"interfaces/DesignActions.html":{}}}],["hascustomstructure",{"_index":3701,"title":{},"body":{"injectables/PlayerService.html":{}}}],["hascustomstructure(d",{"_index":1889,"title":{},"body":{"interfaces/DraftOperationClassification.html":{},"interfaces/LoomConfig.html":{},"classes/PedalConfig.html":{},"injectables/PlayerService.html":{}}}],["haspedal",{"_index":3017,"title":{},"body":{"classes/OpSequencer.html":{},"injectables/SequencerService.html":{}}}],["haspedal(n",{"_index":3037,"title":{},"body":{"classes/OpSequencer.html":{},"injectables/SequencerService.html":{}}}],["hasselection",{"_index":3861,"title":{},"body":{"classes/Selection.html":{}}}],["header",{"_index":3095,"title":{},"body":{"components/OpSequencerComponent.html":{},"components/PlayerComponent.html":{},"components/WeavingStateComponent.html":{}}}],["header\").getboundingclientrect().height",{"_index":3681,"title":{},"body":{"components/PlayerComponent.html":{}}}],["header.mat",{"_index":3121,"title":{},"body":{"components/OpSequencerComponent.html":{},"components/PlayerComponent.html":{},"components/WeavingStateComponent.html":{}}}],["header:hover",{"_index":3128,"title":{},"body":{"components/OpSequencerComponent.html":{},"components/PlayerComponent.html":{},"components/WeavingStateComponent.html":{}}}],["header:hover:not([aria",{"_index":3132,"title":{},"body":{"components/OpSequencerComponent.html":{},"components/PlayerComponent.html":{},"components/WeavingStateComponent.html":{}}}],["heart",{"_index":62,"title":{},"body":{"classes/AbstractOpFactory.html":{},"classes/BaseOp.html":{},"classes/Branch.html":{},"classes/Bus.html":{},"classes/Merge.html":{},"interfaces/OpClassifier.html":{},"interfaces/OperationProperties.html":{},"classes/Pipe.html":{},"classes/Seed.html":{},"interfaces/TopologyDef.html":{},"miscellaneous/typealiases.html":{}}}],["heddle",{"_index":385,"title":{},"body":{"classes/Cell.html":{},"interfaces/Ink.html":{},"injectables/InkService.html":{},"index.html":{}}}],["height",{"_index":342,"title":{},"body":{"interfaces/Bounds.html":{},"interfaces/DesignActions.html":{},"components/DraftdetailComponent.html":{},"components/InletComponent.html":{},"directives/MarqueeComponent.html":{},"components/MixerViewComponent.html":{},"components/NoteComponent.html":{},"components/OpSequencerComponent.html":{},"components/OpsComponent.html":{},"components/ParameterComponent.html":{},"components/PlayerComponent.html":{},"interfaces/Point.html":{},"classes/Selection.html":{},"directives/SelectionComponent.html":{},"classes/Shape.html":{},"injectables/ViewportService.html":{},"components/VirtualPedalsComponent.html":{},"components/WeavingStateComponent.html":{}}}],["height:0",{"_index":718,"title":{},"body":{"components/ConnectionComponent.html":{},"injectables/ViewportService.html":{}}}],["height:100",{"_index":2772,"title":{},"body":{"components/MixerViewComponent.html":{}}}],["held",{"_index":2145,"title":{},"body":{"interfaces/DynamicOperation.html":{},"interfaces/OpInput.html":{},"interfaces/OperationClassification.html":{},"interfaces/TreeOperation.html":{}}}],["help",{"_index":3001,"title":{},"body":{"components/OpHelpModal.html":{},"interfaces/OperationParam.html":{},"classes/Params.html":{},"index.html":{}}}],["helper",{"_index":2064,"title":{},"body":{"components/DraftdetailComponent.html":{}}}],["helps",{"_index":4154,"title":{},"body":{"classes/System.html":{},"miscellaneous/functions.html":{}}}],["here",{"_index":1441,"title":{},"body":{"interfaces/DesignActions.html":{},"components/DraftdetailComponent.html":{},"components/OpsComponent.html":{},"components/PlayerComponent.html":{},"index.html":{}}}],["hidden",{"_index":3336,"title":{},"body":{"components/ParameterComponent.html":{}}}],["hide",{"_index":2043,"title":{},"body":{"components/DraftdetailComponent.html":{},"components/NoteComponent.html":{}}}],["hiding",{"_index":1633,"title":{},"body":{"interfaces/DraftMap.html":{},"interfaces/Interlacement.html":{},"interfaces/InterlacementVal.html":{}}}],["history",{"_index":4534,"title":{},"body":{"index.html":{}}}],["hold",{"_index":1379,"title":{},"body":{"interfaces/DesignActions.html":{}}}],["holds",{"_index":961,"title":{},"body":{"classes/DBListener.html":{},"classes/DBListenerArray.html":{},"classes/DBNode.html":{},"classes/DBNodeArray.html":{},"classes/DBTwoWay.html":{},"classes/DBTwoWayArray.html":{},"classes/DBWriteBuffer.html":{},"classes/DBWriter.html":{},"classes/DBWriterArray.html":{},"interfaces/DraftNodeProxy.html":{},"interfaces/FileObj.html":{},"interfaces/FileSaver.html":{},"interfaces/Fileloader.html":{},"interfaces/LoadResponse.html":{},"components/MixerViewComponent.html":{},"interfaces/NodeComponentProxy.html":{},"interfaces/NodeMethods.html":{},"interfaces/NodeParams.html":{},"classes/OnlineStatus.html":{},"interfaces/OpComponentProxy.html":{},"interfaces/SaveObj.html":{},"interfaces/StatusMessage.html":{},"interfaces/TreeNodeProxy.html":{},"index.html":{},"miscellaneous/typealiases.html":{}}}],["hopefully",{"_index":445,"title":{},"body":{"interfaces/ChainIndex.html":{},"injectables/SequencerService.html":{}}}],["host",{"_index":1160,"title":{},"body":{"classes/DBListener.html":{},"classes/DBListenerArray.html":{},"classes/DBNode.html":{},"classes/DBNodeArray.html":{},"classes/DBTwoWay.html":{},"classes/DBTwoWayArray.html":{},"classes/DBWriteBuffer.html":{},"classes/DBWriter.html":{},"classes/DBWriterArray.html":{},"interfaces/NodeMethods.html":{},"interfaces/NodeParams.html":{},"classes/OnlineStatus.html":{}}}],["host's",{"_index":1168,"title":{},"body":{"classes/DBListener.html":{},"classes/DBListenerArray.html":{},"classes/DBNode.html":{},"classes/DBNodeArray.html":{},"classes/DBTwoWay.html":{},"classes/DBTwoWayArray.html":{},"classes/DBWriteBuffer.html":{},"classes/DBWriter.html":{},"classes/DBWriterArray.html":{},"interfaces/NodeMethods.html":{},"interfaces/NodeParams.html":{},"classes/OnlineStatus.html":{}}}],["hostlistener",{"_index":1306,"title":{},"body":{"interfaces/DesignActions.html":{},"components/DraftdetailComponent.html":{},"components/VirtualPedalsComponent.html":{}}}],["hostlistener('document:click",{"_index":2041,"title":{},"body":{"components/DraftdetailComponent.html":{}}}],["hostlistener('window:keydown",{"_index":4277,"title":{},"body":{"components/VirtualPedalsComponent.html":{}}}],["hostlisteners",{"_index":4269,"title":{},"body":{"components/VirtualPedalsComponent.html":{}}}],["href",{"_index":1541,"title":{},"body":{"interfaces/DesignActions.html":{}}}],["html",{"_index":450,"title":{},"body":{"interfaces/ChainIndex.html":{},"components/ConnectionComponent.html":{},"components/DraftdetailComponent.html":{},"components/ImageComponent.html":{},"components/InletComponent.html":{},"components/MixerViewComponent.html":{},"components/NoteComponent.html":{},"components/OpHelpModal.html":{},"components/OpSequencerComponent.html":{},"components/OpsComponent.html":{},"components/ParameterComponent.html":{},"components/PlayerComponent.html":{},"injectables/SequencerService.html":{},"classes/Shape-1.html":{},"components/SnackbarComponent.html":{},"components/VirtualPedalsComponent.html":{},"components/WeavingStateComponent.html":{}}}],["html/css",{"_index":4494,"title":{},"body":{"index.html":{}}}],["htmlcanvaselement",{"_index":1370,"title":{},"body":{"interfaces/DesignActions.html":{},"interfaces/DraftNodeProxy.html":{},"interfaces/FileObj.html":{},"interfaces/FileSaver.html":{},"interfaces/Fileloader.html":{},"interfaces/LoadResponse.html":{},"interfaces/NodeComponentProxy.html":{},"components/NoteComponent.html":{},"interfaces/OpComponentProxy.html":{},"interfaces/SaveObj.html":{},"classes/Shape-1.html":{},"interfaces/StatusMessage.html":{},"interfaces/TreeNodeProxy.html":{},"components/WeavingStateComponent.html":{}}}],["htmlelement",{"_index":724,"title":{},"body":{"components/ConnectionComponent.html":{},"interfaces/DesignActions.html":{},"components/DraftdetailComponent.html":{},"components/MixerViewComponent.html":{},"components/NoteComponent.html":{},"components/PlayerComponent.html":{},"components/WeavingStateComponent.html":{}}}],["http://adacad.unstable.design/adacad",{"_index":4476,"title":{},"body":{"index.html":{}}}],["http://localhost:4200",{"_index":4513,"title":{},"body":{"index.html":{}}}],["https://adacad.org",{"_index":4445,"title":{},"body":{"index.html":{}}}],["https://adacad.unstable.design",{"_index":4449,"title":{},"body":{"index.html":{}}}],["https://refactoring.guru/design",{"_index":277,"title":{},"body":{"classes/AbstractOpFactory.html":{},"classes/BaseOp.html":{},"classes/Branch.html":{},"classes/Bus.html":{},"classes/Merge.html":{},"interfaces/OpClassifier.html":{},"interfaces/OperationProperties.html":{},"classes/Pipe.html":{},"classes/Seed.html":{},"interfaces/TopologyDef.html":{}}}],["i'm",{"_index":2590,"title":{},"body":{"injectables/MappingsService.html":{}}}],["i.e",{"_index":192,"title":{},"body":{"classes/AbstractOpFactory.html":{},"classes/BaseOp.html":{},"classes/Branch.html":{},"classes/Bus.html":{},"classes/Merge.html":{},"interfaces/OpClassifier.html":{},"interfaces/OperationProperties.html":{},"classes/Pipe.html":{},"classes/Seed.html":{},"interfaces/TopologyDef.html":{}}}],["i.num_drafts",{"_index":2215,"title":{},"body":{"interfaces/DynamicOperation.html":{},"interfaces/OpInput.html":{},"interfaces/OperationClassification.html":{},"interfaces/TreeOperation.html":{}}}],["i.viewvalue",{"_index":2093,"title":{},"body":{"components/DraftdetailComponent.html":{}}}],["i/o",{"_index":2190,"title":{},"body":{"interfaces/DynamicOperation.html":{},"interfaces/OpInput.html":{},"interfaces/OperationClassification.html":{},"interfaces/TreeOperation.html":{}}}],["i:i",{"_index":4238,"title":{},"body":{"injectables/ViewportService.html":{}}}],["i:interlacement",{"_index":4241,"title":{},"body":{"injectables/ViewportService.html":{}}}],["i=0",{"_index":1131,"title":{},"body":{"classes/DBListener.html":{},"classes/DBListenerArray.html":{},"classes/DBNode.html":{},"classes/DBNodeArray.html":{},"classes/DBTwoWay.html":{},"classes/DBTwoWayArray.html":{},"classes/DBWriteBuffer.html":{},"classes/DBWriter.html":{},"classes/DBWriterArray.html":{},"interfaces/NodeMethods.html":{},"interfaces/NodeParams.html":{},"classes/OnlineStatus.html":{}}}],["icon",{"_index":1296,"title":{},"body":{"interfaces/DensityUnits.html":{},"interfaces/DesignActions.html":{},"interfaces/DesignMode.html":{},"interfaces/Ink.html":{},"injectables/InkService.html":{},"interfaces/LoomTypes.html":{},"interfaces/MaterialTypes.html":{},"components/NoteComponent.html":{},"components/ParameterComponent.html":{},"interfaces/ViewModes.html":{}}}],["icons",{"_index":1285,"title":{},"body":{"interfaces/DensityUnits.html":{},"interfaces/DesignMode.html":{},"interfaces/LoomTypes.html":{},"interfaces/MaterialTypes.html":{},"interfaces/ViewModes.html":{}}}],["id",{"_index":427,"title":{},"body":{"interfaces/ChainIndex.html":{},"interfaces/ChainOp.html":{},"components/ConnectionComponent.html":{},"interfaces/Crossing.html":{},"classes/DBListener.html":{},"classes/DBListenerArray.html":{},"classes/DBNode.html":{},"classes/DBNodeArray.html":{},"classes/DBTwoWay.html":{},"classes/DBTwoWayArray.html":{},"classes/DBWriteBuffer.html":{},"classes/DBWriter.html":{},"classes/DBWriterArray.html":{},"interfaces/DesignActions.html":{},"interfaces/DraftMap.html":{},"interfaces/DraftNodeProxy.html":{},"interfaces/DraftOperationClassification.html":{},"components/DraftdetailComponent.html":{},"interfaces/DynamicOperation.html":{},"interfaces/FileObj.html":{},"interfaces/FileSaver.html":{},"interfaces/Fileloader.html":{},"interfaces/IOTuple.html":{},"components/InletComponent.html":{},"interfaces/Interlacement.html":{},"interfaces/InterlacementVal.html":{},"interfaces/LoadResponse.html":{},"interfaces/LoomConfig.html":{},"injectables/MappingsService.html":{},"directives/MarqueeComponent.html":{},"interfaces/NodeComponentProxy.html":{},"interfaces/NodeMethods.html":{},"interfaces/NodeParams.html":{},"components/NoteComponent.html":{},"classes/OnlineStatus.html":{},"interfaces/OpComponentProxy.html":{},"interfaces/OpInput.html":{},"classes/OpSequencer.html":{},"interfaces/OperationClassification.html":{},"interfaces/OperationParam.html":{},"interfaces/PairedOp.html":{},"classes/Params.html":{},"interfaces/Pedal.html":{},"classes/PedalConfig.html":{},"interfaces/PedalEvent.html":{},"classes/PedalStatus.html":{},"injectables/PedalsService.html":{},"interfaces/PlayerOp.html":{},"injectables/PlayerService.html":{},"interfaces/SaveObj.html":{},"directives/SelectionComponent.html":{},"injectables/SequencerService.html":{},"classes/Shape.html":{},"classes/Shuttle.html":{},"interfaces/StatusMessage.html":{},"classes/System.html":{},"interfaces/TreeNode.html":{},"interfaces/TreeNodeProxy.html":{},"interfaces/TreeOperation.html":{},"interfaces/Vertex.html":{},"injectables/ViewportService.html":{},"interfaces/YarnPath.html":{},"index.html":{}}}],["id's",{"_index":2513,"title":{},"body":{"injectables/MappingsService.html":{}}}],["idex",{"_index":2289,"title":{},"body":{"interfaces/IOTuple.html":{},"interfaces/TreeNode.html":{}}}],["ids",{"_index":1601,"title":{},"body":{"interfaces/DraftMap.html":{},"interfaces/DraftNodeProxy.html":{},"interfaces/FileObj.html":{},"interfaces/FileSaver.html":{},"interfaces/Fileloader.html":{},"interfaces/Interlacement.html":{},"interfaces/InterlacementVal.html":{},"interfaces/LoadResponse.html":{},"interfaces/NodeComponentProxy.html":{},"interfaces/OpComponentProxy.html":{},"interfaces/SaveObj.html":{},"interfaces/StatusMessage.html":{},"interfaces/TreeNodeProxy.html":{}}}],["if(!snapshot.val",{"_index":1042,"title":{},"body":{"classes/DBListener.html":{},"classes/DBListenerArray.html":{},"classes/DBNode.html":{},"classes/DBNodeArray.html":{},"classes/DBTwoWay.html":{},"classes/DBTwoWayArray.html":{},"classes/DBWriteBuffer.html":{},"classes/DBWriter.html":{},"classes/DBWriterArray.html":{},"interfaces/NodeMethods.html":{},"interfaces/NodeParams.html":{},"classes/OnlineStatus.html":{}}}],["if(!this.fc.haserror('forbiddeninput'))this.onoperationparamchange.emit({id",{"_index":3323,"title":{},"body":{"components/ParameterComponent.html":{}}}],["if(!this.is_preview",{"_index":1415,"title":{},"body":{"interfaces/DesignActions.html":{}}}],["if(!this.is_set",{"_index":420,"title":{},"body":{"classes/Cell.html":{}}}],["if(!this.orientation_x",{"_index":805,"title":{},"body":{"components/ConnectionComponent.html":{}}}],["if((from).draft_visible",{"_index":787,"title":{},"body":{"components/ConnectionComponent.html":{}}}],["if(canvas",{"_index":2919,"title":{},"body":{"components/NoteComponent.html":{}}}],["if(container",{"_index":1466,"title":{},"body":{"interfaces/DesignActions.html":{}}}],["if(coords.i",{"_index":1525,"title":{},"body":{"interfaces/DesignActions.html":{}}}],["if(draft",{"_index":1432,"title":{},"body":{"interfaces/DesignActions.html":{}}}],["if(el.id",{"_index":4243,"title":{},"body":{"injectables/ViewportService.html":{}}}],["if(element",{"_index":779,"title":{},"body":{"components/ConnectionComponent.html":{}}}],["if(from.id",{"_index":785,"title":{},"body":{"components/ConnectionComponent.html":{}}}],["if(i",{"_index":1516,"title":{},"body":{"interfaces/DesignActions.html":{}}}],["if(ink.value",{"_index":2346,"title":{},"body":{"interfaces/Ink.html":{},"injectables/InkService.html":{}}}],["if(j",{"_index":1517,"title":{},"body":{"interfaces/DesignActions.html":{}}}],["if(len",{"_index":4177,"title":{},"body":{"classes/System.html":{}}}],["if(name.includes(\"cdk",{"_index":2047,"title":{},"body":{"components/DraftdetailComponent.html":{}}}],["if(ndx",{"_index":776,"title":{},"body":{"components/ConnectionComponent.html":{},"components/OpsComponent.html":{},"classes/System.html":{}}}],["if(next",{"_index":3823,"title":{},"body":{"classes/Render.html":{}}}],["if(p.y",{"_index":1500,"title":{},"body":{"interfaces/DesignActions.html":{}}}],["if(p1",{"_index":801,"title":{},"body":{"components/ConnectionComponent.html":{}}}],["if(p2.x",{"_index":804,"title":{},"body":{"components/ConnectionComponent.html":{}}}],["if(p_grn",{"_index":4041,"title":{},"body":{"classes/Shape-1.html":{}}}],["if(params.id",{"_index":1001,"title":{},"body":{"classes/DBListener.html":{},"classes/DBListenerArray.html":{},"classes/DBNode.html":{},"classes/DBNodeArray.html":{},"classes/DBTwoWay.html":{},"classes/DBTwoWayArray.html":{},"classes/DBWriteBuffer.html":{},"classes/DBWriter.html":{},"classes/DBWriterArray.html":{},"interfaces/NodeMethods.html":{},"interfaces/NodeParams.html":{},"classes/OnlineStatus.html":{}}}],["if(params.is_set",{"_index":414,"title":{},"body":{"classes/Cell.html":{}}}],["if(params.is_up",{"_index":412,"title":{},"body":{"classes/Cell.html":{}}}],["if(result",{"_index":1576,"title":{},"body":{"interfaces/DesignActions.html":{}}}],["if(sd",{"_index":2462,"title":{},"body":{"components/InletComponent.html":{}}}],["if(setting",{"_index":409,"title":{},"body":{"classes/Cell.html":{}}}],["if(sys.length",{"_index":4180,"title":{},"body":{"classes/System.html":{}}}],["if(this.bounds.topleft.x",{"_index":1424,"title":{},"body":{"interfaces/DesignActions.html":{}}}],["if(this.canvas",{"_index":1495,"title":{},"body":{"interfaces/DesignActions.html":{}}}],["if(this.dm.getselecteddesignmode('drawdown_editing_style').value",{"_index":2072,"title":{},"body":{"components/DraftdetailComponent.html":{}}}],["if(this.draft",{"_index":1461,"title":{},"body":{"interfaces/DesignActions.html":{}}}],["if(this.draftcanvas",{"_index":4328,"title":{},"body":{"components/WeavingStateComponent.html":{}}}],["if(this.inlet",{"_index":2448,"title":{},"body":{"components/InletComponent.html":{}}}],["if(this.is_dynamic_op",{"_index":2977,"title":{},"body":{"components/OpHelpModal.html":{}}}],["if(this.is_set",{"_index":419,"title":{},"body":{"classes/Cell.html":{}}}],["if(this.loom_settings.type",{"_index":2028,"title":{},"body":{"components/DraftdetailComponent.html":{}}}],["if(this.loom_settings.units",{"_index":2066,"title":{},"body":{"components/DraftdetailComponent.html":{}}}],["if(this.modal",{"_index":1568,"title":{},"body":{"interfaces/DesignActions.html":{}}}],["if(this.note",{"_index":2897,"title":{},"body":{"components/NoteComponent.html":{}}}],["if(this.orientation",{"_index":816,"title":{},"body":{"components/ConnectionComponent.html":{}}}],["if(this.parent_id",{"_index":1481,"title":{},"body":{"interfaces/DesignActions.html":{}}}],["if(this.pls.draft",{"_index":4329,"title":{},"body":{"components/WeavingStateComponent.html":{}}}],["if(this.target",{"_index":3888,"title":{},"body":{"classes/Selection.html":{}}}],["if(this.target.id",{"_index":3883,"title":{},"body":{"classes/Selection.html":{}}}],["if(this.tree.gettype(to.id",{"_index":772,"title":{},"body":{"components/ConnectionComponent.html":{}}}],["if(this.type",{"_index":4096,"title":{},"body":{"classes/Shuttle.html":{}}}],["if(this.zoom",{"_index":3820,"title":{},"body":{"classes/Render.html":{}}}],["if(to.id",{"_index":763,"title":{},"body":{"components/ConnectionComponent.html":{}}}],["if(to_comp",{"_index":753,"title":{},"body":{"components/ConnectionComponent.html":{}}}],["if(type",{"_index":3836,"title":{},"body":{"classes/Render.html":{}}}],["if(value",{"_index":417,"title":{},"body":{"classes/Cell.html":{}}}],["if(x",{"_index":4248,"title":{},"body":{"injectables/ViewportService.html":{}}}],["image",{"_index":2295,"title":{},"body":{"components/ImageComponent.html":{},"classes/Shuttle.html":{}}}],["image'},{'name",{"_index":848,"title":{},"body":{"components/ConnectionComponent.html":{},"components/DraftdetailComponent.html":{},"components/ImageComponent.html":{},"components/InletComponent.html":{},"components/MixerViewComponent.html":{},"components/NoteComponent.html":{},"components/OpHelpModal.html":{},"components/OpSequencerComponent.html":{},"components/OpsComponent.html":{},"components/ParameterComponent.html":{},"components/PlayerComponent.html":{},"components/SnackbarComponent.html":{},"components/VirtualPedalsComponent.html":{},"components/WeavingStateComponent.html":{}}}],["image.component.html",{"_index":2297,"title":{},"body":{"components/ImageComponent.html":{}}}],["image.component.scss",{"_index":2296,"title":{},"body":{"components/ImageComponent.html":{}}}],["imagecomponent",{"_index":847,"title":{"components/ImageComponent.html":{}},"body":{"components/ConnectionComponent.html":{},"components/DraftdetailComponent.html":{},"components/ImageComponent.html":{},"components/InletComponent.html":{},"modules/MixerModule.html":{},"components/MixerViewComponent.html":{},"components/NoteComponent.html":{},"components/OpHelpModal.html":{},"components/OpSequencerComponent.html":{},"components/OpsComponent.html":{},"components/ParameterComponent.html":{},"components/PlayerComponent.html":{},"components/SnackbarComponent.html":{},"components/VirtualPedalsComponent.html":{},"components/WeavingStateComponent.html":{},"overview.html":{}}}],["imagedata",{"_index":4012,"title":{},"body":{"classes/Shape-1.html":{}}}],["img_data",{"_index":4005,"title":{},"body":{"classes/Shape-1.html":{}}}],["impertive/object",{"_index":4555,"title":{},"body":{"index.html":{}}}],["implement",{"_index":3962,"title":{},"body":{"classes/Shape.html":{}}}],["implementing",{"_index":4551,"title":{},"body":{"index.html":{}}}],["implements",{"_index":114,"title":{},"body":{"classes/AbstractOpFactory.html":{},"classes/BaseOp.html":{},"classes/Branch.html":{},"classes/Bus.html":{},"components/ConnectionComponent.html":{},"classes/DBListener.html":{},"classes/DBListenerArray.html":{},"classes/DBNode.html":{},"classes/DBNodeArray.html":{},"classes/DBTwoWay.html":{},"classes/DBTwoWayArray.html":{},"classes/DBWriteBuffer.html":{},"classes/DBWriter.html":{},"classes/DBWriterArray.html":{},"interfaces/DesignActions.html":{},"components/DraftdetailComponent.html":{},"components/ImageComponent.html":{},"components/InletComponent.html":{},"directives/MarqueeComponent.html":{},"classes/Merge.html":{},"components/MixerViewComponent.html":{},"interfaces/NodeMethods.html":{},"interfaces/NodeParams.html":{},"components/NoteComponent.html":{},"classes/OnlineStatus.html":{},"interfaces/OpClassifier.html":{},"components/OpHelpModal.html":{},"classes/OpSequencer.html":{},"components/OpSequencerComponent.html":{},"interfaces/OperationProperties.html":{},"components/OpsComponent.html":{},"components/ParameterComponent.html":{},"classes/Pipe.html":{},"components/PlayerComponent.html":{},"classes/Seed.html":{},"directives/SelectionComponent.html":{},"components/SnackbarComponent.html":{},"interfaces/TopologyDef.html":{},"components/VirtualPedalsComponent.html":{},"components/WeavingStateComponent.html":{}}}],["import",{"_index":50,"title":{},"body":{"classes/AbstractOpFactory.html":{},"classes/BaseOp.html":{},"classes/Branch.html":{},"classes/Bus.html":{},"interfaces/ChainIndex.html":{},"interfaces/ChainOp.html":{},"components/ConnectionComponent.html":{},"classes/DBListener.html":{},"classes/DBListenerArray.html":{},"classes/DBNode.html":{},"classes/DBNodeArray.html":{},"classes/DBTwoWay.html":{},"classes/DBTwoWayArray.html":{},"classes/DBWriteBuffer.html":{},"classes/DBWriter.html":{},"classes/DBWriterArray.html":{},"interfaces/DesignActions.html":{},"interfaces/DraftMap.html":{},"interfaces/DraftNodeProxy.html":{},"interfaces/DraftOperationClassification.html":{},"components/DraftdetailComponent.html":{},"interfaces/DynamicOperation.html":{},"interfaces/FileObj.html":{},"interfaces/FileSaver.html":{},"interfaces/Fileloader.html":{},"interfaces/IOTuple.html":{},"components/ImageComponent.html":{},"interfaces/Ink.html":{},"injectables/InkService.html":{},"components/InletComponent.html":{},"interfaces/Interlacement.html":{},"interfaces/InterlacementVal.html":{},"injectables/LayersService.html":{},"interfaces/LoadResponse.html":{},"interfaces/LoomConfig.html":{},"injectables/MappingsService.html":{},"directives/MarqueeComponent.html":{},"classes/Merge.html":{},"modules/MixerModule.html":{},"components/MixerViewComponent.html":{},"interfaces/NodeComponentProxy.html":{},"interfaces/NodeMethods.html":{},"interfaces/NodeParams.html":{},"components/NoteComponent.html":{},"classes/OnlineStatus.html":{},"interfaces/OpClassifier.html":{},"interfaces/OpComponentProxy.html":{},"components/OpHelpModal.html":{},"interfaces/OpInput.html":{},"classes/OpSequencer.html":{},"components/OpSequencerComponent.html":{},"interfaces/OperationClassification.html":{},"interfaces/OperationProperties.html":{},"components/OpsComponent.html":{},"interfaces/PairedOp.html":{},"components/ParameterComponent.html":{},"interfaces/Pedal.html":{},"classes/PedalConfig.html":{},"interfaces/PedalEvent.html":{},"classes/PedalStatus.html":{},"injectables/PedalsService.html":{},"classes/Pipe.html":{},"components/PlayerComponent.html":{},"modules/PlayerModule.html":{},"interfaces/PlayerOp.html":{},"injectables/PlayerService.html":{},"interfaces/PlayerState.html":{},"interfaces/PlayerState-1.html":{},"classes/Render.html":{},"interfaces/SaveObj.html":{},"classes/Seed.html":{},"classes/Selection.html":{},"directives/SelectionComponent.html":{},"injectables/SequencerService.html":{},"classes/Shape.html":{},"classes/Shape-1.html":{},"components/SnackbarComponent.html":{},"interfaces/StatusMessage.html":{},"classes/System.html":{},"interfaces/TopologyDef.html":{},"interfaces/TreeNode.html":{},"interfaces/TreeNodeProxy.html":{},"interfaces/TreeOperation.html":{},"injectables/ViewportService.html":{},"components/VirtualPedalsComponent.html":{},"interfaces/WeavingLog.html":{},"interfaces/WeavingPick.html":{},"interfaces/WeavingPick-1.html":{},"components/WeavingStateComponent.html":{}}}],["important",{"_index":2491,"title":{},"body":{"components/InletComponent.html":{},"index.html":{}}}],["imports",{"_index":2686,"title":{},"body":{"modules/MixerModule.html":{},"modules/PlayerModule.html":{}}}],["in_use",{"_index":4131,"title":{},"body":{"classes/System.html":{}}}],["inch",{"_index":3979,"title":{},"body":{"classes/Shape.html":{}}}],["includes",{"_index":2280,"title":{},"body":{"interfaces/IOTuple.html":{},"interfaces/TreeNode.html":{},"miscellaneous/typealiases.html":{}}}],["ind",{"_index":2610,"title":{},"body":{"injectables/MappingsService.html":{}}}],["independent",{"_index":1380,"title":{},"body":{"interfaces/DesignActions.html":{}}}],["index",{"_index":7,"title":{"index.html":{}},"body":{"classes/AbstractOpFactory.html":{},"classes/BaseOp.html":{},"interfaces/Bounds.html":{},"classes/Branch.html":{},"classes/Bus.html":{},"classes/Cell.html":{},"interfaces/ChainIndex.html":{},"interfaces/ChainOp.html":{},"components/ConnectionComponent.html":{},"interfaces/Crossing.html":{},"classes/DBListener.html":{},"classes/DBListenerArray.html":{},"classes/DBNode.html":{},"classes/DBNodeArray.html":{},"classes/DBTwoWay.html":{},"classes/DBTwoWayArray.html":{},"classes/DBWriteBuffer.html":{},"classes/DBWriter.html":{},"classes/DBWriterArray.html":{},"interfaces/DensityUnits.html":{},"interfaces/DesignActions.html":{},"interfaces/DesignMode.html":{},"interfaces/DraftMap.html":{},"interfaces/DraftNodeProxy.html":{},"interfaces/DraftOperationClassification.html":{},"components/DraftdetailComponent.html":{},"interfaces/DynamicOperation.html":{},"interfaces/FileObj.html":{},"interfaces/FileSaver.html":{},"interfaces/Fileloader.html":{},"interfaces/IOTuple.html":{},"components/ImageComponent.html":{},"interfaces/Ink.html":{},"injectables/InkService.html":{},"components/InletComponent.html":{},"interfaces/Interlacement.html":{},"interfaces/InterlacementVal.html":{},"injectables/LayersService.html":{},"interfaces/LoadResponse.html":{},"interfaces/LoomConfig.html":{},"interfaces/LoomTypes.html":{},"injectables/MappingsService.html":{},"directives/MarqueeComponent.html":{},"interfaces/MaterialTypes.html":{},"classes/Merge.html":{},"components/MixerViewComponent.html":{},"interfaces/NodeComponentProxy.html":{},"interfaces/NodeMethods.html":{},"interfaces/NodeParams.html":{},"components/NoteComponent.html":{},"classes/OnlineStatus.html":{},"interfaces/OpClassifier.html":{},"interfaces/OpComponentProxy.html":{},"components/OpHelpModal.html":{},"interfaces/OpInput.html":{},"classes/OpSequencer.html":{},"components/OpSequencerComponent.html":{},"interfaces/OperationClassification.html":{},"interfaces/OperationParam.html":{},"interfaces/OperationProperties.html":{},"components/OpsComponent.html":{},"interfaces/PairedOp.html":{},"components/ParameterComponent.html":{},"classes/Params.html":{},"interfaces/Pedal.html":{},"classes/PedalConfig.html":{},"interfaces/PedalEvent.html":{},"classes/PedalStatus.html":{},"injectables/PedalsService.html":{},"classes/Pipe.html":{},"components/PlayerComponent.html":{},"interfaces/PlayerOp.html":{},"injectables/PlayerService.html":{},"interfaces/PlayerState.html":{},"interfaces/PlayerState-1.html":{},"interfaces/Point.html":{},"classes/Render.html":{},"interfaces/SaveObj.html":{},"classes/Seed.html":{},"classes/Selection.html":{},"directives/SelectionComponent.html":{},"injectables/SequencerService.html":{},"classes/Shape.html":{},"classes/Shape-1.html":{},"classes/Shuttle.html":{},"components/SnackbarComponent.html":{},"interfaces/StatusMessage.html":{},"classes/System.html":{},"interfaces/TopologyDef.html":{},"interfaces/TreeNode.html":{},"interfaces/TreeNodeProxy.html":{},"interfaces/TreeOperation.html":{},"interfaces/Vertex.html":{},"interfaces/ViewModes.html":{},"injectables/ViewportService.html":{},"components/VirtualPedalsComponent.html":{},"interfaces/WeavingLog.html":{},"interfaces/WeavingPick.html":{},"interfaces/WeavingPick-1.html":{},"components/WeavingStateComponent.html":{},"interfaces/YarnPath.html":{},"miscellaneous/functions.html":{},"miscellaneous/typealiases.html":{}}}],["indexed",{"_index":1635,"title":{},"body":{"interfaces/DraftMap.html":{},"interfaces/Interlacement.html":{},"interfaces/InterlacementVal.html":{}}}],["indexes",{"_index":2256,"title":{},"body":{"interfaces/IOTuple.html":{},"interfaces/TreeNode.html":{}}}],["indexs",{"_index":4100,"title":{},"body":{"classes/Shuttle.html":{}}}],["indicating",{"_index":3986,"title":{},"body":{"classes/Shape.html":{}}}],["indicator",{"_index":3135,"title":{},"body":{"components/OpSequencerComponent.html":{},"components/PlayerComponent.html":{},"components/WeavingStateComponent.html":{}}}],["indicator.ng",{"_index":3137,"title":{},"body":{"components/OpSequencerComponent.html":{}}}],["indicator::after",{"_index":3136,"title":{},"body":{"components/OpSequencerComponent.html":{},"components/PlayerComponent.html":{}}}],["indicatorrotate.ng",{"_index":3143,"title":{},"body":{"components/OpSequencerComponent.html":{}}}],["individual",{"_index":4463,"title":{},"body":{"index.html":{}}}],["inets",{"_index":2168,"title":{},"body":{"interfaces/DynamicOperation.html":{},"interfaces/OpInput.html":{},"interfaces/OperationClassification.html":{},"interfaces/TreeOperation.html":{}}}],["info",{"_index":3,"title":{},"body":{"classes/AbstractOpFactory.html":{},"classes/BaseOp.html":{},"interfaces/Bounds.html":{},"classes/Branch.html":{},"classes/Bus.html":{},"classes/Cell.html":{},"interfaces/ChainIndex.html":{},"interfaces/ChainOp.html":{},"components/ConnectionComponent.html":{},"interfaces/Crossing.html":{},"classes/DBListener.html":{},"classes/DBListenerArray.html":{},"classes/DBNode.html":{},"classes/DBNodeArray.html":{},"classes/DBTwoWay.html":{},"classes/DBTwoWayArray.html":{},"classes/DBWriteBuffer.html":{},"classes/DBWriter.html":{},"classes/DBWriterArray.html":{},"interfaces/DensityUnits.html":{},"interfaces/DesignActions.html":{},"interfaces/DesignMode.html":{},"interfaces/DraftMap.html":{},"interfaces/DraftNodeProxy.html":{},"interfaces/DraftOperationClassification.html":{},"components/DraftdetailComponent.html":{},"interfaces/DynamicOperation.html":{},"interfaces/FileObj.html":{},"interfaces/FileSaver.html":{},"interfaces/Fileloader.html":{},"interfaces/IOTuple.html":{},"components/ImageComponent.html":{},"interfaces/Ink.html":{},"injectables/InkService.html":{},"components/InletComponent.html":{},"interfaces/Interlacement.html":{},"interfaces/InterlacementVal.html":{},"injectables/LayersService.html":{},"interfaces/LoadResponse.html":{},"interfaces/LoomConfig.html":{},"interfaces/LoomTypes.html":{},"injectables/MappingsService.html":{},"directives/MarqueeComponent.html":{},"interfaces/MaterialTypes.html":{},"classes/Merge.html":{},"modules/MixerModule.html":{},"components/MixerViewComponent.html":{},"interfaces/NodeComponentProxy.html":{},"interfaces/NodeMethods.html":{},"interfaces/NodeParams.html":{},"components/NoteComponent.html":{},"classes/OnlineStatus.html":{},"interfaces/OpClassifier.html":{},"interfaces/OpComponentProxy.html":{},"components/OpHelpModal.html":{},"interfaces/OpInput.html":{},"classes/OpSequencer.html":{},"components/OpSequencerComponent.html":{},"interfaces/OperationClassification.html":{},"interfaces/OperationParam.html":{},"interfaces/OperationProperties.html":{},"components/OpsComponent.html":{},"interfaces/PairedOp.html":{},"components/ParameterComponent.html":{},"classes/Params.html":{},"interfaces/Pedal.html":{},"classes/PedalConfig.html":{},"interfaces/PedalEvent.html":{},"classes/PedalStatus.html":{},"injectables/PedalsService.html":{},"classes/Pipe.html":{},"components/PlayerComponent.html":{},"modules/PlayerModule.html":{},"interfaces/PlayerOp.html":{},"injectables/PlayerService.html":{},"interfaces/PlayerState.html":{},"interfaces/PlayerState-1.html":{},"interfaces/Point.html":{},"classes/Render.html":{},"interfaces/SaveObj.html":{},"classes/Seed.html":{},"classes/Selection.html":{},"directives/SelectionComponent.html":{},"injectables/SequencerService.html":{},"classes/Shape.html":{},"classes/Shape-1.html":{},"classes/Shuttle.html":{},"components/SnackbarComponent.html":{},"interfaces/StatusMessage.html":{},"classes/System.html":{},"interfaces/TopologyDef.html":{},"interfaces/TreeNode.html":{},"interfaces/TreeNodeProxy.html":{},"interfaces/TreeOperation.html":{},"interfaces/Vertex.html":{},"interfaces/ViewModes.html":{},"injectables/ViewportService.html":{},"components/VirtualPedalsComponent.html":{},"interfaces/WeavingLog.html":{},"interfaces/WeavingPick.html":{},"interfaces/WeavingPick-1.html":{},"components/WeavingStateComponent.html":{},"interfaces/YarnPath.html":{}}}],["inforamation",{"_index":4577,"title":{},"body":{"index.html":{}}}],["information",{"_index":1610,"title":{},"body":{"interfaces/DraftMap.html":{},"interfaces/IOTuple.html":{},"interfaces/Interlacement.html":{},"interfaces/InterlacementVal.html":{},"interfaces/Pedal.html":{},"classes/PedalStatus.html":{},"injectables/PedalsService.html":{},"classes/Shape.html":{},"interfaces/TreeNode.html":{},"index.html":{},"miscellaneous/typealiases.html":{}}}],["inherent",{"_index":3148,"title":{},"body":{"interfaces/OperationParam.html":{}}}],["inherit",{"_index":3099,"title":{},"body":{"components/OpSequencerComponent.html":{},"components/PlayerComponent.html":{},"components/WeavingStateComponent.html":{}}}],["inherited",{"_index":952,"title":{},"body":{"classes/DBListener.html":{},"classes/DBListenerArray.html":{},"classes/DBTwoWay.html":{},"classes/DBTwoWayArray.html":{},"classes/DBWriteBuffer.html":{},"classes/DBWriter.html":{},"classes/DBWriterArray.html":{},"classes/OnlineStatus.html":{},"injectables/SequencerService.html":{}}}],["inhertis",{"_index":4043,"title":{},"body":{"classes/Shuttle.html":{}}}],["init",{"_index":538,"title":{},"body":{"interfaces/ChainOp.html":{},"classes/DBListener.html":{},"classes/DBListenerArray.html":{},"classes/DBNode.html":{},"classes/DBNodeArray.html":{},"classes/DBTwoWay.html":{},"classes/DBTwoWayArray.html":{},"classes/DBWriteBuffer.html":{},"classes/DBWriter.html":{},"classes/DBWriterArray.html":{},"interfaces/DraftOperationClassification.html":{},"interfaces/LoomConfig.html":{},"interfaces/NodeMethods.html":{},"interfaces/NodeParams.html":{},"components/NoteComponent.html":{},"classes/OnlineStatus.html":{},"classes/OpSequencer.html":{},"interfaces/PairedOp.html":{},"interfaces/Pedal.html":{},"classes/PedalConfig.html":{},"interfaces/PedalEvent.html":{},"classes/PedalStatus.html":{},"injectables/PedalsService.html":{},"components/PlayerComponent.html":{},"interfaces/PlayerOp.html":{},"injectables/PlayerService.html":{},"interfaces/PlayerState.html":{},"interfaces/PlayerState-1.html":{},"injectables/SequencerService.html":{},"interfaces/WeavingLog.html":{},"interfaces/WeavingPick.html":{},"interfaces/WeavingPick-1.html":{},"miscellaneous/functions.html":{}}}],["init.draft",{"_index":597,"title":{},"body":{"interfaces/ChainOp.html":{},"interfaces/PairedOp.html":{},"interfaces/PedalEvent.html":{},"interfaces/PlayerOp.html":{}}}],["init.numpicks",{"_index":594,"title":{},"body":{"interfaces/ChainOp.html":{},"interfaces/PairedOp.html":{},"interfaces/PedalEvent.html":{},"interfaces/PlayerOp.html":{}}}],["init.row",{"_index":571,"title":{},"body":{"interfaces/ChainOp.html":{},"interfaces/DraftOperationClassification.html":{},"interfaces/LoomConfig.html":{},"interfaces/PairedOp.html":{},"classes/PedalConfig.html":{},"interfaces/PedalEvent.html":{},"interfaces/PlayerOp.html":{},"injectables/PlayerService.html":{}}}],["init.row+1",{"_index":548,"title":{},"body":{"interfaces/ChainOp.html":{},"interfaces/PairedOp.html":{},"interfaces/PedalEvent.html":{},"interfaces/PlayerOp.html":{}}}],["init.row+wefts(init.draft.drawdown",{"_index":561,"title":{},"body":{"interfaces/ChainOp.html":{},"interfaces/PairedOp.html":{},"interfaces/PedalEvent.html":{},"interfaces/PlayerOp.html":{}}}],["init.weaving",{"_index":592,"title":{},"body":{"interfaces/ChainOp.html":{},"interfaces/PairedOp.html":{},"interfaces/PedalEvent.html":{},"interfaces/PlayerOp.html":{}}}],["initalize",{"_index":3306,"title":{},"body":{"components/ParameterComponent.html":{}}}],["initatites",{"_index":1942,"title":{},"body":{"components/DraftdetailComponent.html":{}}}],["initdraft",{"_index":3732,"title":{},"body":{"interfaces/PlayerState.html":{},"interfaces/PlayerState-1.html":{},"interfaces/WeavingLog.html":{},"interfaces/WeavingPick.html":{},"interfaces/WeavingPick-1.html":{}}}],["initdraftwithparams",{"_index":1336,"title":{},"body":{"interfaces/DesignActions.html":{},"directives/MarqueeComponent.html":{}}}],["initdraftwithparams({ud_name",{"_index":2662,"title":{},"body":{"directives/MarqueeComponent.html":{}}}],["initialize",{"_index":3054,"title":{},"body":{"classes/OpSequencer.html":{}}}],["initstate",{"_index":533,"title":{},"body":{"interfaces/ChainOp.html":{},"interfaces/DraftOperationClassification.html":{},"interfaces/LoomConfig.html":{},"interfaces/PairedOp.html":{},"classes/PedalConfig.html":{},"interfaces/PedalEvent.html":{},"interfaces/PlayerOp.html":{},"injectables/PlayerService.html":{},"interfaces/PlayerState.html":{},"interfaces/PlayerState-1.html":{},"interfaces/WeavingLog.html":{},"interfaces/WeavingPick.html":{},"interfaces/WeavingPick-1.html":{},"miscellaneous/functions.html":{}}}],["initval",{"_index":981,"title":{},"body":{"classes/DBListener.html":{},"classes/DBListenerArray.html":{},"classes/DBNode.html":{},"classes/DBNodeArray.html":{},"classes/DBTwoWay.html":{},"classes/DBTwoWayArray.html":{},"classes/DBWriteBuffer.html":{},"classes/DBWriter.html":{},"classes/DBWriterArray.html":{},"interfaces/NodeMethods.html":{},"interfaces/NodeParams.html":{},"classes/OnlineStatus.html":{},"interfaces/Pedal.html":{},"classes/PedalStatus.html":{},"injectables/PedalsService.html":{}}}],["inject",{"_index":2007,"title":{},"body":{"components/DraftdetailComponent.html":{},"components/MixerViewComponent.html":{},"components/OpHelpModal.html":{},"components/OpsComponent.html":{},"components/SnackbarComponent.html":{}}}],["inject(mat_dialog_data",{"_index":2017,"title":{},"body":{"components/DraftdetailComponent.html":{},"components/MixerViewComponent.html":{},"components/OpHelpModal.html":{},"components/OpsComponent.html":{}}}],["inject(mat_snack_bar_data",{"_index":4110,"title":{},"body":{"components/SnackbarComponent.html":{}}}],["injectable",{"_index":429,"title":{"injectables/InkService.html":{},"injectables/LayersService.html":{},"injectables/MappingsService.html":{},"injectables/PedalsService.html":{},"injectables/PlayerService.html":{},"injectables/SequencerService.html":{},"injectables/ViewportService.html":{}},"body":{"interfaces/ChainIndex.html":{},"interfaces/DraftOperationClassification.html":{},"interfaces/Ink.html":{},"injectables/InkService.html":{},"injectables/LayersService.html":{},"interfaces/LoomConfig.html":{},"injectables/MappingsService.html":{},"interfaces/Pedal.html":{},"classes/PedalConfig.html":{},"classes/PedalStatus.html":{},"injectables/PedalsService.html":{},"injectables/PlayerService.html":{},"injectables/SequencerService.html":{},"injectables/ViewportService.html":{}}}],["injectables",{"_index":2365,"title":{},"body":{"injectables/InkService.html":{},"injectables/LayersService.html":{},"injectables/MappingsService.html":{},"injectables/PedalsService.html":{},"injectables/PlayerService.html":{},"injectables/SequencerService.html":{},"injectables/ViewportService.html":{},"overview.html":{}}}],["ink",{"_index":1382,"title":{"interfaces/Ink.html":{}},"body":{"interfaces/DesignActions.html":{},"components/DraftdetailComponent.html":{},"interfaces/Ink.html":{},"injectables/InkService.html":{},"components/WeavingStateComponent.html":{}}}],["ink.selected",{"_index":2358,"title":{},"body":{"interfaces/Ink.html":{},"injectables/InkService.html":{}}}],["inkactionchange",{"_index":1954,"title":{},"body":{"components/DraftdetailComponent.html":{}}}],["inkactionchange(name",{"_index":1969,"title":{},"body":{"components/DraftdetailComponent.html":{}}}],["inks",{"_index":1406,"title":{},"body":{"interfaces/DesignActions.html":{},"components/DraftdetailComponent.html":{},"interfaces/Ink.html":{},"injectables/InkService.html":{}}}],["inkservice",{"_index":1313,"title":{"injectables/InkService.html":{}},"body":{"interfaces/DesignActions.html":{},"components/DraftdetailComponent.html":{},"interfaces/Ink.html":{},"injectables/InkService.html":{}}}],["inlay",{"_index":2325,"title":{},"body":{"interfaces/Ink.html":{},"injectables/InkService.html":{},"index.html":{}}}],["inlet",{"_index":587,"title":{},"body":{"interfaces/ChainOp.html":{},"components/ConnectionComponent.html":{},"interfaces/DynamicOperation.html":{},"interfaces/IOTuple.html":{},"components/InletComponent.html":{},"components/OpHelpModal.html":{},"interfaces/OpInput.html":{},"interfaces/OperationClassification.html":{},"interfaces/OperationParam.html":{},"interfaces/PairedOp.html":{},"classes/Params.html":{},"interfaces/PedalEvent.html":{},"interfaces/PlayerOp.html":{},"interfaces/TreeNode.html":{},"interfaces/TreeOperation.html":{},"index.html":{},"miscellaneous/typealiases.html":{}}}],["inlet'},{'name",{"_index":850,"title":{},"body":{"components/ConnectionComponent.html":{},"components/DraftdetailComponent.html":{},"components/ImageComponent.html":{},"components/InletComponent.html":{},"components/MixerViewComponent.html":{},"components/NoteComponent.html":{},"components/OpHelpModal.html":{},"components/OpSequencerComponent.html":{},"components/OpsComponent.html":{},"components/ParameterComponent.html":{},"components/PlayerComponent.html":{},"components/SnackbarComponent.html":{},"components/VirtualPedalsComponent.html":{},"components/WeavingStateComponent.html":{}}}],["inlet.component.html",{"_index":2384,"title":{},"body":{"components/InletComponent.html":{}}}],["inlet.component.scss",{"_index":2383,"title":{},"body":{"components/InletComponent.html":{}}}],["inlet.name",{"_index":2469,"title":{},"body":{"components/InletComponent.html":{}}}],["inlet/outlet",{"_index":2254,"title":{},"body":{"interfaces/IOTuple.html":{},"interfaces/TreeNode.html":{}}}],["inlet_drafts",{"_index":2163,"title":{},"body":{"interfaces/DynamicOperation.html":{},"interfaces/OpInput.html":{},"interfaces/OperationClassification.html":{},"interfaces/TreeOperation.html":{}}}],["inlet_drafts.reduce((acc",{"_index":2167,"title":{},"body":{"interfaces/DynamicOperation.html":{},"interfaces/OpInput.html":{},"interfaces/OperationClassification.html":{},"interfaces/TreeOperation.html":{}}}],["inletchange",{"_index":2391,"title":{},"body":{"components/InletComponent.html":{}}}],["inletcomponent",{"_index":849,"title":{"components/InletComponent.html":{}},"body":{"components/ConnectionComponent.html":{},"components/DraftdetailComponent.html":{},"components/ImageComponent.html":{},"components/InletComponent.html":{},"modules/MixerModule.html":{},"components/MixerViewComponent.html":{},"components/NoteComponent.html":{},"components/OpHelpModal.html":{},"components/OpSequencerComponent.html":{},"components/OpsComponent.html":{},"components/ParameterComponent.html":{},"components/PlayerComponent.html":{},"components/SnackbarComponent.html":{},"components/VirtualPedalsComponent.html":{},"components/WeavingStateComponent.html":{},"overview.html":{}}}],["inletdrafts",{"_index":60,"title":{},"body":{"classes/AbstractOpFactory.html":{},"classes/BaseOp.html":{},"classes/Branch.html":{},"classes/Bus.html":{},"interfaces/DynamicOperation.html":{},"classes/Merge.html":{},"interfaces/OpClassifier.html":{},"interfaces/OpInput.html":{},"interfaces/OperationClassification.html":{},"interfaces/OperationProperties.html":{},"classes/Pipe.html":{},"classes/Seed.html":{},"interfaces/TopologyDef.html":{},"interfaces/TreeOperation.html":{},"miscellaneous/functions.html":{},"miscellaneous/typealiases.html":{}}}],["inletid",{"_index":2395,"title":{},"body":{"components/InletComponent.html":{}}}],["inletid+1",{"_index":2471,"title":{},"body":{"components/InletComponent.html":{}}}],["inlets",{"_index":61,"title":{},"body":{"classes/AbstractOpFactory.html":{},"classes/BaseOp.html":{},"classes/Branch.html":{},"classes/Bus.html":{},"interfaces/ChainOp.html":{},"interfaces/DraftNodeProxy.html":{},"interfaces/DynamicOperation.html":{},"interfaces/FileObj.html":{},"interfaces/FileSaver.html":{},"interfaces/Fileloader.html":{},"interfaces/IOTuple.html":{},"interfaces/LoadResponse.html":{},"classes/Merge.html":{},"interfaces/NodeComponentProxy.html":{},"interfaces/OpClassifier.html":{},"interfaces/OpComponentProxy.html":{},"components/OpHelpModal.html":{},"interfaces/OpInput.html":{},"interfaces/OperationClassification.html":{},"interfaces/OperationProperties.html":{},"interfaces/PairedOp.html":{},"interfaces/PedalEvent.html":{},"classes/Pipe.html":{},"interfaces/PlayerOp.html":{},"interfaces/SaveObj.html":{},"classes/Seed.html":{},"interfaces/StatusMessage.html":{},"interfaces/TopologyDef.html":{},"interfaces/TreeNode.html":{},"interfaces/TreeNodeProxy.html":{},"interfaces/TreeOperation.html":{},"index.html":{},"miscellaneous/typealiases.html":{}}}],["inline",{"_index":3093,"title":{},"body":{"components/OpSequencerComponent.html":{},"components/PlayerComponent.html":{},"components/WeavingStateComponent.html":{}}}],["input",{"_index":81,"title":{},"body":{"classes/AbstractOpFactory.html":{},"classes/BaseOp.html":{},"classes/Branch.html":{},"classes/Bus.html":{},"components/ConnectionComponent.html":{},"interfaces/DesignActions.html":{},"interfaces/DraftNodeProxy.html":{},"interfaces/DraftOperationClassification.html":{},"interfaces/DynamicOperation.html":{},"interfaces/FileObj.html":{},"interfaces/FileSaver.html":{},"interfaces/Fileloader.html":{},"interfaces/IOTuple.html":{},"components/InletComponent.html":{},"interfaces/LoadResponse.html":{},"interfaces/LoomConfig.html":{},"classes/Merge.html":{},"components/MixerViewComponent.html":{},"interfaces/NodeComponentProxy.html":{},"components/NoteComponent.html":{},"interfaces/OpClassifier.html":{},"interfaces/OpComponentProxy.html":{},"components/OpHelpModal.html":{},"interfaces/OpInput.html":{},"interfaces/OperationClassification.html":{},"interfaces/OperationParam.html":{},"interfaces/OperationProperties.html":{},"components/ParameterComponent.html":{},"classes/Params.html":{},"classes/PedalConfig.html":{},"classes/Pipe.html":{},"components/PlayerComponent.html":{},"injectables/PlayerService.html":{},"interfaces/SaveObj.html":{},"classes/Seed.html":{},"interfaces/StatusMessage.html":{},"classes/System.html":{},"interfaces/TopologyDef.html":{},"interfaces/TreeNode.html":{},"interfaces/TreeNodeProxy.html":{},"interfaces/TreeOperation.html":{},"components/WeavingStateComponent.html":{},"miscellaneous/functions.html":{},"index.html":{},"miscellaneous/typealiases.html":{}}}],["input('draft",{"_index":3637,"title":{},"body":{"components/PlayerComponent.html":{},"components/WeavingStateComponent.html":{}}}],["input.map((param",{"_index":3186,"title":{},"body":{"interfaces/OperationParam.html":{},"classes/Params.html":{}}}],["input/output",{"_index":78,"title":{},"body":{"classes/AbstractOpFactory.html":{},"classes/BaseOp.html":{},"classes/Branch.html":{},"classes/Bus.html":{},"classes/Merge.html":{},"interfaces/OpClassifier.html":{},"interfaces/OperationProperties.html":{},"classes/Pipe.html":{},"classes/Seed.html":{},"interfaces/TopologyDef.html":{}}}],["input_drafts",{"_index":137,"title":{},"body":{"classes/AbstractOpFactory.html":{},"classes/BaseOp.html":{},"classes/Branch.html":{},"classes/Bus.html":{},"classes/Merge.html":{},"interfaces/OpClassifier.html":{},"interfaces/OperationProperties.html":{},"classes/Pipe.html":{},"classes/Seed.html":{},"interfaces/TopologyDef.html":{}}}],["input_params",{"_index":138,"title":{},"body":{"classes/AbstractOpFactory.html":{},"classes/BaseOp.html":{},"classes/Branch.html":{},"classes/Bus.html":{},"interfaces/ChainOp.html":{},"classes/Merge.html":{},"interfaces/OpClassifier.html":{},"interfaces/OperationProperties.html":{},"interfaces/PairedOp.html":{},"interfaces/PedalEvent.html":{},"classes/Pipe.html":{},"interfaces/PlayerOp.html":{},"classes/Seed.html":{},"interfaces/TopologyDef.html":{}}}],["inputs",{"_index":73,"title":{},"body":{"classes/AbstractOpFactory.html":{},"classes/BaseOp.html":{},"classes/Branch.html":{},"classes/Bus.html":{},"interfaces/ChainOp.html":{},"components/ConnectionComponent.html":{},"interfaces/DraftNodeProxy.html":{},"interfaces/DynamicOperation.html":{},"interfaces/FileObj.html":{},"interfaces/FileSaver.html":{},"interfaces/Fileloader.html":{},"interfaces/IOTuple.html":{},"components/InletComponent.html":{},"interfaces/LoadResponse.html":{},"classes/Merge.html":{},"interfaces/NodeComponentProxy.html":{},"components/NoteComponent.html":{},"interfaces/OpClassifier.html":{},"interfaces/OpComponentProxy.html":{},"components/OpHelpModal.html":{},"interfaces/OpInput.html":{},"interfaces/OperationClassification.html":{},"interfaces/OperationParam.html":{},"interfaces/OperationProperties.html":{},"interfaces/PairedOp.html":{},"components/ParameterComponent.html":{},"classes/Params.html":{},"interfaces/PedalEvent.html":{},"classes/Pipe.html":{},"components/PlayerComponent.html":{},"interfaces/PlayerOp.html":{},"interfaces/SaveObj.html":{},"classes/Seed.html":{},"interfaces/StatusMessage.html":{},"interfaces/TopologyDef.html":{},"interfaces/TreeNode.html":{},"interfaces/TreeNodeProxy.html":{},"interfaces/TreeOperation.html":{},"components/WeavingStateComponent.html":{},"miscellaneous/functions.html":{},"index.html":{},"miscellaneous/typealiases.html":{}}}],["inputs.map((el",{"_index":2152,"title":{},"body":{"interfaces/DynamicOperation.html":{},"interfaces/OpInput.html":{},"interfaces/OperationClassification.html":{},"interfaces/TreeOperation.html":{}}}],["inputs[i",{"_index":2221,"title":{},"body":{"interfaces/DynamicOperation.html":{},"interfaces/OpInput.html":{},"interfaces/OperationClassification.html":{},"interfaces/TreeOperation.html":{}}}],["inputselected",{"_index":2392,"title":{},"body":{"components/InletComponent.html":{}}}],["ins",{"_index":290,"title":{},"body":{"classes/AbstractOpFactory.html":{},"classes/BaseOp.html":{},"classes/Branch.html":{},"classes/Bus.html":{},"classes/Merge.html":{},"interfaces/OpClassifier.html":{},"interfaces/OperationProperties.html":{},"classes/Pipe.html":{},"classes/Seed.html":{},"interfaces/TopologyDef.html":{}}}],["insert",{"_index":4045,"title":{},"body":{"classes/Shuttle.html":{}}}],["inserted::after",{"_index":3145,"title":{},"body":{"components/OpSequencerComponent.html":{}}}],["inset/outout",{"_index":2259,"title":{},"body":{"interfaces/IOTuple.html":{},"interfaces/TreeNode.html":{}}}],["install",{"_index":4506,"title":{},"body":{"index.html":{}}}],["installation",{"_index":4498,"title":{},"body":{"index.html":{}}}],["installed",{"_index":4507,"title":{},"body":{"index.html":{}}}],["installing",{"_index":4451,"title":{},"body":{"index.html":{}}}],["instance",{"_index":1626,"title":{},"body":{"interfaces/DraftMap.html":{},"interfaces/IOTuple.html":{},"interfaces/Interlacement.html":{},"interfaces/InterlacementVal.html":{},"interfaces/TreeNode.html":{}}}],["instead",{"_index":1616,"title":{},"body":{"interfaces/DraftMap.html":{},"interfaces/Interlacement.html":{},"interfaces/InterlacementVal.html":{}}}],["interact",{"_index":3497,"title":{},"body":{"interfaces/Pedal.html":{},"classes/PedalStatus.html":{},"injectables/PedalsService.html":{},"index.html":{}}}],["interested",{"_index":4455,"title":{},"body":{"index.html":{}}}],["interface",{"_index":106,"title":{"interfaces/Bounds.html":{},"interfaces/ChainIndex.html":{},"interfaces/ChainOp.html":{},"interfaces/Crossing.html":{},"interfaces/DensityUnits.html":{},"interfaces/DesignActions.html":{},"interfaces/DesignMode.html":{},"interfaces/DraftMap.html":{},"interfaces/DraftNodeProxy.html":{},"interfaces/DraftOperationClassification.html":{},"interfaces/DynamicOperation.html":{},"interfaces/FileObj.html":{},"interfaces/FileSaver.html":{},"interfaces/Fileloader.html":{},"interfaces/IOTuple.html":{},"interfaces/Ink.html":{},"interfaces/Interlacement.html":{},"interfaces/InterlacementVal.html":{},"interfaces/LoadResponse.html":{},"interfaces/LoomConfig.html":{},"interfaces/LoomTypes.html":{},"interfaces/MaterialTypes.html":{},"interfaces/NodeComponentProxy.html":{},"interfaces/NodeMethods.html":{},"interfaces/NodeParams.html":{},"interfaces/OpClassifier.html":{},"interfaces/OpComponentProxy.html":{},"interfaces/OpInput.html":{},"interfaces/OperationClassification.html":{},"interfaces/OperationParam.html":{},"interfaces/OperationProperties.html":{},"interfaces/PairedOp.html":{},"interfaces/Pedal.html":{},"interfaces/PedalEvent.html":{},"interfaces/PlayerOp.html":{},"interfaces/PlayerState.html":{},"interfaces/PlayerState-1.html":{},"interfaces/Point.html":{},"interfaces/SaveObj.html":{},"interfaces/StatusMessage.html":{},"interfaces/TopologyDef.html":{},"interfaces/TreeNode.html":{},"interfaces/TreeNodeProxy.html":{},"interfaces/TreeOperation.html":{},"interfaces/Vertex.html":{},"interfaces/ViewModes.html":{},"interfaces/WeavingLog.html":{},"interfaces/WeavingPick.html":{},"interfaces/WeavingPick-1.html":{},"interfaces/YarnPath.html":{}},"body":{"classes/AbstractOpFactory.html":{},"classes/BaseOp.html":{},"interfaces/Bounds.html":{},"classes/Branch.html":{},"classes/Bus.html":{},"interfaces/ChainIndex.html":{},"interfaces/ChainOp.html":{},"interfaces/Crossing.html":{},"classes/DBListener.html":{},"classes/DBListenerArray.html":{},"classes/DBNode.html":{},"classes/DBNodeArray.html":{},"classes/DBTwoWay.html":{},"classes/DBTwoWayArray.html":{},"classes/DBWriteBuffer.html":{},"classes/DBWriter.html":{},"classes/DBWriterArray.html":{},"interfaces/DensityUnits.html":{},"interfaces/DesignActions.html":{},"interfaces/DesignMode.html":{},"interfaces/DraftMap.html":{},"interfaces/DraftNodeProxy.html":{},"interfaces/DraftOperationClassification.html":{},"interfaces/DynamicOperation.html":{},"interfaces/FileObj.html":{},"interfaces/FileSaver.html":{},"interfaces/Fileloader.html":{},"interfaces/IOTuple.html":{},"interfaces/Ink.html":{},"injectables/InkService.html":{},"interfaces/Interlacement.html":{},"interfaces/InterlacementVal.html":{},"interfaces/LoadResponse.html":{},"interfaces/LoomConfig.html":{},"interfaces/LoomTypes.html":{},"interfaces/MaterialTypes.html":{},"classes/Merge.html":{},"interfaces/NodeComponentProxy.html":{},"interfaces/NodeMethods.html":{},"interfaces/NodeParams.html":{},"classes/OnlineStatus.html":{},"interfaces/OpClassifier.html":{},"interfaces/OpComponentProxy.html":{},"interfaces/OpInput.html":{},"interfaces/OperationClassification.html":{},"interfaces/OperationParam.html":{},"interfaces/OperationProperties.html":{},"interfaces/PairedOp.html":{},"classes/Params.html":{},"interfaces/Pedal.html":{},"classes/PedalConfig.html":{},"interfaces/PedalEvent.html":{},"classes/PedalStatus.html":{},"injectables/PedalsService.html":{},"classes/Pipe.html":{},"interfaces/PlayerOp.html":{},"injectables/PlayerService.html":{},"interfaces/PlayerState.html":{},"interfaces/PlayerState-1.html":{},"interfaces/Point.html":{},"interfaces/SaveObj.html":{},"classes/Seed.html":{},"injectables/SequencerService.html":{},"interfaces/StatusMessage.html":{},"interfaces/TopologyDef.html":{},"interfaces/TreeNode.html":{},"interfaces/TreeNodeProxy.html":{},"interfaces/TreeOperation.html":{},"interfaces/Vertex.html":{},"interfaces/ViewModes.html":{},"interfaces/WeavingLog.html":{},"interfaces/WeavingPick.html":{},"interfaces/WeavingPick-1.html":{},"interfaces/YarnPath.html":{},"index.html":{}}}],["interfaces",{"_index":337,"title":{},"body":{"interfaces/Bounds.html":{},"interfaces/ChainIndex.html":{},"interfaces/ChainOp.html":{},"interfaces/Crossing.html":{},"interfaces/DensityUnits.html":{},"interfaces/DesignActions.html":{},"interfaces/DesignMode.html":{},"interfaces/DraftMap.html":{},"interfaces/DraftNodeProxy.html":{},"interfaces/DraftOperationClassification.html":{},"interfaces/DynamicOperation.html":{},"interfaces/FileObj.html":{},"interfaces/FileSaver.html":{},"interfaces/Fileloader.html":{},"interfaces/IOTuple.html":{},"interfaces/Ink.html":{},"interfaces/Interlacement.html":{},"interfaces/InterlacementVal.html":{},"interfaces/LoadResponse.html":{},"interfaces/LoomConfig.html":{},"interfaces/LoomTypes.html":{},"interfaces/MaterialTypes.html":{},"interfaces/NodeComponentProxy.html":{},"interfaces/NodeMethods.html":{},"interfaces/NodeParams.html":{},"interfaces/OpClassifier.html":{},"interfaces/OpComponentProxy.html":{},"interfaces/OpInput.html":{},"interfaces/OperationClassification.html":{},"interfaces/OperationParam.html":{},"interfaces/OperationProperties.html":{},"interfaces/PairedOp.html":{},"interfaces/Pedal.html":{},"interfaces/PedalEvent.html":{},"interfaces/PlayerOp.html":{},"interfaces/PlayerState.html":{},"interfaces/PlayerState-1.html":{},"interfaces/Point.html":{},"interfaces/SaveObj.html":{},"interfaces/StatusMessage.html":{},"interfaces/TopologyDef.html":{},"interfaces/TreeNode.html":{},"interfaces/TreeNodeProxy.html":{},"interfaces/TreeOperation.html":{},"interfaces/Vertex.html":{},"interfaces/ViewModes.html":{},"interfaces/WeavingLog.html":{},"interfaces/WeavingPick.html":{},"interfaces/WeavingPick-1.html":{},"interfaces/YarnPath.html":{},"overview.html":{}}}],["interlace",{"_index":4429,"title":{},"body":{"miscellaneous/functions.html":{}}}],["interlacement",{"_index":1310,"title":{"interfaces/Interlacement.html":{}},"body":{"interfaces/DesignActions.html":{},"interfaces/DraftMap.html":{},"interfaces/Interlacement.html":{},"interfaces/InterlacementVal.html":{},"directives/MarqueeComponent.html":{},"components/NoteComponent.html":{},"classes/Selection.html":{},"directives/SelectionComponent.html":{},"injectables/ViewportService.html":{}}}],["interlacementval",{"_index":1643,"title":{"interfaces/InterlacementVal.html":{}},"body":{"interfaces/DraftMap.html":{},"interfaces/Interlacement.html":{},"interfaces/InterlacementVal.html":{}}}],["interlacing",{"_index":4155,"title":{},"body":{"classes/System.html":{},"miscellaneous/functions.html":{}}}],["interlalcement",{"_index":4231,"title":{},"body":{"injectables/ViewportService.html":{}}}],["intermediate",{"_index":4489,"title":{},"body":{"index.html":{}}}],["internal",{"_index":194,"title":{},"body":{"classes/AbstractOpFactory.html":{},"classes/BaseOp.html":{},"classes/Branch.html":{},"classes/Bus.html":{},"interfaces/DynamicOperation.html":{},"classes/Merge.html":{},"interfaces/OpClassifier.html":{},"interfaces/OpInput.html":{},"interfaces/OperationClassification.html":{},"interfaces/OperationProperties.html":{},"classes/Pipe.html":{},"classes/Seed.html":{},"interfaces/TopologyDef.html":{},"interfaces/TreeOperation.html":{}}}],["interpolate",{"_index":3762,"title":{},"body":{"classes/Render.html":{}}}],["interpolate(base",{"_index":3792,"title":{},"body":{"classes/Render.html":{}}}],["invalid",{"_index":3173,"title":{},"body":{"interfaces/OperationParam.html":{},"classes/Params.html":{}}}],["invert",{"_index":1833,"title":{},"body":{"interfaces/DraftOperationClassification.html":{},"interfaces/LoomConfig.html":{},"classes/PedalConfig.html":{},"injectables/PlayerService.html":{}}}],["invite",{"_index":4453,"title":{},"body":{"index.html":{}}}],["invokes",{"_index":1111,"title":{},"body":{"classes/DBListener.html":{},"classes/DBListenerArray.html":{},"classes/DBNode.html":{},"classes/DBNodeArray.html":{},"classes/DBTwoWay.html":{},"classes/DBTwoWayArray.html":{},"classes/DBWriteBuffer.html":{},"classes/DBWriter.html":{},"classes/DBWriterArray.html":{},"interfaces/NodeMethods.html":{},"interfaces/NodeParams.html":{},"classes/OnlineStatus.html":{}}}],["iotuple",{"_index":2249,"title":{"interfaces/IOTuple.html":{}},"body":{"interfaces/IOTuple.html":{},"interfaces/TreeNode.html":{}}}],["is_dynamic_op",{"_index":2961,"title":{},"body":{"components/OpHelpModal.html":{}}}],["is_preview",{"_index":1398,"title":{},"body":{"interfaces/DesignActions.html":{},"components/NoteComponent.html":{}}}],["is_set",{"_index":369,"title":{},"body":{"classes/Cell.html":{}}}],["is_up",{"_index":370,"title":{},"body":{"classes/Cell.html":{}}}],["isfront",{"_index":3763,"title":{},"body":{"classes/Render.html":{}}}],["ismapped",{"_index":3019,"title":{},"body":{"classes/OpSequencer.html":{}}}],["isn't",{"_index":446,"title":{},"body":{"interfaces/ChainIndex.html":{},"classes/Render.html":{},"injectables/SequencerService.html":{}}}],["isselected",{"_index":2369,"title":{},"body":{"injectables/InkService.html":{}}}],["isselected(name",{"_index":2377,"title":{},"body":{"injectables/InkService.html":{}}}],["isselected(name:string):boolean",{"_index":2363,"title":{},"body":{"interfaces/Ink.html":{},"injectables/InkService.html":{}}}],["isset",{"_index":372,"title":{},"body":{"classes/Cell.html":{},"interfaces/DesignActions.html":{},"components/PlayerComponent.html":{},"components/WeavingStateComponent.html":{}}}],["isup",{"_index":373,"title":{},"body":{"classes/Cell.html":{},"interfaces/DesignActions.html":{},"components/PlayerComponent.html":{},"components/WeavingStateComponent.html":{}}}],["isup():boolean",{"_index":421,"title":{},"body":{"classes/Cell.html":{}}}],["isvisible",{"_index":4133,"title":{},"body":{"classes/System.html":{}}}],["isyarnbasedview",{"_index":3764,"title":{},"body":{"classes/Render.html":{}}}],["it's",{"_index":4511,"title":{},"body":{"index.html":{}}}],["item",{"_index":1079,"title":{},"body":{"classes/DBListener.html":{},"classes/DBListenerArray.html":{},"classes/DBNode.html":{},"classes/DBNodeArray.html":{},"classes/DBTwoWay.html":{},"classes/DBTwoWayArray.html":{},"classes/DBWriteBuffer.html":{},"classes/DBWriter.html":{},"classes/DBWriterArray.html":{},"interfaces/NodeMethods.html":{},"interfaces/NodeParams.html":{},"classes/OnlineStatus.html":{},"components/VirtualPedalsComponent.html":{}}}],["items",{"_index":3092,"title":{},"body":{"components/OpSequencerComponent.html":{},"components/PlayerComponent.html":{},"components/WeavingStateComponent.html":{}}}],["iterface",{"_index":1458,"title":{},"body":{"interfaces/DesignActions.html":{},"components/NoteComponent.html":{}}}],["itself",{"_index":70,"title":{},"body":{"classes/AbstractOpFactory.html":{},"classes/BaseOp.html":{},"classes/Branch.html":{},"classes/Bus.html":{},"interfaces/IOTuple.html":{},"classes/Merge.html":{},"interfaces/OpClassifier.html":{},"interfaces/OperationProperties.html":{},"classes/Pipe.html":{},"classes/Seed.html":{},"interfaces/TopologyDef.html":{},"interfaces/TreeNode.html":{},"miscellaneous/typealiases.html":{}}}],["j",{"_index":899,"title":{},"body":{"interfaces/Crossing.html":{},"interfaces/DesignActions.html":{},"interfaces/DraftMap.html":{},"interfaces/Interlacement.html":{},"interfaces/InterlacementVal.html":{},"classes/Shape-1.html":{},"interfaces/Vertex.html":{},"components/WeavingStateComponent.html":{},"interfaces/YarnPath.html":{}}}],["j:0",{"_index":2667,"title":{},"body":{"directives/MarqueeComponent.html":{},"directives/SelectionComponent.html":{}}}],["j:j",{"_index":1518,"title":{},"body":{"interfaces/DesignActions.html":{}}}],["j=col",{"_index":1511,"title":{},"body":{"interfaces/DesignActions.html":{}}}],["jacquard",{"_index":2029,"title":{},"body":{"components/DraftdetailComponent.html":{},"index.html":{}}}],["jacuqard",{"_index":4441,"title":{},"body":{"index.html":{}}}],["jankperform",{"_index":610,"title":{},"body":{"interfaces/ChainOp.html":{},"interfaces/PairedOp.html":{},"interfaces/PedalEvent.html":{},"interfaces/PlayerOp.html":{}}}],["javascript",{"_index":4491,"title":{},"body":{"index.html":{}}}],["javasscript/typescript",{"_index":4490,"title":{},"body":{"index.html":{}}}],["jpg",{"_index":1562,"title":{},"body":{"interfaces/DesignActions.html":{},"interfaces/DraftNodeProxy.html":{},"interfaces/FileObj.html":{},"interfaces/FileSaver.html":{},"interfaces/Fileloader.html":{},"interfaces/LoadResponse.html":{},"interfaces/NodeComponentProxy.html":{},"interfaces/OpComponentProxy.html":{},"interfaces/SaveObj.html":{},"interfaces/StatusMessage.html":{},"interfaces/TreeNodeProxy.html":{}}}],["js",{"_index":4381,"title":{},"body":{"dependencies.html":{}}}],["justify",{"_index":2127,"title":{},"body":{"components/DraftdetailComponent.html":{},"components/InletComponent.html":{},"components/NoteComponent.html":{},"components/ParameterComponent.html":{},"components/SnackbarComponent.html":{}}}],["keep",{"_index":3360,"title":{},"body":{"interfaces/Pedal.html":{},"classes/PedalStatus.html":{},"injectables/PedalsService.html":{}}}],["keeping",{"_index":1164,"title":{},"body":{"classes/DBListener.html":{},"classes/DBListenerArray.html":{},"classes/DBNode.html":{},"classes/DBNodeArray.html":{},"classes/DBTwoWay.html":{},"classes/DBTwoWayArray.html":{},"classes/DBWriteBuffer.html":{},"classes/DBWriter.html":{},"classes/DBWriterArray.html":{},"interfaces/NodeMethods.html":{},"interfaces/NodeParams.html":{},"classes/OnlineStatus.html":{}}}],["keeps",{"_index":1386,"title":{},"body":{"interfaces/DesignActions.html":{},"injectables/LayersService.html":{},"miscellaneous/typealiases.html":{}}}],["key",{"_index":177,"title":{},"body":{"classes/AbstractOpFactory.html":{},"classes/BaseOp.html":{},"classes/Branch.html":{},"classes/Bus.html":{},"classes/DBListener.html":{},"classes/DBListenerArray.html":{},"classes/DBNode.html":{},"classes/DBNodeArray.html":{},"classes/DBTwoWay.html":{},"classes/DBTwoWayArray.html":{},"classes/DBWriteBuffer.html":{},"classes/DBWriter.html":{},"classes/DBWriterArray.html":{},"injectables/MappingsService.html":{},"classes/Merge.html":{},"interfaces/NodeMethods.html":{},"interfaces/NodeParams.html":{},"classes/OnlineStatus.html":{},"interfaces/OpClassifier.html":{},"interfaces/OperationProperties.html":{},"interfaces/Pedal.html":{},"classes/PedalStatus.html":{},"injectables/PedalsService.html":{},"classes/Pipe.html":{},"classes/Seed.html":{},"interfaces/TopologyDef.html":{},"components/VirtualPedalsComponent.html":{}}}],["keyboardevent",{"_index":4273,"title":{},"body":{"components/VirtualPedalsComponent.html":{}}}],["keyed",{"_index":1014,"title":{},"body":{"classes/DBListener.html":{},"classes/DBListenerArray.html":{},"classes/DBNode.html":{},"classes/DBNodeArray.html":{},"classes/DBTwoWay.html":{},"classes/DBTwoWayArray.html":{},"classes/DBWriteBuffer.html":{},"classes/DBWriter.html":{},"classes/DBWriterArray.html":{},"interfaces/NodeMethods.html":{},"interfaces/NodeParams.html":{},"classes/OnlineStatus.html":{},"miscellaneous/typealiases.html":{}}}],["keyof",{"_index":104,"title":{},"body":{"classes/AbstractOpFactory.html":{},"classes/BaseOp.html":{},"classes/Branch.html":{},"classes/Bus.html":{},"injectables/MappingsService.html":{},"classes/Merge.html":{},"interfaces/OpClassifier.html":{},"interfaces/OperationProperties.html":{},"classes/Pipe.html":{},"classes/Seed.html":{},"interfaces/TopologyDef.html":{}}}],["keys",{"_index":232,"title":{},"body":{"classes/AbstractOpFactory.html":{},"classes/BaseOp.html":{},"classes/Branch.html":{},"classes/Bus.html":{},"injectables/MappingsService.html":{},"classes/Merge.html":{},"interfaces/OpClassifier.html":{},"interfaces/OperationProperties.html":{},"classes/Pipe.html":{},"classes/Seed.html":{},"interfaces/TopologyDef.html":{}}}],["kind",{"_index":704,"title":{},"body":{"components/ConnectionComponent.html":{},"index.html":{}}}],["know",{"_index":2589,"title":{},"body":{"injectables/MappingsService.html":{},"injectables/PedalsService.html":{},"index.html":{}}}],["l",{"_index":3399,"title":{},"body":{"interfaces/Pedal.html":{},"classes/PedalStatus.html":{},"injectables/PedalsService.html":{}}}],["label",{"_index":2493,"title":{},"body":{"components/InletComponent.html":{},"components/MixerViewComponent.html":{},"components/ParameterComponent.html":{},"components/WeavingStateComponent.html":{}}}],["language",{"_index":1286,"title":{},"body":{"interfaces/DensityUnits.html":{},"interfaces/DesignMode.html":{},"interfaces/LoomTypes.html":{},"interfaces/MaterialTypes.html":{},"interfaces/ViewModes.html":{}}}],["large",{"_index":4545,"title":{},"body":{"index.html":{}}}],["larger",{"_index":2148,"title":{},"body":{"interfaces/DynamicOperation.html":{},"interfaces/OpInput.html":{},"interfaces/OperationClassification.html":{},"interfaces/TreeOperation.html":{}}}],["last",{"_index":3984,"title":{},"body":{"classes/Shape.html":{},"index.html":{}}}],["last_max",{"_index":4163,"title":{},"body":{"classes/System.html":{}}}],["last_ndx:interlacement",{"_index":1394,"title":{},"body":{"interfaces/DesignActions.html":{}}}],["lastnode",{"_index":1151,"title":{},"body":{"classes/DBListener.html":{},"classes/DBListenerArray.html":{},"classes/DBNode.html":{},"classes/DBNodeArray.html":{},"classes/DBTwoWay.html":{},"classes/DBTwoWayArray.html":{},"classes/DBWriteBuffer.html":{},"classes/DBWriter.html":{},"classes/DBWriterArray.html":{},"interfaces/NodeMethods.html":{},"interfaces/NodeParams.html":{},"classes/OnlineStatus.html":{}}}],["later",{"_index":4629,"title":{},"body":{"properties.html":{}}}],["layer",{"_index":1407,"title":{},"body":{"interfaces/DesignActions.html":{},"interfaces/DynamicOperation.html":{},"components/InletComponent.html":{},"interfaces/OpInput.html":{},"interfaces/OperationClassification.html":{},"interfaces/TreeOperation.html":{},"miscellaneous/functions.html":{}}}],["layer.createlayer",{"_index":1414,"title":{},"body":{"interfaces/DesignActions.html":{}}}],["layers",{"_index":1625,"title":{},"body":{"interfaces/DraftMap.html":{},"interfaces/Interlacement.html":{},"interfaces/InterlacementVal.html":{},"injectables/LayersService.html":{}}}],["layersservice",{"_index":1315,"title":{"injectables/LayersService.html":{}},"body":{"interfaces/DesignActions.html":{},"injectables/LayersService.html":{}}}],["leaves",{"_index":387,"title":{},"body":{"classes/Cell.html":{}}}],["left",{"_index":835,"title":{},"body":{"components/ConnectionComponent.html":{},"interfaces/DesignActions.html":{},"interfaces/DraftMap.html":{},"components/DraftdetailComponent.html":{},"components/InletComponent.html":{},"interfaces/Interlacement.html":{},"interfaces/InterlacementVal.html":{},"components/MixerViewComponent.html":{},"components/NoteComponent.html":{},"components/OpSequencerComponent.html":{},"components/OpsComponent.html":{},"components/ParameterComponent.html":{},"components/PlayerComponent.html":{},"classes/Shuttle.html":{},"components/SnackbarComponent.html":{},"components/WeavingStateComponent.html":{},"index.html":{}}}],["left_offset",{"_index":780,"title":{},"body":{"components/ConnectionComponent.html":{}}}],["left_offset*this.scale/this.default_cell_size",{"_index":782,"title":{},"body":{"components/ConnectionComponent.html":{}}}],["legacy",{"_index":198,"title":{},"body":{"classes/AbstractOpFactory.html":{},"classes/BaseOp.html":{},"classes/Branch.html":{},"classes/Bus.html":{},"interfaces/DynamicOperation.html":{},"classes/Merge.html":{},"interfaces/OpClassifier.html":{},"interfaces/OpInput.html":{},"interfaces/OperationClassification.html":{},"interfaces/OperationProperties.html":{},"classes/Pipe.html":{},"classes/Seed.html":{},"interfaces/TopologyDef.html":{},"interfaces/TreeOperation.html":{}}}],["legend",{"_index":841,"title":{},"body":{"components/ConnectionComponent.html":{},"components/DraftdetailComponent.html":{},"components/ImageComponent.html":{},"components/InletComponent.html":{},"components/MixerViewComponent.html":{},"components/NoteComponent.html":{},"components/OpHelpModal.html":{},"components/OpSequencerComponent.html":{},"components/OpsComponent.html":{},"components/ParameterComponent.html":{},"components/PlayerComponent.html":{},"components/SnackbarComponent.html":{},"components/VirtualPedalsComponent.html":{},"components/WeavingStateComponent.html":{}}}],["len",{"_index":4175,"title":{},"body":{"classes/System.html":{}}}],["length",{"_index":1056,"title":{},"body":{"classes/DBListener.html":{},"classes/DBListenerArray.html":{},"classes/DBNode.html":{},"classes/DBNodeArray.html":{},"classes/DBTwoWay.html":{},"classes/DBTwoWayArray.html":{},"classes/DBWriteBuffer.html":{},"classes/DBWriter.html":{},"classes/DBWriterArray.html":{},"interfaces/NodeMethods.html":{},"interfaces/NodeParams.html":{},"classes/OnlineStatus.html":{},"interfaces/Pedal.html":{},"classes/PedalStatus.html":{},"injectables/PedalsService.html":{},"classes/Shape.html":{}}}],["lengthnode",{"_index":1050,"title":{},"body":{"classes/DBListener.html":{},"classes/DBListenerArray.html":{},"classes/DBNode.html":{},"classes/DBNodeArray.html":{},"classes/DBTwoWay.html":{},"classes/DBTwoWayArray.html":{},"classes/DBWriteBuffer.html":{},"classes/DBWriter.html":{},"classes/DBWriterArray.html":{},"interfaces/NodeMethods.html":{},"interfaces/NodeParams.html":{},"classes/OnlineStatus.html":{}}}],["lengths",{"_index":4172,"title":{},"body":{"classes/System.html":{}}}],["less",{"_index":451,"title":{},"body":{"interfaces/ChainIndex.html":{},"injectables/SequencerService.html":{}}}],["lets",{"_index":3568,"title":{},"body":{"injectables/PedalsService.html":{}}}],["license",{"_index":4626,"title":{},"body":{"properties.html":{}}}],["lightgrey",{"_index":2482,"title":{},"body":{"components/InletComponent.html":{}}}],["line",{"_index":2114,"title":{},"body":{"components/DraftdetailComponent.html":{},"components/InletComponent.html":{},"components/MixerViewComponent.html":{},"components/OpsComponent.html":{},"components/ParameterComponent.html":{},"components/VirtualPedalsComponent.html":{}}}],["link",{"_index":291,"title":{},"body":{"classes/AbstractOpFactory.html":{},"classes/BaseOp.html":{},"classes/Branch.html":{},"classes/Bus.html":{},"classes/Merge.html":{},"interfaces/OpClassifier.html":{},"interfaces/OperationProperties.html":{},"classes/Pipe.html":{},"classes/Seed.html":{},"interfaces/TopologyDef.html":{},"index.html":{}}}],["linked",{"_index":2270,"title":{},"body":{"interfaces/IOTuple.html":{},"classes/Shape-1.html":{},"interfaces/TreeNode.html":{}}}],["linking",{"_index":1613,"title":{},"body":{"interfaces/DraftMap.html":{},"interfaces/Interlacement.html":{},"interfaces/InterlacementVal.html":{}}}],["links",{"_index":2288,"title":{},"body":{"interfaces/IOTuple.html":{},"interfaces/TreeNode.html":{}}}],["list",{"_index":400,"title":{},"body":{"classes/Cell.html":{},"interfaces/Crossing.html":{},"classes/DBListener.html":{},"classes/DBListenerArray.html":{},"classes/DBNode.html":{},"classes/DBNodeArray.html":{},"classes/DBTwoWay.html":{},"classes/DBTwoWayArray.html":{},"classes/DBWriteBuffer.html":{},"classes/DBWriter.html":{},"classes/DBWriterArray.html":{},"interfaces/DraftMap.html":{},"interfaces/DraftNodeProxy.html":{},"interfaces/FileObj.html":{},"interfaces/FileSaver.html":{},"interfaces/Fileloader.html":{},"interfaces/IOTuple.html":{},"interfaces/Interlacement.html":{},"interfaces/InterlacementVal.html":{},"interfaces/LoadResponse.html":{},"interfaces/NodeComponentProxy.html":{},"interfaces/NodeMethods.html":{},"interfaces/NodeParams.html":{},"classes/OnlineStatus.html":{},"interfaces/OpComponentProxy.html":{},"interfaces/OperationParam.html":{},"classes/Params.html":{},"interfaces/Pedal.html":{},"classes/PedalStatus.html":{},"injectables/PedalsService.html":{},"interfaces/SaveObj.html":{},"classes/Shuttle.html":{},"interfaces/StatusMessage.html":{},"interfaces/TreeNode.html":{},"interfaces/TreeNodeProxy.html":{},"interfaces/Vertex.html":{},"interfaces/YarnPath.html":{},"index.html":{},"miscellaneous/typealiases.html":{}}}],["listener",{"_index":1074,"title":{},"body":{"classes/DBListener.html":{},"classes/DBListenerArray.html":{},"classes/DBNode.html":{},"classes/DBNodeArray.html":{},"classes/DBTwoWay.html":{},"classes/DBTwoWayArray.html":{},"classes/DBWriteBuffer.html":{},"classes/DBWriter.html":{},"classes/DBWriterArray.html":{},"interfaces/NodeMethods.html":{},"interfaces/NodeParams.html":{},"classes/OnlineStatus.html":{}}}],["listeners",{"_index":3388,"title":{},"body":{"interfaces/Pedal.html":{},"classes/PedalStatus.html":{},"injectables/PedalsService.html":{}}}],["listening",{"_index":1144,"title":{},"body":{"classes/DBListener.html":{},"classes/DBListenerArray.html":{},"classes/DBNode.html":{},"classes/DBNodeArray.html":{},"classes/DBTwoWay.html":{},"classes/DBTwoWayArray.html":{},"classes/DBWriteBuffer.html":{},"classes/DBWriter.html":{},"classes/DBWriterArray.html":{},"interfaces/NodeMethods.html":{},"interfaces/NodeParams.html":{},"classes/OnlineStatus.html":{},"interfaces/Pedal.html":{},"classes/PedalStatus.html":{},"injectables/PedalsService.html":{}}}],["listens",{"_index":3442,"title":{},"body":{"interfaces/Pedal.html":{},"classes/PedalStatus.html":{},"injectables/PedalsService.html":{}}}],["listing",{"_index":3991,"title":{},"body":{"classes/Shape.html":{}}}],["lists",{"_index":2510,"title":{},"body":{"interfaces/LoomTypes.html":{}}}],["literal",{"_index":231,"title":{},"body":{"classes/AbstractOpFactory.html":{},"classes/BaseOp.html":{},"classes/Branch.html":{},"classes/Bus.html":{},"classes/Merge.html":{},"interfaces/OpClassifier.html":{},"interfaces/OperationProperties.html":{},"classes/Params.html":{},"classes/Pipe.html":{},"classes/Render.html":{},"classes/Seed.html":{},"interfaces/TopologyDef.html":{},"miscellaneous/typealiases.html":{}}}],["little",{"_index":2219,"title":{},"body":{"interfaces/DynamicOperation.html":{},"interfaces/OpInput.html":{},"interfaces/OperationClassification.html":{},"interfaces/TreeOperation.html":{}}}],["load",{"_index":1661,"title":{},"body":{"interfaces/DraftNodeProxy.html":{},"interfaces/DraftOperationClassification.html":{},"interfaces/FileObj.html":{},"interfaces/FileSaver.html":{},"interfaces/Fileloader.html":{},"interfaces/LoadResponse.html":{},"interfaces/LoomConfig.html":{},"interfaces/NodeComponentProxy.html":{},"interfaces/OpComponentProxy.html":{},"classes/OpSequencer.html":{},"classes/PedalConfig.html":{},"injectables/PlayerService.html":{},"interfaces/SaveObj.html":{},"interfaces/StatusMessage.html":{},"interfaces/TreeNodeProxy.html":{}}}],["loadconfig",{"_index":1723,"title":{},"body":{"interfaces/DraftOperationClassification.html":{},"interfaces/LoomConfig.html":{},"classes/PedalConfig.html":{},"injectables/PlayerService.html":{}}}],["loaded",{"_index":486,"title":{},"body":{"interfaces/ChainIndex.html":{},"interfaces/DraftOperationClassification.html":{},"interfaces/LoomConfig.html":{},"classes/PedalConfig.html":{},"injectables/PlayerService.html":{},"interfaces/PlayerState.html":{},"interfaces/PlayerState-1.html":{},"injectables/SequencerService.html":{},"interfaces/WeavingLog.html":{},"interfaces/WeavingPick.html":{},"interfaces/WeavingPick-1.html":{}}}],["loading",{"_index":1656,"title":{},"body":{"interfaces/DraftNodeProxy.html":{},"interfaces/DynamicOperation.html":{},"interfaces/FileObj.html":{},"interfaces/FileSaver.html":{},"interfaces/Fileloader.html":{},"interfaces/LoadResponse.html":{},"interfaces/NodeComponentProxy.html":{},"interfaces/OpComponentProxy.html":{},"interfaces/OpInput.html":{},"interfaces/OperationClassification.html":{},"interfaces/SaveObj.html":{},"interfaces/StatusMessage.html":{},"interfaces/TreeNodeProxy.html":{},"interfaces/TreeOperation.html":{}}}],["loadresponse",{"_index":1686,"title":{"interfaces/LoadResponse.html":{}},"body":{"interfaces/DraftNodeProxy.html":{},"interfaces/FileObj.html":{},"interfaces/FileSaver.html":{},"interfaces/Fileloader.html":{},"interfaces/LoadResponse.html":{},"interfaces/NodeComponentProxy.html":{},"interfaces/OpComponentProxy.html":{},"interfaces/SaveObj.html":{},"interfaces/StatusMessage.html":{},"interfaces/TreeNodeProxy.html":{}}}],["loads",{"_index":3563,"title":{},"body":{"injectables/PedalsService.html":{}}}],["local",{"_index":2764,"title":{},"body":{"components/MixerViewComponent.html":{},"injectables/ViewportService.html":{},"index.html":{}}}],["local_view",{"_index":2716,"title":{},"body":{"components/MixerViewComponent.html":{}}}],["local_view:bounds",{"_index":2765,"title":{},"body":{"components/MixerViewComponent.html":{}}}],["location",{"_index":1628,"title":{},"body":{"interfaces/DraftMap.html":{},"interfaces/Interlacement.html":{},"interfaces/InterlacementVal.html":{},"injectables/ViewportService.html":{},"index.html":{}}}],["locations",{"_index":354,"title":{},"body":{"interfaces/Bounds.html":{},"interfaces/Point.html":{},"index.html":{}}}],["lodash",{"_index":4384,"title":{},"body":{"dependencies.html":{}}}],["logging",{"_index":4533,"title":{},"body":{"index.html":{}}}],["look",{"_index":2245,"title":{},"body":{"interfaces/DynamicOperation.html":{},"interfaces/OpInput.html":{},"interfaces/OperationClassification.html":{},"interfaces/TreeOperation.html":{}}}],["looking",{"_index":1375,"title":{},"body":{"interfaces/DesignActions.html":{},"interfaces/Ink.html":{},"injectables/InkService.html":{}}}],["loom",{"_index":355,"title":{},"body":{"interfaces/Bounds.html":{},"interfaces/DesignActions.html":{},"interfaces/DraftMap.html":{},"interfaces/DraftNodeProxy.html":{},"interfaces/DraftOperationClassification.html":{},"components/DraftdetailComponent.html":{},"interfaces/FileObj.html":{},"interfaces/FileSaver.html":{},"interfaces/Fileloader.html":{},"interfaces/IOTuple.html":{},"interfaces/Interlacement.html":{},"interfaces/InterlacementVal.html":{},"interfaces/LoadResponse.html":{},"interfaces/LoomConfig.html":{},"interfaces/NodeComponentProxy.html":{},"interfaces/OpComponentProxy.html":{},"interfaces/Pedal.html":{},"classes/PedalConfig.html":{},"classes/PedalStatus.html":{},"injectables/PedalsService.html":{},"injectables/PlayerService.html":{},"interfaces/PlayerState.html":{},"interfaces/PlayerState-1.html":{},"interfaces/Point.html":{},"interfaces/SaveObj.html":{},"interfaces/StatusMessage.html":{},"interfaces/TreeNode.html":{},"interfaces/TreeNodeProxy.html":{},"interfaces/WeavingLog.html":{},"interfaces/WeavingPick.html":{},"interfaces/WeavingPick-1.html":{},"components/WeavingStateComponent.html":{},"index.html":{},"miscellaneous/typealiases.html":{}}}],["loom_online",{"_index":3371,"title":{},"body":{"interfaces/Pedal.html":{},"classes/PedalStatus.html":{},"injectables/PedalsService.html":{}}}],["loom_ready",{"_index":3376,"title":{},"body":{"interfaces/Pedal.html":{},"classes/PedalStatus.html":{},"injectables/PedalsService.html":{}}}],["loom_settings",{"_index":1404,"title":{},"body":{"interfaces/DesignActions.html":{},"interfaces/DraftNodeProxy.html":{},"components/DraftdetailComponent.html":{},"interfaces/FileObj.html":{},"interfaces/FileSaver.html":{},"interfaces/Fileloader.html":{},"interfaces/IOTuple.html":{},"interfaces/LoadResponse.html":{},"interfaces/NodeComponentProxy.html":{},"interfaces/OpComponentProxy.html":{},"interfaces/SaveObj.html":{},"interfaces/StatusMessage.html":{},"interfaces/TreeNode.html":{},"interfaces/TreeNodeProxy.html":{}}}],["loom_settings.epi",{"_index":2086,"title":{},"body":{"components/DraftdetailComponent.html":{}}}],["loom_settings.type",{"_index":2082,"title":{},"body":{"components/DraftdetailComponent.html":{}}}],["loom_settings.units",{"_index":2084,"title":{},"body":{"components/DraftdetailComponent.html":{}}}],["loomconfig",{"_index":1707,"title":{"interfaces/LoomConfig.html":{}},"body":{"interfaces/DraftOperationClassification.html":{},"interfaces/LoomConfig.html":{},"classes/PedalConfig.html":{},"injectables/PlayerService.html":{}}}],["loomlisteners",{"_index":3541,"title":{},"body":{"injectables/PedalsService.html":{}}}],["loomlisteners(state",{"_index":3553,"title":{},"body":{"injectables/PedalsService.html":{}}}],["loompedals",{"_index":3542,"title":{},"body":{"injectables/PedalsService.html":{}}}],["loompedals(state",{"_index":3494,"title":{},"body":{"interfaces/Pedal.html":{},"classes/PedalStatus.html":{},"injectables/PedalsService.html":{}}}],["looms",{"_index":1651,"title":{},"body":{"interfaces/DraftNodeProxy.html":{},"interfaces/FileObj.html":{},"interfaces/FileSaver.html":{},"interfaces/Fileloader.html":{},"interfaces/IOTuple.html":{},"interfaces/LoadResponse.html":{},"interfaces/NodeComponentProxy.html":{},"interfaces/OpComponentProxy.html":{},"interfaces/SaveObj.html":{},"interfaces/StatusMessage.html":{},"interfaces/TreeNode.html":{},"interfaces/TreeNodeProxy.html":{}}}],["loomsettings",{"_index":1312,"title":{},"body":{"interfaces/DesignActions.html":{},"interfaces/DraftNodeProxy.html":{},"components/DraftdetailComponent.html":{},"interfaces/FileObj.html":{},"interfaces/FileSaver.html":{},"interfaces/Fileloader.html":{},"interfaces/IOTuple.html":{},"interfaces/LoadResponse.html":{},"interfaces/NodeComponentProxy.html":{},"interfaces/OpComponentProxy.html":{},"interfaces/SaveObj.html":{},"interfaces/StatusMessage.html":{},"interfaces/TreeNode.html":{},"interfaces/TreeNodeProxy.html":{},"miscellaneous/typealiases.html":{}}}],["loomtypes",{"_index":1282,"title":{"interfaces/LoomTypes.html":{}},"body":{"interfaces/DensityUnits.html":{},"interfaces/DesignMode.html":{},"interfaces/LoomTypes.html":{},"interfaces/MaterialTypes.html":{},"interfaces/ViewModes.html":{}}}],["loomupdate",{"_index":360,"title":{},"body":{"interfaces/Bounds.html":{},"interfaces/Point.html":{}}}],["loomutil",{"_index":4580,"title":{},"body":{"index.html":{},"miscellaneous/typealiases.html":{}}}],["lower",{"_index":1393,"title":{},"body":{"interfaces/DesignActions.html":{}}}],["m",{"_index":121,"title":{},"body":{"classes/AbstractOpFactory.html":{},"classes/BaseOp.html":{},"classes/Branch.html":{},"classes/Bus.html":{},"injectables/MappingsService.html":{},"classes/Merge.html":{},"interfaces/OpClassifier.html":{},"interfaces/OperationProperties.html":{},"classes/Pipe.html":{},"classes/Seed.html":{},"interfaces/TopologyDef.html":{}}}],["m.name",{"_index":2576,"title":{},"body":{"injectables/MappingsService.html":{}}}],["m.name.includes(opname)).length",{"_index":1777,"title":{},"body":{"interfaces/DraftOperationClassification.html":{},"interfaces/LoomConfig.html":{},"injectables/MappingsService.html":{},"classes/PedalConfig.html":{},"injectables/PlayerService.html":{}}}],["m.type",{"_index":2623,"title":{},"body":{"injectables/MappingsService.html":{}}}],["made",{"_index":2354,"title":{},"body":{"interfaces/Ink.html":{},"injectables/InkService.html":{}}}],["main",{"_index":1450,"title":{},"body":{"interfaces/DesignActions.html":{},"interfaces/DraftOperationClassification.html":{},"interfaces/LoomConfig.html":{},"components/NoteComponent.html":{},"interfaces/Pedal.html":{},"classes/PedalConfig.html":{},"classes/PedalStatus.html":{},"injectables/PedalsService.html":{},"injectables/PlayerService.html":{}}}],["maindraft",{"_index":2945,"title":{},"body":{"components/NoteComponent.html":{}}}],["make",{"_index":1579,"title":{},"body":{"interfaces/DesignActions.html":{},"interfaces/DraftOperationClassification.html":{},"interfaces/LoomConfig.html":{},"interfaces/OperationParam.html":{},"classes/Params.html":{},"interfaces/Pedal.html":{},"classes/PedalConfig.html":{},"classes/PedalStatus.html":{},"injectables/PedalsService.html":{},"injectables/PlayerService.html":{},"index.html":{}}}],["makeblankchainop",{"_index":4411,"title":{},"body":{"miscellaneous/functions.html":{}}}],["makeblankchainop(p",{"_index":615,"title":{},"body":{"interfaces/ChainOp.html":{},"interfaces/PairedOp.html":{},"interfaces/PedalEvent.html":{},"interfaces/PlayerOp.html":{},"miscellaneous/functions.html":{}}}],["makechainop",{"_index":435,"title":{},"body":{"interfaces/ChainIndex.html":{},"interfaces/DraftOperationClassification.html":{},"interfaces/LoomConfig.html":{},"injectables/MappingsService.html":{},"classes/PedalConfig.html":{},"injectables/PlayerService.html":{},"injectables/SequencerService.html":{},"miscellaneous/functions.html":{}}}],["makechainop([first_op].concat([o",{"_index":1763,"title":{},"body":{"interfaces/DraftOperationClassification.html":{},"interfaces/LoomConfig.html":{},"injectables/MappingsService.html":{},"classes/PedalConfig.html":{},"injectables/PlayerService.html":{}}}],["makechainop([first_op].concat(op_array",{"_index":1770,"title":{},"body":{"interfaces/DraftOperationClassification.html":{},"interfaces/LoomConfig.html":{},"injectables/MappingsService.html":{},"classes/PedalConfig.html":{},"injectables/PlayerService.html":{}}}],["makechainop([o",{"_index":500,"title":{},"body":{"interfaces/ChainIndex.html":{},"interfaces/DraftOperationClassification.html":{},"interfaces/LoomConfig.html":{},"injectables/MappingsService.html":{},"classes/PedalConfig.html":{},"injectables/PlayerService.html":{},"injectables/SequencerService.html":{}}}],["makechainop(ch.ops.concat([o",{"_index":510,"title":{},"body":{"interfaces/ChainIndex.html":{},"injectables/SequencerService.html":{}}}],["makechainop(curr_ops.concat([o",{"_index":1758,"title":{},"body":{"interfaces/DraftOperationClassification.html":{},"interfaces/LoomConfig.html":{},"injectables/MappingsService.html":{},"classes/PedalConfig.html":{},"injectables/PlayerService.html":{}}}],["makechainop(curr_ops.concat(op_array",{"_index":1767,"title":{},"body":{"interfaces/DraftOperationClassification.html":{},"interfaces/LoomConfig.html":{},"injectables/MappingsService.html":{},"classes/PedalConfig.html":{},"injectables/PlayerService.html":{}}}],["makechainop(op_array",{"_index":1774,"title":{},"body":{"interfaces/DraftOperationClassification.html":{},"interfaces/LoomConfig.html":{},"injectables/MappingsService.html":{},"classes/PedalConfig.html":{},"injectables/PlayerService.html":{}}}],["makechainop(ops",{"_index":617,"title":{},"body":{"interfaces/ChainOp.html":{},"interfaces/PairedOp.html":{},"interfaces/PedalEvent.html":{},"interfaces/PlayerOp.html":{},"miscellaneous/functions.html":{}}}],["makeopsequencer",{"_index":434,"title":{},"body":{"interfaces/ChainIndex.html":{},"interfaces/ChainOp.html":{},"interfaces/DraftOperationClassification.html":{},"interfaces/LoomConfig.html":{},"injectables/MappingsService.html":{},"interfaces/PairedOp.html":{},"classes/PedalConfig.html":{},"interfaces/PedalEvent.html":{},"interfaces/PlayerOp.html":{},"injectables/PlayerService.html":{},"injectables/SequencerService.html":{},"miscellaneous/functions.html":{}}}],["makeopsequencer(conf",{"_index":2635,"title":{},"body":{"injectables/MappingsService.html":{},"classes/OpSequencer.html":{},"miscellaneous/functions.html":{}}}],["makepairedop",{"_index":1698,"title":{},"body":{"interfaces/DraftOperationClassification.html":{},"interfaces/LoomConfig.html":{},"injectables/MappingsService.html":{},"classes/PedalConfig.html":{},"injectables/PlayerService.html":{},"miscellaneous/functions.html":{}}}],["makepairedop(id",{"_index":2631,"title":{},"body":{"injectables/MappingsService.html":{}}}],["makepairedop(p",{"_index":609,"title":{},"body":{"interfaces/ChainOp.html":{},"interfaces/PairedOp.html":{},"interfaces/PedalEvent.html":{},"interfaces/PlayerOp.html":{},"miscellaneous/functions.html":{}}}],["makepairedop(pedalid",{"_index":1751,"title":{},"body":{"interfaces/DraftOperationClassification.html":{},"interfaces/LoomConfig.html":{},"classes/PedalConfig.html":{},"injectables/PlayerService.html":{}}}],["makes",{"_index":4152,"title":{},"body":{"classes/System.html":{},"miscellaneous/functions.html":{}}}],["makesystemsunique",{"_index":4414,"title":{},"body":{"miscellaneous/functions.html":{}}}],["makesystemsunique(systems",{"_index":4158,"title":{},"body":{"classes/System.html":{},"miscellaneous/functions.html":{}}}],["maketopofactory",{"_index":4416,"title":{},"body":{"miscellaneous/functions.html":{}}}],["maketopofactory(\"bus",{"_index":308,"title":{},"body":{"classes/AbstractOpFactory.html":{},"classes/BaseOp.html":{},"classes/Branch.html":{},"classes/Bus.html":{},"classes/Merge.html":{},"interfaces/OpClassifier.html":{},"interfaces/OperationProperties.html":{},"classes/Pipe.html":{},"classes/Seed.html":{},"interfaces/TopologyDef.html":{}}}],["maketopofactory(\"merge",{"_index":307,"title":{},"body":{"classes/AbstractOpFactory.html":{},"classes/BaseOp.html":{},"classes/Branch.html":{},"classes/Bus.html":{},"classes/Merge.html":{},"interfaces/OpClassifier.html":{},"interfaces/OperationProperties.html":{},"classes/Pipe.html":{},"classes/Seed.html":{},"interfaces/TopologyDef.html":{}}}],["maketopofactory(\"pipe",{"_index":306,"title":{},"body":{"classes/AbstractOpFactory.html":{},"classes/BaseOp.html":{},"classes/Branch.html":{},"classes/Bus.html":{},"classes/Merge.html":{},"interfaces/OpClassifier.html":{},"interfaces/OperationProperties.html":{},"classes/Pipe.html":{},"classes/Seed.html":{},"interfaces/TopologyDef.html":{}}}],["maketopofactory(\"seed",{"_index":305,"title":{},"body":{"classes/AbstractOpFactory.html":{},"classes/BaseOp.html":{},"classes/Branch.html":{},"classes/Bus.html":{},"classes/Merge.html":{},"interfaces/OpClassifier.html":{},"interfaces/OperationProperties.html":{},"classes/Pipe.html":{},"classes/Seed.html":{},"interfaces/TopologyDef.html":{}}}],["maketopofactory(topo",{"_index":295,"title":{},"body":{"classes/AbstractOpFactory.html":{},"classes/BaseOp.html":{},"classes/Branch.html":{},"classes/Bus.html":{},"classes/Merge.html":{},"interfaces/OpClassifier.html":{},"interfaces/OperationProperties.html":{},"classes/Pipe.html":{},"classes/Seed.html":{},"interfaces/TopologyDef.html":{},"miscellaneous/functions.html":{}}}],["making",{"_index":2591,"title":{},"body":{"injectables/MappingsService.html":{},"classes/System.html":{},"miscellaneous/functions.html":{},"index.html":{}}}],["manager",{"_index":4487,"title":{},"body":{"index.html":{}}}],["manages",{"_index":3995,"title":{},"body":{"classes/Shape-1.html":{}}}],["manipulates",{"_index":4530,"title":{},"body":{"index.html":{}}}],["manipulation",{"_index":4532,"title":{},"body":{"index.html":{}}}],["many",{"_index":117,"title":{},"body":{"classes/AbstractOpFactory.html":{},"classes/BaseOp.html":{},"classes/Branch.html":{},"classes/Bus.html":{},"interfaces/IOTuple.html":{},"injectables/LayersService.html":{},"classes/Merge.html":{},"interfaces/OpClassifier.html":{},"interfaces/OperationProperties.html":{},"interfaces/Pedal.html":{},"classes/PedalStatus.html":{},"injectables/PedalsService.html":{},"classes/Pipe.html":{},"classes/Seed.html":{},"interfaces/TopologyDef.html":{},"interfaces/TreeNode.html":{},"index.html":{}}}],["map",{"_index":1918,"title":{},"body":{"interfaces/DraftOperationClassification.html":{},"interfaces/LoomConfig.html":{},"components/OpsComponent.html":{},"classes/PedalConfig.html":{},"injectables/PlayerService.html":{},"classes/System.html":{},"miscellaneous/functions.html":{}}}],["map((el",{"_index":1895,"title":{},"body":{"interfaces/DraftOperationClassification.html":{},"interfaces/LoomConfig.html":{},"classes/PedalConfig.html":{},"injectables/PlayerService.html":{}}}],["map(value",{"_index":3247,"title":{},"body":{"components/OpsComponent.html":{}}}],["mapped",{"_index":1773,"title":{},"body":{"interfaces/DraftOperationClassification.html":{},"interfaces/LoomConfig.html":{},"injectables/MappingsService.html":{},"classes/OpSequencer.html":{},"classes/PedalConfig.html":{},"injectables/PlayerService.html":{},"interfaces/PlayerState.html":{},"interfaces/PlayerState-1.html":{},"interfaces/WeavingLog.html":{},"interfaces/WeavingPick.html":{},"interfaces/WeavingPick-1.html":{},"miscellaneous/typealiases.html":{}}}],["mapped.perform(this.state",{"_index":1925,"title":{},"body":{"interfaces/DraftOperationClassification.html":{},"interfaces/LoomConfig.html":{},"classes/PedalConfig.html":{},"injectables/PlayerService.html":{}}}],["mappedal",{"_index":3018,"title":{},"body":{"classes/OpSequencer.html":{},"injectables/SequencerService.html":{}}}],["mappedal(id",{"_index":3039,"title":{},"body":{"classes/OpSequencer.html":{},"injectables/SequencerService.html":{}}}],["mapping",{"_index":1721,"title":{},"body":{"interfaces/DraftOperationClassification.html":{},"interfaces/LoomConfig.html":{},"injectables/MappingsService.html":{},"classes/PedalConfig.html":{},"injectables/PlayerService.html":{},"classes/Shape.html":{},"index.html":{}}}],["mappingindex",{"_index":2555,"title":{},"body":{"injectables/MappingsService.html":{},"miscellaneous/functions.html":{},"miscellaneous/typealiases.html":{}}}],["mappings",{"_index":1798,"title":{},"body":{"interfaces/DraftOperationClassification.html":{},"interfaces/LoomConfig.html":{},"injectables/MappingsService.html":{},"classes/PedalConfig.html":{},"injectables/PlayerService.html":{},"classes/System.html":{},"miscellaneous/functions.html":{}}}],["mappings.addoperation(forward",{"_index":1812,"title":{},"body":{"interfaces/DraftOperationClassification.html":{},"interfaces/LoomConfig.html":{},"classes/PedalConfig.html":{},"injectables/PlayerService.html":{}}}],["mappings.addoperation(p_op",{"_index":1817,"title":{},"body":{"interfaces/DraftOperationClassification.html":{},"interfaces/LoomConfig.html":{},"classes/PedalConfig.html":{},"injectables/PlayerService.html":{}}}],["mappings.addoperation(refresh",{"_index":1813,"title":{},"body":{"interfaces/DraftOperationClassification.html":{},"interfaces/LoomConfig.html":{},"classes/PedalConfig.html":{},"injectables/PlayerService.html":{}}}],["mappings.addoperation(reverse",{"_index":1814,"title":{},"body":{"interfaces/DraftOperationClassification.html":{},"interfaces/LoomConfig.html":{},"classes/PedalConfig.html":{},"injectables/PlayerService.html":{}}}],["mappings.addoperation(tile",{"_index":1856,"title":{},"body":{"interfaces/DraftOperationClassification.html":{},"interfaces/LoomConfig.html":{},"classes/PedalConfig.html":{},"injectables/PlayerService.html":{}}}],["mappings.pair(0",{"_index":1874,"title":{},"body":{"interfaces/DraftOperationClassification.html":{},"interfaces/LoomConfig.html":{},"classes/PedalConfig.html":{},"injectables/PlayerService.html":{}}}],["mappings.pedalismapped(0",{"_index":1876,"title":{},"body":{"interfaces/DraftOperationClassification.html":{},"interfaces/LoomConfig.html":{},"classes/PedalConfig.html":{},"injectables/PlayerService.html":{}}}],["mappings.unmap(0",{"_index":1877,"title":{},"body":{"interfaces/DraftOperationClassification.html":{},"interfaces/LoomConfig.html":{},"classes/PedalConfig.html":{},"injectables/PlayerService.html":{}}}],["mappings[0",{"_index":1878,"title":{},"body":{"interfaces/DraftOperationClassification.html":{},"interfaces/LoomConfig.html":{},"classes/PedalConfig.html":{},"injectables/PlayerService.html":{}}}],["mappings[1",{"_index":1880,"title":{},"body":{"interfaces/DraftOperationClassification.html":{},"interfaces/LoomConfig.html":{},"classes/PedalConfig.html":{},"injectables/PlayerService.html":{}}}],["mappingshapes",{"_index":636,"title":{},"body":{"interfaces/ChainOp.html":{},"injectables/MappingsService.html":{},"interfaces/PairedOp.html":{},"interfaces/PedalEvent.html":{},"interfaces/PlayerOp.html":{},"miscellaneous/typealiases.html":{}}}],["mappingshapes[keyof",{"_index":638,"title":{},"body":{"interfaces/ChainOp.html":{},"interfaces/PairedOp.html":{},"interfaces/PedalEvent.html":{},"interfaces/PlayerOp.html":{}}}],["mappingsservice",{"_index":1701,"title":{"injectables/MappingsService.html":{}},"body":{"interfaces/DraftOperationClassification.html":{},"interfaces/LoomConfig.html":{},"injectables/MappingsService.html":{},"classes/PedalConfig.html":{},"injectables/PlayerService.html":{}}}],["mappingtype",{"_index":639,"title":{},"body":{"interfaces/ChainOp.html":{},"injectables/MappingsService.html":{},"interfaces/PairedOp.html":{},"interfaces/PedalEvent.html":{},"interfaces/PlayerOp.html":{},"miscellaneous/typealiases.html":{}}}],["maps",{"_index":4151,"title":{},"body":{"classes/System.html":{},"miscellaneous/functions.html":{}}}],["margin",{"_index":2106,"title":{},"body":{"components/DraftdetailComponent.html":{},"components/InletComponent.html":{},"components/MixerViewComponent.html":{},"components/OpSequencerComponent.html":{},"components/OpsComponent.html":{},"components/ParameterComponent.html":{},"components/PlayerComponent.html":{},"classes/Shape-1.html":{},"components/VirtualPedalsComponent.html":{},"components/WeavingStateComponent.html":{}}}],["margin_clear_x",{"_index":3810,"title":{},"body":{"classes/Render.html":{}}}],["margin_clear_y",{"_index":3811,"title":{},"body":{"classes/Render.html":{}}}],["margin_fill_x",{"_index":3808,"title":{},"body":{"classes/Render.html":{}}}],["margin_fill_y",{"_index":3809,"title":{},"body":{"classes/Render.html":{}}}],["marquee",{"_index":2652,"title":{},"body":{"directives/MarqueeComponent.html":{}}}],["marquee'},{'name",{"_index":879,"title":{},"body":{"components/ConnectionComponent.html":{},"components/DraftdetailComponent.html":{},"components/ImageComponent.html":{},"components/InletComponent.html":{},"components/MixerViewComponent.html":{},"components/NoteComponent.html":{},"components/OpHelpModal.html":{},"components/OpSequencerComponent.html":{},"components/OpsComponent.html":{},"components/ParameterComponent.html":{},"components/PlayerComponent.html":{},"components/SnackbarComponent.html":{},"components/VirtualPedalsComponent.html":{},"components/WeavingStateComponent.html":{}}}],["marqueecomponent",{"_index":878,"title":{"directives/MarqueeComponent.html":{}},"body":{"components/ConnectionComponent.html":{},"components/DraftdetailComponent.html":{},"components/ImageComponent.html":{},"components/InletComponent.html":{},"directives/MarqueeComponent.html":{},"modules/MixerModule.html":{},"components/MixerViewComponent.html":{},"components/NoteComponent.html":{},"components/OpHelpModal.html":{},"components/OpSequencerComponent.html":{},"components/OpsComponent.html":{},"components/ParameterComponent.html":{},"components/PlayerComponent.html":{},"components/SnackbarComponent.html":{},"components/VirtualPedalsComponent.html":{},"components/WeavingStateComponent.html":{},"overview.html":{}}}],["mask",{"_index":2330,"title":{},"body":{"interfaces/Ink.html":{},"injectables/InkService.html":{}}}],["masking",{"_index":2327,"title":{},"body":{"interfaces/Ink.html":{},"injectables/InkService.html":{}}}],["mat",{"_index":2119,"title":{},"body":{"components/DraftdetailComponent.html":{},"components/InletComponent.html":{},"components/MixerViewComponent.html":{},"components/NoteComponent.html":{},"components/OpSequencerComponent.html":{},"components/OpsComponent.html":{},"components/ParameterComponent.html":{},"components/PlayerComponent.html":{},"components/VirtualPedalsComponent.html":{},"components/WeavingStateComponent.html":{}}}],["mat_dialog_data",{"_index":2008,"title":{},"body":{"components/DraftdetailComponent.html":{},"components/MixerViewComponent.html":{},"components/OpHelpModal.html":{},"components/OpsComponent.html":{}}}],["mat_snack_bar_data",{"_index":4113,"title":{},"body":{"components/SnackbarComponent.html":{}}}],["match",{"_index":123,"title":{},"body":{"classes/AbstractOpFactory.html":{},"classes/BaseOp.html":{},"classes/Branch.html":{},"classes/Bus.html":{},"classes/Merge.html":{},"interfaces/OpClassifier.html":{},"interfaces/OperationProperties.html":{},"classes/Pipe.html":{},"classes/Seed.html":{},"interfaces/TopologyDef.html":{}}}],["matching",{"_index":318,"title":{},"body":{"classes/AbstractOpFactory.html":{},"classes/BaseOp.html":{},"interfaces/Bounds.html":{},"classes/Branch.html":{},"classes/Bus.html":{},"classes/Cell.html":{},"interfaces/ChainIndex.html":{},"interfaces/ChainOp.html":{},"components/ConnectionComponent.html":{},"interfaces/Crossing.html":{},"classes/DBListener.html":{},"classes/DBListenerArray.html":{},"classes/DBNode.html":{},"classes/DBNodeArray.html":{},"classes/DBTwoWay.html":{},"classes/DBTwoWayArray.html":{},"classes/DBWriteBuffer.html":{},"classes/DBWriter.html":{},"classes/DBWriterArray.html":{},"interfaces/DensityUnits.html":{},"interfaces/DesignActions.html":{},"interfaces/DesignMode.html":{},"interfaces/DraftMap.html":{},"interfaces/DraftNodeProxy.html":{},"interfaces/DraftOperationClassification.html":{},"components/DraftdetailComponent.html":{},"interfaces/DynamicOperation.html":{},"interfaces/FileObj.html":{},"interfaces/FileSaver.html":{},"interfaces/Fileloader.html":{},"interfaces/IOTuple.html":{},"components/ImageComponent.html":{},"interfaces/Ink.html":{},"injectables/InkService.html":{},"components/InletComponent.html":{},"interfaces/Interlacement.html":{},"interfaces/InterlacementVal.html":{},"injectables/LayersService.html":{},"interfaces/LoadResponse.html":{},"interfaces/LoomConfig.html":{},"interfaces/LoomTypes.html":{},"injectables/MappingsService.html":{},"directives/MarqueeComponent.html":{},"interfaces/MaterialTypes.html":{},"classes/Merge.html":{},"modules/MixerModule.html":{},"components/MixerViewComponent.html":{},"interfaces/NodeComponentProxy.html":{},"interfaces/NodeMethods.html":{},"interfaces/NodeParams.html":{},"components/NoteComponent.html":{},"classes/OnlineStatus.html":{},"interfaces/OpClassifier.html":{},"interfaces/OpComponentProxy.html":{},"components/OpHelpModal.html":{},"interfaces/OpInput.html":{},"classes/OpSequencer.html":{},"components/OpSequencerComponent.html":{},"interfaces/OperationClassification.html":{},"interfaces/OperationParam.html":{},"interfaces/OperationProperties.html":{},"components/OpsComponent.html":{},"interfaces/PairedOp.html":{},"components/ParameterComponent.html":{},"classes/Params.html":{},"interfaces/Pedal.html":{},"classes/PedalConfig.html":{},"interfaces/PedalEvent.html":{},"classes/PedalStatus.html":{},"injectables/PedalsService.html":{},"classes/Pipe.html":{},"components/PlayerComponent.html":{},"modules/PlayerModule.html":{},"interfaces/PlayerOp.html":{},"injectables/PlayerService.html":{},"interfaces/PlayerState.html":{},"interfaces/PlayerState-1.html":{},"interfaces/Point.html":{},"classes/Render.html":{},"interfaces/SaveObj.html":{},"classes/Seed.html":{},"classes/Selection.html":{},"directives/SelectionComponent.html":{},"injectables/SequencerService.html":{},"classes/Shape.html":{},"classes/Shape-1.html":{},"classes/Shuttle.html":{},"components/SnackbarComponent.html":{},"interfaces/StatusMessage.html":{},"classes/System.html":{},"interfaces/TopologyDef.html":{},"interfaces/TreeNode.html":{},"interfaces/TreeNodeProxy.html":{},"interfaces/TreeOperation.html":{},"interfaces/Vertex.html":{},"interfaces/ViewModes.html":{},"injectables/ViewportService.html":{},"components/VirtualPedalsComponent.html":{},"interfaces/WeavingLog.html":{},"interfaces/WeavingPick.html":{},"interfaces/WeavingPick-1.html":{},"components/WeavingStateComponent.html":{},"interfaces/YarnPath.html":{},"dependencies.html":{},"miscellaneous/functions.html":{},"index.html":{},"modules.html":{},"overview.html":{},"properties.html":{},"miscellaneous/typealiases.html":{}}}],["matdialog",{"_index":1325,"title":{},"body":{"interfaces/DesignActions.html":{},"components/MixerViewComponent.html":{},"components/OpsComponent.html":{}}}],["matdialogref",{"_index":1326,"title":{},"body":{"interfaces/DesignActions.html":{},"components/DraftdetailComponent.html":{},"components/MixerViewComponent.html":{},"components/OpHelpModal.html":{},"components/OpsComponent.html":{}}}],["material",{"_index":911,"title":{},"body":{"interfaces/Crossing.html":{},"classes/Shuttle.html":{},"interfaces/Vertex.html":{},"interfaces/YarnPath.html":{}}}],["material_id",{"_index":910,"title":{},"body":{"interfaces/Crossing.html":{},"interfaces/Vertex.html":{},"interfaces/YarnPath.html":{},"index.html":{}}}],["materials",{"_index":1621,"title":{},"body":{"interfaces/DraftMap.html":{},"interfaces/DraftNodeProxy.html":{},"interfaces/FileObj.html":{},"interfaces/FileSaver.html":{},"interfaces/Fileloader.html":{},"interfaces/Interlacement.html":{},"interfaces/InterlacementVal.html":{},"interfaces/LoadResponse.html":{},"interfaces/NodeComponentProxy.html":{},"interfaces/OpComponentProxy.html":{},"interfaces/SaveObj.html":{},"classes/Selection.html":{},"interfaces/StatusMessage.html":{},"interfaces/TreeNodeProxy.html":{}}}],["materialsservice",{"_index":1332,"title":{},"body":{"interfaces/DesignActions.html":{},"components/DraftdetailComponent.html":{},"components/WeavingStateComponent.html":{}}}],["materialtypes",{"_index":1283,"title":{"interfaces/MaterialTypes.html":{}},"body":{"interfaces/DensityUnits.html":{},"interfaces/DesignMode.html":{},"interfaces/LoomTypes.html":{},"interfaces/MaterialTypes.html":{},"interfaces/ViewModes.html":{}}}],["math.abs(this.start.j",{"_index":3879,"title":{},"body":{"classes/Selection.html":{}}}],["math.abs(this.start.si",{"_index":3881,"title":{},"body":{"classes/Selection.html":{}}}],["math.floor((p.x",{"_index":1515,"title":{},"body":{"interfaces/DesignActions.html":{}}}],["math.floor((p.y",{"_index":1514,"title":{},"body":{"interfaces/DesignActions.html":{}}}],["math.floor(bounds.width/scale",{"_index":4036,"title":{},"body":{"classes/Shape-1.html":{}}}],["math.max(parent.bounds.height",{"_index":1493,"title":{},"body":{"interfaces/DesignActions.html":{}}}],["math.max(parent.bounds.width",{"_index":1492,"title":{},"body":{"interfaces/DesignActions.html":{}}}],["math.min(this.start.j",{"_index":3886,"title":{},"body":{"classes/Selection.html":{}}}],["math.min(this.start.si",{"_index":3885,"title":{},"body":{"classes/Selection.html":{}}}],["mathjs",{"_index":729,"title":{},"body":{"components/ConnectionComponent.html":{},"dependencies.html":{}}}],["matter",{"_index":2316,"title":{},"body":{"interfaces/Ink.html":{},"injectables/InkService.html":{}}}],["mattooltipmodule",{"_index":3231,"title":{},"body":{"components/OpsComponent.html":{}}}],["max",{"_index":3100,"title":{},"body":{"components/OpSequencerComponent.html":{},"interfaces/OperationParam.html":{},"classes/Params.html":{},"components/PlayerComponent.html":{},"classes/Render.html":{},"components/WeavingStateComponent.html":{}}}],["max_in_systems",{"_index":4160,"title":{},"body":{"classes/System.html":{}}}],["max_in_systems[ndx",{"_index":4166,"title":{},"body":{"classes/System.html":{}}}],["max_inputs",{"_index":203,"title":{},"body":{"classes/AbstractOpFactory.html":{},"classes/BaseOp.html":{},"classes/Branch.html":{},"classes/Bus.html":{},"interfaces/DynamicOperation.html":{},"classes/Merge.html":{},"interfaces/OpClassifier.html":{},"interfaces/OpInput.html":{},"interfaces/OperationClassification.html":{},"interfaces/OperationProperties.html":{},"classes/Pipe.html":{},"classes/Seed.html":{},"interfaces/TopologyDef.html":{},"interfaces/TreeOperation.html":{}}}],["max_length:number",{"_index":4173,"title":{},"body":{"classes/System.html":{}}}],["maximum",{"_index":204,"title":{},"body":{"classes/AbstractOpFactory.html":{},"classes/BaseOp.html":{},"classes/Branch.html":{},"classes/Bus.html":{},"classes/Merge.html":{},"interfaces/OpClassifier.html":{},"interfaces/OperationParam.html":{},"interfaces/OperationProperties.html":{},"classes/Params.html":{},"classes/Pipe.html":{},"classes/Seed.html":{},"classes/System.html":{},"interfaces/TopologyDef.html":{},"miscellaneous/functions.html":{}}}],["maybe",{"_index":3980,"title":{},"body":{"classes/Shape.html":{}}}],["meaning",{"_index":2994,"title":{},"body":{"components/OpHelpModal.html":{}}}],["means",{"_index":1011,"title":{},"body":{"classes/DBListener.html":{},"classes/DBListenerArray.html":{},"classes/DBNode.html":{},"classes/DBNodeArray.html":{},"classes/DBTwoWay.html":{},"classes/DBTwoWayArray.html":{},"classes/DBWriteBuffer.html":{},"classes/DBWriter.html":{},"classes/DBWriterArray.html":{},"interfaces/IOTuple.html":{},"interfaces/NodeMethods.html":{},"interfaces/NodeParams.html":{},"classes/OnlineStatus.html":{},"interfaces/OperationParam.html":{},"classes/Params.html":{},"interfaces/TreeNode.html":{}}}],["memory",{"_index":4573,"title":{},"body":{"index.html":{}}}],["menu",{"_index":1298,"title":{},"body":{"interfaces/DensityUnits.html":{},"interfaces/DesignMode.html":{},"components/DraftdetailComponent.html":{},"interfaces/DynamicOperation.html":{},"interfaces/LoomTypes.html":{},"interfaces/MaterialTypes.html":{},"interfaces/OpInput.html":{},"components/OpSequencerComponent.html":{},"interfaces/OperationClassification.html":{},"components/PlayerComponent.html":{},"interfaces/TreeOperation.html":{},"interfaces/ViewModes.html":{}}}],["merge",{"_index":101,"title":{"classes/Merge.html":{}},"body":{"classes/AbstractOpFactory.html":{},"classes/BaseOp.html":{},"classes/Branch.html":{},"classes/Bus.html":{},"interfaces/DynamicOperation.html":{},"classes/Merge.html":{},"interfaces/OpClassifier.html":{},"interfaces/OpInput.html":{},"interfaces/OperationClassification.html":{},"interfaces/OperationProperties.html":{},"classes/Pipe.html":{},"classes/Seed.html":{},"interfaces/TopologyDef.html":{},"interfaces/TreeOperation.html":{}}}],["mergeop",{"_index":2213,"title":{},"body":{"interfaces/DynamicOperation.html":{},"interfaces/OpInput.html":{},"interfaces/OperationClassification.html":{},"interfaces/TreeOperation.html":{}}}],["mergeoperation",{"_index":311,"title":{},"body":{"classes/AbstractOpFactory.html":{},"classes/BaseOp.html":{},"classes/Branch.html":{},"classes/Bus.html":{},"classes/Merge.html":{},"interfaces/OpClassifier.html":{},"interfaces/OperationProperties.html":{},"classes/Pipe.html":{},"classes/Seed.html":{},"interfaces/TopologyDef.html":{}}}],["message",{"_index":1684,"title":{},"body":{"interfaces/DraftNodeProxy.html":{},"interfaces/FileObj.html":{},"interfaces/FileSaver.html":{},"interfaces/Fileloader.html":{},"interfaces/LoadResponse.html":{},"interfaces/NodeComponentProxy.html":{},"interfaces/OpComponentProxy.html":{},"interfaces/OperationParam.html":{},"classes/Params.html":{},"interfaces/SaveObj.html":{},"components/SnackbarComponent.html":{},"interfaces/StatusMessage.html":{},"interfaces/TreeNodeProxy.html":{}}}],["metadata",{"_index":191,"title":{},"body":{"classes/AbstractOpFactory.html":{},"classes/BaseOp.html":{},"classes/Branch.html":{},"classes/Bus.html":{},"components/ConnectionComponent.html":{},"components/DraftdetailComponent.html":{},"components/ImageComponent.html":{},"components/InletComponent.html":{},"directives/MarqueeComponent.html":{},"classes/Merge.html":{},"components/MixerViewComponent.html":{},"components/NoteComponent.html":{},"interfaces/OpClassifier.html":{},"components/OpHelpModal.html":{},"components/OpSequencerComponent.html":{},"interfaces/OperationProperties.html":{},"components/OpsComponent.html":{},"components/ParameterComponent.html":{},"classes/Pipe.html":{},"components/PlayerComponent.html":{},"classes/Seed.html":{},"directives/SelectionComponent.html":{},"components/SnackbarComponent.html":{},"interfaces/TopologyDef.html":{},"components/VirtualPedalsComponent.html":{},"components/WeavingStateComponent.html":{}}}],["method",{"_index":109,"title":{},"body":{"classes/AbstractOpFactory.html":{},"classes/BaseOp.html":{},"classes/Branch.html":{},"classes/Bus.html":{},"classes/DBListener.html":{},"classes/DBListenerArray.html":{},"classes/DBNode.html":{},"classes/DBNodeArray.html":{},"classes/DBTwoWay.html":{},"classes/DBTwoWayArray.html":{},"classes/DBWriteBuffer.html":{},"classes/DBWriter.html":{},"classes/DBWriterArray.html":{},"classes/Merge.html":{},"interfaces/NodeMethods.html":{},"interfaces/NodeParams.html":{},"classes/OnlineStatus.html":{},"interfaces/OpClassifier.html":{},"classes/OpSequencer.html":{},"interfaces/OperationProperties.html":{},"classes/Pipe.html":{},"classes/Seed.html":{},"interfaces/TopologyDef.html":{}}}],["methods",{"_index":8,"title":{},"body":{"classes/AbstractOpFactory.html":{},"classes/BaseOp.html":{},"classes/Cell.html":{},"interfaces/ChainIndex.html":{},"components/ConnectionComponent.html":{},"classes/DBListener.html":{},"classes/DBListenerArray.html":{},"classes/DBNode.html":{},"classes/DBNodeArray.html":{},"classes/DBTwoWay.html":{},"classes/DBTwoWayArray.html":{},"classes/DBWriteBuffer.html":{},"classes/DBWriter.html":{},"classes/DBWriterArray.html":{},"components/DraftdetailComponent.html":{},"components/ImageComponent.html":{},"injectables/InkService.html":{},"components/InletComponent.html":{},"injectables/LayersService.html":{},"injectables/MappingsService.html":{},"directives/MarqueeComponent.html":{},"components/MixerViewComponent.html":{},"interfaces/NodeMethods.html":{},"interfaces/NodeParams.html":{},"components/NoteComponent.html":{},"classes/OnlineStatus.html":{},"components/OpHelpModal.html":{},"classes/OpSequencer.html":{},"components/OpSequencerComponent.html":{},"components/OpsComponent.html":{},"components/ParameterComponent.html":{},"classes/Params.html":{},"classes/PedalConfig.html":{},"classes/PedalStatus.html":{},"injectables/PedalsService.html":{},"components/PlayerComponent.html":{},"injectables/PlayerService.html":{},"classes/Render.html":{},"classes/Selection.html":{},"directives/SelectionComponent.html":{},"injectables/SequencerService.html":{},"classes/Shape.html":{},"classes/Shape-1.html":{},"classes/Shuttle.html":{},"components/SnackbarComponent.html":{},"classes/System.html":{},"injectables/ViewportService.html":{},"components/VirtualPedalsComponent.html":{},"components/WeavingStateComponent.html":{}}}],["migrating",{"_index":4554,"title":{},"body":{"index.html":{}}}],["min",{"_index":3156,"title":{},"body":{"interfaces/OperationParam.html":{},"components/ParameterComponent.html":{},"classes/Params.html":{},"classes/Render.html":{},"components/VirtualPedalsComponent.html":{}}}],["min/max",{"_index":2990,"title":{},"body":{"components/OpHelpModal.html":{}}}],["minimum",{"_index":3157,"title":{},"body":{"interfaces/OperationParam.html":{},"classes/Params.html":{}}}],["miscellaneous",{"_index":4399,"title":{"miscellaneous/functions.html":{},"miscellaneous/typealiases.html":{}},"body":{"miscellaneous/functions.html":{},"miscellaneous/typealiases.html":{}}}],["mix",{"_index":289,"title":{},"body":{"classes/AbstractOpFactory.html":{},"classes/BaseOp.html":{},"classes/Branch.html":{},"classes/Bus.html":{},"classes/Merge.html":{},"interfaces/OpClassifier.html":{},"interfaces/OperationProperties.html":{},"interfaces/Pedal.html":{},"classes/PedalStatus.html":{},"injectables/PedalsService.html":{},"classes/Pipe.html":{},"classes/Seed.html":{},"interfaces/TopologyDef.html":{}}}],["mixer",{"_index":1644,"title":{},"body":{"interfaces/DraftMap.html":{},"interfaces/DraftOperationClassification.html":{},"components/DraftdetailComponent.html":{},"interfaces/DynamicOperation.html":{},"interfaces/Interlacement.html":{},"interfaces/InterlacementVal.html":{},"interfaces/LoomConfig.html":{},"interfaces/OpInput.html":{},"interfaces/OperationClassification.html":{},"classes/PedalConfig.html":{},"components/PlayerComponent.html":{},"injectables/PlayerService.html":{},"interfaces/TreeOperation.html":{},"index.html":{}}}],["mixer'},{'name",{"_index":852,"title":{},"body":{"components/ConnectionComponent.html":{},"components/DraftdetailComponent.html":{},"components/ImageComponent.html":{},"components/InletComponent.html":{},"components/MixerViewComponent.html":{},"components/NoteComponent.html":{},"components/OpHelpModal.html":{},"components/OpSequencerComponent.html":{},"components/OpsComponent.html":{},"components/ParameterComponent.html":{},"components/PlayerComponent.html":{},"components/SnackbarComponent.html":{},"components/VirtualPedalsComponent.html":{},"components/WeavingStateComponent.html":{}}}],["mixer.component",{"_index":2693,"title":{},"body":{"modules/MixerModule.html":{}}}],["mixer/model/op_definitions",{"_index":1696,"title":{},"body":{"interfaces/DraftOperationClassification.html":{},"interfaces/LoomConfig.html":{},"classes/PedalConfig.html":{},"injectables/PlayerService.html":{}}}],["mixer/model/operation",{"_index":531,"title":{},"body":{"interfaces/ChainOp.html":{},"interfaces/DraftOperationClassification.html":{},"interfaces/LoomConfig.html":{},"interfaces/PairedOp.html":{},"classes/PedalConfig.html":{},"interfaces/PedalEvent.html":{},"interfaces/PlayerOp.html":{},"injectables/PlayerService.html":{}}}],["mixer/palette/connection/connection.component",{"_index":2264,"title":{},"body":{"interfaces/IOTuple.html":{},"interfaces/TreeNode.html":{}}}],["mixer/palette/operation/operation.component",{"_index":2265,"title":{},"body":{"interfaces/IOTuple.html":{},"interfaces/TreeNode.html":{}}}],["mixer/palette/subdraft/subdraft.component",{"_index":2266,"title":{},"body":{"interfaces/IOTuple.html":{},"interfaces/TreeNode.html":{}}}],["mixer/provider/operation.service",{"_index":1706,"title":{},"body":{"interfaces/DraftOperationClassification.html":{},"interfaces/LoomConfig.html":{},"classes/PedalConfig.html":{},"injectables/PlayerService.html":{}}}],["mixer/provider/operation.service.ts",{"_index":4591,"title":{},"body":{"index.html":{}}}],["mixercomponent",{"_index":851,"title":{},"body":{"components/ConnectionComponent.html":{},"components/DraftdetailComponent.html":{},"components/ImageComponent.html":{},"components/InletComponent.html":{},"modules/MixerModule.html":{},"components/MixerViewComponent.html":{},"components/NoteComponent.html":{},"components/OpHelpModal.html":{},"components/OpSequencerComponent.html":{},"components/OpsComponent.html":{},"components/ParameterComponent.html":{},"components/PlayerComponent.html":{},"components/SnackbarComponent.html":{},"components/VirtualPedalsComponent.html":{},"components/WeavingStateComponent.html":{},"overview.html":{}}}],["mixercontainer",{"_index":3610,"title":{},"body":{"components/PlayerComponent.html":{}}}],["mixerelement",{"_index":4297,"title":{},"body":{"components/WeavingStateComponent.html":{}}}],["mixermodule",{"_index":2676,"title":{"modules/MixerModule.html":{}},"body":{"modules/MixerModule.html":{},"modules.html":{},"overview.html":{}}}],["mixerview",{"_index":2710,"title":{},"body":{"components/MixerViewComponent.html":{}}}],["mixerview'},{'name",{"_index":854,"title":{},"body":{"components/ConnectionComponent.html":{},"components/DraftdetailComponent.html":{},"components/ImageComponent.html":{},"components/InletComponent.html":{},"components/MixerViewComponent.html":{},"components/NoteComponent.html":{},"components/OpHelpModal.html":{},"components/OpSequencerComponent.html":{},"components/OpsComponent.html":{},"components/ParameterComponent.html":{},"components/PlayerComponent.html":{},"components/SnackbarComponent.html":{},"components/VirtualPedalsComponent.html":{},"components/WeavingStateComponent.html":{}}}],["mixerview.component.html",{"_index":2712,"title":{},"body":{"components/MixerViewComponent.html":{}}}],["mixerview.component.scss",{"_index":2711,"title":{},"body":{"components/MixerViewComponent.html":{}}}],["mixerviewcomponent",{"_index":853,"title":{"components/MixerViewComponent.html":{}},"body":{"components/ConnectionComponent.html":{},"components/DraftdetailComponent.html":{},"components/ImageComponent.html":{},"components/InletComponent.html":{},"modules/MixerModule.html":{},"components/MixerViewComponent.html":{},"components/NoteComponent.html":{},"components/OpHelpModal.html":{},"components/OpSequencerComponent.html":{},"components/OpsComponent.html":{},"components/ParameterComponent.html":{},"components/PlayerComponent.html":{},"components/SnackbarComponent.html":{},"components/VirtualPedalsComponent.html":{},"components/WeavingStateComponent.html":{},"overview.html":{}}}],["mixture",{"_index":4558,"title":{},"body":{"index.html":{}}}],["modal",{"_index":1402,"title":{},"body":{"interfaces/DesignActions.html":{},"components/DraftdetailComponent.html":{},"components/MixerViewComponent.html":{}}}],["modal/draftdetail/draftdetail.component",{"_index":1328,"title":{},"body":{"interfaces/DesignActions.html":{},"modules/MixerModule.html":{}}}],["modal/mixerview/mixerview.component",{"_index":2694,"title":{},"body":{"modules/MixerModule.html":{}}}],["modal/ophelp/ophelp.modal",{"_index":2702,"title":{},"body":{"modules/MixerModule.html":{}}}],["modal/ops/ops.component",{"_index":2701,"title":{},"body":{"modules/MixerModule.html":{}}}],["modaltopleft",{"_index":2818,"title":{},"body":{"components/MixerViewComponent.html":{}}}],["modaltopleft.x",{"_index":2827,"title":{},"body":{"components/MixerViewComponent.html":{}}}],["modaltopleft.y",{"_index":2831,"title":{},"body":{"components/MixerViewComponent.html":{}}}],["mode",{"_index":1374,"title":{},"body":{"interfaces/DesignActions.html":{},"components/DraftdetailComponent.html":{},"interfaces/Ink.html":{},"injectables/InkService.html":{},"index.html":{}}}],["mode.uses_mask",{"_index":2340,"title":{},"body":{"interfaces/Ink.html":{},"injectables/InkService.html":{}}}],["mode:ink",{"_index":2338,"title":{},"body":{"interfaces/Ink.html":{},"injectables/InkService.html":{}}}],["model",{"_index":4438,"title":{},"body":{"index.html":{}}}],["model/dbnodes",{"_index":3367,"title":{},"body":{"interfaces/Pedal.html":{},"classes/PedalStatus.html":{},"injectables/PedalsService.html":{}}}],["model/op_mappings",{"_index":436,"title":{},"body":{"interfaces/ChainIndex.html":{},"interfaces/DraftOperationClassification.html":{},"interfaces/LoomConfig.html":{},"injectables/MappingsService.html":{},"classes/PedalConfig.html":{},"injectables/PlayerService.html":{},"injectables/SequencerService.html":{}}}],["model/player",{"_index":3365,"title":{},"body":{"interfaces/Pedal.html":{},"classes/PedalStatus.html":{},"injectables/PedalsService.html":{}}}],["model/state",{"_index":1700,"title":{},"body":{"interfaces/DraftOperationClassification.html":{},"interfaces/LoomConfig.html":{},"classes/PedalConfig.html":{},"injectables/PlayerService.html":{}}}],["modes",{"_index":1289,"title":{},"body":{"interfaces/DensityUnits.html":{},"interfaces/DesignMode.html":{},"interfaces/Ink.html":{},"injectables/InkService.html":{},"interfaces/LoomTypes.html":{},"interfaces/MaterialTypes.html":{},"interfaces/ViewModes.html":{}}}],["modify",{"_index":2079,"title":{},"body":{"components/DraftdetailComponent.html":{}}}],["modifying",{"_index":1995,"title":{},"body":{"components/DraftdetailComponent.html":{}}}],["module",{"_index":2675,"title":{"modules/MixerModule.html":{},"modules/PlayerModule.html":{}},"body":{"index.html":{}}}],["module's",{"_index":4610,"title":{},"body":{"index.html":{}}}],["modules",{"_index":2677,"title":{"modules.html":{}},"body":{"modules/MixerModule.html":{},"modules/PlayerModule.html":{},"index.html":{},"modules.html":{},"overview.html":{}}}],["more",{"_index":557,"title":{},"body":{"interfaces/ChainOp.html":{},"interfaces/DesignActions.html":{},"components/DraftdetailComponent.html":{},"interfaces/DynamicOperation.html":{},"interfaces/OpInput.html":{},"interfaces/OperationClassification.html":{},"interfaces/OperationParam.html":{},"interfaces/PairedOp.html":{},"interfaces/PedalEvent.html":{},"interfaces/PlayerOp.html":{},"interfaces/TreeOperation.html":{},"index.html":{},"miscellaneous/typealiases.html":{}}}],["mouse",{"_index":1290,"title":{},"body":{"interfaces/DensityUnits.html":{},"interfaces/DesignMode.html":{},"interfaces/LoomTypes.html":{},"interfaces/MaterialTypes.html":{},"interfaces/Point.html":{},"interfaces/ViewModes.html":{}}}],["move",{"_index":714,"title":{},"body":{"components/ConnectionComponent.html":{},"interfaces/DesignActions.html":{},"injectables/ViewportService.html":{}}}],["move(x",{"_index":4208,"title":{},"body":{"injectables/ViewportService.html":{}}}],["moved",{"_index":4228,"title":{},"body":{"injectables/ViewportService.html":{}}}],["moving",{"_index":1397,"title":{},"body":{"interfaces/DesignActions.html":{}}}],["ms",{"_index":1408,"title":{},"body":{"interfaces/DesignActions.html":{},"components/DraftdetailComponent.html":{}}}],["mulitple",{"_index":2225,"title":{},"body":{"interfaces/DynamicOperation.html":{},"interfaces/OpInput.html":{},"interfaces/OperationClassification.html":{},"interfaces/TreeOperation.html":{}}}],["multi",{"_index":2224,"title":{},"body":{"interfaces/DynamicOperation.html":{},"interfaces/OpInput.html":{},"interfaces/OperationClassification.html":{},"interfaces/TreeOperation.html":{}}}],["multidraftinput",{"_index":87,"title":{},"body":{"classes/AbstractOpFactory.html":{},"classes/BaseOp.html":{},"classes/Branch.html":{},"classes/Bus.html":{},"classes/Merge.html":{},"interfaces/OpClassifier.html":{},"interfaces/OperationProperties.html":{},"classes/Pipe.html":{},"classes/Seed.html":{},"interfaces/TopologyDef.html":{},"miscellaneous/typealiases.html":{}}}],["multiple",{"_index":520,"title":{},"body":{"interfaces/ChainOp.html":{},"interfaces/DynamicOperation.html":{},"interfaces/IOTuple.html":{},"injectables/MappingsService.html":{},"components/OpHelpModal.html":{},"interfaces/OpInput.html":{},"classes/OpSequencer.html":{},"interfaces/OperationClassification.html":{},"interfaces/PairedOp.html":{},"interfaces/PedalEvent.html":{},"interfaces/PlayerOp.html":{},"classes/Shape.html":{},"interfaces/TreeNode.html":{},"interfaces/TreeOperation.html":{}}}],["multiplicity",{"_index":162,"title":{},"body":{"classes/AbstractOpFactory.html":{},"classes/BaseOp.html":{},"classes/Branch.html":{},"classes/Bus.html":{},"classes/Merge.html":{},"interfaces/OpClassifier.html":{},"interfaces/OperationProperties.html":{},"classes/Pipe.html":{},"classes/Seed.html":{},"interfaces/TopologyDef.html":{},"miscellaneous/typealiases.html":{}}}],["multple",{"_index":2228,"title":{},"body":{"interfaces/DynamicOperation.html":{},"interfaces/OpInput.html":{},"interfaces/OperationClassification.html":{},"interfaces/TreeOperation.html":{}}}],["mutipic",{"_index":4128,"title":{},"body":{"classes/System.html":{}}}],["mycontrol",{"_index":3207,"title":{},"body":{"components/OpsComponent.html":{}}}],["n",{"_index":118,"title":{},"body":{"classes/AbstractOpFactory.html":{},"classes/BaseOp.html":{},"classes/Branch.html":{},"classes/Bus.html":{},"classes/DBListener.html":{},"classes/DBListenerArray.html":{},"classes/DBNode.html":{},"classes/DBNodeArray.html":{},"classes/DBTwoWay.html":{},"classes/DBTwoWayArray.html":{},"classes/DBWriteBuffer.html":{},"classes/DBWriter.html":{},"classes/DBWriterArray.html":{},"interfaces/DraftOperationClassification.html":{},"interfaces/DynamicOperation.html":{},"interfaces/LoomConfig.html":{},"classes/Merge.html":{},"interfaces/NodeMethods.html":{},"interfaces/NodeParams.html":{},"classes/OnlineStatus.html":{},"interfaces/OpClassifier.html":{},"interfaces/OpInput.html":{},"classes/OpSequencer.html":{},"interfaces/OperationClassification.html":{},"interfaces/OperationProperties.html":{},"interfaces/Pedal.html":{},"classes/PedalConfig.html":{},"classes/PedalStatus.html":{},"injectables/PedalsService.html":{},"classes/Pipe.html":{},"injectables/PlayerService.html":{},"classes/Seed.html":{},"injectables/SequencerService.html":{},"classes/Shuttle.html":{},"interfaces/TopologyDef.html":{},"interfaces/TreeOperation.html":{},"miscellaneous/functions.html":{},"miscellaneous/typealiases.html":{}}}],["n+1th",{"_index":4153,"title":{},"body":{"classes/System.html":{},"miscellaneous/functions.html":{}}}],["n\\n",{"_index":3423,"title":{},"body":{"interfaces/Pedal.html":{},"classes/PedalStatus.html":{},"injectables/PedalsService.html":{}}}],["name",{"_index":20,"title":{},"body":{"classes/AbstractOpFactory.html":{},"classes/BaseOp.html":{},"classes/Branch.html":{},"classes/Bus.html":{},"classes/Cell.html":{},"interfaces/ChainOp.html":{},"components/ConnectionComponent.html":{},"classes/DBListener.html":{},"classes/DBListenerArray.html":{},"classes/DBNode.html":{},"classes/DBNodeArray.html":{},"classes/DBTwoWay.html":{},"classes/DBTwoWayArray.html":{},"classes/DBWriteBuffer.html":{},"classes/DBWriter.html":{},"classes/DBWriterArray.html":{},"interfaces/DraftMap.html":{},"interfaces/DraftNodeProxy.html":{},"interfaces/DraftOperationClassification.html":{},"components/DraftdetailComponent.html":{},"interfaces/DynamicOperation.html":{},"interfaces/FileObj.html":{},"interfaces/FileSaver.html":{},"interfaces/Fileloader.html":{},"interfaces/IOTuple.html":{},"components/ImageComponent.html":{},"interfaces/Ink.html":{},"injectables/InkService.html":{},"components/InletComponent.html":{},"interfaces/Interlacement.html":{},"interfaces/InterlacementVal.html":{},"interfaces/LoadResponse.html":{},"interfaces/LoomConfig.html":{},"injectables/MappingsService.html":{},"directives/MarqueeComponent.html":{},"classes/Merge.html":{},"components/MixerViewComponent.html":{},"interfaces/NodeComponentProxy.html":{},"interfaces/NodeMethods.html":{},"interfaces/NodeParams.html":{},"components/NoteComponent.html":{},"classes/OnlineStatus.html":{},"interfaces/OpClassifier.html":{},"interfaces/OpComponentProxy.html":{},"components/OpHelpModal.html":{},"interfaces/OpInput.html":{},"classes/OpSequencer.html":{},"components/OpSequencerComponent.html":{},"interfaces/OperationClassification.html":{},"interfaces/OperationParam.html":{},"interfaces/OperationProperties.html":{},"components/OpsComponent.html":{},"interfaces/PairedOp.html":{},"components/ParameterComponent.html":{},"classes/Params.html":{},"interfaces/Pedal.html":{},"classes/PedalConfig.html":{},"interfaces/PedalEvent.html":{},"classes/PedalStatus.html":{},"injectables/PedalsService.html":{},"classes/Pipe.html":{},"components/PlayerComponent.html":{},"interfaces/PlayerOp.html":{},"injectables/PlayerService.html":{},"interfaces/PlayerState.html":{},"interfaces/PlayerState-1.html":{},"classes/Render.html":{},"interfaces/SaveObj.html":{},"classes/Seed.html":{},"classes/Selection.html":{},"directives/SelectionComponent.html":{},"injectables/SequencerService.html":{},"classes/Shape.html":{},"classes/Shape-1.html":{},"classes/Shuttle.html":{},"components/SnackbarComponent.html":{},"interfaces/StatusMessage.html":{},"classes/System.html":{},"interfaces/TopologyDef.html":{},"interfaces/TreeNode.html":{},"interfaces/TreeNodeProxy.html":{},"interfaces/TreeOperation.html":{},"injectables/ViewportService.html":{},"components/VirtualPedalsComponent.html":{},"interfaces/WeavingLog.html":{},"interfaces/WeavingPick.html":{},"interfaces/WeavingPick-1.html":{},"components/WeavingStateComponent.html":{},"miscellaneous/functions.html":{}}}],["name)[0",{"_index":2646,"title":{},"body":{"injectables/MappingsService.html":{}}}],["named",{"_index":4609,"title":{},"body":{"index.html":{}}}],["namefocusout",{"_index":1448,"title":{},"body":{"interfaces/DesignActions.html":{}}}],["nameorargs",{"_index":236,"title":{},"body":{"classes/AbstractOpFactory.html":{},"classes/BaseOp.html":{},"classes/Branch.html":{},"classes/Bus.html":{},"classes/Merge.html":{},"interfaces/OpClassifier.html":{},"interfaces/OperationProperties.html":{},"classes/Pipe.html":{},"classes/Seed.html":{},"interfaces/TopologyDef.html":{}}}],["nameorargs.name",{"_index":242,"title":{},"body":{"classes/AbstractOpFactory.html":{},"classes/BaseOp.html":{},"classes/Branch.html":{},"classes/Bus.html":{},"classes/Merge.html":{},"interfaces/OpClassifier.html":{},"interfaces/OperationProperties.html":{},"classes/Pipe.html":{},"classes/Seed.html":{},"interfaces/TopologyDef.html":{}}}],["namere",{"_index":4430,"title":{},"body":{"miscellaneous/functions.html":{}}}],["names",{"_index":2241,"title":{},"body":{"interfaces/DynamicOperation.html":{},"interfaces/OpInput.html":{},"interfaces/OperationClassification.html":{},"interfaces/OperationParam.html":{},"classes/Params.html":{},"interfaces/TreeOperation.html":{}}}],["navigate",{"_index":4512,"title":{},"body":{"index.html":{}}}],["ndx",{"_index":773,"title":{},"body":{"components/ConnectionComponent.html":{},"interfaces/DesignActions.html":{},"interfaces/IOTuple.html":{},"components/OpsComponent.html":{},"classes/Render.html":{},"classes/System.html":{},"interfaces/TreeNode.html":{}}}],["ndx.i",{"_index":1507,"title":{},"body":{"interfaces/DesignActions.html":{}}}],["ndx.j",{"_index":1508,"title":{},"body":{"interfaces/DesignActions.html":{}}}],["neccessary",{"_index":4581,"title":{},"body":{"index.html":{}}}],["necessarily",{"_index":122,"title":{},"body":{"classes/AbstractOpFactory.html":{},"classes/BaseOp.html":{},"classes/Branch.html":{},"classes/Bus.html":{},"classes/Merge.html":{},"interfaces/OpClassifier.html":{},"interfaces/OperationProperties.html":{},"classes/Pipe.html":{},"classes/Seed.html":{},"classes/Shape.html":{},"interfaces/TopologyDef.html":{}}}],["need",{"_index":1883,"title":{},"body":{"interfaces/DraftOperationClassification.html":{},"interfaces/LoomConfig.html":{},"components/OpsComponent.html":{},"components/ParameterComponent.html":{},"classes/PedalConfig.html":{},"injectables/PlayerService.html":{},"injectables/ViewportService.html":{},"index.html":{}}}],["needs",{"_index":2273,"title":{},"body":{"interfaces/IOTuple.html":{},"interfaces/PlayerState.html":{},"interfaces/PlayerState-1.html":{},"classes/Shape.html":{},"interfaces/TreeNode.html":{},"interfaces/WeavingLog.html":{},"interfaces/WeavingPick.html":{},"interfaces/WeavingPick-1.html":{},"index.html":{}}}],["neq",{"_index":1383,"title":{},"body":{"interfaces/DesignActions.html":{},"interfaces/Ink.html":{},"injectables/InkService.html":{},"components/WeavingStateComponent.html":{}}}],["nest",{"_index":1299,"title":{},"body":{"interfaces/DensityUnits.html":{},"interfaces/DesignMode.html":{},"interfaces/LoomTypes.html":{},"interfaces/MaterialTypes.html":{},"interfaces/ViewModes.html":{}}}],["nesw",{"_index":4653,"title":{},"body":{"miscellaneous/typealiases.html":{}}}],["never",{"_index":761,"title":{},"body":{"components/ConnectionComponent.html":{}}}],["new",{"_index":281,"title":{},"body":{"classes/AbstractOpFactory.html":{},"classes/BaseOp.html":{},"classes/Branch.html":{},"classes/Bus.html":{},"interfaces/ChainIndex.html":{},"classes/DBListener.html":{},"classes/DBListenerArray.html":{},"classes/DBNode.html":{},"classes/DBNodeArray.html":{},"classes/DBTwoWay.html":{},"classes/DBTwoWayArray.html":{},"classes/DBWriteBuffer.html":{},"classes/DBWriter.html":{},"classes/DBWriterArray.html":{},"interfaces/DesignActions.html":{},"interfaces/DraftOperationClassification.html":{},"components/InletComponent.html":{},"injectables/LayersService.html":{},"interfaces/LoomConfig.html":{},"injectables/MappingsService.html":{},"classes/Merge.html":{},"components/MixerViewComponent.html":{},"interfaces/NodeMethods.html":{},"interfaces/NodeParams.html":{},"components/NoteComponent.html":{},"classes/OnlineStatus.html":{},"interfaces/OpClassifier.html":{},"classes/OpSequencer.html":{},"interfaces/OperationParam.html":{},"interfaces/OperationProperties.html":{},"components/OpsComponent.html":{},"components/ParameterComponent.html":{},"classes/Params.html":{},"interfaces/Pedal.html":{},"classes/PedalConfig.html":{},"classes/PedalStatus.html":{},"injectables/PedalsService.html":{},"classes/Pipe.html":{},"components/PlayerComponent.html":{},"injectables/PlayerService.html":{},"classes/Seed.html":{},"directives/SelectionComponent.html":{},"injectables/SequencerService.html":{},"classes/Shape.html":{},"interfaces/TopologyDef.html":{},"injectables/ViewportService.html":{},"index.html":{}}}],["new_op",{"_index":2233,"title":{},"body":{"interfaces/DynamicOperation.html":{},"interfaces/OpInput.html":{},"interfaces/OperationClassification.html":{},"interfaces/TreeOperation.html":{}}}],["newl",{"_index":3400,"title":{},"body":{"interfaces/Pedal.html":{},"classes/PedalStatus.html":{},"injectables/PedalsService.html":{}}}],["newmapindex",{"_index":2563,"title":{},"body":{"injectables/MappingsService.html":{},"miscellaneous/functions.html":{}}}],["newnode",{"_index":3451,"title":{},"body":{"interfaces/Pedal.html":{},"classes/PedalStatus.html":{},"injectables/PedalsService.html":{}}}],["newstate",{"_index":622,"title":{},"body":{"interfaces/ChainOp.html":{},"interfaces/PairedOp.html":{},"interfaces/PedalEvent.html":{},"interfaces/PlayerOp.html":{}}}],["newstate.draft",{"_index":631,"title":{},"body":{"interfaces/ChainOp.html":{},"interfaces/PairedOp.html":{},"interfaces/PedalEvent.html":{},"interfaces/PlayerOp.html":{}}}],["newstate.pedal",{"_index":623,"title":{},"body":{"interfaces/ChainOp.html":{},"interfaces/PairedOp.html":{},"interfaces/PedalEvent.html":{},"interfaces/PlayerOp.html":{}}}],["newstates",{"_index":1137,"title":{},"body":{"classes/DBListener.html":{},"classes/DBListenerArray.html":{},"classes/DBNode.html":{},"classes/DBNodeArray.html":{},"classes/DBTwoWay.html":{},"classes/DBTwoWayArray.html":{},"classes/DBWriteBuffer.html":{},"classes/DBWriter.html":{},"classes/DBWriterArray.html":{},"interfaces/NodeMethods.html":{},"interfaces/NodeParams.html":{},"classes/OnlineStatus.html":{}}}],["neww",{"_index":3405,"title":{},"body":{"interfaces/Pedal.html":{},"classes/PedalStatus.html":{},"injectables/PedalsService.html":{}}}],["next",{"_index":477,"title":{},"body":{"interfaces/ChainIndex.html":{},"classes/OpSequencer.html":{},"interfaces/Pedal.html":{},"classes/PedalStatus.html":{},"injectables/PedalsService.html":{},"classes/Render.html":{},"injectables/SequencerService.html":{}}}],["next/previous",{"_index":3010,"title":{},"body":{"classes/OpSequencer.html":{}}}],["nextop",{"_index":514,"title":{},"body":{"interfaces/ChainIndex.html":{},"classes/OpSequencer.html":{},"injectables/SequencerService.html":{}}}],["ng",{"_index":4508,"title":{},"body":{"index.html":{}}}],["ngafterviewinit",{"_index":669,"title":{},"body":{"components/ConnectionComponent.html":{},"interfaces/DesignActions.html":{},"components/DraftdetailComponent.html":{},"components/MixerViewComponent.html":{},"components/NoteComponent.html":{},"components/PlayerComponent.html":{},"components/WeavingStateComponent.html":{}}}],["ngform",{"_index":2426,"title":{},"body":{"components/InletComponent.html":{},"components/ParameterComponent.html":{}}}],["ngmodule",{"_index":2687,"title":{},"body":{"modules/MixerModule.html":{},"modules/PlayerModule.html":{}}}],["ngoninit",{"_index":670,"title":{},"body":{"components/ConnectionComponent.html":{},"interfaces/DesignActions.html":{},"components/DraftdetailComponent.html":{},"components/ImageComponent.html":{},"components/InletComponent.html":{},"directives/MarqueeComponent.html":{},"components/MixerViewComponent.html":{},"components/NoteComponent.html":{},"components/OpHelpModal.html":{},"components/OpSequencerComponent.html":{},"components/OpsComponent.html":{},"components/ParameterComponent.html":{},"components/PlayerComponent.html":{},"directives/SelectionComponent.html":{},"components/SnackbarComponent.html":{},"components/VirtualPedalsComponent.html":{},"components/WeavingStateComponent.html":{}}}],["ngrx/effects",{"_index":4365,"title":{},"body":{"dependencies.html":{}}}],["ngrx/entity",{"_index":4367,"title":{},"body":{"dependencies.html":{}}}],["ngrx/store",{"_index":4368,"title":{},"body":{"dependencies.html":{}}}],["ngx",{"_index":4387,"title":{},"body":{"dependencies.html":{}}}],["no_drafts",{"_index":136,"title":{},"body":{"classes/AbstractOpFactory.html":{},"classes/BaseOp.html":{},"classes/Branch.html":{},"classes/Bus.html":{},"classes/Merge.html":{},"interfaces/OpClassifier.html":{},"interfaces/OperationProperties.html":{},"classes/Pipe.html":{},"classes/Seed.html":{},"interfaces/TopologyDef.html":{}}}],["no_draw",{"_index":659,"title":{},"body":{"components/ConnectionComponent.html":{}}}],["no_params",{"_index":139,"title":{},"body":{"classes/AbstractOpFactory.html":{},"classes/BaseOp.html":{},"classes/Branch.html":{},"classes/Bus.html":{},"classes/Merge.html":{},"interfaces/OpClassifier.html":{},"interfaces/OperationProperties.html":{},"classes/Pipe.html":{},"classes/Seed.html":{},"interfaces/TopologyDef.html":{}}}],["node",{"_index":701,"title":{},"body":{"components/ConnectionComponent.html":{},"classes/DBListener.html":{},"classes/DBListenerArray.html":{},"classes/DBNode.html":{},"classes/DBNodeArray.html":{},"classes/DBTwoWay.html":{},"classes/DBTwoWayArray.html":{},"classes/DBWriteBuffer.html":{},"classes/DBWriter.html":{},"classes/DBWriterArray.html":{},"interfaces/DraftNodeProxy.html":{},"interfaces/FileObj.html":{},"interfaces/FileSaver.html":{},"interfaces/Fileloader.html":{},"interfaces/IOTuple.html":{},"interfaces/LoadResponse.html":{},"interfaces/NodeComponentProxy.html":{},"interfaces/NodeMethods.html":{},"interfaces/NodeParams.html":{},"classes/OnlineStatus.html":{},"interfaces/OpComponentProxy.html":{},"injectables/PedalsService.html":{},"interfaces/SaveObj.html":{},"interfaces/StatusMessage.html":{},"interfaces/TreeNode.html":{},"interfaces/TreeNodeProxy.html":{},"index.html":{},"miscellaneous/typealiases.html":{}}}],["node.attach",{"_index":1116,"title":{},"body":{"classes/DBListener.html":{},"classes/DBListenerArray.html":{},"classes/DBNode.html":{},"classes/DBNodeArray.html":{},"classes/DBTwoWay.html":{},"classes/DBTwoWayArray.html":{},"classes/DBWriteBuffer.html":{},"classes/DBWriter.html":{},"classes/DBWriterArray.html":{},"interfaces/NodeMethods.html":{},"interfaces/NodeParams.html":{},"classes/OnlineStatus.html":{}}}],["node.id",{"_index":1118,"title":{},"body":{"classes/DBListener.html":{},"classes/DBListenerArray.html":{},"classes/DBNode.html":{},"classes/DBNodeArray.html":{},"classes/DBTwoWay.html":{},"classes/DBTwoWayArray.html":{},"classes/DBWriteBuffer.html":{},"classes/DBWriter.html":{},"classes/DBWriterArray.html":{},"interfaces/NodeMethods.html":{},"interfaces/NodeParams.html":{},"classes/OnlineStatus.html":{}}}],["node.js",{"_index":4486,"title":{},"body":{"index.html":{}}}],["node.on('change",{"_index":1117,"title":{},"body":{"classes/DBListener.html":{},"classes/DBListenerArray.html":{},"classes/DBNode.html":{},"classes/DBNodeArray.html":{},"classes/DBTwoWay.html":{},"classes/DBTwoWayArray.html":{},"classes/DBWriteBuffer.html":{},"classes/DBWriter.html":{},"classes/DBWriterArray.html":{},"interfaces/NodeMethods.html":{},"interfaces/NodeParams.html":{},"classes/OnlineStatus.html":{}}}],["node/component",{"_index":1659,"title":{},"body":{"interfaces/DraftNodeProxy.html":{},"interfaces/FileObj.html":{},"interfaces/FileSaver.html":{},"interfaces/Fileloader.html":{},"interfaces/LoadResponse.html":{},"interfaces/NodeComponentProxy.html":{},"interfaces/OpComponentProxy.html":{},"interfaces/SaveObj.html":{},"interfaces/StatusMessage.html":{},"interfaces/TreeNodeProxy.html":{}}}],["node_id",{"_index":1650,"title":{},"body":{"interfaces/DraftNodeProxy.html":{},"interfaces/FileObj.html":{},"interfaces/FileSaver.html":{},"interfaces/Fileloader.html":{},"interfaces/LoadResponse.html":{},"interfaces/NodeComponentProxy.html":{},"interfaces/OpComponentProxy.html":{},"interfaces/SaveObj.html":{},"interfaces/StatusMessage.html":{},"interfaces/TreeNodeProxy.html":{}}}],["nodeat",{"_index":1177,"title":{},"body":{"classes/DBListenerArray.html":{},"classes/DBNodeArray.html":{},"classes/DBTwoWayArray.html":{},"classes/DBWriterArray.html":{}}}],["nodeat(n",{"_index":1063,"title":{},"body":{"classes/DBListener.html":{},"classes/DBListenerArray.html":{},"classes/DBNode.html":{},"classes/DBNodeArray.html":{},"classes/DBTwoWay.html":{},"classes/DBTwoWayArray.html":{},"classes/DBWriteBuffer.html":{},"classes/DBWriter.html":{},"classes/DBWriterArray.html":{},"interfaces/NodeMethods.html":{},"interfaces/NodeParams.html":{},"classes/OnlineStatus.html":{}}}],["nodecomponentproxy",{"_index":1663,"title":{"interfaces/NodeComponentProxy.html":{}},"body":{"interfaces/DraftNodeProxy.html":{},"interfaces/FileObj.html":{},"interfaces/FileSaver.html":{},"interfaces/Fileloader.html":{},"interfaces/LoadResponse.html":{},"interfaces/NodeComponentProxy.html":{},"interfaces/OpComponentProxy.html":{},"interfaces/SaveObj.html":{},"interfaces/StatusMessage.html":{},"interfaces/TreeNodeProxy.html":{}}}],["nodemethods",{"_index":983,"title":{"interfaces/NodeMethods.html":{}},"body":{"classes/DBListener.html":{},"classes/DBListenerArray.html":{},"classes/DBNode.html":{},"classes/DBNodeArray.html":{},"classes/DBTwoWay.html":{},"classes/DBTwoWayArray.html":{},"classes/DBWriteBuffer.html":{},"classes/DBWriter.html":{},"classes/DBWriterArray.html":{},"interfaces/NodeMethods.html":{},"interfaces/NodeParams.html":{},"classes/OnlineStatus.html":{}}}],["nodeparams",{"_index":950,"title":{"interfaces/NodeParams.html":{}},"body":{"classes/DBListener.html":{},"classes/DBListenerArray.html":{},"classes/DBNode.html":{},"classes/DBNodeArray.html":{},"classes/DBTwoWay.html":{},"classes/DBTwoWayArray.html":{},"classes/DBWriteBuffer.html":{},"classes/DBWriter.html":{},"classes/DBWriterArray.html":{},"interfaces/NodeMethods.html":{},"interfaces/NodeParams.html":{},"classes/OnlineStatus.html":{},"interfaces/Pedal.html":{},"classes/PedalStatus.html":{},"injectables/PedalsService.html":{}}}],["nodes",{"_index":1049,"title":{},"body":{"classes/DBListener.html":{},"classes/DBListenerArray.html":{},"classes/DBNode.html":{},"classes/DBNodeArray.html":{},"classes/DBTwoWay.html":{},"classes/DBTwoWayArray.html":{},"classes/DBWriteBuffer.html":{},"classes/DBWriter.html":{},"classes/DBWriterArray.html":{},"interfaces/DraftNodeProxy.html":{},"interfaces/FileObj.html":{},"interfaces/FileSaver.html":{},"interfaces/Fileloader.html":{},"interfaces/IOTuple.html":{},"interfaces/LoadResponse.html":{},"interfaces/NodeComponentProxy.html":{},"interfaces/NodeMethods.html":{},"interfaces/NodeParams.html":{},"classes/OnlineStatus.html":{},"interfaces/OpComponentProxy.html":{},"interfaces/Pedal.html":{},"classes/PedalStatus.html":{},"injectables/PedalsService.html":{},"interfaces/SaveObj.html":{},"interfaces/StatusMessage.html":{},"interfaces/TreeNode.html":{},"interfaces/TreeNodeProxy.html":{},"miscellaneous/typealiases.html":{}}}],["nodetopedal",{"_index":3543,"title":{},"body":{"injectables/PedalsService.html":{}}}],["nodetopedal(node",{"_index":3557,"title":{},"body":{"injectables/PedalsService.html":{}}}],["nodevalue",{"_index":982,"title":{},"body":{"classes/DBListener.html":{},"classes/DBListenerArray.html":{},"classes/DBNode.html":{},"classes/DBNodeArray.html":{},"classes/DBTwoWay.html":{},"classes/DBTwoWayArray.html":{},"classes/DBWriteBuffer.html":{},"classes/DBWriter.html":{},"classes/DBWriterArray.html":{},"interfaces/NodeMethods.html":{},"interfaces/NodeParams.html":{},"classes/OnlineStatus.html":{},"miscellaneous/typealiases.html":{}}}],["nodrafts",{"_index":11,"title":{},"body":{"classes/AbstractOpFactory.html":{},"classes/BaseOp.html":{},"classes/Branch.html":{},"classes/Bus.html":{},"interfaces/DynamicOperation.html":{},"classes/Merge.html":{},"interfaces/OpClassifier.html":{},"interfaces/OpInput.html":{},"interfaces/OperationClassification.html":{},"interfaces/OperationProperties.html":{},"classes/Pipe.html":{},"classes/Seed.html":{},"interfaces/TopologyDef.html":{},"interfaces/TreeOperation.html":{},"miscellaneous/typealiases.html":{}}}],["nodrafts(...args",{"_index":38,"title":{},"body":{"classes/AbstractOpFactory.html":{},"classes/BaseOp.html":{},"classes/Branch.html":{},"classes/Bus.html":{},"classes/Merge.html":{},"interfaces/OpClassifier.html":{},"interfaces/OperationProperties.html":{},"classes/Pipe.html":{},"classes/Seed.html":{},"interfaces/TopologyDef.html":{}}}],["nodrafts(args",{"_index":35,"title":{},"body":{"classes/AbstractOpFactory.html":{},"classes/BaseOp.html":{},"classes/Branch.html":{},"classes/Bus.html":{},"classes/Merge.html":{},"interfaces/OpClassifier.html":{},"interfaces/OperationProperties.html":{},"classes/Pipe.html":{},"classes/Seed.html":{},"interfaces/TopologyDef.html":{}}}],["nodraftsperform",{"_index":167,"title":{},"body":{"classes/AbstractOpFactory.html":{},"classes/BaseOp.html":{},"classes/Branch.html":{},"classes/Bus.html":{},"classes/Merge.html":{},"interfaces/OpClassifier.html":{},"interfaces/OperationProperties.html":{},"classes/Pipe.html":{},"classes/Seed.html":{},"interfaces/TopologyDef.html":{},"miscellaneous/typealiases.html":{}}}],["non",{"_index":1484,"title":{},"body":{"interfaces/DesignActions.html":{}}}],["none",{"_index":134,"title":{},"body":{"classes/AbstractOpFactory.html":{},"classes/BaseOp.html":{},"classes/Branch.html":{},"classes/Bus.html":{},"interfaces/DynamicOperation.html":{},"components/InletComponent.html":{},"classes/Merge.html":{},"components/MixerViewComponent.html":{},"components/NoteComponent.html":{},"interfaces/OpClassifier.html":{},"interfaces/OpInput.html":{},"interfaces/OperationClassification.html":{},"interfaces/OperationProperties.html":{},"classes/Pipe.html":{},"classes/Seed.html":{},"components/SnackbarComponent.html":{},"interfaces/TopologyDef.html":{},"interfaces/TreeOperation.html":{}}}],["noparams",{"_index":12,"title":{},"body":{"classes/AbstractOpFactory.html":{},"classes/BaseOp.html":{},"classes/Branch.html":{},"classes/Bus.html":{},"interfaces/DynamicOperation.html":{},"classes/Merge.html":{},"interfaces/OpClassifier.html":{},"interfaces/OpInput.html":{},"interfaces/OperationClassification.html":{},"interfaces/OperationProperties.html":{},"classes/Pipe.html":{},"classes/Seed.html":{},"interfaces/TopologyDef.html":{},"interfaces/TreeOperation.html":{},"miscellaneous/typealiases.html":{}}}],["noparams(...args",{"_index":43,"title":{},"body":{"classes/AbstractOpFactory.html":{},"classes/BaseOp.html":{},"classes/Branch.html":{},"classes/Bus.html":{},"classes/Merge.html":{},"interfaces/OpClassifier.html":{},"interfaces/OperationProperties.html":{},"classes/Pipe.html":{},"classes/Seed.html":{},"interfaces/TopologyDef.html":{}}}],["noparams(args",{"_index":40,"title":{},"body":{"classes/AbstractOpFactory.html":{},"classes/BaseOp.html":{},"classes/Branch.html":{},"classes/Bus.html":{},"classes/Merge.html":{},"interfaces/OpClassifier.html":{},"interfaces/OperationProperties.html":{},"classes/Pipe.html":{},"classes/Seed.html":{},"interfaces/TopologyDef.html":{}}}],["noparamsperform",{"_index":169,"title":{},"body":{"classes/AbstractOpFactory.html":{},"classes/BaseOp.html":{},"classes/Branch.html":{},"classes/Bus.html":{},"classes/Merge.html":{},"interfaces/OpClassifier.html":{},"interfaces/OperationProperties.html":{},"classes/Pipe.html":{},"classes/Seed.html":{},"interfaces/TopologyDef.html":{},"miscellaneous/typealiases.html":{}}}],["normal",{"_index":4291,"title":{},"body":{"components/VirtualPedalsComponent.html":{}}}],["notation",{"_index":2454,"title":{},"body":{"components/InletComponent.html":{}}}],["note",{"_index":1653,"title":{},"body":{"interfaces/DraftNodeProxy.html":{},"interfaces/FileObj.html":{},"interfaces/FileSaver.html":{},"interfaces/Fileloader.html":{},"interfaces/LoadResponse.html":{},"interfaces/NodeComponentProxy.html":{},"components/NoteComponent.html":{},"interfaces/OpComponentProxy.html":{},"interfaces/SaveObj.html":{},"classes/Shape-1.html":{},"interfaces/StatusMessage.html":{},"interfaces/TreeNodeProxy.html":{}}}],["note'},{'name",{"_index":856,"title":{},"body":{"components/ConnectionComponent.html":{},"components/DraftdetailComponent.html":{},"components/ImageComponent.html":{},"components/InletComponent.html":{},"components/MixerViewComponent.html":{},"components/NoteComponent.html":{},"components/OpHelpModal.html":{},"components/OpSequencerComponent.html":{},"components/OpsComponent.html":{},"components/ParameterComponent.html":{},"components/PlayerComponent.html":{},"components/SnackbarComponent.html":{},"components/VirtualPedalsComponent.html":{},"components/WeavingStateComponent.html":{}}}],["note.component.html",{"_index":2862,"title":{},"body":{"components/NoteComponent.html":{}}}],["note.component.scss",{"_index":2861,"title":{},"body":{"components/NoteComponent.html":{}}}],["note.id",{"_index":2930,"title":{},"body":{"components/NoteComponent.html":{}}}],["notecomponent",{"_index":855,"title":{"components/NoteComponent.html":{}},"body":{"components/ConnectionComponent.html":{},"components/DraftdetailComponent.html":{},"components/ImageComponent.html":{},"components/InletComponent.html":{},"modules/MixerModule.html":{},"components/MixerViewComponent.html":{},"components/NoteComponent.html":{},"components/OpHelpModal.html":{},"components/OpSequencerComponent.html":{},"components/OpsComponent.html":{},"components/ParameterComponent.html":{},"components/PlayerComponent.html":{},"components/SnackbarComponent.html":{},"components/VirtualPedalsComponent.html":{},"components/WeavingStateComponent.html":{},"overview.html":{}}}],["notes",{"_index":1679,"title":{},"body":{"interfaces/DraftNodeProxy.html":{},"interfaces/FileObj.html":{},"interfaces/FileSaver.html":{},"interfaces/Fileloader.html":{},"interfaces/LoadResponse.html":{},"interfaces/NodeComponentProxy.html":{},"components/NoteComponent.html":{},"interfaces/OpComponentProxy.html":{},"interfaces/SaveObj.html":{},"classes/Shuttle.html":{},"interfaces/StatusMessage.html":{},"classes/System.html":{},"interfaces/TreeNodeProxy.html":{},"index.html":{}}}],["notesservice",{"_index":2867,"title":{},"body":{"components/NoteComponent.html":{}}}],["notesservice,private",{"_index":2893,"title":{},"body":{"components/NoteComponent.html":{}}}],["nothing",{"_index":2342,"title":{},"body":{"interfaces/Ink.html":{},"injectables/InkService.html":{}}}],["now",{"_index":2293,"title":{},"body":{"interfaces/IOTuple.html":{},"interfaces/TreeNode.html":{}}}],["nowrap",{"_index":4338,"title":{},"body":{"components/WeavingStateComponent.html":{}}}],["npm",{"_index":4488,"title":{},"body":{"index.html":{}}}],["null",{"_index":86,"title":{},"body":{"classes/AbstractOpFactory.html":{},"classes/BaseOp.html":{},"classes/Branch.html":{},"classes/Bus.html":{},"classes/Cell.html":{},"components/ConnectionComponent.html":{},"interfaces/DesignActions.html":{},"interfaces/DraftOperationClassification.html":{},"components/DraftdetailComponent.html":{},"interfaces/DynamicOperation.html":{},"interfaces/IOTuple.html":{},"interfaces/Ink.html":{},"injectables/InkService.html":{},"components/InletComponent.html":{},"interfaces/LoomConfig.html":{},"classes/Merge.html":{},"interfaces/OpClassifier.html":{},"interfaces/OpInput.html":{},"interfaces/OperationClassification.html":{},"interfaces/OperationParam.html":{},"interfaces/OperationProperties.html":{},"components/ParameterComponent.html":{},"classes/Params.html":{},"classes/PedalConfig.html":{},"classes/Pipe.html":{},"components/PlayerComponent.html":{},"injectables/PlayerService.html":{},"classes/Seed.html":{},"classes/Shuttle.html":{},"classes/System.html":{},"interfaces/TopologyDef.html":{},"interfaces/TreeNode.html":{},"interfaces/TreeOperation.html":{},"components/WeavingStateComponent.html":{},"miscellaneous/typealiases.html":{}}}],["num",{"_index":1123,"title":{},"body":{"classes/DBListener.html":{},"classes/DBListenerArray.html":{},"classes/DBNode.html":{},"classes/DBNodeArray.html":{},"classes/DBTwoWay.html":{},"classes/DBTwoWayArray.html":{},"classes/DBWriteBuffer.html":{},"classes/DBWriter.html":{},"classes/DBWriterArray.html":{},"components/InletComponent.html":{},"interfaces/NodeMethods.html":{},"interfaces/NodeParams.html":{},"classes/OnlineStatus.html":{},"interfaces/Pedal.html":{},"classes/PedalStatus.html":{},"injectables/PedalsService.html":{}}}],["num_drafts",{"_index":2446,"title":{},"body":{"components/InletComponent.html":{}}}],["num_pedals",{"_index":3380,"title":{},"body":{"interfaces/Pedal.html":{},"classes/PedalStatus.html":{},"injectables/PedalsService.html":{}}}],["num_picks",{"_index":3378,"title":{},"body":{"interfaces/Pedal.html":{},"classes/PedalStatus.html":{},"injectables/PedalsService.html":{}}}],["num_v_pedals",{"_index":3383,"title":{},"body":{"interfaces/Pedal.html":{},"classes/PedalStatus.html":{},"injectables/PedalsService.html":{}}}],["number",{"_index":94,"title":{},"body":{"classes/AbstractOpFactory.html":{},"classes/BaseOp.html":{},"interfaces/Bounds.html":{},"classes/Branch.html":{},"classes/Bus.html":{},"interfaces/ChainIndex.html":{},"interfaces/ChainOp.html":{},"components/ConnectionComponent.html":{},"interfaces/Crossing.html":{},"classes/DBListener.html":{},"classes/DBListenerArray.html":{},"classes/DBNode.html":{},"classes/DBNodeArray.html":{},"classes/DBTwoWay.html":{},"classes/DBTwoWayArray.html":{},"classes/DBWriteBuffer.html":{},"classes/DBWriter.html":{},"classes/DBWriterArray.html":{},"interfaces/DensityUnits.html":{},"interfaces/DesignActions.html":{},"interfaces/DesignMode.html":{},"interfaces/DraftMap.html":{},"interfaces/DraftNodeProxy.html":{},"interfaces/DraftOperationClassification.html":{},"components/DraftdetailComponent.html":{},"interfaces/DynamicOperation.html":{},"interfaces/FileObj.html":{},"interfaces/FileSaver.html":{},"interfaces/Fileloader.html":{},"interfaces/IOTuple.html":{},"components/ImageComponent.html":{},"components/InletComponent.html":{},"interfaces/Interlacement.html":{},"interfaces/InterlacementVal.html":{},"injectables/LayersService.html":{},"interfaces/LoadResponse.html":{},"interfaces/LoomConfig.html":{},"interfaces/LoomTypes.html":{},"injectables/MappingsService.html":{},"directives/MarqueeComponent.html":{},"interfaces/MaterialTypes.html":{},"classes/Merge.html":{},"components/MixerViewComponent.html":{},"interfaces/NodeComponentProxy.html":{},"interfaces/NodeMethods.html":{},"interfaces/NodeParams.html":{},"components/NoteComponent.html":{},"classes/OnlineStatus.html":{},"interfaces/OpClassifier.html":{},"interfaces/OpComponentProxy.html":{},"components/OpHelpModal.html":{},"interfaces/OpInput.html":{},"classes/OpSequencer.html":{},"interfaces/OperationClassification.html":{},"interfaces/OperationParam.html":{},"interfaces/OperationProperties.html":{},"interfaces/PairedOp.html":{},"components/ParameterComponent.html":{},"classes/Params.html":{},"interfaces/Pedal.html":{},"classes/PedalConfig.html":{},"interfaces/PedalEvent.html":{},"classes/PedalStatus.html":{},"injectables/PedalsService.html":{},"classes/Pipe.html":{},"components/PlayerComponent.html":{},"interfaces/PlayerOp.html":{},"injectables/PlayerService.html":{},"interfaces/PlayerState.html":{},"interfaces/PlayerState-1.html":{},"interfaces/Point.html":{},"classes/Render.html":{},"interfaces/SaveObj.html":{},"classes/Seed.html":{},"classes/Selection.html":{},"directives/SelectionComponent.html":{},"injectables/SequencerService.html":{},"classes/Shape.html":{},"classes/Shape-1.html":{},"classes/Shuttle.html":{},"components/SnackbarComponent.html":{},"interfaces/StatusMessage.html":{},"classes/System.html":{},"interfaces/TopologyDef.html":{},"interfaces/TreeNode.html":{},"interfaces/TreeNodeProxy.html":{},"interfaces/TreeOperation.html":{},"interfaces/Vertex.html":{},"interfaces/ViewModes.html":{},"injectables/ViewportService.html":{},"interfaces/WeavingLog.html":{},"interfaces/WeavingPick.html":{},"interfaces/WeavingPick-1.html":{},"components/WeavingStateComponent.html":{},"interfaces/YarnPath.html":{},"miscellaneous/functions.html":{},"miscellaneous/typealiases.html":{}}}],["number(name",{"_index":3189,"title":{},"body":{"interfaces/OperationParam.html":{},"classes/Params.html":{}}}],["number(objorname",{"_index":3190,"title":{},"body":{"interfaces/OperationParam.html":{},"classes/Params.html":{}}}],["number(undefined",{"_index":3350,"title":{},"body":{"classes/Params.html":{}}}],["number):array",{"_index":4037,"title":{},"body":{"classes/Shape-1.html":{}}}],["number_opts",{"_index":2387,"title":{},"body":{"components/InletComponent.html":{}}}],["numbers",{"_index":612,"title":{},"body":{"interfaces/ChainOp.html":{},"injectables/MappingsService.html":{},"components/MixerViewComponent.html":{},"interfaces/PairedOp.html":{},"interfaces/PedalEvent.html":{},"interfaces/PlayerOp.html":{}}}],["numeric",{"_index":3155,"title":{},"body":{"interfaces/OperationParam.html":{},"classes/Params.html":{},"miscellaneous/typealiases.html":{}}}],["numframes",{"_index":1955,"title":{},"body":{"components/DraftdetailComponent.html":{}}}],["numframes(loom",{"_index":2070,"title":{},"body":{"components/DraftdetailComponent.html":{}}}],["numinlet",{"_index":4638,"title":{},"body":{"miscellaneous/typealiases.html":{}}}],["nummappings",{"_index":1732,"title":{},"body":{"interfaces/DraftOperationClassification.html":{},"interfaces/LoomConfig.html":{},"classes/PedalConfig.html":{},"injectables/PlayerService.html":{}}}],["numparam",{"_index":3159,"title":{},"body":{"interfaces/OperationParam.html":{},"components/ParameterComponent.html":{},"classes/Params.html":{},"miscellaneous/typealiases.html":{}}}],["numpedals",{"_index":1719,"title":{},"body":{"interfaces/DraftOperationClassification.html":{},"interfaces/LoomConfig.html":{},"classes/PedalConfig.html":{},"injectables/PlayerService.html":{}}}],["numpicks",{"_index":593,"title":{},"body":{"interfaces/ChainOp.html":{},"interfaces/PairedOp.html":{},"interfaces/PedalEvent.html":{},"interfaces/PlayerOp.html":{},"interfaces/PlayerState.html":{},"interfaces/PlayerState-1.html":{},"interfaces/WeavingLog.html":{},"interfaces/WeavingPick.html":{},"interfaces/WeavingPick-1.html":{}}}],["numtreadles",{"_index":1956,"title":{},"body":{"components/DraftdetailComponent.html":{}}}],["numtreadles(loom",{"_index":2071,"title":{},"body":{"components/DraftdetailComponent.html":{}}}],["nxy",{"_index":1505,"title":{},"body":{"interfaces/DesignActions.html":{}}}],["o",{"_index":508,"title":{},"body":{"interfaces/ChainIndex.html":{},"interfaces/ChainOp.html":{},"interfaces/DraftOperationClassification.html":{},"interfaces/LoomConfig.html":{},"injectables/MappingsService.html":{},"classes/OpSequencer.html":{},"interfaces/PairedOp.html":{},"classes/PedalConfig.html":{},"interfaces/PedalEvent.html":{},"interfaces/PlayerOp.html":{},"injectables/PlayerService.html":{},"injectables/SequencerService.html":{}}}],["o.chain",{"_index":1743,"title":{},"body":{"interfaces/DraftOperationClassification.html":{},"interfaces/LoomConfig.html":{},"injectables/MappingsService.html":{},"classes/PedalConfig.html":{},"injectables/PlayerService.html":{}}}],["o.id",{"_index":1741,"title":{},"body":{"interfaces/DraftOperationClassification.html":{},"interfaces/LoomConfig.html":{},"injectables/MappingsService.html":{},"classes/PedalConfig.html":{},"injectables/PlayerService.html":{}}}],["o.name",{"_index":619,"title":{},"body":{"interfaces/ChainOp.html":{},"components/OpSequencerComponent.html":{},"interfaces/PairedOp.html":{},"interfaces/PedalEvent.html":{},"interfaces/PlayerOp.html":{}}}],["o.op",{"_index":627,"title":{},"body":{"interfaces/ChainOp.html":{},"interfaces/PairedOp.html":{},"interfaces/PedalEvent.html":{},"interfaces/PlayerOp.html":{}}}],["o.op.classifier.type",{"_index":625,"title":{},"body":{"interfaces/ChainOp.html":{},"interfaces/PairedOp.html":{},"interfaces/PedalEvent.html":{},"interfaces/PlayerOp.html":{}}}],["obj",{"_index":2741,"title":{},"body":{"components/MixerViewComponent.html":{},"components/ParameterComponent.html":{}}}],["obj.data",{"_index":3328,"title":{},"body":{"components/ParameterComponent.html":{}}}],["obj.id",{"_index":3326,"title":{},"body":{"components/ParameterComponent.html":{}}}],["obj.p.x",{"_index":2792,"title":{},"body":{"components/MixerViewComponent.html":{}}}],["object",{"_index":230,"title":{},"body":{"classes/AbstractOpFactory.html":{},"classes/BaseOp.html":{},"classes/Branch.html":{},"classes/Bus.html":{},"classes/Cell.html":{},"interfaces/ChainIndex.html":{},"components/ConnectionComponent.html":{},"interfaces/DraftNodeProxy.html":{},"components/DraftdetailComponent.html":{},"interfaces/FileObj.html":{},"interfaces/FileSaver.html":{},"interfaces/Fileloader.html":{},"interfaces/IOTuple.html":{},"interfaces/LoadResponse.html":{},"injectables/MappingsService.html":{},"classes/Merge.html":{},"interfaces/NodeComponentProxy.html":{},"interfaces/OpClassifier.html":{},"interfaces/OpComponentProxy.html":{},"interfaces/OperationProperties.html":{},"classes/Pipe.html":{},"classes/Render.html":{},"interfaces/SaveObj.html":{},"classes/Seed.html":{},"classes/Selection.html":{},"injectables/SequencerService.html":{},"classes/Shape.html":{},"classes/Shuttle.html":{},"interfaces/StatusMessage.html":{},"classes/System.html":{},"interfaces/TopologyDef.html":{},"interfaces/TreeNode.html":{},"interfaces/TreeNodeProxy.html":{},"components/WeavingStateComponent.html":{},"index.html":{}}}],["object.assign",{"_index":3739,"title":{},"body":{"interfaces/PlayerState.html":{},"interfaces/PlayerState-1.html":{},"interfaces/WeavingLog.html":{},"interfaces/WeavingPick.html":{},"interfaces/WeavingPick-1.html":{}}}],["object.defineproperty(this",{"_index":3402,"title":{},"body":{"interfaces/Pedal.html":{},"classes/PedalStatus.html":{},"injectables/PedalsService.html":{}}}],["object.entries(this.mapping).length",{"_index":1733,"title":{},"body":{"interfaces/DraftOperationClassification.html":{},"interfaces/LoomConfig.html":{},"classes/PedalConfig.html":{},"injectables/PlayerService.html":{}}}],["object.keys(parentkeys",{"_index":1128,"title":{},"body":{"classes/DBListener.html":{},"classes/DBListenerArray.html":{},"classes/DBNode.html":{},"classes/DBNodeArray.html":{},"classes/DBTwoWay.html":{},"classes/DBTwoWayArray.html":{},"classes/DBWriteBuffer.html":{},"classes/DBWriter.html":{},"classes/DBWriterArray.html":{},"interfaces/NodeMethods.html":{},"interfaces/NodeParams.html":{},"classes/OnlineStatus.html":{}}}],["object.keys(this._val",{"_index":1006,"title":{},"body":{"classes/DBListener.html":{},"classes/DBListenerArray.html":{},"classes/DBNode.html":{},"classes/DBNodeArray.html":{},"classes/DBTwoWay.html":{},"classes/DBTwoWayArray.html":{},"classes/DBWriteBuffer.html":{},"classes/DBWriter.html":{},"classes/DBWriterArray.html":{},"interfaces/NodeMethods.html":{},"interfaces/NodeParams.html":{},"classes/OnlineStatus.html":{}}}],["objects",{"_index":2570,"title":{},"body":{"injectables/MappingsService.html":{},"injectables/ViewportService.html":{}}}],["objects/types",{"_index":1604,"title":{},"body":{"interfaces/DraftMap.html":{},"interfaces/DraftNodeProxy.html":{},"interfaces/FileObj.html":{},"interfaces/FileSaver.html":{},"interfaces/Fileloader.html":{},"interfaces/IOTuple.html":{},"interfaces/Interlacement.html":{},"interfaces/InterlacementVal.html":{},"interfaces/LoadResponse.html":{},"interfaces/LoomTypes.html":{},"interfaces/NodeComponentProxy.html":{},"interfaces/OpComponentProxy.html":{},"interfaces/SaveObj.html":{},"interfaces/StatusMessage.html":{},"interfaces/TreeNode.html":{},"interfaces/TreeNodeProxy.html":{},"miscellaneous/typealiases.html":{}}}],["objects/types/utility",{"_index":2139,"title":{},"body":{"interfaces/DynamicOperation.html":{},"interfaces/OpInput.html":{},"interfaces/OperationClassification.html":{},"interfaces/TreeOperation.html":{}}}],["objorname",{"_index":3191,"title":{},"body":{"interfaces/OperationParam.html":{},"classes/Params.html":{}}}],["objorname.dx",{"_index":3196,"title":{},"body":{"interfaces/OperationParam.html":{},"classes/Params.html":{}}}],["objorname.error",{"_index":3200,"title":{},"body":{"interfaces/OperationParam.html":{},"classes/Params.html":{}}}],["objorname.max",{"_index":3195,"title":{},"body":{"interfaces/OperationParam.html":{},"classes/Params.html":{}}}],["objorname.min",{"_index":3194,"title":{},"body":{"interfaces/OperationParam.html":{},"classes/Params.html":{}}}],["objorname.name",{"_index":3192,"title":{},"body":{"interfaces/OperationParam.html":{},"classes/Params.html":{}}}],["objorname.regex",{"_index":3199,"title":{},"body":{"interfaces/OperationParam.html":{},"classes/Params.html":{}}}],["objorname.value",{"_index":3193,"title":{},"body":{"interfaces/OperationParam.html":{},"classes/Params.html":{}}}],["objs",{"_index":4182,"title":{},"body":{"injectables/ViewportService.html":{}}}],["observable",{"_index":3227,"title":{},"body":{"components/OpsComponent.html":{}}}],["occasionally",{"_index":1167,"title":{},"body":{"classes/DBListener.html":{},"classes/DBListenerArray.html":{},"classes/DBNode.html":{},"classes/DBNodeArray.html":{},"classes/DBTwoWay.html":{},"classes/DBTwoWayArray.html":{},"classes/DBWriteBuffer.html":{},"classes/DBWriter.html":{},"classes/DBWriterArray.html":{},"interfaces/NodeMethods.html":{},"interfaces/NodeParams.html":{},"classes/OnlineStatus.html":{}}}],["offer",{"_index":3149,"title":{},"body":{"interfaces/OperationParam.html":{}}}],["offers",{"_index":3998,"title":{},"body":{"classes/Shape-1.html":{}}}],["offline",{"_index":4335,"title":{},"body":{"components/WeavingStateComponent.html":{}}}],["offset_x",{"_index":3812,"title":{},"body":{"classes/Render.html":{}}}],["offset_y",{"_index":3813,"title":{},"body":{"classes/Render.html":{}}}],["ok",{"_index":2192,"title":{},"body":{"interfaces/DynamicOperation.html":{},"interfaces/OpInput.html":{},"interfaces/OperationClassification.html":{},"interfaces/TreeOperation.html":{}}}],["old",{"_index":1710,"title":{},"body":{"interfaces/DraftOperationClassification.html":{},"interfaces/DynamicOperation.html":{},"interfaces/LoomConfig.html":{},"interfaces/OpInput.html":{},"interfaces/OperationClassification.html":{},"classes/PedalConfig.html":{},"injectables/PlayerService.html":{},"interfaces/TreeOperation.html":{}}}],["old_names",{"_index":225,"title":{},"body":{"classes/AbstractOpFactory.html":{},"classes/BaseOp.html":{},"classes/Branch.html":{},"classes/Bus.html":{},"interfaces/DynamicOperation.html":{},"classes/Merge.html":{},"interfaces/OpClassifier.html":{},"interfaces/OpInput.html":{},"interfaces/OperationClassification.html":{},"interfaces/OperationProperties.html":{},"classes/Pipe.html":{},"classes/Seed.html":{},"interfaces/TopologyDef.html":{},"interfaces/TreeOperation.html":{}}}],["onaddpedal(p",{"_index":2585,"title":{},"body":{"injectables/MappingsService.html":{}}}],["oncancel",{"_index":1957,"title":{},"body":{"components/DraftdetailComponent.html":{}}}],["once",{"_index":2571,"title":{},"body":{"injectables/MappingsService.html":{},"classes/Shape.html":{},"index.html":{}}}],["onchanges",{"_index":1307,"title":{},"body":{"interfaces/DesignActions.html":{}}}],["onchildadded",{"_index":972,"title":{},"body":{"classes/DBListener.html":{},"classes/DBListenerArray.html":{},"classes/DBNode.html":{},"classes/DBNodeArray.html":{},"classes/DBTwoWay.html":{},"classes/DBTwoWayArray.html":{},"classes/DBWriteBuffer.html":{},"classes/DBWriter.html":{},"classes/DBWriterArray.html":{},"interfaces/NodeMethods.html":{},"interfaces/NodeParams.html":{},"classes/OnlineStatus.html":{}}}],["onchildadded(this.parentnode.ref",{"_index":1089,"title":{},"body":{"classes/DBListener.html":{},"classes/DBListenerArray.html":{},"classes/DBNode.html":{},"classes/DBNodeArray.html":{},"classes/DBTwoWay.html":{},"classes/DBTwoWayArray.html":{},"classes/DBWriteBuffer.html":{},"classes/DBWriter.html":{},"classes/DBWriterArray.html":{},"interfaces/NodeMethods.html":{},"interfaces/NodeParams.html":{},"classes/OnlineStatus.html":{}}}],["onchildchanged",{"_index":973,"title":{},"body":{"classes/DBListener.html":{},"classes/DBListenerArray.html":{},"classes/DBNode.html":{},"classes/DBNodeArray.html":{},"classes/DBTwoWay.html":{},"classes/DBTwoWayArray.html":{},"classes/DBWriteBuffer.html":{},"classes/DBWriter.html":{},"classes/DBWriterArray.html":{},"interfaces/NodeMethods.html":{},"interfaces/NodeParams.html":{},"classes/OnlineStatus.html":{}}}],["onchildchanged(this.parentnode.ref",{"_index":1092,"title":{},"body":{"classes/DBListener.html":{},"classes/DBListenerArray.html":{},"classes/DBNode.html":{},"classes/DBNodeArray.html":{},"classes/DBTwoWay.html":{},"classes/DBTwoWayArray.html":{},"classes/DBWriteBuffer.html":{},"classes/DBWriter.html":{},"classes/DBWriterArray.html":{},"interfaces/NodeMethods.html":{},"interfaces/NodeParams.html":{},"classes/OnlineStatus.html":{}}}],["onchildremoved",{"_index":974,"title":{},"body":{"classes/DBListener.html":{},"classes/DBListenerArray.html":{},"classes/DBNode.html":{},"classes/DBNodeArray.html":{},"classes/DBTwoWay.html":{},"classes/DBTwoWayArray.html":{},"classes/DBWriteBuffer.html":{},"classes/DBWriter.html":{},"classes/DBWriterArray.html":{},"interfaces/NodeMethods.html":{},"interfaces/NodeParams.html":{},"classes/OnlineStatus.html":{}}}],["onchildremoved(this.parentnode.ref",{"_index":1094,"title":{},"body":{"classes/DBListener.html":{},"classes/DBListenerArray.html":{},"classes/DBNode.html":{},"classes/DBNodeArray.html":{},"classes/DBTwoWay.html":{},"classes/DBTwoWayArray.html":{},"classes/DBWriteBuffer.html":{},"classes/DBWriter.html":{},"classes/DBWriterArray.html":{},"interfaces/NodeMethods.html":{},"interfaces/NodeParams.html":{},"classes/OnlineStatus.html":{}}}],["onconnectionmade",{"_index":1361,"title":{},"body":{"interfaces/DesignActions.html":{}}}],["onconnectionremoved",{"_index":1362,"title":{},"body":{"interfaces/DesignActions.html":{},"components/InletComponent.html":{}}}],["onconnectionstarted:any",{"_index":1364,"title":{},"body":{"interfaces/DesignActions.html":{}}}],["ondeletecalled",{"_index":1359,"title":{},"body":{"interfaces/DesignActions.html":{}}}],["ondesignaction",{"_index":1363,"title":{},"body":{"interfaces/DesignActions.html":{}}}],["ondrafttoplayer",{"_index":1367,"title":{},"body":{"interfaces/DesignActions.html":{}}}],["onduplicatecalled",{"_index":1360,"title":{},"body":{"interfaces/DesignActions.html":{}}}],["one",{"_index":112,"title":{},"body":{"classes/AbstractOpFactory.html":{},"classes/BaseOp.html":{},"classes/Branch.html":{},"classes/Bus.html":{},"interfaces/ChainOp.html":{},"components/ConnectionComponent.html":{},"interfaces/DraftOperationClassification.html":{},"interfaces/DynamicOperation.html":{},"interfaces/IOTuple.html":{},"interfaces/LoomConfig.html":{},"classes/Merge.html":{},"components/MixerViewComponent.html":{},"interfaces/OpClassifier.html":{},"components/OpHelpModal.html":{},"interfaces/OpInput.html":{},"classes/OpSequencer.html":{},"interfaces/OperationClassification.html":{},"interfaces/OperationProperties.html":{},"interfaces/PairedOp.html":{},"classes/PedalConfig.html":{},"interfaces/PedalEvent.html":{},"classes/Pipe.html":{},"interfaces/PlayerOp.html":{},"injectables/PlayerService.html":{},"classes/Seed.html":{},"interfaces/TopologyDef.html":{},"interfaces/TreeNode.html":{},"interfaces/TreeOperation.html":{},"index.html":{},"miscellaneous/typealiases.html":{}}}],["onfileupload",{"_index":3272,"title":{},"body":{"components/ParameterComponent.html":{}}}],["onimport",{"_index":3211,"title":{},"body":{"components/OpsComponent.html":{}}}],["onimport:any",{"_index":3236,"title":{},"body":{"components/OpsComponent.html":{}}}],["oninit",{"_index":648,"title":{},"body":{"components/ConnectionComponent.html":{},"interfaces/DesignActions.html":{},"components/DraftdetailComponent.html":{},"components/ImageComponent.html":{},"components/InletComponent.html":{},"directives/MarqueeComponent.html":{},"components/MixerViewComponent.html":{},"components/NoteComponent.html":{},"components/OpHelpModal.html":{},"components/OpSequencerComponent.html":{},"components/OpsComponent.html":{},"components/ParameterComponent.html":{},"components/PlayerComponent.html":{},"directives/SelectionComponent.html":{},"components/SnackbarComponent.html":{},"components/VirtualPedalsComponent.html":{},"components/WeavingStateComponent.html":{}}}],["oninletchange",{"_index":2397,"title":{},"body":{"components/InletComponent.html":{}}}],["oninputselected",{"_index":2398,"title":{},"body":{"components/InletComponent.html":{}}}],["onkeypress",{"_index":4268,"title":{},"body":{"components/VirtualPedalsComponent.html":{}}}],["onkeypress(event",{"_index":4276,"title":{},"body":{"components/VirtualPedalsComponent.html":{}}}],["online",{"_index":1162,"title":{},"body":{"classes/DBListener.html":{},"classes/DBListenerArray.html":{},"classes/DBNode.html":{},"classes/DBNodeArray.html":{},"classes/DBTwoWay.html":{},"classes/DBTwoWayArray.html":{},"classes/DBWriteBuffer.html":{},"classes/DBWriter.html":{},"classes/DBWriterArray.html":{},"interfaces/NodeMethods.html":{},"interfaces/NodeParams.html":{},"classes/OnlineStatus.html":{},"interfaces/Pedal.html":{},"classes/PedalStatus.html":{},"injectables/PedalsService.html":{},"components/WeavingStateComponent.html":{}}}],["onlinestatus",{"_index":1157,"title":{"classes/OnlineStatus.html":{}},"body":{"classes/DBListener.html":{},"classes/DBListenerArray.html":{},"classes/DBNode.html":{},"classes/DBNodeArray.html":{},"classes/DBTwoWay.html":{},"classes/DBTwoWayArray.html":{},"classes/DBWriteBuffer.html":{},"classes/DBWriter.html":{},"classes/DBWriterArray.html":{},"interfaces/NodeMethods.html":{},"interfaces/NodeParams.html":{},"classes/OnlineStatus.html":{},"interfaces/Pedal.html":{},"classes/PedalStatus.html":{},"injectables/PedalsService.html":{}}}],["onlinestatus(params('pi",{"_index":3395,"title":{},"body":{"interfaces/Pedal.html":{},"classes/PedalStatus.html":{},"injectables/PedalsService.html":{}}}],["onnamechange:any",{"_index":1366,"title":{},"body":{"interfaces/DesignActions.html":{}}}],["onnoclick",{"_index":1958,"title":{},"body":{"components/DraftdetailComponent.html":{}}}],["onnodeadded",{"_index":1235,"title":{},"body":{"classes/DBTwoWayArray.html":{}}}],["onnodeadded(key",{"_index":1150,"title":{},"body":{"classes/DBListener.html":{},"classes/DBListenerArray.html":{},"classes/DBNode.html":{},"classes/DBNodeArray.html":{},"classes/DBTwoWay.html":{},"classes/DBTwoWayArray.html":{},"classes/DBWriteBuffer.html":{},"classes/DBWriter.html":{},"classes/DBWriterArray.html":{},"interfaces/NodeMethods.html":{},"interfaces/NodeParams.html":{},"classes/OnlineStatus.html":{}}}],["onnoderemoved",{"_index":1154,"title":{},"body":{"classes/DBListener.html":{},"classes/DBListenerArray.html":{},"classes/DBNode.html":{},"classes/DBNodeArray.html":{},"classes/DBTwoWay.html":{},"classes/DBTwoWayArray.html":{},"classes/DBWriteBuffer.html":{},"classes/DBWriter.html":{},"classes/DBWriterArray.html":{},"interfaces/NodeMethods.html":{},"interfaces/NodeParams.html":{},"classes/OnlineStatus.html":{}}}],["onoperationadded",{"_index":3212,"title":{},"body":{"components/OpsComponent.html":{}}}],["onoperationadded:any",{"_index":3235,"title":{},"body":{"components/OpsComponent.html":{}}}],["onoperationparamchange",{"_index":3273,"title":{},"body":{"components/ParameterComponent.html":{}}}],["onparamchange",{"_index":3270,"title":{},"body":{"components/ParameterComponent.html":{}}}],["onparamchange(value",{"_index":3283,"title":{},"body":{"components/ParameterComponent.html":{}}}],["onpedal",{"_index":3702,"title":{},"body":{"injectables/PlayerService.html":{}}}],["onpedal(id",{"_index":1920,"title":{},"body":{"interfaces/DraftOperationClassification.html":{},"interfaces/LoomConfig.html":{},"classes/PedalConfig.html":{},"injectables/PlayerService.html":{}}}],["onrempedal",{"_index":2586,"title":{},"body":{"injectables/MappingsService.html":{}}}],["onsave",{"_index":1959,"title":{},"body":{"components/DraftdetailComponent.html":{}}}],["onscreen",{"_index":2811,"title":{},"body":{"components/MixerViewComponent.html":{}}}],["onsubdraftdrop",{"_index":1357,"title":{},"body":{"interfaces/DesignActions.html":{}}}],["onsubdraftmove",{"_index":1356,"title":{},"body":{"interfaces/DesignActions.html":{}}}],["onsubdraftstart",{"_index":1358,"title":{},"body":{"interfaces/DesignActions.html":{}}}],["onsubdraftviewchange:any",{"_index":1365,"title":{},"body":{"interfaces/DesignActions.html":{}}}],["onto",{"_index":505,"title":{},"body":{"interfaces/ChainIndex.html":{},"components/NoteComponent.html":{},"classes/OpSequencer.html":{},"injectables/SequencerService.html":{},"index.html":{},"miscellaneous/typealiases.html":{}}}],["onvalue",{"_index":966,"title":{},"body":{"classes/DBListener.html":{},"classes/DBListenerArray.html":{},"classes/DBNode.html":{},"classes/DBNodeArray.html":{},"classes/DBTwoWay.html":{},"classes/DBTwoWayArray.html":{},"classes/DBWriteBuffer.html":{},"classes/DBWriter.html":{},"classes/DBWriterArray.html":{},"interfaces/NodeMethods.html":{},"interfaces/NodeParams.html":{},"classes/OnlineStatus.html":{}}}],["onvalue(this.ref",{"_index":1018,"title":{},"body":{"classes/DBListener.html":{},"classes/DBListenerArray.html":{},"classes/DBNode.html":{},"classes/DBNodeArray.html":{},"classes/DBTwoWay.html":{},"classes/DBTwoWayArray.html":{},"classes/DBWriteBuffer.html":{},"classes/DBWriter.html":{},"classes/DBWriterArray.html":{},"interfaces/NodeMethods.html":{},"interfaces/NodeParams.html":{},"classes/OnlineStatus.html":{}}}],["onviewportmove",{"_index":2726,"title":{},"body":{"components/MixerViewComponent.html":{}}}],["onwindowscroll",{"_index":1960,"title":{},"body":{"components/DraftdetailComponent.html":{}}}],["onwindowscroll(data",{"_index":1982,"title":{},"body":{"components/DraftdetailComponent.html":{}}}],["onzoomchange",{"_index":2727,"title":{},"body":{"components/MixerViewComponent.html":{}}}],["op",{"_index":280,"title":{},"body":{"classes/AbstractOpFactory.html":{},"classes/BaseOp.html":{},"classes/Branch.html":{},"classes/Bus.html":{},"interfaces/ChainIndex.html":{},"interfaces/ChainOp.html":{},"components/ConnectionComponent.html":{},"interfaces/DraftOperationClassification.html":{},"components/DraftdetailComponent.html":{},"interfaces/DynamicOperation.html":{},"interfaces/IOTuple.html":{},"components/ImageComponent.html":{},"components/InletComponent.html":{},"interfaces/LoomConfig.html":{},"injectables/MappingsService.html":{},"classes/Merge.html":{},"components/MixerViewComponent.html":{},"components/NoteComponent.html":{},"interfaces/OpClassifier.html":{},"components/OpHelpModal.html":{},"interfaces/OpInput.html":{},"components/OpSequencerComponent.html":{},"interfaces/OperationClassification.html":{},"interfaces/OperationProperties.html":{},"components/OpsComponent.html":{},"interfaces/PairedOp.html":{},"components/ParameterComponent.html":{},"interfaces/Pedal.html":{},"classes/PedalConfig.html":{},"interfaces/PedalEvent.html":{},"classes/PedalStatus.html":{},"injectables/PedalsService.html":{},"classes/Pipe.html":{},"components/PlayerComponent.html":{},"modules/PlayerModule.html":{},"interfaces/PlayerOp.html":{},"injectables/PlayerService.html":{},"classes/Seed.html":{},"injectables/SequencerService.html":{},"components/SnackbarComponent.html":{},"interfaces/TopologyDef.html":{},"interfaces/TreeNode.html":{},"interfaces/TreeOperation.html":{},"components/VirtualPedalsComponent.html":{},"components/WeavingStateComponent.html":{},"miscellaneous/functions.html":{}}}],["op).dynamic_param_id",{"_index":2980,"title":{},"body":{"components/OpHelpModal.html":{}}}],["op).dynamic_param_type",{"_index":2442,"title":{},"body":{"components/InletComponent.html":{},"components/OpHelpModal.html":{}}}],["op.classifier.type",{"_index":566,"title":{},"body":{"interfaces/ChainOp.html":{},"interfaces/PairedOp.html":{},"interfaces/PedalEvent.html":{},"interfaces/PlayerOp.html":{}}}],["op.constrain(\"all_req",{"_index":287,"title":{},"body":{"classes/AbstractOpFactory.html":{},"classes/BaseOp.html":{},"classes/Branch.html":{},"classes/Bus.html":{},"classes/Merge.html":{},"interfaces/OpClassifier.html":{},"interfaces/OperationProperties.html":{},"classes/Pipe.html":{},"classes/Seed.html":{},"interfaces/TopologyDef.html":{}}}],["op.constrain(\"drafts_opt",{"_index":285,"title":{},"body":{"classes/AbstractOpFactory.html":{},"classes/BaseOp.html":{},"classes/Branch.html":{},"classes/Bus.html":{},"classes/Merge.html":{},"interfaces/OpClassifier.html":{},"interfaces/OperationProperties.html":{},"classes/Pipe.html":{},"classes/Seed.html":{},"interfaces/TopologyDef.html":{}}}],["op.constrain(\"no_drafts",{"_index":283,"title":{},"body":{"classes/AbstractOpFactory.html":{},"classes/BaseOp.html":{},"classes/Branch.html":{},"classes/Bus.html":{},"classes/Merge.html":{},"interfaces/OpClassifier.html":{},"interfaces/OperationProperties.html":{},"classes/Pipe.html":{},"classes/Seed.html":{},"interfaces/TopologyDef.html":{}}}],["op.constrain(\"no_params",{"_index":284,"title":{},"body":{"classes/AbstractOpFactory.html":{},"classes/BaseOp.html":{},"classes/Branch.html":{},"classes/Bus.html":{},"classes/Merge.html":{},"interfaces/OpClassifier.html":{},"interfaces/OperationProperties.html":{},"classes/Pipe.html":{},"classes/Seed.html":{},"interfaces/TopologyDef.html":{}}}],["op.constrain(\"params_opt",{"_index":286,"title":{},"body":{"classes/AbstractOpFactory.html":{},"classes/BaseOp.html":{},"classes/Branch.html":{},"classes/Bus.html":{},"classes/Merge.html":{},"interfaces/OpClassifier.html":{},"interfaces/OperationProperties.html":{},"classes/Pipe.html":{},"classes/Seed.html":{},"interfaces/TopologyDef.html":{}}}],["op.displayname",{"_index":3260,"title":{},"body":{"components/OpsComponent.html":{}}}],["op.dx",{"_index":578,"title":{},"body":{"interfaces/ChainOp.html":{},"interfaces/PairedOp.html":{},"interfaces/PedalEvent.html":{},"interfaces/PlayerOp.html":{}}}],["op.inlets.length",{"_index":588,"title":{},"body":{"interfaces/ChainOp.html":{},"components/InletComponent.html":{},"interfaces/PairedOp.html":{},"interfaces/PedalEvent.html":{},"interfaces/PlayerOp.html":{}}}],["op.inlets[this.inletid",{"_index":2447,"title":{},"body":{"components/InletComponent.html":{}}}],["op.name",{"_index":573,"title":{},"body":{"interfaces/ChainOp.html":{},"interfaces/DraftOperationClassification.html":{},"interfaces/LoomConfig.html":{},"injectables/MappingsService.html":{},"components/OpSequencerComponent.html":{},"interfaces/PairedOp.html":{},"classes/PedalConfig.html":{},"interfaces/PedalEvent.html":{},"interfaces/PlayerOp.html":{},"injectables/PlayerService.html":{}}}],["op.params",{"_index":2175,"title":{},"body":{"interfaces/DynamicOperation.html":{},"components/OpHelpModal.html":{},"interfaces/OpInput.html":{},"interfaces/OperationClassification.html":{},"interfaces/TreeOperation.html":{}}}],["op.params.length",{"_index":2176,"title":{},"body":{"interfaces/DynamicOperation.html":{},"interfaces/OpInput.html":{},"interfaces/OperationClassification.html":{},"interfaces/TreeOperation.html":{}}}],["op.params.map((el",{"_index":2177,"title":{},"body":{"interfaces/DynamicOperation.html":{},"interfaces/OpInput.html":{},"interfaces/OperationClassification.html":{},"interfaces/TreeOperation.html":{}}}],["op.perform([param_input",{"_index":598,"title":{},"body":{"interfaces/ChainOp.html":{},"interfaces/PairedOp.html":{},"interfaces/PedalEvent.html":{},"interfaces/PlayerOp.html":{}}}],["op.perform([param_input]).then((output",{"_index":589,"title":{},"body":{"interfaces/ChainOp.html":{},"interfaces/PairedOp.html":{},"interfaces/PedalEvent.html":{},"interfaces/PlayerOp.html":{}}}],["op.perform(init",{"_index":611,"title":{},"body":{"interfaces/ChainOp.html":{},"interfaces/PairedOp.html":{},"interfaces/PedalEvent.html":{},"interfaces/PlayerOp.html":{}}}],["op_array",{"_index":1765,"title":{},"body":{"interfaces/DraftOperationClassification.html":{},"interfaces/LoomConfig.html":{},"injectables/MappingsService.html":{},"classes/PedalConfig.html":{},"injectables/PlayerService.html":{}}}],["op_definitions",{"_index":2181,"title":{},"body":{"interfaces/DynamicOperation.html":{},"interfaces/OpInput.html":{},"interfaces/OperationClassification.html":{},"interfaces/TreeOperation.html":{}}}],["op_inputs",{"_index":2174,"title":{},"body":{"interfaces/DynamicOperation.html":{},"interfaces/OpInput.html":{},"interfaces/OperationClassification.html":{},"interfaces/TreeOperation.html":{}}}],["op_inputs.filter((el",{"_index":2202,"title":{},"body":{"interfaces/DynamicOperation.html":{},"interfaces/OpInput.html":{},"interfaces/OperationClassification.html":{},"interfaces/TreeOperation.html":{}}}],["op_inputs.map((el",{"_index":2226,"title":{},"body":{"interfaces/DynamicOperation.html":{},"interfaces/OpInput.html":{},"interfaces/OperationClassification.html":{},"interfaces/TreeOperation.html":{}}}],["op_inputs[0",{"_index":2194,"title":{},"body":{"interfaces/DynamicOperation.html":{},"interfaces/OpInput.html":{},"interfaces/OperationClassification.html":{},"interfaces/TreeOperation.html":{}}}],["op_inputs[0].params",{"_index":2210,"title":{},"body":{"interfaces/DynamicOperation.html":{},"interfaces/OpInput.html":{},"interfaces/OperationClassification.html":{},"interfaces/TreeOperation.html":{}}}],["op_inputs[0].params.length",{"_index":2211,"title":{},"body":{"interfaces/DynamicOperation.html":{},"interfaces/OpInput.html":{},"interfaces/OperationClassification.html":{},"interfaces/TreeOperation.html":{}}}],["op_mappings",{"_index":3053,"title":{},"body":{"classes/OpSequencer.html":{}}}],["op_name",{"_index":586,"title":{},"body":{"interfaces/ChainOp.html":{},"interfaces/DynamicOperation.html":{},"interfaces/OpInput.html":{},"interfaces/OperationClassification.html":{},"interfaces/PairedOp.html":{},"interfaces/PedalEvent.html":{},"interfaces/PlayerOp.html":{},"interfaces/TreeOperation.html":{},"miscellaneous/functions.html":{}}}],["op_sequencer",{"_index":3611,"title":{},"body":{"components/PlayerComponent.html":{}}}],["opchain",{"_index":2569,"title":{},"body":{"injectables/MappingsService.html":{}}}],["opchains",{"_index":3102,"title":{},"body":{"components/OpSequencerComponent.html":{}}}],["opclassifier",{"_index":176,"title":{"interfaces/OpClassifier.html":{}},"body":{"classes/AbstractOpFactory.html":{},"classes/BaseOp.html":{},"classes/Branch.html":{},"classes/Bus.html":{},"classes/Merge.html":{},"interfaces/OpClassifier.html":{},"interfaces/OperationProperties.html":{},"classes/Pipe.html":{},"classes/Seed.html":{},"interfaces/TopologyDef.html":{}}}],["opcomponentproxy",{"_index":1674,"title":{"interfaces/OpComponentProxy.html":{}},"body":{"interfaces/DraftNodeProxy.html":{},"interfaces/FileObj.html":{},"interfaces/FileSaver.html":{},"interfaces/Fileloader.html":{},"interfaces/LoadResponse.html":{},"interfaces/NodeComponentProxy.html":{},"interfaces/OpComponentProxy.html":{},"interfaces/SaveObj.html":{},"interfaces/StatusMessage.html":{},"interfaces/TreeNodeProxy.html":{}}}],["opconstraint",{"_index":157,"title":{},"body":{"classes/AbstractOpFactory.html":{},"classes/BaseOp.html":{},"classes/Branch.html":{},"classes/Bus.html":{},"classes/Merge.html":{},"interfaces/OpClassifier.html":{},"interfaces/OperationProperties.html":{},"classes/Pipe.html":{},"classes/Seed.html":{},"interfaces/TopologyDef.html":{},"miscellaneous/typealiases.html":{}}}],["opconstructorargkeys",{"_index":15,"title":{},"body":{"classes/AbstractOpFactory.html":{},"classes/BaseOp.html":{},"classes/Branch.html":{},"classes/Bus.html":{},"classes/Merge.html":{},"interfaces/OpClassifier.html":{},"interfaces/OperationProperties.html":{},"classes/Pipe.html":{},"classes/Seed.html":{},"interfaces/TopologyDef.html":{},"miscellaneous/typealiases.html":{}}}],["opconstructorargs",{"_index":233,"title":{},"body":{"classes/AbstractOpFactory.html":{},"classes/BaseOp.html":{},"classes/Branch.html":{},"classes/Bus.html":{},"classes/Merge.html":{},"interfaces/OpClassifier.html":{},"interfaces/OperationProperties.html":{},"classes/Pipe.html":{},"classes/Seed.html":{},"interfaces/TopologyDef.html":{},"miscellaneous/typealiases.html":{}}}],["opconstructorarray",{"_index":27,"title":{},"body":{"classes/AbstractOpFactory.html":{},"classes/BaseOp.html":{},"classes/Branch.html":{},"classes/Bus.html":{},"classes/Merge.html":{},"interfaces/OpClassifier.html":{},"interfaces/OperationProperties.html":{},"classes/Pipe.html":{},"classes/Seed.html":{},"interfaces/TopologyDef.html":{},"miscellaneous/typealiases.html":{}}}],["opearation",{"_index":195,"title":{},"body":{"classes/AbstractOpFactory.html":{},"classes/BaseOp.html":{},"classes/Branch.html":{},"classes/Bus.html":{},"interfaces/DynamicOperation.html":{},"classes/Merge.html":{},"interfaces/OpClassifier.html":{},"interfaces/OpInput.html":{},"interfaces/OperationClassification.html":{},"interfaces/OperationProperties.html":{},"classes/Pipe.html":{},"classes/Seed.html":{},"interfaces/TopologyDef.html":{},"interfaces/TreeOperation.html":{}}}],["open",{"_index":1565,"title":{},"body":{"interfaces/DesignActions.html":{},"components/PlayerComponent.html":{},"index.html":{}}}],["operaction",{"_index":1673,"title":{},"body":{"interfaces/DraftNodeProxy.html":{},"interfaces/FileObj.html":{},"interfaces/FileSaver.html":{},"interfaces/Fileloader.html":{},"interfaces/LoadResponse.html":{},"interfaces/NodeComponentProxy.html":{},"interfaces/OpComponentProxy.html":{},"interfaces/SaveObj.html":{},"interfaces/StatusMessage.html":{},"interfaces/TreeNodeProxy.html":{}}}],["operation",{"_index":63,"title":{},"body":{"classes/AbstractOpFactory.html":{},"classes/BaseOp.html":{},"classes/Branch.html":{},"classes/Bus.html":{},"interfaces/ChainIndex.html":{},"interfaces/ChainOp.html":{},"components/ConnectionComponent.html":{},"interfaces/DesignActions.html":{},"interfaces/DraftMap.html":{},"interfaces/DraftNodeProxy.html":{},"interfaces/DraftOperationClassification.html":{},"components/DraftdetailComponent.html":{},"interfaces/DynamicOperation.html":{},"interfaces/FileObj.html":{},"interfaces/FileSaver.html":{},"interfaces/Fileloader.html":{},"interfaces/IOTuple.html":{},"interfaces/Interlacement.html":{},"interfaces/InterlacementVal.html":{},"interfaces/LoadResponse.html":{},"interfaces/LoomConfig.html":{},"injectables/MappingsService.html":{},"classes/Merge.html":{},"interfaces/NodeComponentProxy.html":{},"interfaces/OpClassifier.html":{},"interfaces/OpComponentProxy.html":{},"components/OpHelpModal.html":{},"interfaces/OpInput.html":{},"classes/OpSequencer.html":{},"components/OpSequencerComponent.html":{},"interfaces/OperationClassification.html":{},"interfaces/OperationParam.html":{},"interfaces/OperationProperties.html":{},"interfaces/PairedOp.html":{},"classes/Params.html":{},"interfaces/Pedal.html":{},"classes/PedalConfig.html":{},"interfaces/PedalEvent.html":{},"classes/PedalStatus.html":{},"injectables/PedalsService.html":{},"classes/Pipe.html":{},"interfaces/PlayerOp.html":{},"injectables/PlayerService.html":{},"interfaces/SaveObj.html":{},"classes/Seed.html":{},"injectables/SequencerService.html":{},"interfaces/StatusMessage.html":{},"interfaces/TopologyDef.html":{},"interfaces/TreeNode.html":{},"interfaces/TreeNodeProxy.html":{},"interfaces/TreeOperation.html":{},"index.html":{},"miscellaneous/typealiases.html":{}}}],["operation's",{"_index":76,"title":{},"body":{"classes/AbstractOpFactory.html":{},"classes/BaseOp.html":{},"classes/Branch.html":{},"classes/Bus.html":{},"classes/Merge.html":{},"interfaces/OpClassifier.html":{},"interfaces/OperationProperties.html":{},"classes/Pipe.html":{},"classes/Seed.html":{},"interfaces/TopologyDef.html":{}}}],["operation'},{'name",{"_index":857,"title":{},"body":{"components/ConnectionComponent.html":{},"components/DraftdetailComponent.html":{},"components/ImageComponent.html":{},"components/InletComponent.html":{},"components/MixerViewComponent.html":{},"components/NoteComponent.html":{},"components/OpHelpModal.html":{},"components/OpSequencerComponent.html":{},"components/OpsComponent.html":{},"components/ParameterComponent.html":{},"components/PlayerComponent.html":{},"components/SnackbarComponent.html":{},"components/VirtualPedalsComponent.html":{},"components/WeavingStateComponent.html":{}}}],["operation/formatting",{"_index":2141,"title":{},"body":{"interfaces/DynamicOperation.html":{},"interfaces/OpInput.html":{},"interfaces/OperationClassification.html":{},"interfaces/TreeOperation.html":{}}}],["operation/inlets",{"_index":2137,"title":{},"body":{"interfaces/DynamicOperation.html":{},"interfaces/OpInput.html":{},"interfaces/OperationClassification.html":{},"interfaces/TreeOperation.html":{}}}],["operation/operation.component",{"_index":731,"title":{},"body":{"components/ConnectionComponent.html":{},"interfaces/DesignActions.html":{}}}],["operation/params",{"_index":2136,"title":{},"body":{"interfaces/DynamicOperation.html":{},"interfaces/OpInput.html":{},"interfaces/OperationClassification.html":{},"interfaces/TreeOperation.html":{}}}],["operation/topology",{"_index":2138,"title":{},"body":{"interfaces/DynamicOperation.html":{},"interfaces/OpInput.html":{},"interfaces/OperationClassification.html":{},"interfaces/TreeOperation.html":{}}}],["operationclassification",{"_index":2248,"title":{"interfaces/OperationClassification.html":{}},"body":{"interfaces/DynamicOperation.html":{},"interfaces/OpInput.html":{},"interfaces/OperationClassification.html":{},"interfaces/TreeOperation.html":{}}}],["operationcomponent",{"_index":706,"title":{},"body":{"components/ConnectionComponent.html":{},"interfaces/DesignActions.html":{},"components/DraftdetailComponent.html":{},"interfaces/IOTuple.html":{},"components/ImageComponent.html":{},"components/InletComponent.html":{},"modules/MixerModule.html":{},"components/MixerViewComponent.html":{},"components/NoteComponent.html":{},"components/OpHelpModal.html":{},"components/OpSequencerComponent.html":{},"components/OpsComponent.html":{},"components/ParameterComponent.html":{},"components/PlayerComponent.html":{},"components/SnackbarComponent.html":{},"interfaces/TreeNode.html":{},"components/VirtualPedalsComponent.html":{},"components/WeavingStateComponent.html":{},"overview.html":{}}}],["operationdescriptors",{"_index":186,"title":{},"body":{"classes/AbstractOpFactory.html":{},"classes/BaseOp.html":{},"classes/Branch.html":{},"classes/Bus.html":{},"classes/Merge.html":{},"interfaces/OpClassifier.html":{},"interfaces/OperationProperties.html":{},"classes/Pipe.html":{},"classes/Seed.html":{},"interfaces/TopologyDef.html":{},"miscellaneous/typealiases.html":{}}}],["operationinlet",{"_index":58,"title":{},"body":{"classes/AbstractOpFactory.html":{},"classes/BaseOp.html":{},"classes/Branch.html":{},"classes/Bus.html":{},"interfaces/DynamicOperation.html":{},"components/InletComponent.html":{},"classes/Merge.html":{},"interfaces/OpClassifier.html":{},"interfaces/OpInput.html":{},"interfaces/OperationClassification.html":{},"interfaces/OperationProperties.html":{},"classes/Pipe.html":{},"classes/Seed.html":{},"interfaces/TopologyDef.html":{},"interfaces/TreeOperation.html":{},"miscellaneous/typealiases.html":{}}}],["operationinlet,opnode",{"_index":2429,"title":{},"body":{"components/InletComponent.html":{}}}],["operationparam",{"_index":54,"title":{"interfaces/OperationParam.html":{}},"body":{"classes/AbstractOpFactory.html":{},"classes/BaseOp.html":{},"classes/Branch.html":{},"classes/Bus.html":{},"interfaces/DynamicOperation.html":{},"classes/Merge.html":{},"interfaces/OpClassifier.html":{},"interfaces/OpInput.html":{},"interfaces/OperationClassification.html":{},"interfaces/OperationParam.html":{},"interfaces/OperationProperties.html":{},"classes/Params.html":{},"classes/Pipe.html":{},"classes/Seed.html":{},"interfaces/TopologyDef.html":{},"interfaces/TreeOperation.html":{}}}],["operationparam[\"type",{"_index":3152,"title":{},"body":{"interfaces/OperationParam.html":{},"classes/Params.html":{}}}],["operationparam[\"value",{"_index":3153,"title":{},"body":{"interfaces/OperationParam.html":{},"classes/Params.html":{}}}],["operationparameters",{"_index":3188,"title":{},"body":{"interfaces/OperationParam.html":{},"classes/Params.html":{}}}],["operationparams",{"_index":3183,"title":{},"body":{"interfaces/OperationParam.html":{},"classes/Params.html":{},"miscellaneous/functions.html":{}}}],["operationproperties",{"_index":208,"title":{"interfaces/OperationProperties.html":{}},"body":{"classes/AbstractOpFactory.html":{},"classes/BaseOp.html":{},"classes/Branch.html":{},"classes/Bus.html":{},"classes/Merge.html":{},"interfaces/OpClassifier.html":{},"interfaces/OperationProperties.html":{},"classes/Pipe.html":{},"classes/Seed.html":{},"interfaces/TopologyDef.html":{}}}],["operations",{"_index":96,"title":{},"body":{"classes/AbstractOpFactory.html":{},"classes/BaseOp.html":{},"classes/Branch.html":{},"classes/Bus.html":{},"interfaces/ChainOp.html":{},"interfaces/DraftOperationClassification.html":{},"interfaces/DynamicOperation.html":{},"interfaces/IOTuple.html":{},"interfaces/LoomConfig.html":{},"classes/Merge.html":{},"interfaces/OpClassifier.html":{},"interfaces/OpInput.html":{},"classes/OpSequencer.html":{},"components/OpSequencerComponent.html":{},"interfaces/OperationClassification.html":{},"interfaces/OperationParam.html":{},"interfaces/OperationProperties.html":{},"components/OpsComponent.html":{},"interfaces/PairedOp.html":{},"classes/PedalConfig.html":{},"interfaces/PedalEvent.html":{},"classes/Pipe.html":{},"interfaces/PlayerOp.html":{},"injectables/PlayerService.html":{},"classes/Seed.html":{},"interfaces/TopologyDef.html":{},"interfaces/TreeNode.html":{},"interfaces/TreeOperation.html":{},"index.html":{}}}],["operationservice",{"_index":1319,"title":{},"body":{"interfaces/DesignActions.html":{},"interfaces/DraftOperationClassification.html":{},"components/DraftdetailComponent.html":{},"components/InletComponent.html":{},"interfaces/LoomConfig.html":{},"components/OpHelpModal.html":{},"components/OpsComponent.html":{},"classes/PedalConfig.html":{},"injectables/PlayerService.html":{}}}],["opfactories",{"_index":304,"title":{},"body":{"classes/AbstractOpFactory.html":{},"classes/BaseOp.html":{},"classes/Branch.html":{},"classes/Bus.html":{},"classes/Merge.html":{},"interfaces/OpClassifier.html":{},"interfaces/OperationProperties.html":{},"classes/Pipe.html":{},"classes/Seed.html":{},"interfaces/TopologyDef.html":{}}}],["ophelp",{"_index":2955,"title":{},"body":{"components/OpHelpModal.html":{}}}],["ophelp'},{'name",{"_index":859,"title":{},"body":{"components/ConnectionComponent.html":{},"components/DraftdetailComponent.html":{},"components/ImageComponent.html":{},"components/InletComponent.html":{},"components/MixerViewComponent.html":{},"components/NoteComponent.html":{},"components/OpHelpModal.html":{},"components/OpSequencerComponent.html":{},"components/OpsComponent.html":{},"components/ParameterComponent.html":{},"components/PlayerComponent.html":{},"components/SnackbarComponent.html":{},"components/VirtualPedalsComponent.html":{},"components/WeavingStateComponent.html":{}}}],["ophelp.modal.html",{"_index":2957,"title":{},"body":{"components/OpHelpModal.html":{}}}],["ophelp.modal.scss",{"_index":2956,"title":{},"body":{"components/OpHelpModal.html":{}}}],["ophelpmodal",{"_index":858,"title":{"components/OpHelpModal.html":{}},"body":{"components/ConnectionComponent.html":{},"components/DraftdetailComponent.html":{},"components/ImageComponent.html":{},"components/InletComponent.html":{},"modules/MixerModule.html":{},"components/MixerViewComponent.html":{},"components/NoteComponent.html":{},"components/OpHelpModal.html":{},"components/OpSequencerComponent.html":{},"components/OpsComponent.html":{},"components/ParameterComponent.html":{},"components/PlayerComponent.html":{},"components/SnackbarComponent.html":{},"components/VirtualPedalsComponent.html":{},"components/WeavingStateComponent.html":{},"overview.html":{}}}],["opid",{"_index":2396,"title":{},"body":{"components/InletComponent.html":{},"components/ParameterComponent.html":{}}}],["opinlet",{"_index":59,"title":{},"body":{"classes/AbstractOpFactory.html":{},"classes/BaseOp.html":{},"classes/Branch.html":{},"classes/Bus.html":{},"classes/Merge.html":{},"interfaces/OpClassifier.html":{},"interfaces/OperationProperties.html":{},"classes/Pipe.html":{},"classes/Seed.html":{},"interfaces/TopologyDef.html":{}}}],["opinput",{"_index":525,"title":{"interfaces/OpInput.html":{}},"body":{"interfaces/ChainOp.html":{},"interfaces/DraftOperationClassification.html":{},"interfaces/DynamicOperation.html":{},"interfaces/LoomConfig.html":{},"interfaces/OpInput.html":{},"interfaces/OperationClassification.html":{},"interfaces/PairedOp.html":{},"classes/PedalConfig.html":{},"interfaces/PedalEvent.html":{},"interfaces/PlayerOp.html":{},"injectables/PlayerService.html":{},"interfaces/TreeOperation.html":{}}}],["opinputs",{"_index":2185,"title":{},"body":{"interfaces/DynamicOperation.html":{},"interfaces/OpInput.html":{},"interfaces/OperationClassification.html":{},"interfaces/TreeOperation.html":{}}}],["opismapped",{"_index":2521,"title":{},"body":{"injectables/MappingsService.html":{},"classes/PedalConfig.html":{}}}],["opismapped(opname",{"_index":1775,"title":{},"body":{"interfaces/DraftOperationClassification.html":{},"interfaces/LoomConfig.html":{},"injectables/MappingsService.html":{},"classes/PedalConfig.html":{},"injectables/PlayerService.html":{}}}],["opname",{"_index":1746,"title":{},"body":{"interfaces/DraftOperationClassification.html":{},"interfaces/LoomConfig.html":{},"injectables/MappingsService.html":{},"classes/PedalConfig.html":{},"injectables/PlayerService.html":{}}}],["opnames",{"_index":3208,"title":{},"body":{"components/OpsComponent.html":{}}}],["opnames:array",{"_index":3237,"title":{},"body":{"components/OpsComponent.html":{}}}],["opnode",{"_index":2278,"title":{},"body":{"interfaces/IOTuple.html":{},"components/InletComponent.html":{},"components/ParameterComponent.html":{},"interfaces/TreeNode.html":{},"miscellaneous/typealiases.html":{}}}],["opnode.inlets[inletid",{"_index":2470,"title":{},"body":{"components/InletComponent.html":{}}}],["opnode.inlets[this.inletid",{"_index":2467,"title":{},"body":{"components/InletComponent.html":{}}}],["opnode.params[this.paramid",{"_index":3320,"title":{},"body":{"components/ParameterComponent.html":{}}}],["oppairing",{"_index":2568,"title":{},"body":{"injectables/MappingsService.html":{}}}],["opparam",{"_index":55,"title":{},"body":{"classes/AbstractOpFactory.html":{},"classes/BaseOp.html":{},"classes/Branch.html":{},"classes/Bus.html":{},"classes/Merge.html":{},"interfaces/OpClassifier.html":{},"interfaces/OperationProperties.html":{},"classes/Pipe.html":{},"classes/Seed.html":{},"interfaces/TopologyDef.html":{}}}],["opperform",{"_index":110,"title":{},"body":{"classes/AbstractOpFactory.html":{},"classes/BaseOp.html":{},"classes/Branch.html":{},"classes/Bus.html":{},"classes/Merge.html":{},"interfaces/OpClassifier.html":{},"interfaces/OperationProperties.html":{},"classes/Pipe.html":{},"classes/Seed.html":{},"interfaces/TopologyDef.html":{},"miscellaneous/typealiases.html":{}}}],["oproulette",{"_index":1715,"title":{},"body":{"interfaces/DraftOperationClassification.html":{},"interfaces/LoomConfig.html":{},"classes/PedalConfig.html":{},"injectables/PlayerService.html":{}}}],["ops",{"_index":441,"title":{},"body":{"interfaces/ChainIndex.html":{},"interfaces/ChainOp.html":{},"interfaces/DraftNodeProxy.html":{},"interfaces/DraftOperationClassification.html":{},"components/DraftdetailComponent.html":{},"interfaces/DynamicOperation.html":{},"interfaces/FileObj.html":{},"interfaces/FileSaver.html":{},"interfaces/Fileloader.html":{},"interfaces/IOTuple.html":{},"components/InletComponent.html":{},"interfaces/LoadResponse.html":{},"interfaces/LoomConfig.html":{},"injectables/MappingsService.html":{},"interfaces/NodeComponentProxy.html":{},"interfaces/OpComponentProxy.html":{},"components/OpHelpModal.html":{},"interfaces/OpInput.html":{},"classes/OpSequencer.html":{},"interfaces/OperationClassification.html":{},"components/OpsComponent.html":{},"interfaces/PairedOp.html":{},"classes/PedalConfig.html":{},"interfaces/PedalEvent.html":{},"interfaces/PlayerOp.html":{},"injectables/PlayerService.html":{},"interfaces/SaveObj.html":{},"injectables/SequencerService.html":{},"interfaces/StatusMessage.html":{},"interfaces/TreeNode.html":{},"interfaces/TreeNodeProxy.html":{},"interfaces/TreeOperation.html":{},"miscellaneous/functions.html":{}}}],["ops'},{'name",{"_index":861,"title":{},"body":{"components/ConnectionComponent.html":{},"components/DraftdetailComponent.html":{},"components/ImageComponent.html":{},"components/InletComponent.html":{},"components/MixerViewComponent.html":{},"components/NoteComponent.html":{},"components/OpHelpModal.html":{},"components/OpSequencerComponent.html":{},"components/OpsComponent.html":{},"components/ParameterComponent.html":{},"components/PlayerComponent.html":{},"components/SnackbarComponent.html":{},"components/VirtualPedalsComponent.html":{},"components/WeavingStateComponent.html":{}}}],["ops.component.html",{"_index":3204,"title":{},"body":{"components/OpsComponent.html":{}}}],["ops.component.scss",{"_index":3203,"title":{},"body":{"components/OpsComponent.html":{}}}],["ops.length",{"_index":1894,"title":{},"body":{"interfaces/DraftOperationClassification.html":{},"interfaces/LoomConfig.html":{},"classes/PedalConfig.html":{},"injectables/PlayerService.html":{}}}],["ops.map((name",{"_index":1766,"title":{},"body":{"interfaces/DraftOperationClassification.html":{},"interfaces/LoomConfig.html":{},"injectables/MappingsService.html":{},"classes/PedalConfig.html":{},"injectables/PlayerService.html":{}}}],["ops:operationservice",{"_index":2972,"title":{},"body":{"components/OpHelpModal.html":{}}}],["opscomponent",{"_index":860,"title":{"components/OpsComponent.html":{}},"body":{"components/ConnectionComponent.html":{},"components/DraftdetailComponent.html":{},"components/ImageComponent.html":{},"components/InletComponent.html":{},"modules/MixerModule.html":{},"components/MixerViewComponent.html":{},"components/NoteComponent.html":{},"components/OpHelpModal.html":{},"components/OpSequencerComponent.html":{},"components/OpsComponent.html":{},"components/ParameterComponent.html":{},"components/PlayerComponent.html":{},"components/SnackbarComponent.html":{},"components/VirtualPedalsComponent.html":{},"components/WeavingStateComponent.html":{},"overview.html":{}}}],["opsequencer",{"_index":431,"title":{"classes/OpSequencer.html":{}},"body":{"interfaces/ChainIndex.html":{},"interfaces/ChainOp.html":{},"interfaces/DraftOperationClassification.html":{},"interfaces/LoomConfig.html":{},"injectables/MappingsService.html":{},"classes/OpSequencer.html":{},"interfaces/PairedOp.html":{},"classes/PedalConfig.html":{},"interfaces/PedalEvent.html":{},"interfaces/PlayerOp.html":{},"injectables/PlayerService.html":{},"injectables/SequencerService.html":{}}}],["opsequencer(pedals",{"_index":3076,"title":{},"body":{"classes/OpSequencer.html":{}}}],["opsequencer:104",{"_index":3919,"title":{},"body":{"injectables/SequencerService.html":{}}}],["opsequencer:12",{"_index":3926,"title":{},"body":{"injectables/SequencerService.html":{}}}],["opsequencer:13",{"_index":3929,"title":{},"body":{"injectables/SequencerService.html":{}}}],["opsequencer:14",{"_index":3930,"title":{},"body":{"injectables/SequencerService.html":{}}}],["opsequencer:15",{"_index":3928,"title":{},"body":{"injectables/SequencerService.html":{}}}],["opsequencer:16",{"_index":3925,"title":{},"body":{"injectables/SequencerService.html":{}}}],["opsequencer:17",{"_index":3927,"title":{},"body":{"injectables/SequencerService.html":{}}}],["opsequencer:27",{"_index":3924,"title":{},"body":{"injectables/SequencerService.html":{}}}],["opsequencer:56",{"_index":3917,"title":{},"body":{"injectables/SequencerService.html":{}}}],["opsequencer:69",{"_index":3916,"title":{},"body":{"injectables/SequencerService.html":{}}}],["opsequencer:74",{"_index":3918,"title":{},"body":{"injectables/SequencerService.html":{}}}],["opsequencer:81",{"_index":3920,"title":{},"body":{"injectables/SequencerService.html":{}}}],["opsequencer:88",{"_index":3914,"title":{},"body":{"injectables/SequencerService.html":{}}}],["opsequencer:94",{"_index":3921,"title":{},"body":{"injectables/SequencerService.html":{}}}],["opsequencer:99",{"_index":3915,"title":{},"body":{"injectables/SequencerService.html":{}}}],["opsequencercomponent",{"_index":862,"title":{"components/OpSequencerComponent.html":{}},"body":{"components/ConnectionComponent.html":{},"components/DraftdetailComponent.html":{},"components/ImageComponent.html":{},"components/InletComponent.html":{},"components/MixerViewComponent.html":{},"components/NoteComponent.html":{},"components/OpHelpModal.html":{},"components/OpSequencerComponent.html":{},"components/OpsComponent.html":{},"components/ParameterComponent.html":{},"components/PlayerComponent.html":{},"modules/PlayerModule.html":{},"components/SnackbarComponent.html":{},"components/VirtualPedalsComponent.html":{},"components/WeavingStateComponent.html":{},"overview.html":{}}}],["opt",{"_index":133,"title":{},"body":{"classes/AbstractOpFactory.html":{},"classes/BaseOp.html":{},"classes/Branch.html":{},"classes/Bus.html":{},"classes/Merge.html":{},"interfaces/OpClassifier.html":{},"interfaces/OperationProperties.html":{},"classes/Pipe.html":{},"classes/Seed.html":{},"interfaces/TopologyDef.html":{}}}],["opt.name",{"_index":3329,"title":{},"body":{"components/ParameterComponent.html":{}}}],["option",{"_index":3259,"title":{},"body":{"components/OpsComponent.html":{},"components/WeavingStateComponent.html":{}}}],["option.tolowercase().includes(filtervalue",{"_index":3252,"title":{},"body":{"components/OpsComponent.html":{}}}],["optional",{"_index":22,"title":{},"body":{"classes/AbstractOpFactory.html":{},"classes/BaseOp.html":{},"classes/Branch.html":{},"classes/Bus.html":{},"classes/Cell.html":{},"components/ConnectionComponent.html":{},"classes/DBListener.html":{},"classes/DBListenerArray.html":{},"classes/DBNode.html":{},"classes/DBNodeArray.html":{},"classes/DBTwoWay.html":{},"classes/DBTwoWayArray.html":{},"classes/DBWriteBuffer.html":{},"classes/DBWriter.html":{},"classes/DBWriterArray.html":{},"components/DraftdetailComponent.html":{},"interfaces/DynamicOperation.html":{},"injectables/InkService.html":{},"components/InletComponent.html":{},"injectables/MappingsService.html":{},"directives/MarqueeComponent.html":{},"classes/Merge.html":{},"components/MixerViewComponent.html":{},"interfaces/NodeParams.html":{},"components/NoteComponent.html":{},"classes/OnlineStatus.html":{},"interfaces/OpClassifier.html":{},"components/OpHelpModal.html":{},"interfaces/OpInput.html":{},"classes/OpSequencer.html":{},"components/OpSequencerComponent.html":{},"interfaces/OperationClassification.html":{},"interfaces/OperationProperties.html":{},"components/OpsComponent.html":{},"components/ParameterComponent.html":{},"classes/Params.html":{},"interfaces/Pedal.html":{},"classes/PedalConfig.html":{},"interfaces/PedalEvent.html":{},"classes/PedalStatus.html":{},"injectables/PedalsService.html":{},"classes/Pipe.html":{},"components/PlayerComponent.html":{},"interfaces/PlayerOp.html":{},"injectables/PlayerService.html":{},"classes/Render.html":{},"classes/Seed.html":{},"classes/Selection.html":{},"directives/SelectionComponent.html":{},"injectables/SequencerService.html":{},"classes/Shape.html":{},"classes/Shape-1.html":{},"classes/Shuttle.html":{},"components/SnackbarComponent.html":{},"classes/System.html":{},"interfaces/TopologyDef.html":{},"interfaces/TreeOperation.html":{},"injectables/ViewportService.html":{},"components/VirtualPedalsComponent.html":{},"components/WeavingStateComponent.html":{},"miscellaneous/functions.html":{}}}],["optionally",{"_index":3025,"title":{},"body":{"classes/OpSequencer.html":{}}}],["options",{"_index":161,"title":{},"body":{"classes/AbstractOpFactory.html":{},"classes/BaseOp.html":{},"classes/Branch.html":{},"classes/Bus.html":{},"components/DraftdetailComponent.html":{},"injectables/MappingsService.html":{},"classes/Merge.html":{},"interfaces/OpClassifier.html":{},"interfaces/OperationProperties.html":{},"classes/Pipe.html":{},"classes/Seed.html":{},"interfaces/TopologyDef.html":{},"index.html":{},"miscellaneous/typealiases.html":{}}}],["optopology",{"_index":125,"title":{},"body":{"classes/AbstractOpFactory.html":{},"classes/BaseOp.html":{},"classes/Branch.html":{},"classes/Bus.html":{},"classes/Merge.html":{},"interfaces/OpClassifier.html":{},"interfaces/OperationProperties.html":{},"classes/Pipe.html":{},"classes/Seed.html":{},"interfaces/TopologyDef.html":{},"miscellaneous/typealiases.html":{}}}],["order",{"_index":614,"title":{},"body":{"interfaces/ChainOp.html":{},"interfaces/DraftOperationClassification.html":{},"interfaces/LoomConfig.html":{},"interfaces/PairedOp.html":{},"classes/PedalConfig.html":{},"interfaces/PedalEvent.html":{},"interfaces/PlayerOp.html":{},"injectables/PlayerService.html":{}}}],["organization",{"_index":4515,"title":{},"body":{"index.html":{}}}],["organized",{"_index":4519,"title":{},"body":{"index.html":{},"miscellaneous/typealiases.html":{}}}],["orientation_x",{"_index":660,"title":{},"body":{"components/ConnectionComponent.html":{}}}],["orientation_y",{"_index":661,"title":{},"body":{"components/ConnectionComponent.html":{}}}],["oriented",{"_index":4556,"title":{},"body":{"index.html":{}}}],["origin",{"_index":2848,"title":{},"body":{"components/MixerViewComponent.html":{}}}],["oss",{"_index":1800,"title":{},"body":{"interfaces/DraftOperationClassification.html":{},"interfaces/LoomConfig.html":{},"classes/PedalConfig.html":{},"injectables/PlayerService.html":{}}}],["ot",{"_index":2258,"title":{},"body":{"interfaces/IOTuple.html":{},"interfaces/TreeNode.html":{}}}],["out",{"_index":1512,"title":{},"body":{"interfaces/DesignActions.html":{},"modules/MixerModule.html":{},"modules/PlayerModule.html":{},"classes/Shape.html":{},"overview.html":{}}}],["out\").offsettop",{"_index":790,"title":{},"body":{"components/ConnectionComponent.html":{}}}],["outlets",{"_index":2260,"title":{},"body":{"interfaces/IOTuple.html":{},"interfaces/TreeNode.html":{}}}],["output",{"_index":88,"title":{},"body":{"classes/AbstractOpFactory.html":{},"classes/BaseOp.html":{},"classes/Branch.html":{},"classes/Bus.html":{},"interfaces/DesignActions.html":{},"interfaces/DraftOperationClassification.html":{},"interfaces/IOTuple.html":{},"components/InletComponent.html":{},"interfaces/LoomConfig.html":{},"classes/Merge.html":{},"components/MixerViewComponent.html":{},"components/NoteComponent.html":{},"interfaces/OpClassifier.html":{},"interfaces/OperationProperties.html":{},"components/OpsComponent.html":{},"components/ParameterComponent.html":{},"classes/PedalConfig.html":{},"classes/Pipe.html":{},"components/PlayerComponent.html":{},"injectables/PlayerService.html":{},"classes/Seed.html":{},"interfaces/TopologyDef.html":{},"interfaces/TreeNode.html":{},"components/WeavingStateComponent.html":{},"miscellaneous/functions.html":{}}}],["output('player",{"_index":3638,"title":{},"body":{"components/PlayerComponent.html":{}}}],["output[0",{"_index":590,"title":{},"body":{"interfaces/ChainOp.html":{},"interfaces/PairedOp.html":{},"interfaces/PedalEvent.html":{},"interfaces/PlayerOp.html":{}}}],["outputs",{"_index":67,"title":{},"body":{"classes/AbstractOpFactory.html":{},"classes/BaseOp.html":{},"classes/Branch.html":{},"classes/Bus.html":{},"interfaces/ChainOp.html":{},"interfaces/DraftNodeProxy.html":{},"interfaces/FileObj.html":{},"interfaces/FileSaver.html":{},"interfaces/Fileloader.html":{},"interfaces/IOTuple.html":{},"components/InletComponent.html":{},"interfaces/LoadResponse.html":{},"classes/Merge.html":{},"components/MixerViewComponent.html":{},"interfaces/NodeComponentProxy.html":{},"components/NoteComponent.html":{},"interfaces/OpClassifier.html":{},"interfaces/OpComponentProxy.html":{},"interfaces/OperationProperties.html":{},"components/OpsComponent.html":{},"interfaces/PairedOp.html":{},"components/ParameterComponent.html":{},"interfaces/PedalEvent.html":{},"classes/Pipe.html":{},"components/PlayerComponent.html":{},"interfaces/PlayerOp.html":{},"interfaces/SaveObj.html":{},"classes/Seed.html":{},"interfaces/StatusMessage.html":{},"interfaces/TopologyDef.html":{},"interfaces/TreeNode.html":{},"interfaces/TreeNodeProxy.html":{},"index.html":{},"miscellaneous/typealiases.html":{}}}],["outside",{"_index":1976,"title":{},"body":{"components/DraftdetailComponent.html":{}}}],["over",{"_index":4565,"title":{},"body":{"index.html":{}}}],["over_under",{"_index":934,"title":{},"body":{"interfaces/Crossing.html":{},"interfaces/Vertex.html":{},"interfaces/YarnPath.html":{}}}],["over_unset",{"_index":933,"title":{},"body":{"interfaces/Crossing.html":{},"interfaces/Vertex.html":{},"interfaces/YarnPath.html":{}}}],["overflow",{"_index":2105,"title":{},"body":{"components/DraftdetailComponent.html":{},"components/ParameterComponent.html":{},"components/WeavingStateComponent.html":{}}}],["overlay",{"_index":2048,"title":{},"body":{"components/DraftdetailComponent.html":{},"components/MixerViewComponent.html":{}}}],["overlay.offsetleft",{"_index":2819,"title":{},"body":{"components/MixerViewComponent.html":{}}}],["overlay.offsettop",{"_index":2820,"title":{},"body":{"components/MixerViewComponent.html":{}}}],["overlaying",{"_index":2332,"title":{},"body":{"interfaces/Ink.html":{},"injectables/InkService.html":{}}}],["overshot",{"_index":4127,"title":{},"body":{"classes/System.html":{}}}],["overview",{"_index":4622,"title":{"overview.html":{}},"body":{"overview.html":{}}}],["owncontainer",{"_index":3612,"title":{},"body":{"components/PlayerComponent.html":{}}}],["ownelement",{"_index":4298,"title":{},"body":{"components/WeavingStateComponent.html":{}}}],["p",{"_index":577,"title":{},"body":{"interfaces/ChainOp.html":{},"interfaces/DesignActions.html":{},"interfaces/DraftOperationClassification.html":{},"interfaces/LoomConfig.html":{},"injectables/MappingsService.html":{},"components/OpSequencerComponent.html":{},"components/OpsComponent.html":{},"interfaces/PairedOp.html":{},"classes/PedalConfig.html":{},"interfaces/PedalEvent.html":{},"injectables/PedalsService.html":{},"interfaces/PlayerOp.html":{},"injectables/PlayerService.html":{},"injectables/ViewportService.html":{},"miscellaneous/functions.html":{}}}],["p.id",{"_index":1729,"title":{},"body":{"interfaces/DraftOperationClassification.html":{},"interfaces/LoomConfig.html":{},"injectables/MappingsService.html":{},"classes/PedalConfig.html":{},"injectables/PlayerService.html":{},"components/VirtualPedalsComponent.html":{},"components/WeavingStateComponent.html":{}}}],["p.x",{"_index":4257,"title":{},"body":{"injectables/ViewportService.html":{}}}],["p1",{"_index":797,"title":{},"body":{"components/ConnectionComponent.html":{}}}],["p2",{"_index":798,"title":{},"body":{"components/ConnectionComponent.html":{}}}],["p_conf",{"_index":2613,"title":{},"body":{"injectables/MappingsService.html":{}}}],["p_op",{"_index":1816,"title":{},"body":{"interfaces/DraftOperationClassification.html":{},"interfaces/LoomConfig.html":{},"classes/PedalConfig.html":{},"injectables/PlayerService.html":{}}}],["p_pedal_array",{"_index":3487,"title":{},"body":{"interfaces/Pedal.html":{},"classes/PedalStatus.html":{},"injectables/PedalsService.html":{}}}],["p_pedals",{"_index":3428,"title":{},"body":{"interfaces/Pedal.html":{},"classes/PedalStatus.html":{},"injectables/PedalsService.html":{}}}],["p_prog",{"_index":3012,"title":{},"body":{"classes/OpSequencer.html":{},"injectables/SequencerService.html":{}}}],["p_select_a",{"_index":3013,"title":{},"body":{"classes/OpSequencer.html":{},"injectables/SequencerService.html":{}}}],["p_select_b",{"_index":3014,"title":{},"body":{"classes/OpSequencer.html":{},"injectables/SequencerService.html":{}}}],["pack",{"_index":2180,"title":{},"body":{"interfaces/DynamicOperation.html":{},"interfaces/OpInput.html":{},"interfaces/OperationClassification.html":{},"interfaces/TreeOperation.html":{}}}],["package",{"_index":4351,"title":{"dependencies.html":{},"properties.html":{}},"body":{"index.html":{}}}],["padding",{"_index":2488,"title":{},"body":{"components/InletComponent.html":{},"components/MixerViewComponent.html":{},"components/OpHelpModal.html":{},"components/OpSequencerComponent.html":{},"components/OpsComponent.html":{},"components/ParameterComponent.html":{},"components/PlayerComponent.html":{},"components/SnackbarComponent.html":{},"components/VirtualPedalsComponent.html":{},"components/WeavingStateComponent.html":{}}}],["page",{"_index":4210,"title":{},"body":{"injectables/ViewportService.html":{},"index.html":{}}}],["pair",{"_index":2522,"title":{},"body":{"injectables/MappingsService.html":{},"classes/PedalConfig.html":{}}}],["pair(id",{"_index":2543,"title":{},"body":{"injectables/MappingsService.html":{}}}],["pair(pedalid",{"_index":1745,"title":{},"body":{"interfaces/DraftOperationClassification.html":{},"interfaces/LoomConfig.html":{},"classes/PedalConfig.html":{},"injectables/PlayerService.html":{}}}],["paired",{"_index":1768,"title":{},"body":{"interfaces/DraftOperationClassification.html":{},"interfaces/LoomConfig.html":{},"injectables/MappingsService.html":{},"classes/PedalConfig.html":{},"injectables/PlayerService.html":{}}}],["pairedop",{"_index":605,"title":{"interfaces/PairedOp.html":{}},"body":{"interfaces/ChainOp.html":{},"interfaces/DraftOperationClassification.html":{},"interfaces/LoomConfig.html":{},"injectables/MappingsService.html":{},"interfaces/PairedOp.html":{},"classes/PedalConfig.html":{},"interfaces/PedalEvent.html":{},"interfaces/PlayerOp.html":{},"injectables/PlayerService.html":{},"miscellaneous/functions.html":{}}}],["pairing",{"_index":637,"title":{},"body":{"interfaces/ChainOp.html":{},"injectables/MappingsService.html":{},"interfaces/PairedOp.html":{},"interfaces/PedalEvent.html":{},"interfaces/PlayerOp.html":{},"miscellaneous/typealiases.html":{}}}],["pairs",{"_index":179,"title":{},"body":{"classes/AbstractOpFactory.html":{},"classes/BaseOp.html":{},"classes/Branch.html":{},"classes/Bus.html":{},"classes/Merge.html":{},"interfaces/OpClassifier.html":{},"interfaces/OperationProperties.html":{},"classes/Pipe.html":{},"classes/Seed.html":{},"interfaces/TopologyDef.html":{}}}],["palette",{"_index":1451,"title":{},"body":{"interfaces/DesignActions.html":{},"interfaces/IOTuple.html":{},"components/NoteComponent.html":{},"interfaces/TreeNode.html":{},"index.html":{}}}],["palette'},{'name",{"_index":865,"title":{},"body":{"components/ConnectionComponent.html":{},"components/DraftdetailComponent.html":{},"components/ImageComponent.html":{},"components/InletComponent.html":{},"components/MixerViewComponent.html":{},"components/NoteComponent.html":{},"components/OpHelpModal.html":{},"components/OpSequencerComponent.html":{},"components/OpsComponent.html":{},"components/ParameterComponent.html":{},"components/PlayerComponent.html":{},"components/SnackbarComponent.html":{},"components/VirtualPedalsComponent.html":{},"components/WeavingStateComponent.html":{}}}],["palette/connection/connection.component",{"_index":2700,"title":{},"body":{"modules/MixerModule.html":{}}}],["palette/image/image.component",{"_index":2703,"title":{},"body":{"modules/MixerModule.html":{}}}],["palette/marquee/marquee.component",{"_index":2698,"title":{},"body":{"modules/MixerModule.html":{}}}],["palette/note/note.component",{"_index":2704,"title":{},"body":{"modules/MixerModule.html":{}}}],["palette/operation/inlet/inlet.component",{"_index":2707,"title":{},"body":{"modules/MixerModule.html":{}}}],["palette/operation/operation.component",{"_index":2699,"title":{},"body":{"modules/MixerModule.html":{}}}],["palette/operation/parameter/parameter.component",{"_index":2706,"title":{},"body":{"modules/MixerModule.html":{}}}],["palette/palette.component",{"_index":2696,"title":{},"body":{"modules/MixerModule.html":{}}}],["palette/snackbar/snackbar.component",{"_index":2697,"title":{},"body":{"modules/MixerModule.html":{}}}],["palette/subdraft",{"_index":4311,"title":{},"body":{"components/WeavingStateComponent.html":{}}}],["palette/subdraft/subdraft.component",{"_index":2695,"title":{},"body":{"modules/MixerModule.html":{}}}],["palettecomponent",{"_index":864,"title":{},"body":{"components/ConnectionComponent.html":{},"components/DraftdetailComponent.html":{},"components/ImageComponent.html":{},"components/InletComponent.html":{},"modules/MixerModule.html":{},"components/MixerViewComponent.html":{},"components/NoteComponent.html":{},"components/OpHelpModal.html":{},"components/OpSequencerComponent.html":{},"components/OpsComponent.html":{},"components/ParameterComponent.html":{},"components/PlayerComponent.html":{},"components/SnackbarComponent.html":{},"components/VirtualPedalsComponent.html":{},"components/WeavingStateComponent.html":{},"overview.html":{}}}],["panel",{"_index":3120,"title":{},"body":{"components/OpSequencerComponent.html":{},"components/PlayerComponent.html":{},"components/WeavingStateComponent.html":{}}}],["panel:first",{"_index":3126,"title":{},"body":{"components/OpSequencerComponent.html":{},"components/PlayerComponent.html":{},"components/WeavingStateComponent.html":{}}}],["panel:last",{"_index":3125,"title":{},"body":{"components/OpSequencerComponent.html":{},"components/PlayerComponent.html":{},"components/WeavingStateComponent.html":{}}}],["panel:not(.mat",{"_index":3130,"title":{},"body":{"components/OpSequencerComponent.html":{},"components/PlayerComponent.html":{},"components/WeavingStateComponent.html":{}}}],["param",{"_index":165,"title":{},"body":{"classes/AbstractOpFactory.html":{},"classes/BaseOp.html":{},"interfaces/Bounds.html":{},"classes/Branch.html":{},"classes/Bus.html":{},"classes/Cell.html":{},"interfaces/ChainOp.html":{},"components/ConnectionComponent.html":{},"interfaces/Crossing.html":{},"classes/DBListener.html":{},"classes/DBListenerArray.html":{},"classes/DBNode.html":{},"classes/DBNodeArray.html":{},"classes/DBTwoWay.html":{},"classes/DBTwoWayArray.html":{},"classes/DBWriteBuffer.html":{},"classes/DBWriter.html":{},"classes/DBWriterArray.html":{},"interfaces/DensityUnits.html":{},"interfaces/DesignActions.html":{},"interfaces/DesignMode.html":{},"interfaces/DraftMap.html":{},"interfaces/DraftNodeProxy.html":{},"interfaces/DraftOperationClassification.html":{},"components/DraftdetailComponent.html":{},"interfaces/DynamicOperation.html":{},"interfaces/FileObj.html":{},"interfaces/FileSaver.html":{},"interfaces/Fileloader.html":{},"interfaces/IOTuple.html":{},"interfaces/Ink.html":{},"injectables/InkService.html":{},"interfaces/Interlacement.html":{},"interfaces/InterlacementVal.html":{},"interfaces/LoadResponse.html":{},"interfaces/LoomConfig.html":{},"interfaces/LoomTypes.html":{},"interfaces/MaterialTypes.html":{},"classes/Merge.html":{},"interfaces/NodeComponentProxy.html":{},"interfaces/NodeMethods.html":{},"interfaces/NodeParams.html":{},"components/NoteComponent.html":{},"classes/OnlineStatus.html":{},"interfaces/OpClassifier.html":{},"interfaces/OpComponentProxy.html":{},"interfaces/OpInput.html":{},"interfaces/OperationClassification.html":{},"interfaces/OperationParam.html":{},"interfaces/OperationProperties.html":{},"interfaces/PairedOp.html":{},"components/ParameterComponent.html":{},"classes/Params.html":{},"classes/PedalConfig.html":{},"interfaces/PedalEvent.html":{},"classes/Pipe.html":{},"interfaces/PlayerOp.html":{},"injectables/PlayerService.html":{},"interfaces/PlayerState.html":{},"interfaces/PlayerState-1.html":{},"interfaces/Point.html":{},"classes/Render.html":{},"interfaces/SaveObj.html":{},"classes/Seed.html":{},"classes/Shape-1.html":{},"interfaces/StatusMessage.html":{},"classes/System.html":{},"interfaces/TopologyDef.html":{},"interfaces/TreeNode.html":{},"interfaces/TreeNodeProxy.html":{},"interfaces/TreeOperation.html":{},"interfaces/Vertex.html":{},"interfaces/ViewModes.html":{},"injectables/ViewportService.html":{},"interfaces/WeavingLog.html":{},"interfaces/WeavingPick.html":{},"interfaces/WeavingPick-1.html":{},"interfaces/YarnPath.html":{},"miscellaneous/typealiases.html":{}}}],["param.dx",{"_index":2988,"title":{},"body":{"components/OpHelpModal.html":{}}}],["param.max",{"_index":2992,"title":{},"body":{"components/OpHelpModal.html":{}}}],["param.min",{"_index":2991,"title":{},"body":{"components/OpHelpModal.html":{}}}],["param.name",{"_index":2987,"title":{},"body":{"components/OpHelpModal.html":{},"components/ParameterComponent.html":{}}}],["param.type",{"_index":2989,"title":{},"body":{"components/OpHelpModal.html":{}}}],["param.value",{"_index":3187,"title":{},"body":{"interfaces/OperationParam.html":{},"classes/Params.html":{}}}],["param_input",{"_index":585,"title":{},"body":{"interfaces/ChainOp.html":{},"interfaces/PairedOp.html":{},"interfaces/PedalEvent.html":{},"interfaces/PlayerOp.html":{}}}],["paramaterized",{"_index":2243,"title":{},"body":{"interfaces/DynamicOperation.html":{},"interfaces/OpInput.html":{},"interfaces/OperationClassification.html":{},"interfaces/TreeOperation.html":{}}}],["parameter",{"_index":2133,"title":{},"body":{"interfaces/DynamicOperation.html":{},"interfaces/Ink.html":{},"injectables/InkService.html":{},"components/OpHelpModal.html":{},"interfaces/OpInput.html":{},"interfaces/OperationClassification.html":{},"interfaces/OperationParam.html":{},"components/ParameterComponent.html":{},"classes/Params.html":{},"interfaces/TreeOperation.html":{},"index.html":{}}}],["parameter'},{'name",{"_index":867,"title":{},"body":{"components/ConnectionComponent.html":{},"components/DraftdetailComponent.html":{},"components/ImageComponent.html":{},"components/InletComponent.html":{},"components/MixerViewComponent.html":{},"components/NoteComponent.html":{},"components/OpHelpModal.html":{},"components/OpSequencerComponent.html":{},"components/OpsComponent.html":{},"components/ParameterComponent.html":{},"components/PlayerComponent.html":{},"components/SnackbarComponent.html":{},"components/VirtualPedalsComponent.html":{},"components/WeavingStateComponent.html":{}}}],["parameter.component.html",{"_index":3268,"title":{},"body":{"components/ParameterComponent.html":{}}}],["parameter.component.scss",{"_index":3267,"title":{},"body":{"components/ParameterComponent.html":{}}}],["parametercomponent",{"_index":866,"title":{"components/ParameterComponent.html":{}},"body":{"components/ConnectionComponent.html":{},"components/DraftdetailComponent.html":{},"components/ImageComponent.html":{},"components/InletComponent.html":{},"modules/MixerModule.html":{},"components/MixerViewComponent.html":{},"components/NoteComponent.html":{},"components/OpHelpModal.html":{},"components/OpSequencerComponent.html":{},"components/OpsComponent.html":{},"components/ParameterComponent.html":{},"components/PlayerComponent.html":{},"components/SnackbarComponent.html":{},"components/VirtualPedalsComponent.html":{},"components/WeavingStateComponent.html":{},"overview.html":{}}}],["parameters",{"_index":18,"title":{},"body":{"classes/AbstractOpFactory.html":{},"classes/BaseOp.html":{},"classes/Branch.html":{},"classes/Bus.html":{},"classes/Cell.html":{},"components/ConnectionComponent.html":{},"classes/DBListener.html":{},"classes/DBListenerArray.html":{},"classes/DBNode.html":{},"classes/DBNodeArray.html":{},"classes/DBTwoWay.html":{},"classes/DBTwoWayArray.html":{},"classes/DBWriteBuffer.html":{},"classes/DBWriter.html":{},"classes/DBWriterArray.html":{},"interfaces/DraftNodeProxy.html":{},"interfaces/DraftOperationClassification.html":{},"components/DraftdetailComponent.html":{},"interfaces/DynamicOperation.html":{},"interfaces/FileObj.html":{},"interfaces/FileSaver.html":{},"interfaces/Fileloader.html":{},"injectables/InkService.html":{},"components/InletComponent.html":{},"interfaces/LoadResponse.html":{},"interfaces/LoomConfig.html":{},"injectables/MappingsService.html":{},"directives/MarqueeComponent.html":{},"classes/Merge.html":{},"components/MixerViewComponent.html":{},"interfaces/NodeComponentProxy.html":{},"components/NoteComponent.html":{},"classes/OnlineStatus.html":{},"interfaces/OpClassifier.html":{},"interfaces/OpComponentProxy.html":{},"components/OpHelpModal.html":{},"interfaces/OpInput.html":{},"classes/OpSequencer.html":{},"components/OpSequencerComponent.html":{},"interfaces/OperationClassification.html":{},"interfaces/OperationProperties.html":{},"components/OpsComponent.html":{},"components/ParameterComponent.html":{},"classes/Params.html":{},"classes/PedalConfig.html":{},"classes/PedalStatus.html":{},"injectables/PedalsService.html":{},"classes/Pipe.html":{},"components/PlayerComponent.html":{},"injectables/PlayerService.html":{},"classes/Render.html":{},"interfaces/SaveObj.html":{},"classes/Seed.html":{},"classes/Selection.html":{},"directives/SelectionComponent.html":{},"injectables/SequencerService.html":{},"classes/Shape.html":{},"classes/Shape-1.html":{},"classes/Shuttle.html":{},"components/SnackbarComponent.html":{},"interfaces/StatusMessage.html":{},"classes/System.html":{},"interfaces/TopologyDef.html":{},"interfaces/TreeNodeProxy.html":{},"interfaces/TreeOperation.html":{},"injectables/ViewportService.html":{},"components/VirtualPedalsComponent.html":{},"components/WeavingStateComponent.html":{},"miscellaneous/functions.html":{},"index.html":{},"miscellaneous/typealiases.html":{}}}],["parametric",{"_index":4433,"title":{},"body":{"index.html":{}}}],["paramid",{"_index":3271,"title":{},"body":{"components/ParameterComponent.html":{}}}],["params",{"_index":57,"title":{"classes/Params.html":{}},"body":{"classes/AbstractOpFactory.html":{},"classes/BaseOp.html":{},"classes/Branch.html":{},"classes/Bus.html":{},"classes/Cell.html":{},"interfaces/ChainOp.html":{},"classes/DBListener.html":{},"classes/DBListenerArray.html":{},"classes/DBNode.html":{},"classes/DBNodeArray.html":{},"classes/DBTwoWay.html":{},"classes/DBTwoWayArray.html":{},"classes/DBWriteBuffer.html":{},"classes/DBWriter.html":{},"classes/DBWriterArray.html":{},"interfaces/DraftNodeProxy.html":{},"interfaces/DraftOperationClassification.html":{},"interfaces/DynamicOperation.html":{},"interfaces/FileObj.html":{},"interfaces/FileSaver.html":{},"interfaces/Fileloader.html":{},"interfaces/IOTuple.html":{},"interfaces/LoadResponse.html":{},"interfaces/LoomConfig.html":{},"classes/Merge.html":{},"interfaces/NodeComponentProxy.html":{},"interfaces/NodeMethods.html":{},"interfaces/NodeParams.html":{},"classes/OnlineStatus.html":{},"interfaces/OpClassifier.html":{},"interfaces/OpComponentProxy.html":{},"components/OpHelpModal.html":{},"interfaces/OpInput.html":{},"interfaces/OperationClassification.html":{},"interfaces/OperationParam.html":{},"interfaces/OperationProperties.html":{},"interfaces/PairedOp.html":{},"classes/Params.html":{},"classes/PedalConfig.html":{},"interfaces/PedalEvent.html":{},"classes/Pipe.html":{},"interfaces/PlayerOp.html":{},"injectables/PlayerService.html":{},"interfaces/SaveObj.html":{},"classes/Seed.html":{},"interfaces/StatusMessage.html":{},"interfaces/TopologyDef.html":{},"interfaces/TreeNode.html":{},"interfaces/TreeNodeProxy.html":{},"interfaces/TreeOperation.html":{},"miscellaneous/functions.html":{},"miscellaneous/typealiases.html":{}}}],["params(path",{"_index":3393,"title":{},"body":{"interfaces/Pedal.html":{},"classes/PedalStatus.html":{},"injectables/PedalsService.html":{}}}],["params.db",{"_index":990,"title":{},"body":{"classes/DBListener.html":{},"classes/DBListenerArray.html":{},"classes/DBNode.html":{},"classes/DBNodeArray.html":{},"classes/DBTwoWay.html":{},"classes/DBTwoWayArray.html":{},"classes/DBWriteBuffer.html":{},"classes/DBWriter.html":{},"classes/DBWriterArray.html":{},"interfaces/NodeMethods.html":{},"interfaces/NodeParams.html":{},"classes/OnlineStatus.html":{}}}],["params.id",{"_index":1002,"title":{},"body":{"classes/DBListener.html":{},"classes/DBListenerArray.html":{},"classes/DBNode.html":{},"classes/DBNodeArray.html":{},"classes/DBTwoWay.html":{},"classes/DBTwoWayArray.html":{},"classes/DBWriteBuffer.html":{},"classes/DBWriter.html":{},"classes/DBWriterArray.html":{},"interfaces/NodeMethods.html":{},"interfaces/NodeParams.html":{},"classes/OnlineStatus.html":{}}}],["params.initval",{"_index":997,"title":{},"body":{"classes/DBListener.html":{},"classes/DBListenerArray.html":{},"classes/DBNode.html":{},"classes/DBNodeArray.html":{},"classes/DBTwoWay.html":{},"classes/DBTwoWayArray.html":{},"classes/DBWriteBuffer.html":{},"classes/DBWriter.html":{},"classes/DBWriterArray.html":{},"interfaces/NodeMethods.html":{},"interfaces/NodeParams.html":{},"classes/OnlineStatus.html":{}}}],["params.is_set",{"_index":415,"title":{},"body":{"classes/Cell.html":{}}}],["params.is_up",{"_index":413,"title":{},"body":{"classes/Cell.html":{}}}],["params.key",{"_index":1000,"title":{},"body":{"classes/DBListener.html":{},"classes/DBListenerArray.html":{},"classes/DBNode.html":{},"classes/DBNodeArray.html":{},"classes/DBTwoWay.html":{},"classes/DBTwoWayArray.html":{},"classes/DBWriteBuffer.html":{},"classes/DBWriter.html":{},"classes/DBWriterArray.html":{},"interfaces/NodeMethods.html":{},"interfaces/NodeParams.html":{},"classes/OnlineStatus.html":{}}}],["params.path",{"_index":992,"title":{},"body":{"classes/DBListener.html":{},"classes/DBListenerArray.html":{},"classes/DBNode.html":{},"classes/DBNodeArray.html":{},"classes/DBTwoWay.html":{},"classes/DBTwoWayArray.html":{},"classes/DBWriteBuffer.html":{},"classes/DBWriter.html":{},"classes/DBWriterArray.html":{},"interfaces/NodeMethods.html":{},"interfaces/NodeParams.html":{},"classes/OnlineStatus.html":{}}}],["params.ref",{"_index":999,"title":{},"body":{"classes/DBListener.html":{},"classes/DBListenerArray.html":{},"classes/DBNode.html":{},"classes/DBNodeArray.html":{},"classes/DBTwoWay.html":{},"classes/DBTwoWayArray.html":{},"classes/DBWriteBuffer.html":{},"classes/DBWriter.html":{},"classes/DBWriterArray.html":{},"interfaces/NodeMethods.html":{},"interfaces/NodeParams.html":{},"classes/OnlineStatus.html":{}}}],["params.root",{"_index":995,"title":{},"body":{"classes/DBListener.html":{},"classes/DBListenerArray.html":{},"classes/DBNode.html":{},"classes/DBNodeArray.html":{},"classes/DBTwoWay.html":{},"classes/DBTwoWayArray.html":{},"classes/DBWriteBuffer.html":{},"classes/DBWriter.html":{},"classes/DBWriterArray.html":{},"interfaces/NodeMethods.html":{},"interfaces/NodeParams.html":{},"classes/OnlineStatus.html":{}}}],["params_opt",{"_index":141,"title":{},"body":{"classes/AbstractOpFactory.html":{},"classes/BaseOp.html":{},"classes/Branch.html":{},"classes/Bus.html":{},"classes/Merge.html":{},"interfaces/OpClassifier.html":{},"interfaces/OperationProperties.html":{},"classes/Pipe.html":{},"classes/Seed.html":{},"interfaces/TopologyDef.html":{}}}],["paramsoptional",{"_index":13,"title":{},"body":{"classes/AbstractOpFactory.html":{},"classes/BaseOp.html":{},"classes/Branch.html":{},"classes/Bus.html":{},"interfaces/DynamicOperation.html":{},"classes/Merge.html":{},"interfaces/OpClassifier.html":{},"interfaces/OpInput.html":{},"interfaces/OperationClassification.html":{},"interfaces/OperationProperties.html":{},"classes/Pipe.html":{},"classes/Seed.html":{},"interfaces/TopologyDef.html":{},"interfaces/TreeOperation.html":{},"miscellaneous/typealiases.html":{}}}],["paramsoptional(...args",{"_index":48,"title":{},"body":{"classes/AbstractOpFactory.html":{},"classes/BaseOp.html":{},"classes/Branch.html":{},"classes/Bus.html":{},"classes/Merge.html":{},"interfaces/OpClassifier.html":{},"interfaces/OperationProperties.html":{},"classes/Pipe.html":{},"classes/Seed.html":{},"interfaces/TopologyDef.html":{}}}],["paramsoptional(args",{"_index":45,"title":{},"body":{"classes/AbstractOpFactory.html":{},"classes/BaseOp.html":{},"classes/Branch.html":{},"classes/Bus.html":{},"classes/Merge.html":{},"interfaces/OpClassifier.html":{},"interfaces/OperationProperties.html":{},"classes/Pipe.html":{},"classes/Seed.html":{},"interfaces/TopologyDef.html":{}}}],["paramsoptionalperform",{"_index":171,"title":{},"body":{"classes/AbstractOpFactory.html":{},"classes/BaseOp.html":{},"classes/Branch.html":{},"classes/Bus.html":{},"classes/Merge.html":{},"interfaces/OpClassifier.html":{},"interfaces/OperationProperties.html":{},"classes/Pipe.html":{},"classes/Seed.html":{},"interfaces/TopologyDef.html":{},"miscellaneous/typealiases.html":{}}}],["paramtype",{"_index":3151,"title":{},"body":{"interfaces/OperationParam.html":{},"classes/Params.html":{},"miscellaneous/typealiases.html":{}}}],["paramvalue",{"_index":53,"title":{},"body":{"classes/AbstractOpFactory.html":{},"classes/BaseOp.html":{},"classes/Branch.html":{},"classes/Bus.html":{},"interfaces/ChainOp.html":{},"interfaces/DynamicOperation.html":{},"classes/Merge.html":{},"interfaces/OpClassifier.html":{},"interfaces/OpInput.html":{},"interfaces/OperationClassification.html":{},"interfaces/OperationParam.html":{},"interfaces/OperationProperties.html":{},"interfaces/PairedOp.html":{},"classes/Params.html":{},"interfaces/PedalEvent.html":{},"classes/Pipe.html":{},"interfaces/PlayerOp.html":{},"classes/Seed.html":{},"interfaces/TopologyDef.html":{},"interfaces/TreeOperation.html":{},"miscellaneous/typealiases.html":{}}}],["paramvalues",{"_index":3184,"title":{},"body":{"interfaces/OperationParam.html":{},"classes/Params.html":{},"miscellaneous/functions.html":{}}}],["parent",{"_index":1078,"title":{},"body":{"classes/DBListener.html":{},"classes/DBListenerArray.html":{},"classes/DBNode.html":{},"classes/DBNodeArray.html":{},"classes/DBTwoWay.html":{},"classes/DBTwoWayArray.html":{},"classes/DBWriteBuffer.html":{},"classes/DBWriter.html":{},"classes/DBWriterArray.html":{},"interfaces/DesignActions.html":{},"interfaces/DraftMap.html":{},"interfaces/DraftNodeProxy.html":{},"components/DraftdetailComponent.html":{},"interfaces/DynamicOperation.html":{},"interfaces/FileObj.html":{},"interfaces/FileSaver.html":{},"interfaces/Fileloader.html":{},"interfaces/IOTuple.html":{},"interfaces/Interlacement.html":{},"interfaces/InterlacementVal.html":{},"interfaces/LoadResponse.html":{},"interfaces/NodeComponentProxy.html":{},"interfaces/NodeMethods.html":{},"interfaces/NodeParams.html":{},"classes/OnlineStatus.html":{},"interfaces/OpComponentProxy.html":{},"interfaces/OpInput.html":{},"interfaces/OperationClassification.html":{},"interfaces/Pedal.html":{},"classes/PedalStatus.html":{},"injectables/PedalsService.html":{},"interfaces/SaveObj.html":{},"interfaces/StatusMessage.html":{},"interfaces/TreeNode.html":{},"interfaces/TreeNodeProxy.html":{},"interfaces/TreeOperation.html":{}}}],["parent.bounds.topleft.x",{"_index":1487,"title":{},"body":{"interfaces/DesignActions.html":{}}}],["parent.bounds.topleft.y",{"_index":1488,"title":{},"body":{"interfaces/DesignActions.html":{}}}],["parent.id",{"_index":1482,"title":{},"body":{"interfaces/DesignActions.html":{}}}],["parent/child",{"_index":4588,"title":{},"body":{"index.html":{}}}],["parent_id",{"_index":1371,"title":{},"body":{"interfaces/DesignActions.html":{}}}],["parentkeys",{"_index":1124,"title":{},"body":{"classes/DBListener.html":{},"classes/DBListenerArray.html":{},"classes/DBNode.html":{},"classes/DBNodeArray.html":{},"classes/DBTwoWay.html":{},"classes/DBTwoWayArray.html":{},"classes/DBWriteBuffer.html":{},"classes/DBWriter.html":{},"classes/DBWriterArray.html":{},"interfaces/NodeMethods.html":{},"interfaces/NodeParams.html":{},"classes/OnlineStatus.html":{}}}],["parentnode",{"_index":1051,"title":{},"body":{"classes/DBListener.html":{},"classes/DBListenerArray.html":{},"classes/DBNode.html":{},"classes/DBNodeArray.html":{},"classes/DBTwoWay.html":{},"classes/DBTwoWayArray.html":{},"classes/DBWriteBuffer.html":{},"classes/DBWriter.html":{},"classes/DBWriterArray.html":{},"interfaces/NodeMethods.html":{},"interfaces/NodeParams.html":{},"classes/OnlineStatus.html":{}}}],["parsedefaultinletvalue",{"_index":2393,"title":{},"body":{"components/InletComponent.html":{}}}],["parsedefaultinletvalue(type",{"_index":2412,"title":{},"body":{"components/InletComponent.html":{}}}],["parseint(el",{"_index":2810,"title":{},"body":{"components/MixerViewComponent.html":{}}}],["parseint(value",{"_index":2453,"title":{},"body":{"components/InletComponent.html":{}}}],["part",{"_index":3737,"title":{},"body":{"interfaces/PlayerState.html":{},"interfaces/PlayerState-1.html":{},"injectables/ViewportService.html":{},"interfaces/WeavingLog.html":{},"interfaces/WeavingPick.html":{},"interfaces/WeavingPick-1.html":{}}}],["particular",{"_index":2997,"title":{},"body":{"components/OpHelpModal.html":{},"index.html":{},"miscellaneous/typealiases.html":{}}}],["pass",{"_index":1032,"title":{},"body":{"classes/DBListener.html":{},"classes/DBListenerArray.html":{},"classes/DBNode.html":{},"classes/DBNodeArray.html":{},"classes/DBTwoWay.html":{},"classes/DBTwoWayArray.html":{},"classes/DBWriteBuffer.html":{},"classes/DBWriter.html":{},"classes/DBWriterArray.html":{},"interfaces/NodeMethods.html":{},"interfaces/NodeParams.html":{},"classes/OnlineStatus.html":{}}}],["passed",{"_index":1945,"title":{},"body":{"components/DraftdetailComponent.html":{}}}],["passing",{"_index":2595,"title":{},"body":{"injectables/MappingsService.html":{}}}],["path",{"_index":914,"title":{},"body":{"interfaces/Crossing.html":{},"classes/DBListener.html":{},"classes/DBListenerArray.html":{},"classes/DBNode.html":{},"classes/DBNodeArray.html":{},"classes/DBTwoWay.html":{},"classes/DBTwoWayArray.html":{},"classes/DBWriteBuffer.html":{},"classes/DBWriter.html":{},"classes/DBWriterArray.html":{},"interfaces/NodeMethods.html":{},"interfaces/NodeParams.html":{},"classes/OnlineStatus.html":{},"interfaces/Pedal.html":{},"classes/PedalStatus.html":{},"injectables/PedalsService.html":{},"classes/Shape.html":{},"interfaces/Vertex.html":{},"interfaces/YarnPath.html":{}}}],["paths",{"_index":904,"title":{},"body":{"interfaces/Crossing.html":{},"components/DraftdetailComponent.html":{},"interfaces/Vertex.html":{},"interfaces/YarnPath.html":{},"index.html":{},"miscellaneous/typealiases.html":{}}}],["pattern",{"_index":273,"title":{},"body":{"classes/AbstractOpFactory.html":{},"classes/BaseOp.html":{},"classes/Branch.html":{},"classes/Bus.html":{},"interfaces/DraftMap.html":{},"interfaces/Ink.html":{},"injectables/InkService.html":{},"interfaces/Interlacement.html":{},"interfaces/InterlacementVal.html":{},"classes/Merge.html":{},"interfaces/OpClassifier.html":{},"interfaces/OperationProperties.html":{},"classes/Pipe.html":{},"classes/Render.html":{},"classes/Seed.html":{},"interfaces/TopologyDef.html":{},"index.html":{}}}],["patterns",{"_index":4518,"title":{},"body":{"index.html":{}}}],["patterns/abstract",{"_index":278,"title":{},"body":{"classes/AbstractOpFactory.html":{},"classes/BaseOp.html":{},"classes/Branch.html":{},"classes/Bus.html":{},"classes/Merge.html":{},"interfaces/OpClassifier.html":{},"interfaces/OperationProperties.html":{},"classes/Pipe.html":{},"classes/Seed.html":{},"interfaces/TopologyDef.html":{}}}],["pds",{"_index":2515,"title":{},"body":{"injectables/MappingsService.html":{},"components/OpSequencerComponent.html":{},"components/VirtualPedalsComponent.html":{},"components/WeavingStateComponent.html":{}}}],["pds.num_v_pedals.val",{"_index":4289,"title":{},"body":{"components/VirtualPedalsComponent.html":{}}}],["pds.pedals.array((p",{"_index":2572,"title":{},"body":{"injectables/MappingsService.html":{}}}],["pedal",{"_index":519,"title":{"interfaces/Pedal.html":{}},"body":{"interfaces/ChainOp.html":{},"interfaces/DraftOperationClassification.html":{},"interfaces/LoomConfig.html":{},"injectables/MappingsService.html":{},"classes/OpSequencer.html":{},"interfaces/PairedOp.html":{},"interfaces/Pedal.html":{},"classes/PedalConfig.html":{},"interfaces/PedalEvent.html":{},"classes/PedalStatus.html":{},"injectables/PedalsService.html":{},"interfaces/PlayerOp.html":{},"injectables/PlayerService.html":{},"interfaces/PlayerState.html":{},"interfaces/PlayerState-1.html":{},"interfaces/WeavingLog.html":{},"interfaces/WeavingPick.html":{},"interfaces/WeavingPick-1.html":{},"components/WeavingStateComponent.html":{}}}],["pedal's",{"_index":3461,"title":{},"body":{"interfaces/Pedal.html":{},"classes/PedalStatus.html":{},"injectables/PedalsService.html":{}}}],["pedal(s",{"_index":3023,"title":{},"body":{"classes/OpSequencer.html":{}}}],["pedal.execute",{"_index":3462,"title":{},"body":{"interfaces/Pedal.html":{},"classes/PedalStatus.html":{},"injectables/PedalsService.html":{}}}],["pedal_array",{"_index":3382,"title":{},"body":{"interfaces/Pedal.html":{},"classes/PedalStatus.html":{},"injectables/PedalsService.html":{}}}],["pedal_states",{"_index":3381,"title":{},"body":{"interfaces/Pedal.html":{},"classes/PedalStatus.html":{},"injectables/PedalsService.html":{}}}],["pedalaction",{"_index":635,"title":{},"body":{"interfaces/ChainOp.html":{},"injectables/MappingsService.html":{},"interfaces/PairedOp.html":{},"interfaces/PedalEvent.html":{},"interfaces/PlayerOp.html":{},"miscellaneous/typealiases.html":{}}}],["pedalactions",{"_index":2514,"title":{},"body":{"injectables/MappingsService.html":{}}}],["pedalarray",{"_index":1725,"title":{},"body":{"interfaces/DraftOperationClassification.html":{},"interfaces/LoomConfig.html":{},"classes/PedalConfig.html":{},"injectables/PlayerService.html":{}}}],["pedalarray.map((p",{"_index":1728,"title":{},"body":{"interfaces/DraftOperationClassification.html":{},"interfaces/LoomConfig.html":{},"classes/PedalConfig.html":{},"injectables/PlayerService.html":{}}}],["pedalconfig",{"_index":1709,"title":{"classes/PedalConfig.html":{}},"body":{"interfaces/DraftOperationClassification.html":{},"interfaces/LoomConfig.html":{},"injectables/MappingsService.html":{},"classes/PedalConfig.html":{},"injectables/PlayerService.html":{}}}],["pedalevent",{"_index":522,"title":{"interfaces/PedalEvent.html":{}},"body":{"interfaces/ChainOp.html":{},"classes/OpSequencer.html":{},"interfaces/PairedOp.html":{},"interfaces/PedalEvent.html":{},"interfaces/PlayerOp.html":{}}}],["pedalid",{"_index":1759,"title":{},"body":{"interfaces/DraftOperationClassification.html":{},"interfaces/LoomConfig.html":{},"classes/PedalConfig.html":{},"injectables/PlayerService.html":{}}}],["pedalinsequencer",{"_index":2523,"title":{},"body":{"injectables/MappingsService.html":{}}}],["pedalinsequencer(id",{"_index":2545,"title":{},"body":{"injectables/MappingsService.html":{}}}],["pedalischained",{"_index":2524,"title":{},"body":{"injectables/MappingsService.html":{},"classes/PedalConfig.html":{}}}],["pedalischained(id",{"_index":1780,"title":{},"body":{"interfaces/DraftOperationClassification.html":{},"interfaces/LoomConfig.html":{},"injectables/MappingsService.html":{},"classes/PedalConfig.html":{},"injectables/PlayerService.html":{}}}],["pedalismapped",{"_index":2525,"title":{},"body":{"injectables/MappingsService.html":{},"classes/PedalConfig.html":{}}}],["pedalismapped(id",{"_index":1778,"title":{},"body":{"interfaces/DraftOperationClassification.html":{},"interfaces/LoomConfig.html":{},"injectables/MappingsService.html":{},"classes/PedalConfig.html":{},"injectables/PlayerService.html":{}}}],["pedalispaired",{"_index":2526,"title":{},"body":{"injectables/MappingsService.html":{},"classes/PedalConfig.html":{}}}],["pedalispaired(id",{"_index":1783,"title":{},"body":{"interfaces/DraftOperationClassification.html":{},"interfaces/LoomConfig.html":{},"injectables/MappingsService.html":{},"classes/PedalConfig.html":{},"injectables/PlayerService.html":{}}}],["pedalopmap",{"_index":2561,"title":{},"body":{"injectables/MappingsService.html":{},"miscellaneous/typealiases.html":{}}}],["pedalopmapping",{"_index":634,"title":{},"body":{"interfaces/ChainOp.html":{},"interfaces/DraftOperationClassification.html":{},"interfaces/LoomConfig.html":{},"injectables/MappingsService.html":{},"interfaces/PairedOp.html":{},"classes/PedalConfig.html":{},"interfaces/PedalEvent.html":{},"interfaces/PlayerOp.html":{},"injectables/PlayerService.html":{},"miscellaneous/typealiases.html":{}}}],["pedals",{"_index":468,"title":{},"body":{"interfaces/ChainIndex.html":{},"interfaces/ChainOp.html":{},"classes/DBListener.html":{},"classes/DBListenerArray.html":{},"classes/DBNode.html":{},"classes/DBNodeArray.html":{},"classes/DBTwoWay.html":{},"classes/DBTwoWayArray.html":{},"classes/DBWriteBuffer.html":{},"classes/DBWriter.html":{},"classes/DBWriterArray.html":{},"interfaces/DraftOperationClassification.html":{},"interfaces/LoomConfig.html":{},"injectables/MappingsService.html":{},"interfaces/NodeMethods.html":{},"interfaces/NodeParams.html":{},"classes/OnlineStatus.html":{},"classes/OpSequencer.html":{},"interfaces/PairedOp.html":{},"interfaces/Pedal.html":{},"classes/PedalConfig.html":{},"interfaces/PedalEvent.html":{},"classes/PedalStatus.html":{},"injectables/PedalsService.html":{},"components/PlayerComponent.html":{},"interfaces/PlayerOp.html":{},"injectables/PlayerService.html":{},"injectables/SequencerService.html":{},"components/VirtualPedalsComponent.html":{},"components/WeavingStateComponent.html":{}}}],["pedals'},{'name",{"_index":875,"title":{},"body":{"components/ConnectionComponent.html":{},"components/DraftdetailComponent.html":{},"components/ImageComponent.html":{},"components/InletComponent.html":{},"components/MixerViewComponent.html":{},"components/NoteComponent.html":{},"components/OpHelpModal.html":{},"components/OpSequencerComponent.html":{},"components/OpsComponent.html":{},"components/ParameterComponent.html":{},"components/PlayerComponent.html":{},"components/SnackbarComponent.html":{},"components/VirtualPedalsComponent.html":{},"components/WeavingStateComponent.html":{}}}],["pedals.component",{"_index":3699,"title":{},"body":{"modules/PlayerModule.html":{}}}],["pedals.component.html",{"_index":4267,"title":{},"body":{"components/VirtualPedalsComponent.html":{}}}],["pedals.component.scss",{"_index":4266,"title":{},"body":{"components/VirtualPedalsComponent.html":{}}}],["pedals.component.ts",{"_index":4265,"title":{},"body":{"components/VirtualPedalsComponent.html":{}}}],["pedals.component.ts:12",{"_index":4278,"title":{},"body":{"components/VirtualPedalsComponent.html":{}}}],["pedals.component.ts:15",{"_index":4275,"title":{},"body":{"components/VirtualPedalsComponent.html":{}}}],["pedals.component.ts:19",{"_index":4274,"title":{},"body":{"components/VirtualPedalsComponent.html":{}}}],["pedals.component.ts:9",{"_index":4271,"title":{},"body":{"components/VirtualPedalsComponent.html":{}}}],["pedals.length",{"_index":3058,"title":{},"body":{"classes/OpSequencer.html":{}}}],["pedals.on('pedal",{"_index":1872,"title":{},"body":{"interfaces/DraftOperationClassification.html":{},"interfaces/LoomConfig.html":{},"classes/PedalConfig.html":{},"injectables/PlayerService.html":{}}}],["pedals.push(sel_back",{"_index":3075,"title":{},"body":{"classes/OpSequencer.html":{}}}],["pedals.service",{"_index":440,"title":{},"body":{"interfaces/ChainIndex.html":{},"injectables/MappingsService.html":{},"injectables/SequencerService.html":{}}}],["pedals/virtual",{"_index":3698,"title":{},"body":{"modules/PlayerModule.html":{},"components/VirtualPedalsComponent.html":{}}}],["pedals[0",{"_index":3056,"title":{},"body":{"classes/OpSequencer.html":{}}}],["pedals[1",{"_index":3057,"title":{},"body":{"classes/OpSequencer.html":{}}}],["pedals[2",{"_index":3060,"title":{},"body":{"classes/OpSequencer.html":{}}}],["pedalsservice",{"_index":439,"title":{"injectables/PedalsService.html":{}},"body":{"interfaces/ChainIndex.html":{},"interfaces/DraftOperationClassification.html":{},"interfaces/LoomConfig.html":{},"injectables/MappingsService.html":{},"components/OpSequencerComponent.html":{},"interfaces/Pedal.html":{},"classes/PedalConfig.html":{},"classes/PedalStatus.html":{},"injectables/PedalsService.html":{},"injectables/PlayerService.html":{},"injectables/SequencerService.html":{},"components/VirtualPedalsComponent.html":{},"components/WeavingStateComponent.html":{}}}],["pedalstatus",{"_index":1703,"title":{"classes/PedalStatus.html":{}},"body":{"interfaces/DraftOperationClassification.html":{},"interfaces/LoomConfig.html":{},"interfaces/Pedal.html":{},"classes/PedalConfig.html":{},"classes/PedalStatus.html":{},"injectables/PedalsService.html":{},"injectables/PlayerService.html":{}}}],["pedalstatus(this.db",{"_index":3434,"title":{},"body":{"interfaces/Pedal.html":{},"classes/PedalStatus.html":{},"injectables/PedalsService.html":{}}}],["per",{"_index":3978,"title":{},"body":{"classes/Shape.html":{}}}],["percentage",{"_index":4085,"title":{},"body":{"classes/Shuttle.html":{}}}],["perform",{"_index":71,"title":{},"body":{"classes/AbstractOpFactory.html":{},"classes/BaseOp.html":{},"classes/Branch.html":{},"classes/Bus.html":{},"interfaces/ChainOp.html":{},"interfaces/DraftOperationClassification.html":{},"interfaces/DynamicOperation.html":{},"interfaces/LoomConfig.html":{},"classes/Merge.html":{},"interfaces/OpClassifier.html":{},"interfaces/OpInput.html":{},"classes/OpSequencer.html":{},"interfaces/OperationClassification.html":{},"interfaces/OperationProperties.html":{},"interfaces/PairedOp.html":{},"classes/PedalConfig.html":{},"interfaces/PedalEvent.html":{},"classes/Pipe.html":{},"interfaces/PlayerOp.html":{},"injectables/PlayerService.html":{},"classes/Seed.html":{},"injectables/SequencerService.html":{},"interfaces/TopologyDef.html":{},"interfaces/TreeOperation.html":{},"miscellaneous/typealiases.html":{}}}],["perform(init",{"_index":3043,"title":{},"body":{"classes/OpSequencer.html":{},"injectables/SequencerService.html":{}}}],["performargs",{"_index":219,"title":{},"body":{"classes/AbstractOpFactory.html":{},"classes/BaseOp.html":{},"classes/Branch.html":{},"classes/Bus.html":{},"classes/Merge.html":{},"interfaces/OpClassifier.html":{},"interfaces/OperationProperties.html":{},"classes/Pipe.html":{},"classes/Seed.html":{},"interfaces/TopologyDef.html":{}}}],["performcallsigs",{"_index":174,"title":{},"body":{"classes/AbstractOpFactory.html":{},"classes/BaseOp.html":{},"classes/Branch.html":{},"classes/Bus.html":{},"classes/Merge.html":{},"interfaces/OpClassifier.html":{},"interfaces/OperationProperties.html":{},"classes/Pipe.html":{},"classes/Seed.html":{},"interfaces/TopologyDef.html":{},"miscellaneous/typealiases.html":{}}}],["performcallsigs[constraint[\"constraint\"]][topo[\"type",{"_index":218,"title":{},"body":{"classes/AbstractOpFactory.html":{},"classes/BaseOp.html":{},"classes/Branch.html":{},"classes/Bus.html":{},"classes/Merge.html":{},"interfaces/OpClassifier.html":{},"interfaces/OperationProperties.html":{},"classes/Pipe.html":{},"classes/Seed.html":{},"interfaces/TopologyDef.html":{}}}],["performdraftinput",{"_index":84,"title":{},"body":{"classes/AbstractOpFactory.html":{},"classes/BaseOp.html":{},"classes/Branch.html":{},"classes/Bus.html":{},"classes/Merge.html":{},"interfaces/OpClassifier.html":{},"interfaces/OperationProperties.html":{},"classes/Pipe.html":{},"classes/Seed.html":{},"interfaces/TopologyDef.html":{},"miscellaneous/typealiases.html":{}}}],["performed",{"_index":2172,"title":{},"body":{"interfaces/DynamicOperation.html":{},"interfaces/OpInput.html":{},"interfaces/OperationClassification.html":{},"interfaces/TreeOperation.html":{}}}],["performinput",{"_index":214,"title":{},"body":{"classes/AbstractOpFactory.html":{},"classes/BaseOp.html":{},"classes/Branch.html":{},"classes/Bus.html":{},"classes/Merge.html":{},"interfaces/OpClassifier.html":{},"interfaces/OperationProperties.html":{},"classes/Pipe.html":{},"classes/Seed.html":{},"interfaces/TopologyDef.html":{}}}],["performorparams",{"_index":237,"title":{},"body":{"classes/AbstractOpFactory.html":{},"classes/BaseOp.html":{},"classes/Branch.html":{},"classes/Bus.html":{},"classes/Merge.html":{},"interfaces/OpClassifier.html":{},"interfaces/OperationProperties.html":{},"classes/Pipe.html":{},"classes/Seed.html":{},"interfaces/TopologyDef.html":{}}}],["performoutput",{"_index":89,"title":{},"body":{"classes/AbstractOpFactory.html":{},"classes/BaseOp.html":{},"classes/Branch.html":{},"classes/Bus.html":{},"classes/Merge.html":{},"interfaces/OpClassifier.html":{},"interfaces/OperationProperties.html":{},"classes/Pipe.html":{},"classes/Seed.html":{},"interfaces/TopologyDef.html":{},"miscellaneous/typealiases.html":{}}}],["performwithparams",{"_index":238,"title":{},"body":{"classes/AbstractOpFactory.html":{},"classes/BaseOp.html":{},"classes/Branch.html":{},"classes/Bus.html":{},"classes/Merge.html":{},"interfaces/OpClassifier.html":{},"interfaces/OperationProperties.html":{},"classes/Pipe.html":{},"classes/Seed.html":{},"interfaces/TopologyDef.html":{}}}],["physical",{"_index":3484,"title":{},"body":{"interfaces/Pedal.html":{},"classes/PedalStatus.html":{},"injectables/PedalsService.html":{}}}],["pi",{"_index":3370,"title":{},"body":{"interfaces/Pedal.html":{},"classes/PedalStatus.html":{},"injectables/PedalsService.html":{}}}],["pi/pc",{"_index":1148,"title":{},"body":{"classes/DBListener.html":{},"classes/DBListenerArray.html":{},"classes/DBNode.html":{},"classes/DBNodeArray.html":{},"classes/DBTwoWay.html":{},"classes/DBTwoWayArray.html":{},"classes/DBWriteBuffer.html":{},"classes/DBWriter.html":{},"classes/DBWriterArray.html":{},"interfaces/NodeMethods.html":{},"interfaces/NodeParams.html":{},"classes/OnlineStatus.html":{}}}],["pi_online",{"_index":3369,"title":{},"body":{"interfaces/Pedal.html":{},"classes/PedalStatus.html":{},"injectables/PedalsService.html":{}}}],["pick",{"_index":3392,"title":{},"body":{"interfaces/Pedal.html":{},"classes/PedalStatus.html":{},"injectables/PedalsService.html":{},"interfaces/PlayerState.html":{},"interfaces/PlayerState-1.html":{},"classes/Shape.html":{},"interfaces/WeavingLog.html":{},"interfaces/WeavingPick.html":{},"interfaces/WeavingPick-1.html":{},"index.html":{}}}],["pick_data",{"_index":3379,"title":{},"body":{"interfaces/Pedal.html":{},"classes/PedalStatus.html":{},"injectables/PedalsService.html":{}}}],["picker",{"_index":4388,"title":{},"body":{"dependencies.html":{}}}],["picknum",{"_index":3740,"title":{},"body":{"interfaces/PlayerState.html":{},"interfaces/PlayerState-1.html":{},"interfaces/WeavingLog.html":{},"interfaces/WeavingPick.html":{},"interfaces/WeavingPick-1.html":{}}}],["picks",{"_index":3391,"title":{},"body":{"interfaces/Pedal.html":{},"classes/PedalStatus.html":{},"injectables/PedalsService.html":{},"interfaces/PlayerState.html":{},"interfaces/PlayerState-1.html":{},"classes/Shape.html":{},"interfaces/WeavingLog.html":{},"interfaces/WeavingPick.html":{},"interfaces/WeavingPick-1.html":{}}}],["pics",{"_index":2083,"title":{},"body":{"components/DraftdetailComponent.html":{}}}],["pid",{"_index":1791,"title":{},"body":{"interfaces/DraftOperationClassification.html":{},"interfaces/LoomConfig.html":{},"classes/PedalConfig.html":{},"injectables/PlayerService.html":{}}}],["pink",{"_index":4124,"title":{},"body":{"components/SnackbarComponent.html":{}}}],["pipe",{"_index":99,"title":{"classes/Pipe.html":{}},"body":{"classes/AbstractOpFactory.html":{},"classes/BaseOp.html":{},"classes/Branch.html":{},"classes/Bus.html":{},"interfaces/ChainOp.html":{},"interfaces/DraftOperationClassification.html":{},"interfaces/DynamicOperation.html":{},"interfaces/LoomConfig.html":{},"classes/Merge.html":{},"interfaces/OpClassifier.html":{},"interfaces/OpInput.html":{},"interfaces/OperationClassification.html":{},"interfaces/OperationProperties.html":{},"interfaces/PairedOp.html":{},"classes/PedalConfig.html":{},"interfaces/PedalEvent.html":{},"classes/Pipe.html":{},"interfaces/PlayerOp.html":{},"injectables/PlayerService.html":{},"classes/Seed.html":{},"interfaces/TopologyDef.html":{},"interfaces/TreeOperation.html":{}}}],["pipe/merge/branch/bus",{"_index":2193,"title":{},"body":{"interfaces/DynamicOperation.html":{},"interfaces/OpInput.html":{},"interfaces/OperationClassification.html":{},"interfaces/TreeOperation.html":{}}}],["pipeline",{"_index":4439,"title":{},"body":{"index.html":{}}}],["pipeop",{"_index":567,"title":{},"body":{"interfaces/ChainOp.html":{},"interfaces/DynamicOperation.html":{},"interfaces/OpInput.html":{},"interfaces/OperationClassification.html":{},"interfaces/PairedOp.html":{},"interfaces/PedalEvent.html":{},"interfaces/PlayerOp.html":{},"interfaces/TreeOperation.html":{}}}],["pipeop.perform(init.draft",{"_index":570,"title":{},"body":{"interfaces/ChainOp.html":{},"interfaces/PairedOp.html":{},"interfaces/PedalEvent.html":{},"interfaces/PlayerOp.html":{}}}],["pipeoperation",{"_index":310,"title":{},"body":{"classes/AbstractOpFactory.html":{},"classes/BaseOp.html":{},"classes/Branch.html":{},"classes/Bus.html":{},"classes/Merge.html":{},"interfaces/OpClassifier.html":{},"interfaces/OperationProperties.html":{},"classes/Pipe.html":{},"classes/Seed.html":{},"interfaces/TopologyDef.html":{}}}],["pixels",{"_index":1460,"title":{},"body":{"interfaces/DesignActions.html":{},"components/MixerViewComponent.html":{},"components/NoteComponent.html":{}}}],["placed",{"_index":1639,"title":{},"body":{"interfaces/DraftMap.html":{},"interfaces/Interlacement.html":{},"interfaces/InterlacementVal.html":{},"classes/Shape.html":{}}}],["placeholder",{"_index":3176,"title":{},"body":{"interfaces/OperationParam.html":{},"classes/Params.html":{},"miscellaneous/typealiases.html":{}}}],["places",{"_index":2319,"title":{},"body":{"interfaces/Ink.html":{},"injectables/InkService.html":{}}}],["playabletreeop",{"_index":580,"title":{},"body":{"interfaces/ChainOp.html":{},"interfaces/PairedOp.html":{},"interfaces/PedalEvent.html":{},"interfaces/PlayerOp.html":{},"miscellaneous/functions.html":{},"miscellaneous/typealiases.html":{}}}],["player",{"_index":487,"title":{},"body":{"interfaces/ChainIndex.html":{},"interfaces/ChainOp.html":{},"interfaces/DraftOperationClassification.html":{},"interfaces/LoomConfig.html":{},"injectables/MappingsService.html":{},"classes/OpSequencer.html":{},"components/OpSequencerComponent.html":{},"interfaces/PairedOp.html":{},"classes/PedalConfig.html":{},"interfaces/PedalEvent.html":{},"components/PlayerComponent.html":{},"interfaces/PlayerOp.html":{},"injectables/PlayerService.html":{},"interfaces/PlayerState.html":{},"interfaces/PlayerState-1.html":{},"injectables/SequencerService.html":{},"interfaces/WeavingLog.html":{},"interfaces/WeavingPick.html":{},"interfaces/WeavingPick-1.html":{},"components/WeavingStateComponent.html":{}}}],["player'},{'name",{"_index":869,"title":{},"body":{"components/ConnectionComponent.html":{},"components/DraftdetailComponent.html":{},"components/ImageComponent.html":{},"components/InletComponent.html":{},"components/MixerViewComponent.html":{},"components/NoteComponent.html":{},"components/OpHelpModal.html":{},"components/OpSequencerComponent.html":{},"components/OpsComponent.html":{},"components/ParameterComponent.html":{},"components/PlayerComponent.html":{},"components/SnackbarComponent.html":{},"components/VirtualPedalsComponent.html":{},"components/WeavingStateComponent.html":{}}}],["player)operations",{"_index":1712,"title":{},"body":{"interfaces/DraftOperationClassification.html":{},"interfaces/LoomConfig.html":{},"classes/PedalConfig.html":{},"injectables/PlayerService.html":{}}}],["player.component",{"_index":3697,"title":{},"body":{"modules/PlayerModule.html":{}}}],["player.component.html",{"_index":3609,"title":{},"body":{"components/PlayerComponent.html":{}}}],["player.component.scss",{"_index":3608,"title":{},"body":{"components/PlayerComponent.html":{}}}],["player.service",{"_index":438,"title":{},"body":{"interfaces/ChainIndex.html":{},"injectables/MappingsService.html":{},"components/OpSequencerComponent.html":{},"components/PlayerComponent.html":{},"injectables/SequencerService.html":{},"components/WeavingStateComponent.html":{}}}],["player/component/player.component",{"_index":2705,"title":{},"body":{"modules/MixerModule.html":{}}}],["player/player.component",{"_index":2708,"title":{},"body":{"modules/MixerModule.html":{}}}],["player/player.module",{"_index":2692,"title":{},"body":{"modules/MixerModule.html":{}}}],["playercomponent",{"_index":868,"title":{"components/PlayerComponent.html":{}},"body":{"components/ConnectionComponent.html":{},"components/DraftdetailComponent.html":{},"components/ImageComponent.html":{},"components/InletComponent.html":{},"modules/MixerModule.html":{},"components/MixerViewComponent.html":{},"components/NoteComponent.html":{},"components/OpHelpModal.html":{},"components/OpSequencerComponent.html":{},"components/OpsComponent.html":{},"components/ParameterComponent.html":{},"components/PlayerComponent.html":{},"modules/PlayerModule.html":{},"components/SnackbarComponent.html":{},"components/VirtualPedalsComponent.html":{},"components/WeavingStateComponent.html":{},"overview.html":{}}}],["playermodule",{"_index":2682,"title":{"modules/PlayerModule.html":{}},"body":{"modules/MixerModule.html":{},"modules/PlayerModule.html":{},"modules.html":{},"overview.html":{}}}],["playerop",{"_index":432,"title":{"interfaces/PlayerOp.html":{}},"body":{"interfaces/ChainIndex.html":{},"interfaces/ChainOp.html":{},"interfaces/DraftOperationClassification.html":{},"interfaces/LoomConfig.html":{},"injectables/MappingsService.html":{},"classes/OpSequencer.html":{},"interfaces/PairedOp.html":{},"classes/PedalConfig.html":{},"interfaces/PedalEvent.html":{},"interfaces/PlayerOp.html":{},"injectables/PlayerService.html":{},"injectables/SequencerService.html":{},"miscellaneous/functions.html":{},"miscellaneous/typealiases.html":{}}}],["playerop[\"perform",{"_index":584,"title":{},"body":{"interfaces/ChainOp.html":{},"interfaces/PairedOp.html":{},"interfaces/PedalEvent.html":{},"interfaces/PlayerOp.html":{}}}],["playeropen",{"_index":3639,"title":{},"body":{"components/PlayerComponent.html":{}}}],["playeropfrom",{"_index":1697,"title":{},"body":{"interfaces/DraftOperationClassification.html":{},"interfaces/LoomConfig.html":{},"classes/PedalConfig.html":{},"injectables/PlayerService.html":{},"miscellaneous/functions.html":{}}}],["playeropfrom(defs.tabby",{"_index":1803,"title":{},"body":{"interfaces/DraftOperationClassification.html":{},"interfaces/LoomConfig.html":{},"classes/PedalConfig.html":{},"injectables/PlayerService.html":{}}}],["playeropfrom(op",{"_index":562,"title":{},"body":{"interfaces/ChainOp.html":{},"interfaces/DraftOperationClassification.html":{},"interfaces/LoomConfig.html":{},"interfaces/PairedOp.html":{},"classes/PedalConfig.html":{},"interfaces/PedalEvent.html":{},"interfaces/PlayerOp.html":{},"injectables/PlayerService.html":{},"miscellaneous/functions.html":{}}}],["playeropfromtree",{"_index":581,"title":{},"body":{"interfaces/ChainOp.html":{},"interfaces/PairedOp.html":{},"interfaces/PedalEvent.html":{},"interfaces/PlayerOp.html":{},"miscellaneous/functions.html":{}}}],["playeropfromtree(op",{"_index":583,"title":{},"body":{"interfaces/ChainOp.html":{},"interfaces/PairedOp.html":{},"interfaces/PedalEvent.html":{},"interfaces/PlayerOp.html":{},"miscellaneous/functions.html":{}}}],["playerservice",{"_index":437,"title":{"injectables/PlayerService.html":{}},"body":{"interfaces/ChainIndex.html":{},"interfaces/DraftOperationClassification.html":{},"interfaces/LoomConfig.html":{},"injectables/MappingsService.html":{},"components/OpSequencerComponent.html":{},"classes/PedalConfig.html":{},"components/PlayerComponent.html":{},"injectables/PlayerService.html":{},"injectables/SequencerService.html":{},"components/WeavingStateComponent.html":{}}}],["playerstate",{"_index":532,"title":{"interfaces/PlayerState.html":{},"interfaces/PlayerState-1.html":{}},"body":{"interfaces/ChainOp.html":{},"interfaces/DraftOperationClassification.html":{},"interfaces/LoomConfig.html":{},"classes/OpSequencer.html":{},"interfaces/PairedOp.html":{},"classes/PedalConfig.html":{},"interfaces/PedalEvent.html":{},"interfaces/PlayerOp.html":{},"injectables/PlayerService.html":{},"interfaces/PlayerState.html":{},"interfaces/PlayerState-1.html":{},"injectables/SequencerService.html":{},"interfaces/WeavingLog.html":{},"interfaces/WeavingPick.html":{},"interfaces/WeavingPick-1.html":{},"miscellaneous/functions.html":{}}}],["pls",{"_index":3082,"title":{},"body":{"components/OpSequencerComponent.html":{},"components/PlayerComponent.html":{},"components/WeavingStateComponent.html":{}}}],["pls.draft",{"_index":3642,"title":{},"body":{"components/PlayerComponent.html":{}}}],["pls.draft(value",{"_index":3644,"title":{},"body":{"components/PlayerComponent.html":{}}}],["plus",{"_index":2334,"title":{},"body":{"interfaces/Ink.html":{},"injectables/InkService.html":{}}}],["point",{"_index":345,"title":{"interfaces/Point.html":{}},"body":{"interfaces/Bounds.html":{},"components/ConnectionComponent.html":{},"interfaces/DesignActions.html":{},"injectables/MappingsService.html":{},"directives/MarqueeComponent.html":{},"components/MixerViewComponent.html":{},"components/NoteComponent.html":{},"interfaces/Point.html":{},"directives/SelectionComponent.html":{},"injectables/ViewportService.html":{},"miscellaneous/typealiases.html":{}}}],["pointer",{"_index":2823,"title":{},"body":{"components/MixerViewComponent.html":{},"components/NoteComponent.html":{},"components/SnackbarComponent.html":{}}}],["pointer.x",{"_index":2826,"title":{},"body":{"components/MixerViewComponent.html":{}}}],["pointer.y",{"_index":2830,"title":{},"body":{"components/MixerViewComponent.html":{}}}],["pointer:point",{"_index":2906,"title":{},"body":{"components/NoteComponent.html":{}}}],["pointeroffsetinglobal",{"_index":2825,"title":{},"body":{"components/MixerViewComponent.html":{}}}],["pointeroffsetinglobal.x",{"_index":2834,"title":{},"body":{"components/MixerViewComponent.html":{}}}],["pointeroffsetinglobal.y",{"_index":2835,"title":{},"body":{"components/MixerViewComponent.html":{}}}],["pointing",{"_index":458,"title":{},"body":{"interfaces/ChainIndex.html":{},"injectables/SequencerService.html":{}}}],["points",{"_index":913,"title":{},"body":{"interfaces/Crossing.html":{},"interfaces/DensityUnits.html":{},"interfaces/DesignMode.html":{},"interfaces/LoomTypes.html":{},"interfaces/MaterialTypes.html":{},"interfaces/Vertex.html":{},"interfaces/ViewModes.html":{},"interfaces/YarnPath.html":{},"index.html":{}}}],["poistion",{"_index":1519,"title":{},"body":{"interfaces/DesignActions.html":{}}}],["popnode",{"_index":1070,"title":{},"body":{"classes/DBListener.html":{},"classes/DBListenerArray.html":{},"classes/DBNode.html":{},"classes/DBNodeArray.html":{},"classes/DBTwoWay.html":{},"classes/DBTwoWayArray.html":{},"classes/DBWriteBuffer.html":{},"classes/DBWriter.html":{},"classes/DBWriterArray.html":{},"interfaces/NodeMethods.html":{},"interfaces/NodeParams.html":{},"classes/OnlineStatus.html":{}}}],["port",{"_index":1475,"title":{},"body":{"interfaces/DesignActions.html":{}}}],["pos",{"_index":428,"title":{},"body":{"interfaces/ChainIndex.html":{},"injectables/SequencerService.html":{},"classes/Shape.html":{}}}],["position",{"_index":348,"title":{},"body":{"interfaces/Bounds.html":{},"interfaces/ChainIndex.html":{},"components/ConnectionComponent.html":{},"interfaces/DesignActions.html":{},"interfaces/DraftMap.html":{},"interfaces/DraftNodeProxy.html":{},"interfaces/FileObj.html":{},"interfaces/FileSaver.html":{},"interfaces/Fileloader.html":{},"components/InletComponent.html":{},"interfaces/Interlacement.html":{},"interfaces/InterlacementVal.html":{},"interfaces/LoadResponse.html":{},"components/MixerViewComponent.html":{},"interfaces/NodeComponentProxy.html":{},"components/NoteComponent.html":{},"interfaces/OpComponentProxy.html":{},"components/ParameterComponent.html":{},"interfaces/Point.html":{},"interfaces/SaveObj.html":{},"injectables/SequencerService.html":{},"interfaces/StatusMessage.html":{},"interfaces/TreeNodeProxy.html":{},"injectables/ViewportService.html":{},"index.html":{}}}],["positions",{"_index":3750,"title":{},"body":{"interfaces/Point.html":{}}}],["preferences",{"_index":4647,"title":{},"body":{"miscellaneous/typealiases.html":{}}}],["prepare",{"_index":2218,"title":{},"body":{"interfaces/DynamicOperation.html":{},"interfaces/OpInput.html":{},"interfaces/OperationClassification.html":{},"interfaces/TreeOperation.html":{}}}],["prerequisites",{"_index":4485,"title":{},"body":{"index.html":{}}}],["present",{"_index":402,"title":{},"body":{"classes/Cell.html":{},"interfaces/DraftNodeProxy.html":{},"interfaces/FileObj.html":{},"interfaces/FileSaver.html":{},"interfaces/Fileloader.html":{},"interfaces/LoadResponse.html":{},"interfaces/NodeComponentProxy.html":{},"interfaces/OpComponentProxy.html":{},"interfaces/SaveObj.html":{},"interfaces/StatusMessage.html":{},"interfaces/TreeNodeProxy.html":{}}}],["prev",{"_index":3065,"title":{},"body":{"classes/OpSequencer.html":{}}}],["preview",{"_index":2769,"title":{},"body":{"components/MixerViewComponent.html":{}}}],["previewing",{"_index":3735,"title":{},"body":{"interfaces/PlayerState.html":{},"interfaces/PlayerState-1.html":{},"interfaces/WeavingLog.html":{},"interfaces/WeavingPick.html":{},"interfaces/WeavingPick-1.html":{}}}],["previous",{"_index":2350,"title":{},"body":{"interfaces/Ink.html":{},"injectables/InkService.html":{}}}],["previously",{"_index":1444,"title":{},"body":{"interfaces/DesignActions.html":{},"components/PlayerComponent.html":{},"index.html":{}}}],["prevop",{"_index":516,"title":{},"body":{"interfaces/ChainIndex.html":{},"classes/OpSequencer.html":{},"injectables/SequencerService.html":{}}}],["primary.is",{"_index":3343,"title":{},"body":{"components/ParameterComponent.html":{}}}],["printbounds",{"_index":3944,"title":{},"body":{"classes/Shape.html":{}}}],["printing",{"_index":2879,"title":{},"body":{"components/NoteComponent.html":{}}}],["prior",{"_index":2170,"title":{},"body":{"interfaces/DynamicOperation.html":{},"interfaces/OpInput.html":{},"interfaces/OperationClassification.html":{},"interfaces/TreeOperation.html":{}}}],["private",{"_index":1345,"title":{},"body":{"interfaces/DesignActions.html":{},"interfaces/DraftOperationClassification.html":{},"components/DraftdetailComponent.html":{},"interfaces/Ink.html":{},"injectables/InkService.html":{},"components/InletComponent.html":{},"interfaces/LoomConfig.html":{},"injectables/MappingsService.html":{},"components/MixerViewComponent.html":{},"components/NoteComponent.html":{},"components/OpHelpModal.html":{},"components/OpsComponent.html":{},"classes/PedalConfig.html":{},"components/PlayerComponent.html":{},"injectables/PlayerService.html":{},"classes/Render.html":{}}}],["process",{"_index":4526,"title":{},"body":{"index.html":{}}}],["prod",{"_index":4616,"title":{},"body":{"index.html":{}}}],["producing",{"_index":4582,"title":{},"body":{"index.html":{}}}],["production",{"_index":4617,"title":{},"body":{"index.html":{}}}],["program",{"_index":4559,"title":{},"body":{"index.html":{}}}],["progress",{"_index":543,"title":{},"body":{"interfaces/ChainOp.html":{},"interfaces/DraftOperationClassification.html":{},"interfaces/LoomConfig.html":{},"classes/OpSequencer.html":{},"interfaces/PairedOp.html":{},"classes/PedalConfig.html":{},"interfaces/PedalEvent.html":{},"interfaces/PlayerOp.html":{},"injectables/PlayerService.html":{}}}],["progressive",{"_index":4481,"title":{},"body":{"index.html":{}}}],["project",{"_index":4446,"title":{},"body":{"index.html":{}}}],["promise",{"_index":539,"title":{},"body":{"interfaces/ChainOp.html":{},"interfaces/DesignActions.html":{},"interfaces/DraftNodeProxy.html":{},"interfaces/DynamicOperation.html":{},"interfaces/FileObj.html":{},"interfaces/FileSaver.html":{},"interfaces/Fileloader.html":{},"interfaces/LoadResponse.html":{},"interfaces/NodeComponentProxy.html":{},"interfaces/OpComponentProxy.html":{},"interfaces/OpInput.html":{},"classes/OpSequencer.html":{},"interfaces/OperationClassification.html":{},"interfaces/PairedOp.html":{},"interfaces/PedalEvent.html":{},"interfaces/PlayerOp.html":{},"interfaces/SaveObj.html":{},"injectables/SequencerService.html":{},"interfaces/StatusMessage.html":{},"interfaces/TreeNodeProxy.html":{},"interfaces/TreeOperation.html":{}}}],["promise.resolve",{"_index":2207,"title":{},"body":{"interfaces/DynamicOperation.html":{},"interfaces/OpInput.html":{},"interfaces/OperationClassification.html":{},"interfaces/TreeOperation.html":{}}}],["promise.resolve([mergeop.perform(inputs",{"_index":2222,"title":{},"body":{"interfaces/DynamicOperation.html":{},"interfaces/OpInput.html":{},"interfaces/OperationClassification.html":{},"interfaces/TreeOperation.html":{}}}],["promise.resolve([pipeop.perform(getdraftsfrominputs(op_inputs)[0",{"_index":2208,"title":{},"body":{"interfaces/DynamicOperation.html":{},"interfaces/OpInput.html":{},"interfaces/OperationClassification.html":{},"interfaces/TreeOperation.html":{}}}],["promise.resolve([pipeop.perform(op_inputs[0].drafts[0",{"_index":2212,"title":{},"body":{"interfaces/DynamicOperation.html":{},"interfaces/OpInput.html":{},"interfaces/OperationClassification.html":{},"interfaces/TreeOperation.html":{}}}],["promise.resolve([seedop.perform(op_inputs[0].params",{"_index":2199,"title":{},"body":{"interfaces/DynamicOperation.html":{},"interfaces/OpInput.html":{},"interfaces/OperationClassification.html":{},"interfaces/TreeOperation.html":{}}}],["promise.resolve(branchop.perform(op_inputs[1].drafts[0",{"_index":2230,"title":{},"body":{"interfaces/DynamicOperation.html":{},"interfaces/OpInput.html":{},"interfaces/OperationClassification.html":{},"interfaces/TreeOperation.html":{}}}],["promise.resolve(init",{"_index":616,"title":{},"body":{"interfaces/ChainOp.html":{},"interfaces/PairedOp.html":{},"interfaces/PedalEvent.html":{},"interfaces/PlayerOp.html":{}}}],["promise.resolve(newstate",{"_index":632,"title":{},"body":{"interfaces/ChainOp.html":{},"interfaces/PairedOp.html":{},"interfaces/PedalEvent.html":{},"interfaces/PlayerOp.html":{}}}],["promise.resolve(res",{"_index":553,"title":{},"body":{"interfaces/ChainOp.html":{},"interfaces/DraftOperationClassification.html":{},"interfaces/LoomConfig.html":{},"classes/OpSequencer.html":{},"interfaces/PairedOp.html":{},"classes/PedalConfig.html":{},"interfaces/PedalEvent.html":{},"interfaces/PlayerOp.html":{},"injectables/PlayerService.html":{}}}],["properly",{"_index":4539,"title":{},"body":{"index.html":{}}}],["properties",{"_index":319,"title":{"properties.html":{}},"body":{"classes/BaseOp.html":{},"interfaces/Bounds.html":{},"classes/Branch.html":{},"classes/Bus.html":{},"classes/Cell.html":{},"interfaces/ChainIndex.html":{},"interfaces/ChainOp.html":{},"components/ConnectionComponent.html":{},"interfaces/Crossing.html":{},"classes/DBListener.html":{},"classes/DBListenerArray.html":{},"classes/DBNode.html":{},"classes/DBNodeArray.html":{},"classes/DBTwoWay.html":{},"classes/DBTwoWayArray.html":{},"classes/DBWriteBuffer.html":{},"classes/DBWriter.html":{},"classes/DBWriterArray.html":{},"interfaces/DensityUnits.html":{},"interfaces/DesignActions.html":{},"interfaces/DesignMode.html":{},"interfaces/DraftMap.html":{},"interfaces/DraftNodeProxy.html":{},"interfaces/DraftOperationClassification.html":{},"components/DraftdetailComponent.html":{},"interfaces/DynamicOperation.html":{},"interfaces/FileObj.html":{},"interfaces/FileSaver.html":{},"interfaces/Fileloader.html":{},"interfaces/IOTuple.html":{},"interfaces/Ink.html":{},"injectables/InkService.html":{},"components/InletComponent.html":{},"interfaces/Interlacement.html":{},"interfaces/InterlacementVal.html":{},"injectables/LayersService.html":{},"interfaces/LoadResponse.html":{},"interfaces/LoomConfig.html":{},"interfaces/LoomTypes.html":{},"injectables/MappingsService.html":{},"directives/MarqueeComponent.html":{},"interfaces/MaterialTypes.html":{},"classes/Merge.html":{},"components/MixerViewComponent.html":{},"interfaces/NodeComponentProxy.html":{},"interfaces/NodeParams.html":{},"components/NoteComponent.html":{},"classes/OnlineStatus.html":{},"interfaces/OpClassifier.html":{},"interfaces/OpComponentProxy.html":{},"components/OpHelpModal.html":{},"interfaces/OpInput.html":{},"classes/OpSequencer.html":{},"components/OpSequencerComponent.html":{},"interfaces/OperationClassification.html":{},"interfaces/OperationParam.html":{},"interfaces/OperationProperties.html":{},"components/OpsComponent.html":{},"interfaces/PairedOp.html":{},"components/ParameterComponent.html":{},"interfaces/Pedal.html":{},"classes/PedalConfig.html":{},"interfaces/PedalEvent.html":{},"classes/PedalStatus.html":{},"injectables/PedalsService.html":{},"classes/Pipe.html":{},"components/PlayerComponent.html":{},"interfaces/PlayerOp.html":{},"injectables/PlayerService.html":{},"interfaces/PlayerState.html":{},"interfaces/PlayerState-1.html":{},"interfaces/Point.html":{},"classes/Render.html":{},"interfaces/SaveObj.html":{},"classes/Seed.html":{},"classes/Selection.html":{},"directives/SelectionComponent.html":{},"injectables/SequencerService.html":{},"classes/Shape.html":{},"classes/Shape-1.html":{},"classes/Shuttle.html":{},"components/SnackbarComponent.html":{},"interfaces/StatusMessage.html":{},"classes/System.html":{},"interfaces/TopologyDef.html":{},"interfaces/TreeNode.html":{},"interfaces/TreeNodeProxy.html":{},"interfaces/TreeOperation.html":{},"interfaces/Vertex.html":{},"interfaces/ViewModes.html":{},"injectables/ViewportService.html":{},"components/VirtualPedalsComponent.html":{},"interfaces/WeavingLog.html":{},"interfaces/WeavingPick.html":{},"interfaces/WeavingPick-1.html":{},"components/WeavingStateComponent.html":{},"interfaces/YarnPath.html":{},"properties.html":{}}}],["property",{"_index":2016,"title":{},"body":{"components/DraftdetailComponent.html":{}}}],["provide",{"_index":3026,"title":{},"body":{"classes/OpSequencer.html":{}}}],["provided",{"_index":3147,"title":{},"body":{"interfaces/OperationParam.html":{},"index.html":{}}}],["providedin",{"_index":452,"title":{},"body":{"interfaces/ChainIndex.html":{},"interfaces/DraftOperationClassification.html":{},"interfaces/Ink.html":{},"injectables/InkService.html":{},"injectables/LayersService.html":{},"interfaces/LoomConfig.html":{},"injectables/MappingsService.html":{},"interfaces/Pedal.html":{},"classes/PedalConfig.html":{},"classes/PedalStatus.html":{},"injectables/PedalsService.html":{},"injectables/PlayerService.html":{},"injectables/SequencerService.html":{},"injectables/ViewportService.html":{}}}],["provider",{"_index":4535,"title":{},"body":{"index.html":{}}}],["provider/ink.service",{"_index":1314,"title":{},"body":{"interfaces/DesignActions.html":{},"components/DraftdetailComponent.html":{}}}],["provider/layers.service",{"_index":1316,"title":{},"body":{"interfaces/DesignActions.html":{}}}],["provider/mappings.service",{"_index":1702,"title":{},"body":{"interfaces/DraftOperationClassification.html":{},"interfaces/LoomConfig.html":{},"classes/PedalConfig.html":{},"injectables/PlayerService.html":{}}}],["provider/notes.service",{"_index":1654,"title":{},"body":{"interfaces/DraftNodeProxy.html":{},"interfaces/FileObj.html":{},"interfaces/FileSaver.html":{},"interfaces/Fileloader.html":{},"interfaces/LoadResponse.html":{},"interfaces/NodeComponentProxy.html":{},"interfaces/OpComponentProxy.html":{},"interfaces/SaveObj.html":{},"interfaces/StatusMessage.html":{},"interfaces/TreeNodeProxy.html":{}}}],["provider/operation.service",{"_index":1320,"title":{},"body":{"interfaces/DesignActions.html":{},"components/DraftdetailComponent.html":{},"components/InletComponent.html":{},"components/OpHelpModal.html":{},"components/OpsComponent.html":{}}}],["provider/pedals.service",{"_index":1704,"title":{},"body":{"interfaces/DraftOperationClassification.html":{},"interfaces/LoomConfig.html":{},"components/OpSequencerComponent.html":{},"classes/PedalConfig.html":{},"injectables/PlayerService.html":{},"components/VirtualPedalsComponent.html":{},"components/WeavingStateComponent.html":{}}}],["provider/sequencer.service",{"_index":1705,"title":{},"body":{"interfaces/DraftOperationClassification.html":{},"interfaces/LoomConfig.html":{},"components/OpSequencerComponent.html":{},"classes/PedalConfig.html":{},"injectables/PlayerService.html":{}}}],["provider/systems.service",{"_index":3806,"title":{},"body":{"classes/Render.html":{}}}],["provider/tree.service",{"_index":730,"title":{},"body":{"components/ConnectionComponent.html":{},"interfaces/DesignActions.html":{},"components/DraftdetailComponent.html":{},"components/InletComponent.html":{},"components/ParameterComponent.html":{}}}],["provider/viewport.service",{"_index":1324,"title":{},"body":{"interfaces/DesignActions.html":{},"components/MixerViewComponent.html":{},"components/NoteComponent.html":{}}}],["provides",{"_index":4524,"title":{},"body":{"index.html":{}}}],["public",{"_index":467,"title":{},"body":{"interfaces/ChainIndex.html":{},"components/ConnectionComponent.html":{},"interfaces/DesignActions.html":{},"interfaces/DraftOperationClassification.html":{},"components/DraftdetailComponent.html":{},"components/InletComponent.html":{},"interfaces/LoomConfig.html":{},"injectables/MappingsService.html":{},"directives/MarqueeComponent.html":{},"components/MixerViewComponent.html":{},"components/OpHelpModal.html":{},"components/OpSequencerComponent.html":{},"components/OpsComponent.html":{},"components/ParameterComponent.html":{},"classes/PedalConfig.html":{},"components/PlayerComponent.html":{},"injectables/PlayerService.html":{},"directives/SelectionComponent.html":{},"injectables/SequencerService.html":{},"components/SnackbarComponent.html":{},"components/VirtualPedalsComponent.html":{},"components/WeavingStateComponent.html":{}}}],["publishglobalutil",{"_index":2762,"title":{},"body":{"components/MixerViewComponent.html":{}}}],["pump",{"_index":3375,"title":{},"body":{"interfaces/Pedal.html":{},"classes/PedalStatus.html":{},"injectables/PedalsService.html":{}}}],["purposes",{"_index":4569,"title":{},"body":{"index.html":{}}}],["push",{"_index":975,"title":{},"body":{"classes/DBListener.html":{},"classes/DBListenerArray.html":{},"classes/DBNode.html":{},"classes/DBNodeArray.html":{},"classes/DBTwoWay.html":{},"classes/DBTwoWayArray.html":{},"classes/DBWriteBuffer.html":{},"classes/DBWriter.html":{},"classes/DBWriterArray.html":{},"interfaces/NodeMethods.html":{},"interfaces/NodeParams.html":{},"classes/OnlineStatus.html":{}}}],["push(this.parentnode.ref",{"_index":1135,"title":{},"body":{"classes/DBListener.html":{},"classes/DBListenerArray.html":{},"classes/DBNode.html":{},"classes/DBNodeArray.html":{},"classes/DBTwoWay.html":{},"classes/DBTwoWayArray.html":{},"classes/DBWriteBuffer.html":{},"classes/DBWriter.html":{},"classes/DBWriterArray.html":{},"interfaces/NodeMethods.html":{},"interfaces/NodeParams.html":{},"classes/OnlineStatus.html":{}}}],["pushing",{"_index":4468,"title":{},"body":{"index.html":{}}}],["pushnode",{"_index":1178,"title":{},"body":{"classes/DBListenerArray.html":{},"classes/DBNodeArray.html":{},"classes/DBTwoWayArray.html":{},"classes/DBWriterArray.html":{}}}],["pushnode(n",{"_index":1068,"title":{},"body":{"classes/DBListener.html":{},"classes/DBListenerArray.html":{},"classes/DBNode.html":{},"classes/DBNodeArray.html":{},"classes/DBTwoWay.html":{},"classes/DBTwoWayArray.html":{},"classes/DBWriteBuffer.html":{},"classes/DBWriter.html":{},"classes/DBWriterArray.html":{},"interfaces/NodeMethods.html":{},"interfaces/NodeParams.html":{},"classes/OnlineStatus.html":{}}}],["put",{"_index":2195,"title":{},"body":{"interfaces/DynamicOperation.html":{},"interfaces/OpInput.html":{},"interfaces/OperationClassification.html":{},"interfaces/TreeOperation.html":{}}}],["px",{"_index":3677,"title":{},"body":{"components/PlayerComponent.html":{}}}],["query",{"_index":971,"title":{},"body":{"classes/DBListener.html":{},"classes/DBListenerArray.html":{},"classes/DBNode.html":{},"classes/DBNodeArray.html":{},"classes/DBTwoWay.html":{},"classes/DBTwoWayArray.html":{},"classes/DBWriteBuffer.html":{},"classes/DBWriter.html":{},"classes/DBWriterArray.html":{},"interfaces/NodeMethods.html":{},"interfaces/NodeParams.html":{},"classes/OnlineStatus.html":{}}}],["question",{"_index":1520,"title":{},"body":{"interfaces/DesignActions.html":{}}}],["queue",{"_index":3009,"title":{},"body":{"classes/OpSequencer.html":{}}}],["r",{"_index":2614,"title":{},"body":{"injectables/MappingsService.html":{},"injectables/PedalsService.html":{}}}],["r.p_select_a",{"_index":2617,"title":{},"body":{"injectables/MappingsService.html":{}}}],["r.p_select_b",{"_index":2618,"title":{},"body":{"injectables/MappingsService.html":{}}}],["radius",{"_index":3111,"title":{},"body":{"components/OpSequencerComponent.html":{},"components/PlayerComponent.html":{},"components/WeavingStateComponent.html":{}}}],["random",{"_index":1830,"title":{},"body":{"interfaces/DraftOperationClassification.html":{},"interfaces/LoomConfig.html":{},"classes/PedalConfig.html":{},"components/PlayerComponent.html":{},"injectables/PlayerService.html":{}}}],["ratio",{"_index":2766,"title":{},"body":{"components/MixerViewComponent.html":{},"classes/Shape.html":{}}}],["re",{"_index":555,"title":{},"body":{"interfaces/ChainOp.html":{},"interfaces/PairedOp.html":{},"interfaces/PedalEvent.html":{},"interfaces/PlayerOp.html":{}}}],["read",{"_index":890,"title":{},"body":{"interfaces/Crossing.html":{},"components/DraftdetailComponent.html":{},"classes/Shape-1.html":{},"interfaces/Vertex.html":{},"interfaces/YarnPath.html":{},"index.html":{}}}],["readme",{"_index":4619,"title":{},"body":{"index.html":{}}}],["reads",{"_index":1015,"title":{},"body":{"classes/DBListener.html":{},"classes/DBListenerArray.html":{},"classes/DBNode.html":{},"classes/DBNodeArray.html":{},"classes/DBTwoWay.html":{},"classes/DBTwoWayArray.html":{},"classes/DBWriteBuffer.html":{},"classes/DBWriter.html":{},"classes/DBWriterArray.html":{},"interfaces/NodeMethods.html":{},"interfaces/NodeParams.html":{},"classes/OnlineStatus.html":{}}}],["ready",{"_index":1060,"title":{},"body":{"classes/DBListener.html":{},"classes/DBListenerArray.html":{},"classes/DBNode.html":{},"classes/DBNodeArray.html":{},"classes/DBTwoWay.html":{},"classes/DBTwoWayArray.html":{},"classes/DBWriteBuffer.html":{},"classes/DBWriter.html":{},"classes/DBWriterArray.html":{},"interfaces/NodeMethods.html":{},"interfaces/NodeParams.html":{},"classes/OnlineStatus.html":{},"interfaces/Pedal.html":{},"classes/PedalStatus.html":{},"injectables/PedalsService.html":{},"index.html":{}}}],["readytoweave",{"_index":1882,"title":{},"body":{"interfaces/DraftOperationClassification.html":{},"interfaces/LoomConfig.html":{},"classes/OpSequencer.html":{},"interfaces/Pedal.html":{},"classes/PedalConfig.html":{},"classes/PedalStatus.html":{},"injectables/PedalsService.html":{},"injectables/PlayerService.html":{}}}],["really",{"_index":3072,"title":{},"body":{"classes/OpSequencer.html":{}}}],["recalcuated",{"_index":2274,"title":{},"body":{"interfaces/IOTuple.html":{},"interfaces/TreeNode.html":{}}}],["recalculate",{"_index":1396,"title":{},"body":{"interfaces/DesignActions.html":{}}}],["receipt",{"_index":1040,"title":{},"body":{"classes/DBListener.html":{},"classes/DBListenerArray.html":{},"classes/DBNode.html":{},"classes/DBNodeArray.html":{},"classes/DBTwoWay.html":{},"classes/DBTwoWayArray.html":{},"classes/DBWriteBuffer.html":{},"classes/DBWriter.html":{},"classes/DBWriterArray.html":{},"interfaces/NodeMethods.html":{},"interfaces/NodeParams.html":{},"classes/OnlineStatus.html":{}}}],["receive",{"_index":3736,"title":{},"body":{"interfaces/PlayerState.html":{},"interfaces/PlayerState-1.html":{},"interfaces/WeavingLog.html":{},"interfaces/WeavingPick.html":{},"interfaces/WeavingPick-1.html":{},"index.html":{}}}],["recognize",{"_index":2183,"title":{},"body":{"interfaces/DynamicOperation.html":{},"interfaces/OpInput.html":{},"interfaces/OperationClassification.html":{},"interfaces/TreeOperation.html":{}}}],["rectanble",{"_index":349,"title":{},"body":{"interfaces/Bounds.html":{},"interfaces/Point.html":{}}}],["rectangle",{"_index":340,"title":{},"body":{"interfaces/Bounds.html":{},"interfaces/Point.html":{}}}],["red",{"_index":3348,"title":{},"body":{"components/ParameterComponent.html":{}}}],["redraw",{"_index":1464,"title":{},"body":{"interfaces/DesignActions.html":{},"interfaces/DraftOperationClassification.html":{},"components/DraftdetailComponent.html":{},"interfaces/LoomConfig.html":{},"components/NoteComponent.html":{},"classes/PedalConfig.html":{},"injectables/PlayerService.html":{}}}],["redrawn",{"_index":2275,"title":{},"body":{"interfaces/IOTuple.html":{},"interfaces/TreeNode.html":{}}}],["reduce((a",{"_index":1898,"title":{},"body":{"interfaces/DraftOperationClassification.html":{},"interfaces/LoomConfig.html":{},"classes/PedalConfig.html":{},"injectables/PlayerService.html":{}}}],["ref",{"_index":970,"title":{},"body":{"classes/DBListener.html":{},"classes/DBListenerArray.html":{},"classes/DBNode.html":{},"classes/DBNodeArray.html":{},"classes/DBTwoWay.html":{},"classes/DBTwoWayArray.html":{},"classes/DBWriteBuffer.html":{},"classes/DBWriter.html":{},"classes/DBWriterArray.html":{},"interfaces/IOTuple.html":{},"interfaces/NodeMethods.html":{},"interfaces/NodeParams.html":{},"classes/OnlineStatus.html":{},"interfaces/TreeNode.html":{}}}],["ref(params.db",{"_index":994,"title":{},"body":{"classes/DBListener.html":{},"classes/DBListenerArray.html":{},"classes/DBNode.html":{},"classes/DBNodeArray.html":{},"classes/DBTwoWay.html":{},"classes/DBTwoWayArray.html":{},"classes/DBWriteBuffer.html":{},"classes/DBWriter.html":{},"classes/DBWriterArray.html":{},"interfaces/NodeMethods.html":{},"interfaces/NodeParams.html":{},"classes/OnlineStatus.html":{}}}],["refer",{"_index":1612,"title":{},"body":{"interfaces/DraftMap.html":{},"interfaces/Interlacement.html":{},"interfaces/InterlacementVal.html":{},"index.html":{}}}],["reference",{"_index":1292,"title":{},"body":{"interfaces/DensityUnits.html":{},"interfaces/DesignActions.html":{},"interfaces/DesignMode.html":{},"components/DraftdetailComponent.html":{},"interfaces/IOTuple.html":{},"interfaces/LoomTypes.html":{},"injectables/MappingsService.html":{},"interfaces/MaterialTypes.html":{},"interfaces/TreeNode.html":{},"interfaces/ViewModes.html":{},"injectables/ViewportService.html":{}}}],["references",{"_index":4232,"title":{},"body":{"injectables/ViewportService.html":{},"index.html":{}}}],["referencing",{"_index":3747,"title":{},"body":{"interfaces/Point.html":{},"injectables/ViewportService.html":{}}}],["referes",{"_index":2169,"title":{},"body":{"interfaces/DynamicOperation.html":{},"interfaces/OpInput.html":{},"interfaces/OperationClassification.html":{},"interfaces/TreeOperation.html":{}}}],["refers",{"_index":91,"title":{},"body":{"classes/AbstractOpFactory.html":{},"classes/BaseOp.html":{},"classes/Branch.html":{},"classes/Bus.html":{},"interfaces/Crossing.html":{},"interfaces/DraftNodeProxy.html":{},"interfaces/FileObj.html":{},"interfaces/FileSaver.html":{},"interfaces/Fileloader.html":{},"interfaces/LoadResponse.html":{},"classes/Merge.html":{},"interfaces/NodeComponentProxy.html":{},"interfaces/OpClassifier.html":{},"interfaces/OpComponentProxy.html":{},"interfaces/OperationProperties.html":{},"classes/Pipe.html":{},"interfaces/SaveObj.html":{},"classes/Seed.html":{},"interfaces/StatusMessage.html":{},"interfaces/TopologyDef.html":{},"interfaces/TreeNodeProxy.html":{},"interfaces/Vertex.html":{},"interfaces/YarnPath.html":{}}}],["reflect",{"_index":3982,"title":{},"body":{"classes/Shape.html":{}}}],["refresh",{"_index":554,"title":{},"body":{"interfaces/ChainOp.html":{},"interfaces/DraftOperationClassification.html":{},"interfaces/LoomConfig.html":{},"interfaces/PairedOp.html":{},"components/ParameterComponent.html":{},"classes/PedalConfig.html":{},"interfaces/PedalEvent.html":{},"interfaces/PlayerOp.html":{},"injectables/PlayerService.html":{}}}],["refs",{"_index":3658,"title":{},"body":{"components/PlayerComponent.html":{},"components/WeavingStateComponent.html":{}}}],["regex",{"_index":3166,"title":{},"body":{"interfaces/OperationParam.html":{},"classes/Params.html":{}}}],["regex101",{"_index":3169,"title":{},"body":{"interfaces/OperationParam.html":{},"classes/Params.html":{}}}],["regexp",{"_index":3175,"title":{},"body":{"interfaces/OperationParam.html":{},"components/ParameterComponent.html":{},"classes/Params.html":{},"miscellaneous/functions.html":{}}}],["regexp(namere",{"_index":3300,"title":{},"body":{"components/ParameterComponent.html":{}}}],["regexvalidator",{"_index":4419,"title":{},"body":{"miscellaneous/functions.html":{}}}],["regexvalidator((this.param).regex",{"_index":3317,"title":{},"body":{"components/ParameterComponent.html":{}}}],["regexvalidator(namere",{"_index":3298,"title":{},"body":{"components/ParameterComponent.html":{},"miscellaneous/functions.html":{}}}],["region",{"_index":3997,"title":{},"body":{"classes/Shape-1.html":{}}}],["register",{"_index":2587,"title":{},"body":{"injectables/MappingsService.html":{}}}],["regular",{"_index":3430,"title":{},"body":{"interfaces/Pedal.html":{},"classes/PedalStatus.html":{},"injectables/PedalsService.html":{}}}],["relaitonships",{"_index":4585,"title":{},"body":{"index.html":{}}}],["related",{"_index":1605,"title":{},"body":{"interfaces/DraftMap.html":{},"interfaces/DynamicOperation.html":{},"interfaces/IOTuple.html":{},"interfaces/Interlacement.html":{},"interfaces/InterlacementVal.html":{},"interfaces/OpInput.html":{},"interfaces/OperationClassification.html":{},"interfaces/TreeNode.html":{},"interfaces/TreeOperation.html":{},"miscellaneous/typealiases.html":{}}}],["relating",{"_index":4563,"title":{},"body":{"index.html":{}}}],["relationship",{"_index":887,"title":{},"body":{"interfaces/Crossing.html":{},"classes/System.html":{},"interfaces/Vertex.html":{},"interfaces/YarnPath.html":{},"miscellaneous/typealiases.html":{}}}],["relationships",{"_index":2287,"title":{},"body":{"interfaces/IOTuple.html":{},"interfaces/TreeNode.html":{},"index.html":{}}}],["relative",{"_index":906,"title":{},"body":{"interfaces/Crossing.html":{},"interfaces/DesignActions.html":{},"components/InletComponent.html":{},"components/MixerViewComponent.html":{},"components/ParameterComponent.html":{},"interfaces/Vertex.html":{},"interfaces/YarnPath.html":{}}}],["relative:point",{"_index":2907,"title":{},"body":{"components/NoteComponent.html":{}}}],["release",{"_index":4443,"title":{},"body":{"index.html":{}}}],["relevant",{"_index":4538,"title":{},"body":{"index.html":{}}}],["reload",{"_index":399,"title":{},"body":{"classes/Cell.html":{},"index.html":{}}}],["reloadcell",{"_index":374,"title":{},"body":{"classes/Cell.html":{}}}],["reloadcell(params",{"_index":396,"title":{},"body":{"classes/Cell.html":{}}}],["reloading",{"_index":1666,"title":{},"body":{"interfaces/DraftNodeProxy.html":{},"interfaces/FileObj.html":{},"interfaces/FileSaver.html":{},"interfaces/Fileloader.html":{},"interfaces/LoadResponse.html":{},"interfaces/NodeComponentProxy.html":{},"interfaces/OpComponentProxy.html":{},"interfaces/SaveObj.html":{},"interfaces/StatusMessage.html":{},"interfaces/TreeNodeProxy.html":{}}}],["remains",{"_index":1455,"title":{},"body":{"interfaces/DesignActions.html":{},"components/MixerViewComponent.html":{},"components/NoteComponent.html":{}}}],["remnode",{"_index":1119,"title":{},"body":{"classes/DBListener.html":{},"classes/DBListenerArray.html":{},"classes/DBNode.html":{},"classes/DBNodeArray.html":{},"classes/DBTwoWay.html":{},"classes/DBTwoWayArray.html":{},"classes/DBWriteBuffer.html":{},"classes/DBWriter.html":{},"classes/DBWriterArray.html":{},"interfaces/NodeMethods.html":{},"interfaces/NodeParams.html":{},"classes/OnlineStatus.html":{}}}],["remove",{"_index":976,"title":{},"body":{"classes/DBListener.html":{},"classes/DBListenerArray.html":{},"classes/DBNode.html":{},"classes/DBNodeArray.html":{},"classes/DBTwoWay.html":{},"classes/DBTwoWayArray.html":{},"classes/DBWriteBuffer.html":{},"classes/DBWriter.html":{},"classes/DBWriterArray.html":{},"components/DraftdetailComponent.html":{},"interfaces/NodeMethods.html":{},"interfaces/NodeParams.html":{},"classes/OnlineStatus.html":{}}}],["remove(lastnode.ref",{"_index":1153,"title":{},"body":{"classes/DBListener.html":{},"classes/DBListenerArray.html":{},"classes/DBNode.html":{},"classes/DBNodeArray.html":{},"classes/DBTwoWay.html":{},"classes/DBTwoWayArray.html":{},"classes/DBWriteBuffer.html":{},"classes/DBWriter.html":{},"classes/DBWriterArray.html":{},"interfaces/NodeMethods.html":{},"interfaces/NodeParams.html":{},"classes/OnlineStatus.html":{}}}],["remove(node.ref",{"_index":1120,"title":{},"body":{"classes/DBListener.html":{},"classes/DBListenerArray.html":{},"classes/DBNode.html":{},"classes/DBNodeArray.html":{},"classes/DBTwoWay.html":{},"classes/DBTwoWayArray.html":{},"classes/DBWriteBuffer.html":{},"classes/DBWriter.html":{},"classes/DBWriterArray.html":{},"interfaces/NodeMethods.html":{},"interfaces/NodeParams.html":{},"classes/OnlineStatus.html":{}}}],["removeconnectionto",{"_index":2394,"title":{},"body":{"components/InletComponent.html":{}}}],["removeconnectionto(sd_id",{"_index":2414,"title":{},"body":{"components/InletComponent.html":{}}}],["removed",{"_index":1095,"title":{},"body":{"classes/DBListener.html":{},"classes/DBListenerArray.html":{},"classes/DBNode.html":{},"classes/DBNodeArray.html":{},"classes/DBTwoWay.html":{},"classes/DBTwoWayArray.html":{},"classes/DBWriteBuffer.html":{},"classes/DBWriter.html":{},"classes/DBWriterArray.html":{},"interfaces/NodeMethods.html":{},"interfaces/NodeParams.html":{},"classes/OnlineStatus.html":{},"interfaces/Pedal.html":{},"classes/PedalStatus.html":{},"injectables/PedalsService.html":{}}}],["removeobj",{"_index":4191,"title":{},"body":{"injectables/ViewportService.html":{}}}],["removeobj(id",{"_index":4211,"title":{},"body":{"injectables/ViewportService.html":{}}}],["removeop",{"_index":512,"title":{},"body":{"interfaces/ChainIndex.html":{},"classes/OpSequencer.html":{},"injectables/SequencerService.html":{}}}],["removes",{"_index":2324,"title":{},"body":{"interfaces/Ink.html":{},"injectables/InkService.html":{}}}],["removing",{"_index":2323,"title":{},"body":{"interfaces/Ink.html":{},"injectables/InkService.html":{}}}],["rempedal",{"_index":1737,"title":{},"body":{"interfaces/DraftOperationClassification.html":{},"interfaces/LoomConfig.html":{},"classes/PedalConfig.html":{},"injectables/PlayerService.html":{}}}],["remvpedal",{"_index":3544,"title":{},"body":{"injectables/PedalsService.html":{}}}],["render",{"_index":1443,"title":{"classes/Render.html":{}},"body":{"interfaces/DesignActions.html":{},"components/NoteComponent.html":{},"components/PlayerComponent.html":{},"classes/Render.html":{}}}],["rendered",{"_index":2783,"title":{},"body":{"components/MixerViewComponent.html":{},"injectables/ViewportService.html":{}}}],["reopen",{"_index":1567,"title":{},"body":{"interfaces/DesignActions.html":{}}}],["repeating",{"_index":1618,"title":{},"body":{"interfaces/DraftMap.html":{},"interfaces/Interlacement.html":{},"interfaces/InterlacementVal.html":{}}}],["repo",{"_index":4460,"title":{},"body":{"index.html":{}}}],["repository",{"_index":4501,"title":{},"body":{"index.html":{}}}],["represeention",{"_index":4597,"title":{},"body":{"index.html":{}}}],["represenation",{"_index":4601,"title":{},"body":{"index.html":{}}}],["represent",{"_index":2768,"title":{},"body":{"components/MixerViewComponent.html":{},"classes/Shape.html":{},"index.html":{}}}],["representation",{"_index":895,"title":{},"body":{"interfaces/Crossing.html":{},"interfaces/Vertex.html":{},"interfaces/YarnPath.html":{},"index.html":{}}}],["representations",{"_index":4440,"title":{},"body":{"index.html":{}}}],["represented",{"_index":4001,"title":{},"body":{"classes/Shape-1.html":{}}}],["representing",{"_index":1158,"title":{},"body":{"classes/DBListener.html":{},"classes/DBListenerArray.html":{},"classes/DBNode.html":{},"classes/DBNodeArray.html":{},"classes/DBTwoWay.html":{},"classes/DBTwoWayArray.html":{},"classes/DBWriteBuffer.html":{},"classes/DBWriter.html":{},"classes/DBWriterArray.html":{},"interfaces/DesignActions.html":{},"interfaces/DraftNodeProxy.html":{},"interfaces/FileObj.html":{},"interfaces/FileSaver.html":{},"interfaces/Fileloader.html":{},"interfaces/LoadResponse.html":{},"interfaces/NodeComponentProxy.html":{},"interfaces/NodeMethods.html":{},"interfaces/NodeParams.html":{},"classes/OnlineStatus.html":{},"interfaces/OpComponentProxy.html":{},"interfaces/SaveObj.html":{},"classes/Shape.html":{},"interfaces/StatusMessage.html":{},"interfaces/TreeNodeProxy.html":{},"index.html":{},"miscellaneous/typealiases.html":{}}}],["represents",{"_index":1073,"title":{},"body":{"classes/DBListener.html":{},"classes/DBListenerArray.html":{},"classes/DBNode.html":{},"classes/DBNodeArray.html":{},"classes/DBTwoWay.html":{},"classes/DBTwoWayArray.html":{},"classes/DBWriteBuffer.html":{},"classes/DBWriter.html":{},"classes/DBWriterArray.html":{},"interfaces/DraftMap.html":{},"interfaces/DraftOperationClassification.html":{},"interfaces/Interlacement.html":{},"interfaces/InterlacementVal.html":{},"interfaces/LoomConfig.html":{},"interfaces/NodeMethods.html":{},"interfaces/NodeParams.html":{},"classes/OnlineStatus.html":{},"classes/PedalConfig.html":{},"injectables/PlayerService.html":{},"interfaces/PlayerState.html":{},"interfaces/PlayerState-1.html":{},"interfaces/WeavingLog.html":{},"interfaces/WeavingPick.html":{},"interfaces/WeavingPick-1.html":{}}}],["req",{"_index":132,"title":{},"body":{"classes/AbstractOpFactory.html":{},"classes/BaseOp.html":{},"classes/Branch.html":{},"classes/Bus.html":{},"interfaces/DynamicOperation.html":{},"classes/Merge.html":{},"interfaces/OpClassifier.html":{},"interfaces/OpInput.html":{},"interfaces/OperationClassification.html":{},"interfaces/OperationProperties.html":{},"classes/Pipe.html":{},"classes/Seed.html":{},"interfaces/TopologyDef.html":{},"interfaces/TreeOperation.html":{}}}],["requesting",{"_index":3427,"title":{},"body":{"interfaces/Pedal.html":{},"classes/PedalStatus.html":{},"injectables/PedalsService.html":{}}}],["require",{"_index":4450,"title":{},"body":{"index.html":{}}}],["required",{"_index":156,"title":{},"body":{"classes/AbstractOpFactory.html":{},"classes/BaseOp.html":{},"classes/Branch.html":{},"classes/Bus.html":{},"interfaces/DynamicOperation.html":{},"classes/Merge.html":{},"interfaces/OpClassifier.html":{},"interfaces/OpInput.html":{},"interfaces/OperationClassification.html":{},"interfaces/OperationParam.html":{},"interfaces/OperationProperties.html":{},"components/ParameterComponent.html":{},"classes/Params.html":{},"classes/Pipe.html":{},"classes/Seed.html":{},"interfaces/TopologyDef.html":{},"interfaces/TreeOperation.html":{},"index.html":{},"miscellaneous/typealiases.html":{}}}],["requirement",{"_index":166,"title":{},"body":{"classes/AbstractOpFactory.html":{},"classes/BaseOp.html":{},"classes/Branch.html":{},"classes/Bus.html":{},"classes/Merge.html":{},"interfaces/OpClassifier.html":{},"interfaces/OperationProperties.html":{},"classes/Pipe.html":{},"classes/Seed.html":{},"interfaces/TopologyDef.html":{},"miscellaneous/typealiases.html":{}}}],["requirements",{"_index":129,"title":{},"body":{"classes/AbstractOpFactory.html":{},"classes/BaseOp.html":{},"classes/Branch.html":{},"classes/Bus.html":{},"classes/Merge.html":{},"interfaces/OpClassifier.html":{},"interfaces/OperationParam.html":{},"interfaces/OperationProperties.html":{},"classes/Params.html":{},"classes/Pipe.html":{},"classes/Seed.html":{},"interfaces/TopologyDef.html":{},"index.html":{},"miscellaneous/typealiases.html":{}}}],["requires",{"_index":212,"title":{},"body":{"classes/AbstractOpFactory.html":{},"classes/BaseOp.html":{},"classes/Branch.html":{},"classes/Bus.html":{},"components/DraftdetailComponent.html":{},"classes/Merge.html":{},"interfaces/OpClassifier.html":{},"interfaces/OperationProperties.html":{},"classes/Pipe.html":{},"classes/Seed.html":{},"interfaces/TopologyDef.html":{}}}],["requiring",{"_index":4593,"title":{},"body":{"index.html":{}}}],["res",{"_index":545,"title":{},"body":{"interfaces/ChainOp.html":{},"interfaces/DraftOperationClassification.html":{},"interfaces/DynamicOperation.html":{},"interfaces/LoomConfig.html":{},"injectables/MappingsService.html":{},"interfaces/OpInput.html":{},"classes/OpSequencer.html":{},"interfaces/OperationClassification.html":{},"interfaces/PairedOp.html":{},"classes/PedalConfig.html":{},"interfaces/PedalEvent.html":{},"interfaces/PlayerOp.html":{},"injectables/PlayerService.html":{},"interfaces/TreeOperation.html":{}}}],["res.draft",{"_index":569,"title":{},"body":{"interfaces/ChainOp.html":{},"interfaces/DraftOperationClassification.html":{},"interfaces/LoomConfig.html":{},"interfaces/PairedOp.html":{},"classes/PedalConfig.html":{},"interfaces/PedalEvent.html":{},"interfaces/PlayerOp.html":{},"injectables/PlayerService.html":{}}}],["res.name",{"_index":618,"title":{},"body":{"interfaces/ChainOp.html":{},"interfaces/PairedOp.html":{},"interfaces/PedalEvent.html":{},"interfaces/PlayerOp.html":{}}}],["res.numpicks",{"_index":552,"title":{},"body":{"interfaces/ChainOp.html":{},"interfaces/PairedOp.html":{},"interfaces/PedalEvent.html":{},"interfaces/PlayerOp.html":{}}}],["res.ops",{"_index":620,"title":{},"body":{"interfaces/ChainOp.html":{},"interfaces/PairedOp.html":{},"interfaces/PedalEvent.html":{},"interfaces/PlayerOp.html":{}}}],["res.pedal",{"_index":550,"title":{},"body":{"interfaces/ChainOp.html":{},"interfaces/DraftOperationClassification.html":{},"interfaces/LoomConfig.html":{},"interfaces/PairedOp.html":{},"classes/PedalConfig.html":{},"interfaces/PedalEvent.html":{},"interfaces/PlayerOp.html":{},"injectables/PlayerService.html":{}}}],["res.perform",{"_index":621,"title":{},"body":{"interfaces/ChainOp.html":{},"interfaces/PairedOp.html":{},"interfaces/PedalEvent.html":{},"interfaces/PlayerOp.html":{}}}],["res.row",{"_index":547,"title":{},"body":{"interfaces/ChainOp.html":{},"interfaces/DraftOperationClassification.html":{},"interfaces/LoomConfig.html":{},"interfaces/PairedOp.html":{},"classes/PedalConfig.html":{},"interfaces/PedalEvent.html":{},"interfaces/PlayerOp.html":{},"injectables/PlayerService.html":{}}}],["res.weaving",{"_index":551,"title":{},"body":{"interfaces/ChainOp.html":{},"classes/OpSequencer.html":{},"interfaces/PairedOp.html":{},"interfaces/PedalEvent.html":{},"interfaces/PlayerOp.html":{}}}],["res[i",{"_index":2166,"title":{},"body":{"interfaces/DynamicOperation.html":{},"interfaces/OpInput.html":{},"interfaces/OperationClassification.html":{},"interfaces/TreeOperation.html":{}}}],["resample",{"_index":4007,"title":{},"body":{"classes/Shape-1.html":{}}}],["resample(rows",{"_index":4019,"title":{},"body":{"classes/Shape-1.html":{}}}],["rescale",{"_index":671,"title":{},"body":{"components/ConnectionComponent.html":{},"interfaces/DesignActions.html":{},"components/NoteComponent.html":{},"classes/Shape-1.html":{}}}],["rescale(scale",{"_index":692,"title":{},"body":{"components/ConnectionComponent.html":{}}}],["rescale(scale:number",{"_index":822,"title":{},"body":{"components/ConnectionComponent.html":{}}}],["rescaled",{"_index":1452,"title":{},"body":{"interfaces/DesignActions.html":{},"components/NoteComponent.html":{}}}],["rescaleforbitmap",{"_index":1494,"title":{},"body":{"interfaces/DesignActions.html":{}}}],["rescales",{"_index":694,"title":{},"body":{"components/ConnectionComponent.html":{}}}],["reserve",{"_index":3935,"title":{},"body":{"classes/Shape.html":{}}}],["reset",{"_index":2683,"title":{},"body":{"modules/MixerModule.html":{},"modules/PlayerModule.html":{},"overview.html":{}}}],["resizecontainer",{"_index":3615,"title":{},"body":{"components/PlayerComponent.html":{}}}],["resolvendxtopoint(ndx:interlacement",{"_index":1506,"title":{},"body":{"interfaces/DesignActions.html":{}}}],["resolvepointtondx(p:point",{"_index":1513,"title":{},"body":{"interfaces/DesignActions.html":{}}}],["resolvetovalue(p:point",{"_index":1523,"title":{},"body":{"interfaces/DesignActions.html":{}}}],["response",{"_index":357,"title":{},"body":{"interfaces/Bounds.html":{},"interfaces/ChainOp.html":{},"interfaces/PairedOp.html":{},"interfaces/PedalEvent.html":{},"interfaces/PlayerOp.html":{},"interfaces/Point.html":{}}}],["responsibility",{"_index":3359,"title":{},"body":{"interfaces/Pedal.html":{},"classes/PedalStatus.html":{},"injectables/PedalsService.html":{}}}],["responsible",{"_index":1163,"title":{},"body":{"classes/DBListener.html":{},"classes/DBListenerArray.html":{},"classes/DBNode.html":{},"classes/DBNodeArray.html":{},"classes/DBTwoWay.html":{},"classes/DBTwoWayArray.html":{},"classes/DBWriteBuffer.html":{},"classes/DBWriter.html":{},"classes/DBWriterArray.html":{},"interfaces/NodeMethods.html":{},"interfaces/NodeParams.html":{},"classes/OnlineStatus.html":{}}}],["restriction",{"_index":1717,"title":{},"body":{"interfaces/DraftOperationClassification.html":{},"interfaces/LoomConfig.html":{},"classes/PedalConfig.html":{},"injectables/PlayerService.html":{}}}],["resturns",{"_index":2173,"title":{},"body":{"interfaces/DynamicOperation.html":{},"interfaces/OpInput.html":{},"interfaces/OperationClassification.html":{},"interfaces/TreeOperation.html":{}}}],["result",{"_index":1578,"title":{},"body":{"interfaces/DesignActions.html":{}}}],["result.colshuttlemapping",{"_index":1597,"title":{},"body":{"interfaces/DesignActions.html":{}}}],["result.colsystemmapping",{"_index":1595,"title":{},"body":{"interfaces/DesignActions.html":{}}}],["result.drawdown",{"_index":1589,"title":{},"body":{"interfaces/DesignActions.html":{}}}],["result.gen_name",{"_index":1585,"title":{},"body":{"interfaces/DesignActions.html":{}}}],["result.id",{"_index":1583,"title":{},"body":{"interfaces/DesignActions.html":{}}}],["result.rowshuttlemapping",{"_index":1591,"title":{},"body":{"interfaces/DesignActions.html":{}}}],["result.rowsystemmapping",{"_index":1593,"title":{},"body":{"interfaces/DesignActions.html":{}}}],["result.ud_name",{"_index":1587,"title":{},"body":{"interfaces/DesignActions.html":{}}}],["results",{"_index":317,"title":{},"body":{"classes/AbstractOpFactory.html":{},"classes/BaseOp.html":{},"interfaces/Bounds.html":{},"classes/Branch.html":{},"classes/Bus.html":{},"classes/Cell.html":{},"interfaces/ChainIndex.html":{},"interfaces/ChainOp.html":{},"components/ConnectionComponent.html":{},"interfaces/Crossing.html":{},"classes/DBListener.html":{},"classes/DBListenerArray.html":{},"classes/DBNode.html":{},"classes/DBNodeArray.html":{},"classes/DBTwoWay.html":{},"classes/DBTwoWayArray.html":{},"classes/DBWriteBuffer.html":{},"classes/DBWriter.html":{},"classes/DBWriterArray.html":{},"interfaces/DensityUnits.html":{},"interfaces/DesignActions.html":{},"interfaces/DesignMode.html":{},"interfaces/DraftMap.html":{},"interfaces/DraftNodeProxy.html":{},"interfaces/DraftOperationClassification.html":{},"components/DraftdetailComponent.html":{},"interfaces/DynamicOperation.html":{},"interfaces/FileObj.html":{},"interfaces/FileSaver.html":{},"interfaces/Fileloader.html":{},"interfaces/IOTuple.html":{},"components/ImageComponent.html":{},"interfaces/Ink.html":{},"injectables/InkService.html":{},"components/InletComponent.html":{},"interfaces/Interlacement.html":{},"interfaces/InterlacementVal.html":{},"injectables/LayersService.html":{},"interfaces/LoadResponse.html":{},"interfaces/LoomConfig.html":{},"interfaces/LoomTypes.html":{},"injectables/MappingsService.html":{},"directives/MarqueeComponent.html":{},"interfaces/MaterialTypes.html":{},"classes/Merge.html":{},"modules/MixerModule.html":{},"components/MixerViewComponent.html":{},"interfaces/NodeComponentProxy.html":{},"interfaces/NodeMethods.html":{},"interfaces/NodeParams.html":{},"components/NoteComponent.html":{},"classes/OnlineStatus.html":{},"interfaces/OpClassifier.html":{},"interfaces/OpComponentProxy.html":{},"components/OpHelpModal.html":{},"interfaces/OpInput.html":{},"classes/OpSequencer.html":{},"components/OpSequencerComponent.html":{},"interfaces/OperationClassification.html":{},"interfaces/OperationParam.html":{},"interfaces/OperationProperties.html":{},"components/OpsComponent.html":{},"interfaces/PairedOp.html":{},"components/ParameterComponent.html":{},"classes/Params.html":{},"interfaces/Pedal.html":{},"classes/PedalConfig.html":{},"interfaces/PedalEvent.html":{},"classes/PedalStatus.html":{},"injectables/PedalsService.html":{},"classes/Pipe.html":{},"components/PlayerComponent.html":{},"modules/PlayerModule.html":{},"interfaces/PlayerOp.html":{},"injectables/PlayerService.html":{},"interfaces/PlayerState.html":{},"interfaces/PlayerState-1.html":{},"interfaces/Point.html":{},"classes/Render.html":{},"interfaces/SaveObj.html":{},"classes/Seed.html":{},"classes/Selection.html":{},"directives/SelectionComponent.html":{},"injectables/SequencerService.html":{},"classes/Shape.html":{},"classes/Shape-1.html":{},"classes/Shuttle.html":{},"components/SnackbarComponent.html":{},"interfaces/StatusMessage.html":{},"classes/System.html":{},"interfaces/TopologyDef.html":{},"interfaces/TreeNode.html":{},"interfaces/TreeNodeProxy.html":{},"interfaces/TreeOperation.html":{},"interfaces/Vertex.html":{},"interfaces/ViewModes.html":{},"injectables/ViewportService.html":{},"components/VirtualPedalsComponent.html":{},"interfaces/WeavingLog.html":{},"interfaces/WeavingPick.html":{},"interfaces/WeavingPick-1.html":{},"components/WeavingStateComponent.html":{},"interfaces/YarnPath.html":{},"dependencies.html":{},"miscellaneous/functions.html":{},"index.html":{},"modules.html":{},"overview.html":{},"properties.html":{},"miscellaneous/typealiases.html":{}}}],["retreive",{"_index":2341,"title":{},"body":{"interfaces/Ink.html":{},"injectables/InkService.html":{}}}],["return",{"_index":265,"title":{},"body":{"classes/AbstractOpFactory.html":{},"classes/BaseOp.html":{},"classes/Branch.html":{},"classes/Bus.html":{},"classes/Cell.html":{},"interfaces/ChainIndex.html":{},"interfaces/ChainOp.html":{},"components/ConnectionComponent.html":{},"classes/DBListener.html":{},"classes/DBListenerArray.html":{},"classes/DBNode.html":{},"classes/DBNodeArray.html":{},"classes/DBTwoWay.html":{},"classes/DBTwoWayArray.html":{},"classes/DBWriteBuffer.html":{},"classes/DBWriter.html":{},"classes/DBWriterArray.html":{},"interfaces/DesignActions.html":{},"interfaces/DraftOperationClassification.html":{},"components/DraftdetailComponent.html":{},"interfaces/DynamicOperation.html":{},"interfaces/Ink.html":{},"injectables/InkService.html":{},"components/InletComponent.html":{},"injectables/LayersService.html":{},"interfaces/LoomConfig.html":{},"injectables/MappingsService.html":{},"directives/MarqueeComponent.html":{},"classes/Merge.html":{},"components/MixerViewComponent.html":{},"interfaces/NodeMethods.html":{},"interfaces/NodeParams.html":{},"components/NoteComponent.html":{},"classes/OnlineStatus.html":{},"interfaces/OpClassifier.html":{},"interfaces/OpInput.html":{},"classes/OpSequencer.html":{},"interfaces/OperationClassification.html":{},"interfaces/OperationParam.html":{},"interfaces/OperationProperties.html":{},"components/OpsComponent.html":{},"interfaces/PairedOp.html":{},"components/ParameterComponent.html":{},"classes/Params.html":{},"interfaces/Pedal.html":{},"classes/PedalConfig.html":{},"interfaces/PedalEvent.html":{},"classes/PedalStatus.html":{},"injectables/PedalsService.html":{},"classes/Pipe.html":{},"components/PlayerComponent.html":{},"interfaces/PlayerOp.html":{},"injectables/PlayerService.html":{},"interfaces/PlayerState.html":{},"interfaces/PlayerState-1.html":{},"classes/Render.html":{},"classes/Seed.html":{},"classes/Selection.html":{},"directives/SelectionComponent.html":{},"injectables/SequencerService.html":{},"classes/Shape.html":{},"classes/Shape-1.html":{},"classes/Shuttle.html":{},"classes/System.html":{},"interfaces/TopologyDef.html":{},"interfaces/TreeOperation.html":{},"injectables/ViewportService.html":{},"interfaces/WeavingLog.html":{},"interfaces/WeavingPick.html":{},"interfaces/WeavingPick-1.html":{},"components/WeavingStateComponent.html":{},"miscellaneous/functions.html":{}}}],["return(name",{"_index":2364,"title":{},"body":{"interfaces/Ink.html":{},"injectables/InkService.html":{}}}],["returned",{"_index":963,"title":{},"body":{"classes/DBListener.html":{},"classes/DBListenerArray.html":{},"classes/DBNode.html":{},"classes/DBNodeArray.html":{},"classes/DBTwoWay.html":{},"classes/DBTwoWayArray.html":{},"classes/DBWriteBuffer.html":{},"classes/DBWriter.html":{},"classes/DBWriterArray.html":{},"interfaces/NodeMethods.html":{},"interfaces/NodeParams.html":{},"classes/OnlineStatus.html":{},"classes/System.html":{}}}],["returns",{"_index":24,"title":{},"body":{"classes/AbstractOpFactory.html":{},"classes/BaseOp.html":{},"classes/Cell.html":{},"components/ConnectionComponent.html":{},"classes/DBListener.html":{},"classes/DBListenerArray.html":{},"classes/DBNode.html":{},"classes/DBNodeArray.html":{},"classes/DBTwoWay.html":{},"classes/DBTwoWayArray.html":{},"classes/DBWriteBuffer.html":{},"classes/DBWriter.html":{},"classes/DBWriterArray.html":{},"interfaces/DesignActions.html":{},"components/DraftdetailComponent.html":{},"components/ImageComponent.html":{},"interfaces/Ink.html":{},"injectables/InkService.html":{},"components/InletComponent.html":{},"injectables/LayersService.html":{},"injectables/MappingsService.html":{},"directives/MarqueeComponent.html":{},"components/MixerViewComponent.html":{},"interfaces/NodeMethods.html":{},"components/NoteComponent.html":{},"classes/OnlineStatus.html":{},"components/OpHelpModal.html":{},"classes/OpSequencer.html":{},"components/OpSequencerComponent.html":{},"interfaces/OperationParam.html":{},"components/OpsComponent.html":{},"components/ParameterComponent.html":{},"classes/Params.html":{},"classes/PedalConfig.html":{},"classes/PedalStatus.html":{},"injectables/PedalsService.html":{},"components/PlayerComponent.html":{},"injectables/PlayerService.html":{},"classes/Render.html":{},"classes/Selection.html":{},"directives/SelectionComponent.html":{},"injectables/SequencerService.html":{},"classes/Shape.html":{},"classes/Shape-1.html":{},"classes/Shuttle.html":{},"components/SnackbarComponent.html":{},"classes/System.html":{},"injectables/ViewportService.html":{},"components/VirtualPedalsComponent.html":{},"components/WeavingStateComponent.html":{},"miscellaneous/functions.html":{}}}],["reveals",{"_index":2328,"title":{},"body":{"interfaces/Ink.html":{},"injectables/InkService.html":{}}}],["reverse",{"_index":559,"title":{},"body":{"interfaces/ChainOp.html":{},"interfaces/DraftOperationClassification.html":{},"interfaces/LoomConfig.html":{},"interfaces/PairedOp.html":{},"classes/PedalConfig.html":{},"interfaces/PedalEvent.html":{},"interfaces/PlayerOp.html":{},"injectables/PlayerService.html":{}}}],["reversing",{"_index":2306,"title":{},"body":{"interfaces/Ink.html":{},"injectables/InkService.html":{}}}],["revert",{"_index":4290,"title":{},"body":{"components/VirtualPedalsComponent.html":{}}}],["rgb(150",{"_index":4345,"title":{},"body":{"components/WeavingStateComponent.html":{}}}],["rgb(214",{"_index":4348,"title":{},"body":{"components/WeavingStateComponent.html":{}}}],["rgb(255",{"_index":3344,"title":{},"body":{"components/ParameterComponent.html":{}}}],["rgb(58",{"_index":4342,"title":{},"body":{"components/WeavingStateComponent.html":{}}}],["rgba(255",{"_index":3116,"title":{},"body":{"components/OpSequencerComponent.html":{},"components/PlayerComponent.html":{},"components/WeavingStateComponent.html":{}}}],["rib",{"_index":1828,"title":{},"body":{"interfaces/DraftOperationClassification.html":{},"interfaces/LoomConfig.html":{},"classes/PedalConfig.html":{},"injectables/PlayerService.html":{}}}],["right",{"_index":2494,"title":{},"body":{"components/InletComponent.html":{},"components/OpSequencerComponent.html":{},"components/PlayerComponent.html":{},"classes/Shuttle.html":{},"components/WeavingStateComponent.html":{},"miscellaneous/typealiases.html":{}}}],["role",{"_index":3040,"title":{},"body":{"classes/OpSequencer.html":{},"injectables/SequencerService.html":{}}}],["root",{"_index":453,"title":{},"body":{"interfaces/ChainIndex.html":{},"classes/DBListener.html":{},"classes/DBListenerArray.html":{},"classes/DBNode.html":{},"classes/DBNodeArray.html":{},"classes/DBTwoWay.html":{},"classes/DBTwoWayArray.html":{},"classes/DBWriteBuffer.html":{},"classes/DBWriter.html":{},"classes/DBWriterArray.html":{},"interfaces/DraftOperationClassification.html":{},"interfaces/Ink.html":{},"injectables/InkService.html":{},"injectables/LayersService.html":{},"interfaces/LoomConfig.html":{},"injectables/MappingsService.html":{},"interfaces/NodeMethods.html":{},"interfaces/NodeParams.html":{},"classes/OnlineStatus.html":{},"interfaces/Pedal.html":{},"classes/PedalConfig.html":{},"classes/PedalStatus.html":{},"injectables/PedalsService.html":{},"injectables/PlayerService.html":{},"injectables/SequencerService.html":{},"injectables/ViewportService.html":{},"index.html":{}}}],["rotate",{"_index":563,"title":{},"body":{"interfaces/ChainOp.html":{},"interfaces/DraftOperationClassification.html":{},"interfaces/LoomConfig.html":{},"interfaces/PairedOp.html":{},"classes/PedalConfig.html":{},"interfaces/PedalEvent.html":{},"interfaces/PlayerOp.html":{},"injectables/PlayerService.html":{}}}],["roul",{"_index":2624,"title":{},"body":{"injectables/MappingsService.html":{}}}],["roul.p_select_b",{"_index":2627,"title":{},"body":{"injectables/MappingsService.html":{}}}],["roulette",{"_index":2615,"title":{},"body":{"injectables/MappingsService.html":{}}}],["row",{"_index":350,"title":{},"body":{"interfaces/Bounds.html":{},"interfaces/ChainOp.html":{},"interfaces/Crossing.html":{},"interfaces/DesignActions.html":{},"interfaces/DraftOperationClassification.html":{},"components/DraftdetailComponent.html":{},"interfaces/LoomConfig.html":{},"components/MixerViewComponent.html":{},"components/NoteComponent.html":{},"classes/OpSequencer.html":{},"components/OpSequencerComponent.html":{},"components/OpsComponent.html":{},"interfaces/PairedOp.html":{},"components/ParameterComponent.html":{},"interfaces/Pedal.html":{},"classes/PedalConfig.html":{},"interfaces/PedalEvent.html":{},"classes/PedalStatus.html":{},"injectables/PedalsService.html":{},"components/PlayerComponent.html":{},"interfaces/PlayerOp.html":{},"injectables/PlayerService.html":{},"interfaces/PlayerState.html":{},"interfaces/PlayerState-1.html":{},"interfaces/Point.html":{},"classes/Render.html":{},"classes/Shape.html":{},"components/SnackbarComponent.html":{},"interfaces/Vertex.html":{},"components/VirtualPedalsComponent.html":{},"interfaces/WeavingLog.html":{},"interfaces/WeavingPick.html":{},"interfaces/WeavingPick-1.html":{},"components/WeavingStateComponent.html":{},"interfaces/YarnPath.html":{}}}],["row/column",{"_index":1502,"title":{},"body":{"interfaces/DesignActions.html":{}}}],["row/weft",{"_index":1629,"title":{},"body":{"interfaces/DraftMap.html":{},"interfaces/Interlacement.html":{},"interfaces/InterlacementVal.html":{}}}],["rowdata",{"_index":3741,"title":{},"body":{"interfaces/PlayerState.html":{},"interfaces/PlayerState-1.html":{},"interfaces/WeavingLog.html":{},"interfaces/WeavingPick.html":{},"interfaces/WeavingPick-1.html":{}}}],["rows",{"_index":918,"title":{},"body":{"interfaces/Crossing.html":{},"interfaces/DraftMap.html":{},"interfaces/Interlacement.html":{},"interfaces/InterlacementVal.html":{},"interfaces/PlayerState.html":{},"interfaces/PlayerState-1.html":{},"classes/Shape.html":{},"classes/Shape-1.html":{},"classes/System.html":{},"interfaces/Vertex.html":{},"interfaces/WeavingLog.html":{},"interfaces/WeavingPick.html":{},"interfaces/WeavingPick-1.html":{},"interfaces/YarnPath.html":{},"miscellaneous/typealiases.html":{}}}],["rowshuttlemapping",{"_index":1590,"title":{},"body":{"interfaces/DesignActions.html":{},"interfaces/DraftMap.html":{},"interfaces/Interlacement.html":{},"interfaces/InterlacementVal.html":{}}}],["rowsystemmapping",{"_index":1592,"title":{},"body":{"interfaces/DesignActions.html":{},"interfaces/DraftMap.html":{},"interfaces/Interlacement.html":{},"interfaces/InterlacementVal.html":{}}}],["rules",{"_index":2291,"title":{},"body":{"interfaces/IOTuple.html":{},"interfaces/TreeNode.html":{}}}],["run",{"_index":488,"title":{},"body":{"interfaces/ChainIndex.html":{},"injectables/SequencerService.html":{},"index.html":{}}}],["running",{"_index":3373,"title":{},"body":{"interfaces/Pedal.html":{},"classes/PedalStatus.html":{},"injectables/PedalsService.html":{},"interfaces/PlayerState.html":{},"interfaces/PlayerState-1.html":{},"interfaces/WeavingLog.html":{},"interfaces/WeavingPick.html":{},"interfaces/WeavingPick-1.html":{}}}],["rxfire",{"_index":4390,"title":{},"body":{"dependencies.html":{}}}],["rxjs",{"_index":2013,"title":{},"body":{"components/DraftdetailComponent.html":{},"components/OpsComponent.html":{},"dependencies.html":{}}}],["rxjs/operators",{"_index":3234,"title":{},"body":{"components/OpsComponent.html":{}}}],["same",{"_index":920,"title":{},"body":{"interfaces/Crossing.html":{},"interfaces/DesignActions.html":{},"injectables/MappingsService.html":{},"components/NoteComponent.html":{},"interfaces/Vertex.html":{},"interfaces/YarnPath.html":{},"index.html":{},"miscellaneous/typealiases.html":{}}}],["satin",{"_index":1822,"title":{},"body":{"interfaces/DraftOperationClassification.html":{},"interfaces/LoomConfig.html":{},"classes/PedalConfig.html":{},"injectables/PlayerService.html":{}}}],["save",{"_index":2863,"title":{},"body":{"components/NoteComponent.html":{},"index.html":{}}}],["saveasada",{"_index":1548,"title":{},"body":{"interfaces/DesignActions.html":{}}}],["saveasprint",{"_index":1559,"title":{},"body":{"interfaces/DesignActions.html":{}}}],["saveaswif",{"_index":1555,"title":{},"body":{"interfaces/DesignActions.html":{}}}],["saved",{"_index":1676,"title":{},"body":{"interfaces/DraftNodeProxy.html":{},"components/DraftdetailComponent.html":{},"interfaces/FileObj.html":{},"interfaces/FileSaver.html":{},"interfaces/Fileloader.html":{},"interfaces/LoadResponse.html":{},"interfaces/NodeComponentProxy.html":{},"interfaces/OpComponentProxy.html":{},"interfaces/SaveObj.html":{},"interfaces/StatusMessage.html":{},"interfaces/TreeNodeProxy.html":{}}}],["savenotetext",{"_index":2865,"title":{},"body":{"components/NoteComponent.html":{}}}],["saveobj",{"_index":1677,"title":{"interfaces/SaveObj.html":{}},"body":{"interfaces/DraftNodeProxy.html":{},"interfaces/FileObj.html":{},"interfaces/FileSaver.html":{},"interfaces/Fileloader.html":{},"interfaces/LoadResponse.html":{},"interfaces/NodeComponentProxy.html":{},"interfaces/OpComponentProxy.html":{},"interfaces/SaveObj.html":{},"interfaces/StatusMessage.html":{},"interfaces/TreeNodeProxy.html":{}}}],["saving",{"_index":1657,"title":{},"body":{"interfaces/DraftNodeProxy.html":{},"interfaces/FileObj.html":{},"interfaces/FileSaver.html":{},"interfaces/Fileloader.html":{},"interfaces/LoadResponse.html":{},"interfaces/NodeComponentProxy.html":{},"interfaces/OpComponentProxy.html":{},"interfaces/SaveObj.html":{},"interfaces/StatusMessage.html":{},"interfaces/TreeNodeProxy.html":{}}}],["scaffolding",{"_index":4540,"title":{},"body":{"index.html":{}}}],["scale",{"_index":675,"title":{},"body":{"components/ConnectionComponent.html":{},"interfaces/DesignActions.html":{},"interfaces/DraftNodeProxy.html":{},"interfaces/FileObj.html":{},"interfaces/FileSaver.html":{},"interfaces/Fileloader.html":{},"interfaces/LoadResponse.html":{},"directives/MarqueeComponent.html":{},"components/MixerViewComponent.html":{},"interfaces/NodeComponentProxy.html":{},"components/NoteComponent.html":{},"interfaces/OpComponentProxy.html":{},"interfaces/SaveObj.html":{},"directives/SelectionComponent.html":{},"classes/Shape-1.html":{},"components/SnackbarComponent.html":{},"interfaces/StatusMessage.html":{},"interfaces/TreeNodeProxy.html":{}}}],["scale(value",{"_index":1343,"title":{},"body":{"interfaces/DesignActions.html":{},"components/NoteComponent.html":{}}}],["scale*2+\"px",{"_index":2924,"title":{},"body":{"components/NoteComponent.html":{}}}],["scale:number",{"_index":4024,"title":{},"body":{"classes/Shape-1.html":{}}}],["schematics",{"_index":4607,"title":{},"body":{"index.html":{}}}],["screen",{"_index":341,"title":{},"body":{"interfaces/Bounds.html":{},"interfaces/Crossing.html":{},"interfaces/DesignActions.html":{},"interfaces/DraftMap.html":{},"interfaces/DraftNodeProxy.html":{},"interfaces/DynamicOperation.html":{},"interfaces/FileObj.html":{},"interfaces/FileSaver.html":{},"interfaces/Fileloader.html":{},"interfaces/Interlacement.html":{},"interfaces/InterlacementVal.html":{},"injectables/LayersService.html":{},"interfaces/LoadResponse.html":{},"interfaces/NodeComponentProxy.html":{},"interfaces/OpComponentProxy.html":{},"interfaces/OpInput.html":{},"interfaces/OperationClassification.html":{},"interfaces/Point.html":{},"interfaces/SaveObj.html":{},"interfaces/StatusMessage.html":{},"interfaces/TreeNodeProxy.html":{},"interfaces/TreeOperation.html":{},"interfaces/Vertex.html":{},"injectables/ViewportService.html":{},"components/WeavingStateComponent.html":{},"interfaces/YarnPath.html":{},"index.html":{}}}],["screenlayout",{"_index":1655,"title":{},"body":{"interfaces/DraftNodeProxy.html":{},"interfaces/FileObj.html":{},"interfaces/FileSaver.html":{},"interfaces/Fileloader.html":{},"interfaces/LoadResponse.html":{},"interfaces/NodeComponentProxy.html":{},"interfaces/OpComponentProxy.html":{},"interfaces/SaveObj.html":{},"interfaces/StatusMessage.html":{},"interfaces/TreeNodeProxy.html":{}}}],["scripts",{"_index":4497,"title":{},"body":{"index.html":{}}}],["scroll",{"_index":1964,"title":{},"body":{"components/DraftdetailComponent.html":{},"components/PlayerComponent.html":{},"components/WeavingStateComponent.html":{}}}],["scrollable",{"_index":4230,"title":{},"body":{"injectables/ViewportService.html":{}}}],["scrolldispatcher",{"_index":1965,"title":{},"body":{"components/DraftdetailComponent.html":{}}}],["scrolled",{"_index":2020,"title":{},"body":{"components/DraftdetailComponent.html":{},"injectables/ViewportService.html":{}}}],["scrollingsubscription",{"_index":1952,"title":{},"body":{"components/DraftdetailComponent.html":{}}}],["scrollleft",{"_index":2038,"title":{},"body":{"components/DraftdetailComponent.html":{}}}],["scrolltop",{"_index":2036,"title":{},"body":{"components/DraftdetailComponent.html":{}}}],["sd",{"_index":2460,"title":{},"body":{"components/InletComponent.html":{}}}],["sd_id",{"_index":2416,"title":{},"body":{"components/InletComponent.html":{}}}],["search",{"_index":3258,"title":{},"body":{"components/OpsComponent.html":{}}}],["second",{"_index":1716,"title":{},"body":{"interfaces/DraftOperationClassification.html":{},"interfaces/LoomConfig.html":{},"components/OpSequencerComponent.html":{},"classes/PedalConfig.html":{},"components/PlayerComponent.html":{},"injectables/PlayerService.html":{},"index.html":{}}}],["section",{"_index":4541,"title":{},"body":{"index.html":{}}}],["see",{"_index":4514,"title":{},"body":{"index.html":{}}}],["seed",{"_index":100,"title":{"classes/Seed.html":{}},"body":{"classes/AbstractOpFactory.html":{},"classes/BaseOp.html":{},"classes/Branch.html":{},"classes/Bus.html":{},"interfaces/ChainOp.html":{},"interfaces/DraftNodeProxy.html":{},"interfaces/DraftOperationClassification.html":{},"interfaces/DynamicOperation.html":{},"interfaces/FileObj.html":{},"interfaces/FileSaver.html":{},"interfaces/Fileloader.html":{},"interfaces/LoadResponse.html":{},"interfaces/LoomConfig.html":{},"classes/Merge.html":{},"interfaces/NodeComponentProxy.html":{},"interfaces/OpClassifier.html":{},"interfaces/OpComponentProxy.html":{},"interfaces/OpInput.html":{},"interfaces/OperationClassification.html":{},"interfaces/OperationProperties.html":{},"interfaces/PairedOp.html":{},"classes/PedalConfig.html":{},"interfaces/PedalEvent.html":{},"classes/Pipe.html":{},"interfaces/PlayerOp.html":{},"injectables/PlayerService.html":{},"interfaces/SaveObj.html":{},"classes/Seed.html":{},"interfaces/StatusMessage.html":{},"interfaces/TopologyDef.html":{},"interfaces/TreeNodeProxy.html":{},"interfaces/TreeOperation.html":{}}}],["seedop",{"_index":574,"title":{},"body":{"interfaces/ChainOp.html":{},"interfaces/DynamicOperation.html":{},"interfaces/OpInput.html":{},"interfaces/OperationClassification.html":{},"interfaces/PairedOp.html":{},"interfaces/PedalEvent.html":{},"interfaces/PlayerOp.html":{},"interfaces/TreeOperation.html":{}}}],["seedop.perform(input_params",{"_index":575,"title":{},"body":{"interfaces/ChainOp.html":{},"interfaces/PairedOp.html":{},"interfaces/PedalEvent.html":{},"interfaces/PlayerOp.html":{}}}],["seedoperation",{"_index":309,"title":{},"body":{"classes/AbstractOpFactory.html":{},"classes/BaseOp.html":{},"classes/Branch.html":{},"classes/Bus.html":{},"classes/Merge.html":{},"interfaces/OpClassifier.html":{},"interfaces/OperationProperties.html":{},"classes/Pipe.html":{},"classes/Seed.html":{},"interfaces/TopologyDef.html":{}}}],["sees",{"_index":4603,"title":{},"body":{"index.html":{}}}],["sel",{"_index":476,"title":{},"body":{"interfaces/ChainIndex.html":{},"classes/OpSequencer.html":{},"injectables/SequencerService.html":{}}}],["sel_back",{"_index":2637,"title":{},"body":{"injectables/MappingsService.html":{},"classes/OpSequencer.html":{},"miscellaneous/functions.html":{}}}],["sel_fwd",{"_index":2636,"title":{},"body":{"injectables/MappingsService.html":{},"classes/OpSequencer.html":{},"miscellaneous/functions.html":{}}}],["select",{"_index":2370,"title":{},"body":{"injectables/InkService.html":{},"components/InletComponent.html":{},"interfaces/LoomTypes.html":{},"classes/OpSequencer.html":{},"interfaces/OperationParam.html":{},"components/ParameterComponent.html":{},"classes/Params.html":{},"classes/Render.html":{},"miscellaneous/typealiases.html":{}}}],["select(name",{"_index":2355,"title":{},"body":{"interfaces/Ink.html":{},"injectables/InkService.html":{}}}],["select_pedal_a",{"_index":471,"title":{},"body":{"interfaces/ChainIndex.html":{},"injectables/SequencerService.html":{}}}],["select_pedal_b",{"_index":472,"title":{},"body":{"interfaces/ChainIndex.html":{},"injectables/SequencerService.html":{}}}],["select_x",{"_index":3837,"title":{},"body":{"classes/Render.html":{}}}],["select_y",{"_index":3839,"title":{},"body":{"classes/Render.html":{}}}],["selected",{"_index":1300,"title":{},"body":{"interfaces/DensityUnits.html":{},"interfaces/DesignMode.html":{},"components/DraftdetailComponent.html":{},"interfaces/Ink.html":{},"injectables/InkService.html":{},"interfaces/LoomTypes.html":{},"interfaces/MaterialTypes.html":{},"components/OpSequencerComponent.html":{},"interfaces/ViewModes.html":{}}}],["selectedhasmask",{"_index":2371,"title":{},"body":{"injectables/InkService.html":{}}}],["selectedhasmask():boolean",{"_index":2337,"title":{},"body":{"interfaces/Ink.html":{},"injectables/InkService.html":{}}}],["selectedvalue",{"_index":2388,"title":{},"body":{"components/InletComponent.html":{}}}],["selecting",{"_index":456,"title":{},"body":{"interfaces/ChainIndex.html":{},"classes/OpSequencer.html":{},"injectables/SequencerService.html":{}}}],["selecting_connection",{"_index":1378,"title":{},"body":{"interfaces/DesignActions.html":{}}}],["selection",{"_index":881,"title":{"classes/Selection.html":{}},"body":{"components/ConnectionComponent.html":{},"components/DraftdetailComponent.html":{},"components/ImageComponent.html":{},"interfaces/Ink.html":{},"injectables/InkService.html":{},"components/InletComponent.html":{},"directives/MarqueeComponent.html":{},"components/MixerViewComponent.html":{},"components/NoteComponent.html":{},"components/OpHelpModal.html":{},"classes/OpSequencer.html":{},"components/OpSequencerComponent.html":{},"components/OpsComponent.html":{},"components/ParameterComponent.html":{},"components/PlayerComponent.html":{},"classes/Selection.html":{},"directives/SelectionComponent.html":{},"components/SnackbarComponent.html":{},"components/VirtualPedalsComponent.html":{},"components/WeavingStateComponent.html":{}}}],["selectioncomponent",{"_index":880,"title":{"directives/SelectionComponent.html":{}},"body":{"components/ConnectionComponent.html":{},"components/DraftdetailComponent.html":{},"components/ImageComponent.html":{},"components/InletComponent.html":{},"components/MixerViewComponent.html":{},"components/NoteComponent.html":{},"components/OpHelpModal.html":{},"components/OpSequencerComponent.html":{},"components/OpsComponent.html":{},"components/ParameterComponent.html":{},"components/PlayerComponent.html":{},"directives/SelectionComponent.html":{},"components/SnackbarComponent.html":{},"components/VirtualPedalsComponent.html":{},"components/WeavingStateComponent.html":{}}}],["selections",{"_index":2351,"title":{},"body":{"interfaces/Ink.html":{},"injectables/InkService.html":{}}}],["selectlist",{"_index":3160,"title":{},"body":{"interfaces/OperationParam.html":{},"classes/Params.html":{}}}],["selector",{"_index":649,"title":{},"body":{"components/ConnectionComponent.html":{},"interfaces/DesignActions.html":{},"components/DraftdetailComponent.html":{},"components/ImageComponent.html":{},"components/InletComponent.html":{},"directives/MarqueeComponent.html":{},"components/MixerViewComponent.html":{},"components/NoteComponent.html":{},"components/OpHelpModal.html":{},"components/OpSequencerComponent.html":{},"components/OpsComponent.html":{},"components/ParameterComponent.html":{},"components/PlayerComponent.html":{},"directives/SelectionComponent.html":{},"components/SnackbarComponent.html":{},"components/VirtualPedalsComponent.html":{},"components/WeavingStateComponent.html":{}}}],["selectparam",{"_index":3161,"title":{},"body":{"interfaces/OperationParam.html":{},"components/ParameterComponent.html":{},"classes/Params.html":{},"miscellaneous/typealiases.html":{}}}],["selects",{"_index":2352,"title":{},"body":{"interfaces/Ink.html":{},"injectables/InkService.html":{},"classes/OpSequencer.html":{}}}],["send",{"_index":3466,"title":{},"body":{"interfaces/Pedal.html":{},"classes/PedalStatus.html":{},"injectables/PedalsService.html":{}}}],["senddraftrow",{"_index":3545,"title":{},"body":{"injectables/PedalsService.html":{}}}],["senddraftrow(r",{"_index":3561,"title":{},"body":{"injectables/PedalsService.html":{}}}],["senddrafttoplayer",{"_index":1446,"title":{},"body":{"interfaces/DesignActions.html":{}}}],["sending",{"_index":1931,"title":{},"body":{"interfaces/DraftOperationClassification.html":{},"interfaces/LoomConfig.html":{},"classes/PedalConfig.html":{},"injectables/PlayerService.html":{}}}],["sends",{"_index":556,"title":{},"body":{"interfaces/ChainOp.html":{},"interfaces/PairedOp.html":{},"interfaces/PedalEvent.html":{},"interfaces/PlayerOp.html":{}}}],["sense",{"_index":1718,"title":{},"body":{"interfaces/DraftOperationClassification.html":{},"interfaces/LoomConfig.html":{},"classes/PedalConfig.html":{},"injectables/PlayerService.html":{}}}],["sent",{"_index":3066,"title":{},"body":{"classes/OpSequencer.html":{},"interfaces/PlayerState.html":{},"interfaces/PlayerState-1.html":{},"interfaces/WeavingLog.html":{},"interfaces/WeavingPick.html":{},"interfaces/WeavingPick-1.html":{}}}],["separate",{"_index":448,"title":{},"body":{"interfaces/ChainIndex.html":{},"injectables/SequencerService.html":{},"index.html":{}}}],["separated",{"_index":442,"title":{},"body":{"interfaces/ChainIndex.html":{},"injectables/SequencerService.html":{}}}],["seq",{"_index":1799,"title":{},"body":{"interfaces/DraftOperationClassification.html":{},"interfaces/LoomConfig.html":{},"injectables/MappingsService.html":{},"components/OpSequencerComponent.html":{},"classes/PedalConfig.html":{},"injectables/PlayerService.html":{}}}],["seq.length",{"_index":2577,"title":{},"body":{"injectables/MappingsService.html":{}}}],["seq[0",{"_index":2578,"title":{},"body":{"injectables/MappingsService.html":{}}}],["seq_array",{"_index":455,"title":{},"body":{"interfaces/ChainIndex.html":{},"injectables/SequencerService.html":{}}}],["sequence",{"_index":521,"title":{},"body":{"interfaces/ChainOp.html":{},"interfaces/DraftOperationClassification.html":{},"interfaces/LoomConfig.html":{},"components/OpSequencerComponent.html":{},"interfaces/PairedOp.html":{},"classes/PedalConfig.html":{},"interfaces/PedalEvent.html":{},"interfaces/PlayerOp.html":{},"injectables/PlayerService.html":{}}}],["sequencer",{"_index":426,"title":{},"body":{"interfaces/ChainIndex.html":{},"interfaces/ChainOp.html":{},"injectables/MappingsService.html":{},"classes/OpSequencer.html":{},"components/OpSequencerComponent.html":{},"interfaces/PairedOp.html":{},"interfaces/PedalEvent.html":{},"components/PlayerComponent.html":{},"interfaces/PlayerOp.html":{},"injectables/SequencerService.html":{},"miscellaneous/typealiases.html":{}}}],["sequencer'},{'name",{"_index":863,"title":{},"body":{"components/ConnectionComponent.html":{},"components/DraftdetailComponent.html":{},"components/ImageComponent.html":{},"components/InletComponent.html":{},"components/MixerViewComponent.html":{},"components/NoteComponent.html":{},"components/OpHelpModal.html":{},"components/OpSequencerComponent.html":{},"components/OpsComponent.html":{},"components/ParameterComponent.html":{},"components/PlayerComponent.html":{},"components/SnackbarComponent.html":{},"components/VirtualPedalsComponent.html":{},"components/WeavingStateComponent.html":{}}}],["sequencer.component",{"_index":3634,"title":{},"body":{"components/PlayerComponent.html":{},"modules/PlayerModule.html":{}}}],["sequencer.component.html",{"_index":3081,"title":{},"body":{"components/OpSequencerComponent.html":{}}}],["sequencer.component.scss",{"_index":3080,"title":{},"body":{"components/OpSequencerComponent.html":{}}}],["sequencer.component.ts",{"_index":3079,"title":{},"body":{"components/OpSequencerComponent.html":{}}}],["sequencer.component.ts:11",{"_index":3084,"title":{},"body":{"components/OpSequencerComponent.html":{}}}],["sequencer.component.ts:14",{"_index":3087,"title":{},"body":{"components/OpSequencerComponent.html":{}}}],["sequencer.component.ts:15",{"_index":3086,"title":{},"body":{"components/OpSequencerComponent.html":{}}}],["sequencer.component.ts:16",{"_index":3088,"title":{},"body":{"components/OpSequencerComponent.html":{}}}],["sequencer.component.ts:19",{"_index":3085,"title":{},"body":{"components/OpSequencerComponent.html":{}}}],["sequencer.service",{"_index":2560,"title":{},"body":{"injectables/MappingsService.html":{}}}],["sequencer/op",{"_index":3078,"title":{},"body":{"components/OpSequencerComponent.html":{},"components/PlayerComponent.html":{},"modules/PlayerModule.html":{}}}],["sequencerservice",{"_index":454,"title":{"injectables/SequencerService.html":{}},"body":{"interfaces/ChainIndex.html":{},"interfaces/DraftOperationClassification.html":{},"interfaces/LoomConfig.html":{},"injectables/MappingsService.html":{},"components/OpSequencerComponent.html":{},"classes/PedalConfig.html":{},"injectables/PlayerService.html":{},"injectables/SequencerService.html":{}}}],["series",{"_index":2143,"title":{},"body":{"interfaces/DynamicOperation.html":{},"interfaces/OpInput.html":{},"interfaces/OperationClassification.html":{},"interfaces/TreeOperation.html":{}}}],["serve",{"_index":80,"title":{},"body":{"classes/AbstractOpFactory.html":{},"classes/BaseOp.html":{},"classes/Branch.html":{},"classes/Bus.html":{},"classes/Merge.html":{},"interfaces/OpClassifier.html":{},"interfaces/OperationProperties.html":{},"classes/Pipe.html":{},"classes/Seed.html":{},"interfaces/TopologyDef.html":{},"index.html":{}}}],["server",{"_index":4611,"title":{},"body":{"index.html":{}}}],["serves",{"_index":211,"title":{},"body":{"classes/AbstractOpFactory.html":{},"classes/BaseOp.html":{},"classes/Branch.html":{},"classes/Bus.html":{},"classes/Merge.html":{},"interfaces/OpClassifier.html":{},"interfaces/OperationProperties.html":{},"classes/Pipe.html":{},"classes/Seed.html":{},"interfaces/TopologyDef.html":{}}}],["service",{"_index":444,"title":{},"body":{"interfaces/ChainIndex.html":{},"interfaces/ChainOp.html":{},"interfaces/DesignActions.html":{},"interfaces/DraftOperationClassification.html":{},"injectables/LayersService.html":{},"interfaces/LoomConfig.html":{},"components/NoteComponent.html":{},"interfaces/PairedOp.html":{},"interfaces/Pedal.html":{},"classes/PedalConfig.html":{},"interfaces/PedalEvent.html":{},"classes/PedalStatus.html":{},"injectables/PedalsService.html":{},"interfaces/PlayerOp.html":{},"injectables/PlayerService.html":{},"injectables/SequencerService.html":{},"index.html":{}}}],["services",{"_index":4461,"title":{},"body":{"index.html":{}}}],["set",{"_index":384,"title":{},"body":{"classes/Cell.html":{},"components/ConnectionComponent.html":{},"classes/DBListener.html":{},"classes/DBListenerArray.html":{},"classes/DBNode.html":{},"classes/DBNodeArray.html":{},"classes/DBTwoWay.html":{},"classes/DBTwoWayArray.html":{},"classes/DBWriteBuffer.html":{},"classes/DBWriter.html":{},"classes/DBWriterArray.html":{},"interfaces/DesignActions.html":{},"interfaces/DraftOperationClassification.html":{},"interfaces/LoomConfig.html":{},"injectables/MappingsService.html":{},"interfaces/NodeMethods.html":{},"interfaces/NodeParams.html":{},"components/NoteComponent.html":{},"classes/OnlineStatus.html":{},"interfaces/OperationParam.html":{},"classes/Params.html":{},"interfaces/Pedal.html":{},"classes/PedalConfig.html":{},"classes/PedalStatus.html":{},"injectables/PedalsService.html":{},"components/PlayerComponent.html":{},"injectables/PlayerService.html":{},"classes/Shape.html":{},"classes/Shape-1.html":{},"injectables/ViewportService.html":{}}}],["set(this.ref",{"_index":1035,"title":{},"body":{"classes/DBListener.html":{},"classes/DBListenerArray.html":{},"classes/DBNode.html":{},"classes/DBNodeArray.html":{},"classes/DBTwoWay.html":{},"classes/DBTwoWayArray.html":{},"classes/DBWriteBuffer.html":{},"classes/DBWriter.html":{},"classes/DBWriterArray.html":{},"interfaces/NodeMethods.html":{},"interfaces/NodeParams.html":{},"classes/OnlineStatus.html":{}}}],["set(x",{"_index":4215,"title":{},"body":{"injectables/ViewportService.html":{}}}],["set/true",{"_index":4567,"title":{},"body":{"index.html":{}}}],["set_connectable:boolean",{"_index":1401,"title":{},"body":{"interfaces/DesignActions.html":{}}}],["setabsolute",{"_index":4192,"title":{},"body":{"injectables/ViewportService.html":{}}}],["setabsolute(w",{"_index":4217,"title":{},"body":{"injectables/ViewportService.html":{}}}],["setactive(tf",{"_index":1210,"title":{},"body":{"classes/DBNode.html":{}}}],["setcolor",{"_index":4052,"title":{},"body":{"classes/Shuttle.html":{}}}],["setcolor(color",{"_index":4074,"title":{},"body":{"classes/Shuttle.html":{}}}],["setcurrentview",{"_index":3765,"title":{},"body":{"classes/Render.html":{}}}],["setcurrentview(view",{"_index":3796,"title":{},"body":{"classes/Render.html":{}}}],["setcurrentview(view:string",{"_index":3850,"title":{},"body":{"classes/Render.html":{}}}],["setdraft",{"_index":3703,"title":{},"body":{"injectables/PlayerService.html":{}}}],["setdraft(d",{"_index":1899,"title":{},"body":{"interfaces/DraftOperationClassification.html":{},"interfaces/LoomConfig.html":{},"classes/PedalConfig.html":{},"injectables/PlayerService.html":{}}}],["setendcol",{"_index":3945,"title":{},"body":{"classes/Shape.html":{}}}],["setendcol(col",{"_index":3968,"title":{},"body":{"classes/Shape.html":{}}}],["setfront",{"_index":3766,"title":{},"body":{"classes/Render.html":{}}}],["setfront(value",{"_index":3798,"title":{},"body":{"classes/Render.html":{}}}],["setfront(value:boolean",{"_index":3851,"title":{},"body":{"classes/Render.html":{}}}],["setheddle",{"_index":375,"title":{},"body":{"classes/Cell.html":{}}}],["setheddle(value",{"_index":403,"title":{},"body":{"classes/Cell.html":{}}}],["setheddle(value:boolean",{"_index":416,"title":{},"body":{"classes/Cell.html":{}}}],["setheddledown",{"_index":376,"title":{},"body":{"classes/Cell.html":{}}}],["setheddleup",{"_index":377,"title":{},"body":{"classes/Cell.html":{}}}],["setheight",{"_index":4193,"title":{},"body":{"injectables/ViewportService.html":{}}}],["setheight(h",{"_index":4219,"title":{},"body":{"injectables/ViewportService.html":{}}}],["setid",{"_index":3946,"title":{},"body":{"classes/Shape.html":{},"classes/Shuttle.html":{},"classes/System.html":{}}}],["setid(id",{"_index":3971,"title":{},"body":{"classes/Shape.html":{},"classes/Shuttle.html":{},"classes/System.html":{}}}],["setmap",{"_index":2527,"title":{},"body":{"injectables/MappingsService.html":{}}}],["setmap(p",{"_index":2550,"title":{},"body":{"injectables/MappingsService.html":{}}}],["setnode",{"_index":1236,"title":{},"body":{"classes/DBTwoWayArray.html":{},"classes/DBWriterArray.html":{}}}],["setnode(i",{"_index":1139,"title":{},"body":{"classes/DBListener.html":{},"classes/DBListenerArray.html":{},"classes/DBNode.html":{},"classes/DBNodeArray.html":{},"classes/DBTwoWay.html":{},"classes/DBTwoWayArray.html":{},"classes/DBWriteBuffer.html":{},"classes/DBWriter.html":{},"classes/DBWriterArray.html":{},"interfaces/NodeMethods.html":{},"interfaces/NodeParams.html":{},"classes/OnlineStatus.html":{}}}],["setparameters",{"_index":3862,"title":{},"body":{"classes/Selection.html":{}}}],["setpedalop",{"_index":3704,"title":{},"body":{"injectables/PlayerService.html":{}}}],["setpedalop(e",{"_index":1913,"title":{},"body":{"interfaces/DraftOperationClassification.html":{},"interfaces/LoomConfig.html":{},"classes/PedalConfig.html":{},"injectables/PlayerService.html":{}}}],["setpositionandsize",{"_index":2655,"title":{},"body":{"directives/MarqueeComponent.html":{},"directives/SelectionComponent.html":{}}}],["setpositionandsize(bounds",{"_index":2658,"title":{},"body":{"directives/MarqueeComponent.html":{},"directives/SelectionComponent.html":{}}}],["sets",{"_index":391,"title":{},"body":{"classes/Cell.html":{},"interfaces/DesignActions.html":{},"interfaces/Ink.html":{},"injectables/InkService.html":{}}}],["setscale(value",{"_index":2890,"title":{},"body":{"components/NoteComponent.html":{}}}],["setstartcol",{"_index":3947,"title":{},"body":{"classes/Shape.html":{}}}],["setstartcol(col",{"_index":3973,"title":{},"body":{"classes/Shape.html":{}}}],["sett",{"_index":3939,"title":{},"body":{"classes/Shape.html":{}}}],["settarget",{"_index":3863,"title":{},"body":{"classes/Selection.html":{}}}],["settarget(t",{"_index":3876,"title":{},"body":{"classes/Selection.html":{}}}],["setthickness",{"_index":4053,"title":{},"body":{"classes/Shuttle.html":{}}}],["setthickness(n",{"_index":4077,"title":{},"body":{"classes/Shuttle.html":{}}}],["setting",{"_index":383,"title":{},"body":{"classes/Cell.html":{},"interfaces/Ink.html":{},"injectables/InkService.html":{}}}],["settings",{"_index":1672,"title":{},"body":{"interfaces/DraftNodeProxy.html":{},"interfaces/FileObj.html":{},"interfaces/FileSaver.html":{},"interfaces/Fileloader.html":{},"interfaces/IOTuple.html":{},"interfaces/LoadResponse.html":{},"interfaces/NodeComponentProxy.html":{},"interfaces/OpComponentProxy.html":{},"interfaces/SaveObj.html":{},"interfaces/StatusMessage.html":{},"interfaces/TreeNode.html":{},"interfaces/TreeNodeProxy.html":{},"miscellaneous/typealiases.html":{}}}],["settopleft",{"_index":4194,"title":{},"body":{"injectables/ViewportService.html":{}}}],["settopleft(p",{"_index":4221,"title":{},"body":{"injectables/ViewportService.html":{}}}],["settting",{"_index":1642,"title":{},"body":{"interfaces/DraftMap.html":{},"interfaces/Interlacement.html":{},"interfaces/InterlacementVal.html":{}}}],["settype",{"_index":4054,"title":{},"body":{"classes/Shuttle.html":{}}}],["settype(type",{"_index":4079,"title":{},"body":{"classes/Shuttle.html":{}}}],["setup",{"_index":4477,"title":{},"body":{"index.html":{}}}],["setval",{"_index":1223,"title":{},"body":{"classes/DBTwoWay.html":{},"classes/DBWriteBuffer.html":{},"classes/DBWriter.html":{}}}],["setval(x",{"_index":1034,"title":{},"body":{"classes/DBListener.html":{},"classes/DBListenerArray.html":{},"classes/DBNode.html":{},"classes/DBNodeArray.html":{},"classes/DBTwoWay.html":{},"classes/DBTwoWayArray.html":{},"classes/DBWriteBuffer.html":{},"classes/DBWriter.html":{},"classes/DBWriterArray.html":{},"interfaces/NodeMethods.html":{},"interfaces/NodeParams.html":{},"classes/OnlineStatus.html":{}}}],["setviewportcenter",{"_index":4195,"title":{},"body":{"injectables/ViewportService.html":{}}}],["setvisible",{"_index":4055,"title":{},"body":{"classes/Shuttle.html":{},"classes/System.html":{}}}],["setvisible(bool",{"_index":4144,"title":{},"body":{"classes/System.html":{}}}],["setvisible(visible",{"_index":4081,"title":{},"body":{"classes/Shuttle.html":{}}}],["setvisible(visible:boolean",{"_index":4101,"title":{},"body":{"classes/Shuttle.html":{}}}],["setwidth",{"_index":3948,"title":{},"body":{"classes/Shape.html":{},"injectables/ViewportService.html":{}}}],["setwidth(w",{"_index":4224,"title":{},"body":{"injectables/ViewportService.html":{}}}],["setwidth(width",{"_index":3975,"title":{},"body":{"classes/Shape.html":{}}}],["setzoom",{"_index":3767,"title":{},"body":{"classes/Render.html":{}}}],["setzoom(z",{"_index":3800,"title":{},"body":{"classes/Render.html":{}}}],["several",{"_index":68,"title":{},"body":{"classes/AbstractOpFactory.html":{},"classes/BaseOp.html":{},"classes/Branch.html":{},"classes/Bus.html":{},"classes/Merge.html":{},"interfaces/OpClassifier.html":{},"interfaces/OperationProperties.html":{},"classes/Pipe.html":{},"classes/Seed.html":{},"interfaces/TopologyDef.html":{},"miscellaneous/typealiases.html":{}}}],["shape",{"_index":92,"title":{"classes/Shape.html":{},"classes/Shape-1.html":{}},"body":{"classes/AbstractOpFactory.html":{},"classes/BaseOp.html":{},"classes/Branch.html":{},"classes/Bus.html":{},"interfaces/Ink.html":{},"injectables/InkService.html":{},"classes/Merge.html":{},"interfaces/OpClassifier.html":{},"interfaces/OperationProperties.html":{},"classes/Pipe.html":{},"classes/Seed.html":{},"classes/Shape.html":{},"classes/Shape-1.html":{},"interfaces/TopologyDef.html":{}}}],["shape_canvas",{"_index":4010,"title":{},"body":{"classes/Shape-1.html":{}}}],["shape_canvas.getcontext('2d",{"_index":4025,"title":{},"body":{"classes/Shape-1.html":{}}}],["shape_canvas.todataurl(\"image/png",{"_index":4027,"title":{},"body":{"classes/Shape-1.html":{}}}],["shaped",{"_index":3996,"title":{},"body":{"classes/Shape-1.html":{}}}],["shapes",{"_index":4000,"title":{},"body":{"classes/Shape-1.html":{}}}],["shared",{"_index":2014,"title":{},"body":{"components/DraftdetailComponent.html":{}}}],["shiftx",{"_index":1835,"title":{},"body":{"interfaces/DraftOperationClassification.html":{},"interfaces/LoomConfig.html":{},"classes/PedalConfig.html":{},"injectables/PlayerService.html":{}}}],["shifty",{"_index":1837,"title":{},"body":{"interfaces/DraftOperationClassification.html":{},"interfaces/LoomConfig.html":{},"classes/PedalConfig.html":{},"injectables/PlayerService.html":{}}}],["shortdraft",{"_index":3744,"title":{},"body":{"interfaces/PlayerState-1.html":{},"interfaces/WeavingLog.html":{},"interfaces/WeavingPick-1.html":{}}}],["shorthand",{"_index":1606,"title":{},"body":{"interfaces/DraftMap.html":{},"interfaces/IOTuple.html":{},"interfaces/Interlacement.html":{},"interfaces/InterlacementVal.html":{},"interfaces/TreeNode.html":{},"miscellaneous/typealiases.html":{}}}],["show",{"_index":200,"title":{},"body":{"classes/AbstractOpFactory.html":{},"classes/BaseOp.html":{},"classes/Branch.html":{},"classes/Bus.html":{},"interfaces/DensityUnits.html":{},"interfaces/DesignMode.html":{},"interfaces/DynamicOperation.html":{},"interfaces/LoomTypes.html":{},"interfaces/MaterialTypes.html":{},"classes/Merge.html":{},"interfaces/OpClassifier.html":{},"interfaces/OpInput.html":{},"interfaces/OperationClassification.html":{},"interfaces/OperationParam.html":{},"interfaces/OperationProperties.html":{},"classes/Params.html":{},"classes/Pipe.html":{},"classes/Seed.html":{},"interfaces/TopologyDef.html":{},"interfaces/TreeOperation.html":{},"interfaces/ViewModes.html":{}}}],["shown",{"_index":1294,"title":{},"body":{"interfaces/DensityUnits.html":{},"interfaces/DesignMode.html":{},"interfaces/LoomTypes.html":{},"interfaces/MaterialTypes.html":{},"interfaces/ViewModes.html":{}}}],["shuttle",{"_index":1652,"title":{"classes/Shuttle.html":{}},"body":{"interfaces/DraftNodeProxy.html":{},"interfaces/FileObj.html":{},"interfaces/FileSaver.html":{},"interfaces/Fileloader.html":{},"interfaces/LoadResponse.html":{},"interfaces/NodeComponentProxy.html":{},"interfaces/OpComponentProxy.html":{},"interfaces/SaveObj.html":{},"classes/Shape.html":{},"classes/Shuttle.html":{},"interfaces/StatusMessage.html":{},"interfaces/TreeNodeProxy.html":{}}}],["shuttledict",{"_index":4059,"title":{},"body":{"classes/Shuttle.html":{}}}],["shuttles",{"_index":1620,"title":{},"body":{"interfaces/DraftMap.html":{},"interfaces/Interlacement.html":{},"interfaces/InterlacementVal.html":{},"classes/Shape.html":{},"miscellaneous/functions.html":{}}}],["si",{"_index":1395,"title":{},"body":{"interfaces/DesignActions.html":{},"interfaces/DraftMap.html":{},"interfaces/Interlacement.html":{},"interfaces/InterlacementVal.html":{},"directives/MarqueeComponent.html":{},"directives/SelectionComponent.html":{}}}],["signature",{"_index":217,"title":{},"body":{"classes/AbstractOpFactory.html":{},"classes/BaseOp.html":{},"classes/Branch.html":{},"classes/Bus.html":{},"classes/Merge.html":{},"interfaces/OpClassifier.html":{},"interfaces/OperationProperties.html":{},"classes/Pipe.html":{},"classes/Seed.html":{},"interfaces/TopologyDef.html":{}}}],["sim",{"_index":908,"title":{},"body":{"interfaces/Crossing.html":{},"interfaces/Vertex.html":{},"interfaces/YarnPath.html":{}}}],["simple",{"_index":2223,"title":{},"body":{"interfaces/DynamicOperation.html":{},"interfaces/OpInput.html":{},"interfaces/OperationClassification.html":{},"interfaces/TreeOperation.html":{}}}],["simplechanges",{"_index":1309,"title":{},"body":{"interfaces/DesignActions.html":{}}}],["simply",{"_index":4578,"title":{},"body":{"index.html":{}}}],["simulated",{"_index":4470,"title":{},"body":{"index.html":{}}}],["simulating",{"_index":4660,"title":{},"body":{"miscellaneous/typealiases.html":{}}}],["simulation",{"_index":907,"title":{},"body":{"interfaces/Crossing.html":{},"interfaces/Vertex.html":{},"interfaces/YarnPath.html":{},"index.html":{},"miscellaneous/typealiases.html":{}}}],["single",{"_index":481,"title":{},"body":{"interfaces/ChainIndex.html":{},"interfaces/DraftOperationClassification.html":{},"interfaces/DynamicOperation.html":{},"interfaces/LoomConfig.html":{},"interfaces/OpInput.html":{},"interfaces/OperationClassification.html":{},"classes/PedalConfig.html":{},"injectables/PlayerService.html":{},"injectables/SequencerService.html":{},"interfaces/TreeOperation.html":{},"index.html":{}}}],["singleinlet",{"_index":528,"title":{},"body":{"interfaces/ChainOp.html":{},"interfaces/DraftOperationClassification.html":{},"interfaces/LoomConfig.html":{},"interfaces/PairedOp.html":{},"classes/PedalConfig.html":{},"interfaces/PedalEvent.html":{},"interfaces/PlayerOp.html":{},"injectables/PlayerService.html":{},"miscellaneous/typealiases.html":{}}}],["singleop",{"_index":540,"title":{},"body":{"interfaces/ChainOp.html":{},"injectables/MappingsService.html":{},"interfaces/PairedOp.html":{},"interfaces/PedalEvent.html":{},"interfaces/PlayerOp.html":{},"miscellaneous/typealiases.html":{}}}],["singleop).name",{"_index":2584,"title":{},"body":{"injectables/MappingsService.html":{}}}],["size",{"_index":1662,"title":{},"body":{"interfaces/DraftNodeProxy.html":{},"components/DraftdetailComponent.html":{},"interfaces/FileObj.html":{},"interfaces/FileSaver.html":{},"interfaces/Fileloader.html":{},"interfaces/LoadResponse.html":{},"components/MixerViewComponent.html":{},"interfaces/NodeComponentProxy.html":{},"components/NoteComponent.html":{},"interfaces/OpComponentProxy.html":{},"components/OpHelpModal.html":{},"components/OpSequencerComponent.html":{},"components/OpsComponent.html":{},"components/ParameterComponent.html":{},"interfaces/SaveObj.html":{},"classes/Shape-1.html":{},"interfaces/StatusMessage.html":{},"interfaces/TreeNodeProxy.html":{},"injectables/ViewportService.html":{},"components/WeavingStateComponent.html":{},"miscellaneous/typealiases.html":{}}}],["sized",{"_index":4156,"title":{},"body":{"classes/System.html":{},"miscellaneous/functions.html":{}}}],["slide",{"_index":2853,"title":{},"body":{"components/MixerViewComponent.html":{}}}],["slider",{"_index":2837,"title":{},"body":{"components/MixerViewComponent.html":{},"components/ParameterComponent.html":{}}}],["slope",{"_index":1839,"title":{},"body":{"interfaces/DraftOperationClassification.html":{},"interfaces/LoomConfig.html":{},"classes/PedalConfig.html":{},"injectables/PlayerService.html":{}}}],["slots",{"_index":2244,"title":{},"body":{"interfaces/DynamicOperation.html":{},"interfaces/OpInput.html":{},"interfaces/OperationClassification.html":{},"interfaces/TreeOperation.html":{}}}],["slowly",{"_index":4553,"title":{},"body":{"index.html":{}}}],["small",{"_index":4346,"title":{},"body":{"components/WeavingStateComponent.html":{}}}],["smaller",{"_index":2144,"title":{},"body":{"interfaces/DynamicOperation.html":{},"interfaces/OpInput.html":{},"interfaces/OperationClassification.html":{},"interfaces/TreeOperation.html":{}}}],["snackbar",{"_index":4103,"title":{},"body":{"components/SnackbarComponent.html":{}}}],["snackbar'},{'name",{"_index":871,"title":{},"body":{"components/ConnectionComponent.html":{},"components/DraftdetailComponent.html":{},"components/ImageComponent.html":{},"components/InletComponent.html":{},"components/MixerViewComponent.html":{},"components/NoteComponent.html":{},"components/OpHelpModal.html":{},"components/OpSequencerComponent.html":{},"components/OpsComponent.html":{},"components/ParameterComponent.html":{},"components/PlayerComponent.html":{},"components/SnackbarComponent.html":{},"components/VirtualPedalsComponent.html":{},"components/WeavingStateComponent.html":{}}}],["snackbar.component.html",{"_index":4105,"title":{},"body":{"components/SnackbarComponent.html":{}}}],["snackbar.component.scss",{"_index":4104,"title":{},"body":{"components/SnackbarComponent.html":{}}}],["snackbarcomponent",{"_index":870,"title":{"components/SnackbarComponent.html":{}},"body":{"components/ConnectionComponent.html":{},"components/DraftdetailComponent.html":{},"components/ImageComponent.html":{},"components/InletComponent.html":{},"modules/MixerModule.html":{},"components/MixerViewComponent.html":{},"components/NoteComponent.html":{},"components/OpHelpModal.html":{},"components/OpSequencerComponent.html":{},"components/OpsComponent.html":{},"components/ParameterComponent.html":{},"components/PlayerComponent.html":{},"components/SnackbarComponent.html":{},"components/VirtualPedalsComponent.html":{},"components/WeavingStateComponent.html":{},"overview.html":{}}}],["snapshot",{"_index":1019,"title":{},"body":{"classes/DBListener.html":{},"classes/DBListenerArray.html":{},"classes/DBNode.html":{},"classes/DBNodeArray.html":{},"classes/DBTwoWay.html":{},"classes/DBTwoWayArray.html":{},"classes/DBWriteBuffer.html":{},"classes/DBWriter.html":{},"classes/DBWriterArray.html":{},"interfaces/NodeMethods.html":{},"interfaces/NodeParams.html":{},"classes/OnlineStatus.html":{}}}],["snapshot.val",{"_index":1021,"title":{},"body":{"classes/DBListener.html":{},"classes/DBListenerArray.html":{},"classes/DBNode.html":{},"classes/DBNodeArray.html":{},"classes/DBTwoWay.html":{},"classes/DBTwoWayArray.html":{},"classes/DBWriteBuffer.html":{},"classes/DBWriter.html":{},"classes/DBWriterArray.html":{},"interfaces/NodeMethods.html":{},"interfaces/NodeParams.html":{},"classes/OnlineStatus.html":{}}}],["solid",{"_index":2477,"title":{},"body":{"components/InletComponent.html":{},"components/MixerViewComponent.html":{},"components/NoteComponent.html":{},"components/ParameterComponent.html":{}}}],["someone",{"_index":1974,"title":{},"body":{"components/DraftdetailComponent.html":{}}}],["source",{"_index":4,"title":{},"body":{"classes/AbstractOpFactory.html":{},"classes/BaseOp.html":{},"interfaces/Bounds.html":{},"classes/Branch.html":{},"classes/Bus.html":{},"classes/Cell.html":{},"interfaces/ChainIndex.html":{},"interfaces/ChainOp.html":{},"components/ConnectionComponent.html":{},"interfaces/Crossing.html":{},"classes/DBListener.html":{},"classes/DBListenerArray.html":{},"classes/DBNode.html":{},"classes/DBNodeArray.html":{},"classes/DBTwoWay.html":{},"classes/DBTwoWayArray.html":{},"classes/DBWriteBuffer.html":{},"classes/DBWriter.html":{},"classes/DBWriterArray.html":{},"interfaces/DensityUnits.html":{},"interfaces/DesignActions.html":{},"interfaces/DesignMode.html":{},"interfaces/DraftMap.html":{},"interfaces/DraftNodeProxy.html":{},"interfaces/DraftOperationClassification.html":{},"components/DraftdetailComponent.html":{},"interfaces/DynamicOperation.html":{},"interfaces/FileObj.html":{},"interfaces/FileSaver.html":{},"interfaces/Fileloader.html":{},"interfaces/IOTuple.html":{},"components/ImageComponent.html":{},"interfaces/Ink.html":{},"injectables/InkService.html":{},"components/InletComponent.html":{},"interfaces/Interlacement.html":{},"interfaces/InterlacementVal.html":{},"injectables/LayersService.html":{},"interfaces/LoadResponse.html":{},"interfaces/LoomConfig.html":{},"interfaces/LoomTypes.html":{},"injectables/MappingsService.html":{},"directives/MarqueeComponent.html":{},"interfaces/MaterialTypes.html":{},"classes/Merge.html":{},"modules/MixerModule.html":{},"components/MixerViewComponent.html":{},"interfaces/NodeComponentProxy.html":{},"interfaces/NodeMethods.html":{},"interfaces/NodeParams.html":{},"components/NoteComponent.html":{},"classes/OnlineStatus.html":{},"interfaces/OpClassifier.html":{},"interfaces/OpComponentProxy.html":{},"components/OpHelpModal.html":{},"interfaces/OpInput.html":{},"classes/OpSequencer.html":{},"components/OpSequencerComponent.html":{},"interfaces/OperationClassification.html":{},"interfaces/OperationParam.html":{},"interfaces/OperationProperties.html":{},"components/OpsComponent.html":{},"interfaces/PairedOp.html":{},"components/ParameterComponent.html":{},"classes/Params.html":{},"interfaces/Pedal.html":{},"classes/PedalConfig.html":{},"interfaces/PedalEvent.html":{},"classes/PedalStatus.html":{},"injectables/PedalsService.html":{},"classes/Pipe.html":{},"components/PlayerComponent.html":{},"modules/PlayerModule.html":{},"interfaces/PlayerOp.html":{},"injectables/PlayerService.html":{},"interfaces/PlayerState.html":{},"interfaces/PlayerState-1.html":{},"interfaces/Point.html":{},"classes/Render.html":{},"interfaces/SaveObj.html":{},"classes/Seed.html":{},"classes/Selection.html":{},"directives/SelectionComponent.html":{},"injectables/SequencerService.html":{},"classes/Shape.html":{},"classes/Shape-1.html":{},"classes/Shuttle.html":{},"components/SnackbarComponent.html":{},"interfaces/StatusMessage.html":{},"classes/System.html":{},"interfaces/TopologyDef.html":{},"interfaces/TreeNode.html":{},"interfaces/TreeNodeProxy.html":{},"interfaces/TreeOperation.html":{},"interfaces/Vertex.html":{},"interfaces/ViewModes.html":{},"injectables/ViewportService.html":{},"components/VirtualPedalsComponent.html":{},"interfaces/WeavingLog.html":{},"interfaces/WeavingPick.html":{},"interfaces/WeavingPick-1.html":{},"components/WeavingStateComponent.html":{},"interfaces/YarnPath.html":{},"index.html":{}}}],["space",{"_index":2129,"title":{},"body":{"components/DraftdetailComponent.html":{},"components/MixerViewComponent.html":{},"injectables/ViewportService.html":{},"index.html":{}}}],["sparce",{"_index":894,"title":{},"body":{"interfaces/Crossing.html":{},"interfaces/DraftNodeProxy.html":{},"interfaces/FileObj.html":{},"interfaces/FileSaver.html":{},"interfaces/Fileloader.html":{},"interfaces/LoadResponse.html":{},"interfaces/NodeComponentProxy.html":{},"interfaces/OpComponentProxy.html":{},"interfaces/SaveObj.html":{},"interfaces/StatusMessage.html":{},"interfaces/TreeNodeProxy.html":{},"interfaces/Vertex.html":{},"interfaces/YarnPath.html":{}}}],["special",{"_index":1036,"title":{},"body":{"classes/DBListener.html":{},"classes/DBListenerArray.html":{},"classes/DBNode.html":{},"classes/DBNodeArray.html":{},"classes/DBTwoWay.html":{},"classes/DBTwoWayArray.html":{},"classes/DBWriteBuffer.html":{},"classes/DBWriter.html":{},"classes/DBWriterArray.html":{},"interfaces/DynamicOperation.html":{},"interfaces/NodeMethods.html":{},"interfaces/NodeParams.html":{},"classes/OnlineStatus.html":{},"interfaces/OpInput.html":{},"interfaces/OperationClassification.html":{},"interfaces/TreeOperation.html":{}}}],["specific",{"_index":542,"title":{},"body":{"interfaces/ChainOp.html":{},"interfaces/OperationParam.html":{},"interfaces/PairedOp.html":{},"interfaces/PedalEvent.html":{},"interfaces/PlayerOp.html":{},"index.html":{}}}],["specifically",{"_index":2286,"title":{},"body":{"interfaces/IOTuple.html":{},"interfaces/TreeNode.html":{}}}],["specified",{"_index":2092,"title":{},"body":{"components/DraftdetailComponent.html":{},"interfaces/IOTuple.html":{},"interfaces/Ink.html":{},"injectables/InkService.html":{},"interfaces/TreeNode.html":{}}}],["specifying",{"_index":3022,"title":{},"body":{"classes/OpSequencer.html":{}}}],["splice",{"_index":1384,"title":{},"body":{"interfaces/DesignActions.html":{},"components/WeavingStateComponent.html":{}}}],["square",{"_index":2311,"title":{},"body":{"interfaces/Ink.html":{},"injectables/InkService.html":{},"components/OpSequencerComponent.html":{},"components/PlayerComponent.html":{},"index.html":{}}}],["src",{"_index":2603,"title":{},"body":{"injectables/MappingsService.html":{}}}],["src/.../dbnodes.ts",{"_index":4636,"title":{},"body":{"miscellaneous/typealiases.html":{}}}],["src/.../drafts.ts",{"_index":4634,"title":{},"body":{"miscellaneous/typealiases.html":{}}}],["src/.../formatting.ts",{"_index":4406,"title":{},"body":{"miscellaneous/functions.html":{}}}],["src/.../inlets.ts",{"_index":4635,"title":{},"body":{"miscellaneous/typealiases.html":{}}}],["src/.../looms.ts",{"_index":4637,"title":{},"body":{"miscellaneous/typealiases.html":{}}}],["src/.../mappings.service.ts",{"_index":4418,"title":{},"body":{"miscellaneous/functions.html":{},"miscellaneous/typealiases.html":{}}}],["src/.../op_definitions.ts",{"_index":4405,"title":{},"body":{"miscellaneous/functions.html":{}}}],["src/.../op_mappings.ts",{"_index":4412,"title":{},"body":{"miscellaneous/functions.html":{},"miscellaneous/typealiases.html":{}}}],["src/.../operation.service.ts",{"_index":4639,"title":{},"body":{"miscellaneous/typealiases.html":{}}}],["src/.../operation.ts",{"_index":4401,"title":{},"body":{"miscellaneous/functions.html":{},"miscellaneous/typealiases.html":{}}}],["src/.../parameter.component.ts",{"_index":4420,"title":{},"body":{"miscellaneous/functions.html":{}}}],["src/.../params.ts",{"_index":4410,"title":{},"body":{"miscellaneous/functions.html":{},"miscellaneous/typealiases.html":{}}}],["src/.../player.ts",{"_index":4403,"title":{},"body":{"miscellaneous/functions.html":{}}}],["src/.../sequencer.ts",{"_index":4413,"title":{},"body":{"miscellaneous/functions.html":{}}}],["src/.../state.ts",{"_index":4402,"title":{},"body":{"miscellaneous/functions.html":{}}}],["src/.../system.ts",{"_index":4415,"title":{},"body":{"miscellaneous/functions.html":{}}}],["src/.../topology.ts",{"_index":4417,"title":{},"body":{"miscellaneous/functions.html":{},"miscellaneous/typealiases.html":{}}}],["src/.../tree.ts",{"_index":4632,"title":{},"body":{"miscellaneous/typealiases.html":{}}}],["src/.../yarnpaths.ts",{"_index":4641,"title":{},"body":{"miscellaneous/typealiases.html":{}}}],["src/.../yarnsim.ts",{"_index":4633,"title":{},"body":{"miscellaneous/typealiases.html":{}}}],["src/app",{"_index":4522,"title":{},"body":{"index.html":{}}}],["src/app/core/model/cell.ts",{"_index":367,"title":{},"body":{"classes/Cell.html":{}}}],["src/app/core/model/cell.ts:10",{"_index":389,"title":{},"body":{"classes/Cell.html":{}}}],["src/app/core/model/cell.ts:101",{"_index":408,"title":{},"body":{"classes/Cell.html":{}}}],["src/app/core/model/cell.ts:108",{"_index":395,"title":{},"body":{"classes/Cell.html":{}}}],["src/app/core/model/cell.ts:11",{"_index":382,"title":{},"body":{"classes/Cell.html":{}}}],["src/app/core/model/cell.ts:32",{"_index":397,"title":{},"body":{"classes/Cell.html":{}}}],["src/app/core/model/cell.ts:50",{"_index":394,"title":{},"body":{"classes/Cell.html":{}}}],["src/app/core/model/cell.ts:54",{"_index":406,"title":{},"body":{"classes/Cell.html":{}}}],["src/app/core/model/cell.ts:59",{"_index":405,"title":{},"body":{"classes/Cell.html":{}}}],["src/app/core/model/cell.ts:70",{"_index":404,"title":{},"body":{"classes/Cell.html":{}}}],["src/app/core/model/cell.ts:84",{"_index":390,"title":{},"body":{"classes/Cell.html":{}}}],["src/app/core/model/cell.ts:91",{"_index":407,"title":{},"body":{"classes/Cell.html":{}}}],["src/app/core/model/datatypes/drafts.ts",{"_index":1600,"title":{},"body":{"interfaces/DraftMap.html":{},"interfaces/Interlacement.html":{},"interfaces/InterlacementVal.html":{},"miscellaneous/typealiases.html":{}}}],["src/app/core/model/datatypes/files.ts",{"_index":1646,"title":{},"body":{"interfaces/DraftNodeProxy.html":{},"interfaces/FileObj.html":{},"interfaces/FileSaver.html":{},"interfaces/Fileloader.html":{},"interfaces/LoadResponse.html":{},"interfaces/NodeComponentProxy.html":{},"interfaces/OpComponentProxy.html":{},"interfaces/SaveObj.html":{},"interfaces/StatusMessage.html":{},"interfaces/TreeNodeProxy.html":{}}}],["src/app/core/model/datatypes/looms.ts",{"_index":4646,"title":{},"body":{"miscellaneous/typealiases.html":{}}}],["src/app/core/model/datatypes/screenlayout.ts",{"_index":338,"title":{},"body":{"interfaces/Bounds.html":{},"interfaces/Point.html":{}}}],["src/app/core/model/datatypes/selectlists.ts",{"_index":1280,"title":{},"body":{"interfaces/DensityUnits.html":{},"interfaces/DesignMode.html":{},"interfaces/LoomTypes.html":{},"interfaces/MaterialTypes.html":{},"interfaces/ViewModes.html":{}}}],["src/app/core/model/datatypes/tree.ts",{"_index":2250,"title":{},"body":{"interfaces/IOTuple.html":{},"interfaces/TreeNode.html":{},"miscellaneous/typealiases.html":{}}}],["src/app/core/model/datatypes/yarnpaths.ts",{"_index":4651,"title":{},"body":{"miscellaneous/typealiases.html":{}}}],["src/app/core/model/datatypes/yarnsim.ts",{"_index":884,"title":{},"body":{"interfaces/Crossing.html":{},"interfaces/Vertex.html":{},"interfaces/YarnPath.html":{},"miscellaneous/typealiases.html":{}}}],["src/app/core/model/render.ts",{"_index":3751,"title":{},"body":{"classes/Render.html":{}}}],["src/app/core/model/render.ts:101",{"_index":3788,"title":{},"body":{"classes/Render.html":{}}}],["src/app/core/model/render.ts:116",{"_index":3785,"title":{},"body":{"classes/Render.html":{}}}],["src/app/core/model/render.ts:125",{"_index":3782,"title":{},"body":{"classes/Render.html":{}}}],["src/app/core/model/render.ts:13",{"_index":3776,"title":{},"body":{"classes/Render.html":{}}}],["src/app/core/model/render.ts:15",{"_index":3778,"title":{},"body":{"classes/Render.html":{}}}],["src/app/core/model/render.ts:157",{"_index":3801,"title":{},"body":{"classes/Render.html":{}}}],["src/app/core/model/render.ts:161",{"_index":3791,"title":{},"body":{"classes/Render.html":{}}}],["src/app/core/model/render.ts:165",{"_index":3805,"title":{},"body":{"classes/Render.html":{}}}],["src/app/core/model/render.ts:17",{"_index":3779,"title":{},"body":{"classes/Render.html":{}}}],["src/app/core/model/render.ts:170",{"_index":3804,"title":{},"body":{"classes/Render.html":{}}}],["src/app/core/model/render.ts:176",{"_index":3787,"title":{},"body":{"classes/Render.html":{}}}],["src/app/core/model/render.ts:187",{"_index":3795,"title":{},"body":{"classes/Render.html":{}}}],["src/app/core/model/render.ts:19",{"_index":3780,"title":{},"body":{"classes/Render.html":{}}}],["src/app/core/model/render.ts:191",{"_index":3783,"title":{},"body":{"classes/Render.html":{}}}],["src/app/core/model/render.ts:195",{"_index":3797,"title":{},"body":{"classes/Render.html":{}}}],["src/app/core/model/render.ts:199",{"_index":3794,"title":{},"body":{"classes/Render.html":{}}}],["src/app/core/model/render.ts:203",{"_index":3799,"title":{},"body":{"classes/Render.html":{}}}],["src/app/core/model/render.ts:207",{"_index":3803,"title":{},"body":{"classes/Render.html":{}}}],["src/app/core/model/render.ts:21",{"_index":3775,"title":{},"body":{"classes/Render.html":{}}}],["src/app/core/model/render.ts:30",{"_index":3777,"title":{},"body":{"classes/Render.html":{}}}],["src/app/core/model/render.ts:33",{"_index":3773,"title":{},"body":{"classes/Render.html":{}}}],["src/app/core/model/render.ts:87",{"_index":3793,"title":{},"body":{"classes/Render.html":{}}}],["src/app/core/model/selection.ts",{"_index":3856,"title":{},"body":{"classes/Selection.html":{}}}],["src/app/core/model/selection.ts:10",{"_index":3869,"title":{},"body":{"classes/Selection.html":{}}}],["src/app/core/model/selection.ts:11",{"_index":3866,"title":{},"body":{"classes/Selection.html":{}}}],["src/app/core/model/selection.ts:12",{"_index":3868,"title":{},"body":{"classes/Selection.html":{}}}],["src/app/core/model/selection.ts:15",{"_index":3875,"title":{},"body":{"classes/Selection.html":{}}}],["src/app/core/model/selection.ts:26",{"_index":3878,"title":{},"body":{"classes/Selection.html":{}}}],["src/app/core/model/selection.ts:31",{"_index":3874,"title":{},"body":{"classes/Selection.html":{}}}],["src/app/core/model/selection.ts:35",{"_index":3873,"title":{},"body":{"classes/Selection.html":{}}}],["src/app/core/model/selection.ts:39",{"_index":3870,"title":{},"body":{"classes/Selection.html":{}}}],["src/app/core/model/selection.ts:43",{"_index":3877,"title":{},"body":{"classes/Selection.html":{}}}],["src/app/core/model/selection.ts:47",{"_index":3871,"title":{},"body":{"classes/Selection.html":{}}}],["src/app/core/model/selection.ts:51",{"_index":3872,"title":{},"body":{"classes/Selection.html":{}}}],["src/app/core/model/selection.ts:8",{"_index":3867,"title":{},"body":{"classes/Selection.html":{}}}],["src/app/core/model/selection.ts:9",{"_index":3865,"title":{},"body":{"classes/Selection.html":{}}}],["src/app/core/model/shape.ts",{"_index":3933,"title":{},"body":{"classes/Shape.html":{}}}],["src/app/core/model/shape.ts:11",{"_index":3953,"title":{},"body":{"classes/Shape.html":{}}}],["src/app/core/model/shape.ts:12",{"_index":3954,"title":{},"body":{"classes/Shape.html":{}}}],["src/app/core/model/shape.ts:13",{"_index":3958,"title":{},"body":{"classes/Shape.html":{}}}],["src/app/core/model/shape.ts:14",{"_index":3955,"title":{},"body":{"classes/Shape.html":{}}}],["src/app/core/model/shape.ts:15",{"_index":3952,"title":{},"body":{"classes/Shape.html":{}}}],["src/app/core/model/shape.ts:16",{"_index":3957,"title":{},"body":{"classes/Shape.html":{}}}],["src/app/core/model/shape.ts:17",{"_index":3951,"title":{},"body":{"classes/Shape.html":{}}}],["src/app/core/model/shape.ts:18",{"_index":3956,"title":{},"body":{"classes/Shape.html":{}}}],["src/app/core/model/shape.ts:19",{"_index":3950,"title":{},"body":{"classes/Shape.html":{}}}],["src/app/core/model/shape.ts:31",{"_index":3972,"title":{},"body":{"classes/Shape.html":{}}}],["src/app/core/model/shape.ts:38",{"_index":3976,"title":{},"body":{"classes/Shape.html":{}}}],["src/app/core/model/shape.ts:42",{"_index":3974,"title":{},"body":{"classes/Shape.html":{}}}],["src/app/core/model/shape.ts:46",{"_index":3969,"title":{},"body":{"classes/Shape.html":{}}}],["src/app/core/model/shape.ts:52",{"_index":3966,"title":{},"body":{"classes/Shape.html":{}}}],["src/app/core/model/shape.ts:56",{"_index":3964,"title":{},"body":{"classes/Shape.html":{}}}],["src/app/core/model/shape.ts:60",{"_index":3965,"title":{},"body":{"classes/Shape.html":{}}}],["src/app/core/model/shape.ts:66",{"_index":3967,"title":{},"body":{"classes/Shape.html":{}}}],["src/app/core/model/shape.ts:83",{"_index":3960,"title":{},"body":{"classes/Shape.html":{}}}],["src/app/core/model/shape.ts:90",{"_index":3977,"title":{},"body":{"classes/Shape.html":{}}}],["src/app/core/model/shuttle.ts",{"_index":4042,"title":{},"body":{"classes/Shuttle.html":{}}}],["src/app/core/model/shuttle.ts:10",{"_index":4068,"title":{},"body":{"classes/Shuttle.html":{}}}],["src/app/core/model/shuttle.ts:11",{"_index":4060,"title":{},"body":{"classes/Shuttle.html":{}}}],["src/app/core/model/shuttle.ts:12",{"_index":4066,"title":{},"body":{"classes/Shuttle.html":{}}}],["src/app/core/model/shuttle.ts:13",{"_index":4067,"title":{},"body":{"classes/Shuttle.html":{}}}],["src/app/core/model/shuttle.ts:15",{"_index":4065,"title":{},"body":{"classes/Shuttle.html":{}}}],["src/app/core/model/shuttle.ts:16",{"_index":4061,"title":{},"body":{"classes/Shuttle.html":{}}}],["src/app/core/model/shuttle.ts:17",{"_index":4058,"title":{},"body":{"classes/Shuttle.html":{}}}],["src/app/core/model/shuttle.ts:36",{"_index":4084,"title":{},"body":{"classes/Shuttle.html":{}}}],["src/app/core/model/shuttle.ts:52",{"_index":4076,"title":{},"body":{"classes/Shuttle.html":{}}}],["src/app/core/model/shuttle.ts:59",{"_index":4070,"title":{},"body":{"classes/Shuttle.html":{}}}],["src/app/core/model/shuttle.ts:63",{"_index":4075,"title":{},"body":{"classes/Shuttle.html":{}}}],["src/app/core/model/shuttle.ts:67",{"_index":4078,"title":{},"body":{"classes/Shuttle.html":{}}}],["src/app/core/model/shuttle.ts:7",{"_index":4062,"title":{},"body":{"classes/Shuttle.html":{}}}],["src/app/core/model/shuttle.ts:72",{"_index":4080,"title":{},"body":{"classes/Shuttle.html":{}}}],["src/app/core/model/shuttle.ts:76",{"_index":4082,"title":{},"body":{"classes/Shuttle.html":{}}}],["src/app/core/model/shuttle.ts:8",{"_index":4064,"title":{},"body":{"classes/Shuttle.html":{}}}],["src/app/core/model/shuttle.ts:80",{"_index":4069,"title":{},"body":{"classes/Shuttle.html":{}}}],["src/app/core/model/shuttle.ts:84",{"_index":4072,"title":{},"body":{"classes/Shuttle.html":{}}}],["src/app/core/model/shuttle.ts:88",{"_index":4073,"title":{},"body":{"classes/Shuttle.html":{}}}],["src/app/core/model/shuttle.ts:9",{"_index":4063,"title":{},"body":{"classes/Shuttle.html":{}}}],["src/app/core/model/shuttle.ts:92",{"_index":4071,"title":{},"body":{"classes/Shuttle.html":{}}}],["src/app/core/model/system.ts",{"_index":4125,"title":{},"body":{"classes/System.html":{},"miscellaneous/functions.html":{}}}],["src/app/core/model/system.ts:10",{"_index":4138,"title":{},"body":{"classes/System.html":{}}}],["src/app/core/model/system.ts:11",{"_index":4139,"title":{},"body":{"classes/System.html":{}}}],["src/app/core/model/system.ts:12",{"_index":4140,"title":{},"body":{"classes/System.html":{}}}],["src/app/core/model/system.ts:13",{"_index":4135,"title":{},"body":{"classes/System.html":{}}}],["src/app/core/model/system.ts:27",{"_index":4146,"title":{},"body":{"classes/System.html":{}}}],["src/app/core/model/system.ts:34",{"_index":4143,"title":{},"body":{"classes/System.html":{}}}],["src/app/core/model/system.ts:41",{"_index":4142,"title":{},"body":{"classes/System.html":{}}}],["src/app/core/model/system.ts:45",{"_index":4145,"title":{},"body":{"classes/System.html":{}}}],["src/app/core/model/system.ts:49",{"_index":4141,"title":{},"body":{"classes/System.html":{}}}],["src/app/core/model/system.ts:9",{"_index":4137,"title":{},"body":{"classes/System.html":{}}}],["src/app/core/provider",{"_index":4537,"title":{},"body":{"index.html":{}}}],["src/app/mixer/mixer.module.ts",{"_index":2684,"title":{},"body":{"modules/MixerModule.html":{}}}],["src/app/mixer/modal/draftdetail/draftdetail.component.ts",{"_index":1941,"title":{},"body":{"components/DraftdetailComponent.html":{}}}],["src/app/mixer/modal/draftdetail/draftdetail.component.ts:119",{"_index":1972,"title":{},"body":{"components/DraftdetailComponent.html":{}}}],["src/app/mixer/modal/draftdetail/draftdetail.component.ts:127",{"_index":1971,"title":{},"body":{"components/DraftdetailComponent.html":{}}}],["src/app/mixer/modal/draftdetail/draftdetail.component.ts:135",{"_index":1980,"title":{},"body":{"components/DraftdetailComponent.html":{}}}],["src/app/mixer/modal/draftdetail/draftdetail.component.ts:139",{"_index":1970,"title":{},"body":{"components/DraftdetailComponent.html":{}}}],["src/app/mixer/modal/draftdetail/draftdetail.component.ts:155",{"_index":1985,"title":{},"body":{"components/DraftdetailComponent.html":{}}}],["src/app/mixer/modal/draftdetail/draftdetail.component.ts:159",{"_index":1979,"title":{},"body":{"components/DraftdetailComponent.html":{}}}],["src/app/mixer/modal/draftdetail/draftdetail.component.ts:165",{"_index":1981,"title":{},"body":{"components/DraftdetailComponent.html":{}}}],["src/app/mixer/modal/draftdetail/draftdetail.component.ts:172",{"_index":1989,"title":{},"body":{"components/DraftdetailComponent.html":{}}}],["src/app/mixer/modal/draftdetail/draftdetail.component.ts:176",{"_index":1990,"title":{},"body":{"components/DraftdetailComponent.html":{}}}],["src/app/mixer/modal/draftdetail/draftdetail.component.ts:180",{"_index":1991,"title":{},"body":{"components/DraftdetailComponent.html":{}}}],["src/app/mixer/modal/draftdetail/draftdetail.component.ts:185",{"_index":1977,"title":{},"body":{"components/DraftdetailComponent.html":{}}}],["src/app/mixer/modal/draftdetail/draftdetail.component.ts:190",{"_index":1978,"title":{},"body":{"components/DraftdetailComponent.html":{}}}],["src/app/mixer/modal/draftdetail/draftdetail.component.ts:195",{"_index":1986,"title":{},"body":{"components/DraftdetailComponent.html":{}}}],["src/app/mixer/modal/draftdetail/draftdetail.component.ts:30",{"_index":2005,"title":{},"body":{"components/DraftdetailComponent.html":{}}}],["src/app/mixer/modal/draftdetail/draftdetail.component.ts:33",{"_index":1996,"title":{},"body":{"components/DraftdetailComponent.html":{}}}],["src/app/mixer/modal/draftdetail/draftdetail.component.ts:36",{"_index":1997,"title":{},"body":{"components/DraftdetailComponent.html":{}}}],["src/app/mixer/modal/draftdetail/draftdetail.component.ts:41",{"_index":1993,"title":{},"body":{"components/DraftdetailComponent.html":{}}}],["src/app/mixer/modal/draftdetail/draftdetail.component.ts:48",{"_index":1999,"title":{},"body":{"components/DraftdetailComponent.html":{}}}],["src/app/mixer/modal/draftdetail/draftdetail.component.ts:50",{"_index":2000,"title":{},"body":{"components/DraftdetailComponent.html":{}}}],["src/app/mixer/modal/draftdetail/draftdetail.component.ts:53",{"_index":2001,"title":{},"body":{"components/DraftdetailComponent.html":{}}}],["src/app/mixer/modal/draftdetail/draftdetail.component.ts:55",{"_index":1967,"title":{},"body":{"components/DraftdetailComponent.html":{}}}],["src/app/mixer/modal/draftdetail/draftdetail.component.ts:61",{"_index":1998,"title":{},"body":{"components/DraftdetailComponent.html":{}}}],["src/app/mixer/modal/draftdetail/draftdetail.component.ts:62",{"_index":1992,"title":{},"body":{"components/DraftdetailComponent.html":{}}}],["src/app/mixer/modal/draftdetail/draftdetail.component.ts:65",{"_index":2006,"title":{},"body":{"components/DraftdetailComponent.html":{}}}],["src/app/mixer/modal/draftdetail/draftdetail.component.ts:93",{"_index":1988,"title":{},"body":{"components/DraftdetailComponent.html":{}}}],["src/app/mixer/modal/draftdetail/draftdetail.component.ts:96",{"_index":1984,"title":{},"body":{"components/DraftdetailComponent.html":{}}}],["src/app/mixer/modal/mixerview/mixerview.component.ts",{"_index":2709,"title":{},"body":{"components/MixerViewComponent.html":{}}}],["src/app/mixer/modal/mixerview/mixerview.component.ts:100",{"_index":2749,"title":{},"body":{"components/MixerViewComponent.html":{}}}],["src/app/mixer/modal/mixerview/mixerview.component.ts:106",{"_index":2751,"title":{},"body":{"components/MixerViewComponent.html":{}}}],["src/app/mixer/modal/mixerview/mixerview.component.ts:123",{"_index":2734,"title":{},"body":{"components/MixerViewComponent.html":{}}}],["src/app/mixer/modal/mixerview/mixerview.component.ts:127",{"_index":2738,"title":{},"body":{"components/MixerViewComponent.html":{}}}],["src/app/mixer/modal/mixerview/mixerview.component.ts:13",{"_index":2731,"title":{},"body":{"components/MixerViewComponent.html":{}}}],["src/app/mixer/modal/mixerview/mixerview.component.ts:131",{"_index":2743,"title":{},"body":{"components/MixerViewComponent.html":{}}}],["src/app/mixer/modal/mixerview/mixerview.component.ts:14",{"_index":2730,"title":{},"body":{"components/MixerViewComponent.html":{}}}],["src/app/mixer/modal/mixerview/mixerview.component.ts:142",{"_index":2736,"title":{},"body":{"components/MixerViewComponent.html":{}}}],["src/app/mixer/modal/mixerview/mixerview.component.ts:17",{"_index":2752,"title":{},"body":{"components/MixerViewComponent.html":{}}}],["src/app/mixer/modal/mixerview/mixerview.component.ts:175",{"_index":2732,"title":{},"body":{"components/MixerViewComponent.html":{}}}],["src/app/mixer/modal/mixerview/mixerview.component.ts:20",{"_index":2757,"title":{},"body":{"components/MixerViewComponent.html":{}}}],["src/app/mixer/modal/mixerview/mixerview.component.ts:23",{"_index":2755,"title":{},"body":{"components/MixerViewComponent.html":{}}}],["src/app/mixer/modal/mixerview/mixerview.component.ts:26",{"_index":2753,"title":{},"body":{"components/MixerViewComponent.html":{}}}],["src/app/mixer/modal/mixerview/mixerview.component.ts:29",{"_index":2759,"title":{},"body":{"components/MixerViewComponent.html":{}}}],["src/app/mixer/modal/mixerview/mixerview.component.ts:30",{"_index":2756,"title":{},"body":{"components/MixerViewComponent.html":{}}}],["src/app/mixer/modal/mixerview/mixerview.component.ts:33",{"_index":2760,"title":{},"body":{"components/MixerViewComponent.html":{}}}],["src/app/mixer/modal/mixerview/mixerview.component.ts:35",{"_index":2729,"title":{},"body":{"components/MixerViewComponent.html":{}}}],["src/app/mixer/modal/mixerview/mixerview.component.ts:37",{"_index":2758,"title":{},"body":{"components/MixerViewComponent.html":{}}}],["src/app/mixer/modal/mixerview/mixerview.component.ts:40",{"_index":2754,"title":{},"body":{"components/MixerViewComponent.html":{}}}],["src/app/mixer/modal/mixerview/mixerview.component.ts:68",{"_index":2745,"title":{},"body":{"components/MixerViewComponent.html":{}}}],["src/app/mixer/modal/mixerview/mixerview.component.ts:75",{"_index":2744,"title":{},"body":{"components/MixerViewComponent.html":{}}}],["src/app/mixer/modal/mixerview/mixerview.component.ts:81",{"_index":2740,"title":{},"body":{"components/MixerViewComponent.html":{}}}],["src/app/mixer/modal/mixerview/mixerview.component.ts:88",{"_index":2746,"title":{},"body":{"components/MixerViewComponent.html":{}}}],["src/app/mixer/modal/mixerview/mixerview.component.ts:96",{"_index":2748,"title":{},"body":{"components/MixerViewComponent.html":{}}}],["src/app/mixer/modal/ophelp/ophelp.modal.ts",{"_index":2954,"title":{},"body":{"components/OpHelpModal.html":{}}}],["src/app/mixer/modal/ophelp/ophelp.modal.ts:13",{"_index":2966,"title":{},"body":{"components/OpHelpModal.html":{}}}],["src/app/mixer/modal/ophelp/ophelp.modal.ts:14",{"_index":2970,"title":{},"body":{"components/OpHelpModal.html":{}}}],["src/app/mixer/modal/ophelp/ophelp.modal.ts:15",{"_index":2969,"title":{},"body":{"components/OpHelpModal.html":{}}}],["src/app/mixer/modal/ophelp/ophelp.modal.ts:16",{"_index":2971,"title":{},"body":{"components/OpHelpModal.html":{}}}],["src/app/mixer/modal/ophelp/ophelp.modal.ts:17",{"_index":2968,"title":{},"body":{"components/OpHelpModal.html":{}}}],["src/app/mixer/modal/ophelp/ophelp.modal.ts:18",{"_index":2967,"title":{},"body":{"components/OpHelpModal.html":{}}}],["src/app/mixer/modal/ophelp/ophelp.modal.ts:19",{"_index":2962,"title":{},"body":{"components/OpHelpModal.html":{}}}],["src/app/mixer/modal/ophelp/ophelp.modal.ts:25",{"_index":2965,"title":{},"body":{"components/OpHelpModal.html":{}}}],["src/app/mixer/modal/ophelp/ophelp.modal.ts:42",{"_index":2964,"title":{},"body":{"components/OpHelpModal.html":{}}}],["src/app/mixer/modal/ophelp/ophelp.modal.ts:45",{"_index":2963,"title":{},"body":{"components/OpHelpModal.html":{}}}],["src/app/mixer/modal/ops/ops.component.ts",{"_index":3202,"title":{},"body":{"components/OpsComponent.html":{}}}],["src/app/mixer/modal/ops/ops.component.ts:16",{"_index":3216,"title":{},"body":{"components/OpsComponent.html":{}}}],["src/app/mixer/modal/ops/ops.component.ts:17",{"_index":3215,"title":{},"body":{"components/OpsComponent.html":{}}}],["src/app/mixer/modal/ops/ops.component.ts:19",{"_index":3229,"title":{},"body":{"components/OpsComponent.html":{}}}],["src/app/mixer/modal/ops/ops.component.ts:20",{"_index":3226,"title":{},"body":{"components/OpsComponent.html":{}}}],["src/app/mixer/modal/ops/ops.component.ts:21",{"_index":3228,"title":{},"body":{"components/OpsComponent.html":{}}}],["src/app/mixer/modal/ops/ops.component.ts:22",{"_index":3214,"title":{},"body":{"components/OpsComponent.html":{}}}],["src/app/mixer/modal/ops/ops.component.ts:24",{"_index":3230,"title":{},"body":{"components/OpsComponent.html":{}}}],["src/app/mixer/modal/ops/ops.component.ts:26",{"_index":3225,"title":{},"body":{"components/OpsComponent.html":{}}}],["src/app/mixer/modal/ops/ops.component.ts:28",{"_index":3224,"title":{},"body":{"components/OpsComponent.html":{}}}],["src/app/mixer/modal/ops/ops.component.ts:40",{"_index":3218,"title":{},"body":{"components/OpsComponent.html":{}}}],["src/app/mixer/modal/ops/ops.component.ts:45",{"_index":3223,"title":{},"body":{"components/OpsComponent.html":{}}}],["src/app/mixer/modal/ops/ops.component.ts:51",{"_index":3220,"title":{},"body":{"components/OpsComponent.html":{}}}],["src/app/mixer/modal/ops/ops.component.ts:55",{"_index":3222,"title":{},"body":{"components/OpsComponent.html":{}}}],["src/app/mixer/model/op_definitions.ts",{"_index":4422,"title":{},"body":{"miscellaneous/functions.html":{}}}],["src/app/mixer/model/operation.ts",{"_index":2132,"title":{},"body":{"interfaces/DynamicOperation.html":{},"interfaces/OpInput.html":{},"interfaces/OperationClassification.html":{},"interfaces/TreeOperation.html":{},"miscellaneous/functions.html":{},"miscellaneous/typealiases.html":{}}}],["src/app/mixer/model/operation/formatting.ts",{"_index":4424,"title":{},"body":{"miscellaneous/functions.html":{}}}],["src/app/mixer/model/operation/inlets.ts",{"_index":4644,"title":{},"body":{"miscellaneous/typealiases.html":{}}}],["src/app/mixer/model/operation/params.ts",{"_index":3146,"title":{},"body":{"interfaces/OperationParam.html":{},"classes/Params.html":{},"miscellaneous/functions.html":{},"miscellaneous/typealiases.html":{}}}],["src/app/mixer/model/operation/params.ts:106",{"_index":3349,"title":{},"body":{"classes/Params.html":{}}}],["src/app/mixer/model/operation/params.ts:107",{"_index":3351,"title":{},"body":{"classes/Params.html":{}}}],["src/app/mixer/model/operation/params.ts:114",{"_index":3352,"title":{},"body":{"classes/Params.html":{}}}],["src/app/mixer/model/operation/params.ts:125",{"_index":3353,"title":{},"body":{"classes/Params.html":{}}}],["src/app/mixer/model/operation/params.ts:126",{"_index":3355,"title":{},"body":{"classes/Params.html":{}}}],["src/app/mixer/model/operation/params.ts:133",{"_index":3356,"title":{},"body":{"classes/Params.html":{}}}],["src/app/mixer/model/operation/topology.ts",{"_index":6,"title":{},"body":{"classes/AbstractOpFactory.html":{},"classes/BaseOp.html":{},"classes/Branch.html":{},"classes/Bus.html":{},"classes/Merge.html":{},"interfaces/OpClassifier.html":{},"interfaces/OperationProperties.html":{},"classes/Pipe.html":{},"classes/Seed.html":{},"interfaces/TopologyDef.html":{},"miscellaneous/functions.html":{},"miscellaneous/typealiases.html":{}}}],["src/app/mixer/model/operation/topology.ts:203",{"_index":330,"title":{},"body":{"classes/BaseOp.html":{}}}],["src/app/mixer/model/operation/topology.ts:204",{"_index":331,"title":{},"body":{"classes/BaseOp.html":{}}}],["src/app/mixer/model/operation/topology.ts:205",{"_index":326,"title":{},"body":{"classes/BaseOp.html":{}}}],["src/app/mixer/model/operation/topology.ts:206",{"_index":327,"title":{},"body":{"classes/BaseOp.html":{}}}],["src/app/mixer/model/operation/topology.ts:207",{"_index":332,"title":{},"body":{"classes/BaseOp.html":{}}}],["src/app/mixer/model/operation/topology.ts:208",{"_index":328,"title":{},"body":{"classes/BaseOp.html":{}}}],["src/app/mixer/model/operation/topology.ts:209",{"_index":325,"title":{},"body":{"classes/BaseOp.html":{}}}],["src/app/mixer/model/operation/topology.ts:210",{"_index":329,"title":{},"body":{"classes/BaseOp.html":{}}}],["src/app/mixer/model/operation/topology.ts:211",{"_index":324,"title":{},"body":{"classes/BaseOp.html":{}}}],["src/app/mixer/model/operation/topology.ts:212",{"_index":333,"title":{},"body":{"classes/BaseOp.html":{}}}],["src/app/mixer/model/operation/topology.ts:219",{"_index":322,"title":{},"body":{"classes/BaseOp.html":{}}}],["src/app/mixer/model/operation/topology.ts:249",{"_index":334,"title":{},"body":{"classes/BaseOp.html":{}}}],["src/app/mixer/model/operation/topology.ts:255",{"_index":335,"title":{},"body":{"classes/BaseOp.html":{}}}],["src/app/mixer/model/operation/topology.ts:313",{"_index":36,"title":{},"body":{"classes/AbstractOpFactory.html":{}}}],["src/app/mixer/model/operation/topology.ts:314",{"_index":37,"title":{},"body":{"classes/AbstractOpFactory.html":{}}}],["src/app/mixer/model/operation/topology.ts:315",{"_index":39,"title":{},"body":{"classes/AbstractOpFactory.html":{}}}],["src/app/mixer/model/operation/topology.ts:321",{"_index":41,"title":{},"body":{"classes/AbstractOpFactory.html":{}}}],["src/app/mixer/model/operation/topology.ts:322",{"_index":42,"title":{},"body":{"classes/AbstractOpFactory.html":{}}}],["src/app/mixer/model/operation/topology.ts:323",{"_index":44,"title":{},"body":{"classes/AbstractOpFactory.html":{}}}],["src/app/mixer/model/operation/topology.ts:329",{"_index":31,"title":{},"body":{"classes/AbstractOpFactory.html":{}}}],["src/app/mixer/model/operation/topology.ts:330",{"_index":32,"title":{},"body":{"classes/AbstractOpFactory.html":{}}}],["src/app/mixer/model/operation/topology.ts:331",{"_index":34,"title":{},"body":{"classes/AbstractOpFactory.html":{}}}],["src/app/mixer/model/operation/topology.ts:337",{"_index":46,"title":{},"body":{"classes/AbstractOpFactory.html":{}}}],["src/app/mixer/model/operation/topology.ts:338",{"_index":47,"title":{},"body":{"classes/AbstractOpFactory.html":{}}}],["src/app/mixer/model/operation/topology.ts:339",{"_index":49,"title":{},"body":{"classes/AbstractOpFactory.html":{}}}],["src/app/mixer/model/operation/topology.ts:345",{"_index":17,"title":{},"body":{"classes/AbstractOpFactory.html":{}}}],["src/app/mixer/model/operation/topology.ts:346",{"_index":28,"title":{},"body":{"classes/AbstractOpFactory.html":{}}}],["src/app/mixer/model/operation/topology.ts:347",{"_index":29,"title":{},"body":{"classes/AbstractOpFactory.html":{}}}],["src/app/mixer/model/operation/topology.ts:47",{"_index":3855,"title":{},"body":{"classes/Seed.html":{}}}],["src/app/mixer/model/operation/topology.ts:56",{"_index":3606,"title":{},"body":{"classes/Pipe.html":{}}}],["src/app/mixer/model/operation/topology.ts:65",{"_index":2674,"title":{},"body":{"classes/Merge.html":{}}}],["src/app/mixer/model/operation/topology.ts:74",{"_index":364,"title":{},"body":{"classes/Branch.html":{}}}],["src/app/mixer/model/operation/topology.ts:85",{"_index":365,"title":{},"body":{"classes/Bus.html":{}}}],["src/app/mixer/model/shape.ts",{"_index":3994,"title":{},"body":{"classes/Shape-1.html":{}}}],["src/app/mixer/model/shape.ts:101",{"_index":4015,"title":{},"body":{"classes/Shape-1.html":{}}}],["src/app/mixer/model/shape.ts:12",{"_index":4013,"title":{},"body":{"classes/Shape-1.html":{}}}],["src/app/mixer/model/shape.ts:13",{"_index":4014,"title":{},"body":{"classes/Shape-1.html":{}}}],["src/app/mixer/model/shape.ts:14",{"_index":4011,"title":{},"body":{"classes/Shape-1.html":{}}}],["src/app/mixer/model/shape.ts:15",{"_index":4009,"title":{},"body":{"classes/Shape-1.html":{}}}],["src/app/mixer/model/shape.ts:35",{"_index":4016,"title":{},"body":{"classes/Shape-1.html":{}}}],["src/app/mixer/model/shape.ts:45",{"_index":4020,"title":{},"body":{"classes/Shape-1.html":{}}}],["src/app/mixer/model/shape.ts:78",{"_index":4017,"title":{},"body":{"classes/Shape-1.html":{}}}],["src/app/mixer/palette/connection/connection.component.ts",{"_index":647,"title":{},"body":{"components/ConnectionComponent.html":{}}}],["src/app/mixer/palette/connection/connection.component.ts:119",{"_index":699,"title":{},"body":{"components/ConnectionComponent.html":{}}}],["src/app/mixer/palette/connection/connection.component.ts:141",{"_index":682,"title":{},"body":{"components/ConnectionComponent.html":{}}}],["src/app/mixer/palette/connection/connection.component.ts:16",{"_index":680,"title":{},"body":{"components/ConnectionComponent.html":{}}}],["src/app/mixer/palette/connection/connection.component.ts:167",{"_index":684,"title":{},"body":{"components/ConnectionComponent.html":{}}}],["src/app/mixer/palette/connection/connection.component.ts:17",{"_index":681,"title":{},"body":{"components/ConnectionComponent.html":{}}}],["src/app/mixer/palette/connection/connection.component.ts:18",{"_index":679,"title":{},"body":{"components/ConnectionComponent.html":{}}}],["src/app/mixer/palette/connection/connection.component.ts:185",{"_index":687,"title":{},"body":{"components/ConnectionComponent.html":{}}}],["src/app/mixer/palette/connection/connection.component.ts:207",{"_index":693,"title":{},"body":{"components/ConnectionComponent.html":{}}}],["src/app/mixer/palette/connection/connection.component.ts:21",{"_index":721,"title":{},"body":{"components/ConnectionComponent.html":{}}}],["src/app/mixer/palette/connection/connection.component.ts:22",{"_index":726,"title":{},"body":{"components/ConnectionComponent.html":{}}}],["src/app/mixer/palette/connection/connection.component.ts:23",{"_index":727,"title":{},"body":{"components/ConnectionComponent.html":{}}}],["src/app/mixer/palette/connection/connection.component.ts:25",{"_index":715,"title":{},"body":{"components/ConnectionComponent.html":{}}}],["src/app/mixer/palette/connection/connection.component.ts:26",{"_index":716,"title":{},"body":{"components/ConnectionComponent.html":{}}}],["src/app/mixer/palette/connection/connection.component.ts:29",{"_index":720,"title":{},"body":{"components/ConnectionComponent.html":{}}}],["src/app/mixer/palette/connection/connection.component.ts:30",{"_index":722,"title":{},"body":{"components/ConnectionComponent.html":{}}}],["src/app/mixer/palette/connection/connection.component.ts:31",{"_index":723,"title":{},"body":{"components/ConnectionComponent.html":{}}}],["src/app/mixer/palette/connection/connection.component.ts:33",{"_index":719,"title":{},"body":{"components/ConnectionComponent.html":{}}}],["src/app/mixer/palette/connection/connection.component.ts:39",{"_index":725,"title":{},"body":{"components/ConnectionComponent.html":{}}}],["src/app/mixer/palette/connection/connection.component.ts:41",{"_index":678,"title":{},"body":{"components/ConnectionComponent.html":{}}}],["src/app/mixer/palette/connection/connection.component.ts:43",{"_index":728,"title":{},"body":{"components/ConnectionComponent.html":{}}}],["src/app/mixer/palette/connection/connection.component.ts:47",{"_index":691,"title":{},"body":{"components/ConnectionComponent.html":{}}}],["src/app/mixer/palette/connection/connection.component.ts:59",{"_index":690,"title":{},"body":{"components/ConnectionComponent.html":{}}}],["src/app/mixer/palette/connection/connection.component.ts:75",{"_index":683,"title":{},"body":{"components/ConnectionComponent.html":{}}}],["src/app/mixer/palette/connection/connection.component.ts:79",{"_index":689,"title":{},"body":{"components/ConnectionComponent.html":{}}}],["src/app/mixer/palette/connection/connection.component.ts:89",{"_index":708,"title":{},"body":{"components/ConnectionComponent.html":{}}}],["src/app/mixer/palette/image/image.component.ts",{"_index":2294,"title":{},"body":{"components/ImageComponent.html":{}}}],["src/app/mixer/palette/image/image.component.ts:12",{"_index":2299,"title":{},"body":{"components/ImageComponent.html":{}}}],["src/app/mixer/palette/image/image.component.ts:8",{"_index":2298,"title":{},"body":{"components/ImageComponent.html":{}}}],["src/app/mixer/palette/marquee/marquee.component.ts",{"_index":2651,"title":{},"body":{"directives/MarqueeComponent.html":{}}}],["src/app/mixer/palette/marquee/marquee.component.ts:13",{"_index":2665,"title":{},"body":{"directives/MarqueeComponent.html":{}}}],["src/app/mixer/palette/marquee/marquee.component.ts:14",{"_index":2663,"title":{},"body":{"directives/MarqueeComponent.html":{}}}],["src/app/mixer/palette/marquee/marquee.component.ts:16",{"_index":2661,"title":{},"body":{"directives/MarqueeComponent.html":{}}}],["src/app/mixer/palette/marquee/marquee.component.ts:22",{"_index":2668,"title":{},"body":{"directives/MarqueeComponent.html":{}}}],["src/app/mixer/palette/marquee/marquee.component.ts:23",{"_index":2660,"title":{},"body":{"directives/MarqueeComponent.html":{}}}],["src/app/mixer/palette/marquee/marquee.component.ts:24",{"_index":2666,"title":{},"body":{"directives/MarqueeComponent.html":{}}}],["src/app/mixer/palette/marquee/marquee.component.ts:25",{"_index":2664,"title":{},"body":{"directives/MarqueeComponent.html":{}}}],["src/app/mixer/palette/marquee/marquee.component.ts:27",{"_index":2657,"title":{},"body":{"directives/MarqueeComponent.html":{}}}],["src/app/mixer/palette/marquee/marquee.component.ts:31",{"_index":2656,"title":{},"body":{"directives/MarqueeComponent.html":{}}}],["src/app/mixer/palette/marquee/marquee.component.ts:36",{"_index":2659,"title":{},"body":{"directives/MarqueeComponent.html":{}}}],["src/app/mixer/palette/note/note.component.ts",{"_index":2860,"title":{},"body":{"components/NoteComponent.html":{}}}],["src/app/mixer/palette/note/note.component.ts:109",{"_index":2883,"title":{},"body":{"components/NoteComponent.html":{}}}],["src/app/mixer/palette/note/note.component.ts:118",{"_index":2877,"title":{},"body":{"components/NoteComponent.html":{}}}],["src/app/mixer/palette/note/note.component.ts:15",{"_index":2870,"title":{},"body":{"components/NoteComponent.html":{}}}],["src/app/mixer/palette/note/note.component.ts:16",{"_index":2869,"title":{},"body":{"components/NoteComponent.html":{}}}],["src/app/mixer/palette/note/note.component.ts:19",{"_index":2871,"title":{},"body":{"components/NoteComponent.html":{}}}],["src/app/mixer/palette/note/note.component.ts:20",{"_index":2891,"title":{},"body":{"components/NoteComponent.html":{}}}],["src/app/mixer/palette/note/note.component.ts:24",{"_index":2884,"title":{},"body":{"components/NoteComponent.html":{}}}],["src/app/mixer/palette/note/note.component.ts:26",{"_index":2872,"title":{},"body":{"components/NoteComponent.html":{}}}],["src/app/mixer/palette/note/note.component.ts:27",{"_index":2873,"title":{},"body":{"components/NoteComponent.html":{}}}],["src/app/mixer/palette/note/note.component.ts:29",{"_index":2888,"title":{},"body":{"components/NoteComponent.html":{}}}],["src/app/mixer/palette/note/note.component.ts:30",{"_index":2886,"title":{},"body":{"components/NoteComponent.html":{}}}],["src/app/mixer/palette/note/note.component.ts:37",{"_index":2887,"title":{},"body":{"components/NoteComponent.html":{}}}],["src/app/mixer/palette/note/note.component.ts:38",{"_index":2868,"title":{},"body":{"components/NoteComponent.html":{}}}],["src/app/mixer/palette/note/note.component.ts:44",{"_index":2881,"title":{},"body":{"components/NoteComponent.html":{}}}],["src/app/mixer/palette/note/note.component.ts:59",{"_index":2880,"title":{},"body":{"components/NoteComponent.html":{}}}],["src/app/mixer/palette/note/note.component.ts:66",{"_index":2875,"title":{},"body":{"components/NoteComponent.html":{}}}],["src/app/mixer/palette/note/note.component.ts:71",{"_index":2876,"title":{},"body":{"components/NoteComponent.html":{}}}],["src/app/mixer/palette/note/note.component.ts:85",{"_index":2882,"title":{},"body":{"components/NoteComponent.html":{}}}],["src/app/mixer/palette/operation/inlet/inlet.component.ts",{"_index":2382,"title":{},"body":{"components/InletComponent.html":{}}}],["src/app/mixer/palette/operation/inlet/inlet.component.ts:101",{"_index":2408,"title":{},"body":{"components/InletComponent.html":{}}}],["src/app/mixer/palette/operation/inlet/inlet.component.ts:107",{"_index":2409,"title":{},"body":{"components/InletComponent.html":{}}}],["src/app/mixer/palette/operation/inlet/inlet.component.ts:19",{"_index":2403,"title":{},"body":{"components/InletComponent.html":{}}}],["src/app/mixer/palette/operation/inlet/inlet.component.ts:20",{"_index":2402,"title":{},"body":{"components/InletComponent.html":{}}}],["src/app/mixer/palette/operation/inlet/inlet.component.ts:21",{"_index":2401,"title":{},"body":{"components/InletComponent.html":{}}}],["src/app/mixer/palette/operation/inlet/inlet.component.ts:22",{"_index":2406,"title":{},"body":{"components/InletComponent.html":{}}}],["src/app/mixer/palette/operation/inlet/inlet.component.ts:23",{"_index":2404,"title":{},"body":{"components/InletComponent.html":{}}}],["src/app/mixer/palette/operation/inlet/inlet.component.ts:24",{"_index":2405,"title":{},"body":{"components/InletComponent.html":{}}}],["src/app/mixer/palette/operation/inlet/inlet.component.ts:26",{"_index":2419,"title":{},"body":{"components/InletComponent.html":{}}}],["src/app/mixer/palette/operation/inlet/inlet.component.ts:27",{"_index":2423,"title":{},"body":{"components/InletComponent.html":{}}}],["src/app/mixer/palette/operation/inlet/inlet.component.ts:28",{"_index":2417,"title":{},"body":{"components/InletComponent.html":{}}}],["src/app/mixer/palette/operation/inlet/inlet.component.ts:29",{"_index":2421,"title":{},"body":{"components/InletComponent.html":{}}}],["src/app/mixer/palette/operation/inlet/inlet.component.ts:30",{"_index":2422,"title":{},"body":{"components/InletComponent.html":{}}}],["src/app/mixer/palette/operation/inlet/inlet.component.ts:31",{"_index":2420,"title":{},"body":{"components/InletComponent.html":{}}}],["src/app/mixer/palette/operation/inlet/inlet.component.ts:32",{"_index":2400,"title":{},"body":{"components/InletComponent.html":{}}}],["src/app/mixer/palette/operation/inlet/inlet.component.ts:34",{"_index":2424,"title":{},"body":{"components/InletComponent.html":{}}}],["src/app/mixer/palette/operation/inlet/inlet.component.ts:38",{"_index":2411,"title":{},"body":{"components/InletComponent.html":{}}}],["src/app/mixer/palette/operation/inlet/inlet.component.ts:77",{"_index":2413,"title":{},"body":{"components/InletComponent.html":{}}}],["src/app/mixer/palette/operation/inlet/inlet.component.ts:93",{"_index":2410,"title":{},"body":{"components/InletComponent.html":{}}}],["src/app/mixer/palette/operation/inlet/inlet.component.ts:97",{"_index":2415,"title":{},"body":{"components/InletComponent.html":{}}}],["src/app/mixer/palette/operation/parameter/parameter.component.ts",{"_index":3266,"title":{},"body":{"components/ParameterComponent.html":{},"miscellaneous/functions.html":{}}}],["src/app/mixer/palette/operation/parameter/parameter.component.ts:136",{"_index":3281,"title":{},"body":{"components/ParameterComponent.html":{}}}],["src/app/mixer/palette/operation/parameter/parameter.component.ts:24",{"_index":3286,"title":{},"body":{"components/ParameterComponent.html":{}}}],["src/app/mixer/palette/operation/parameter/parameter.component.ts:25",{"_index":3290,"title":{},"body":{"components/ParameterComponent.html":{}}}],["src/app/mixer/palette/operation/parameter/parameter.component.ts:26",{"_index":3288,"title":{},"body":{"components/ParameterComponent.html":{}}}],["src/app/mixer/palette/operation/parameter/parameter.component.ts:28",{"_index":3276,"title":{},"body":{"components/ParameterComponent.html":{}}}],["src/app/mixer/palette/operation/parameter/parameter.component.ts:30",{"_index":3275,"title":{},"body":{"components/ParameterComponent.html":{}}}],["src/app/mixer/palette/operation/parameter/parameter.component.ts:31",{"_index":3277,"title":{},"body":{"components/ParameterComponent.html":{}}}],["src/app/mixer/palette/operation/parameter/parameter.component.ts:32",{"_index":3279,"title":{},"body":{"components/ParameterComponent.html":{}}}],["src/app/mixer/palette/operation/parameter/parameter.component.ts:33",{"_index":3278,"title":{},"body":{"components/ParameterComponent.html":{}}}],["src/app/mixer/palette/operation/parameter/parameter.component.ts:36",{"_index":3289,"title":{},"body":{"components/ParameterComponent.html":{}}}],["src/app/mixer/palette/operation/parameter/parameter.component.ts:37",{"_index":3285,"title":{},"body":{"components/ParameterComponent.html":{}}}],["src/app/mixer/palette/operation/parameter/parameter.component.ts:38",{"_index":3292,"title":{},"body":{"components/ParameterComponent.html":{}}}],["src/app/mixer/palette/operation/parameter/parameter.component.ts:39",{"_index":3291,"title":{},"body":{"components/ParameterComponent.html":{}}}],["src/app/mixer/palette/operation/parameter/parameter.component.ts:40",{"_index":3287,"title":{},"body":{"components/ParameterComponent.html":{}}}],["src/app/mixer/palette/operation/parameter/parameter.component.ts:41",{"_index":3274,"title":{},"body":{"components/ParameterComponent.html":{}}}],["src/app/mixer/palette/operation/parameter/parameter.component.ts:44",{"_index":3293,"title":{},"body":{"components/ParameterComponent.html":{}}}],["src/app/mixer/palette/operation/parameter/parameter.component.ts:47",{"_index":3282,"title":{},"body":{"components/ParameterComponent.html":{}}}],["src/app/mixer/palette/operation/parameter/parameter.component.ts:97",{"_index":3284,"title":{},"body":{"components/ParameterComponent.html":{}}}],["src/app/mixer/palette/selection/selection.component.ts",{"_index":3889,"title":{},"body":{"directives/SelectionComponent.html":{}}}],["src/app/mixer/palette/selection/selection.component.ts:12",{"_index":3898,"title":{},"body":{"directives/SelectionComponent.html":{}}}],["src/app/mixer/palette/selection/selection.component.ts:13",{"_index":3896,"title":{},"body":{"directives/SelectionComponent.html":{}}}],["src/app/mixer/palette/selection/selection.component.ts:15",{"_index":3894,"title":{},"body":{"directives/SelectionComponent.html":{}}}],["src/app/mixer/palette/selection/selection.component.ts:21",{"_index":3900,"title":{},"body":{"directives/SelectionComponent.html":{}}}],["src/app/mixer/palette/selection/selection.component.ts:22",{"_index":3893,"title":{},"body":{"directives/SelectionComponent.html":{}}}],["src/app/mixer/palette/selection/selection.component.ts:23",{"_index":3899,"title":{},"body":{"directives/SelectionComponent.html":{}}}],["src/app/mixer/palette/selection/selection.component.ts:24",{"_index":3897,"title":{},"body":{"directives/SelectionComponent.html":{}}}],["src/app/mixer/palette/selection/selection.component.ts:26",{"_index":3891,"title":{},"body":{"directives/SelectionComponent.html":{}}}],["src/app/mixer/palette/selection/selection.component.ts:31",{"_index":3890,"title":{},"body":{"directives/SelectionComponent.html":{}}}],["src/app/mixer/palette/selection/selection.component.ts:36",{"_index":3892,"title":{},"body":{"directives/SelectionComponent.html":{}}}],["src/app/mixer/palette/snackbar/snackbar.component.ts",{"_index":4102,"title":{},"body":{"components/SnackbarComponent.html":{}}}],["src/app/mixer/palette/snackbar/snackbar.component.ts:13",{"_index":4109,"title":{},"body":{"components/SnackbarComponent.html":{}}}],["src/app/mixer/palette/snackbar/snackbar.component.ts:14",{"_index":4112,"title":{},"body":{"components/SnackbarComponent.html":{}}}],["src/app/mixer/palette/snackbar/snackbar.component.ts:15",{"_index":4107,"title":{},"body":{"components/SnackbarComponent.html":{}}}],["src/app/mixer/palette/snackbar/snackbar.component.ts:17",{"_index":4111,"title":{},"body":{"components/SnackbarComponent.html":{}}}],["src/app/mixer/palette/snackbar/snackbar.component.ts:23",{"_index":4108,"title":{},"body":{"components/SnackbarComponent.html":{}}}],["src/app/mixer/palette/subdraft/subdraft.component.ts",{"_index":1303,"title":{},"body":{"interfaces/DesignActions.html":{}}}],["src/app/mixer/provider/ink.service.ts",{"_index":2303,"title":{},"body":{"interfaces/Ink.html":{},"injectables/InkService.html":{}}}],["src/app/mixer/provider/ink.service.ts:100",{"_index":2376,"title":{},"body":{"injectables/InkService.html":{}}}],["src/app/mixer/provider/ink.service.ts:109",{"_index":2378,"title":{},"body":{"injectables/InkService.html":{}}}],["src/app/mixer/provider/ink.service.ts:19",{"_index":2381,"title":{},"body":{"injectables/InkService.html":{}}}],["src/app/mixer/provider/ink.service.ts:20",{"_index":2372,"title":{},"body":{"injectables/InkService.html":{}}}],["src/app/mixer/provider/ink.service.ts:41",{"_index":2375,"title":{},"body":{"injectables/InkService.html":{}}}],["src/app/mixer/provider/ink.service.ts:45",{"_index":2380,"title":{},"body":{"injectables/InkService.html":{}}}],["src/app/mixer/provider/ink.service.ts:56",{"_index":2374,"title":{},"body":{"injectables/InkService.html":{}}}],["src/app/mixer/provider/ink.service.ts:68",{"_index":2373,"title":{},"body":{"injectables/InkService.html":{}}}],["src/app/mixer/provider/ink.service.ts:77",{"_index":2379,"title":{},"body":{"injectables/InkService.html":{}}}],["src/app/mixer/provider/layers.service.ts",{"_index":2496,"title":{},"body":{"injectables/LayersService.html":{}}}],["src/app/mixer/provider/layers.service.ts:13",{"_index":2504,"title":{},"body":{"injectables/LayersService.html":{}}}],["src/app/mixer/provider/layers.service.ts:19",{"_index":2506,"title":{},"body":{"injectables/LayersService.html":{}}}],["src/app/mixer/provider/layers.service.ts:24",{"_index":2505,"title":{},"body":{"injectables/LayersService.html":{}}}],["src/app/mixer/provider/layers.service.ts:28",{"_index":2507,"title":{},"body":{"injectables/LayersService.html":{}}}],["src/app/mixer/provider/operation.service.ts",{"_index":4650,"title":{},"body":{"miscellaneous/typealiases.html":{}}}],["src/app/mixer/provider/viewport.service.ts",{"_index":4181,"title":{},"body":{"injectables/ViewportService.html":{}}}],["src/app/mixer/provider/viewport.service.ts:104",{"_index":4216,"title":{},"body":{"injectables/ViewportService.html":{}}}],["src/app/mixer/provider/viewport.service.ts:110",{"_index":4225,"title":{},"body":{"injectables/ViewportService.html":{}}}],["src/app/mixer/provider/viewport.service.ts:114",{"_index":4207,"title":{},"body":{"injectables/ViewportService.html":{}}}],["src/app/mixer/provider/viewport.service.ts:118",{"_index":4202,"title":{},"body":{"injectables/ViewportService.html":{}}}],["src/app/mixer/provider/viewport.service.ts:122",{"_index":4220,"title":{},"body":{"injectables/ViewportService.html":{}}}],["src/app/mixer/provider/viewport.service.ts:126",{"_index":4205,"title":{},"body":{"injectables/ViewportService.html":{}}}],["src/app/mixer/provider/viewport.service.ts:130",{"_index":4201,"title":{},"body":{"injectables/ViewportService.html":{}}}],["src/app/mixer/provider/viewport.service.ts:134",{"_index":4222,"title":{},"body":{"injectables/ViewportService.html":{}}}],["src/app/mixer/provider/viewport.service.ts:138",{"_index":4206,"title":{},"body":{"injectables/ViewportService.html":{}}}],["src/app/mixer/provider/viewport.service.ts:142",{"_index":4203,"title":{},"body":{"injectables/ViewportService.html":{}}}],["src/app/mixer/provider/viewport.service.ts:150",{"_index":4204,"title":{},"body":{"injectables/ViewportService.html":{}}}],["src/app/mixer/provider/viewport.service.ts:162",{"_index":4223,"title":{},"body":{"injectables/ViewportService.html":{}}}],["src/app/mixer/provider/viewport.service.ts:17",{"_index":4229,"title":{},"body":{"injectables/ViewportService.html":{}}}],["src/app/mixer/provider/viewport.service.ts:22",{"_index":4233,"title":{},"body":{"injectables/ViewportService.html":{}}}],["src/app/mixer/provider/viewport.service.ts:28",{"_index":4197,"title":{},"body":{"injectables/ViewportService.html":{}}}],["src/app/mixer/provider/viewport.service.ts:48",{"_index":4200,"title":{},"body":{"injectables/ViewportService.html":{}}}],["src/app/mixer/provider/viewport.service.ts:57",{"_index":4199,"title":{},"body":{"injectables/ViewportService.html":{}}}],["src/app/mixer/provider/viewport.service.ts:65",{"_index":4212,"title":{},"body":{"injectables/ViewportService.html":{}}}],["src/app/mixer/provider/viewport.service.ts:74",{"_index":4227,"title":{},"body":{"injectables/ViewportService.html":{}}}],["src/app/mixer/provider/viewport.service.ts:81",{"_index":4218,"title":{},"body":{"injectables/ViewportService.html":{}}}],["src/app/mixer/provider/viewport.service.ts:91",{"_index":4209,"title":{},"body":{"injectables/ViewportService.html":{}}}],["src/app/player/model/dbnodes.ts",{"_index":937,"title":{},"body":{"classes/DBListener.html":{},"classes/DBListenerArray.html":{},"classes/DBNode.html":{},"classes/DBNodeArray.html":{},"classes/DBTwoWay.html":{},"classes/DBTwoWayArray.html":{},"classes/DBWriteBuffer.html":{},"classes/DBWriter.html":{},"classes/DBWriterArray.html":{},"interfaces/NodeMethods.html":{},"interfaces/NodeParams.html":{},"classes/OnlineStatus.html":{},"miscellaneous/typealiases.html":{}}}],["src/app/player/model/dbnodes.ts:102",{"_index":1211,"title":{},"body":{"classes/DBNode.html":{}}}],["src/app/player/model/dbnodes.ts:109",{"_index":1199,"title":{},"body":{"classes/DBNode.html":{}}}],["src/app/player/model/dbnodes.ts:110",{"_index":1200,"title":{},"body":{"classes/DBNode.html":{}}}],["src/app/player/model/dbnodes.ts:126",{"_index":951,"title":{},"body":{"classes/DBListener.html":{}}}],["src/app/player/model/dbnodes.ts:141",{"_index":969,"title":{},"body":{"classes/DBListener.html":{}}}],["src/app/player/model/dbnodes.ts:169",{"_index":1266,"title":{},"body":{"classes/DBWriter.html":{}}}],["src/app/player/model/dbnodes.ts:171",{"_index":1263,"title":{},"body":{"classes/DBWriter.html":{}}}],["src/app/player/model/dbnodes.ts:181",{"_index":1269,"title":{},"body":{"classes/DBWriter.html":{}}}],["src/app/player/model/dbnodes.ts:201",{"_index":1252,"title":{},"body":{"classes/DBWriteBuffer.html":{}}}],["src/app/player/model/dbnodes.ts:225",{"_index":1224,"title":{},"body":{"classes/DBTwoWay.html":{}}}],["src/app/player/model/dbnodes.ts:23",{"_index":2858,"title":{},"body":{"interfaces/NodeMethods.html":{}}}],["src/app/player/model/dbnodes.ts:24",{"_index":2859,"title":{},"body":{"interfaces/NodeMethods.html":{}}}],["src/app/player/model/dbnodes.ts:240",{"_index":1233,"title":{},"body":{"classes/DBTwoWay.html":{}}}],["src/app/player/model/dbnodes.ts:258",{"_index":1234,"title":{},"body":{"classes/DBTwoWay.html":{}}}],["src/app/player/model/dbnodes.ts:267",{"_index":1214,"title":{},"body":{"classes/DBNodeArray.html":{}}}],["src/app/player/model/dbnodes.ts:268",{"_index":1213,"title":{},"body":{"classes/DBNodeArray.html":{}}}],["src/app/player/model/dbnodes.ts:269",{"_index":1212,"title":{},"body":{"classes/DBNodeArray.html":{}}}],["src/app/player/model/dbnodes.ts:281",{"_index":1219,"title":{},"body":{"classes/DBNodeArray.html":{}}}],["src/app/player/model/dbnodes.ts:283",{"_index":1220,"title":{},"body":{"classes/DBNodeArray.html":{}}}],["src/app/player/model/dbnodes.ts:285",{"_index":1222,"title":{},"body":{"classes/DBNodeArray.html":{}}}],["src/app/player/model/dbnodes.ts:287",{"_index":1215,"title":{},"body":{"classes/DBNodeArray.html":{}}}],["src/app/player/model/dbnodes.ts:294",{"_index":1217,"title":{},"body":{"classes/DBNodeArray.html":{}}}],["src/app/player/model/dbnodes.ts:298",{"_index":1216,"title":{},"body":{"classes/DBNodeArray.html":{}}}],["src/app/player/model/dbnodes.ts:321",{"_index":1179,"title":{},"body":{"classes/DBListenerArray.html":{}}}],["src/app/player/model/dbnodes.ts:33",{"_index":1197,"title":{},"body":{"classes/DBNode.html":{}}}],["src/app/player/model/dbnodes.ts:334",{"_index":1184,"title":{},"body":{"classes/DBListenerArray.html":{}}}],["src/app/player/model/dbnodes.ts:34",{"_index":1198,"title":{},"body":{"classes/DBNode.html":{}}}],["src/app/player/model/dbnodes.ts:35",{"_index":1195,"title":{},"body":{"classes/DBNode.html":{}}}],["src/app/player/model/dbnodes.ts:36",{"_index":1194,"title":{},"body":{"classes/DBNode.html":{}}}],["src/app/player/model/dbnodes.ts:368",{"_index":1186,"title":{},"body":{"classes/DBListenerArray.html":{}}}],["src/app/player/model/dbnodes.ts:37",{"_index":1196,"title":{},"body":{"classes/DBNode.html":{}}}],["src/app/player/model/dbnodes.ts:38",{"_index":1193,"title":{},"body":{"classes/DBNode.html":{}}}],["src/app/player/model/dbnodes.ts:388",{"_index":1183,"title":{},"body":{"classes/DBListenerArray.html":{}}}],["src/app/player/model/dbnodes.ts:404",{"_index":1185,"title":{},"body":{"classes/DBListenerArray.html":{}}}],["src/app/player/model/dbnodes.ts:438",{"_index":1188,"title":{},"body":{"classes/DBListenerArray.html":{}}}],["src/app/player/model/dbnodes.ts:44",{"_index":1192,"title":{},"body":{"classes/DBNode.html":{}}}],["src/app/player/model/dbnodes.ts:460",{"_index":1271,"title":{},"body":{"classes/DBWriterArray.html":{}}}],["src/app/player/model/dbnodes.ts:472",{"_index":1275,"title":{},"body":{"classes/DBWriterArray.html":{}}}],["src/app/player/model/dbnodes.ts:480",{"_index":1276,"title":{},"body":{"classes/DBWriterArray.html":{}}}],["src/app/player/model/dbnodes.ts:486",{"_index":1278,"title":{},"body":{"classes/DBWriterArray.html":{}}}],["src/app/player/model/dbnodes.ts:498",{"_index":1277,"title":{},"body":{"classes/DBWriterArray.html":{}}}],["src/app/player/model/dbnodes.ts:518",{"_index":1238,"title":{},"body":{"classes/DBTwoWayArray.html":{}}}],["src/app/player/model/dbnodes.ts:529",{"_index":1242,"title":{},"body":{"classes/DBTwoWayArray.html":{}}}],["src/app/player/model/dbnodes.ts:538",{"_index":1246,"title":{},"body":{"classes/DBTwoWayArray.html":{}}}],["src/app/player/model/dbnodes.ts:547",{"_index":1248,"title":{},"body":{"classes/DBTwoWayArray.html":{}}}],["src/app/player/model/dbnodes.ts:553",{"_index":1247,"title":{},"body":{"classes/DBTwoWayArray.html":{}}}],["src/app/player/model/dbnodes.ts:559",{"_index":1250,"title":{},"body":{"classes/DBTwoWayArray.html":{}}}],["src/app/player/model/dbnodes.ts:571",{"_index":1249,"title":{},"body":{"classes/DBTwoWayArray.html":{}}}],["src/app/player/model/dbnodes.ts:578",{"_index":1243,"title":{},"body":{"classes/DBTwoWayArray.html":{}}}],["src/app/player/model/dbnodes.ts:612",{"_index":1245,"title":{},"body":{"classes/DBTwoWayArray.html":{}}}],["src/app/player/model/dbnodes.ts:627",{"_index":1244,"title":{},"body":{"classes/DBTwoWayArray.html":{}}}],["src/app/player/model/dbnodes.ts:649",{"_index":2950,"title":{},"body":{"classes/OnlineStatus.html":{}}}],["src/app/player/model/dbnodes.ts:651",{"_index":2947,"title":{},"body":{"classes/OnlineStatus.html":{}}}],["src/app/player/model/dbnodes.ts:663",{"_index":2952,"title":{},"body":{"classes/OnlineStatus.html":{}}}],["src/app/player/model/dbnodes.ts:72",{"_index":1202,"title":{},"body":{"classes/DBNode.html":{}}}],["src/app/player/model/dbnodes.ts:76",{"_index":1204,"title":{},"body":{"classes/DBNode.html":{}}}],["src/app/player/model/dbnodes.ts:80",{"_index":1206,"title":{},"body":{"classes/DBNode.html":{}}}],["src/app/player/model/dbnodes.ts:94",{"_index":1207,"title":{},"body":{"classes/DBNode.html":{}}}],["src/app/player/model/dbnodes.ts:98",{"_index":1209,"title":{},"body":{"classes/DBNode.html":{}}}],["src/app/player/model/op_mappings.ts",{"_index":518,"title":{},"body":{"interfaces/ChainOp.html":{},"interfaces/PairedOp.html":{},"interfaces/PedalEvent.html":{},"interfaces/PlayerOp.html":{},"miscellaneous/functions.html":{},"miscellaneous/typealiases.html":{}}}],["src/app/player/model/player.ts",{"_index":3742,"title":{},"body":{"interfaces/PlayerState-1.html":{},"interfaces/WeavingLog.html":{},"interfaces/WeavingPick-1.html":{},"miscellaneous/functions.html":{}}}],["src/app/player/model/sequencer.ts",{"_index":3007,"title":{},"body":{"classes/OpSequencer.html":{},"miscellaneous/functions.html":{}}}],["src/app/player/model/sequencer.ts:104",{"_index":3044,"title":{},"body":{"classes/OpSequencer.html":{}}}],["src/app/player/model/sequencer.ts:12",{"_index":3028,"title":{},"body":{"classes/OpSequencer.html":{}}}],["src/app/player/model/sequencer.ts:13",{"_index":3031,"title":{},"body":{"classes/OpSequencer.html":{}}}],["src/app/player/model/sequencer.ts:14",{"_index":3032,"title":{},"body":{"classes/OpSequencer.html":{}}}],["src/app/player/model/sequencer.ts:15",{"_index":3030,"title":{},"body":{"classes/OpSequencer.html":{}}}],["src/app/player/model/sequencer.ts:16",{"_index":3027,"title":{},"body":{"classes/OpSequencer.html":{}}}],["src/app/player/model/sequencer.ts:17",{"_index":3029,"title":{},"body":{"classes/OpSequencer.html":{}}}],["src/app/player/model/sequencer.ts:18",{"_index":3021,"title":{},"body":{"classes/OpSequencer.html":{}}}],["src/app/player/model/sequencer.ts:43",{"_index":3048,"title":{},"body":{"classes/OpSequencer.html":{}}}],["src/app/player/model/sequencer.ts:48",{"_index":3050,"title":{},"body":{"classes/OpSequencer.html":{}}}],["src/app/player/model/sequencer.ts:52",{"_index":3052,"title":{},"body":{"classes/OpSequencer.html":{}}}],["src/app/player/model/sequencer.ts:56",{"_index":3041,"title":{},"body":{"classes/OpSequencer.html":{}}}],["src/app/player/model/sequencer.ts:69",{"_index":3038,"title":{},"body":{"classes/OpSequencer.html":{}}}],["src/app/player/model/sequencer.ts:74",{"_index":3042,"title":{},"body":{"classes/OpSequencer.html":{}}}],["src/app/player/model/sequencer.ts:81",{"_index":3045,"title":{},"body":{"classes/OpSequencer.html":{}}}],["src/app/player/model/sequencer.ts:88",{"_index":3034,"title":{},"body":{"classes/OpSequencer.html":{}}}],["src/app/player/model/sequencer.ts:94",{"_index":3046,"title":{},"body":{"classes/OpSequencer.html":{}}}],["src/app/player/model/sequencer.ts:99",{"_index":3036,"title":{},"body":{"classes/OpSequencer.html":{}}}],["src/app/player/model/state.ts",{"_index":3730,"title":{},"body":{"interfaces/PlayerState.html":{},"interfaces/WeavingPick.html":{},"miscellaneous/functions.html":{}}}],["src/app/player/op",{"_index":3077,"title":{},"body":{"components/OpSequencerComponent.html":{}}}],["src/app/player/player.component.ts",{"_index":3607,"title":{},"body":{"components/PlayerComponent.html":{}}}],["src/app/player/player.component.ts:16",{"_index":3633,"title":{},"body":{"components/PlayerComponent.html":{}}}],["src/app/player/player.component.ts:17",{"_index":3628,"title":{},"body":{"components/PlayerComponent.html":{}}}],["src/app/player/player.component.ts:19",{"_index":3618,"title":{},"body":{"components/PlayerComponent.html":{}}}],["src/app/player/player.component.ts:20",{"_index":3619,"title":{},"body":{"components/PlayerComponent.html":{}}}],["src/app/player/player.component.ts:22",{"_index":3620,"title":{},"body":{"components/PlayerComponent.html":{}}}],["src/app/player/player.component.ts:34",{"_index":3629,"title":{},"body":{"components/PlayerComponent.html":{}}}],["src/app/player/player.component.ts:35",{"_index":3630,"title":{},"body":{"components/PlayerComponent.html":{}}}],["src/app/player/player.component.ts:36",{"_index":3617,"title":{},"body":{"components/PlayerComponent.html":{}}}],["src/app/player/player.component.ts:39",{"_index":3631,"title":{},"body":{"components/PlayerComponent.html":{}}}],["src/app/player/player.component.ts:44",{"_index":3623,"title":{},"body":{"components/PlayerComponent.html":{}}}],["src/app/player/player.component.ts:49",{"_index":3622,"title":{},"body":{"components/PlayerComponent.html":{}}}],["src/app/player/player.component.ts:78",{"_index":3624,"title":{},"body":{"components/PlayerComponent.html":{}}}],["src/app/player/player.component.ts:92",{"_index":3621,"title":{},"body":{"components/PlayerComponent.html":{}}}],["src/app/player/player.component.ts:94",{"_index":3626,"title":{},"body":{"components/PlayerComponent.html":{}}}],["src/app/player/player.module.ts",{"_index":3693,"title":{},"body":{"modules/PlayerModule.html":{}}}],["src/app/player/player.service.ts",{"_index":1693,"title":{},"body":{"interfaces/DraftOperationClassification.html":{},"interfaces/LoomConfig.html":{},"classes/PedalConfig.html":{},"injectables/PlayerService.html":{}}}],["src/app/player/player.service.ts:104",{"_index":3515,"title":{},"body":{"classes/PedalConfig.html":{}}}],["src/app/player/player.service.ts:121",{"_index":3516,"title":{},"body":{"classes/PedalConfig.html":{}}}],["src/app/player/player.service.ts:127",{"_index":3519,"title":{},"body":{"classes/PedalConfig.html":{}}}],["src/app/player/player.service.ts:131",{"_index":3518,"title":{},"body":{"classes/PedalConfig.html":{}}}],["src/app/player/player.service.ts:136",{"_index":3520,"title":{},"body":{"classes/PedalConfig.html":{}}}],["src/app/player/player.service.ts:140",{"_index":3522,"title":{},"body":{"classes/PedalConfig.html":{}}}],["src/app/player/player.service.ts:160",{"_index":3724,"title":{},"body":{"injectables/PlayerService.html":{}}}],["src/app/player/player.service.ts:161",{"_index":3719,"title":{},"body":{"injectables/PlayerService.html":{}}}],["src/app/player/player.service.ts:162",{"_index":3722,"title":{},"body":{"injectables/PlayerService.html":{}}}],["src/app/player/player.service.ts:163",{"_index":3707,"title":{},"body":{"injectables/PlayerService.html":{}}}],["src/app/player/player.service.ts:166",{"_index":3721,"title":{},"body":{"injectables/PlayerService.html":{}}}],["src/app/player/player.service.ts:167",{"_index":3720,"title":{},"body":{"injectables/PlayerService.html":{}}}],["src/app/player/player.service.ts:168",{"_index":3723,"title":{},"body":{"injectables/PlayerService.html":{}}}],["src/app/player/player.service.ts:269",{"_index":3725,"title":{},"body":{"injectables/PlayerService.html":{}}}],["src/app/player/player.service.ts:276",{"_index":3727,"title":{},"body":{"injectables/PlayerService.html":{}}}],["src/app/player/player.service.ts:279",{"_index":3729,"title":{},"body":{"injectables/PlayerService.html":{}}}],["src/app/player/player.service.ts:283",{"_index":3711,"title":{},"body":{"injectables/PlayerService.html":{}}}],["src/app/player/player.service.ts:292",{"_index":3713,"title":{},"body":{"injectables/PlayerService.html":{}}}],["src/app/player/player.service.ts:311",{"_index":3715,"title":{},"body":{"injectables/PlayerService.html":{}}}],["src/app/player/player.service.ts:326",{"_index":3714,"title":{},"body":{"injectables/PlayerService.html":{}}}],["src/app/player/player.service.ts:335",{"_index":3712,"title":{},"body":{"injectables/PlayerService.html":{}}}],["src/app/player/player.service.ts:355",{"_index":3710,"title":{},"body":{"injectables/PlayerService.html":{}}}],["src/app/player/player.service.ts:374",{"_index":3717,"title":{},"body":{"injectables/PlayerService.html":{}}}],["src/app/player/player.service.ts:380",{"_index":3709,"title":{},"body":{"injectables/PlayerService.html":{}}}],["src/app/player/player.service.ts:386",{"_index":3718,"title":{},"body":{"injectables/PlayerService.html":{}}}],["src/app/player/player.service.ts:44",{"_index":3511,"title":{},"body":{"classes/PedalConfig.html":{}}}],["src/app/player/player.service.ts:45",{"_index":3510,"title":{},"body":{"classes/PedalConfig.html":{}}}],["src/app/player/player.service.ts:46",{"_index":3509,"title":{},"body":{"classes/PedalConfig.html":{}}}],["src/app/player/player.service.ts:47",{"_index":3508,"title":{},"body":{"classes/PedalConfig.html":{}}}],["src/app/player/player.service.ts:56",{"_index":3524,"title":{},"body":{"classes/PedalConfig.html":{}}}],["src/app/player/player.service.ts:60",{"_index":3526,"title":{},"body":{"classes/PedalConfig.html":{}}}],["src/app/player/player.service.ts:64",{"_index":3513,"title":{},"body":{"classes/PedalConfig.html":{}}}],["src/app/player/player.service.ts:69",{"_index":3521,"title":{},"body":{"classes/PedalConfig.html":{}}}],["src/app/player/player.service.ts:74",{"_index":3512,"title":{},"body":{"classes/PedalConfig.html":{}}}],["src/app/player/player.service.ts:84",{"_index":3517,"title":{},"body":{"classes/PedalConfig.html":{}}}],["src/app/player/player.service.ts:91",{"_index":3514,"title":{},"body":{"classes/PedalConfig.html":{}}}],["src/app/player/provider/mappings.service.ts",{"_index":2511,"title":{},"body":{"injectables/MappingsService.html":{},"miscellaneous/functions.html":{},"miscellaneous/typealiases.html":{}}}],["src/app/player/provider/mappings.service.ts:107",{"_index":2551,"title":{},"body":{"injectables/MappingsService.html":{}}}],["src/app/player/provider/mappings.service.ts:127",{"_index":2553,"title":{},"body":{"injectables/MappingsService.html":{}}}],["src/app/player/provider/mappings.service.ts:141",{"_index":2544,"title":{},"body":{"injectables/MappingsService.html":{}}}],["src/app/player/provider/mappings.service.ts:149",{"_index":2533,"title":{},"body":{"injectables/MappingsService.html":{}}}],["src/app/player/provider/mappings.service.ts:162",{"_index":2535,"title":{},"body":{"injectables/MappingsService.html":{}}}],["src/app/player/provider/mappings.service.ts:183",{"_index":2542,"title":{},"body":{"injectables/MappingsService.html":{}}}],["src/app/player/provider/mappings.service.ts:190",{"_index":2541,"title":{},"body":{"injectables/MappingsService.html":{}}}],["src/app/player/provider/mappings.service.ts:197",{"_index":2548,"title":{},"body":{"injectables/MappingsService.html":{}}}],["src/app/player/provider/mappings.service.ts:202",{"_index":2547,"title":{},"body":{"injectables/MappingsService.html":{}}}],["src/app/player/provider/mappings.service.ts:207",{"_index":2546,"title":{},"body":{"injectables/MappingsService.html":{}}}],["src/app/player/provider/mappings.service.ts:212",{"_index":2549,"title":{},"body":{"injectables/MappingsService.html":{}}}],["src/app/player/provider/mappings.service.ts:40",{"_index":2556,"title":{},"body":{"injectables/MappingsService.html":{}}}],["src/app/player/provider/mappings.service.ts:41",{"_index":2554,"title":{},"body":{"injectables/MappingsService.html":{}}}],["src/app/player/provider/mappings.service.ts:45",{"_index":2530,"title":{},"body":{"injectables/MappingsService.html":{}}}],["src/app/player/provider/mappings.service.ts:48",{"_index":2557,"title":{},"body":{"injectables/MappingsService.html":{}}}],["src/app/player/provider/mappings.service.ts:59",{"_index":2559,"title":{},"body":{"injectables/MappingsService.html":{}}}],["src/app/player/provider/mappings.service.ts:65",{"_index":2539,"title":{},"body":{"injectables/MappingsService.html":{}}}],["src/app/player/provider/mappings.service.ts:90",{"_index":2531,"title":{},"body":{"injectables/MappingsService.html":{}}}],["src/app/player/provider/mappings.service.ts:99",{"_index":2537,"title":{},"body":{"injectables/MappingsService.html":{}}}],["src/app/player/provider/pedals.service.ts",{"_index":3357,"title":{},"body":{"interfaces/Pedal.html":{},"classes/PedalStatus.html":{},"injectables/PedalsService.html":{}}}],["src/app/player/provider/pedals.service.ts:105",{"_index":3540,"title":{},"body":{"classes/PedalStatus.html":{}}}],["src/app/player/provider/pedals.service.ts:128",{"_index":3572,"title":{},"body":{"injectables/PedalsService.html":{}}}],["src/app/player/provider/pedals.service.ts:129",{"_index":3573,"title":{},"body":{"injectables/PedalsService.html":{}}}],["src/app/player/provider/pedals.service.ts:132",{"_index":3575,"title":{},"body":{"injectables/PedalsService.html":{}}}],["src/app/player/provider/pedals.service.ts:142",{"_index":3574,"title":{},"body":{"injectables/PedalsService.html":{}}}],["src/app/player/provider/pedals.service.ts:143",{"_index":3576,"title":{},"body":{"injectables/PedalsService.html":{}}}],["src/app/player/provider/pedals.service.ts:145",{"_index":3577,"title":{},"body":{"injectables/PedalsService.html":{}}}],["src/app/player/provider/pedals.service.ts:147",{"_index":3551,"title":{},"body":{"injectables/PedalsService.html":{}}}],["src/app/player/provider/pedals.service.ts:237",{"_index":3580,"title":{},"body":{"injectables/PedalsService.html":{}}}],["src/app/player/provider/pedals.service.ts:238",{"_index":3582,"title":{},"body":{"injectables/PedalsService.html":{}}}],["src/app/player/provider/pedals.service.ts:241",{"_index":3584,"title":{},"body":{"injectables/PedalsService.html":{}}}],["src/app/player/provider/pedals.service.ts:242",{"_index":3586,"title":{},"body":{"injectables/PedalsService.html":{}}}],["src/app/player/provider/pedals.service.ts:243",{"_index":3588,"title":{},"body":{"injectables/PedalsService.html":{}}}],["src/app/player/provider/pedals.service.ts:244",{"_index":3590,"title":{},"body":{"injectables/PedalsService.html":{}}}],["src/app/player/provider/pedals.service.ts:245",{"_index":3592,"title":{},"body":{"injectables/PedalsService.html":{}}}],["src/app/player/provider/pedals.service.ts:248",{"_index":3594,"title":{},"body":{"injectables/PedalsService.html":{}}}],["src/app/player/provider/pedals.service.ts:249",{"_index":3596,"title":{},"body":{"injectables/PedalsService.html":{}}}],["src/app/player/provider/pedals.service.ts:250",{"_index":3598,"title":{},"body":{"injectables/PedalsService.html":{}}}],["src/app/player/provider/pedals.service.ts:253",{"_index":3600,"title":{},"body":{"injectables/PedalsService.html":{}}}],["src/app/player/provider/pedals.service.ts:254",{"_index":3602,"title":{},"body":{"injectables/PedalsService.html":{}}}],["src/app/player/provider/pedals.service.ts:255",{"_index":3604,"title":{},"body":{"injectables/PedalsService.html":{}}}],["src/app/player/provider/pedals.service.ts:257",{"_index":3605,"title":{},"body":{"injectables/PedalsService.html":{}}}],["src/app/player/provider/pedals.service.ts:260",{"_index":3556,"title":{},"body":{"injectables/PedalsService.html":{}}}],["src/app/player/provider/pedals.service.ts:266",{"_index":3569,"title":{},"body":{"injectables/PedalsService.html":{}}}],["src/app/player/provider/pedals.service.ts:270",{"_index":3552,"title":{},"body":{"injectables/PedalsService.html":{}}}],["src/app/player/provider/pedals.service.ts:274",{"_index":3566,"title":{},"body":{"injectables/PedalsService.html":{}}}],["src/app/player/provider/pedals.service.ts:282",{"_index":3565,"title":{},"body":{"injectables/PedalsService.html":{}}}],["src/app/player/provider/pedals.service.ts:288",{"_index":3560,"title":{},"body":{"injectables/PedalsService.html":{}}}],["src/app/player/provider/pedals.service.ts:293",{"_index":3554,"title":{},"body":{"injectables/PedalsService.html":{}}}],["src/app/player/provider/pedals.service.ts:304",{"_index":3571,"title":{},"body":{"injectables/PedalsService.html":{}}}],["src/app/player/provider/pedals.service.ts:317",{"_index":3567,"title":{},"body":{"injectables/PedalsService.html":{}}}],["src/app/player/provider/pedals.service.ts:327",{"_index":3562,"title":{},"body":{"injectables/PedalsService.html":{}}}],["src/app/player/provider/pedals.service.ts:33",{"_index":3536,"title":{},"body":{"classes/PedalStatus.html":{}}}],["src/app/player/provider/pedals.service.ts:333",{"_index":3558,"title":{},"body":{"injectables/PedalsService.html":{}}}],["src/app/player/provider/pedals.service.ts:34",{"_index":3529,"title":{},"body":{"classes/PedalStatus.html":{}}}],["src/app/player/provider/pedals.service.ts:35",{"_index":3539,"title":{},"body":{"classes/PedalStatus.html":{}}}],["src/app/player/provider/pedals.service.ts:36",{"_index":3530,"title":{},"body":{"classes/PedalStatus.html":{}}}],["src/app/player/provider/pedals.service.ts:38",{"_index":3528,"title":{},"body":{"classes/PedalStatus.html":{}}}],["src/app/player/provider/pedals.service.ts:39",{"_index":3532,"title":{},"body":{"classes/PedalStatus.html":{}}}],["src/app/player/provider/pedals.service.ts:40",{"_index":3537,"title":{},"body":{"classes/PedalStatus.html":{}}}],["src/app/player/provider/pedals.service.ts:42",{"_index":3531,"title":{},"body":{"classes/PedalStatus.html":{}}}],["src/app/player/provider/pedals.service.ts:43",{"_index":3535,"title":{},"body":{"classes/PedalStatus.html":{}}}],["src/app/player/provider/pedals.service.ts:44",{"_index":3534,"title":{},"body":{"classes/PedalStatus.html":{}}}],["src/app/player/provider/pedals.service.ts:46",{"_index":3533,"title":{},"body":{"classes/PedalStatus.html":{}}}],["src/app/player/provider/pedals.service.ts:47",{"_index":3538,"title":{},"body":{"classes/PedalStatus.html":{}}}],["src/app/player/provider/pedals.service.ts:48",{"_index":3527,"title":{},"body":{"classes/PedalStatus.html":{}}}],["src/app/player/provider/sequencer.service.ts",{"_index":423,"title":{},"body":{"interfaces/ChainIndex.html":{},"injectables/SequencerService.html":{}}}],["src/app/player/provider/sequencer.service.ts:28",{"_index":3922,"title":{},"body":{"injectables/SequencerService.html":{}}}],["src/app/player/provider/sequencer.service.ts:33",{"_index":3931,"title":{},"body":{"injectables/SequencerService.html":{}}}],["src/app/player/provider/sequencer.service.ts:34",{"_index":3907,"title":{},"body":{"injectables/SequencerService.html":{}}}],["src/app/player/provider/sequencer.service.ts:37",{"_index":3923,"title":{},"body":{"injectables/SequencerService.html":{}}}],["src/app/player/provider/sequencer.service.ts:43",{"_index":3909,"title":{},"body":{"injectables/SequencerService.html":{}}}],["src/app/player/provider/sequencer.service.ts:52",{"_index":3911,"title":{},"body":{"injectables/SequencerService.html":{}}}],["src/app/player/provider/sequencer.service.ts:67",{"_index":3908,"title":{},"body":{"injectables/SequencerService.html":{}}}],["src/app/player/provider/sequencer.service.ts:74",{"_index":3912,"title":{},"body":{"injectables/SequencerService.html":{}}}],["src/app/player/virtual",{"_index":4264,"title":{},"body":{"components/VirtualPedalsComponent.html":{}}}],["src/app/player/weaving",{"_index":4292,"title":{},"body":{"components/WeavingStateComponent.html":{}}}],["ss",{"_index":3772,"title":{},"body":{"classes/Render.html":{}}}],["stage",{"_index":1640,"title":{},"body":{"interfaces/DraftMap.html":{},"interfaces/Interlacement.html":{},"interfaces/InterlacementVal.html":{}}}],["standard",{"_index":190,"title":{},"body":{"classes/AbstractOpFactory.html":{},"classes/BaseOp.html":{},"classes/Branch.html":{},"classes/Bus.html":{},"interfaces/DynamicOperation.html":{},"classes/Merge.html":{},"components/MixerViewComponent.html":{},"interfaces/OpClassifier.html":{},"interfaces/OpInput.html":{},"interfaces/OperationClassification.html":{},"interfaces/OperationProperties.html":{},"classes/Pipe.html":{},"classes/Seed.html":{},"classes/System.html":{},"interfaces/TopologyDef.html":{},"interfaces/TreeOperation.html":{},"miscellaneous/functions.html":{}}}],["standardize",{"_index":4170,"title":{},"body":{"classes/System.html":{}}}],["star",{"_index":3144,"title":{},"body":{"components/OpSequencerComponent.html":{}}}],["start",{"_index":2484,"title":{},"body":{"components/InletComponent.html":{},"directives/MarqueeComponent.html":{},"components/NoteComponent.html":{},"components/OpSequencerComponent.html":{},"components/ParameterComponent.html":{},"interfaces/Pedal.html":{},"classes/PedalStatus.html":{},"injectables/PedalsService.html":{},"components/PlayerComponent.html":{},"classes/Selection.html":{},"directives/SelectionComponent.html":{},"components/WeavingStateComponent.html":{}}}],["start:interlacement",{"_index":2670,"title":{},"body":{"directives/MarqueeComponent.html":{},"directives/SelectionComponent.html":{}}}],["start_ops",{"_index":2638,"title":{},"body":{"injectables/MappingsService.html":{},"classes/OpSequencer.html":{},"miscellaneous/functions.html":{}}}],["startcol",{"_index":3940,"title":{},"body":{"classes/Shape.html":{}}}],["started",{"_index":4432,"title":{"index.html":{}},"body":{}}],["starting",{"_index":490,"title":{},"body":{"interfaces/ChainIndex.html":{},"injectables/SequencerService.html":{}}}],["startlabel",{"_index":4046,"title":{},"body":{"classes/Shuttle.html":{}}}],["startpattern",{"_index":1802,"title":{},"body":{"interfaces/DraftOperationClassification.html":{},"interfaces/LoomConfig.html":{},"classes/PedalConfig.html":{},"components/PlayerComponent.html":{},"injectables/PlayerService.html":{}}}],["startpattern.perform([]).then((result",{"_index":3650,"title":{},"body":{"components/PlayerComponent.html":{}}}],["startpattern.perform(nullopinput).then((result",{"_index":1805,"title":{},"body":{"interfaces/DraftOperationClassification.html":{},"interfaces/LoomConfig.html":{},"classes/PedalConfig.html":{},"injectables/PlayerService.html":{}}}],["starts",{"_index":3987,"title":{},"body":{"classes/Shape.html":{}}}],["startwith",{"_index":3233,"title":{},"body":{"components/OpsComponent.html":{}}}],["state",{"_index":535,"title":{},"body":{"interfaces/ChainOp.html":{},"components/ConnectionComponent.html":{},"interfaces/DraftNodeProxy.html":{},"interfaces/DraftOperationClassification.html":{},"components/DraftdetailComponent.html":{},"interfaces/FileObj.html":{},"interfaces/FileSaver.html":{},"interfaces/Fileloader.html":{},"components/ImageComponent.html":{},"components/InletComponent.html":{},"interfaces/LoadResponse.html":{},"interfaces/LoomConfig.html":{},"components/MixerViewComponent.html":{},"interfaces/NodeComponentProxy.html":{},"components/NoteComponent.html":{},"interfaces/OpComponentProxy.html":{},"components/OpHelpModal.html":{},"components/OpSequencerComponent.html":{},"components/OpsComponent.html":{},"interfaces/PairedOp.html":{},"components/ParameterComponent.html":{},"interfaces/Pedal.html":{},"classes/PedalConfig.html":{},"interfaces/PedalEvent.html":{},"classes/PedalStatus.html":{},"injectables/PedalsService.html":{},"components/PlayerComponent.html":{},"interfaces/PlayerOp.html":{},"injectables/PlayerService.html":{},"interfaces/PlayerState.html":{},"interfaces/PlayerState-1.html":{},"interfaces/SaveObj.html":{},"components/SnackbarComponent.html":{},"interfaces/StatusMessage.html":{},"interfaces/TreeNodeProxy.html":{},"components/VirtualPedalsComponent.html":{},"interfaces/WeavingLog.html":{},"interfaces/WeavingPick.html":{},"interfaces/WeavingPick-1.html":{},"components/WeavingStateComponent.html":{}}}],["state.component",{"_index":3636,"title":{},"body":{"components/PlayerComponent.html":{},"modules/PlayerModule.html":{}}}],["state.component.html",{"_index":4295,"title":{},"body":{"components/WeavingStateComponent.html":{}}}],["state.component.scss",{"_index":4294,"title":{},"body":{"components/WeavingStateComponent.html":{}}}],["state.component.ts",{"_index":4293,"title":{},"body":{"components/WeavingStateComponent.html":{}}}],["state.component.ts:102",{"_index":4314,"title":{},"body":{"components/WeavingStateComponent.html":{}}}],["state.component.ts:15",{"_index":4302,"title":{},"body":{"components/WeavingStateComponent.html":{}}}],["state.component.ts:16",{"_index":4303,"title":{},"body":{"components/WeavingStateComponent.html":{}}}],["state.component.ts:18",{"_index":4318,"title":{},"body":{"components/WeavingStateComponent.html":{}}}],["state.component.ts:19",{"_index":4321,"title":{},"body":{"components/WeavingStateComponent.html":{}}}],["state.component.ts:20",{"_index":4320,"title":{},"body":{"components/WeavingStateComponent.html":{}}}],["state.component.ts:21",{"_index":4319,"title":{},"body":{"components/WeavingStateComponent.html":{}}}],["state.component.ts:22",{"_index":4317,"title":{},"body":{"components/WeavingStateComponent.html":{}}}],["state.component.ts:23",{"_index":4301,"title":{},"body":{"components/WeavingStateComponent.html":{}}}],["state.component.ts:26",{"_index":4323,"title":{},"body":{"components/WeavingStateComponent.html":{}}}],["state.component.ts:27",{"_index":4322,"title":{},"body":{"components/WeavingStateComponent.html":{}}}],["state.component.ts:32",{"_index":4316,"title":{},"body":{"components/WeavingStateComponent.html":{}}}],["state.component.ts:34",{"_index":4315,"title":{},"body":{"components/WeavingStateComponent.html":{}}}],["state.component.ts:53",{"_index":4309,"title":{},"body":{"components/WeavingStateComponent.html":{}}}],["state.component.ts:78",{"_index":4306,"title":{},"body":{"components/WeavingStateComponent.html":{}}}],["state/weaving",{"_index":3635,"title":{},"body":{"components/PlayerComponent.html":{},"modules/PlayerModule.html":{},"components/WeavingStateComponent.html":{}}}],["states",{"_index":3389,"title":{},"body":{"interfaces/Pedal.html":{},"classes/PedalStatus.html":{},"injectables/PedalsService.html":{},"interfaces/PlayerState-1.html":{},"interfaces/WeavingLog.html":{},"interfaces/WeavingPick-1.html":{}}}],["static",{"_index":297,"title":{},"body":{"classes/AbstractOpFactory.html":{},"classes/BaseOp.html":{},"classes/Branch.html":{},"classes/Bus.html":{},"components/DraftdetailComponent.html":{},"classes/Merge.html":{},"interfaces/OpClassifier.html":{},"interfaces/OperationParam.html":{},"interfaces/OperationProperties.html":{},"classes/Params.html":{},"classes/Pipe.html":{},"classes/Seed.html":{},"interfaces/TopologyDef.html":{}}}],["status",{"_index":1169,"title":{},"body":{"classes/DBListener.html":{},"classes/DBListenerArray.html":{},"classes/DBNode.html":{},"classes/DBNodeArray.html":{},"classes/DBTwoWay.html":{},"classes/DBTwoWayArray.html":{},"classes/DBWriteBuffer.html":{},"classes/DBWriter.html":{},"classes/DBWriterArray.html":{},"interfaces/DraftNodeProxy.html":{},"interfaces/FileObj.html":{},"interfaces/FileSaver.html":{},"interfaces/Fileloader.html":{},"interfaces/LoadResponse.html":{},"interfaces/NodeComponentProxy.html":{},"interfaces/NodeMethods.html":{},"interfaces/NodeParams.html":{},"classes/OnlineStatus.html":{},"interfaces/OpComponentProxy.html":{},"interfaces/Pedal.html":{},"classes/PedalStatus.html":{},"injectables/PedalsService.html":{},"interfaces/SaveObj.html":{},"interfaces/StatusMessage.html":{},"interfaces/TreeNodeProxy.html":{},"components/WeavingStateComponent.html":{}}}],["statuses",{"_index":3363,"title":{},"body":{"interfaces/Pedal.html":{},"classes/PedalStatus.html":{},"injectables/PedalsService.html":{}}}],["statusmessage",{"_index":1683,"title":{"interfaces/StatusMessage.html":{}},"body":{"interfaces/DraftNodeProxy.html":{},"interfaces/FileObj.html":{},"interfaces/FileSaver.html":{},"interfaces/Fileloader.html":{},"interfaces/LoadResponse.html":{},"interfaces/NodeComponentProxy.html":{},"interfaces/OpComponentProxy.html":{},"interfaces/SaveObj.html":{},"interfaces/StatusMessage.html":{},"interfaces/TreeNodeProxy.html":{}}}],["step",{"_index":493,"title":{},"body":{"interfaces/ChainIndex.html":{},"interfaces/DraftOperationClassification.html":{},"interfaces/LoomConfig.html":{},"classes/OpSequencer.html":{},"interfaces/Pedal.html":{},"classes/PedalConfig.html":{},"classes/PedalStatus.html":{},"injectables/PedalsService.html":{},"injectables/PlayerService.html":{},"injectables/SequencerService.html":{}}}],["stepped",{"_index":3362,"title":{},"body":{"interfaces/Pedal.html":{},"classes/PedalStatus.html":{},"injectables/PedalsService.html":{}}}],["stitch",{"_index":4474,"title":{},"body":{"index.html":{}}}],["stop",{"_index":4337,"title":{},"body":{"components/WeavingStateComponent.html":{}}}],["store",{"_index":2251,"title":{},"body":{"interfaces/IOTuple.html":{},"interfaces/TreeNode.html":{},"miscellaneous/typealiases.html":{}}}],["stored",{"_index":987,"title":{},"body":{"classes/DBListener.html":{},"classes/DBListenerArray.html":{},"classes/DBNode.html":{},"classes/DBNodeArray.html":{},"classes/DBTwoWay.html":{},"classes/DBTwoWayArray.html":{},"classes/DBWriteBuffer.html":{},"classes/DBWriter.html":{},"classes/DBWriterArray.html":{},"interfaces/IOTuple.html":{},"interfaces/NodeMethods.html":{},"interfaces/NodeParams.html":{},"classes/OnlineStatus.html":{},"interfaces/TreeNode.html":{},"components/WeavingStateComponent.html":{},"index.html":{}}}],["stores",{"_index":896,"title":{},"body":{"interfaces/Crossing.html":{},"classes/DBListener.html":{},"classes/DBListenerArray.html":{},"classes/DBNode.html":{},"classes/DBNodeArray.html":{},"classes/DBTwoWay.html":{},"classes/DBTwoWayArray.html":{},"classes/DBWriteBuffer.html":{},"classes/DBWriter.html":{},"classes/DBWriterArray.html":{},"interfaces/DensityUnits.html":{},"interfaces/DesignMode.html":{},"interfaces/DraftMap.html":{},"interfaces/DraftNodeProxy.html":{},"interfaces/FileObj.html":{},"interfaces/FileSaver.html":{},"interfaces/Fileloader.html":{},"interfaces/IOTuple.html":{},"interfaces/Interlacement.html":{},"interfaces/InterlacementVal.html":{},"interfaces/LoadResponse.html":{},"interfaces/LoomTypes.html":{},"interfaces/MaterialTypes.html":{},"interfaces/NodeComponentProxy.html":{},"interfaces/NodeMethods.html":{},"interfaces/NodeParams.html":{},"classes/OnlineStatus.html":{},"interfaces/OpComponentProxy.html":{},"interfaces/SaveObj.html":{},"interfaces/StatusMessage.html":{},"interfaces/TreeNode.html":{},"interfaces/TreeNodeProxy.html":{},"interfaces/Vertex.html":{},"interfaces/ViewModes.html":{},"interfaces/YarnPath.html":{},"index.html":{},"miscellaneous/typealiases.html":{}}}],["str",{"_index":1130,"title":{},"body":{"classes/DBListener.html":{},"classes/DBListenerArray.html":{},"classes/DBNode.html":{},"classes/DBNodeArray.html":{},"classes/DBTwoWay.html":{},"classes/DBTwoWayArray.html":{},"classes/DBWriteBuffer.html":{},"classes/DBWriter.html":{},"classes/DBWriterArray.html":{},"interfaces/NodeMethods.html":{},"interfaces/NodeParams.html":{},"classes/OnlineStatus.html":{},"interfaces/Pedal.html":{},"classes/PedalStatus.html":{},"injectables/PedalsService.html":{}}}],["stretch",{"_index":1847,"title":{},"body":{"interfaces/DraftOperationClassification.html":{},"interfaces/LoomConfig.html":{},"classes/PedalConfig.html":{},"injectables/PlayerService.html":{}}}],["string",{"_index":187,"title":{},"body":{"classes/AbstractOpFactory.html":{},"classes/BaseOp.html":{},"classes/Branch.html":{},"classes/Bus.html":{},"interfaces/ChainOp.html":{},"classes/DBListener.html":{},"classes/DBListenerArray.html":{},"classes/DBNode.html":{},"classes/DBNodeArray.html":{},"classes/DBTwoWay.html":{},"classes/DBTwoWayArray.html":{},"classes/DBWriteBuffer.html":{},"classes/DBWriter.html":{},"classes/DBWriterArray.html":{},"interfaces/DensityUnits.html":{},"interfaces/DesignActions.html":{},"interfaces/DesignMode.html":{},"interfaces/DraftMap.html":{},"interfaces/DraftNodeProxy.html":{},"interfaces/DraftOperationClassification.html":{},"components/DraftdetailComponent.html":{},"interfaces/DynamicOperation.html":{},"interfaces/FileObj.html":{},"interfaces/FileSaver.html":{},"interfaces/Fileloader.html":{},"interfaces/IOTuple.html":{},"interfaces/Ink.html":{},"injectables/InkService.html":{},"components/InletComponent.html":{},"interfaces/Interlacement.html":{},"interfaces/InterlacementVal.html":{},"interfaces/LoadResponse.html":{},"interfaces/LoomConfig.html":{},"interfaces/LoomTypes.html":{},"injectables/MappingsService.html":{},"directives/MarqueeComponent.html":{},"interfaces/MaterialTypes.html":{},"classes/Merge.html":{},"components/MixerViewComponent.html":{},"interfaces/NodeComponentProxy.html":{},"interfaces/NodeMethods.html":{},"interfaces/NodeParams.html":{},"classes/OnlineStatus.html":{},"interfaces/OpClassifier.html":{},"interfaces/OpComponentProxy.html":{},"components/OpHelpModal.html":{},"interfaces/OpInput.html":{},"classes/OpSequencer.html":{},"interfaces/OperationClassification.html":{},"interfaces/OperationParam.html":{},"interfaces/OperationProperties.html":{},"components/OpsComponent.html":{},"interfaces/PairedOp.html":{},"components/ParameterComponent.html":{},"classes/Params.html":{},"interfaces/Pedal.html":{},"classes/PedalConfig.html":{},"interfaces/PedalEvent.html":{},"classes/PedalStatus.html":{},"injectables/PedalsService.html":{},"classes/Pipe.html":{},"interfaces/PlayerOp.html":{},"injectables/PlayerService.html":{},"interfaces/PlayerState.html":{},"interfaces/PlayerState-1.html":{},"classes/Render.html":{},"interfaces/SaveObj.html":{},"classes/Seed.html":{},"directives/SelectionComponent.html":{},"injectables/SequencerService.html":{},"classes/Shape.html":{},"classes/Shuttle.html":{},"components/SnackbarComponent.html":{},"interfaces/StatusMessage.html":{},"classes/System.html":{},"interfaces/TopologyDef.html":{},"interfaces/TreeNode.html":{},"interfaces/TreeNodeProxy.html":{},"interfaces/TreeOperation.html":{},"interfaces/ViewModes.html":{},"interfaces/WeavingLog.html":{},"interfaces/WeavingPick.html":{},"interfaces/WeavingPick-1.html":{},"components/WeavingStateComponent.html":{},"miscellaneous/functions.html":{},"miscellaneous/typealiases.html":{}}}],["string(name",{"_index":3197,"title":{},"body":{"interfaces/OperationParam.html":{},"classes/Params.html":{}}}],["string(objorname",{"_index":3198,"title":{},"body":{"interfaces/OperationParam.html":{},"classes/Params.html":{}}}],["string(undefined",{"_index":3354,"title":{},"body":{"classes/Params.html":{}}}],["string.fromcharcode(97",{"_index":4150,"title":{},"body":{"classes/System.html":{}}}],["stringparam",{"_index":3174,"title":{},"body":{"interfaces/OperationParam.html":{},"components/ParameterComponent.html":{},"classes/Params.html":{},"miscellaneous/typealiases.html":{}}}],["strings",{"_index":185,"title":{},"body":{"classes/AbstractOpFactory.html":{},"classes/BaseOp.html":{},"classes/Branch.html":{},"classes/Bus.html":{},"classes/Merge.html":{},"interfaces/OpClassifier.html":{},"interfaces/OperationParam.html":{},"interfaces/OperationProperties.html":{},"classes/Params.html":{},"classes/Pipe.html":{},"classes/Seed.html":{},"interfaces/TopologyDef.html":{},"miscellaneous/typealiases.html":{}}}],["stroked",{"_index":3261,"title":{},"body":{"components/OpsComponent.html":{}}}],["struct_id",{"_index":536,"title":{},"body":{"interfaces/ChainOp.html":{},"interfaces/DraftOperationClassification.html":{},"interfaces/LoomConfig.html":{},"interfaces/PairedOp.html":{},"classes/PedalConfig.html":{},"interfaces/PedalEvent.html":{},"interfaces/PlayerOp.html":{},"injectables/PlayerService.html":{}}}],["structop",{"_index":1909,"title":{},"body":{"interfaces/DraftOperationClassification.html":{},"interfaces/LoomConfig.html":{},"classes/PedalConfig.html":{},"injectables/PlayerService.html":{}}}],["structops",{"_index":1902,"title":{},"body":{"interfaces/DraftOperationClassification.html":{},"interfaces/LoomConfig.html":{},"classes/PedalConfig.html":{},"injectables/PlayerService.html":{}}}],["structops.push(op",{"_index":1904,"title":{},"body":{"interfaces/DraftOperationClassification.html":{},"interfaces/LoomConfig.html":{},"classes/PedalConfig.html":{},"injectables/PlayerService.html":{}}}],["structual",{"_index":1623,"title":{},"body":{"interfaces/DraftMap.html":{},"interfaces/Interlacement.html":{},"interfaces/InterlacementVal.html":{}}}],["structural",{"_index":4126,"title":{},"body":{"classes/System.html":{}}}],["structure",{"_index":1858,"title":{},"body":{"interfaces/DraftOperationClassification.html":{},"interfaces/DynamicOperation.html":{},"interfaces/LoomConfig.html":{},"interfaces/OpInput.html":{},"interfaces/OperationClassification.html":{},"interfaces/OperationParam.html":{},"classes/Params.html":{},"classes/PedalConfig.html":{},"injectables/PlayerService.html":{},"interfaces/TreeOperation.html":{}}}],["structure\")[0].ops",{"_index":1892,"title":{},"body":{"interfaces/DraftOperationClassification.html":{},"interfaces/LoomConfig.html":{},"classes/PedalConfig.html":{},"injectables/PlayerService.html":{}}}],["structured",{"_index":1077,"title":{},"body":{"classes/DBListener.html":{},"classes/DBListenerArray.html":{},"classes/DBNode.html":{},"classes/DBNodeArray.html":{},"classes/DBTwoWay.html":{},"classes/DBTwoWayArray.html":{},"classes/DBWriteBuffer.html":{},"classes/DBWriter.html":{},"classes/DBWriterArray.html":{},"interfaces/NodeMethods.html":{},"interfaces/NodeParams.html":{},"classes/OnlineStatus.html":{},"index.html":{}}}],["structureopfromdraft",{"_index":3705,"title":{},"body":{"injectables/PlayerService.html":{}}}],["structureopfromdraft(d",{"_index":1908,"title":{},"body":{"interfaces/DraftOperationClassification.html":{},"interfaces/LoomConfig.html":{},"classes/PedalConfig.html":{},"injectables/PlayerService.html":{}}}],["structures",{"_index":1861,"title":{},"body":{"interfaces/DraftOperationClassification.html":{},"interfaces/LoomConfig.html":{},"classes/PedalConfig.html":{},"injectables/PlayerService.html":{},"classes/System.html":{},"index.html":{}}}],["styles",{"_index":644,"title":{},"body":{"components/ConnectionComponent.html":{},"components/DraftdetailComponent.html":{},"components/ImageComponent.html":{},"components/InletComponent.html":{},"components/MixerViewComponent.html":{},"components/NoteComponent.html":{},"components/OpHelpModal.html":{},"components/OpSequencerComponent.html":{},"components/OpsComponent.html":{},"components/ParameterComponent.html":{},"components/PlayerComponent.html":{},"components/SnackbarComponent.html":{},"components/VirtualPedalsComponent.html":{},"components/WeavingStateComponent.html":{},"index.html":{}}}],["styleurls",{"_index":652,"title":{},"body":{"components/ConnectionComponent.html":{},"interfaces/DesignActions.html":{},"components/DraftdetailComponent.html":{},"components/ImageComponent.html":{},"components/InletComponent.html":{},"components/MixerViewComponent.html":{},"components/NoteComponent.html":{},"components/OpHelpModal.html":{},"components/OpSequencerComponent.html":{},"components/OpsComponent.html":{},"components/ParameterComponent.html":{},"components/PlayerComponent.html":{},"components/SnackbarComponent.html":{},"components/VirtualPedalsComponent.html":{},"components/WeavingStateComponent.html":{}}}],["subdirectory",{"_index":4536,"title":{},"body":{"index.html":{}}}],["subdraft",{"_index":696,"title":{},"body":{"components/ConnectionComponent.html":{},"interfaces/DesignActions.html":{},"components/NoteComponent.html":{},"injectables/ViewportService.html":{},"index.html":{}}}],["subdraft'},{'name",{"_index":872,"title":{},"body":{"components/ConnectionComponent.html":{},"components/DraftdetailComponent.html":{},"components/ImageComponent.html":{},"components/InletComponent.html":{},"components/MixerViewComponent.html":{},"components/NoteComponent.html":{},"components/OpHelpModal.html":{},"components/OpSequencerComponent.html":{},"components/OpsComponent.html":{},"components/ParameterComponent.html":{},"components/PlayerComponent.html":{},"components/SnackbarComponent.html":{},"components/VirtualPedalsComponent.html":{},"components/WeavingStateComponent.html":{}}}],["subdraft.component.html",{"_index":1338,"title":{},"body":{"interfaces/DesignActions.html":{}}}],["subdraft.component.scss",{"_index":1339,"title":{},"body":{"interfaces/DesignActions.html":{}}}],["subdraft/subdraft.component",{"_index":732,"title":{},"body":{"components/ConnectionComponent.html":{}}}],["subdraftcomponent",{"_index":707,"title":{},"body":{"components/ConnectionComponent.html":{},"interfaces/DesignActions.html":{},"components/DraftdetailComponent.html":{},"interfaces/IOTuple.html":{},"components/ImageComponent.html":{},"components/InletComponent.html":{},"modules/MixerModule.html":{},"components/MixerViewComponent.html":{},"components/NoteComponent.html":{},"components/OpHelpModal.html":{},"components/OpSequencerComponent.html":{},"components/OpsComponent.html":{},"components/ParameterComponent.html":{},"components/PlayerComponent.html":{},"components/SnackbarComponent.html":{},"interfaces/TreeNode.html":{},"components/VirtualPedalsComponent.html":{},"components/WeavingStateComponent.html":{},"overview.html":{}}}],["subdrafts",{"_index":2292,"title":{},"body":{"interfaces/IOTuple.html":{},"interfaces/TreeNode.html":{}}}],["subfolder",{"_index":4531,"title":{},"body":{"index.html":{}}}],["subscribe((data",{"_index":2021,"title":{},"body":{"components/DraftdetailComponent.html":{}}}],["subtypes",{"_index":4598,"title":{},"body":{"index.html":{}}}],["success",{"_index":1685,"title":{},"body":{"interfaces/DraftNodeProxy.html":{},"interfaces/FileObj.html":{},"interfaces/FileSaver.html":{},"interfaces/Fileloader.html":{},"interfaces/LoadResponse.html":{},"interfaces/NodeComponentProxy.html":{},"interfaces/OpComponentProxy.html":{},"interfaces/SaveObj.html":{},"interfaces/StatusMessage.html":{},"interfaces/TreeNodeProxy.html":{}}}],["such",{"_index":607,"title":{},"body":{"interfaces/ChainOp.html":{},"classes/DBListener.html":{},"classes/DBListenerArray.html":{},"classes/DBNode.html":{},"classes/DBNodeArray.html":{},"classes/DBTwoWay.html":{},"classes/DBTwoWayArray.html":{},"classes/DBWriteBuffer.html":{},"classes/DBWriter.html":{},"classes/DBWriterArray.html":{},"interfaces/DraftMap.html":{},"interfaces/DynamicOperation.html":{},"interfaces/Interlacement.html":{},"interfaces/InterlacementVal.html":{},"interfaces/NodeMethods.html":{},"interfaces/NodeParams.html":{},"classes/OnlineStatus.html":{},"interfaces/OpInput.html":{},"interfaces/OperationClassification.html":{},"interfaces/PairedOp.html":{},"interfaces/PedalEvent.html":{},"interfaces/PlayerOp.html":{},"interfaces/TreeOperation.html":{},"index.html":{}}}],["super",{"_index":469,"title":{},"body":{"interfaces/ChainIndex.html":{},"classes/DBListener.html":{},"classes/DBListenerArray.html":{},"classes/DBNode.html":{},"classes/DBNodeArray.html":{},"classes/DBTwoWay.html":{},"classes/DBTwoWayArray.html":{},"classes/DBWriteBuffer.html":{},"classes/DBWriter.html":{},"classes/DBWriterArray.html":{},"injectables/MappingsService.html":{},"interfaces/NodeMethods.html":{},"interfaces/NodeParams.html":{},"classes/OnlineStatus.html":{},"interfaces/Pedal.html":{},"classes/PedalStatus.html":{},"injectables/PedalsService.html":{},"injectables/SequencerService.html":{}}}],["super(lengthnode",{"_index":1080,"title":{},"body":{"classes/DBListener.html":{},"classes/DBListenerArray.html":{},"classes/DBNode.html":{},"classes/DBNodeArray.html":{},"classes/DBTwoWay.html":{},"classes/DBTwoWayArray.html":{},"classes/DBWriteBuffer.html":{},"classes/DBWriter.html":{},"classes/DBWriterArray.html":{},"interfaces/NodeMethods.html":{},"interfaces/NodeParams.html":{},"classes/OnlineStatus.html":{}}}],["super(params",{"_index":1016,"title":{},"body":{"classes/DBListener.html":{},"classes/DBListenerArray.html":{},"classes/DBNode.html":{},"classes/DBNodeArray.html":{},"classes/DBTwoWay.html":{},"classes/DBTwoWayArray.html":{},"classes/DBWriteBuffer.html":{},"classes/DBWriter.html":{},"classes/DBWriterArray.html":{},"interfaces/NodeMethods.html":{},"interfaces/NodeParams.html":{},"classes/OnlineStatus.html":{}}}],["super.setval(x",{"_index":1046,"title":{},"body":{"classes/DBListener.html":{},"classes/DBListenerArray.html":{},"classes/DBNode.html":{},"classes/DBNodeArray.html":{},"classes/DBTwoWay.html":{},"classes/DBTwoWayArray.html":{},"classes/DBWriteBuffer.html":{},"classes/DBWriter.html":{},"classes/DBWriterArray.html":{},"interfaces/NodeMethods.html":{},"interfaces/NodeParams.html":{},"classes/OnlineStatus.html":{}}}],["supplemental",{"_index":2920,"title":{},"body":{"components/NoteComponent.html":{}}}],["supplied",{"_index":2878,"title":{},"body":{"components/NoteComponent.html":{}}}],["support",{"_index":4620,"title":{},"body":{"modules.html":{}}}],["supports",{"_index":4435,"title":{},"body":{"index.html":{}}}],["sure",{"_index":1580,"title":{},"body":{"interfaces/DesignActions.html":{},"interfaces/Pedal.html":{},"classes/PedalStatus.html":{},"injectables/PedalsService.html":{},"classes/System.html":{},"miscellaneous/functions.html":{}}}],["svg",{"_index":662,"title":{},"body":{"components/ConnectionComponent.html":{},"components/MixerViewComponent.html":{},"components/NoteComponent.html":{},"modules.html":{}}}],["swapeditingstyle",{"_index":1961,"title":{},"body":{"components/DraftdetailComponent.html":{}}}],["switch",{"_index":2451,"title":{},"body":{"components/InletComponent.html":{},"classes/OpSequencer.html":{}}}],["switch(event.key",{"_index":4280,"title":{},"body":{"components/VirtualPedalsComponent.html":{}}}],["switch(this.inlet.type",{"_index":2465,"title":{},"body":{"components/InletComponent.html":{}}}],["switch(this.param.type",{"_index":3307,"title":{},"body":{"components/ParameterComponent.html":{}}}],["symm",{"_index":1845,"title":{},"body":{"interfaces/DraftOperationClassification.html":{},"interfaces/LoomConfig.html":{},"classes/PedalConfig.html":{},"injectables/PlayerService.html":{}}}],["sys",{"_index":4169,"title":{},"body":{"classes/System.html":{}}}],["sys.code",{"_index":2472,"title":{},"body":{"components/InletComponent.html":{}}}],["sys.map(el",{"_index":4168,"title":{},"body":{"classes/System.html":{}}}],["system",{"_index":2452,"title":{"classes/System.html":{}},"body":{"components/InletComponent.html":{},"classes/System.html":{},"miscellaneous/functions.html":{}}}],["system_id",{"_index":4575,"title":{},"body":{"index.html":{}}}],["systemdict",{"_index":4136,"title":{},"body":{"classes/System.html":{}}}],["systems",{"_index":1622,"title":{},"body":{"interfaces/DraftMap.html":{},"components/DraftdetailComponent.html":{},"components/InletComponent.html":{},"interfaces/Interlacement.html":{},"interfaces/InterlacementVal.html":{},"classes/Selection.html":{},"classes/System.html":{},"miscellaneous/functions.html":{}}}],["systems.length",{"_index":4159,"title":{},"body":{"classes/System.html":{}}}],["systems.map((sys",{"_index":4165,"title":{},"body":{"classes/System.html":{}}}],["systems.map(el",{"_index":4161,"title":{},"body":{"classes/System.html":{}}}],["systemsservice",{"_index":2399,"title":{},"body":{"components/InletComponent.html":{},"classes/Render.html":{}}}],["t",{"_index":264,"title":{},"body":{"classes/AbstractOpFactory.html":{},"classes/BaseOp.html":{},"classes/Branch.html":{},"classes/Bus.html":{},"classes/Merge.html":{},"interfaces/OpClassifier.html":{},"interfaces/OperationProperties.html":{},"classes/Pipe.html":{},"components/PlayerComponent.html":{},"classes/Seed.html":{},"classes/Selection.html":{},"interfaces/TopologyDef.html":{}}}],["t.tostring",{"_index":3676,"title":{},"body":{"components/PlayerComponent.html":{}}}],["t:boolean",{"_index":921,"title":{},"body":{"interfaces/Crossing.html":{},"interfaces/Vertex.html":{},"interfaces/YarnPath.html":{}}}],["t:false",{"_index":932,"title":{},"body":{"interfaces/Crossing.html":{},"interfaces/Vertex.html":{},"interfaces/YarnPath.html":{}}}],["t:null",{"_index":923,"title":{},"body":{"interfaces/Crossing.html":{},"interfaces/Vertex.html":{},"interfaces/YarnPath.html":{}}}],["t:true",{"_index":930,"title":{},"body":{"interfaces/Crossing.html":{},"interfaces/Vertex.html":{},"interfaces/YarnPath.html":{}}}],["tabby",{"_index":1818,"title":{},"body":{"interfaces/DraftOperationClassification.html":{},"interfaces/LoomConfig.html":{},"classes/PedalConfig.html":{},"injectables/PlayerService.html":{}}}],["take",{"_index":72,"title":{},"body":{"classes/AbstractOpFactory.html":{},"classes/BaseOp.html":{},"classes/Branch.html":{},"classes/Bus.html":{},"interfaces/DynamicOperation.html":{},"classes/Merge.html":{},"interfaces/OpClassifier.html":{},"components/OpHelpModal.html":{},"interfaces/OpInput.html":{},"interfaces/OperationClassification.html":{},"interfaces/OperationProperties.html":{},"classes/Pipe.html":{},"classes/Seed.html":{},"interfaces/TopologyDef.html":{},"interfaces/TreeOperation.html":{},"index.html":{},"miscellaneous/typealiases.html":{}}}],["takes",{"_index":115,"title":{},"body":{"classes/AbstractOpFactory.html":{},"classes/BaseOp.html":{},"classes/Branch.html":{},"classes/Bus.html":{},"classes/Cell.html":{},"interfaces/ChainOp.html":{},"interfaces/DesignActions.html":{},"interfaces/DynamicOperation.html":{},"interfaces/IOTuple.html":{},"classes/Merge.html":{},"interfaces/OpClassifier.html":{},"interfaces/OpInput.html":{},"interfaces/OperationClassification.html":{},"interfaces/OperationProperties.html":{},"interfaces/PairedOp.html":{},"interfaces/PedalEvent.html":{},"classes/Pipe.html":{},"interfaces/PlayerOp.html":{},"classes/Seed.html":{},"classes/Shape-1.html":{},"classes/System.html":{},"interfaces/TopologyDef.html":{},"interfaces/TreeNode.html":{},"interfaces/TreeOperation.html":{},"miscellaneous/functions.html":{}}}],["tar",{"_index":4393,"title":{},"body":{"dependencies.html":{}}}],["target",{"_index":2044,"title":{},"body":{"components/DraftdetailComponent.html":{},"classes/Selection.html":{}}}],["target.classname",{"_index":2046,"title":{},"body":{"components/DraftdetailComponent.html":{}}}],["targetlength",{"_index":1936,"title":{},"body":{"interfaces/DraftOperationClassification.html":{},"interfaces/LoomConfig.html":{},"classes/PedalConfig.html":{},"injectables/PlayerService.html":{}}}],["tc2",{"_index":3733,"title":{},"body":{"interfaces/PlayerState.html":{},"interfaces/PlayerState-1.html":{},"interfaces/WeavingLog.html":{},"interfaces/WeavingPick.html":{},"interfaces/WeavingPick-1.html":{}}}],["teh",{"_index":4171,"title":{},"body":{"classes/System.html":{},"miscellaneous/typealiases.html":{}}}],["tell",{"_index":1373,"title":{},"body":{"interfaces/DesignActions.html":{},"index.html":{}}}],["template",{"_index":643,"title":{},"body":{"components/ConnectionComponent.html":{},"components/DraftdetailComponent.html":{},"components/ImageComponent.html":{},"components/InletComponent.html":{},"components/MixerViewComponent.html":{},"components/NoteComponent.html":{},"components/OpHelpModal.html":{},"components/OpSequencerComponent.html":{},"components/OpsComponent.html":{},"components/ParameterComponent.html":{},"components/PlayerComponent.html":{},"components/SnackbarComponent.html":{},"components/VirtualPedalsComponent.html":{},"components/WeavingStateComponent.html":{}}}],["templateurl",{"_index":654,"title":{},"body":{"components/ConnectionComponent.html":{},"interfaces/DesignActions.html":{},"components/DraftdetailComponent.html":{},"components/ImageComponent.html":{},"components/InletComponent.html":{},"components/MixerViewComponent.html":{},"components/NoteComponent.html":{},"components/OpHelpModal.html":{},"components/OpSequencerComponent.html":{},"components/OpsComponent.html":{},"components/ParameterComponent.html":{},"components/PlayerComponent.html":{},"components/SnackbarComponent.html":{},"components/VirtualPedalsComponent.html":{},"components/WeavingStateComponent.html":{}}}],["terminal",{"_index":4504,"title":{},"body":{"index.html":{}}}],["terms",{"_index":93,"title":{},"body":{"classes/AbstractOpFactory.html":{},"classes/BaseOp.html":{},"classes/Branch.html":{},"classes/Bus.html":{},"classes/Merge.html":{},"interfaces/OpClassifier.html":{},"interfaces/OperationProperties.html":{},"classes/Pipe.html":{},"classes/Seed.html":{},"interfaces/TopologyDef.html":{}}}],["test",{"_index":1866,"title":{},"body":{"interfaces/DraftOperationClassification.html":{},"interfaces/LoomConfig.html":{},"interfaces/OperationParam.html":{},"classes/Params.html":{},"classes/PedalConfig.html":{},"injectables/PlayerService.html":{}}}],["testing",{"_index":3648,"title":{},"body":{"components/PlayerComponent.html":{}}}],["text",{"_index":1293,"title":{},"body":{"interfaces/DensityUnits.html":{},"interfaces/DesignMode.html":{},"components/InletComponent.html":{},"interfaces/LoomTypes.html":{},"interfaces/MaterialTypes.html":{},"components/NoteComponent.html":{},"components/OpsComponent.html":{},"components/ParameterComponent.html":{},"interfaces/ViewModes.html":{}}}],["text_vals.map(el",{"_index":2809,"title":{},"body":{"components/MixerViewComponent.html":{}}}],["text_vals:array",{"_index":2807,"title":{},"body":{"components/MixerViewComponent.html":{}}}],["textvalidate",{"_index":2389,"title":{},"body":{"components/InletComponent.html":{}}}],["tf",{"_index":1010,"title":{},"body":{"classes/DBListener.html":{},"classes/DBListenerArray.html":{},"classes/DBNode.html":{},"classes/DBNodeArray.html":{},"classes/DBTwoWay.html":{},"classes/DBTwoWayArray.html":{},"classes/DBWriteBuffer.html":{},"classes/DBWriter.html":{},"classes/DBWriterArray.html":{},"interfaces/NodeMethods.html":{},"interfaces/NodeParams.html":{},"classes/OnlineStatus.html":{}}}],["then((snapshot",{"_index":1025,"title":{},"body":{"classes/DBListener.html":{},"classes/DBListenerArray.html":{},"classes/DBNode.html":{},"classes/DBNodeArray.html":{},"classes/DBTwoWay.html":{},"classes/DBTwoWayArray.html":{},"classes/DBWriteBuffer.html":{},"classes/DBWriter.html":{},"classes/DBWriterArray.html":{},"interfaces/NodeMethods.html":{},"interfaces/NodeParams.html":{},"classes/OnlineStatus.html":{}}}],["then((state",{"_index":1926,"title":{},"body":{"interfaces/DraftOperationClassification.html":{},"interfaces/LoomConfig.html":{},"classes/PedalConfig.html":{},"injectables/PlayerService.html":{}}}],["then(href",{"_index":1539,"title":{},"body":{"interfaces/DesignActions.html":{}}}],["thickness",{"_index":4047,"title":{},"body":{"classes/Shuttle.html":{}}}],["thin",{"_index":2476,"title":{},"body":{"components/InletComponent.html":{},"components/MixerViewComponent.html":{},"components/NoteComponent.html":{},"components/ParameterComponent.html":{}}}],["thing",{"_index":606,"title":{},"body":{"interfaces/ChainOp.html":{},"injectables/MappingsService.html":{},"interfaces/PairedOp.html":{},"interfaces/PedalEvent.html":{},"interfaces/PlayerOp.html":{}}}],["things",{"_index":600,"title":{},"body":{"interfaces/ChainOp.html":{},"interfaces/IOTuple.html":{},"injectables/MappingsService.html":{},"interfaces/PairedOp.html":{},"interfaces/PedalEvent.html":{},"interfaces/PlayerOp.html":{},"interfaces/TreeNode.html":{},"index.html":{}}}],["this._active",{"_index":1008,"title":{},"body":{"classes/DBListener.html":{},"classes/DBListenerArray.html":{},"classes/DBNode.html":{},"classes/DBNodeArray.html":{},"classes/DBTwoWay.html":{},"classes/DBTwoWayArray.html":{},"classes/DBWriteBuffer.html":{},"classes/DBWriter.html":{},"classes/DBWriterArray.html":{},"interfaces/NodeMethods.html":{},"interfaces/NodeParams.html":{},"classes/OnlineStatus.html":{}}}],["this._active_draft",{"_index":3643,"title":{},"body":{"components/PlayerComponent.html":{}}}],["this._bounds",{"_index":1352,"title":{},"body":{"interfaces/DesignActions.html":{}}}],["this._dbref",{"_index":993,"title":{},"body":{"classes/DBListener.html":{},"classes/DBListenerArray.html":{},"classes/DBNode.html":{},"classes/DBNodeArray.html":{},"classes/DBTwoWay.html":{},"classes/DBTwoWayArray.html":{},"classes/DBWriteBuffer.html":{},"classes/DBWriter.html":{},"classes/DBWriterArray.html":{},"interfaces/NodeMethods.html":{},"interfaces/NodeParams.html":{},"classes/OnlineStatus.html":{}}}],["this._draft",{"_index":1348,"title":{},"body":{"interfaces/DesignActions.html":{}}}],["this._filter(value",{"_index":3248,"title":{},"body":{"components/OpsComponent.html":{}}}],["this._name",{"_index":991,"title":{},"body":{"classes/DBListener.html":{},"classes/DBListenerArray.html":{},"classes/DBNode.html":{},"classes/DBNodeArray.html":{},"classes/DBTwoWay.html":{},"classes/DBTwoWayArray.html":{},"classes/DBWriteBuffer.html":{},"classes/DBWriter.html":{},"classes/DBWriterArray.html":{},"interfaces/NodeMethods.html":{},"interfaces/NodeParams.html":{},"classes/OnlineStatus.html":{}}}],["this._pos",{"_index":466,"title":{},"body":{"interfaces/ChainIndex.html":{},"classes/OpSequencer.html":{},"injectables/SequencerService.html":{}}}],["this._scale",{"_index":1342,"title":{},"body":{"interfaces/DesignActions.html":{},"components/NoteComponent.html":{}}}],["this._val",{"_index":996,"title":{},"body":{"classes/DBListener.html":{},"classes/DBListenerArray.html":{},"classes/DBNode.html":{},"classes/DBNodeArray.html":{},"classes/DBTwoWay.html":{},"classes/DBTwoWayArray.html":{},"classes/DBWriteBuffer.html":{},"classes/DBWriter.html":{},"classes/DBWriterArray.html":{},"interfaces/NodeMethods.html":{},"interfaces/NodeParams.html":{},"classes/OnlineStatus.html":{}}}],["this.absolute",{"_index":4235,"title":{},"body":{"injectables/ViewportService.html":{}}}],["this.absolute.height",{"_index":4246,"title":{},"body":{"injectables/ViewportService.html":{}}}],["this.absolute.height/2",{"_index":4263,"title":{},"body":{"injectables/ViewportService.html":{}}}],["this.absolute.width",{"_index":4245,"title":{},"body":{"injectables/ViewportService.html":{}}}],["this.absolute.width/2",{"_index":4262,"title":{},"body":{"injectables/ViewportService.html":{}}}],["this.active",{"_index":483,"title":{},"body":{"interfaces/ChainIndex.html":{},"classes/DBListener.html":{},"classes/DBListenerArray.html":{},"classes/DBNode.html":{},"classes/DBNodeArray.html":{},"classes/DBTwoWay.html":{},"classes/DBTwoWayArray.html":{},"classes/DBWriteBuffer.html":{},"classes/DBWriter.html":{},"classes/DBWriterArray.html":{},"interfaces/NodeMethods.html":{},"interfaces/NodeParams.html":{},"classes/OnlineStatus.html":{},"injectables/SequencerService.html":{}}}],["this.active_draft.val",{"_index":3425,"title":{},"body":{"interfaces/Pedal.html":{},"classes/PedalStatus.html":{},"injectables/PedalsService.html":{}}}],["this.addnode(snapshot.key",{"_index":1091,"title":{},"body":{"classes/DBListener.html":{},"classes/DBListenerArray.html":{},"classes/DBNode.html":{},"classes/DBNodeArray.html":{},"classes/DBTwoWay.html":{},"classes/DBTwoWayArray.html":{},"classes/DBWriteBuffer.html":{},"classes/DBWriter.html":{},"classes/DBWriterArray.html":{},"interfaces/NodeMethods.html":{},"interfaces/NodeParams.html":{},"classes/OnlineStatus.html":{}}}],["this.addop(ch",{"_index":504,"title":{},"body":{"interfaces/ChainIndex.html":{},"injectables/SequencerService.html":{}}}],["this.addop(o",{"_index":484,"title":{},"body":{"interfaces/ChainIndex.html":{},"injectables/SequencerService.html":{}}}],["this.all_system_codes",{"_index":2433,"title":{},"body":{"components/InletComponent.html":{}}}],["this.array",{"_index":2573,"title":{},"body":{"injectables/MappingsService.html":{}}}],["this.array[dst",{"_index":2607,"title":{},"body":{"injectables/MappingsService.html":{}}}],["this.array[id",{"_index":2597,"title":{},"body":{"injectables/MappingsService.html":{}}}],["this.array[p",{"_index":2612,"title":{},"body":{"injectables/MappingsService.html":{}}}],["this.array[src",{"_index":2608,"title":{},"body":{"injectables/MappingsService.html":{}}}],["this.attach",{"_index":1171,"title":{},"body":{"classes/DBListener.html":{},"classes/DBListenerArray.html":{},"classes/DBNode.html":{},"classes/DBNodeArray.html":{},"classes/DBTwoWay.html":{},"classes/DBTwoWayArray.html":{},"classes/DBWriteBuffer.html":{},"classes/DBWriter.html":{},"classes/DBWriterArray.html":{},"interfaces/NodeMethods.html":{},"interfaces/NodeParams.html":{},"classes/OnlineStatus.html":{}}}],["this.attachchildnode(childnode",{"_index":1105,"title":{},"body":{"classes/DBListener.html":{},"classes/DBListenerArray.html":{},"classes/DBNode.html":{},"classes/DBNodeArray.html":{},"classes/DBTwoWay.html":{},"classes/DBTwoWayArray.html":{},"classes/DBWriteBuffer.html":{},"classes/DBWriter.html":{},"classes/DBWriterArray.html":{},"interfaces/NodeMethods.html":{},"interfaces/NodeParams.html":{},"classes/OnlineStatus.html":{}}}],["this.attachchildnode(node",{"_index":1087,"title":{},"body":{"classes/DBListener.html":{},"classes/DBListenerArray.html":{},"classes/DBNode.html":{},"classes/DBNodeArray.html":{},"classes/DBTwoWay.html":{},"classes/DBTwoWayArray.html":{},"classes/DBWriteBuffer.html":{},"classes/DBWriter.html":{},"classes/DBWriterArray.html":{},"interfaces/NodeMethods.html":{},"interfaces/NodeParams.html":{},"classes/OnlineStatus.html":{}}}],["this.availpedals",{"_index":1727,"title":{},"body":{"interfaces/DraftOperationClassification.html":{},"interfaces/LoomConfig.html":{},"injectables/MappingsService.html":{},"classes/PedalConfig.html":{},"injectables/PlayerService.html":{}}}],["this.availpedals.filter((id",{"_index":1739,"title":{},"body":{"interfaces/DraftOperationClassification.html":{},"interfaces/LoomConfig.html":{},"injectables/MappingsService.html":{},"classes/PedalConfig.html":{},"injectables/PlayerService.html":{}}}],["this.availpedals.push(p.id",{"_index":1736,"title":{},"body":{"interfaces/DraftOperationClassification.html":{},"interfaces/LoomConfig.html":{},"injectables/MappingsService.html":{},"classes/PedalConfig.html":{},"injectables/PlayerService.html":{}}}],["this.b_from",{"_index":791,"title":{},"body":{"components/ConnectionComponent.html":{}}}],["this.b_to",{"_index":754,"title":{},"body":{"components/ConnectionComponent.html":{}}}],["this.base.allrequired(...args).type(topo",{"_index":303,"title":{},"body":{"classes/AbstractOpFactory.html":{},"classes/BaseOp.html":{},"classes/Branch.html":{},"classes/Bus.html":{},"classes/Merge.html":{},"interfaces/OpClassifier.html":{},"interfaces/OperationProperties.html":{},"classes/Pipe.html":{},"classes/Seed.html":{},"interfaces/TopologyDef.html":{}}}],["this.base.draftsoptional(...args).type(topo",{"_index":301,"title":{},"body":{"classes/AbstractOpFactory.html":{},"classes/BaseOp.html":{},"classes/Branch.html":{},"classes/Bus.html":{},"classes/Merge.html":{},"interfaces/OpClassifier.html":{},"interfaces/OperationProperties.html":{},"classes/Pipe.html":{},"classes/Seed.html":{},"interfaces/TopologyDef.html":{}}}],["this.base.nodrafts(...args).type(topo",{"_index":299,"title":{},"body":{"classes/AbstractOpFactory.html":{},"classes/BaseOp.html":{},"classes/Branch.html":{},"classes/Bus.html":{},"classes/Merge.html":{},"interfaces/OpClassifier.html":{},"interfaces/OperationProperties.html":{},"classes/Pipe.html":{},"classes/Seed.html":{},"interfaces/TopologyDef.html":{}}}],["this.base.noparams(...args).type(topo",{"_index":300,"title":{},"body":{"classes/AbstractOpFactory.html":{},"classes/BaseOp.html":{},"classes/Branch.html":{},"classes/Bus.html":{},"classes/Merge.html":{},"interfaces/OpClassifier.html":{},"interfaces/OperationProperties.html":{},"classes/Pipe.html":{},"classes/Seed.html":{},"interfaces/TopologyDef.html":{}}}],["this.base.paramsoptional(...args).type(topo",{"_index":302,"title":{},"body":{"classes/AbstractOpFactory.html":{},"classes/BaseOp.html":{},"classes/Branch.html":{},"classes/Bus.html":{},"classes/Merge.html":{},"interfaces/OpClassifier.html":{},"interfaces/OperationProperties.html":{},"classes/Pipe.html":{},"classes/Seed.html":{},"interfaces/TopologyDef.html":{}}}],["this.base_cell.h.max",{"_index":3834,"title":{},"body":{"classes/Render.html":{}}}],["this.base_cell.h.min",{"_index":3829,"title":{},"body":{"classes/Render.html":{}}}],["this.base_cell.margin_clear_x.min",{"_index":3842,"title":{},"body":{"classes/Render.html":{}}}],["this.base_cell.margin_clear_y.min",{"_index":3844,"title":{},"body":{"classes/Render.html":{}}}],["this.base_cell.margin_fill_x.min",{"_index":3846,"title":{},"body":{"classes/Render.html":{}}}],["this.base_cell.margin_fill_y.min",{"_index":3848,"title":{},"body":{"classes/Render.html":{}}}],["this.base_cell.w.max",{"_index":3832,"title":{},"body":{"classes/Render.html":{}}}],["this.base_cell.w.min",{"_index":3828,"title":{},"body":{"classes/Render.html":{}}}],["this.bitmap.nativeelement",{"_index":1528,"title":{},"body":{"interfaces/DesignActions.html":{}}}],["this.boolparam",{"_index":3311,"title":{},"body":{"components/ParameterComponent.html":{}}}],["this.bounds",{"_index":2673,"title":{},"body":{"directives/MarqueeComponent.html":{},"components/MixerViewComponent.html":{},"directives/SelectionComponent.html":{},"classes/Shape.html":{},"components/SnackbarComponent.html":{}}}],["this.bounds.height",{"_index":815,"title":{},"body":{"components/ConnectionComponent.html":{},"interfaces/DesignActions.html":{}}}],["this.bounds.length",{"_index":3992,"title":{},"body":{"classes/Shape.html":{}}}],["this.bounds.topleft",{"_index":1468,"title":{},"body":{"interfaces/DesignActions.html":{},"components/NoteComponent.html":{}}}],["this.bounds.topleft.x",{"_index":820,"title":{},"body":{"components/ConnectionComponent.html":{},"interfaces/DesignActions.html":{}}}],["this.bounds.topleft.y",{"_index":818,"title":{},"body":{"components/ConnectionComponent.html":{},"interfaces/DesignActions.html":{}}}],["this.bounds.topleft.y+this.bounds.height",{"_index":2927,"title":{},"body":{"components/NoteComponent.html":{}}}],["this.bounds.width",{"_index":814,"title":{},"body":{"components/ConnectionComponent.html":{},"interfaces/DesignActions.html":{}}}],["this.calculatebounds",{"_index":783,"title":{},"body":{"components/ConnectionComponent.html":{}}}],["this.canvas",{"_index":1435,"title":{},"body":{"interfaces/DesignActions.html":{},"components/NoteComponent.html":{}}}],["this.canvas.getcontext(\"2d",{"_index":1438,"title":{},"body":{"interfaces/DesignActions.html":{},"components/NoteComponent.html":{}}}],["this.canvas.height",{"_index":1498,"title":{},"body":{"interfaces/DesignActions.html":{}}}],["this.canvas.width",{"_index":1496,"title":{},"body":{"interfaces/DesignActions.html":{}}}],["this.cell_factor",{"_index":2785,"title":{},"body":{"components/MixerViewComponent.html":{}}}],["this.chains.length",{"_index":502,"title":{},"body":{"interfaces/ChainIndex.html":{},"injectables/SequencerService.html":{}}}],["this.chains.push({id",{"_index":503,"title":{},"body":{"interfaces/ChainIndex.html":{},"injectables/SequencerService.html":{}}}],["this.classifier",{"_index":241,"title":{},"body":{"classes/AbstractOpFactory.html":{},"classes/BaseOp.html":{},"classes/Branch.html":{},"classes/Bus.html":{},"classes/Merge.html":{},"interfaces/OpClassifier.html":{},"interfaces/OperationProperties.html":{},"classes/Pipe.html":{},"classes/Seed.html":{},"interfaces/TopologyDef.html":{}}}],["this.classifier.input_drafts",{"_index":260,"title":{},"body":{"classes/AbstractOpFactory.html":{},"classes/BaseOp.html":{},"classes/Branch.html":{},"classes/Bus.html":{},"classes/Merge.html":{},"interfaces/OpClassifier.html":{},"interfaces/OperationProperties.html":{},"classes/Pipe.html":{},"classes/Seed.html":{},"interfaces/TopologyDef.html":{}}}],["this.classifier.input_params",{"_index":261,"title":{},"body":{"classes/AbstractOpFactory.html":{},"classes/BaseOp.html":{},"classes/Branch.html":{},"classes/Bus.html":{},"classes/Merge.html":{},"interfaces/OpClassifier.html":{},"interfaces/OperationProperties.html":{},"classes/Pipe.html":{},"classes/Seed.html":{},"interfaces/TopologyDef.html":{}}}],["this.classifier.type",{"_index":263,"title":{},"body":{"classes/AbstractOpFactory.html":{},"classes/BaseOp.html":{},"classes/Branch.html":{},"classes/Bus.html":{},"classes/Merge.html":{},"interfaces/OpClassifier.html":{},"interfaces/OperationProperties.html":{},"classes/Pipe.html":{},"classes/Seed.html":{},"interfaces/TopologyDef.html":{}}}],["this.clearselection",{"_index":2356,"title":{},"body":{"interfaces/Ink.html":{},"injectables/InkService.html":{}}}],["this.color",{"_index":4094,"title":{},"body":{"classes/Shuttle.html":{}}}],["this.color=\"#666666",{"_index":4088,"title":{},"body":{"classes/Shuttle.html":{}}}],["this.count",{"_index":2508,"title":{},"body":{"injectables/LayersService.html":{}}}],["this.current",{"_index":3062,"title":{},"body":{"classes/OpSequencer.html":{}}}],["this.current.perform(res",{"_index":3070,"title":{},"body":{"classes/OpSequencer.html":{}}}],["this.current_view",{"_index":3816,"title":{},"body":{"classes/Render.html":{}}}],["this.cx",{"_index":1437,"title":{},"body":{"interfaces/DesignActions.html":{},"components/NoteComponent.html":{},"components/PlayerComponent.html":{},"components/WeavingStateComponent.html":{}}}],["this.cx.strokerect(0,0",{"_index":813,"title":{},"body":{"components/ConnectionComponent.html":{}}}],["this.db",{"_index":3432,"title":{},"body":{"interfaces/Pedal.html":{},"classes/PedalStatus.html":{},"injectables/PedalsService.html":{}}}],["this.default_cell",{"_index":1497,"title":{},"body":{"interfaces/DesignActions.html":{},"components/WeavingStateComponent.html":{}}}],["this.default_params",{"_index":255,"title":{},"body":{"classes/AbstractOpFactory.html":{},"classes/BaseOp.html":{},"classes/Branch.html":{},"classes/Bus.html":{},"classes/Merge.html":{},"interfaces/OpClassifier.html":{},"interfaces/OperationProperties.html":{},"classes/Pipe.html":{},"classes/Seed.html":{},"interfaces/TopologyDef.html":{}}}],["this.deletenote.emit(id",{"_index":2905,"title":{},"body":{"components/NoteComponent.html":{}}}],["this.dialog.open(draftdetailcomponent",{"_index":1571,"title":{},"body":{"interfaces/DesignActions.html":{}}}],["this.dialogref.close",{"_index":2983,"title":{},"body":{"components/OpHelpModal.html":{}}}],["this.dialogref.close(null",{"_index":2062,"title":{},"body":{"components/DraftdetailComponent.html":{},"components/MixerViewComponent.html":{},"components/OpsComponent.html":{}}}],["this.dialogref.close(this.draft",{"_index":2063,"title":{},"body":{"components/DraftdetailComponent.html":{}}}],["this.disable_drag",{"_index":760,"title":{},"body":{"components/ConnectionComponent.html":{}}}],["this.displayname",{"_index":245,"title":{},"body":{"classes/AbstractOpFactory.html":{},"classes/BaseOp.html":{},"classes/Branch.html":{},"classes/Bus.html":{},"classes/Merge.html":{},"interfaces/OpClassifier.html":{},"interfaces/OperationProperties.html":{},"classes/Pipe.html":{},"classes/Seed.html":{},"interfaces/TopologyDef.html":{}}}],["this.displaynames",{"_index":3243,"title":{},"body":{"components/OpsComponent.html":{}}}],["this.displaynames.filter(option",{"_index":3251,"title":{},"body":{"components/OpsComponent.html":{}}}],["this.displaynames.findindex(el",{"_index":3255,"title":{},"body":{"components/OpsComponent.html":{}}}],["this.div",{"_index":2788,"title":{},"body":{"components/MixerViewComponent.html":{}}}],["this.div.scrollleft",{"_index":2794,"title":{},"body":{"components/MixerViewComponent.html":{}}}],["this.div.scrolltop",{"_index":2795,"title":{},"body":{"components/MixerViewComponent.html":{}}}],["this.dm.selectdesignmode('drawdown",{"_index":2030,"title":{},"body":{"components/DraftdetailComponent.html":{}}}],["this.dm.selectdesignmode('loom",{"_index":2032,"title":{},"body":{"components/DraftdetailComponent.html":{}}}],["this.draft",{"_index":1582,"title":{},"body":{"interfaces/DesignActions.html":{},"interfaces/DraftOperationClassification.html":{},"components/DraftdetailComponent.html":{},"interfaces/LoomConfig.html":{},"classes/PedalConfig.html":{},"injectables/PlayerService.html":{},"classes/Shape-1.html":{}}}],["this.draft.id",{"_index":2672,"title":{},"body":{"directives/MarqueeComponent.html":{},"directives/SelectionComponent.html":{}}}],["this.draft.reload(draft",{"_index":2056,"title":{},"body":{"components/DraftdetailComponent.html":{}}}],["this.draft.wefts+20",{"_index":2034,"title":{},"body":{"components/DraftdetailComponent.html":{}}}],["this.draft_set",{"_index":4332,"title":{},"body":{"components/WeavingStateComponent.html":{}}}],["this.draftcanvas",{"_index":3659,"title":{},"body":{"components/PlayerComponent.html":{},"components/WeavingStateComponent.html":{}}}],["this.draftcanvas.getcontext(\"2d",{"_index":3661,"title":{},"body":{"components/PlayerComponent.html":{},"components/WeavingStateComponent.html":{}}}],["this.draftcanvas.height",{"_index":4331,"title":{},"body":{"components/WeavingStateComponent.html":{}}}],["this.draftcanvas.width",{"_index":4330,"title":{},"body":{"components/WeavingStateComponent.html":{}}}],["this.draftclassification.filter((c",{"_index":1890,"title":{},"body":{"interfaces/DraftOperationClassification.html":{},"interfaces/LoomConfig.html":{},"classes/PedalConfig.html":{},"injectables/PlayerService.html":{}}}],["this.draftclassification.push",{"_index":1857,"title":{},"body":{"interfaces/DraftOperationClassification.html":{},"interfaces/LoomConfig.html":{},"classes/PedalConfig.html":{},"injectables/PlayerService.html":{}}}],["this.draftparam",{"_index":3318,"title":{},"body":{"components/ParameterComponent.html":{}}}],["this.drawconnection",{"_index":784,"title":{},"body":{"components/ConnectionComponent.html":{}}}],["this.drawdraft",{"_index":3652,"title":{},"body":{"components/PlayerComponent.html":{},"components/WeavingStateComponent.html":{}}}],["this.drawdraft(draft",{"_index":1546,"title":{},"body":{"interfaces/DesignActions.html":{}}}],["this.drawdraft(this.draft",{"_index":1439,"title":{},"body":{"interfaces/DesignActions.html":{}}}],["this.drawdraft(value",{"_index":1350,"title":{},"body":{"interfaces/DesignActions.html":{}}}],["this.dv.redraw",{"_index":2058,"title":{},"body":{"components/DraftdetailComponent.html":{}}}],["this.dv.redraw({drawdown:true",{"_index":2057,"title":{},"body":{"components/DraftdetailComponent.html":{}}}],["this.dv.reposition(scrolltop",{"_index":2040,"title":{},"body":{"components/DraftdetailComponent.html":{}}}],["this.dx",{"_index":247,"title":{},"body":{"classes/AbstractOpFactory.html":{},"classes/BaseOp.html":{},"classes/Branch.html":{},"classes/Bus.html":{},"classes/Merge.html":{},"interfaces/OpClassifier.html":{},"interfaces/OperationProperties.html":{},"classes/Pipe.html":{},"classes/Seed.html":{},"interfaces/TopologyDef.html":{}}}],["this.dynamic",{"_index":2441,"title":{},"body":{"components/InletComponent.html":{}}}],["this.dynamic_param_id",{"_index":2979,"title":{},"body":{"components/OpHelpModal.html":{}}}],["this.dynamic_param_name",{"_index":2981,"title":{},"body":{"components/OpHelpModal.html":{}}}],["this.dynamic_type",{"_index":2978,"title":{},"body":{"components/OpHelpModal.html":{}}}],["this.emit('change",{"_index":1022,"title":{},"body":{"classes/DBListener.html":{},"classes/DBListenerArray.html":{},"classes/DBNode.html":{},"classes/DBNodeArray.html":{},"classes/DBTwoWay.html":{},"classes/DBTwoWayArray.html":{},"classes/DBWriteBuffer.html":{},"classes/DBWriter.html":{},"classes/DBWriterArray.html":{},"interfaces/NodeMethods.html":{},"interfaces/NodeParams.html":{},"classes/OnlineStatus.html":{}}}],["this.emit('child",{"_index":1097,"title":{},"body":{"classes/DBListener.html":{},"classes/DBListenerArray.html":{},"classes/DBNode.html":{},"classes/DBNodeArray.html":{},"classes/DBTwoWay.html":{},"classes/DBTwoWayArray.html":{},"classes/DBWriteBuffer.html":{},"classes/DBWriter.html":{},"classes/DBWriterArray.html":{},"interfaces/NodeMethods.html":{},"interfaces/NodeParams.html":{},"classes/OnlineStatus.html":{}}}],["this.emit('pedal",{"_index":3455,"title":{},"body":{"interfaces/Pedal.html":{},"classes/PedalStatus.html":{},"injectables/PedalsService.html":{}}}],["this.emit('ready",{"_index":1083,"title":{},"body":{"classes/DBListener.html":{},"classes/DBListenerArray.html":{},"classes/DBNode.html":{},"classes/DBNodeArray.html":{},"classes/DBTwoWay.html":{},"classes/DBTwoWayArray.html":{},"classes/DBWriteBuffer.html":{},"classes/DBWriter.html":{},"classes/DBWriterArray.html":{},"interfaces/NodeMethods.html":{},"interfaces/NodeParams.html":{},"classes/OnlineStatus.html":{}}}],["this.emit('set",{"_index":1173,"title":{},"body":{"classes/DBListener.html":{},"classes/DBListenerArray.html":{},"classes/DBNode.html":{},"classes/DBNodeArray.html":{},"classes/DBTwoWay.html":{},"classes/DBTwoWayArray.html":{},"classes/DBWriteBuffer.html":{},"classes/DBWriter.html":{},"classes/DBWriterArray.html":{},"interfaces/NodeMethods.html":{},"interfaces/NodeParams.html":{},"classes/OnlineStatus.html":{}}}],["this.end.j",{"_index":3880,"title":{},"body":{"classes/Selection.html":{}}}],["this.end.si",{"_index":3882,"title":{},"body":{"classes/Selection.html":{}}}],["this.endcol",{"_index":3990,"title":{},"body":{"classes/Shape.html":{}}}],["this.endlabel",{"_index":4099,"title":{},"body":{"classes/Shuttle.html":{}}}],["this.factor",{"_index":2781,"title":{},"body":{"components/MixerViewComponent.html":{}}}],["this.fc",{"_index":2449,"title":{},"body":{"components/InletComponent.html":{},"components/ParameterComponent.html":{}}}],["this.fc.setvalue(obj.data.name",{"_index":3324,"title":{},"body":{"components/ParameterComponent.html":{}}}],["this.fc.setvalue(value",{"_index":2466,"title":{},"body":{"components/InletComponent.html":{},"components/ParameterComponent.html":{}}}],["this.fileparam",{"_index":3313,"title":{},"body":{"components/ParameterComponent.html":{}}}],["this.filter((m",{"_index":2575,"title":{},"body":{"injectables/MappingsService.html":{}}}],["this.filteredoptions",{"_index":3245,"title":{},"body":{"components/OpsComponent.html":{}}}],["this.from",{"_index":741,"title":{},"body":{"components/ConnectionComponent.html":{}}}],["this.fs.saver.ada('draft",{"_index":1549,"title":{},"body":{"interfaces/DesignActions.html":{}}}],["this.fs.saver.bmp(b",{"_index":1538,"title":{},"body":{"interfaces/DesignActions.html":{}}}],["this.fs.saver.jpg(b",{"_index":1561,"title":{},"body":{"interfaces/DesignActions.html":{}}}],["this.fs.saver.wif(draft",{"_index":1557,"title":{},"body":{"interfaces/DesignActions.html":{}}}],["this.getink(this.getselected",{"_index":2339,"title":{},"body":{"interfaces/Ink.html":{},"injectables/InkService.html":{}}}],["this.getmap(dst",{"_index":2605,"title":{},"body":{"injectables/MappingsService.html":{}}}],["this.getmap(id",{"_index":2647,"title":{},"body":{"injectables/MappingsService.html":{}}}],["this.getmap(id)).op",{"_index":2634,"title":{},"body":{"injectables/MappingsService.html":{}}}],["this.getmap(id)).ops",{"_index":2632,"title":{},"body":{"injectables/MappingsService.html":{}}}],["this.getmap(p",{"_index":2583,"title":{},"body":{"injectables/MappingsService.html":{}}}],["this.getmap[p",{"_index":2600,"title":{},"body":{"injectables/MappingsService.html":{}}}],["this.getmatrix(overlay",{"_index":2822,"title":{},"body":{"components/MixerViewComponent.html":{}}}],["this.getoffset(type+\"_x",{"_index":3826,"title":{},"body":{"classes/Render.html":{}}}],["this.getoffset(type+\"_y",{"_index":3827,"title":{},"body":{"classes/Render.html":{}}}],["this.getop(opname",{"_index":2629,"title":{},"body":{"injectables/MappingsService.html":{}}}],["this.hascustomstructure(d",{"_index":1900,"title":{},"body":{"interfaces/DraftOperationClassification.html":{},"interfaces/LoomConfig.html":{},"classes/PedalConfig.html":{},"injectables/PlayerService.html":{}}}],["this.height",{"_index":2779,"title":{},"body":{"components/MixerViewComponent.html":{},"classes/Selection.html":{},"classes/Shape.html":{}}}],["this.id",{"_index":775,"title":{},"body":{"components/ConnectionComponent.html":{},"classes/DBListener.html":{},"classes/DBListenerArray.html":{},"classes/DBNode.html":{},"classes/DBNodeArray.html":{},"classes/DBTwoWay.html":{},"classes/DBTwoWayArray.html":{},"classes/DBWriteBuffer.html":{},"classes/DBWriter.html":{},"classes/DBWriterArray.html":{},"interfaces/DesignActions.html":{},"components/DraftdetailComponent.html":{},"interfaces/NodeMethods.html":{},"interfaces/NodeParams.html":{},"components/NoteComponent.html":{},"classes/OnlineStatus.html":{},"classes/Shape.html":{},"classes/Shuttle.html":{},"classes/System.html":{}}}],["this.id.tostring",{"_index":750,"title":{},"body":{"components/ConnectionComponent.html":{},"interfaces/DesignActions.html":{}}}],["this.image",{"_index":4097,"title":{},"body":{"classes/Shuttle.html":{}}}],["this.img_data",{"_index":4030,"title":{},"body":{"classes/Shape-1.html":{}}}],["this.in_use",{"_index":4148,"title":{},"body":{"classes/System.html":{}}}],["this.index",{"_index":2574,"title":{},"body":{"injectables/MappingsService.html":{}}}],["this.index[\"pairing",{"_index":2643,"title":{},"body":{"injectables/MappingsService.html":{}}}],["this.index[\"roulette\"].concat(this.index[\"chain",{"_index":2642,"title":{},"body":{"injectables/MappingsService.html":{}}}],["this.index[m.type].splice(m.i",{"_index":2622,"title":{},"body":{"injectables/MappingsService.html":{}}}],["this.index[type].push(m",{"_index":2611,"title":{},"body":{"injectables/MappingsService.html":{}}}],["this.index[x.type][x.i",{"_index":2598,"title":{},"body":{"injectables/MappingsService.html":{}}}],["this.ink",{"_index":2024,"title":{},"body":{"components/DraftdetailComponent.html":{}}}],["this.inks",{"_index":2305,"title":{},"body":{"interfaces/Ink.html":{},"injectables/InkService.html":{}}}],["this.inks.foreach",{"_index":2345,"title":{},"body":{"interfaces/Ink.html":{},"injectables/InkService.html":{}}}],["this.inks.foreach(ink",{"_index":2357,"title":{},"body":{"interfaces/Ink.html":{},"injectables/InkService.html":{}}}],["this.inks.getink(this.ink).viewvalue",{"_index":1574,"title":{},"body":{"interfaces/DesignActions.html":{}}}],["this.inlet",{"_index":2443,"title":{},"body":{"components/InletComponent.html":{}}}],["this.inletid",{"_index":2459,"title":{},"body":{"components/InletComponent.html":{}}}],["this.inlets",{"_index":254,"title":{},"body":{"classes/AbstractOpFactory.html":{},"classes/BaseOp.html":{},"classes/Branch.html":{},"classes/Bus.html":{},"classes/Merge.html":{},"interfaces/OpClassifier.html":{},"interfaces/OperationProperties.html":{},"classes/Pipe.html":{},"classes/Seed.html":{},"interfaces/TopologyDef.html":{}}}],["this.insert",{"_index":4086,"title":{},"body":{"classes/Shuttle.html":{}}}],["this.interlacement",{"_index":1426,"title":{},"body":{"interfaces/DesignActions.html":{}}}],["this.interlacement.i",{"_index":1470,"title":{},"body":{"interfaces/DesignActions.html":{}}}],["this.interlacement.j",{"_index":1469,"title":{},"body":{"interfaces/DesignActions.html":{}}}],["this.interpolate({max",{"_index":3831,"title":{},"body":{"classes/Render.html":{}}}],["this.is_dynamic_op",{"_index":2975,"title":{},"body":{"components/OpHelpModal.html":{}}}],["this.is_set",{"_index":410,"title":{},"body":{"classes/Cell.html":{}}}],["this.is_up",{"_index":411,"title":{},"body":{"classes/Cell.html":{}}}],["this.length",{"_index":1104,"title":{},"body":{"classes/DBListener.html":{},"classes/DBListenerArray.html":{},"classes/DBNode.html":{},"classes/DBNodeArray.html":{},"classes/DBTwoWay.html":{},"classes/DBTwoWayArray.html":{},"classes/DBWriteBuffer.html":{},"classes/DBWriter.html":{},"classes/DBWriterArray.html":{},"interfaces/NodeMethods.html":{},"interfaces/NodeParams.html":{},"classes/OnlineStatus.html":{}}}],["this.lengthnode",{"_index":1053,"title":{},"body":{"classes/DBListener.html":{},"classes/DBListenerArray.html":{},"classes/DBNode.html":{},"classes/DBNodeArray.html":{},"classes/DBTwoWay.html":{},"classes/DBTwoWayArray.html":{},"classes/DBWriteBuffer.html":{},"classes/DBWriter.html":{},"classes/DBWriterArray.html":{},"interfaces/NodeMethods.html":{},"interfaces/NodeParams.html":{},"classes/OnlineStatus.html":{}}}],["this.lengthnode.active",{"_index":1058,"title":{},"body":{"classes/DBListener.html":{},"classes/DBListenerArray.html":{},"classes/DBNode.html":{},"classes/DBNodeArray.html":{},"classes/DBTwoWay.html":{},"classes/DBTwoWayArray.html":{},"classes/DBWriteBuffer.html":{},"classes/DBWriter.html":{},"classes/DBWriterArray.html":{},"interfaces/NodeMethods.html":{},"interfaces/NodeParams.html":{},"classes/OnlineStatus.html":{}}}],["this.lengthnode.attach",{"_index":1081,"title":{},"body":{"classes/DBListener.html":{},"classes/DBListenerArray.html":{},"classes/DBNode.html":{},"classes/DBNodeArray.html":{},"classes/DBTwoWay.html":{},"classes/DBTwoWayArray.html":{},"classes/DBWriteBuffer.html":{},"classes/DBWriter.html":{},"classes/DBWriterArray.html":{},"interfaces/NodeMethods.html":{},"interfaces/NodeParams.html":{},"classes/OnlineStatus.html":{}}}],["this.lengthnode.on('change",{"_index":1082,"title":{},"body":{"classes/DBListener.html":{},"classes/DBListenerArray.html":{},"classes/DBNode.html":{},"classes/DBNodeArray.html":{},"classes/DBTwoWay.html":{},"classes/DBTwoWayArray.html":{},"classes/DBWriteBuffer.html":{},"classes/DBWriter.html":{},"classes/DBWriterArray.html":{},"interfaces/NodeMethods.html":{},"interfaces/NodeParams.html":{},"classes/OnlineStatus.html":{}}}],["this.lengthnode.setval(0",{"_index":1132,"title":{},"body":{"classes/DBListener.html":{},"classes/DBListenerArray.html":{},"classes/DBNode.html":{},"classes/DBNodeArray.html":{},"classes/DBTwoWay.html":{},"classes/DBTwoWayArray.html":{},"classes/DBWriteBuffer.html":{},"classes/DBWriter.html":{},"classes/DBWriterArray.html":{},"interfaces/NodeMethods.html":{},"interfaces/NodeParams.html":{},"classes/OnlineStatus.html":{}}}],["this.lengthnode.setval(this.length",{"_index":1107,"title":{},"body":{"classes/DBListener.html":{},"classes/DBListenerArray.html":{},"classes/DBNode.html":{},"classes/DBNodeArray.html":{},"classes/DBTwoWay.html":{},"classes/DBTwoWayArray.html":{},"classes/DBWriteBuffer.html":{},"classes/DBWriter.html":{},"classes/DBWriterArray.html":{},"interfaces/NodeMethods.html":{},"interfaces/NodeParams.html":{},"classes/OnlineStatus.html":{}}}],["this.lengthnode.val",{"_index":1061,"title":{},"body":{"classes/DBListener.html":{},"classes/DBListenerArray.html":{},"classes/DBNode.html":{},"classes/DBNodeArray.html":{},"classes/DBTwoWay.html":{},"classes/DBTwoWayArray.html":{},"classes/DBWriteBuffer.html":{},"classes/DBWriter.html":{},"classes/DBWriterArray.html":{},"interfaces/NodeMethods.html":{},"interfaces/NodeParams.html":{},"classes/OnlineStatus.html":{}}}],["this.local_view",{"_index":2770,"title":{},"body":{"components/MixerViewComponent.html":{}}}],["this.local_view.topleft",{"_index":2793,"title":{},"body":{"components/MixerViewComponent.html":{}}}],["this.local_view.topleft.x",{"_index":2801,"title":{},"body":{"components/MixerViewComponent.html":{}}}],["this.local_view.topleft.y",{"_index":2802,"title":{},"body":{"components/MixerViewComponent.html":{}}}],["this.loom",{"_index":1810,"title":{},"body":{"interfaces/DraftOperationClassification.html":{},"components/DraftdetailComponent.html":{},"interfaces/LoomConfig.html":{},"classes/PedalConfig.html":{},"injectables/PlayerService.html":{}}}],["this.loom.drafttiling",{"_index":1937,"title":{},"body":{"interfaces/DraftOperationClassification.html":{},"interfaces/LoomConfig.html":{},"classes/PedalConfig.html":{},"injectables/PlayerService.html":{}}}],["this.loom.warps",{"_index":1938,"title":{},"body":{"interfaces/DraftOperationClassification.html":{},"interfaces/LoomConfig.html":{},"classes/PedalConfig.html":{},"injectables/PlayerService.html":{}}}],["this.loom_online",{"_index":3397,"title":{},"body":{"interfaces/Pedal.html":{},"classes/PedalStatus.html":{},"injectables/PedalsService.html":{}}}],["this.loom_online.attach",{"_index":3439,"title":{},"body":{"interfaces/Pedal.html":{},"classes/PedalStatus.html":{},"injectables/PedalsService.html":{}}}],["this.loom_online.on('change",{"_index":3446,"title":{},"body":{"interfaces/Pedal.html":{},"classes/PedalStatus.html":{},"injectables/PedalsService.html":{}}}],["this.loom_online.val",{"_index":3422,"title":{},"body":{"interfaces/Pedal.html":{},"classes/PedalStatus.html":{},"injectables/PedalsService.html":{}}}],["this.loom_ready.on('change",{"_index":3465,"title":{},"body":{"interfaces/Pedal.html":{},"classes/PedalStatus.html":{},"injectables/PedalsService.html":{}}}],["this.loom_settings",{"_index":1430,"title":{},"body":{"interfaces/DesignActions.html":{},"components/DraftdetailComponent.html":{}}}],["this.loom_settings.epi",{"_index":2068,"title":{},"body":{"components/DraftdetailComponent.html":{}}}],["this.loomlisteners(state",{"_index":3447,"title":{},"body":{"interfaces/Pedal.html":{},"classes/PedalStatus.html":{},"injectables/PedalsService.html":{}}}],["this.loompedals(false",{"_index":3441,"title":{},"body":{"interfaces/Pedal.html":{},"classes/PedalStatus.html":{},"injectables/PedalsService.html":{}}}],["this.loompedals(state",{"_index":3445,"title":{},"body":{"interfaces/Pedal.html":{},"classes/PedalStatus.html":{},"injectables/PedalsService.html":{}}}],["this.mappedal(fwd_pedal",{"_index":473,"title":{},"body":{"interfaces/ChainIndex.html":{},"injectables/SequencerService.html":{}}}],["this.mappedal(select_pedal_a",{"_index":475,"title":{},"body":{"interfaces/ChainIndex.html":{},"injectables/SequencerService.html":{}}}],["this.mappedal(select_pedal_b",{"_index":478,"title":{},"body":{"interfaces/ChainIndex.html":{},"injectables/SequencerService.html":{}}}],["this.mapping",{"_index":1730,"title":{},"body":{"interfaces/DraftOperationClassification.html":{},"interfaces/LoomConfig.html":{},"classes/PedalConfig.html":{},"injectables/PlayerService.html":{}}}],["this.mapping.filter((m",{"_index":1776,"title":{},"body":{"interfaces/DraftOperationClassification.html":{},"interfaces/LoomConfig.html":{},"classes/PedalConfig.html":{},"injectables/PlayerService.html":{}}}],["this.mapping[id",{"_index":1779,"title":{},"body":{"interfaces/DraftOperationClassification.html":{},"interfaces/LoomConfig.html":{},"classes/PedalConfig.html":{},"injectables/PlayerService.html":{}}}],["this.mapping[id].name.startswith('ch",{"_index":1782,"title":{},"body":{"interfaces/DraftOperationClassification.html":{},"interfaces/LoomConfig.html":{},"classes/PedalConfig.html":{},"injectables/PlayerService.html":{}}}],["this.mapping[pedalid",{"_index":1750,"title":{},"body":{"interfaces/DraftOperationClassification.html":{},"interfaces/LoomConfig.html":{},"classes/PedalConfig.html":{},"injectables/PlayerService.html":{}}}],["this.mapping[pedalid]).op",{"_index":1762,"title":{},"body":{"interfaces/DraftOperationClassification.html":{},"interfaces/LoomConfig.html":{},"classes/PedalConfig.html":{},"injectables/PlayerService.html":{}}}],["this.mapping[pedalid]).ops",{"_index":1757,"title":{},"body":{"interfaces/DraftOperationClassification.html":{},"interfaces/LoomConfig.html":{},"classes/PedalConfig.html":{},"injectables/PlayerService.html":{}}}],["this.mappings",{"_index":1919,"title":{},"body":{"interfaces/DraftOperationClassification.html":{},"interfaces/LoomConfig.html":{},"classes/PedalConfig.html":{},"injectables/PlayerService.html":{}}}],["this.mappings.addoperation(op",{"_index":1905,"title":{},"body":{"interfaces/DraftOperationClassification.html":{},"interfaces/LoomConfig.html":{},"classes/PedalConfig.html":{},"injectables/PlayerService.html":{}}}],["this.mappings.getmap(id",{"_index":1922,"title":{},"body":{"interfaces/DraftOperationClassification.html":{},"interfaces/LoomConfig.html":{},"classes/PedalConfig.html":{},"injectables/PlayerService.html":{}}}],["this.mappings.opismapped('forward",{"_index":1885,"title":{},"body":{"interfaces/DraftOperationClassification.html":{},"interfaces/LoomConfig.html":{},"classes/PedalConfig.html":{},"injectables/PlayerService.html":{}}}],["this.mappings.opismapped('reverse",{"_index":1886,"title":{},"body":{"interfaces/DraftOperationClassification.html":{},"interfaces/LoomConfig.html":{},"classes/PedalConfig.html":{},"injectables/PlayerService.html":{}}}],["this.mappings.pair(p.id",{"_index":1917,"title":{},"body":{"interfaces/DraftOperationClassification.html":{},"interfaces/LoomConfig.html":{},"classes/PedalConfig.html":{},"injectables/PlayerService.html":{}}}],["this.mappings.pedalispaired(p.id",{"_index":1915,"title":{},"body":{"interfaces/DraftOperationClassification.html":{},"interfaces/LoomConfig.html":{},"classes/PedalConfig.html":{},"injectables/PlayerService.html":{}}}],["this.mappings.unmap(p.id",{"_index":1916,"title":{},"body":{"interfaces/DraftOperationClassification.html":{},"interfaces/LoomConfig.html":{},"classes/PedalConfig.html":{},"injectables/PlayerService.html":{}}}],["this.max_inputs",{"_index":259,"title":{},"body":{"classes/AbstractOpFactory.html":{},"classes/BaseOp.html":{},"classes/Branch.html":{},"classes/Bus.html":{},"classes/Merge.html":{},"interfaces/OpClassifier.html":{},"interfaces/OperationProperties.html":{},"classes/Pipe.html":{},"classes/Seed.html":{},"interfaces/TopologyDef.html":{}}}],["this.message",{"_index":4118,"title":{},"body":{"components/SnackbarComponent.html":{}}}],["this.mixercontainer",{"_index":3655,"title":{},"body":{"components/PlayerComponent.html":{}}}],["this.mixercontainer.style.height",{"_index":3673,"title":{},"body":{"components/PlayerComponent.html":{}}}],["this.mixerelement",{"_index":4326,"title":{},"body":{"components/WeavingStateComponent.html":{}}}],["this.modal",{"_index":1570,"title":{},"body":{"interfaces/DesignActions.html":{}}}],["this.modal.afterclosed().subscribe(result",{"_index":1575,"title":{},"body":{"interfaces/DesignActions.html":{}}}],["this.modal.componentinstance",{"_index":1569,"title":{},"body":{"interfaces/DesignActions.html":{}}}],["this.modal_height",{"_index":2033,"title":{},"body":{"components/DraftdetailComponent.html":{}}}],["this.mycontrol.valuechanges.pipe",{"_index":3246,"title":{},"body":{"components/OpsComponent.html":{}}}],["this.name",{"_index":243,"title":{},"body":{"classes/AbstractOpFactory.html":{},"classes/BaseOp.html":{},"classes/Branch.html":{},"classes/Bus.html":{},"classes/Merge.html":{},"interfaces/OpClassifier.html":{},"components/OpHelpModal.html":{},"classes/OpSequencer.html":{},"interfaces/OperationProperties.html":{},"classes/Pipe.html":{},"classes/Seed.html":{},"classes/Shape.html":{},"classes/Shuttle.html":{},"classes/System.html":{},"interfaces/TopologyDef.html":{}}}],["this.no_draw",{"_index":745,"title":{},"body":{"components/ConnectionComponent.html":{}}}],["this.nodeat(this.length",{"_index":1152,"title":{},"body":{"classes/DBListener.html":{},"classes/DBListenerArray.html":{},"classes/DBNode.html":{},"classes/DBNodeArray.html":{},"classes/DBTwoWay.html":{},"classes/DBTwoWayArray.html":{},"classes/DBWriteBuffer.html":{},"classes/DBWriter.html":{},"classes/DBWriterArray.html":{},"interfaces/NodeMethods.html":{},"interfaces/NodeParams.html":{},"classes/OnlineStatus.html":{}}}],["this.nodes",{"_index":1055,"title":{},"body":{"classes/DBListener.html":{},"classes/DBListenerArray.html":{},"classes/DBNode.html":{},"classes/DBNodeArray.html":{},"classes/DBTwoWay.html":{},"classes/DBTwoWayArray.html":{},"classes/DBWriteBuffer.html":{},"classes/DBWriter.html":{},"classes/DBWriterArray.html":{},"interfaces/NodeMethods.html":{},"interfaces/NodeParams.html":{},"classes/OnlineStatus.html":{}}}],["this.nodes.length",{"_index":1057,"title":{},"body":{"classes/DBListener.html":{},"classes/DBListenerArray.html":{},"classes/DBNode.html":{},"classes/DBNodeArray.html":{},"classes/DBTwoWay.html":{},"classes/DBTwoWayArray.html":{},"classes/DBWriteBuffer.html":{},"classes/DBWriter.html":{},"classes/DBWriterArray.html":{},"interfaces/NodeMethods.html":{},"interfaces/NodeParams.html":{},"classes/OnlineStatus.html":{}}}],["this.nodes.pop",{"_index":1071,"title":{},"body":{"classes/DBListener.html":{},"classes/DBListenerArray.html":{},"classes/DBNode.html":{},"classes/DBNodeArray.html":{},"classes/DBTwoWay.html":{},"classes/DBTwoWayArray.html":{},"classes/DBWriteBuffer.html":{},"classes/DBWriter.html":{},"classes/DBWriterArray.html":{},"interfaces/NodeMethods.html":{},"interfaces/NodeParams.html":{},"classes/OnlineStatus.html":{}}}],["this.nodes.push(n",{"_index":1069,"title":{},"body":{"classes/DBListener.html":{},"classes/DBListenerArray.html":{},"classes/DBNode.html":{},"classes/DBNodeArray.html":{},"classes/DBTwoWay.html":{},"classes/DBTwoWayArray.html":{},"classes/DBWriteBuffer.html":{},"classes/DBWriter.html":{},"classes/DBWriterArray.html":{},"interfaces/NodeMethods.html":{},"interfaces/NodeParams.html":{},"classes/OnlineStatus.html":{}}}],["this.nodes[i].setval(x",{"_index":1140,"title":{},"body":{"classes/DBListener.html":{},"classes/DBListenerArray.html":{},"classes/DBNode.html":{},"classes/DBNodeArray.html":{},"classes/DBTwoWay.html":{},"classes/DBTwoWayArray.html":{},"classes/DBWriteBuffer.html":{},"classes/DBWriter.html":{},"classes/DBWriterArray.html":{},"interfaces/NodeMethods.html":{},"interfaces/NodeParams.html":{},"classes/OnlineStatus.html":{}}}],["this.nodes[n",{"_index":1067,"title":{},"body":{"classes/DBListener.html":{},"classes/DBListenerArray.html":{},"classes/DBNode.html":{},"classes/DBNodeArray.html":{},"classes/DBTwoWay.html":{},"classes/DBTwoWayArray.html":{},"classes/DBWriteBuffer.html":{},"classes/DBWriter.html":{},"classes/DBWriterArray.html":{},"interfaces/NodeMethods.html":{},"interfaces/NodeParams.html":{},"classes/OnlineStatus.html":{}}}],["this.nodetopedal(newnode",{"_index":3471,"title":{},"body":{"interfaces/Pedal.html":{},"classes/PedalStatus.html":{},"injectables/PedalsService.html":{}}}],["this.note",{"_index":2895,"title":{},"body":{"components/NoteComponent.html":{}}}],["this.note.id",{"_index":2917,"title":{},"body":{"components/NoteComponent.html":{}}}],["this.note.id.tostring",{"_index":2904,"title":{},"body":{"components/NoteComponent.html":{}}}],["this.note.interlacement",{"_index":2913,"title":{},"body":{"components/NoteComponent.html":{}}}],["this.note.interlacement.i",{"_index":2902,"title":{},"body":{"components/NoteComponent.html":{}}}],["this.note.interlacement.j",{"_index":2901,"title":{},"body":{"components/NoteComponent.html":{}}}],["this.notes",{"_index":4091,"title":{},"body":{"classes/Shuttle.html":{},"classes/System.html":{}}}],["this.notes.get(this.id",{"_index":2896,"title":{},"body":{"components/NoteComponent.html":{}}}],["this.notes.notes",{"_index":2900,"title":{},"body":{"components/NoteComponent.html":{}}}],["this.num_pedals.val",{"_index":3426,"title":{},"body":{"interfaces/Pedal.html":{},"classes/PedalStatus.html":{},"injectables/PedalsService.html":{}}}],["this.num_v_pedals",{"_index":3415,"title":{},"body":{"interfaces/Pedal.html":{},"classes/PedalStatus.html":{},"injectables/PedalsService.html":{}}}],["this.number_opts",{"_index":2439,"title":{},"body":{"components/InletComponent.html":{}}}],["this.numparam",{"_index":3308,"title":{},"body":{"components/ParameterComponent.html":{}}}],["this.objs",{"_index":4236,"title":{},"body":{"injectables/ViewportService.html":{}}}],["this.objs.filter(el",{"_index":4239,"title":{},"body":{"injectables/ViewportService.html":{}}}],["this.objs.map(el",{"_index":4242,"title":{},"body":{"injectables/ViewportService.html":{}}}],["this.objs.push({id",{"_index":4237,"title":{},"body":{"injectables/ViewportService.html":{}}}],["this.onconnectionremoved.emit({from",{"_index":2457,"title":{},"body":{"components/InletComponent.html":{}}}],["this.ondesignaction.emit({id",{"_index":1599,"title":{},"body":{"interfaces/DesignActions.html":{}}}],["this.ondrafttoplayer.emit(this._draft",{"_index":1447,"title":{},"body":{"interfaces/DesignActions.html":{}}}],["this.onfileupload.emit({id",{"_index":3327,"title":{},"body":{"components/ParameterComponent.html":{}}}],["this.oninletchange.emit({id",{"_index":2468,"title":{},"body":{"components/InletComponent.html":{}}}],["this.oninputselected.emit(this.inletid",{"_index":2456,"title":{},"body":{"components/InletComponent.html":{}}}],["this.onnamechange.emit(this.id",{"_index":1449,"title":{},"body":{"interfaces/DesignActions.html":{}}}],["this.onnodeadded(snapshot.key",{"_index":1155,"title":{},"body":{"classes/DBListener.html":{},"classes/DBListenerArray.html":{},"classes/DBNode.html":{},"classes/DBNodeArray.html":{},"classes/DBTwoWay.html":{},"classes/DBTwoWayArray.html":{},"classes/DBWriteBuffer.html":{},"classes/DBWriter.html":{},"classes/DBWriterArray.html":{},"interfaces/NodeMethods.html":{},"interfaces/NodeParams.html":{},"classes/OnlineStatus.html":{}}}],["this.onnoderemoved",{"_index":1156,"title":{},"body":{"classes/DBListener.html":{},"classes/DBListenerArray.html":{},"classes/DBNode.html":{},"classes/DBNodeArray.html":{},"classes/DBTwoWay.html":{},"classes/DBTwoWayArray.html":{},"classes/DBWriteBuffer.html":{},"classes/DBWriter.html":{},"classes/DBWriterArray.html":{},"interfaces/NodeMethods.html":{},"interfaces/NodeParams.html":{},"classes/OnlineStatus.html":{}}}],["this.onoperationadded.emit(name",{"_index":3253,"title":{},"body":{"components/OpsComponent.html":{}}}],["this.onoperationadded.emit(this.opnames[ndx",{"_index":3257,"title":{},"body":{"components/OpsComponent.html":{}}}],["this.onoperationparamchange.emit({id",{"_index":3321,"title":{},"body":{"components/ParameterComponent.html":{}}}],["this.onpedal(id",{"_index":1873,"title":{},"body":{"interfaces/DraftOperationClassification.html":{},"interfaces/LoomConfig.html":{},"classes/PedalConfig.html":{},"injectables/PlayerService.html":{}}}],["this.onsave",{"_index":2050,"title":{},"body":{"components/DraftdetailComponent.html":{}}}],["this.onviewportmove.emit(adjusted",{"_index":2803,"title":{},"body":{"components/MixerViewComponent.html":{}}}],["this.onwindowscroll(data",{"_index":2022,"title":{},"body":{"components/DraftdetailComponent.html":{}}}],["this.onzoomchange.emit(e",{"_index":2799,"title":{},"body":{"components/MixerViewComponent.html":{}}}],["this.open",{"_index":3665,"title":{},"body":{"components/PlayerComponent.html":{}}}],["this.opid",{"_index":2458,"title":{},"body":{"components/InletComponent.html":{}}}],["this.opispaired(name",{"_index":1792,"title":{},"body":{"interfaces/DraftOperationClassification.html":{},"interfaces/LoomConfig.html":{},"classes/PedalConfig.html":{},"injectables/PlayerService.html":{}}}],["this.opnames",{"_index":3241,"title":{},"body":{"components/OpsComponent.html":{}}}],["this.opnode",{"_index":2431,"title":{},"body":{"components/InletComponent.html":{},"components/ParameterComponent.html":{}}}],["this.opnode.inlets[this.inletid",{"_index":2445,"title":{},"body":{"components/InletComponent.html":{}}}],["this.opnode.params[this.paramid",{"_index":3325,"title":{},"body":{"components/ParameterComponent.html":{}}}],["this.ops",{"_index":1726,"title":{},"body":{"interfaces/DraftOperationClassification.html":{},"interfaces/LoomConfig.html":{},"injectables/MappingsService.html":{},"classes/OpSequencer.html":{},"classes/PedalConfig.html":{},"injectables/PlayerService.html":{}}}],["this.ops.filter((op",{"_index":2645,"title":{},"body":{"injectables/MappingsService.html":{}}}],["this.ops.filter(op",{"_index":2582,"title":{},"body":{"injectables/MappingsService.html":{}}}],["this.ops.findindex((op",{"_index":1747,"title":{},"body":{"interfaces/DraftOperationClassification.html":{},"interfaces/LoomConfig.html":{},"classes/PedalConfig.html":{},"injectables/PlayerService.html":{}}}],["this.ops.getop(data.op.name",{"_index":2973,"title":{},"body":{"components/OpHelpModal.html":{}}}],["this.ops.getop(e).perform([this.draft",{"_index":2054,"title":{},"body":{"components/DraftdetailComponent.html":{}}}],["this.ops.getop(this.opnode.name",{"_index":2438,"title":{},"body":{"components/InletComponent.html":{}}}],["this.ops.isdynamic(this.name",{"_index":2976,"title":{},"body":{"components/OpHelpModal.html":{}}}],["this.ops.length",{"_index":491,"title":{},"body":{"interfaces/ChainIndex.html":{},"interfaces/DraftOperationClassification.html":{},"interfaces/LoomConfig.html":{},"injectables/MappingsService.html":{},"classes/OpSequencer.html":{},"classes/PedalConfig.html":{},"injectables/PlayerService.html":{},"injectables/SequencerService.html":{}}}],["this.ops.ops.concat(this.ops.dynamic_ops",{"_index":3240,"title":{},"body":{"components/OpsComponent.html":{}}}],["this.ops.push(o",{"_index":1742,"title":{},"body":{"interfaces/DraftOperationClassification.html":{},"interfaces/LoomConfig.html":{},"injectables/MappingsService.html":{},"classes/OpSequencer.html":{},"classes/PedalConfig.html":{},"injectables/PlayerService.html":{}}}],["this.ops[this._pos",{"_index":3061,"title":{},"body":{"classes/OpSequencer.html":{}}}],["this.ops[this.chains[ch_id].pos",{"_index":509,"title":{},"body":{"interfaces/ChainIndex.html":{},"injectables/SequencerService.html":{}}}],["this.ops[this.ops.findindex((op",{"_index":1754,"title":{},"body":{"interfaces/DraftOperationClassification.html":{},"interfaces/LoomConfig.html":{},"injectables/MappingsService.html":{},"classes/PedalConfig.html":{},"injectables/PlayerService.html":{}}}],["this.orientation_x",{"_index":802,"title":{},"body":{"components/ConnectionComponent.html":{}}}],["this.orientation_y",{"_index":803,"title":{},"body":{"components/ConnectionComponent.html":{}}}],["this.oss.getop('germanify",{"_index":1870,"title":{},"body":{"interfaces/DraftOperationClassification.html":{},"interfaces/LoomConfig.html":{},"classes/PedalConfig.html":{},"injectables/PlayerService.html":{}}}],["this.oss.getop('tabby",{"_index":3649,"title":{},"body":{"components/PlayerComponent.html":{}}}],["this.owncontainer",{"_index":3653,"title":{},"body":{"components/PlayerComponent.html":{}}}],["this.owncontainer.style.height",{"_index":3674,"title":{},"body":{"components/PlayerComponent.html":{}}}],["this.owncontainer.style.overflow",{"_index":3678,"title":{},"body":{"components/PlayerComponent.html":{}}}],["this.ownelement",{"_index":4324,"title":{},"body":{"components/WeavingStateComponent.html":{}}}],["this.p_pedal_array.attach",{"_index":3495,"title":{},"body":{"interfaces/Pedal.html":{},"classes/PedalStatus.html":{},"injectables/PedalsService.html":{}}}],["this.p_pedal_array.detach",{"_index":3496,"title":{},"body":{"interfaces/Pedal.html":{},"classes/PedalStatus.html":{},"injectables/PedalsService.html":{}}}],["this.p_pedal_array.on('child",{"_index":3450,"title":{},"body":{"interfaces/Pedal.html":{},"classes/PedalStatus.html":{},"injectables/PedalsService.html":{}}}],["this.p_pedal_array.on('ready",{"_index":3448,"title":{},"body":{"interfaces/Pedal.html":{},"classes/PedalStatus.html":{},"injectables/PedalsService.html":{}}}],["this.p_pedal_array.ready",{"_index":3492,"title":{},"body":{"interfaces/Pedal.html":{},"classes/PedalStatus.html":{},"injectables/PedalsService.html":{}}}],["this.p_pedals.concat(this.v_pedals",{"_index":3431,"title":{},"body":{"interfaces/Pedal.html":{},"classes/PedalStatus.html":{},"injectables/PedalsService.html":{}}}],["this.p_pedals.length",{"_index":3456,"title":{},"body":{"interfaces/Pedal.html":{},"classes/PedalStatus.html":{},"injectables/PedalsService.html":{}}}],["this.p_pedals.pop",{"_index":3457,"title":{},"body":{"interfaces/Pedal.html":{},"classes/PedalStatus.html":{},"injectables/PedalsService.html":{}}}],["this.p_pedals.push(this.nodetopedal(newnode",{"_index":3453,"title":{},"body":{"interfaces/Pedal.html":{},"classes/PedalStatus.html":{},"injectables/PedalsService.html":{}}}],["this.p_pedals[e.id].state",{"_index":3458,"title":{},"body":{"interfaces/Pedal.html":{},"classes/PedalStatus.html":{},"injectables/PedalsService.html":{}}}],["this.p_prog",{"_index":3055,"title":{},"body":{"classes/OpSequencer.html":{}}}],["this.p_select_a",{"_index":494,"title":{},"body":{"interfaces/ChainIndex.html":{},"classes/OpSequencer.html":{},"injectables/SequencerService.html":{}}}],["this.p_select_b",{"_index":3059,"title":{},"body":{"classes/OpSequencer.html":{}}}],["this.pairs[id",{"_index":1787,"title":{},"body":{"interfaces/DraftOperationClassification.html":{},"interfaces/LoomConfig.html":{},"injectables/MappingsService.html":{},"classes/PedalConfig.html":{},"injectables/PlayerService.html":{}}}],["this.param",{"_index":3309,"title":{},"body":{"components/ParameterComponent.html":{}}}],["this.paramid",{"_index":3322,"title":{},"body":{"components/ParameterComponent.html":{}}}],["this.params",{"_index":252,"title":{},"body":{"classes/AbstractOpFactory.html":{},"classes/BaseOp.html":{},"classes/Branch.html":{},"classes/Bus.html":{},"classes/Merge.html":{},"interfaces/OpClassifier.html":{},"components/OpHelpModal.html":{},"interfaces/OperationProperties.html":{},"classes/Pipe.html":{},"classes/Seed.html":{},"interfaces/TopologyDef.html":{}}}],["this.params[this.dynamic_param_id].name",{"_index":2982,"title":{},"body":{"components/OpHelpModal.html":{}}}],["this.parent_id",{"_index":1416,"title":{},"body":{"interfaces/DesignActions.html":{}}}],["this.parentnode",{"_index":1054,"title":{},"body":{"classes/DBListener.html":{},"classes/DBListenerArray.html":{},"classes/DBNode.html":{},"classes/DBNodeArray.html":{},"classes/DBTwoWay.html":{},"classes/DBTwoWayArray.html":{},"classes/DBWriteBuffer.html":{},"classes/DBWriter.html":{},"classes/DBWriterArray.html":{},"interfaces/NodeMethods.html":{},"interfaces/NodeParams.html":{},"classes/OnlineStatus.html":{}}}],["this.parentnode.active",{"_index":1059,"title":{},"body":{"classes/DBListener.html":{},"classes/DBListenerArray.html":{},"classes/DBNode.html":{},"classes/DBNodeArray.html":{},"classes/DBTwoWay.html":{},"classes/DBTwoWayArray.html":{},"classes/DBWriteBuffer.html":{},"classes/DBWriter.html":{},"classes/DBWriterArray.html":{},"interfaces/NodeMethods.html":{},"interfaces/NodeParams.html":{},"classes/OnlineStatus.html":{}}}],["this.parentnode.attach",{"_index":1085,"title":{},"body":{"classes/DBListener.html":{},"classes/DBListenerArray.html":{},"classes/DBNode.html":{},"classes/DBNodeArray.html":{},"classes/DBTwoWay.html":{},"classes/DBTwoWayArray.html":{},"classes/DBWriteBuffer.html":{},"classes/DBWriter.html":{},"classes/DBWriterArray.html":{},"interfaces/NodeMethods.html":{},"interfaces/NodeParams.html":{},"classes/OnlineStatus.html":{}}}],["this.parentnode.getnow",{"_index":1122,"title":{},"body":{"classes/DBListener.html":{},"classes/DBListenerArray.html":{},"classes/DBNode.html":{},"classes/DBNodeArray.html":{},"classes/DBTwoWay.html":{},"classes/DBTwoWayArray.html":{},"classes/DBWriteBuffer.html":{},"classes/DBWriter.html":{},"classes/DBWriterArray.html":{},"interfaces/NodeMethods.html":{},"interfaces/NodeParams.html":{},"classes/OnlineStatus.html":{}}}],["this.parentnode.once('change",{"_index":1086,"title":{},"body":{"classes/DBListener.html":{},"classes/DBListenerArray.html":{},"classes/DBNode.html":{},"classes/DBNodeArray.html":{},"classes/DBTwoWay.html":{},"classes/DBTwoWayArray.html":{},"classes/DBWriteBuffer.html":{},"classes/DBWriter.html":{},"classes/DBWriterArray.html":{},"interfaces/NodeMethods.html":{},"interfaces/NodeParams.html":{},"classes/OnlineStatus.html":{}}}],["this.parentnode.setval(empty_node_array",{"_index":1133,"title":{},"body":{"classes/DBListener.html":{},"classes/DBListenerArray.html":{},"classes/DBNode.html":{},"classes/DBNodeArray.html":{},"classes/DBTwoWay.html":{},"classes/DBTwoWayArray.html":{},"classes/DBWriteBuffer.html":{},"classes/DBWriter.html":{},"classes/DBWriterArray.html":{},"interfaces/NodeMethods.html":{},"interfaces/NodeParams.html":{},"classes/OnlineStatus.html":{}}}],["this.parentnode.val",{"_index":1062,"title":{},"body":{"classes/DBListener.html":{},"classes/DBListenerArray.html":{},"classes/DBNode.html":{},"classes/DBNodeArray.html":{},"classes/DBTwoWay.html":{},"classes/DBTwoWayArray.html":{},"classes/DBWriteBuffer.html":{},"classes/DBWriter.html":{},"classes/DBWriterArray.html":{},"interfaces/NodeMethods.html":{},"interfaces/NodeParams.html":{},"classes/OnlineStatus.html":{}}}],["this.parsedefaultinletvalue(type",{"_index":2444,"title":{},"body":{"components/InletComponent.html":{}}}],["this.pds.togglepedalbyid(0",{"_index":4281,"title":{},"body":{"components/VirtualPedalsComponent.html":{}}}],["this.pds.togglepedalbyid(10",{"_index":4286,"title":{},"body":{"components/VirtualPedalsComponent.html":{}}}],["this.pds.togglepedalbyid(parseint(event.key",{"_index":4285,"title":{},"body":{"components/VirtualPedalsComponent.html":{}}}],["this.pedal_array",{"_index":3412,"title":{},"body":{"interfaces/Pedal.html":{},"classes/PedalStatus.html":{},"injectables/PedalsService.html":{}}}],["this.pedal_states",{"_index":3414,"title":{},"body":{"interfaces/Pedal.html":{},"classes/PedalStatus.html":{},"injectables/PedalsService.html":{}}}],["this.pedalinsequencer(id",{"_index":2650,"title":{},"body":{"injectables/MappingsService.html":{}}}],["this.pedalischained(id",{"_index":1784,"title":{},"body":{"interfaces/DraftOperationClassification.html":{},"interfaces/LoomConfig.html":{},"injectables/MappingsService.html":{},"classes/PedalConfig.html":{},"injectables/PlayerService.html":{}}}],["this.pedalischained(pedalid",{"_index":1755,"title":{},"body":{"interfaces/DraftOperationClassification.html":{},"interfaces/LoomConfig.html":{},"classes/PedalConfig.html":{},"injectables/PlayerService.html":{}}}],["this.pedalismapped(id",{"_index":1781,"title":{},"body":{"interfaces/DraftOperationClassification.html":{},"interfaces/LoomConfig.html":{},"injectables/MappingsService.html":{},"classes/PedalConfig.html":{},"injectables/PlayerService.html":{}}}],["this.pedalispaired(id",{"_index":2633,"title":{},"body":{"injectables/MappingsService.html":{}}}],["this.pedalispaired(p",{"_index":2579,"title":{},"body":{"injectables/MappingsService.html":{}}}],["this.pedalispaired(pedalid",{"_index":1760,"title":{},"body":{"interfaces/DraftOperationClassification.html":{},"interfaces/LoomConfig.html":{},"classes/PedalConfig.html":{},"injectables/PlayerService.html":{}}}],["this.pedalops.addoperation(playeropfromtree",{"_index":1869,"title":{},"body":{"interfaces/DraftOperationClassification.html":{},"interfaces/LoomConfig.html":{},"classes/PedalConfig.html":{},"injectables/PlayerService.html":{}}}],["this.pedals",{"_index":1724,"title":{},"body":{"interfaces/DraftOperationClassification.html":{},"interfaces/LoomConfig.html":{},"classes/PedalConfig.html":{},"injectables/PlayerService.html":{}}}],["this.pedals.active_draft.val",{"_index":1888,"title":{},"body":{"interfaces/DraftOperationClassification.html":{},"interfaces/LoomConfig.html":{},"classes/PedalConfig.html":{},"injectables/PlayerService.html":{}}}],["this.pedals.emit('pedal",{"_index":492,"title":{},"body":{"interfaces/ChainIndex.html":{},"injectables/SequencerService.html":{}}}],["this.pedals.length",{"_index":1731,"title":{},"body":{"interfaces/DraftOperationClassification.html":{},"interfaces/LoomConfig.html":{},"injectables/MappingsService.html":{},"classes/PedalConfig.html":{},"injectables/PlayerService.html":{}}}],["this.pedals.pop",{"_index":1738,"title":{},"body":{"interfaces/DraftOperationClassification.html":{},"interfaces/LoomConfig.html":{},"injectables/MappingsService.html":{},"classes/PedalConfig.html":{},"injectables/PlayerService.html":{}}}],["this.pedals.push(p",{"_index":1735,"title":{},"body":{"interfaces/DraftOperationClassification.html":{},"interfaces/LoomConfig.html":{},"classes/PedalConfig.html":{},"injectables/PlayerService.html":{}}}],["this.pedals.readytoweave",{"_index":1884,"title":{},"body":{"interfaces/DraftOperationClassification.html":{},"interfaces/LoomConfig.html":{},"classes/PedalConfig.html":{},"injectables/PlayerService.html":{}}}],["this.pedals.senddraftrow(this.currentrow",{"_index":1932,"title":{},"body":{"interfaces/DraftOperationClassification.html":{},"interfaces/LoomConfig.html":{},"classes/PedalConfig.html":{},"injectables/PlayerService.html":{}}}],["this.perform",{"_index":249,"title":{},"body":{"classes/AbstractOpFactory.html":{},"classes/BaseOp.html":{},"classes/Branch.html":{},"classes/Bus.html":{},"classes/Merge.html":{},"interfaces/OpClassifier.html":{},"interfaces/OperationProperties.html":{},"classes/Pipe.html":{},"classes/Seed.html":{},"interfaces/TopologyDef.html":{}}}],["this.pi_online",{"_index":3394,"title":{},"body":{"interfaces/Pedal.html":{},"classes/PedalStatus.html":{},"injectables/PedalsService.html":{}}}],["this.pi_online.attach",{"_index":3396,"title":{},"body":{"interfaces/Pedal.html":{},"classes/PedalStatus.html":{},"injectables/PedalsService.html":{}}}],["this.pi_online.checkalive",{"_index":3438,"title":{},"body":{"interfaces/Pedal.html":{},"classes/PedalStatus.html":{},"injectables/PedalsService.html":{}}}],["this.pi_online.on('change",{"_index":3444,"title":{},"body":{"interfaces/Pedal.html":{},"classes/PedalStatus.html":{},"injectables/PedalsService.html":{}}}],["this.pi_online.val",{"_index":3421,"title":{},"body":{"interfaces/Pedal.html":{},"classes/PedalStatus.html":{},"injectables/PedalsService.html":{}}}],["this.player.onpedal(e.id",{"_index":3464,"title":{},"body":{"interfaces/Pedal.html":{},"classes/PedalStatus.html":{},"injectables/PedalsService.html":{}}}],["this.playeropen.emit(this.open",{"_index":3684,"title":{},"body":{"components/PlayerComponent.html":{}}}],["this.pls.draft",{"_index":3641,"title":{},"body":{"components/PlayerComponent.html":{},"components/WeavingStateComponent.html":{}}}],["this.pls.pedals",{"_index":3647,"title":{},"body":{"components/PlayerComponent.html":{}}}],["this.pls.redraw.on('redraw",{"_index":3667,"title":{},"body":{"components/PlayerComponent.html":{},"components/WeavingStateComponent.html":{}}}],["this.pls.setdraft(result[0",{"_index":3651,"title":{},"body":{"components/PlayerComponent.html":{}}}],["this.pls.state",{"_index":3669,"title":{},"body":{"components/PlayerComponent.html":{},"components/WeavingStateComponent.html":{}}}],["this.popnode",{"_index":1096,"title":{},"body":{"classes/DBListener.html":{},"classes/DBListenerArray.html":{},"classes/DBNode.html":{},"classes/DBNodeArray.html":{},"classes/DBTwoWay.html":{},"classes/DBTwoWayArray.html":{},"classes/DBWriteBuffer.html":{},"classes/DBWriter.html":{},"classes/DBWriterArray.html":{},"interfaces/NodeMethods.html":{},"interfaces/NodeParams.html":{},"classes/OnlineStatus.html":{}}}],["this.pushnode(childnode",{"_index":1106,"title":{},"body":{"classes/DBListener.html":{},"classes/DBListenerArray.html":{},"classes/DBNode.html":{},"classes/DBNodeArray.html":{},"classes/DBTwoWay.html":{},"classes/DBTwoWayArray.html":{},"classes/DBWriteBuffer.html":{},"classes/DBWriter.html":{},"classes/DBWriterArray.html":{},"interfaces/NodeMethods.html":{},"interfaces/NodeParams.html":{},"classes/OnlineStatus.html":{}}}],["this.ready",{"_index":1084,"title":{},"body":{"classes/DBListener.html":{},"classes/DBListenerArray.html":{},"classes/DBNode.html":{},"classes/DBNodeArray.html":{},"classes/DBTwoWay.html":{},"classes/DBTwoWayArray.html":{},"classes/DBWriteBuffer.html":{},"classes/DBWriter.html":{},"classes/DBWriterArray.html":{},"interfaces/NodeMethods.html":{},"interfaces/NodeParams.html":{},"classes/OnlineStatus.html":{}}}],["this.readytoweave",{"_index":465,"title":{},"body":{"interfaces/ChainIndex.html":{},"injectables/SequencerService.html":{}}}],["this.redraw.emit('redraw",{"_index":1929,"title":{},"body":{"interfaces/DraftOperationClassification.html":{},"interfaces/LoomConfig.html":{},"classes/PedalConfig.html":{},"injectables/PlayerService.html":{}}}],["this.remnode",{"_index":1138,"title":{},"body":{"classes/DBListener.html":{},"classes/DBListenerArray.html":{},"classes/DBNode.html":{},"classes/DBNodeArray.html":{},"classes/DBTwoWay.html":{},"classes/DBTwoWayArray.html":{},"classes/DBWriteBuffer.html":{},"classes/DBWriter.html":{},"classes/DBWriterArray.html":{},"interfaces/NodeMethods.html":{},"interfaces/NodeParams.html":{},"classes/OnlineStatus.html":{}}}],["this.render.getcelldims('base').h",{"_index":2035,"title":{},"body":{"components/DraftdetailComponent.html":{}}}],["this.resample(math.floor(bounds.height/scale",{"_index":4035,"title":{},"body":{"classes/Shape-1.html":{}}}],["this.rescale",{"_index":1344,"title":{},"body":{"interfaces/DesignActions.html":{},"components/NoteComponent.html":{}}}],["this.rescaleforbitmap",{"_index":1526,"title":{},"body":{"interfaces/DesignActions.html":{}}}],["this.resizecontainer",{"_index":3666,"title":{},"body":{"components/PlayerComponent.html":{},"components/WeavingStateComponent.html":{}}}],["this.resolvepointtondx(p",{"_index":1524,"title":{},"body":{"interfaces/DesignActions.html":{}}}],["this.savenotetext.emit",{"_index":2918,"title":{},"body":{"components/NoteComponent.html":{}}}],["this.scale",{"_index":830,"title":{},"body":{"components/ConnectionComponent.html":{},"interfaces/DesignActions.html":{},"components/NoteComponent.html":{},"classes/Shape-1.html":{},"components/SnackbarComponent.html":{}}}],["this.scale).then(out",{"_index":1550,"title":{},"body":{"interfaces/DesignActions.html":{}}}],["this.scale/2",{"_index":4038,"title":{},"body":{"classes/Shape-1.html":{}}}],["this.scale/5",{"_index":837,"title":{},"body":{"components/ConnectionComponent.html":{}}}],["this.scale/this.default_cell",{"_index":1463,"title":{},"body":{"interfaces/DesignActions.html":{},"components/NoteComponent.html":{}}}],["this.scale/this.default_cell_size",{"_index":770,"title":{},"body":{"components/ConnectionComponent.html":{}}}],["this.scroll",{"_index":2019,"title":{},"body":{"components/DraftdetailComponent.html":{}}}],["this.scrollingsubscription",{"_index":2018,"title":{},"body":{"components/DraftdetailComponent.html":{}}}],["this.scrollingsubscription.unsubscribe",{"_index":2060,"title":{},"body":{"components/DraftdetailComponent.html":{}}}],["this.select('neq",{"_index":2335,"title":{},"body":{"interfaces/Ink.html":{},"injectables/InkService.html":{}}}],["this.select.offset_x.min",{"_index":3838,"title":{},"body":{"classes/Render.html":{}}}],["this.select.offset_y.min",{"_index":3840,"title":{},"body":{"classes/Render.html":{}}}],["this.selected",{"_index":2348,"title":{},"body":{"interfaces/Ink.html":{},"injectables/InkService.html":{}}}],["this.selected.value",{"_index":2360,"title":{},"body":{"interfaces/Ink.html":{},"injectables/InkService.html":{}}}],["this.selecting",{"_index":3067,"title":{},"body":{"classes/OpSequencer.html":{}}}],["this.selectparam",{"_index":3312,"title":{},"body":{"components/ParameterComponent.html":{}}}],["this.seq",{"_index":1879,"title":{},"body":{"interfaces/DraftOperationClassification.html":{},"interfaces/LoomConfig.html":{},"classes/PedalConfig.html":{},"injectables/PlayerService.html":{}}}],["this.seq.addpedals(0",{"_index":1881,"title":{},"body":{"interfaces/DraftOperationClassification.html":{},"interfaces/LoomConfig.html":{},"classes/PedalConfig.html":{},"injectables/PlayerService.html":{}}}],["this.seq.readytoweave",{"_index":1887,"title":{},"body":{"interfaces/DraftOperationClassification.html":{},"interfaces/LoomConfig.html":{},"classes/PedalConfig.html":{},"injectables/PlayerService.html":{}}}],["this.seq_array",{"_index":460,"title":{},"body":{"interfaces/ChainIndex.html":{},"injectables/SequencerService.html":{}}}],["this.seq_array.current",{"_index":463,"title":{},"body":{"interfaces/ChainIndex.html":{},"injectables/SequencerService.html":{}}}],["this.seq_array.nextop",{"_index":515,"title":{},"body":{"interfaces/ChainIndex.html":{},"injectables/SequencerService.html":{}}}],["this.seq_array.ops",{"_index":461,"title":{},"body":{"interfaces/ChainIndex.html":{},"injectables/SequencerService.html":{}}}],["this.seq_array.pos",{"_index":459,"title":{},"body":{"interfaces/ChainIndex.html":{},"injectables/SequencerService.html":{}}}],["this.seq_array.prevop",{"_index":517,"title":{},"body":{"interfaces/ChainIndex.html":{},"injectables/SequencerService.html":{}}}],["this.seq_array.removeop",{"_index":513,"title":{},"body":{"interfaces/ChainIndex.html":{},"injectables/SequencerService.html":{}}}],["this.set(bleh.x",{"_index":4252,"title":{},"body":{"injectables/ViewportService.html":{}}}],["this.setdraft(result[0",{"_index":1806,"title":{},"body":{"interfaces/DraftOperationClassification.html":{},"interfaces/LoomConfig.html":{},"classes/PedalConfig.html":{},"injectables/PlayerService.html":{}}}],["this.setmap(\"sequencer",{"_index":2639,"title":{},"body":{"injectables/MappingsService.html":{}}}],["this.setmap(id",{"_index":2630,"title":{},"body":{"injectables/MappingsService.html":{}}}],["this.setposition(tl_offset",{"_index":1425,"title":{},"body":{"interfaces/DesignActions.html":{}}}],["this.setposition({x",{"_index":1486,"title":{},"body":{"interfaces/DesignActions.html":{}}}],["this.shuttles",{"_index":3988,"title":{},"body":{"classes/Shape.html":{}}}],["this.ss.weftsystemisvisible(val",{"_index":3853,"title":{},"body":{"classes/Render.html":{}}}],["this.startcol",{"_index":3989,"title":{},"body":{"classes/Shape.html":{}}}],["this.startlabel",{"_index":4098,"title":{},"body":{"classes/Shuttle.html":{}}}],["this.state",{"_index":1807,"title":{},"body":{"interfaces/DraftOperationClassification.html":{},"interfaces/LoomConfig.html":{},"classes/PedalConfig.html":{},"injectables/PlayerService.html":{}}}],["this.state.draft",{"_index":1808,"title":{},"body":{"interfaces/DraftOperationClassification.html":{},"interfaces/LoomConfig.html":{},"classes/PedalConfig.html":{},"injectables/PlayerService.html":{}}}],["this.state.row",{"_index":1906,"title":{},"body":{"interfaces/DraftOperationClassification.html":{},"interfaces/LoomConfig.html":{},"classes/PedalConfig.html":{},"injectables/PlayerService.html":{}}}],["this.state.weaving",{"_index":1930,"title":{},"body":{"interfaces/DraftOperationClassification.html":{},"interfaces/LoomConfig.html":{},"classes/PedalConfig.html":{},"injectables/PlayerService.html":{}}}],["this.status",{"_index":3433,"title":{},"body":{"interfaces/Pedal.html":{},"classes/PedalStatus.html":{},"injectables/PedalsService.html":{}}}],["this.status.active_draft",{"_index":3480,"title":{},"body":{"interfaces/Pedal.html":{},"classes/PedalStatus.html":{},"injectables/PedalsService.html":{}}}],["this.status.loom_online",{"_index":3478,"title":{},"body":{"interfaces/Pedal.html":{},"classes/PedalStatus.html":{},"injectables/PedalsService.html":{}}}],["this.status.loom_ready",{"_index":3481,"title":{},"body":{"interfaces/Pedal.html":{},"classes/PedalStatus.html":{},"injectables/PedalsService.html":{}}}],["this.status.num_pedals",{"_index":3485,"title":{},"body":{"interfaces/Pedal.html":{},"classes/PedalStatus.html":{},"injectables/PedalsService.html":{}}}],["this.status.num_picks",{"_index":3482,"title":{},"body":{"interfaces/Pedal.html":{},"classes/PedalStatus.html":{},"injectables/PedalsService.html":{}}}],["this.status.num_v_pedals",{"_index":3489,"title":{},"body":{"interfaces/Pedal.html":{},"classes/PedalStatus.html":{},"injectables/PedalsService.html":{}}}],["this.status.pedal_array",{"_index":3488,"title":{},"body":{"interfaces/Pedal.html":{},"classes/PedalStatus.html":{},"injectables/PedalsService.html":{}}}],["this.status.pedal_states",{"_index":3486,"title":{},"body":{"interfaces/Pedal.html":{},"classes/PedalStatus.html":{},"injectables/PedalsService.html":{}}}],["this.status.pi_online",{"_index":3477,"title":{},"body":{"interfaces/Pedal.html":{},"classes/PedalStatus.html":{},"injectables/PedalsService.html":{}}}],["this.status.pick_data",{"_index":3483,"title":{},"body":{"interfaces/Pedal.html":{},"classes/PedalStatus.html":{},"injectables/PedalsService.html":{}}}],["this.status.v_pedal_array",{"_index":3491,"title":{},"body":{"interfaces/Pedal.html":{},"classes/PedalStatus.html":{},"injectables/PedalsService.html":{}}}],["this.status.v_pedal_states",{"_index":3490,"title":{},"body":{"interfaces/Pedal.html":{},"classes/PedalStatus.html":{},"injectables/PedalsService.html":{}}}],["this.status.vacuum_on",{"_index":3479,"title":{},"body":{"interfaces/Pedal.html":{},"classes/PedalStatus.html":{},"injectables/PedalsService.html":{}}}],["this.stringparam",{"_index":3314,"title":{},"body":{"components/ParameterComponent.html":{}}}],["this.structureopfromdraft(d",{"_index":1903,"title":{},"body":{"interfaces/DraftOperationClassification.html":{},"interfaces/LoomConfig.html":{},"classes/PedalConfig.html":{},"injectables/PlayerService.html":{}}}],["this.svg",{"_index":748,"title":{},"body":{"components/ConnectionComponent.html":{}}}],["this.svg.innerhtml",{"_index":806,"title":{},"body":{"components/ConnectionComponent.html":{}}}],["this.systems.weft_systems.map(el",{"_index":2434,"title":{},"body":{"components/InletComponent.html":{}}}],["this.target",{"_index":3887,"title":{},"body":{"classes/Selection.html":{}}}],["this.target.id",{"_index":3884,"title":{},"body":{"classes/Selection.html":{}}}],["this.thickness",{"_index":4095,"title":{},"body":{"classes/Shuttle.html":{}}}],["this.thickness=100",{"_index":4089,"title":{},"body":{"classes/Shuttle.html":{}}}],["this.to",{"_index":743,"title":{},"body":{"components/ConnectionComponent.html":{}}}],["this.tree.getcomponent(this.from",{"_index":824,"title":{},"body":{"components/ConnectionComponent.html":{}}}],["this.tree.getcomponent(this.to",{"_index":752,"title":{},"body":{"components/ConnectionComponent.html":{}}}],["this.tree.getdraft(id",{"_index":2461,"title":{},"body":{"components/InletComponent.html":{}}}],["this.tree.getdraft(this.id",{"_index":1429,"title":{},"body":{"interfaces/DesignActions.html":{},"components/DraftdetailComponent.html":{}}}],["this.tree.getinletofcxn(to.id",{"_index":774,"title":{},"body":{"components/ConnectionComponent.html":{}}}],["this.tree.getloom(this.id",{"_index":1556,"title":{},"body":{"interfaces/DesignActions.html":{},"components/DraftdetailComponent.html":{}}}],["this.tree.getloomsettings(this.id",{"_index":1431,"title":{},"body":{"interfaces/DesignActions.html":{},"components/DraftdetailComponent.html":{}}}],["this.tree.getnode(this.opid",{"_index":2464,"title":{},"body":{"components/InletComponent.html":{},"components/ParameterComponent.html":{}}}],["this.tree.getopnode(this.opid",{"_index":2432,"title":{},"body":{"components/InletComponent.html":{},"components/ParameterComponent.html":{}}}],["this.tree.getsubdraftparent(this.id",{"_index":1417,"title":{},"body":{"interfaces/DesignActions.html":{}}}],["this.tree.gettreenode(this.id",{"_index":736,"title":{},"body":{"components/ConnectionComponent.html":{}}}],["this.tree.gettype(this.from",{"_index":746,"title":{},"body":{"components/ConnectionComponent.html":{}}}],["this.tree.hasparent(this.id",{"_index":2027,"title":{},"body":{"components/DraftdetailComponent.html":{}}}],["this.tree.hassinglechild(this.from",{"_index":747,"title":{},"body":{"components/ConnectionComponent.html":{}}}],["this.tree.setdraft(this.id",{"_index":1598,"title":{},"body":{"interfaces/DesignActions.html":{}}}],["this.type",{"_index":4090,"title":{},"body":{"classes/Shuttle.html":{}}}],["this.unmap(dst",{"_index":2606,"title":{},"body":{"injectables/MappingsService.html":{}}}],["this.unmap(p",{"_index":2601,"title":{},"body":{"injectables/MappingsService.html":{}}}],["this.unpairedops.push(o",{"_index":1744,"title":{},"body":{"interfaces/DraftOperationClassification.html":{},"interfaces/LoomConfig.html":{},"classes/PedalConfig.html":{},"injectables/PlayerService.html":{}}}],["this.unpairedops.splice(o",{"_index":1749,"title":{},"body":{"interfaces/DraftOperationClassification.html":{},"interfaces/LoomConfig.html":{},"injectables/MappingsService.html":{},"classes/PedalConfig.html":{},"injectables/PlayerService.html":{}}}],["this.unpairedops.splice(op.id",{"_index":1788,"title":{},"body":{"interfaces/DraftOperationClassification.html":{},"interfaces/LoomConfig.html":{},"injectables/MappingsService.html":{},"classes/PedalConfig.html":{},"injectables/PlayerService.html":{}}}],["this.unpairpedal(pid",{"_index":1793,"title":{},"body":{"interfaces/DraftOperationClassification.html":{},"interfaces/LoomConfig.html":{},"classes/PedalConfig.html":{},"injectables/PlayerService.html":{}}}],["this.unsubscribers",{"_index":989,"title":{},"body":{"classes/DBListener.html":{},"classes/DBListenerArray.html":{},"classes/DBNode.html":{},"classes/DBNodeArray.html":{},"classes/DBTwoWay.html":{},"classes/DBTwoWayArray.html":{},"classes/DBWriteBuffer.html":{},"classes/DBWriter.html":{},"classes/DBWriterArray.html":{},"interfaces/NodeMethods.html":{},"interfaces/NodeParams.html":{},"classes/OnlineStatus.html":{}}}],["this.unsubscribers.length",{"_index":1028,"title":{},"body":{"classes/DBListener.html":{},"classes/DBListenerArray.html":{},"classes/DBNode.html":{},"classes/DBNodeArray.html":{},"classes/DBTwoWay.html":{},"classes/DBTwoWayArray.html":{},"classes/DBWriteBuffer.html":{},"classes/DBWriter.html":{},"classes/DBWriterArray.html":{},"interfaces/NodeMethods.html":{},"interfaces/NodeParams.html":{},"classes/OnlineStatus.html":{}}}],["this.unsubscribers.pop",{"_index":1029,"title":{},"body":{"classes/DBListener.html":{},"classes/DBListenerArray.html":{},"classes/DBNode.html":{},"classes/DBNodeArray.html":{},"classes/DBTwoWay.html":{},"classes/DBTwoWayArray.html":{},"classes/DBWriteBuffer.html":{},"classes/DBWriter.html":{},"classes/DBWriterArray.html":{},"interfaces/NodeMethods.html":{},"interfaces/NodeParams.html":{},"classes/OnlineStatus.html":{}}}],["this.unsubscribers.push",{"_index":1088,"title":{},"body":{"classes/DBListener.html":{},"classes/DBListenerArray.html":{},"classes/DBNode.html":{},"classes/DBNodeArray.html":{},"classes/DBTwoWay.html":{},"classes/DBTwoWayArray.html":{},"classes/DBWriteBuffer.html":{},"classes/DBWriter.html":{},"classes/DBWriterArray.html":{},"interfaces/NodeMethods.html":{},"interfaces/NodeParams.html":{},"classes/OnlineStatus.html":{}}}],["this.unsubscribers.push(unsub",{"_index":1023,"title":{},"body":{"classes/DBListener.html":{},"classes/DBListenerArray.html":{},"classes/DBNode.html":{},"classes/DBNodeArray.html":{},"classes/DBTwoWay.html":{},"classes/DBTwoWayArray.html":{},"classes/DBWriteBuffer.html":{},"classes/DBWriter.html":{},"classes/DBWriterArray.html":{},"interfaces/NodeMethods.html":{},"interfaces/NodeParams.html":{},"classes/OnlineStatus.html":{}}}],["this.updatefromposition(from_comp",{"_index":825,"title":{},"body":{"components/ConnectionComponent.html":{}}}],["this.updatefromposition(this.tree.getcomponent(this.from",{"_index":758,"title":{},"body":{"components/ConnectionComponent.html":{}}}],["this.updatelocaldims",{"_index":2791,"title":{},"body":{"components/MixerViewComponent.html":{}}}],["this.updatetoposition",{"_index":759,"title":{},"body":{"components/ConnectionComponent.html":{}}}],["this.updatetoposition(to_comp",{"_index":826,"title":{},"body":{"components/ConnectionComponent.html":{}}}],["this.updatevariables(shuttledict",{"_index":4092,"title":{},"body":{"classes/Shuttle.html":{}}}],["this.updatevariables(systemdict",{"_index":4149,"title":{},"body":{"classes/System.html":{}}}],["this.updateviewport(this.bounds",{"_index":1445,"title":{},"body":{"interfaces/DesignActions.html":{}}}],["this.updateviewport(value",{"_index":1354,"title":{},"body":{"interfaces/DesignActions.html":{}}}],["this.v_pedal_array",{"_index":3419,"title":{},"body":{"interfaces/Pedal.html":{},"classes/PedalStatus.html":{},"injectables/PedalsService.html":{}}}],["this.v_pedal_array.addnode(false",{"_index":3502,"title":{},"body":{"interfaces/Pedal.html":{},"classes/PedalStatus.html":{},"injectables/PedalsService.html":{}}}],["this.v_pedal_array.attach",{"_index":3499,"title":{},"body":{"interfaces/Pedal.html":{},"classes/PedalStatus.html":{},"injectables/PedalsService.html":{}}}],["this.v_pedal_array.detach",{"_index":3500,"title":{},"body":{"interfaces/Pedal.html":{},"classes/PedalStatus.html":{},"injectables/PedalsService.html":{}}}],["this.v_pedal_array.on('child",{"_index":3470,"title":{},"body":{"interfaces/Pedal.html":{},"classes/PedalStatus.html":{},"injectables/PedalsService.html":{}}}],["this.v_pedal_array.on('ready",{"_index":3468,"title":{},"body":{"interfaces/Pedal.html":{},"classes/PedalStatus.html":{},"injectables/PedalsService.html":{}}}],["this.v_pedal_array.ready",{"_index":3493,"title":{},"body":{"interfaces/Pedal.html":{},"classes/PedalStatus.html":{},"injectables/PedalsService.html":{}}}],["this.v_pedal_states",{"_index":3417,"title":{},"body":{"interfaces/Pedal.html":{},"classes/PedalStatus.html":{},"injectables/PedalsService.html":{}}}],["this.v_pedals.length",{"_index":3474,"title":{},"body":{"interfaces/Pedal.html":{},"classes/PedalStatus.html":{},"injectables/PedalsService.html":{}}}],["this.v_pedals.map((el",{"_index":3454,"title":{},"body":{"interfaces/Pedal.html":{},"classes/PedalStatus.html":{},"injectables/PedalsService.html":{}}}],["this.v_pedals.pop",{"_index":3475,"title":{},"body":{"interfaces/Pedal.html":{},"classes/PedalStatus.html":{},"injectables/PedalsService.html":{}}}],["this.v_pedals.push(v",{"_index":3473,"title":{},"body":{"interfaces/Pedal.html":{},"classes/PedalStatus.html":{},"injectables/PedalsService.html":{}}}],["this.v_pedals[e.id].state",{"_index":3476,"title":{},"body":{"interfaces/Pedal.html":{},"classes/PedalStatus.html":{},"injectables/PedalsService.html":{}}}],["this.vacuum_on.val",{"_index":3424,"title":{},"body":{"interfaces/Pedal.html":{},"classes/PedalStatus.html":{},"injectables/PedalsService.html":{}}}],["this.val",{"_index":1020,"title":{},"body":{"classes/DBListener.html":{},"classes/DBListenerArray.html":{},"classes/DBNode.html":{},"classes/DBNodeArray.html":{},"classes/DBTwoWay.html":{},"classes/DBTwoWayArray.html":{},"classes/DBWriteBuffer.html":{},"classes/DBWriter.html":{},"classes/DBWriterArray.html":{},"interfaces/NodeMethods.html":{},"interfaces/NodeParams.html":{},"classes/OnlineStatus.html":{}}}],["this.view_frames",{"_index":3815,"title":{},"body":{"classes/Render.html":{}}}],["this.view_front",{"_index":3817,"title":{},"body":{"classes/Render.html":{}}}],["this.viewonly",{"_index":2026,"title":{},"body":{"components/DraftdetailComponent.html":{}}}],["this.viewport.addobj(this.id",{"_index":1428,"title":{},"body":{"interfaces/DesignActions.html":{}}}],["this.viewport.getbounds",{"_index":2909,"title":{},"body":{"components/NoteComponent.html":{}}}],["this.viewport.gettopleft",{"_index":1419,"title":{},"body":{"interfaces/DesignActions.html":{}}}],["this.viewport.updatepoint(this.id",{"_index":1478,"title":{},"body":{"interfaces/DesignActions.html":{}}}],["this.virtualpedals(true",{"_index":3440,"title":{},"body":{"interfaces/Pedal.html":{},"classes/PedalStatus.html":{},"injectables/PedalsService.html":{}}}],["this.visible",{"_index":4087,"title":{},"body":{"classes/Shuttle.html":{},"classes/System.html":{}}}],["this.visiblerows",{"_index":3818,"title":{},"body":{"classes/Render.html":{}}}],["this.visiblerows.length",{"_index":3824,"title":{},"body":{"classes/Render.html":{}}}],["this.visiblerows[next",{"_index":3825,"title":{},"body":{"classes/Render.html":{}}}],["this.vp",{"_index":4234,"title":{},"body":{"injectables/ViewportService.html":{}}}],["this.vp.height",{"_index":4255,"title":{},"body":{"injectables/ViewportService.html":{}}}],["this.vp.height/2",{"_index":4260,"title":{},"body":{"injectables/ViewportService.html":{}}}],["this.vp.topleft",{"_index":4256,"title":{},"body":{"injectables/ViewportService.html":{}}}],["this.vp.topleft.x",{"_index":4250,"title":{},"body":{"injectables/ViewportService.html":{}}}],["this.vp.topleft.y",{"_index":4251,"title":{},"body":{"injectables/ViewportService.html":{}}}],["this.vp.width",{"_index":4254,"title":{},"body":{"injectables/ViewportService.html":{}}}],["this.vp.width/2",{"_index":4259,"title":{},"body":{"injectables/ViewportService.html":{}}}],["this.weaver.closeallmodals",{"_index":2061,"title":{},"body":{"components/DraftdetailComponent.html":{}}}],["this.weaver.materialchange",{"_index":2059,"title":{},"body":{"components/DraftdetailComponent.html":{}}}],["this.weaving_state.drawdraft",{"_index":3683,"title":{},"body":{"components/PlayerComponent.html":{}}}],["this.weavingwriters(state",{"_index":3449,"title":{},"body":{"interfaces/Pedal.html":{},"classes/PedalStatus.html":{},"injectables/PedalsService.html":{}}}],["this.width",{"_index":2777,"title":{},"body":{"components/MixerViewComponent.html":{},"classes/Selection.html":{},"classes/Shape.html":{}}}],["this.zndx",{"_index":1413,"title":{},"body":{"interfaces/DesignActions.html":{}}}],["this.zoom",{"_index":2773,"title":{},"body":{"components/MixerViewComponent.html":{},"classes/Render.html":{}}}],["this[id",{"_index":2596,"title":{},"body":{"injectables/MappingsService.html":{}}}],["this[id].name.startswith('ch",{"_index":2648,"title":{},"body":{"injectables/MappingsService.html":{}}}],["this[id].name.startswith('sequencer",{"_index":2649,"title":{},"body":{"injectables/MappingsService.html":{}}}],["this[l].attach",{"_index":3403,"title":{},"body":{"interfaces/Pedal.html":{},"classes/PedalStatus.html":{},"injectables/PedalsService.html":{}}}],["this[p",{"_index":2599,"title":{},"body":{"injectables/MappingsService.html":{}}}],["this[roul.p_select_a",{"_index":2626,"title":{},"body":{"injectables/MappingsService.html":{}}}],["this[roul.p_select_b",{"_index":2628,"title":{},"body":{"injectables/MappingsService.html":{}}}],["this[w].attach",{"_index":3409,"title":{},"body":{"interfaces/Pedal.html":{},"classes/PedalStatus.html":{},"injectables/PedalsService.html":{}}}],["this[w].setval(defaults[w",{"_index":3411,"title":{},"body":{"interfaces/Pedal.html":{},"classes/PedalStatus.html":{},"injectables/PedalsService.html":{}}}],["this_inlet.map((el",{"_index":2164,"title":{},"body":{"interfaces/DynamicOperation.html":{},"interfaces/OpInput.html":{},"interfaces/OperationClassification.html":{},"interfaces/TreeOperation.html":{}}}],["thisop",{"_index":1748,"title":{},"body":{"interfaces/DraftOperationClassification.html":{},"interfaces/LoomConfig.html":{},"injectables/MappingsService.html":{},"classes/PedalConfig.html":{},"injectables/PlayerService.html":{}}}],["thisop[o",{"_index":1752,"title":{},"body":{"interfaces/DraftOperationClassification.html":{},"interfaces/LoomConfig.html":{},"classes/PedalConfig.html":{},"injectables/PlayerService.html":{}}}],["those",{"_index":1602,"title":{},"body":{"interfaces/DraftMap.html":{},"interfaces/Interlacement.html":{},"interfaces/InterlacementVal.html":{}}}],["threading",{"_index":361,"title":{},"body":{"interfaces/Bounds.html":{},"interfaces/Point.html":{},"index.html":{},"miscellaneous/typealiases.html":{}}}],["threadling",{"_index":4579,"title":{},"body":{"index.html":{}}}],["three",{"_index":4459,"title":{},"body":{"index.html":{}}}],["threshold",{"_index":1391,"title":{},"body":{"interfaces/DesignActions.html":{}}}],["through",{"_index":544,"title":{},"body":{"interfaces/ChainOp.html":{},"interfaces/DraftOperationClassification.html":{},"interfaces/LoomConfig.html":{},"interfaces/PairedOp.html":{},"classes/PedalConfig.html":{},"interfaces/PedalEvent.html":{},"interfaces/PlayerOp.html":{},"injectables/PlayerService.html":{},"miscellaneous/typealiases.html":{}}}],["tieup",{"_index":363,"title":{},"body":{"interfaces/Bounds.html":{},"interfaces/Point.html":{},"index.html":{},"miscellaneous/typealiases.html":{}}}],["tile",{"_index":1853,"title":{},"body":{"interfaces/DraftOperationClassification.html":{},"interfaces/LoomConfig.html":{},"classes/PedalConfig.html":{},"injectables/PlayerService.html":{}}}],["tiling",{"_index":4336,"title":{},"body":{"components/WeavingStateComponent.html":{}}}],["time",{"_index":558,"title":{},"body":{"interfaces/ChainOp.html":{},"interfaces/PairedOp.html":{},"interfaces/PedalEvent.html":{},"interfaces/PlayerOp.html":{}}}],["times",{"_index":2326,"title":{},"body":{"interfaces/Ink.html":{},"injectables/InkService.html":{}}}],["tips",{"_index":4605,"title":{},"body":{"index.html":{}}}],["title",{"_index":2120,"title":{},"body":{"components/DraftdetailComponent.html":{},"components/OpSequencerComponent.html":{},"components/PlayerComponent.html":{},"components/WeavingStateComponent.html":{}}}],["titledata",{"_index":2112,"title":{},"body":{"components/DraftdetailComponent.html":{}}}],["tl",{"_index":1418,"title":{},"body":{"interfaces/DesignActions.html":{}}}],["tl.x",{"_index":1421,"title":{},"body":{"interfaces/DesignActions.html":{}}}],["tl.y",{"_index":1423,"title":{},"body":{"interfaces/DesignActions.html":{}}}],["tl_offset",{"_index":1420,"title":{},"body":{"interfaces/DesignActions.html":{}}}],["tn",{"_index":2262,"title":{},"body":{"interfaces/IOTuple.html":{},"interfaces/TreeNode.html":{}}}],["tns",{"_index":3138,"title":{},"body":{"components/OpSequencerComponent.html":{}}}],["to.bounds.topleft.x",{"_index":767,"title":{},"body":{"components/ConnectionComponent.html":{}}}],["to.bounds.topleft.y",{"_index":771,"title":{},"body":{"components/ConnectionComponent.html":{}}}],["to.id",{"_index":766,"title":{},"body":{"components/ConnectionComponent.html":{}}}],["to_comp",{"_index":751,"title":{},"body":{"components/ConnectionComponent.html":{}}}],["to_comp.bounds.topleft.x",{"_index":755,"title":{},"body":{"components/ConnectionComponent.html":{}}}],["to_comp.bounds.topleft.y",{"_index":757,"title":{},"body":{"components/ConnectionComponent.html":{}}}],["to_io",{"_index":739,"title":{},"body":{"components/ConnectionComponent.html":{}}}],["to_io.tn.node.id",{"_index":744,"title":{},"body":{"components/ConnectionComponent.html":{}}}],["to_ndx",{"_index":663,"title":{},"body":{"components/ConnectionComponent.html":{}}}],["todo",{"_index":220,"title":{},"body":{"classes/AbstractOpFactory.html":{},"classes/BaseOp.html":{},"classes/Branch.html":{},"classes/Bus.html":{},"interfaces/ChainOp.html":{},"interfaces/DraftOperationClassification.html":{},"interfaces/DynamicOperation.html":{},"interfaces/LoomConfig.html":{},"injectables/MappingsService.html":{},"classes/Merge.html":{},"interfaces/OpClassifier.html":{},"interfaces/OpInput.html":{},"interfaces/OperationClassification.html":{},"interfaces/OperationProperties.html":{},"interfaces/PairedOp.html":{},"interfaces/Pedal.html":{},"classes/PedalConfig.html":{},"interfaces/PedalEvent.html":{},"classes/PedalStatus.html":{},"injectables/PedalsService.html":{},"classes/Pipe.html":{},"interfaces/PlayerOp.html":{},"injectables/PlayerService.html":{},"classes/Seed.html":{},"interfaces/TopologyDef.html":{},"interfaces/TreeOperation.html":{}}}],["toggle",{"_index":2109,"title":{},"body":{"components/DraftdetailComponent.html":{},"components/MixerViewComponent.html":{},"components/ParameterComponent.html":{}}}],["toggledrafttiling",{"_index":3706,"title":{},"body":{"injectables/PlayerService.html":{}}}],["toggledrafttiling(e",{"_index":3716,"title":{},"body":{"injectables/PlayerService.html":{}}}],["toggleheddle",{"_index":378,"title":{},"body":{"classes/Cell.html":{}}}],["toggleopen",{"_index":3616,"title":{},"body":{"components/PlayerComponent.html":{}}}],["toggleopen(state",{"_index":3625,"title":{},"body":{"components/PlayerComponent.html":{}}}],["togglepedal",{"_index":3546,"title":{},"body":{"injectables/PedalsService.html":{}}}],["togglepedal(p",{"_index":3564,"title":{},"body":{"injectables/PedalsService.html":{}}}],["togglepedalbyid",{"_index":3547,"title":{},"body":{"injectables/PedalsService.html":{}}}],["togglepedalbyid(id",{"_index":3503,"title":{},"body":{"interfaces/Pedal.html":{},"classes/PedalStatus.html":{},"injectables/PedalsService.html":{}}}],["toggleweaving",{"_index":3548,"title":{},"body":{"injectables/PedalsService.html":{},"injectables/PlayerService.html":{}}}],["toname",{"_index":3254,"title":{},"body":{"components/OpsComponent.html":{}}}],["tool",{"_index":4444,"title":{},"body":{"index.html":{}}}],["toolbars",{"_index":2100,"title":{},"body":{"components/DraftdetailComponent.html":{}}}],["tools",{"_index":4434,"title":{},"body":{"index.html":{}}}],["top",{"_index":834,"title":{},"body":{"components/ConnectionComponent.html":{},"interfaces/Crossing.html":{},"interfaces/DesignActions.html":{},"interfaces/DraftMap.html":{},"interfaces/Interlacement.html":{},"interfaces/InterlacementVal.html":{},"components/MixerViewComponent.html":{},"components/NoteComponent.html":{},"components/OpSequencerComponent.html":{},"components/ParameterComponent.html":{},"components/PlayerComponent.html":{},"interfaces/Vertex.html":{},"components/WeavingStateComponent.html":{},"interfaces/YarnPath.html":{},"index.html":{}}}],["top:0",{"_index":839,"title":{},"body":{"components/ConnectionComponent.html":{}}}],["top:1em",{"_index":3005,"title":{},"body":{"components/OpHelpModal.html":{}}}],["top_offset",{"_index":788,"title":{},"body":{"components/ConnectionComponent.html":{}}}],["top_offset+30)*this.scale/this.default_cell_size",{"_index":795,"title":{},"body":{"components/ConnectionComponent.html":{}}}],["topbar\").getboundingclientrect().height",{"_index":3672,"title":{},"body":{"components/PlayerComponent.html":{}}}],["topleft",{"_index":343,"title":{},"body":{"interfaces/Bounds.html":{},"components/ConnectionComponent.html":{},"interfaces/DesignActions.html":{},"directives/MarqueeComponent.html":{},"components/MixerViewComponent.html":{},"components/NoteComponent.html":{},"interfaces/Point.html":{},"directives/SelectionComponent.html":{},"injectables/ViewportService.html":{}}}],["topleft:{x",{"_index":2775,"title":{},"body":{"components/MixerViewComponent.html":{}}}],["topo",{"_index":175,"title":{},"body":{"classes/AbstractOpFactory.html":{},"classes/BaseOp.html":{},"classes/Branch.html":{},"classes/Bus.html":{},"classes/Merge.html":{},"interfaces/OpClassifier.html":{},"interfaces/OperationProperties.html":{},"classes/Pipe.html":{},"classes/Seed.html":{},"interfaces/TopologyDef.html":{},"miscellaneous/functions.html":{}}}],["topo[\"input",{"_index":170,"title":{},"body":{"classes/AbstractOpFactory.html":{},"classes/BaseOp.html":{},"classes/Branch.html":{},"classes/Bus.html":{},"classes/Merge.html":{},"interfaces/OpClassifier.html":{},"interfaces/OperationProperties.html":{},"classes/Pipe.html":{},"classes/Seed.html":{},"interfaces/TopologyDef.html":{}}}],["topo[\"output",{"_index":168,"title":{},"body":{"classes/AbstractOpFactory.html":{},"classes/BaseOp.html":{},"classes/Branch.html":{},"classes/Bus.html":{},"classes/Merge.html":{},"interfaces/OpClassifier.html":{},"interfaces/OperationProperties.html":{},"classes/Pipe.html":{},"classes/Seed.html":{},"interfaces/TopologyDef.html":{}}}],["topo[\"type",{"_index":180,"title":{},"body":{"classes/AbstractOpFactory.html":{},"classes/BaseOp.html":{},"classes/Branch.html":{},"classes/Bus.html":{},"classes/Merge.html":{},"interfaces/OpClassifier.html":{},"interfaces/OperationProperties.html":{},"classes/Pipe.html":{},"classes/Seed.html":{},"interfaces/TopologyDef.html":{}}}],["topo_op",{"_index":2234,"title":{},"body":{"interfaces/DynamicOperation.html":{},"interfaces/OpInput.html":{},"interfaces/OperationClassification.html":{},"interfaces/TreeOperation.html":{}}}],["topologically",{"_index":2189,"title":{},"body":{"interfaces/DynamicOperation.html":{},"interfaces/OpInput.html":{},"interfaces/OperationClassification.html":{},"interfaces/TreeOperation.html":{}}}],["topology",{"_index":90,"title":{},"body":{"classes/AbstractOpFactory.html":{},"classes/BaseOp.html":{},"classes/Branch.html":{},"classes/Bus.html":{},"classes/Merge.html":{},"interfaces/OpClassifier.html":{},"interfaces/OperationProperties.html":{},"classes/Pipe.html":{},"classes/Seed.html":{},"interfaces/TopologyDef.html":{}}}],["topologydef",{"_index":107,"title":{"interfaces/TopologyDef.html":{}},"body":{"classes/AbstractOpFactory.html":{},"classes/BaseOp.html":{},"classes/Branch.html":{},"classes/Bus.html":{},"classes/Merge.html":{},"interfaces/OpClassifier.html":{},"interfaces/OperationProperties.html":{},"classes/Pipe.html":{},"classes/Seed.html":{},"interfaces/TopologyDef.html":{}}}],["topologyfactory",{"_index":296,"title":{},"body":{"classes/AbstractOpFactory.html":{},"classes/BaseOp.html":{},"classes/Branch.html":{},"classes/Bus.html":{},"classes/Merge.html":{},"interfaces/OpClassifier.html":{},"interfaces/OperationProperties.html":{},"classes/Pipe.html":{},"classes/Seed.html":{},"interfaces/TopologyDef.html":{}}}],["topologyindex",{"_index":124,"title":{},"body":{"classes/AbstractOpFactory.html":{},"classes/BaseOp.html":{},"classes/Branch.html":{},"classes/Bus.html":{},"classes/Merge.html":{},"interfaces/OpClassifier.html":{},"interfaces/OperationProperties.html":{},"classes/Pipe.html":{},"classes/Seed.html":{},"interfaces/TopologyDef.html":{},"miscellaneous/typealiases.html":{}}}],["topologyindex[topologyname",{"_index":126,"title":{},"body":{"classes/AbstractOpFactory.html":{},"classes/BaseOp.html":{},"classes/Branch.html":{},"classes/Bus.html":{},"classes/Merge.html":{},"interfaces/OpClassifier.html":{},"interfaces/OperationProperties.html":{},"classes/Pipe.html":{},"classes/Seed.html":{},"interfaces/TopologyDef.html":{}}}],["topologyname",{"_index":98,"title":{},"body":{"classes/AbstractOpFactory.html":{},"classes/BaseOp.html":{},"classes/Branch.html":{},"classes/Bus.html":{},"classes/Merge.html":{},"interfaces/OpClassifier.html":{},"interfaces/OperationProperties.html":{},"classes/Pipe.html":{},"classes/Seed.html":{},"interfaces/TopologyDef.html":{},"miscellaneous/functions.html":{},"miscellaneous/typealiases.html":{}}}],["topologyopindex",{"_index":314,"title":{},"body":{"classes/AbstractOpFactory.html":{},"classes/BaseOp.html":{},"classes/Branch.html":{},"classes/Bus.html":{},"classes/Merge.html":{},"interfaces/OpClassifier.html":{},"interfaces/OperationProperties.html":{},"classes/Pipe.html":{},"classes/Seed.html":{},"interfaces/TopologyDef.html":{},"miscellaneous/typealiases.html":{}}}],["topologyopindex[topologyname][constraintname",{"_index":316,"title":{},"body":{"classes/AbstractOpFactory.html":{},"classes/BaseOp.html":{},"classes/Branch.html":{},"classes/Bus.html":{},"classes/Merge.html":{},"interfaces/OpClassifier.html":{},"interfaces/OperationProperties.html":{},"classes/Pipe.html":{},"classes/Seed.html":{},"interfaces/TopologyDef.html":{}}}],["toprow",{"_index":2113,"title":{},"body":{"components/DraftdetailComponent.html":{},"components/MixerViewComponent.html":{},"components/OpsComponent.html":{}}}],["tostring",{"_index":1129,"title":{},"body":{"classes/DBListener.html":{},"classes/DBListenerArray.html":{},"classes/DBNode.html":{},"classes/DBNodeArray.html":{},"classes/DBTwoWay.html":{},"classes/DBTwoWayArray.html":{},"classes/DBWriteBuffer.html":{},"classes/DBWriter.html":{},"classes/DBWriterArray.html":{},"interfaces/NodeMethods.html":{},"interfaces/NodeParams.html":{},"classes/OnlineStatus.html":{},"interfaces/Pedal.html":{},"classes/PedalStatus.html":{},"injectables/PedalsService.html":{}}}],["total",{"_index":2780,"title":{},"body":{"components/MixerViewComponent.html":{},"injectables/ViewportService.html":{}}}],["touch",{"_index":4549,"title":{},"body":{"index.html":{}}}],["towards",{"_index":2285,"title":{},"body":{"interfaces/IOTuple.html":{},"interfaces/TreeNode.html":{}}}],["track",{"_index":1387,"title":{},"body":{"interfaces/DesignActions.html":{},"injectables/LayersService.html":{},"classes/Shape.html":{}}}],["tracking",{"_index":1795,"title":{},"body":{"interfaces/DraftOperationClassification.html":{},"interfaces/LoomConfig.html":{},"classes/PedalConfig.html":{},"injectables/PlayerService.html":{}}}],["transfer",{"_index":4428,"title":{},"body":{"miscellaneous/functions.html":{}}}],["transfers",{"_index":4426,"title":{},"body":{"miscellaneous/functions.html":{}}}],["transfersystemsandshuttles",{"_index":4421,"title":{},"body":{"miscellaneous/functions.html":{}}}],["transfersystemsandshuttles(d",{"_index":4425,"title":{},"body":{"miscellaneous/functions.html":{}}}],["transform",{"_index":2821,"title":{},"body":{"components/MixerViewComponent.html":{}}}],["transform[0",{"_index":2829,"title":{},"body":{"components/MixerViewComponent.html":{}}}],["transform[1",{"_index":2833,"title":{},"body":{"components/MixerViewComponent.html":{}}}],["transformation",{"_index":1863,"title":{},"body":{"interfaces/DraftOperationClassification.html":{},"interfaces/LoomConfig.html":{},"classes/PedalConfig.html":{},"injectables/PlayerService.html":{}}}],["transforms",{"_index":1865,"title":{},"body":{"interfaces/DraftOperationClassification.html":{},"interfaces/LoomConfig.html":{},"classes/PedalConfig.html":{},"injectables/PlayerService.html":{}}}],["translate",{"_index":3999,"title":{},"body":{"classes/Shape-1.html":{}}}],["translates",{"_index":1503,"title":{},"body":{"interfaces/DesignActions.html":{}}}],["travels",{"_index":4564,"title":{},"body":{"index.html":{},"miscellaneous/typealiases.html":{}}}],["treadles",{"_index":2089,"title":{},"body":{"components/DraftdetailComponent.html":{}}}],["treadling",{"_index":362,"title":{},"body":{"interfaces/Bounds.html":{},"interfaces/Point.html":{},"index.html":{},"miscellaneous/typealiases.html":{}}}],["tree",{"_index":646,"title":{},"body":{"components/ConnectionComponent.html":{},"interfaces/DesignActions.html":{},"interfaces/DraftNodeProxy.html":{},"components/DraftdetailComponent.html":{},"interfaces/DynamicOperation.html":{},"interfaces/FileObj.html":{},"interfaces/FileSaver.html":{},"interfaces/Fileloader.html":{},"interfaces/IOTuple.html":{},"components/ImageComponent.html":{},"components/InletComponent.html":{},"interfaces/LoadResponse.html":{},"components/MixerViewComponent.html":{},"interfaces/NodeComponentProxy.html":{},"components/NoteComponent.html":{},"interfaces/OpComponentProxy.html":{},"components/OpHelpModal.html":{},"interfaces/OpInput.html":{},"components/OpSequencerComponent.html":{},"interfaces/OperationClassification.html":{},"components/OpsComponent.html":{},"components/ParameterComponent.html":{},"components/PlayerComponent.html":{},"interfaces/SaveObj.html":{},"components/SnackbarComponent.html":{},"interfaces/StatusMessage.html":{},"interfaces/TreeNode.html":{},"interfaces/TreeNodeProxy.html":{},"interfaces/TreeOperation.html":{},"components/VirtualPedalsComponent.html":{},"components/WeavingStateComponent.html":{},"index.html":{},"miscellaneous/typealiases.html":{}}}],["tree_op_perform",{"_index":2187,"title":{},"body":{"interfaces/DynamicOperation.html":{},"interfaces/OpInput.html":{},"interfaces/OperationClassification.html":{},"interfaces/TreeOperation.html":{}}}],["treenode",{"_index":735,"title":{"interfaces/TreeNode.html":{}},"body":{"components/ConnectionComponent.html":{},"interfaces/DraftNodeProxy.html":{},"interfaces/FileObj.html":{},"interfaces/FileSaver.html":{},"interfaces/Fileloader.html":{},"interfaces/IOTuple.html":{},"interfaces/LoadResponse.html":{},"interfaces/NodeComponentProxy.html":{},"interfaces/OpComponentProxy.html":{},"interfaces/SaveObj.html":{},"interfaces/StatusMessage.html":{},"interfaces/TreeNode.html":{},"interfaces/TreeNodeProxy.html":{}}}],["treenode.inputs[0",{"_index":738,"title":{},"body":{"components/ConnectionComponent.html":{}}}],["treenode.outputs[0",{"_index":740,"title":{},"body":{"components/ConnectionComponent.html":{}}}],["treenodeproxy",{"_index":1669,"title":{"interfaces/TreeNodeProxy.html":{}},"body":{"interfaces/DraftNodeProxy.html":{},"interfaces/FileObj.html":{},"interfaces/FileSaver.html":{},"interfaces/Fileloader.html":{},"interfaces/LoadResponse.html":{},"interfaces/NodeComponentProxy.html":{},"interfaces/OpComponentProxy.html":{},"interfaces/SaveObj.html":{},"interfaces/StatusMessage.html":{},"interfaces/TreeNodeProxy.html":{}}}],["treenodes",{"_index":1682,"title":{},"body":{"interfaces/DraftNodeProxy.html":{},"interfaces/FileObj.html":{},"interfaces/FileSaver.html":{},"interfaces/Fileloader.html":{},"interfaces/IOTuple.html":{},"interfaces/LoadResponse.html":{},"interfaces/NodeComponentProxy.html":{},"interfaces/OpComponentProxy.html":{},"interfaces/SaveObj.html":{},"interfaces/StatusMessage.html":{},"interfaces/TreeNode.html":{},"interfaces/TreeNodeProxy.html":{}}}],["treeop",{"_index":527,"title":{},"body":{"interfaces/ChainOp.html":{},"interfaces/DraftOperationClassification.html":{},"interfaces/LoomConfig.html":{},"interfaces/PairedOp.html":{},"classes/PedalConfig.html":{},"interfaces/PedalEvent.html":{},"interfaces/PlayerOp.html":{},"injectables/PlayerService.html":{}}}],["treeoperation",{"_index":526,"title":{"interfaces/TreeOperation.html":{}},"body":{"interfaces/ChainOp.html":{},"interfaces/DraftOperationClassification.html":{},"interfaces/DynamicOperation.html":{},"interfaces/LoomConfig.html":{},"interfaces/OpInput.html":{},"interfaces/OperationClassification.html":{},"interfaces/PairedOp.html":{},"classes/PedalConfig.html":{},"interfaces/PedalEvent.html":{},"interfaces/PlayerOp.html":{},"injectables/PlayerService.html":{},"interfaces/TreeOperation.html":{},"miscellaneous/functions.html":{},"miscellaneous/typealiases.html":{}}}],["treeoperation[\"perform",{"_index":2188,"title":{},"body":{"interfaces/DynamicOperation.html":{},"interfaces/OpInput.html":{},"interfaces/OperationClassification.html":{},"interfaces/TreeOperation.html":{}}}],["treeservice",{"_index":677,"title":{},"body":{"components/ConnectionComponent.html":{},"interfaces/DesignActions.html":{},"components/DraftdetailComponent.html":{},"components/InletComponent.html":{},"components/ParameterComponent.html":{}}}],["trigger",{"_index":3142,"title":{},"body":{"components/OpSequencerComponent.html":{}}}],["trigger.ng",{"_index":3141,"title":{},"body":{"components/OpSequencerComponent.html":{}}}],["triggered",{"_index":3738,"title":{},"body":{"interfaces/PlayerState.html":{},"interfaces/PlayerState-1.html":{},"interfaces/WeavingLog.html":{},"interfaces/WeavingPick.html":{},"interfaces/WeavingPick-1.html":{}}}],["triggers",{"_index":1453,"title":{},"body":{"interfaces/DesignActions.html":{},"components/NoteComponent.html":{}}}],["true",{"_index":392,"title":{},"body":{"classes/Cell.html":{},"interfaces/ChainIndex.html":{},"components/ConnectionComponent.html":{},"classes/DBListener.html":{},"classes/DBListenerArray.html":{},"classes/DBNode.html":{},"classes/DBNodeArray.html":{},"classes/DBTwoWay.html":{},"classes/DBTwoWayArray.html":{},"classes/DBWriteBuffer.html":{},"classes/DBWriter.html":{},"classes/DBWriterArray.html":{},"interfaces/DesignActions.html":{},"interfaces/DraftOperationClassification.html":{},"components/DraftdetailComponent.html":{},"interfaces/Ink.html":{},"injectables/InkService.html":{},"interfaces/LoomConfig.html":{},"injectables/MappingsService.html":{},"interfaces/NodeMethods.html":{},"interfaces/NodeParams.html":{},"classes/OnlineStatus.html":{},"classes/OpSequencer.html":{},"interfaces/Pedal.html":{},"classes/PedalConfig.html":{},"classes/PedalStatus.html":{},"injectables/PedalsService.html":{},"components/PlayerComponent.html":{},"injectables/PlayerService.html":{},"classes/Render.html":{},"injectables/SequencerService.html":{},"classes/Shuttle.html":{},"classes/System.html":{},"components/WeavingStateComponent.html":{}}}],["true/false/or",{"_index":1521,"title":{},"body":{"interfaces/DesignActions.html":{}}}],["truestate",{"_index":3164,"title":{},"body":{"interfaces/OperationParam.html":{},"classes/Params.html":{}}}],["trust",{"_index":2593,"title":{},"body":{"injectables/MappingsService.html":{}}}],["tslib",{"_index":4395,"title":{},"body":{"dependencies.html":{}}}],["tune",{"_index":2074,"title":{},"body":{"components/DraftdetailComponent.html":{},"index.html":{}}}],["turn",{"_index":1769,"title":{},"body":{"interfaces/DraftOperationClassification.html":{},"interfaces/LoomConfig.html":{},"injectables/MappingsService.html":{},"classes/PedalConfig.html":{},"injectables/PlayerService.html":{}}}],["twill",{"_index":1820,"title":{},"body":{"interfaces/DraftOperationClassification.html":{},"interfaces/LoomConfig.html":{},"classes/PedalConfig.html":{},"injectables/PlayerService.html":{}}}],["two",{"_index":213,"title":{},"body":{"classes/AbstractOpFactory.html":{},"classes/BaseOp.html":{},"classes/Branch.html":{},"classes/Bus.html":{},"interfaces/Crossing.html":{},"classes/DBListener.html":{},"classes/DBListenerArray.html":{},"classes/DBNode.html":{},"classes/DBNodeArray.html":{},"classes/DBTwoWay.html":{},"classes/DBTwoWayArray.html":{},"classes/DBWriteBuffer.html":{},"classes/DBWriter.html":{},"classes/DBWriterArray.html":{},"interfaces/DraftOperationClassification.html":{},"interfaces/LoomConfig.html":{},"classes/Merge.html":{},"interfaces/NodeMethods.html":{},"interfaces/NodeParams.html":{},"classes/OnlineStatus.html":{},"interfaces/OpClassifier.html":{},"interfaces/OperationProperties.html":{},"classes/PedalConfig.html":{},"classes/Pipe.html":{},"injectables/PlayerService.html":{},"classes/Seed.html":{},"interfaces/TopologyDef.html":{},"interfaces/Vertex.html":{},"interfaces/YarnPath.html":{},"index.html":{}}}],["type",{"_index":21,"title":{},"body":{"classes/AbstractOpFactory.html":{},"classes/BaseOp.html":{},"interfaces/Bounds.html":{},"classes/Branch.html":{},"classes/Bus.html":{},"classes/Cell.html":{},"interfaces/ChainIndex.html":{},"interfaces/ChainOp.html":{},"components/ConnectionComponent.html":{},"interfaces/Crossing.html":{},"classes/DBListener.html":{},"classes/DBListenerArray.html":{},"classes/DBNode.html":{},"classes/DBNodeArray.html":{},"classes/DBTwoWay.html":{},"classes/DBTwoWayArray.html":{},"classes/DBWriteBuffer.html":{},"classes/DBWriter.html":{},"classes/DBWriterArray.html":{},"interfaces/DensityUnits.html":{},"interfaces/DesignActions.html":{},"interfaces/DesignMode.html":{},"interfaces/DraftMap.html":{},"interfaces/DraftNodeProxy.html":{},"interfaces/DraftOperationClassification.html":{},"components/DraftdetailComponent.html":{},"interfaces/DynamicOperation.html":{},"interfaces/FileObj.html":{},"interfaces/FileSaver.html":{},"interfaces/Fileloader.html":{},"interfaces/IOTuple.html":{},"interfaces/Ink.html":{},"injectables/InkService.html":{},"components/InletComponent.html":{},"interfaces/Interlacement.html":{},"interfaces/InterlacementVal.html":{},"injectables/LayersService.html":{},"interfaces/LoadResponse.html":{},"interfaces/LoomConfig.html":{},"interfaces/LoomTypes.html":{},"injectables/MappingsService.html":{},"directives/MarqueeComponent.html":{},"interfaces/MaterialTypes.html":{},"classes/Merge.html":{},"components/MixerViewComponent.html":{},"interfaces/NodeComponentProxy.html":{},"interfaces/NodeMethods.html":{},"interfaces/NodeParams.html":{},"components/NoteComponent.html":{},"classes/OnlineStatus.html":{},"interfaces/OpClassifier.html":{},"interfaces/OpComponentProxy.html":{},"components/OpHelpModal.html":{},"interfaces/OpInput.html":{},"classes/OpSequencer.html":{},"components/OpSequencerComponent.html":{},"interfaces/OperationClassification.html":{},"interfaces/OperationParam.html":{},"interfaces/OperationProperties.html":{},"components/OpsComponent.html":{},"interfaces/PairedOp.html":{},"components/ParameterComponent.html":{},"classes/Params.html":{},"interfaces/Pedal.html":{},"classes/PedalConfig.html":{},"interfaces/PedalEvent.html":{},"classes/PedalStatus.html":{},"injectables/PedalsService.html":{},"classes/Pipe.html":{},"components/PlayerComponent.html":{},"interfaces/PlayerOp.html":{},"injectables/PlayerService.html":{},"interfaces/PlayerState.html":{},"interfaces/PlayerState-1.html":{},"interfaces/Point.html":{},"classes/Render.html":{},"interfaces/SaveObj.html":{},"classes/Seed.html":{},"classes/Selection.html":{},"directives/SelectionComponent.html":{},"injectables/SequencerService.html":{},"classes/Shape.html":{},"classes/Shape-1.html":{},"classes/Shuttle.html":{},"components/SnackbarComponent.html":{},"interfaces/StatusMessage.html":{},"classes/System.html":{},"interfaces/TopologyDef.html":{},"interfaces/TreeNode.html":{},"interfaces/TreeNodeProxy.html":{},"interfaces/TreeOperation.html":{},"interfaces/Vertex.html":{},"interfaces/ViewModes.html":{},"injectables/ViewportService.html":{},"components/VirtualPedalsComponent.html":{},"interfaces/WeavingLog.html":{},"interfaces/WeavingPick.html":{},"interfaces/WeavingPick-1.html":{},"components/WeavingStateComponent.html":{},"interfaces/YarnPath.html":{},"miscellaneous/functions.html":{},"index.html":{},"miscellaneous/typealiases.html":{}}}],["type(t",{"_index":262,"title":{},"body":{"classes/AbstractOpFactory.html":{},"classes/BaseOp.html":{},"classes/Branch.html":{},"classes/Bus.html":{},"classes/Merge.html":{},"interfaces/OpClassifier.html":{},"interfaces/OperationProperties.html":{},"classes/Pipe.html":{},"classes/Seed.html":{},"interfaces/TopologyDef.html":{}}}],["typealiases",{"_index":4630,"title":{"miscellaneous/typealiases.html":{}},"body":{}}],["typeof",{"_index":105,"title":{},"body":{"classes/AbstractOpFactory.html":{},"classes/BaseOp.html":{},"classes/Branch.html":{},"classes/Bus.html":{},"classes/Merge.html":{},"interfaces/OpClassifier.html":{},"interfaces/OperationProperties.html":{},"classes/Pipe.html":{},"classes/Seed.html":{},"interfaces/TopologyDef.html":{}}}],["typeof(this._val",{"_index":1005,"title":{},"body":{"classes/DBListener.html":{},"classes/DBListenerArray.html":{},"classes/DBNode.html":{},"classes/DBNodeArray.html":{},"classes/DBTwoWay.html":{},"classes/DBTwoWayArray.html":{},"classes/DBWriteBuffer.html":{},"classes/DBWriter.html":{},"classes/DBWriterArray.html":{},"interfaces/NodeMethods.html":{},"interfaces/NodeParams.html":{},"classes/OnlineStatus.html":{}}}],["types",{"_index":75,"title":{},"body":{"classes/AbstractOpFactory.html":{},"classes/BaseOp.html":{},"classes/Branch.html":{},"classes/Bus.html":{},"classes/DBListener.html":{},"classes/DBListenerArray.html":{},"classes/DBNode.html":{},"classes/DBNodeArray.html":{},"classes/DBTwoWay.html":{},"classes/DBTwoWayArray.html":{},"classes/DBWriteBuffer.html":{},"classes/DBWriter.html":{},"classes/DBWriterArray.html":{},"interfaces/IOTuple.html":{},"classes/Merge.html":{},"interfaces/NodeMethods.html":{},"interfaces/NodeParams.html":{},"classes/OnlineStatus.html":{},"interfaces/OpClassifier.html":{},"interfaces/OperationProperties.html":{},"classes/Pipe.html":{},"classes/Seed.html":{},"interfaces/TopologyDef.html":{},"interfaces/TreeNode.html":{},"index.html":{},"miscellaneous/typealiases.html":{}}}],["types/lodash",{"_index":4370,"title":{},"body":{"dependencies.html":{}}}],["types/webgl2",{"_index":4372,"title":{},"body":{"dependencies.html":{}}}],["typescript",{"_index":292,"title":{},"body":{"classes/AbstractOpFactory.html":{},"classes/BaseOp.html":{},"classes/Branch.html":{},"classes/Bus.html":{},"classes/Merge.html":{},"interfaces/OpClassifier.html":{},"interfaces/OperationProperties.html":{},"classes/Pipe.html":{},"classes/Seed.html":{},"interfaces/TopologyDef.html":{},"index.html":{}}}],["typescript/javascript",{"_index":2594,"title":{},"body":{"injectables/MappingsService.html":{}}}],["u",{"_index":2621,"title":{},"body":{"injectables/MappingsService.html":{}}}],["u[0",{"_index":2625,"title":{},"body":{"injectables/MappingsService.html":{}}}],["u_name",{"_index":3364,"title":{},"body":{"interfaces/Pedal.html":{},"classes/PedalStatus.html":{},"injectables/PedalsService.html":{}}}],["ud_name",{"_index":1586,"title":{},"body":{"interfaces/DesignActions.html":{},"interfaces/DraftMap.html":{},"interfaces/Interlacement.html":{},"interfaces/InterlacementVal.html":{}}}],["ui",{"_index":4594,"title":{},"body":{"index.html":{}}}],["undefined",{"_index":240,"title":{},"body":{"classes/AbstractOpFactory.html":{},"classes/BaseOp.html":{},"classes/Branch.html":{},"classes/Bus.html":{},"classes/Cell.html":{},"components/ConnectionComponent.html":{},"classes/DBListener.html":{},"classes/DBListenerArray.html":{},"classes/DBNode.html":{},"classes/DBNodeArray.html":{},"classes/DBTwoWay.html":{},"classes/DBTwoWayArray.html":{},"classes/DBWriteBuffer.html":{},"classes/DBWriter.html":{},"classes/DBWriterArray.html":{},"interfaces/DesignActions.html":{},"components/InletComponent.html":{},"injectables/MappingsService.html":{},"classes/Merge.html":{},"interfaces/NodeMethods.html":{},"interfaces/NodeParams.html":{},"components/NoteComponent.html":{},"classes/OnlineStatus.html":{},"interfaces/OpClassifier.html":{},"interfaces/OperationProperties.html":{},"classes/Pipe.html":{},"classes/Seed.html":{},"classes/Selection.html":{},"classes/Shuttle.html":{},"interfaces/TopologyDef.html":{},"injectables/ViewportService.html":{},"components/WeavingStateComponent.html":{}}}],["under",{"_index":2146,"title":{},"body":{"interfaces/DynamicOperation.html":{},"interfaces/Ink.html":{},"injectables/InkService.html":{},"interfaces/OpInput.html":{},"interfaces/OperationClassification.html":{},"interfaces/TreeOperation.html":{}}}],["under_over",{"_index":935,"title":{},"body":{"interfaces/Crossing.html":{},"interfaces/Vertex.html":{},"interfaces/YarnPath.html":{}}}],["under_unset",{"_index":931,"title":{},"body":{"interfaces/Crossing.html":{},"interfaces/Vertex.html":{},"interfaces/YarnPath.html":{}}}],["underneight",{"_index":2308,"title":{},"body":{"interfaces/Ink.html":{},"injectables/InkService.html":{}}}],["underneith",{"_index":2322,"title":{},"body":{"interfaces/Ink.html":{},"injectables/InkService.html":{}}}],["understand",{"_index":4496,"title":{},"body":{"index.html":{}}}],["union",{"_index":79,"title":{},"body":{"classes/AbstractOpFactory.html":{},"classes/BaseOp.html":{},"classes/Branch.html":{},"classes/Bus.html":{},"classes/Merge.html":{},"interfaces/OpClassifier.html":{},"interfaces/OperationProperties.html":{},"classes/Pipe.html":{},"classes/Seed.html":{},"interfaces/TopologyDef.html":{}}}],["unique",{"_index":1611,"title":{},"body":{"interfaces/DraftMap.html":{},"interfaces/IOTuple.html":{},"interfaces/Interlacement.html":{},"interfaces/InterlacementVal.html":{},"components/ParameterComponent.html":{},"classes/System.html":{},"interfaces/TreeNode.html":{},"injectables/ViewportService.html":{},"miscellaneous/functions.html":{},"index.html":{}}}],["unique_systems",{"_index":4164,"title":{},"body":{"classes/System.html":{}}}],["unique_systems.foreach((sys",{"_index":4179,"title":{},"body":{"classes/System.html":{}}}],["unique_systems.reduce((acc",{"_index":4174,"title":{},"body":{"classes/System.html":{}}}],["unit",{"_index":4648,"title":{},"body":{"miscellaneous/typealiases.html":{}}}],["units",{"_index":1624,"title":{},"body":{"interfaces/DraftMap.html":{},"interfaces/Interlacement.html":{},"interfaces/InterlacementVal.html":{}}}],["unless",{"_index":711,"title":{},"body":{"components/ConnectionComponent.html":{}}}],["unmap",{"_index":2528,"title":{},"body":{"injectables/MappingsService.html":{}}}],["unmap(id",{"_index":2552,"title":{},"body":{"injectables/MappingsService.html":{}}}],["unpairop(name",{"_index":1790,"title":{},"body":{"interfaces/DraftOperationClassification.html":{},"interfaces/LoomConfig.html":{},"classes/PedalConfig.html":{},"injectables/PlayerService.html":{}}}],["unpairpedal",{"_index":3507,"title":{},"body":{"classes/PedalConfig.html":{}}}],["unpairpedal(id",{"_index":1785,"title":{},"body":{"interfaces/DraftOperationClassification.html":{},"interfaces/LoomConfig.html":{},"classes/PedalConfig.html":{},"injectables/PlayerService.html":{}}}],["unpredictable",{"_index":3172,"title":{},"body":{"interfaces/OperationParam.html":{},"classes/Params.html":{}}}],["unset",{"_index":388,"title":{},"body":{"classes/Cell.html":{},"interfaces/DesignActions.html":{},"interfaces/Ink.html":{},"injectables/InkService.html":{},"classes/OpSequencer.html":{},"components/OpSequencerComponent.html":{},"components/PlayerComponent.html":{},"components/WeavingStateComponent.html":{}}}],["unset/false",{"_index":4568,"title":{},"body":{"index.html":{}}}],["unset_over",{"_index":929,"title":{},"body":{"interfaces/Crossing.html":{},"interfaces/Vertex.html":{},"interfaces/YarnPath.html":{}}}],["unset_under",{"_index":927,"title":{},"body":{"interfaces/Crossing.html":{},"interfaces/Vertex.html":{},"interfaces/YarnPath.html":{}}}],["unsetheddle",{"_index":379,"title":{},"body":{"classes/Cell.html":{}}}],["unsetparameters",{"_index":3864,"title":{},"body":{"classes/Selection.html":{}}}],["unsub",{"_index":1017,"title":{},"body":{"classes/DBListener.html":{},"classes/DBListenerArray.html":{},"classes/DBNode.html":{},"classes/DBNodeArray.html":{},"classes/DBTwoWay.html":{},"classes/DBTwoWayArray.html":{},"classes/DBWriteBuffer.html":{},"classes/DBWriter.html":{},"classes/DBWriterArray.html":{},"interfaces/NodeMethods.html":{},"interfaces/NodeParams.html":{},"classes/OnlineStatus.html":{}}}],["unsubscribe",{"_index":962,"title":{},"body":{"classes/DBListener.html":{},"classes/DBListenerArray.html":{},"classes/DBNode.html":{},"classes/DBNodeArray.html":{},"classes/DBTwoWay.html":{},"classes/DBTwoWayArray.html":{},"classes/DBWriteBuffer.html":{},"classes/DBWriter.html":{},"classes/DBWriterArray.html":{},"interfaces/NodeMethods.html":{},"interfaces/NodeParams.html":{},"classes/OnlineStatus.html":{}}}],["unsubscribers",{"_index":945,"title":{},"body":{"classes/DBListener.html":{},"classes/DBListenerArray.html":{},"classes/DBNode.html":{},"classes/DBNodeArray.html":{},"classes/DBTwoWay.html":{},"classes/DBTwoWayArray.html":{},"classes/DBWriteBuffer.html":{},"classes/DBWriter.html":{},"classes/DBWriterArray.html":{},"interfaces/NodeMethods.html":{},"interfaces/NodeParams.html":{},"classes/OnlineStatus.html":{}}}],["untested",{"_index":582,"title":{},"body":{"interfaces/ChainOp.html":{},"interfaces/PairedOp.html":{},"interfaces/PedalEvent.html":{},"interfaces/PlayerOp.html":{}}}],["unused",{"_index":120,"title":{},"body":{"classes/AbstractOpFactory.html":{},"classes/BaseOp.html":{},"classes/Branch.html":{},"classes/Bus.html":{},"classes/Merge.html":{},"interfaces/OpClassifier.html":{},"interfaces/OperationParam.html":{},"interfaces/OperationProperties.html":{},"classes/Params.html":{},"classes/Pipe.html":{},"classes/Seed.html":{},"interfaces/TopologyDef.html":{},"miscellaneous/typealiases.html":{}}}],["up",{"_index":386,"title":{},"body":{"classes/Cell.html":{},"interfaces/Ink.html":{},"injectables/InkService.html":{},"injectables/MappingsService.html":{},"components/OpHelpModal.html":{},"interfaces/Pedal.html":{},"classes/PedalStatus.html":{},"injectables/PedalsService.html":{},"components/PlayerComponent.html":{},"index.html":{}}}],["up/raised",{"_index":4561,"title":{},"body":{"index.html":{}}}],["update",{"_index":1454,"title":{},"body":{"interfaces/DesignActions.html":{},"interfaces/DraftOperationClassification.html":{},"interfaces/LoomConfig.html":{},"components/MixerViewComponent.html":{},"components/NoteComponent.html":{},"interfaces/Pedal.html":{},"classes/PedalConfig.html":{},"classes/PedalStatus.html":{},"injectables/PedalsService.html":{},"injectables/PlayerService.html":{},"classes/Shape.html":{},"injectables/ViewportService.html":{}}}],["updatearray",{"_index":1237,"title":{},"body":{"classes/DBTwoWayArray.html":{},"classes/DBWriterArray.html":{}}}],["updatearray(num",{"_index":1121,"title":{},"body":{"classes/DBListener.html":{},"classes/DBListenerArray.html":{},"classes/DBNode.html":{},"classes/DBNodeArray.html":{},"classes/DBTwoWay.html":{},"classes/DBTwoWayArray.html":{},"classes/DBWriteBuffer.html":{},"classes/DBWriter.html":{},"classes/DBWriterArray.html":{},"interfaces/NodeMethods.html":{},"interfaces/NodeParams.html":{},"classes/OnlineStatus.html":{}}}],["updated",{"_index":356,"title":{},"body":{"interfaces/Bounds.html":{},"components/ConnectionComponent.html":{},"interfaces/Point.html":{}}}],["updatefromposition",{"_index":672,"title":{},"body":{"components/ConnectionComponent.html":{}}}],["updatefromposition(from",{"_index":698,"title":{},"body":{"components/ConnectionComponent.html":{}}}],["updateheight",{"_index":3949,"title":{},"body":{"classes/Shape.html":{}}}],["updatelocaldims",{"_index":2722,"title":{},"body":{"components/MixerViewComponent.html":{}}}],["updatepoint",{"_index":4196,"title":{},"body":{"injectables/ViewportService.html":{}}}],["updatepoint(id",{"_index":4226,"title":{},"body":{"injectables/ViewportService.html":{}}}],["updatepoint(id:number",{"_index":4240,"title":{},"body":{"injectables/ViewportService.html":{}}}],["updatepositionfromparent(parent",{"_index":1480,"title":{},"body":{"interfaces/DesignActions.html":{}}}],["updates",{"_index":489,"title":{},"body":{"interfaces/ChainIndex.html":{},"interfaces/DesignActions.html":{},"interfaces/DraftMap.html":{},"interfaces/Interlacement.html":{},"interfaces/InterlacementVal.html":{},"components/ParameterComponent.html":{},"injectables/SequencerService.html":{}}}],["updateselection",{"_index":1962,"title":{},"body":{"components/DraftdetailComponent.html":{}}}],["updateselection(event",{"_index":1987,"title":{},"body":{"components/DraftdetailComponent.html":{}}}],["updatesize(parent",{"_index":1490,"title":{},"body":{"interfaces/DesignActions.html":{}}}],["updatetoposition",{"_index":673,"title":{},"body":{"components/ConnectionComponent.html":{}}}],["updatetoposition(to",{"_index":705,"title":{},"body":{"components/ConnectionComponent.html":{}}}],["updatevariables",{"_index":4056,"title":{},"body":{"classes/Shuttle.html":{},"classes/System.html":{}}}],["updatevariables(undefined",{"_index":4083,"title":{},"body":{"classes/Shuttle.html":{},"classes/System.html":{}}}],["updatevariables({id",{"_index":4093,"title":{},"body":{"classes/Shuttle.html":{},"classes/System.html":{}}}],["updateviewport",{"_index":2723,"title":{},"body":{"components/MixerViewComponent.html":{}}}],["updateviewport(bounds",{"_index":1476,"title":{},"body":{"interfaces/DesignActions.html":{}}}],["updateviewport(data",{"_index":2747,"title":{},"body":{"components/MixerViewComponent.html":{}}}],["updateviewportfromzoom",{"_index":2724,"title":{},"body":{"components/MixerViewComponent.html":{}}}],["updatevisible",{"_index":3768,"title":{},"body":{"classes/Render.html":{}}}],["updatevisible(draft",{"_index":3802,"title":{},"body":{"classes/Render.html":{}}}],["updating",{"_index":1012,"title":{},"body":{"classes/DBListener.html":{},"classes/DBListenerArray.html":{},"classes/DBNode.html":{},"classes/DBNodeArray.html":{},"classes/DBTwoWay.html":{},"classes/DBTwoWayArray.html":{},"classes/DBWriteBuffer.html":{},"classes/DBWriter.html":{},"classes/DBWriterArray.html":{},"interfaces/DraftOperationClassification.html":{},"interfaces/LoomConfig.html":{},"interfaces/NodeMethods.html":{},"interfaces/NodeParams.html":{},"classes/OnlineStatus.html":{},"interfaces/Pedal.html":{},"classes/PedalConfig.html":{},"classes/PedalStatus.html":{},"injectables/PedalsService.html":{},"injectables/PlayerService.html":{}}}],["upon",{"_index":201,"title":{},"body":{"classes/AbstractOpFactory.html":{},"classes/BaseOp.html":{},"classes/Branch.html":{},"classes/Bus.html":{},"classes/DBListener.html":{},"classes/DBListenerArray.html":{},"classes/DBNode.html":{},"classes/DBNodeArray.html":{},"classes/DBTwoWay.html":{},"classes/DBTwoWayArray.html":{},"classes/DBWriteBuffer.html":{},"classes/DBWriter.html":{},"classes/DBWriterArray.html":{},"interfaces/DynamicOperation.html":{},"classes/Merge.html":{},"interfaces/NodeMethods.html":{},"interfaces/NodeParams.html":{},"classes/OnlineStatus.html":{},"interfaces/OpClassifier.html":{},"interfaces/OpInput.html":{},"interfaces/OperationClassification.html":{},"interfaces/OperationProperties.html":{},"classes/Pipe.html":{},"classes/Seed.html":{},"interfaces/TopologyDef.html":{},"interfaces/TreeOperation.html":{}}}],["use",{"_index":270,"title":{},"body":{"classes/AbstractOpFactory.html":{},"classes/BaseOp.html":{},"classes/Branch.html":{},"classes/Bus.html":{},"interfaces/ChainOp.html":{},"interfaces/DraftMap.html":{},"interfaces/DraftNodeProxy.html":{},"interfaces/DynamicOperation.html":{},"interfaces/FileObj.html":{},"interfaces/FileSaver.html":{},"interfaces/Fileloader.html":{},"interfaces/IOTuple.html":{},"interfaces/Ink.html":{},"injectables/InkService.html":{},"interfaces/Interlacement.html":{},"interfaces/InterlacementVal.html":{},"interfaces/LoadResponse.html":{},"classes/Merge.html":{},"interfaces/NodeComponentProxy.html":{},"interfaces/OpClassifier.html":{},"interfaces/OpComponentProxy.html":{},"interfaces/OpInput.html":{},"interfaces/OperationClassification.html":{},"interfaces/OperationParam.html":{},"interfaces/OperationProperties.html":{},"interfaces/PairedOp.html":{},"classes/Params.html":{},"interfaces/PedalEvent.html":{},"classes/Pipe.html":{},"interfaces/PlayerOp.html":{},"interfaces/SaveObj.html":{},"classes/Seed.html":{},"interfaces/StatusMessage.html":{},"interfaces/TopologyDef.html":{},"interfaces/TreeNode.html":{},"interfaces/TreeNodeProxy.html":{},"interfaces/TreeOperation.html":{},"miscellaneous/functions.html":{},"index.html":{},"miscellaneous/typealiases.html":{}}}],["usecolor",{"_index":4305,"title":{},"body":{"components/WeavingStateComponent.html":{}}}],["used",{"_index":892,"title":{},"body":{"interfaces/Crossing.html":{},"interfaces/DesignActions.html":{},"interfaces/DraftMap.html":{},"interfaces/DynamicOperation.html":{},"interfaces/IOTuple.html":{},"interfaces/Interlacement.html":{},"interfaces/InterlacementVal.html":{},"components/NoteComponent.html":{},"interfaces/OpInput.html":{},"interfaces/OperationClassification.html":{},"interfaces/OperationParam.html":{},"classes/Params.html":{},"interfaces/Point.html":{},"classes/Shape-1.html":{},"classes/System.html":{},"interfaces/TreeNode.html":{},"interfaces/TreeOperation.html":{},"interfaces/Vertex.html":{},"interfaces/YarnPath.html":{},"index.html":{}}}],["useful",{"_index":449,"title":{},"body":{"interfaces/ChainIndex.html":{},"injectables/SequencerService.html":{},"index.html":{}}}],["user",{"_index":183,"title":{},"body":{"classes/AbstractOpFactory.html":{},"classes/BaseOp.html":{},"classes/Branch.html":{},"classes/Bus.html":{},"interfaces/DraftMap.html":{},"interfaces/DraftNodeProxy.html":{},"interfaces/FileObj.html":{},"interfaces/FileSaver.html":{},"interfaces/Fileloader.html":{},"interfaces/IOTuple.html":{},"interfaces/Ink.html":{},"injectables/InkService.html":{},"interfaces/Interlacement.html":{},"interfaces/InterlacementVal.html":{},"interfaces/LoadResponse.html":{},"classes/Merge.html":{},"interfaces/NodeComponentProxy.html":{},"interfaces/OpClassifier.html":{},"interfaces/OpComponentProxy.html":{},"interfaces/OperationParam.html":{},"interfaces/OperationProperties.html":{},"classes/Params.html":{},"classes/Pipe.html":{},"interfaces/SaveObj.html":{},"classes/Seed.html":{},"interfaces/StatusMessage.html":{},"interfaces/TopologyDef.html":{},"interfaces/TreeNode.html":{},"interfaces/TreeNodeProxy.html":{},"index.html":{},"miscellaneous/typealiases.html":{}}}],["user's",{"_index":4525,"title":{},"body":{"index.html":{}}}],["users",{"_index":1295,"title":{},"body":{"interfaces/DensityUnits.html":{},"interfaces/DesignMode.html":{},"interfaces/LoomTypes.html":{},"interfaces/MaterialTypes.html":{},"interfaces/ViewModes.html":{}}}],["uses",{"_index":2184,"title":{},"body":{"interfaces/DynamicOperation.html":{},"interfaces/OpInput.html":{},"interfaces/OperationClassification.html":{},"interfaces/TreeOperation.html":{},"index.html":{}}}],["uses_mask",{"_index":2304,"title":{},"body":{"interfaces/Ink.html":{},"injectables/InkService.html":{}}}],["uses_mask:false",{"_index":2315,"title":{},"body":{"interfaces/Ink.html":{},"injectables/InkService.html":{}}}],["uses_mask:true",{"_index":2331,"title":{},"body":{"interfaces/Ink.html":{},"injectables/InkService.html":{}}}],["using",{"_index":229,"title":{},"body":{"classes/AbstractOpFactory.html":{},"classes/BaseOp.html":{},"classes/Branch.html":{},"classes/Bus.html":{},"interfaces/DraftMap.html":{},"components/DraftdetailComponent.html":{},"interfaces/DynamicOperation.html":{},"interfaces/Interlacement.html":{},"interfaces/InterlacementVal.html":{},"classes/Merge.html":{},"interfaces/OpClassifier.html":{},"interfaces/OpInput.html":{},"interfaces/OperationClassification.html":{},"interfaces/OperationParam.html":{},"interfaces/OperationProperties.html":{},"classes/Params.html":{},"classes/Pipe.html":{},"interfaces/Point.html":{},"classes/Seed.html":{},"interfaces/TopologyDef.html":{},"interfaces/TreeOperation.html":{}}}],["util",{"_index":4147,"title":{},"body":{"classes/System.html":{}}}],["utilinstance",{"_index":1317,"title":{},"body":{"interfaces/DesignActions.html":{},"components/NoteComponent.html":{},"classes/System.html":{}}}],["utilinstance.getadjustedpointerposition(pointer",{"_index":2908,"title":{},"body":{"components/NoteComponent.html":{}}}],["utilinstance.getarraymax(el",{"_index":4162,"title":{},"body":{"classes/System.html":{}}}],["utilinstance.resolvepointtoabsolutendx(adj",{"_index":2914,"title":{},"body":{"components/NoteComponent.html":{}}}],["utilinstance.resolvepointtoabsolutendx(bounds.topleft",{"_index":1477,"title":{},"body":{"interfaces/DesignActions.html":{}}}],["utilinstance.resolvepointtoabsolutendx(this.bounds.topleft",{"_index":1427,"title":{},"body":{"interfaces/DesignActions.html":{}}}],["utilinstance.snaptogrid(relative",{"_index":2911,"title":{},"body":{"components/NoteComponent.html":{}}}],["utility",{"_index":3181,"title":{},"body":{"interfaces/OperationParam.html":{},"classes/Params.html":{},"injectables/PedalsService.html":{},"miscellaneous/functions.html":{},"index.html":{}}}],["v",{"_index":3180,"title":{},"body":{"interfaces/OperationParam.html":{},"classes/Params.html":{},"interfaces/Pedal.html":{},"classes/PedalStatus.html":{},"injectables/PedalsService.html":{}}}],["v.id",{"_index":3472,"title":{},"body":{"interfaces/Pedal.html":{},"classes/PedalStatus.html":{},"injectables/PedalsService.html":{}}}],["v_pedal_array",{"_index":3385,"title":{},"body":{"interfaces/Pedal.html":{},"classes/PedalStatus.html":{},"injectables/PedalsService.html":{}}}],["v_pedal_states",{"_index":3384,"title":{},"body":{"interfaces/Pedal.html":{},"classes/PedalStatus.html":{},"injectables/PedalsService.html":{}}}],["v_pedals",{"_index":3429,"title":{},"body":{"interfaces/Pedal.html":{},"classes/PedalStatus.html":{},"injectables/PedalsService.html":{}}}],["vacuum",{"_index":3374,"title":{},"body":{"interfaces/Pedal.html":{},"classes/PedalStatus.html":{},"injectables/PedalsService.html":{}}}],["vacuum_on",{"_index":3372,"title":{},"body":{"interfaces/Pedal.html":{},"classes/PedalStatus.html":{},"injectables/PedalsService.html":{}}}],["val",{"_index":1004,"title":{},"body":{"classes/DBListener.html":{},"classes/DBListenerArray.html":{},"classes/DBNode.html":{},"classes/DBNodeArray.html":{},"classes/DBTwoWay.html":{},"classes/DBTwoWayArray.html":{},"classes/DBWriteBuffer.html":{},"classes/DBWriter.html":{},"classes/DBWriterArray.html":{},"interfaces/DraftMap.html":{},"interfaces/Interlacement.html":{},"interfaces/InterlacementVal.html":{},"interfaces/NodeMethods.html":{},"interfaces/NodeParams.html":{},"classes/OnlineStatus.html":{},"interfaces/Pedal.html":{},"classes/PedalStatus.html":{},"injectables/PedalsService.html":{}}}],["val(x",{"_index":1007,"title":{},"body":{"classes/DBListener.html":{},"classes/DBListenerArray.html":{},"classes/DBNode.html":{},"classes/DBNodeArray.html":{},"classes/DBTwoWay.html":{},"classes/DBTwoWayArray.html":{},"classes/DBWriteBuffer.html":{},"classes/DBWriter.html":{},"classes/DBWriterArray.html":{},"interfaces/NodeMethods.html":{},"interfaces/NodeParams.html":{},"classes/OnlineStatus.html":{}}}],["valid",{"_index":3301,"title":{},"body":{"components/ParameterComponent.html":{}}}],["validate",{"_index":3168,"title":{},"body":{"interfaces/OperationParam.html":{},"classes/Params.html":{},"index.html":{}}}],["validation",{"_index":3150,"title":{},"body":{"interfaces/OperationParam.html":{}}}],["validationerrors",{"_index":3295,"title":{},"body":{"components/ParameterComponent.html":{}}}],["validatorfn",{"_index":3296,"title":{},"body":{"components/ParameterComponent.html":{},"miscellaneous/functions.html":{}}}],["validators",{"_index":3297,"title":{},"body":{"components/ParameterComponent.html":{}}}],["validators.required",{"_index":3316,"title":{},"body":{"components/ParameterComponent.html":{}}}],["value",{"_index":178,"title":{},"body":{"classes/AbstractOpFactory.html":{},"classes/BaseOp.html":{},"classes/Branch.html":{},"classes/Bus.html":{},"classes/Cell.html":{},"components/ConnectionComponent.html":{},"classes/DBListener.html":{},"classes/DBListenerArray.html":{},"classes/DBNode.html":{},"classes/DBNodeArray.html":{},"classes/DBTwoWay.html":{},"classes/DBTwoWayArray.html":{},"classes/DBWriteBuffer.html":{},"classes/DBWriter.html":{},"classes/DBWriterArray.html":{},"interfaces/DensityUnits.html":{},"interfaces/DesignActions.html":{},"interfaces/DesignMode.html":{},"interfaces/DraftMap.html":{},"components/DraftdetailComponent.html":{},"interfaces/Ink.html":{},"injectables/InkService.html":{},"components/InletComponent.html":{},"interfaces/Interlacement.html":{},"interfaces/InterlacementVal.html":{},"interfaces/LoomTypes.html":{},"injectables/MappingsService.html":{},"directives/MarqueeComponent.html":{},"interfaces/MaterialTypes.html":{},"classes/Merge.html":{},"interfaces/NodeMethods.html":{},"interfaces/NodeParams.html":{},"components/NoteComponent.html":{},"classes/OnlineStatus.html":{},"interfaces/OpClassifier.html":{},"components/OpHelpModal.html":{},"classes/OpSequencer.html":{},"interfaces/OperationParam.html":{},"interfaces/OperationProperties.html":{},"components/OpsComponent.html":{},"components/ParameterComponent.html":{},"classes/Params.html":{},"interfaces/Pedal.html":{},"classes/PedalStatus.html":{},"injectables/PedalsService.html":{},"classes/Pipe.html":{},"components/PlayerComponent.html":{},"injectables/PlayerService.html":{},"classes/Render.html":{},"classes/Seed.html":{},"directives/SelectionComponent.html":{},"injectables/SequencerService.html":{},"classes/System.html":{},"interfaces/TopologyDef.html":{},"interfaces/ViewModes.html":{},"components/WeavingStateComponent.html":{},"miscellaneous/functions.html":{},"index.html":{},"miscellaneous/typealiases.html":{}}}],["value.slice",{"_index":2455,"title":{},"body":{"components/InletComponent.html":{}}}],["value.tolowercase",{"_index":3250,"title":{},"body":{"components/OpsComponent.html":{}}}],["values",{"_index":155,"title":{},"body":{"classes/AbstractOpFactory.html":{},"classes/BaseOp.html":{},"classes/Branch.html":{},"classes/Bus.html":{},"classes/DBListener.html":{},"classes/DBListenerArray.html":{},"classes/DBNode.html":{},"classes/DBNodeArray.html":{},"classes/DBTwoWay.html":{},"classes/DBTwoWayArray.html":{},"classes/DBWriteBuffer.html":{},"classes/DBWriter.html":{},"classes/DBWriterArray.html":{},"interfaces/DraftNodeProxy.html":{},"interfaces/FileObj.html":{},"interfaces/FileSaver.html":{},"interfaces/Fileloader.html":{},"interfaces/IOTuple.html":{},"interfaces/LoadResponse.html":{},"injectables/MappingsService.html":{},"classes/Merge.html":{},"components/MixerViewComponent.html":{},"interfaces/NodeComponentProxy.html":{},"interfaces/NodeMethods.html":{},"interfaces/NodeParams.html":{},"classes/OnlineStatus.html":{},"interfaces/OpClassifier.html":{},"interfaces/OpComponentProxy.html":{},"interfaces/OperationParam.html":{},"interfaces/OperationProperties.html":{},"components/ParameterComponent.html":{},"classes/Params.html":{},"interfaces/Pedal.html":{},"classes/PedalStatus.html":{},"injectables/PedalsService.html":{},"classes/Pipe.html":{},"classes/Render.html":{},"interfaces/SaveObj.html":{},"classes/Seed.html":{},"interfaces/StatusMessage.html":{},"interfaces/TopologyDef.html":{},"interfaces/TreeNode.html":{},"interfaces/TreeNodeProxy.html":{},"miscellaneous/functions.html":{},"index.html":{}}}],["values[1",{"_index":2805,"title":{},"body":{"components/MixerViewComponent.html":{}}}],["values[1].length",{"_index":2806,"title":{},"body":{"components/MixerViewComponent.html":{}}}],["values[1].split(/,\\s?/g",{"_index":2808,"title":{},"body":{"components/MixerViewComponent.html":{}}}],["var",{"_index":576,"title":{},"body":{"interfaces/ChainOp.html":{},"components/ConnectionComponent.html":{},"classes/DBListener.html":{},"classes/DBListenerArray.html":{},"classes/DBNode.html":{},"classes/DBNodeArray.html":{},"classes/DBTwoWay.html":{},"classes/DBTwoWayArray.html":{},"classes/DBWriteBuffer.html":{},"classes/DBWriter.html":{},"classes/DBWriterArray.html":{},"components/DraftdetailComponent.html":{},"components/ImageComponent.html":{},"components/InletComponent.html":{},"components/MixerViewComponent.html":{},"interfaces/NodeMethods.html":{},"interfaces/NodeParams.html":{},"components/NoteComponent.html":{},"classes/OnlineStatus.html":{},"components/OpHelpModal.html":{},"components/OpSequencerComponent.html":{},"components/OpsComponent.html":{},"interfaces/PairedOp.html":{},"components/ParameterComponent.html":{},"interfaces/Pedal.html":{},"interfaces/PedalEvent.html":{},"classes/PedalStatus.html":{},"injectables/PedalsService.html":{},"components/PlayerComponent.html":{},"interfaces/PlayerOp.html":{},"classes/Render.html":{},"classes/Shape.html":{},"components/SnackbarComponent.html":{},"components/VirtualPedalsComponent.html":{},"components/WeavingStateComponent.html":{}}}],["variables",{"_index":401,"title":{},"body":{"classes/Cell.html":{},"components/DraftdetailComponent.html":{}}}],["vaues",{"_index":4587,"title":{},"body":{"index.html":{}}}],["verdana",{"_index":2925,"title":{},"body":{"components/NoteComponent.html":{}}}],["versa",{"_index":4584,"title":{},"body":{"index.html":{}}}],["version",{"_index":1664,"title":{},"body":{"interfaces/DraftNodeProxy.html":{},"interfaces/FileObj.html":{},"interfaces/FileSaver.html":{},"interfaces/Fileloader.html":{},"interfaces/LoadResponse.html":{},"interfaces/NodeComponentProxy.html":{},"interfaces/OpComponentProxy.html":{},"interfaces/SaveObj.html":{},"interfaces/StatusMessage.html":{},"interfaces/TreeNodeProxy.html":{},"index.html":{},"properties.html":{}}}],["versions",{"_index":199,"title":{},"body":{"classes/AbstractOpFactory.html":{},"classes/BaseOp.html":{},"classes/Branch.html":{},"classes/Bus.html":{},"interfaces/DynamicOperation.html":{},"classes/Merge.html":{},"interfaces/OpClassifier.html":{},"interfaces/OpInput.html":{},"interfaces/OperationClassification.html":{},"interfaces/OperationProperties.html":{},"classes/Pipe.html":{},"classes/Seed.html":{},"interfaces/TopologyDef.html":{},"interfaces/TreeOperation.html":{}}}],["vertex",{"_index":901,"title":{"interfaces/Vertex.html":{}},"body":{"interfaces/Crossing.html":{},"interfaces/Vertex.html":{},"interfaces/YarnPath.html":{}}}],["vertical",{"_index":3333,"title":{},"body":{"components/ParameterComponent.html":{}}}],["verticies",{"_index":912,"title":{},"body":{"interfaces/Crossing.html":{},"interfaces/Vertex.html":{},"interfaces/YarnPath.html":{}}}],["very",{"_index":64,"title":{},"body":{"classes/AbstractOpFactory.html":{},"classes/BaseOp.html":{},"classes/Branch.html":{},"classes/Bus.html":{},"classes/Merge.html":{},"interfaces/OpClassifier.html":{},"interfaces/OperationProperties.html":{},"classes/Pipe.html":{},"classes/Seed.html":{},"interfaces/TopologyDef.html":{},"miscellaneous/typealiases.html":{}}}],["vice",{"_index":4583,"title":{},"body":{"index.html":{}}}],["view",{"_index":1474,"title":{},"body":{"interfaces/DesignActions.html":{},"interfaces/DraftMap.html":{},"components/DraftdetailComponent.html":{},"interfaces/Interlacement.html":{},"interfaces/InterlacementVal.html":{},"components/MixerViewComponent.html":{},"components/ParameterComponent.html":{},"components/PlayerComponent.html":{},"classes/Render.html":{},"injectables/ViewportService.html":{},"index.html":{}}}],["view_frames",{"_index":3774,"title":{},"body":{"classes/Render.html":{}}}],["view_front",{"_index":3754,"title":{},"body":{"classes/Render.html":{}}}],["view_id",{"_index":2267,"title":{},"body":{"interfaces/IOTuple.html":{},"interfaces/TreeNode.html":{}}}],["view_slider",{"_index":2851,"title":{},"body":{"components/MixerViewComponent.html":{}}}],["viewchild",{"_index":1304,"title":{},"body":{"interfaces/DesignActions.html":{},"components/DraftdetailComponent.html":{},"components/NoteComponent.html":{},"components/PlayerComponent.html":{}}}],["viewchild('bitmapimage",{"_index":1368,"title":{},"body":{"interfaces/DesignActions.html":{}}}],["viewchild('weaver",{"_index":2004,"title":{},"body":{"components/DraftdetailComponent.html":{}}}],["viewchild(opsequencercomponent",{"_index":3627,"title":{},"body":{"components/PlayerComponent.html":{}}}],["viewchild(weavingstatecomponent",{"_index":3632,"title":{},"body":{"components/PlayerComponent.html":{}}}],["viewcomponentref",{"_index":2268,"title":{},"body":{"interfaces/IOTuple.html":{},"interfaces/TreeNode.html":{}}}],["viewer",{"_index":1943,"title":{},"body":{"components/DraftdetailComponent.html":{},"interfaces/DynamicOperation.html":{},"interfaces/OpInput.html":{},"interfaces/OperationClassification.html":{},"interfaces/TreeOperation.html":{}}}],["viewing",{"_index":4471,"title":{},"body":{"index.html":{}}}],["viewmodes",{"_index":1284,"title":{"interfaces/ViewModes.html":{}},"body":{"interfaces/DensityUnits.html":{},"interfaces/DesignMode.html":{},"interfaces/LoomTypes.html":{},"interfaces/MaterialTypes.html":{},"interfaces/ViewModes.html":{}}}],["viewonly",{"_index":1953,"title":{},"body":{"components/DraftdetailComponent.html":{}}}],["viewport",{"_index":1410,"title":{},"body":{"interfaces/DesignActions.html":{},"components/MixerViewComponent.html":{},"components/NoteComponent.html":{},"injectables/ViewportService.html":{}}}],["viewport.getabsolutewidth",{"_index":2782,"title":{},"body":{"components/MixerViewComponent.html":{}}}],["viewport:viewportservice",{"_index":2894,"title":{},"body":{"components/NoteComponent.html":{}}}],["viewportservice",{"_index":1323,"title":{"injectables/ViewportService.html":{}},"body":{"interfaces/DesignActions.html":{},"components/MixerViewComponent.html":{},"components/NoteComponent.html":{},"injectables/ViewportService.html":{}}}],["viewref",{"_index":2263,"title":{},"body":{"interfaces/IOTuple.html":{},"interfaces/TreeNode.html":{}}}],["views",{"_index":4529,"title":{},"body":{"index.html":{}}}],["viewvalue",{"_index":1281,"title":{},"body":{"interfaces/DensityUnits.html":{},"interfaces/DesignActions.html":{},"interfaces/DesignMode.html":{},"interfaces/Ink.html":{},"injectables/InkService.html":{},"interfaces/LoomTypes.html":{},"interfaces/MaterialTypes.html":{},"interfaces/ViewModes.html":{}}}],["virtual",{"_index":874,"title":{},"body":{"components/ConnectionComponent.html":{},"classes/DBListener.html":{},"classes/DBListenerArray.html":{},"classes/DBNode.html":{},"classes/DBNodeArray.html":{},"classes/DBTwoWay.html":{},"classes/DBTwoWayArray.html":{},"classes/DBWriteBuffer.html":{},"classes/DBWriter.html":{},"classes/DBWriterArray.html":{},"components/DraftdetailComponent.html":{},"components/ImageComponent.html":{},"components/InletComponent.html":{},"components/MixerViewComponent.html":{},"interfaces/NodeMethods.html":{},"interfaces/NodeParams.html":{},"components/NoteComponent.html":{},"classes/OnlineStatus.html":{},"components/OpHelpModal.html":{},"components/OpSequencerComponent.html":{},"components/OpsComponent.html":{},"components/ParameterComponent.html":{},"interfaces/Pedal.html":{},"classes/PedalStatus.html":{},"injectables/PedalsService.html":{},"components/PlayerComponent.html":{},"modules/PlayerModule.html":{},"components/SnackbarComponent.html":{},"components/VirtualPedalsComponent.html":{},"components/WeavingStateComponent.html":{}}}],["virtualpedals",{"_index":3549,"title":{},"body":{"injectables/PedalsService.html":{}}}],["virtualpedals(state",{"_index":3498,"title":{},"body":{"interfaces/Pedal.html":{},"classes/PedalStatus.html":{},"injectables/PedalsService.html":{}}}],["virtualpedalscomponent",{"_index":873,"title":{"components/VirtualPedalsComponent.html":{}},"body":{"components/ConnectionComponent.html":{},"components/DraftdetailComponent.html":{},"components/ImageComponent.html":{},"components/InletComponent.html":{},"components/MixerViewComponent.html":{},"components/NoteComponent.html":{},"components/OpHelpModal.html":{},"components/OpSequencerComponent.html":{},"components/OpsComponent.html":{},"components/ParameterComponent.html":{},"components/PlayerComponent.html":{},"modules/PlayerModule.html":{},"components/SnackbarComponent.html":{},"components/VirtualPedalsComponent.html":{},"components/WeavingStateComponent.html":{},"overview.html":{}}}],["visible",{"_index":1671,"title":{},"body":{"interfaces/DraftNodeProxy.html":{},"interfaces/FileObj.html":{},"interfaces/FileSaver.html":{},"interfaces/Fileloader.html":{},"interfaces/LoadResponse.html":{},"interfaces/NodeComponentProxy.html":{},"interfaces/OpComponentProxy.html":{},"components/ParameterComponent.html":{},"classes/Render.html":{},"interfaces/SaveObj.html":{},"classes/Shuttle.html":{},"interfaces/StatusMessage.html":{},"classes/System.html":{},"interfaces/TreeNodeProxy.html":{}}}],["visiblerows",{"_index":3755,"title":{},"body":{"classes/Render.html":{}}}],["visibletooltip",{"_index":3263,"title":{},"body":{"components/OpsComponent.html":{}}}],["visit",{"_index":4448,"title":{},"body":{"index.html":{}}}],["visual",{"_index":3849,"title":{},"body":{"classes/Render.html":{},"index.html":{}}}],["visualize",{"_index":2077,"title":{},"body":{"components/DraftdetailComponent.html":{}}}],["vocabulary",{"_index":4544,"title":{},"body":{"index.html":{}}}],["void",{"_index":258,"title":{},"body":{"classes/AbstractOpFactory.html":{},"classes/BaseOp.html":{},"classes/Branch.html":{},"classes/Bus.html":{},"classes/Cell.html":{},"components/ConnectionComponent.html":{},"classes/DBListener.html":{},"classes/DBListenerArray.html":{},"classes/DBNode.html":{},"classes/DBNodeArray.html":{},"classes/DBTwoWay.html":{},"classes/DBTwoWayArray.html":{},"classes/DBWriteBuffer.html":{},"classes/DBWriter.html":{},"classes/DBWriterArray.html":{},"components/DraftdetailComponent.html":{},"components/ImageComponent.html":{},"injectables/InkService.html":{},"components/InletComponent.html":{},"injectables/LayersService.html":{},"injectables/MappingsService.html":{},"directives/MarqueeComponent.html":{},"classes/Merge.html":{},"components/MixerViewComponent.html":{},"interfaces/NodeMethods.html":{},"interfaces/NodeParams.html":{},"components/NoteComponent.html":{},"classes/OnlineStatus.html":{},"interfaces/OpClassifier.html":{},"components/OpHelpModal.html":{},"classes/OpSequencer.html":{},"components/OpSequencerComponent.html":{},"interfaces/OperationProperties.html":{},"components/OpsComponent.html":{},"components/ParameterComponent.html":{},"classes/PedalConfig.html":{},"injectables/PedalsService.html":{},"classes/Pipe.html":{},"components/PlayerComponent.html":{},"injectables/PlayerService.html":{},"classes/Render.html":{},"classes/Seed.html":{},"classes/Selection.html":{},"directives/SelectionComponent.html":{},"injectables/SequencerService.html":{},"classes/Shape.html":{},"classes/Shuttle.html":{},"components/SnackbarComponent.html":{},"classes/System.html":{},"interfaces/TopologyDef.html":{},"injectables/ViewportService.html":{},"components/VirtualPedalsComponent.html":{},"components/WeavingStateComponent.html":{}}}],["vp",{"_index":4183,"title":{},"body":{"injectables/ViewportService.html":{}}}],["w",{"_index":3404,"title":{},"body":{"interfaces/Pedal.html":{},"classes/PedalStatus.html":{},"injectables/PedalsService.html":{},"components/PlayerComponent.html":{},"classes/Render.html":{},"injectables/ViewportService.html":{},"components/WeavingStateComponent.html":{}}}],["waffle",{"_index":1824,"title":{},"body":{"interfaces/DraftOperationClassification.html":{},"interfaces/LoomConfig.html":{},"classes/PedalConfig.html":{},"injectables/PlayerService.html":{}}}],["wait",{"_index":4509,"title":{},"body":{"index.html":{}}}],["want",{"_index":2078,"title":{},"body":{"components/DraftdetailComponent.html":{},"interfaces/OperationParam.html":{},"classes/Params.html":{},"miscellaneous/typealiases.html":{}}}],["warp",{"_index":897,"title":{},"body":{"interfaces/Crossing.html":{},"components/DraftdetailComponent.html":{},"classes/Selection.html":{},"classes/Shape.html":{},"interfaces/Vertex.html":{},"interfaces/YarnPath.html":{},"index.html":{},"miscellaneous/typealiases.html":{}}}],["warp/weft",{"_index":4574,"title":{},"body":{"index.html":{}}}],["warp:weft",{"_index":3981,"title":{},"body":{"classes/Shape.html":{}}}],["warps",{"_index":1337,"title":{},"body":{"interfaces/DesignActions.html":{},"interfaces/DraftOperationClassification.html":{},"components/DraftdetailComponent.html":{},"interfaces/LoomConfig.html":{},"classes/PedalConfig.html":{},"components/PlayerComponent.html":{},"injectables/PlayerService.html":{},"components/WeavingStateComponent.html":{}}}],["warps(draft.drawdown",{"_index":1433,"title":{},"body":{"interfaces/DesignActions.html":{}}}],["warps(this.draft.drawdown",{"_index":1471,"title":{},"body":{"interfaces/DesignActions.html":{},"components/DraftdetailComponent.html":{}}}],["warps(this.pls.draft.drawdown)+2",{"_index":4333,"title":{},"body":{"components/WeavingStateComponent.html":{}}}],["way",{"_index":1141,"title":{},"body":{"classes/DBListener.html":{},"classes/DBListenerArray.html":{},"classes/DBNode.html":{},"classes/DBNodeArray.html":{},"classes/DBTwoWay.html":{},"classes/DBTwoWayArray.html":{},"classes/DBWriteBuffer.html":{},"classes/DBWriter.html":{},"classes/DBWriterArray.html":{},"interfaces/DraftOperationClassification.html":{},"interfaces/LoomConfig.html":{},"injectables/MappingsService.html":{},"interfaces/NodeMethods.html":{},"interfaces/NodeParams.html":{},"classes/OnlineStatus.html":{},"classes/PedalConfig.html":{},"injectables/PlayerService.html":{}}}],["we're",{"_index":1994,"title":{},"body":{"components/DraftdetailComponent.html":{},"interfaces/Ink.html":{},"injectables/InkService.html":{}}}],["we've",{"_index":3068,"title":{},"body":{"classes/OpSequencer.html":{}}}],["weave",{"_index":1860,"title":{},"body":{"interfaces/DraftOperationClassification.html":{},"components/DraftdetailComponent.html":{},"interfaces/LoomConfig.html":{},"classes/PedalConfig.html":{},"injectables/PlayerService.html":{}}}],["weave_stats",{"_index":2124,"title":{},"body":{"components/DraftdetailComponent.html":{}}}],["weaver",{"_index":1796,"title":{},"body":{"interfaces/DraftOperationClassification.html":{},"components/DraftdetailComponent.html":{},"interfaces/LoomConfig.html":{},"classes/PedalConfig.html":{},"injectables/PlayerService.html":{},"interfaces/PlayerState.html":{},"interfaces/PlayerState-1.html":{},"interfaces/WeavingLog.html":{},"interfaces/WeavingPick.html":{},"interfaces/WeavingPick-1.html":{},"index.html":{}}}],["weaver/weaver.component",{"_index":2012,"title":{},"body":{"components/DraftdetailComponent.html":{}}}],["weaver/weaver.module",{"_index":2691,"title":{},"body":{"modules/MixerModule.html":{}}}],["weavercomponent",{"_index":2002,"title":{},"body":{"components/DraftdetailComponent.html":{}}}],["weavermodule",{"_index":2690,"title":{},"body":{"modules/MixerModule.html":{}}}],["weaving",{"_index":591,"title":{},"body":{"interfaces/ChainOp.html":{},"components/ConnectionComponent.html":{},"interfaces/DraftOperationClassification.html":{},"components/DraftdetailComponent.html":{},"components/ImageComponent.html":{},"interfaces/Ink.html":{},"injectables/InkService.html":{},"components/InletComponent.html":{},"interfaces/LoomConfig.html":{},"components/MixerViewComponent.html":{},"components/NoteComponent.html":{},"components/OpHelpModal.html":{},"components/OpSequencerComponent.html":{},"components/OpsComponent.html":{},"interfaces/PairedOp.html":{},"components/ParameterComponent.html":{},"interfaces/Pedal.html":{},"classes/PedalConfig.html":{},"interfaces/PedalEvent.html":{},"classes/PedalStatus.html":{},"injectables/PedalsService.html":{},"components/PlayerComponent.html":{},"modules/PlayerModule.html":{},"interfaces/PlayerOp.html":{},"injectables/PlayerService.html":{},"interfaces/PlayerState.html":{},"interfaces/PlayerState-1.html":{},"components/SnackbarComponent.html":{},"components/VirtualPedalsComponent.html":{},"interfaces/WeavingLog.html":{},"interfaces/WeavingPick.html":{},"interfaces/WeavingPick-1.html":{},"components/WeavingStateComponent.html":{},"index.html":{}}}],["weaving_state",{"_index":3613,"title":{},"body":{"components/PlayerComponent.html":{}}}],["weavinglog",{"_index":3743,"title":{"interfaces/WeavingLog.html":{}},"body":{"interfaces/PlayerState-1.html":{},"interfaces/WeavingLog.html":{},"interfaces/WeavingPick-1.html":{}}}],["weavingonly",{"_index":537,"title":{},"body":{"interfaces/ChainOp.html":{},"interfaces/PairedOp.html":{},"interfaces/PedalEvent.html":{},"interfaces/PlayerOp.html":{}}}],["weavingpick",{"_index":1699,"title":{"interfaces/WeavingPick.html":{},"interfaces/WeavingPick-1.html":{}},"body":{"interfaces/DraftOperationClassification.html":{},"interfaces/LoomConfig.html":{},"interfaces/Pedal.html":{},"classes/PedalConfig.html":{},"classes/PedalStatus.html":{},"injectables/PedalsService.html":{},"injectables/PlayerService.html":{},"interfaces/PlayerState.html":{},"interfaces/PlayerState-1.html":{},"interfaces/WeavingLog.html":{},"interfaces/WeavingPick.html":{},"interfaces/WeavingPick-1.html":{}}}],["weavingstatecomponent",{"_index":876,"title":{"components/WeavingStateComponent.html":{}},"body":{"components/ConnectionComponent.html":{},"components/DraftdetailComponent.html":{},"components/ImageComponent.html":{},"components/InletComponent.html":{},"components/MixerViewComponent.html":{},"components/NoteComponent.html":{},"components/OpHelpModal.html":{},"components/OpSequencerComponent.html":{},"components/OpsComponent.html":{},"components/ParameterComponent.html":{},"components/PlayerComponent.html":{},"modules/PlayerModule.html":{},"components/SnackbarComponent.html":{},"components/VirtualPedalsComponent.html":{},"components/WeavingStateComponent.html":{},"overview.html":{}}}],["weavingwriters",{"_index":3550,"title":{},"body":{"injectables/PedalsService.html":{}}}],["weavingwriters(state",{"_index":3570,"title":{},"body":{"injectables/PedalsService.html":{}}}],["web",{"_index":4479,"title":{},"body":{"index.html":{}}}],["website",{"_index":294,"title":{},"body":{"classes/AbstractOpFactory.html":{},"classes/BaseOp.html":{},"classes/Branch.html":{},"classes/Bus.html":{},"classes/Merge.html":{},"interfaces/OpClassifier.html":{},"interfaces/OperationParam.html":{},"interfaces/OperationProperties.html":{},"classes/Params.html":{},"classes/Pipe.html":{},"classes/Seed.html":{},"interfaces/TopologyDef.html":{}}}],["weft",{"_index":917,"title":{},"body":{"interfaces/Crossing.html":{},"classes/Selection.html":{},"classes/System.html":{},"interfaces/Vertex.html":{},"interfaces/YarnPath.html":{},"index.html":{},"miscellaneous/typealiases.html":{}}}],["weft(s",{"_index":3936,"title":{},"body":{"classes/Shape.html":{}}}],["wefts",{"_index":523,"title":{},"body":{"interfaces/ChainOp.html":{},"interfaces/DesignActions.html":{},"interfaces/DraftOperationClassification.html":{},"components/DraftdetailComponent.html":{},"interfaces/LoomConfig.html":{},"interfaces/PairedOp.html":{},"classes/PedalConfig.html":{},"interfaces/PedalEvent.html":{},"components/PlayerComponent.html":{},"interfaces/PlayerOp.html":{},"injectables/PlayerService.html":{},"classes/Render.html":{},"classes/System.html":{},"components/WeavingStateComponent.html":{}}}],["wefts(d.drawdown",{"_index":1911,"title":{},"body":{"interfaces/DraftOperationClassification.html":{},"interfaces/LoomConfig.html":{},"classes/PedalConfig.html":{},"injectables/PlayerService.html":{}}}],["wefts(draft.drawdown",{"_index":1434,"title":{},"body":{"interfaces/DesignActions.html":{},"interfaces/DraftOperationClassification.html":{},"interfaces/LoomConfig.html":{},"classes/PedalConfig.html":{},"injectables/PlayerService.html":{}}}],["wefts(init.draft.drawdown",{"_index":549,"title":{},"body":{"interfaces/ChainOp.html":{},"interfaces/PairedOp.html":{},"interfaces/PedalEvent.html":{},"interfaces/PlayerOp.html":{}}}],["wefts(res.draft.drawdown",{"_index":572,"title":{},"body":{"interfaces/ChainOp.html":{},"interfaces/DraftOperationClassification.html":{},"interfaces/LoomConfig.html":{},"interfaces/PairedOp.html":{},"classes/PedalConfig.html":{},"interfaces/PedalEvent.html":{},"interfaces/PlayerOp.html":{},"injectables/PlayerService.html":{}}}],["wefts(this.draft.drawdown",{"_index":1472,"title":{},"body":{"interfaces/DesignActions.html":{},"components/DraftdetailComponent.html":{}}}],["wefts(this.pls.draft.drawdown",{"_index":4334,"title":{},"body":{"components/WeavingStateComponent.html":{}}}],["weight",{"_index":2934,"title":{},"body":{"components/NoteComponent.html":{},"components/OpSequencerComponent.html":{},"components/OpsComponent.html":{},"components/SnackbarComponent.html":{}}}],["weight:bold",{"_index":3002,"title":{},"body":{"components/OpHelpModal.html":{}}}],["well",{"_index":1638,"title":{},"body":{"interfaces/DraftMap.html":{},"interfaces/Interlacement.html":{},"interfaces/InterlacementVal.html":{},"interfaces/Pedal.html":{},"classes/PedalStatus.html":{},"injectables/PedalsService.html":{},"index.html":{}}}],["whatever",{"_index":3463,"title":{},"body":{"interfaces/Pedal.html":{},"classes/PedalStatus.html":{},"injectables/PedalsService.html":{}}}],["whetever",{"_index":4312,"title":{},"body":{"components/WeavingStateComponent.html":{}}}],["whether",{"_index":1159,"title":{},"body":{"classes/DBListener.html":{},"classes/DBListenerArray.html":{},"classes/DBNode.html":{},"classes/DBNodeArray.html":{},"classes/DBTwoWay.html":{},"classes/DBTwoWayArray.html":{},"classes/DBWriteBuffer.html":{},"classes/DBWriter.html":{},"classes/DBWriterArray.html":{},"interfaces/DraftOperationClassification.html":{},"interfaces/Ink.html":{},"injectables/InkService.html":{},"interfaces/LoomConfig.html":{},"interfaces/NodeMethods.html":{},"interfaces/NodeParams.html":{},"classes/OnlineStatus.html":{},"classes/OpSequencer.html":{},"interfaces/Pedal.html":{},"classes/PedalConfig.html":{},"classes/PedalStatus.html":{},"injectables/PedalsService.html":{},"injectables/PlayerService.html":{},"interfaces/PlayerState.html":{},"interfaces/PlayerState-1.html":{},"interfaces/WeavingLog.html":{},"interfaces/WeavingPick.html":{},"interfaces/WeavingPick-1.html":{},"index.html":{}}}],["white",{"_index":1534,"title":{},"body":{"interfaces/DesignActions.html":{},"components/InletComponent.html":{},"components/MixerViewComponent.html":{},"components/OpSequencerComponent.html":{},"components/OpsComponent.html":{},"components/ParameterComponent.html":{},"components/PlayerComponent.html":{},"components/VirtualPedalsComponent.html":{},"components/WeavingStateComponent.html":{}}}],["whole",{"_index":4022,"title":{},"body":{"classes/Shape-1.html":{}}}],["width",{"_index":344,"title":{},"body":{"interfaces/Bounds.html":{},"components/ConnectionComponent.html":{},"interfaces/DesignActions.html":{},"components/DraftdetailComponent.html":{},"components/InletComponent.html":{},"directives/MarqueeComponent.html":{},"components/MixerViewComponent.html":{},"components/NoteComponent.html":{},"components/OpSequencerComponent.html":{},"components/OpsComponent.html":{},"components/ParameterComponent.html":{},"components/PlayerComponent.html":{},"interfaces/Point.html":{},"classes/Selection.html":{},"directives/SelectionComponent.html":{},"classes/Shape.html":{},"components/SnackbarComponent.html":{},"injectables/ViewportService.html":{},"components/VirtualPedalsComponent.html":{},"components/WeavingStateComponent.html":{}}}],["width:30px",{"_index":2480,"title":{},"body":{"components/InletComponent.html":{}}}],["wif",{"_index":1558,"title":{},"body":{"interfaces/DesignActions.html":{},"interfaces/DraftNodeProxy.html":{},"interfaces/FileObj.html":{},"interfaces/FileSaver.html":{},"interfaces/Fileloader.html":{},"interfaces/LoadResponse.html":{},"interfaces/NodeComponentProxy.html":{},"interfaces/OpComponentProxy.html":{},"interfaces/SaveObj.html":{},"interfaces/StatusMessage.html":{},"interfaces/TreeNodeProxy.html":{}}}],["window",{"_index":1946,"title":{},"body":{"components/DraftdetailComponent.html":{},"components/MixerViewComponent.html":{}}}],["window:keydown",{"_index":4270,"title":{},"body":{"components/VirtualPedalsComponent.html":{}}}],["window:keydown(event",{"_index":4272,"title":{},"body":{"components/VirtualPedalsComponent.html":{}}}],["wish",{"_index":4456,"title":{},"body":{"index.html":{}}}],["within",{"_index":893,"title":{},"body":{"interfaces/Crossing.html":{},"interfaces/DensityUnits.html":{},"interfaces/DesignActions.html":{},"interfaces/DesignMode.html":{},"interfaces/DraftMap.html":{},"interfaces/DraftNodeProxy.html":{},"interfaces/FileObj.html":{},"interfaces/FileSaver.html":{},"interfaces/Fileloader.html":{},"interfaces/Ink.html":{},"injectables/InkService.html":{},"interfaces/Interlacement.html":{},"interfaces/InterlacementVal.html":{},"interfaces/LoadResponse.html":{},"interfaces/LoomTypes.html":{},"interfaces/MaterialTypes.html":{},"interfaces/NodeComponentProxy.html":{},"interfaces/OpComponentProxy.html":{},"interfaces/SaveObj.html":{},"classes/Shape-1.html":{},"interfaces/StatusMessage.html":{},"interfaces/TreeNodeProxy.html":{},"interfaces/Vertex.html":{},"interfaces/ViewModes.html":{},"injectables/ViewportService.html":{},"interfaces/YarnPath.html":{},"index.html":{}}}],["without",{"_index":3074,"title":{},"body":{"classes/OpSequencer.html":{},"index.html":{}}}],["working",{"_index":2182,"title":{},"body":{"interfaces/DynamicOperation.html":{},"interfaces/OpInput.html":{},"interfaces/OperationClassification.html":{},"interfaces/TreeOperation.html":{}}}],["workspace",{"_index":1675,"title":{},"body":{"interfaces/DraftNodeProxy.html":{},"interfaces/FileObj.html":{},"interfaces/FileSaver.html":{},"interfaces/Fileloader.html":{},"interfaces/LoadResponse.html":{},"interfaces/NodeComponentProxy.html":{},"interfaces/OpComponentProxy.html":{},"interfaces/SaveObj.html":{},"interfaces/StatusMessage.html":{},"interfaces/TreeNodeProxy.html":{},"index.html":{}}}],["workspaceservice",{"_index":1330,"title":{},"body":{"interfaces/DesignActions.html":{},"components/DraftdetailComponent.html":{}}}],["woven",{"_index":3934,"title":{},"body":{"classes/Shape.html":{},"index.html":{}}}],["wrap",{"_index":3091,"title":{},"body":{"components/OpSequencerComponent.html":{},"components/PlayerComponent.html":{},"components/WeavingStateComponent.html":{}}}],["wrapper",{"_index":985,"title":{},"body":{"classes/DBListener.html":{},"classes/DBListenerArray.html":{},"classes/DBNode.html":{},"classes/DBNodeArray.html":{},"classes/DBTwoWay.html":{},"classes/DBTwoWayArray.html":{},"classes/DBWriteBuffer.html":{},"classes/DBWriter.html":{},"classes/DBWriterArray.html":{},"interfaces/NodeMethods.html":{},"interfaces/NodeParams.html":{},"classes/OnlineStatus.html":{},"interfaces/Pedal.html":{},"classes/PedalStatus.html":{},"injectables/PedalsService.html":{}}}],["write",{"_index":1146,"title":{},"body":{"classes/DBListener.html":{},"classes/DBListenerArray.html":{},"classes/DBNode.html":{},"classes/DBNodeArray.html":{},"classes/DBTwoWay.html":{},"classes/DBTwoWayArray.html":{},"classes/DBWriteBuffer.html":{},"classes/DBWriter.html":{},"classes/DBWriterArray.html":{},"interfaces/NodeMethods.html":{},"interfaces/NodeParams.html":{},"classes/OnlineStatus.html":{}}}],["writers",{"_index":3390,"title":{},"body":{"interfaces/Pedal.html":{},"classes/PedalStatus.html":{},"injectables/PedalsService.html":{}}}],["writes",{"_index":1031,"title":{},"body":{"classes/DBListener.html":{},"classes/DBListenerArray.html":{},"classes/DBNode.html":{},"classes/DBNodeArray.html":{},"classes/DBTwoWay.html":{},"classes/DBTwoWayArray.html":{},"classes/DBWriteBuffer.html":{},"classes/DBWriter.html":{},"classes/DBWriterArray.html":{},"interfaces/NodeMethods.html":{},"interfaces/NodeParams.html":{},"classes/OnlineStatus.html":{}}}],["wrong",{"_index":765,"title":{},"body":{"components/ConnectionComponent.html":{}}}],["ws",{"_index":1412,"title":{},"body":{"interfaces/DesignActions.html":{},"components/DraftdetailComponent.html":{}}}],["ws.min_frames",{"_index":2090,"title":{},"body":{"components/DraftdetailComponent.html":{}}}],["ws.min_treadles",{"_index":2091,"title":{},"body":{"components/DraftdetailComponent.html":{}}}],["x",{"_index":346,"title":{},"body":{"interfaces/Bounds.html":{},"components/ConnectionComponent.html":{},"interfaces/Crossing.html":{},"classes/DBListener.html":{},"classes/DBListenerArray.html":{},"classes/DBNode.html":{},"classes/DBNodeArray.html":{},"classes/DBTwoWay.html":{},"classes/DBTwoWayArray.html":{},"classes/DBWriteBuffer.html":{},"classes/DBWriter.html":{},"classes/DBWriterArray.html":{},"interfaces/DesignActions.html":{},"injectables/MappingsService.html":{},"directives/MarqueeComponent.html":{},"components/MixerViewComponent.html":{},"interfaces/NodeMethods.html":{},"interfaces/NodeParams.html":{},"components/NoteComponent.html":{},"classes/OnlineStatus.html":{},"classes/OpSequencer.html":{},"interfaces/Point.html":{},"classes/Render.html":{},"directives/SelectionComponent.html":{},"injectables/SequencerService.html":{},"interfaces/Vertex.html":{},"injectables/ViewportService.html":{},"components/WeavingStateComponent.html":{},"interfaces/YarnPath.html":{}}}],["x*2",{"_index":3833,"title":{},"body":{"classes/Render.html":{}}}],["x,y",{"_index":3745,"title":{},"body":{"interfaces/Point.html":{}}}],["x:0",{"_index":800,"title":{},"body":{"components/ConnectionComponent.html":{},"components/MixerViewComponent.html":{},"components/NoteComponent.html":{},"injectables/ViewportService.html":{}}}],["x_pcent",{"_index":902,"title":{},"body":{"interfaces/Crossing.html":{},"interfaces/Vertex.html":{},"interfaces/YarnPath.html":{}}}],["y",{"_index":347,"title":{},"body":{"interfaces/Bounds.html":{},"components/ConnectionComponent.html":{},"interfaces/Crossing.html":{},"interfaces/DesignActions.html":{},"components/MixerViewComponent.html":{},"components/NoteComponent.html":{},"interfaces/Point.html":{},"classes/Render.html":{},"interfaces/Vertex.html":{},"injectables/ViewportService.html":{},"interfaces/YarnPath.html":{}}}],["y*2",{"_index":3835,"title":{},"body":{"classes/Render.html":{}}}],["y:0",{"_index":717,"title":{},"body":{"components/ConnectionComponent.html":{},"directives/MarqueeComponent.html":{},"components/MixerViewComponent.html":{},"components/NoteComponent.html":{},"directives/SelectionComponent.html":{},"injectables/ViewportService.html":{}}}],["y:number",{"_index":4247,"title":{},"body":{"injectables/ViewportService.html":{}}}],["y:p.y",{"_index":4258,"title":{},"body":{"injectables/ViewportService.html":{}}}],["y:y",{"_index":1509,"title":{},"body":{"interfaces/DesignActions.html":{},"injectables/ViewportService.html":{}}}],["yarn",{"_index":885,"title":{},"body":{"interfaces/Crossing.html":{},"components/DraftdetailComponent.html":{},"classes/Render.html":{},"interfaces/Vertex.html":{},"interfaces/YarnPath.html":{},"index.html":{},"miscellaneous/typealiases.html":{}}}],["yarncell",{"_index":4640,"title":{},"body":{"miscellaneous/typealiases.html":{}}}],["yarnmap",{"_index":4642,"title":{},"body":{"miscellaneous/typealiases.html":{}}}],["yarnpath",{"_index":915,"title":{"interfaces/YarnPath.html":{}},"body":{"interfaces/Crossing.html":{},"interfaces/Vertex.html":{},"interfaces/YarnPath.html":{}}}],["yarnsim",{"_index":4643,"title":{},"body":{"miscellaneous/typealiases.html":{}}}],["yes",{"_index":323,"title":{},"body":{"classes/BaseOp.html":{},"classes/DBTwoWayArray.html":{},"injectables/MappingsService.html":{},"classes/OpSequencer.html":{},"classes/Params.html":{},"classes/PedalConfig.html":{},"injectables/SequencerService.html":{},"miscellaneous/functions.html":{}}}],["z",{"_index":2845,"title":{},"body":{"components/MixerViewComponent.html":{},"components/NoteComponent.html":{},"classes/Render.html":{}}}],["zero",{"_index":111,"title":{},"body":{"classes/AbstractOpFactory.html":{},"classes/BaseOp.html":{},"classes/Branch.html":{},"classes/Bus.html":{},"interfaces/ChainOp.html":{},"classes/Merge.html":{},"interfaces/OpClassifier.html":{},"interfaces/OperationProperties.html":{},"interfaces/PairedOp.html":{},"interfaces/PedalEvent.html":{},"classes/Pipe.html":{},"interfaces/PlayerOp.html":{},"classes/Seed.html":{},"interfaces/TopologyDef.html":{}}}],["zndx",{"_index":1399,"title":{},"body":{"interfaces/DesignActions.html":{}}}],["zone.js",{"_index":4397,"title":{},"body":{"dependencies.html":{}}}],["zoom",{"_index":1457,"title":{},"body":{"interfaces/DesignActions.html":{},"modules/MixerModule.html":{},"components/MixerViewComponent.html":{},"components/NoteComponent.html":{},"modules/PlayerModule.html":{},"classes/Render.html":{},"overview.html":{}}}],["zoom_factor",{"_index":1467,"title":{},"body":{"interfaces/DesignActions.html":{},"components/NoteComponent.html":{}}}],["zoom_factor:number",{"_index":1462,"title":{},"body":{"interfaces/DesignActions.html":{},"components/NoteComponent.html":{}}}],["zoomchange",{"_index":2725,"title":{},"body":{"components/MixerViewComponent.html":{}}}],["zoomchange(e",{"_index":2750,"title":{},"body":{"components/MixerViewComponent.html":{}}}],["zoomchange(e:any",{"_index":2796,"title":{},"body":{"components/MixerViewComponent.html":{}}}],["zoomed",{"_index":2784,"title":{},"body":{"components/MixerViewComponent.html":{}}}],["zoomin",{"_index":3769,"title":{},"body":{"classes/Render.html":{}}}],["zoomout",{"_index":3770,"title":{},"body":{"classes/Render.html":{}}}]],"pipeline":["stemmer"]},
    "store": {"classes/AbstractOpFactory.html":{"url":"classes/AbstractOpFactory.html","title":"class - AbstractOpFactory","body":"\n                   \n\n\n\n\n\n\n\n\n\n\n\n\n\n  Classes\n  AbstractOpFactory\n\n\n\n        \n            Info\n        \n        \n            Source\n        \n\n\n\n    \n        \n            File\n        \n        \n            src/app/mixer/model/operation/topology.ts\n        \n\n\n\n\n\n\n            \n    Index\n    \n        \n\n                \n                    \n                        Methods\n                    \n                \n                \n                    \n                        \n                            \n                                AllRequired\n                            \n                            \n                                AllRequired\n                            \n                            \n                                AllRequired\n                            \n                            \n                                DraftsOptional\n                            \n                            \n                                DraftsOptional\n                            \n                            \n                                DraftsOptional\n                            \n                            \n                                NoDrafts\n                            \n                            \n                                NoDrafts\n                            \n                            \n                                NoDrafts\n                            \n                            \n                                NoParams\n                            \n                            \n                                NoParams\n                            \n                            \n                                NoParams\n                            \n                            \n                                ParamsOptional\n                            \n                            \n                                ParamsOptional\n                            \n                            \n                                ParamsOptional\n                            \n                        \n                    \n                \n\n\n\n\n\n        \n    \n\n\n\n\n            \n    \n    \n        Methods\n    \n    \n        \n            \n                \n                    \n                    \n                        AllRequired\n                        \n                    \n                \n            \n            \n                \nAllRequired(args: OpConstructorArgKeys)\n                \n            \n\n\n            \n                \n                    Defined in src/app/mixer/model/operation/topology.ts:345\n                \n            \n\n\n            \n                \n\n                    \n                        Parameters :\n                        \n                        \n                            \n                                \n                                    Name\n                                    Type\n                                    Optional\n                                \n                            \n                            \n                                \n                                    args\n                                    \n                                            OpConstructorArgKeys\n                                    \n\n                                    \n                                        No\n                                    \n\n\n                                \n                            \n                        \n                    \n                    \n                    \n                    \n                        Returns :         BaseOp\n\n                    \n                    \n                        \n                    \n                \n            \n        \n    \n    \n        \n            \n                \n                    \n                    \n                        AllRequired\n                        \n                    \n                \n            \n            \n                \nAllRequired(...args: OpConstructorArray)\n                \n            \n\n\n            \n                \n                    Defined in src/app/mixer/model/operation/topology.ts:346\n                \n            \n\n\n            \n                \n\n                    \n                        Parameters :\n                        \n                        \n                            \n                                \n                                    Name\n                                    Type\n                                    Optional\n                                \n                            \n                            \n                                \n                                    args\n                                    \n                                            OpConstructorArray\n                                    \n\n                                    \n                                        No\n                                    \n\n\n                                \n                            \n                        \n                    \n                    \n                    \n                    \n                        Returns :         BaseOp\n\n                    \n                    \n                        \n                    \n                \n            \n        \n    \n    \n        \n            \n                \n                    \n                    \n                        AllRequired\n                        \n                    \n                \n            \n            \n                \nAllRequired(...args: any)\n                \n            \n\n\n            \n                \n                    Defined in src/app/mixer/model/operation/topology.ts:347\n                \n            \n\n\n            \n                \n\n                    \n                        Parameters :\n                        \n                        \n                            \n                                \n                                    Name\n                                    Type\n                                    Optional\n                                \n                            \n                            \n                                \n                                    args\n                                    \n                                                any\n                                    \n\n                                    \n                                        No\n                                    \n\n\n                                \n                            \n                        \n                    \n                    \n                    \n                    \n                        Returns :         BaseOp\n\n                    \n                    \n                        \n                    \n                \n            \n        \n    \n    \n        \n            \n                \n                    \n                    \n                        DraftsOptional\n                        \n                    \n                \n            \n            \n                \nDraftsOptional(args: OpConstructorArgKeys)\n                \n            \n\n\n            \n                \n                    Defined in src/app/mixer/model/operation/topology.ts:329\n                \n            \n\n\n            \n                \n\n                    \n                        Parameters :\n                        \n                        \n                            \n                                \n                                    Name\n                                    Type\n                                    Optional\n                                \n                            \n                            \n                                \n                                    args\n                                    \n                                                OpConstructorArgKeys\n                                    \n\n                                    \n                                        No\n                                    \n\n\n                                \n                            \n                        \n                    \n                    \n                    \n                    \n                        Returns :         BaseOp\n\n                    \n                    \n                        \n                    \n                \n            \n        \n    \n    \n        \n            \n                \n                    \n                    \n                        DraftsOptional\n                        \n                    \n                \n            \n            \n                \nDraftsOptional(args: OpConstructorArray)\n                \n            \n\n\n            \n                \n                    Defined in src/app/mixer/model/operation/topology.ts:330\n                \n            \n\n\n            \n                \n\n                    \n                        Parameters :\n                        \n                        \n                            \n                                \n                                    Name\n                                    Type\n                                    Optional\n                                \n                            \n                            \n                                \n                                    args\n                                    \n                                                OpConstructorArray\n                                    \n\n                                    \n                                        No\n                                    \n\n\n                                \n                            \n                        \n                    \n                    \n                    \n                    \n                        Returns :         BaseOp\n\n                    \n                    \n                        \n                    \n                \n            \n        \n    \n    \n        \n            \n                \n                    \n                    \n                        DraftsOptional\n                        \n                    \n                \n            \n            \n                \nDraftsOptional(...args: any)\n                \n            \n\n\n            \n                \n                    Defined in src/app/mixer/model/operation/topology.ts:331\n                \n            \n\n\n            \n                \n\n                    \n                        Parameters :\n                        \n                        \n                            \n                                \n                                    Name\n                                    Type\n                                    Optional\n                                \n                            \n                            \n                                \n                                    args\n                                    \n                                                any\n                                    \n\n                                    \n                                        No\n                                    \n\n\n                                \n                            \n                        \n                    \n                    \n                    \n                    \n                        Returns :         BaseOp\n\n                    \n                    \n                        \n                    \n                \n            \n        \n    \n    \n        \n            \n                \n                    \n                    \n                        NoDrafts\n                        \n                    \n                \n            \n            \n                \nNoDrafts(args: OpConstructorArgKeys)\n                \n            \n\n\n            \n                \n                    Defined in src/app/mixer/model/operation/topology.ts:313\n                \n            \n\n\n            \n                \n\n                    \n                        Parameters :\n                        \n                        \n                            \n                                \n                                    Name\n                                    Type\n                                    Optional\n                                \n                            \n                            \n                                \n                                    args\n                                    \n                                                OpConstructorArgKeys\n                                    \n\n                                    \n                                        No\n                                    \n\n\n                                \n                            \n                        \n                    \n                    \n                    \n                    \n                        Returns :         BaseOp\n\n                    \n                    \n                        \n                    \n                \n            \n        \n    \n    \n        \n            \n                \n                    \n                    \n                        NoDrafts\n                        \n                    \n                \n            \n            \n                \nNoDrafts(args: OpConstructorArray)\n                \n            \n\n\n            \n                \n                    Defined in src/app/mixer/model/operation/topology.ts:314\n                \n            \n\n\n            \n                \n\n                    \n                        Parameters :\n                        \n                        \n                            \n                                \n                                    Name\n                                    Type\n                                    Optional\n                                \n                            \n                            \n                                \n                                    args\n                                    \n                                                OpConstructorArray\n                                    \n\n                                    \n                                        No\n                                    \n\n\n                                \n                            \n                        \n                    \n                    \n                    \n                    \n                        Returns :         BaseOp\n\n                    \n                    \n                        \n                    \n                \n            \n        \n    \n    \n        \n            \n                \n                    \n                    \n                        NoDrafts\n                        \n                    \n                \n            \n            \n                \nNoDrafts(...args: any)\n                \n            \n\n\n            \n                \n                    Defined in src/app/mixer/model/operation/topology.ts:315\n                \n            \n\n\n            \n                \n\n                    \n                        Parameters :\n                        \n                        \n                            \n                                \n                                    Name\n                                    Type\n                                    Optional\n                                \n                            \n                            \n                                \n                                    args\n                                    \n                                                any\n                                    \n\n                                    \n                                        No\n                                    \n\n\n                                \n                            \n                        \n                    \n                    \n                    \n                    \n                        Returns :         BaseOp\n\n                    \n                    \n                        \n                    \n                \n            \n        \n    \n    \n        \n            \n                \n                    \n                    \n                        NoParams\n                        \n                    \n                \n            \n            \n                \nNoParams(args: OpConstructorArgKeys)\n                \n            \n\n\n            \n                \n                    Defined in src/app/mixer/model/operation/topology.ts:321\n                \n            \n\n\n            \n                \n\n                    \n                        Parameters :\n                        \n                        \n                            \n                                \n                                    Name\n                                    Type\n                                    Optional\n                                \n                            \n                            \n                                \n                                    args\n                                    \n                                                OpConstructorArgKeys\n                                    \n\n                                    \n                                        No\n                                    \n\n\n                                \n                            \n                        \n                    \n                    \n                    \n                    \n                        Returns :         BaseOp\n\n                    \n                    \n                        \n                    \n                \n            \n        \n    \n    \n        \n            \n                \n                    \n                    \n                        NoParams\n                        \n                    \n                \n            \n            \n                \nNoParams(args: OpConstructorArray)\n                \n            \n\n\n            \n                \n                    Defined in src/app/mixer/model/operation/topology.ts:322\n                \n            \n\n\n            \n                \n\n                    \n                        Parameters :\n                        \n                        \n                            \n                                \n                                    Name\n                                    Type\n                                    Optional\n                                \n                            \n                            \n                                \n                                    args\n                                    \n                                                OpConstructorArray\n                                    \n\n                                    \n                                        No\n                                    \n\n\n                                \n                            \n                        \n                    \n                    \n                    \n                    \n                        Returns :         BaseOp\n\n                    \n                    \n                        \n                    \n                \n            \n        \n    \n    \n        \n            \n                \n                    \n                    \n                        NoParams\n                        \n                    \n                \n            \n            \n                \nNoParams(...args: any)\n                \n            \n\n\n            \n                \n                    Defined in src/app/mixer/model/operation/topology.ts:323\n                \n            \n\n\n            \n                \n\n                    \n                        Parameters :\n                        \n                        \n                            \n                                \n                                    Name\n                                    Type\n                                    Optional\n                                \n                            \n                            \n                                \n                                    args\n                                    \n                                                any\n                                    \n\n                                    \n                                        No\n                                    \n\n\n                                \n                            \n                        \n                    \n                    \n                    \n                    \n                        Returns :         BaseOp\n\n                    \n                    \n                        \n                    \n                \n            \n        \n    \n    \n        \n            \n                \n                    \n                    \n                        ParamsOptional\n                        \n                    \n                \n            \n            \n                \nParamsOptional(args: OpConstructorArgKeys)\n                \n            \n\n\n            \n                \n                    Defined in src/app/mixer/model/operation/topology.ts:337\n                \n            \n\n\n            \n                \n\n                    \n                        Parameters :\n                        \n                        \n                            \n                                \n                                    Name\n                                    Type\n                                    Optional\n                                \n                            \n                            \n                                \n                                    args\n                                    \n                                                OpConstructorArgKeys\n                                    \n\n                                    \n                                        No\n                                    \n\n\n                                \n                            \n                        \n                    \n                    \n                    \n                    \n                        Returns :         BaseOp\n\n                    \n                    \n                        \n                    \n                \n            \n        \n    \n    \n        \n            \n                \n                    \n                    \n                        ParamsOptional\n                        \n                    \n                \n            \n            \n                \nParamsOptional(args: OpConstructorArray)\n                \n            \n\n\n            \n                \n                    Defined in src/app/mixer/model/operation/topology.ts:338\n                \n            \n\n\n            \n                \n\n                    \n                        Parameters :\n                        \n                        \n                            \n                                \n                                    Name\n                                    Type\n                                    Optional\n                                \n                            \n                            \n                                \n                                    args\n                                    \n                                                OpConstructorArray\n                                    \n\n                                    \n                                        No\n                                    \n\n\n                                \n                            \n                        \n                    \n                    \n                    \n                    \n                        Returns :         BaseOp\n\n                    \n                    \n                        \n                    \n                \n            \n        \n    \n    \n        \n            \n                \n                    \n                    \n                        ParamsOptional\n                        \n                    \n                \n            \n            \n                \nParamsOptional(...args: any)\n                \n            \n\n\n            \n                \n                    Defined in src/app/mixer/model/operation/topology.ts:339\n                \n            \n\n\n            \n                \n\n                    \n                        Parameters :\n                        \n                        \n                            \n                                \n                                    Name\n                                    Type\n                                    Optional\n                                \n                            \n                            \n                                \n                                    args\n                                    \n                                                any\n                                    \n\n                                    \n                                        No\n                                    \n\n\n                                \n                            \n                        \n                    \n                    \n                    \n                    \n                        Returns :         BaseOp\n\n                    \n                    \n                        \n                    \n                \n            \n        \n    \n\n\n\n\n\n\n    \n\n\n    \n        import { Draft } from \"../../../core/model/datatypes\";\nimport { ParamValue, OperationParam as OpParam, getParamValues } from \"./params\";\nimport { OperationInlet as OpInlet, InletDrafts } from \"./inlets\";\n\n/**\n* At its heart, an Operation is a very fancy function that outputs a Draft or several Drafts.\n* The function itself is perform(), and the Operation can take inputs in the form of \n* Drafts (inlets) or Parameters (params).\n*/\n\n/** \n* Types that an Operation's perform() function can handlle as input/output\n*/\n\n/** @type Union of types that can serve as input to Operation perform() functions. */\nexport type PerformDraftInput = InletDrafts | Array | Draft | null;\n\ntype MultiDraftInput = InletDrafts | Array;\n\n/** @type Union of types that Operation perform() functions can output. */\nexport type PerformOutput = Array | Draft;\n\n/**\n * OPERATION TOPOLOGY\n * Topology refers to the shape of the Operation in terms of its\n * number of input and output Drafts. Classifies Operations.\n */\n\nexport const TopologyName = {\n  pipe: 'pipe', \n  seed: 'seed', \n  merge: 'merge', \n  branch: 'branch', \n  bus: 'bus'\n} as const;\nexport type TopologyName = keyof typeof TopologyName;\n\ninterface TopologyDef { type: TopologyName; input: PerformDraftInput; output: PerformOutput; };\n\n/**\n* @class\n* Operation that can generate a draft with no inputs, may take an optional input\n* @method perform OpPerform function: \n* - INPUT: zero or one Draft\n* - OUTPUT: exactly one Draft\n*/\nexport class Seed implements TopologyDef { type: 'seed'; input: Draft | null; output: Draft; };\n\n/**\n* @class\n* Operation that takes one input and generates one output draft. \n* @method perform OpPerform function: \n* - INPUT: exactly one Draft\n* - OUTPUT: exactly one Draft\n*/\nexport class Pipe implements TopologyDef { type: 'pipe'; input: Draft; output: Draft; };\n\n/**\n* @class\n* Operation that takes many (N) inputs and generates one output draft.\n* @method perform OpPerform function: \n* - INPUT: Array of Drafts\n* - OUTPUT: exactly one Draft\n*/\nexport class Merge implements TopologyDef { type: 'merge'; input: InletDrafts | Array; output: Draft; };\n\n/**\n* @class\n* Operation that takes one input and generates many (N) output drafts.\n* @method perform OpPerform function:\n* - INPUT: exactly one Draft\n* - OUTPUT: Array of Drafts\n*/\nexport class Branch implements TopologyDef { type: 'branch'; input: Draft; output: Array; };\n\n/**\n* CURRENTLY UNUSED\n* @class\n* Operation that takes many (N) inputs and generates many (M) output drafts.\n* Number of inputs does not necessarily match number of outputs (N ?= M).\n* @method perform OpPerform function:  \n* - INPUT: Array of Drafts\n* - OUTPUT: Array of Drafts\n*/\nexport class Bus implements TopologyDef { type: 'bus'; input: Array | InletDrafts; output: Array; };\n\ntype TopologyIndex = {\n  'seed': Seed,\n  'pipe': Pipe,\n  'merge': Merge,\n  'branch': Branch,\n  'bus': Bus\n}\ntype OpTopology = TopologyIndex[TopologyName];\n\n/**\n * OPERATION CONSTRAINT\n * A Constraint on an Operation classifies it based on its\n * input requirements (both Drafts and Params).\n */\n\nexport const ConstraintOptions = {\n  req: 'req', \n  opt: 'opt', \n  none: 'none'\n} as const;\nexport type ConstraintOptions = keyof typeof ConstraintOptions;\n\nexport const ConstraintName = {\n  no_drafts: { input_drafts: 'none', input_params: 'req' }, \n  no_params: { input_drafts: 'req', input_params: 'none' }, \n  drafts_opt: { input_drafts: 'opt', input_params: 'req' }, \n  params_opt: { input_drafts: 'req', input_params: 'opt' }, \n  all_req: {input_drafts: 'req', input_params: 'req' },\n} as const;\ntype ConstraintName = keyof typeof ConstraintName;\n\ntype ConstraintDefs = {\n  [C in keyof typeof ConstraintName]: {\n    constraint: C;\n    input_drafts: typeof ConstraintName[C][\"input_drafts\"];\n    input_params: typeof ConstraintName[C][\"input_params\"];\n  }\n}\n\nexport type NoDrafts = ConstraintDefs[\"no_drafts\"];\nexport type NoParams = ConstraintDefs[\"no_params\"];\nexport type DraftsOptional = ConstraintDefs[\"drafts_opt\"];\nexport type ParamsOptional = ConstraintDefs[\"params_opt\"];\nexport type AllRequired = ConstraintDefs[\"all_req\"];\n\ntype ConstraintIndex = {\n  'no_drafts': NoDrafts, // does not accept input drafts\n  'no_params': NoParams, // does not accept params\n  'drafts_opt': DraftsOptional, // can take no params -- has default values\n  'params_opt': ParamsOptional, // can take zero input drafts\n  'all_req': AllRequired, // both inputs and params required\n}\ntype OpConstraint = ConstraintIndex[ConstraintName]; \n\n/** \n* Generic types for perform() functions, describing options \n* for input draft multiplicity (0, 1, N) and param requirement \n*/\n\ntype NoDraftsPerform = {(params: Array): Topo[\"output\"]};\ntype NoParamsPerform = {(inputs: Topo[\"input\"]): Topo[\"output\"]};\ntype ParamsOptionalPerform = {(inputs: Topo[\"input\"], params?: Array): Topo[\"output\"]}; \ntype DraftsOptionalPerform = {(params: Array, inputs?: Topo[\"input\"]): Topo[\"output\"]};  \ntype AllRequiredPerform = {(inputs: Topo[\"input\"], params: Array): Topo[\"output\"]};  \n\ntype PerformCallSigs = {\n  no_drafts: { [Topo in keyof TopologyIndex]: NoDraftsPerform; },\n  no_params: { [Topo in keyof TopologyIndex]: NoParamsPerform; },\n  drafts_opt: { [Topo in keyof TopologyIndex]: DraftsOptionalPerform; },\n  params_opt: { [Topo in keyof TopologyIndex]: ParamsOptionalPerform; },\n  all_req: { [Topo in keyof TopologyIndex]: AllRequiredPerform; }\n}\n\n/**\n * @interface OpClassifier\n * Key-value pairs for an Operation's Topology and Constraint.\n */\ninterface OpClassifier {\n  type: Topo[\"type\"] | '';\n  input_drafts: Constraint[\"input_drafts\"] | '';\n  input_params: Constraint[\"input_params\"] | '';\n}\n\n/** @type User-defined descriptive strings for any Operation. */\ntype OperationDescriptors = { name: string, displayname: string, dx: string };\n\n/**\n* A standard Operation's metadata -- i.e. everything not the perform() function\n* @param name the internal name of this opearation (CHANGING THESE WILL BREAK LEGACY VERSIONS)\n* @param displayname the name to show upon this operation\n* @param dx the description of this operation\n* @param max_inputs the maximum number of inputs (drafts) allowed directly into this operation\n* @param params the parameters associated with this operation\n* @method perform an OpPerform function\n*/\nexport interface OperationProperties extends OperationDescriptors {\n  max_inputs: number,\n  default_params?: Array;\n  params: Array,\n}\n\n/**\n * @type A function that serves as the perform() method for an Operation. \n * This generic type requires two type parameters:\n * @param Topo one of the PerformInput types\n * @param Constraint one of the PerformOutput types\n *\n * OpPerform to give call signature for perform() function \n * Topo  = Seed | Pipe | Merge | Branch | Bus\n * Constraint = NoDrafts | NoParams | DraftsOptional | ParamsOptional | AllRequired\n */\nexport type OpPerform = PerformCallSigs[Constraint[\"constraint\"]][Topo[\"type\"]];\n// type PerformArgs = Parameters>;\n\n/** TODO doublecheck inlets have been added correctly (fields for input drafts) */\nexport class BaseOp implements OperationProperties {\n  name: string;\n  old_names: Array;\n  displayname: string;\n  dx: string;\n  params: Array;\n  inlets: Array;\n  default_params?: Array;\n  max_inputs: number;\n  classifier: OpClassifier;\n  perform: OpPerform;\n\n  /** @constructor create an Operation using an object literal (keys and values) */\n  constructor (args: OpConstructorArgs);\n  /** @constructor create an Operation using direct arguments in the constructor (values only) */\n  constructor (...args: OpConstructorArray);\n  constructor (name: string, displayname: string, dx: string, perform: OpPerform);\n  constructor (name: string, displayname: string, dx: string, params: Array, perform: OpPerform);\n  constructor (nameOrArgs: any, displayname?: string, dx?: string, performOrParams?: OpPerform | Array, performWithParams?: OpPerform) {\n    // console.log((nameOrArgs.name != undefined));\n    this.classifier = { type: '', input_drafts: '', input_params: '' };\n    if (nameOrArgs.name) {\n      let args = nameOrArgs;\n      this.name = args.name;\n      this.displayname = args.displayname;\n      this.dx = args.dx;\n      this.perform = args.perform;\n      if (args.params) this.params = args.params;\n      else this.params = [];\n      if (args.inlets) this.inlets = args.inlets;\n      else this.inlets = [];\n    } else {\n      this.name = nameOrArgs;\n      this.displayname = displayname;\n      this.dx = dx;\n      if (performWithParams) {\n        let params = > performOrParams;\n        this.params = params;\n        this.default_params = getParamValues(params);\n        this.perform = performWithParams;\n      } else {\n        this.params = [];\n        this.perform = > performOrParams;\n      }\n    }\n  }\n\n  constrain(c: ConstraintName): void {\n    if (c == 'no_drafts') { this.max_inputs = 0; this.inlets = []; }\n    this.classifier.input_drafts = ConstraintName[c][\"input_drafts\"]; \n    this.classifier.input_params = ConstraintName[c][\"input_params\"];\n  }\n\n  type(t: TopologyName): BaseOp {\n    this.classifier.type = t;\n    return this;\n  }\n}\n\ntype ConstructorArgKeysIndex = {\n  [C in keyof ConstraintIndex]: C extends \"no_params\" ? {\n    [T in keyof TopologyIndex]: {\n      name: string, displayname: string, dx: string, old_names: string[],\n      inlets: OpInlet[], perform: OpPerform\n    }\n  } : C extends \"no_drafts\" ? {\n    [T in keyof TopologyIndex]: {\n      name: string, displayname: string, dx: string, old_names: string[],\n      params: OpParam[], perform: OpPerform\n    }\n  } : {\n    [T in keyof TopologyIndex]: {\n      name: string, displayname: string, dx: string, old_names: string[],\n      params: OpParam[], inlets: OpInlet[],\n      perform: OpPerform\n    }\n  }\n}\n\ntype ConstructorArrayIndex = {\n  [C in keyof ConstraintIndex]: C extends \"no_params\" ? {\n    [T in keyof TopologyIndex]: [\n      name: string, displayname: string, dx: string, old_names: string[],\n      inlets: OpInlet[], perform: OpPerform\n    ]\n  } : C extends \"no_drafts\" ? {\n    [T in keyof TopologyIndex]: [\n      name: string, displayname: string, dx: string, old_names: string[],\n      params: OpParam[], perform: OpPerform\n    ]\n  } : {\n    [T in keyof TopologyIndex]: [\n      name: string, displayname: string, dx: string, old_names: string[],\n      params: OpParam[], inlets: OpInlet[],\n      perform: OpPerform\n    ]\n  }\n}\n\ntype OpConstructorArgKeys = \nConstructorArgKeysIndex[Constraint[\"constraint\"]][Topo[\"type\"]];\n\ntype OpConstructorArray = \nConstructorArrayIndex[Constraint[\"constraint\"]][Topo[\"type\"]];\n\ntype OpConstructorArgs = \nOpConstructorArgKeys | OpConstructorArray;\n\n// use factory design pattern to apply classifiers to BaseOp?? Is this too convoluted\n// https://refactoring.guru/design-patterns/abstract-factory/typescript\nclass AbstractOpFactory {\n  NoDrafts(args: OpConstructorArgKeys): BaseOp;\n  NoDrafts(...args: OpConstructorArray): BaseOp;\n  NoDrafts(...args: any) {\n    let op = new BaseOp(...args);\n    op.constrain(\"no_drafts\");\n    return op;\n  }\n\n  NoParams(args: OpConstructorArgKeys): BaseOp;\n  NoParams(...args: OpConstructorArray): BaseOp;\n  NoParams(...args: any) {\n    let op = new BaseOp(...args);\n    op.constrain(\"no_params\");\n    return op;\n  }\n\n  DraftsOptional(args: OpConstructorArgKeys): BaseOp;\n  DraftsOptional(...args: OpConstructorArray): BaseOp;\n  DraftsOptional(...args: any) {\n    let op = new BaseOp(...args);\n    op.constrain(\"drafts_opt\");\n    return op;\n  }\n\n  ParamsOptional(args: OpConstructorArgKeys): BaseOp;\n  ParamsOptional(...args: OpConstructorArray): BaseOp;\n  ParamsOptional(...args: any) {\n    let op = new BaseOp(...args);\n    op.constrain(\"params_opt\");\n    return op;\n  }\n\n  AllRequired(args: OpConstructorArgKeys): BaseOp;\n  AllRequired(...args: OpConstructorArray): BaseOp;\n  AllRequired(...args: any) {\n    let op = new BaseOp(...args);\n    op.constrain(\"all_req\");\n    return op;\n  }\n}\n\n// combine with mix-ins design pattern (link: TypeScript docs website)\nfunction makeTopoFactory(topo: TopologyName) {\n  return class TopologyFactory extends AbstractOpFactory {\n    static base = new AbstractOpFactory();\n    \n    static NoDrafts(args: OpConstructorArgKeys): BaseOp;\n    static NoDrafts(...args: OpConstructorArray): BaseOp;\n    static NoDrafts(...args: any) {\n      return this.base.NoDrafts(...args).type(topo);\n    }\n\n    static NoParams(args: OpConstructorArgKeys): BaseOp;\n    static NoParams(...args: OpConstructorArray): BaseOp;\n    static NoParams(...args: any) {\n      return this.base.NoParams(...args).type(topo);\n    }\n\n    static DraftsOptional(args: OpConstructorArgKeys): BaseOp;\n    static DraftsOptional(...args: OpConstructorArray): BaseOp;\n    static DraftsOptional(...args: any) {\n      return this.base.DraftsOptional(...args).type(topo);\n    }\n\n    static ParamsOptional(args: OpConstructorArgKeys): BaseOp;\n    static ParamsOptional(...args: OpConstructorArray): BaseOp;\n    static ParamsOptional(...args: any) {\n      return this.base.ParamsOptional(...args).type(topo);\n    }\n\n    static AllRequired(args: OpConstructorArgKeys): BaseOp;\n    static AllRequired(...args: OpConstructorArray): BaseOp;\n    static AllRequired(...args: any) {\n      return this.base.AllRequired(...args).type(topo);\n    }\n  }\n}\n\nexport const OpFactories = {\n  Seed: makeTopoFactory(\"seed\"),\n  Pipe: makeTopoFactory(\"pipe\"),\n  Merge: makeTopoFactory(\"merge\"),\n  Branch: makeTopoFactory(\"merge\"),\n  Bus: makeTopoFactory(\"bus\"),\n}\n\n// export const SeedOperation = makeTopoFactory(\"seed\");\n// export const PipeOperation = makeTopoFactory(\"pipe\");\n// export const MergeOperation = makeTopoFactory(\"merge\");\n// export const BranchOperation = makeTopoFactory(\"merge\");\n// export const BusOperation = makeTopoFactory(\"bus\");\n\ntype TopologyOpIndex = {\n  [T in keyof TopologyIndex]: {\n    [C in keyof ConstraintIndex]: BaseOp;\n  }\n}\n\nexport type BuildableOperation = TopologyOpIndex[TopologyName][ConstraintName];\n    \n\n\n\n\n\n\n\n\n\n\n                   \n    \n         results matching \"\"\n        \n    \n    \n        No results matching \"\"\n    \n\n"},"classes/BaseOp.html":{"url":"classes/BaseOp.html","title":"class - BaseOp","body":"\n                   \n\n\n\n\n\n\n\n\n\n\n\n\n\n  Classes\n  BaseOp\n\n\n\n        \n            Info\n        \n        \n            Source\n        \n\n\n\n    \n        \n            File\n        \n        \n            src/app/mixer/model/operation/topology.ts\n        \n\n\n            \n                Description\n            \n            \n                TODO doublecheck inlets have been added correctly (fields for input drafts)\n\n            \n\n\n            \n                Implements\n            \n            \n                            OperationProperties\n            \n\n\n            \n    Index\n    \n        \n                \n                    \n                        Properties\n                    \n                \n                \n                    \n                        \n                            \n                                classifier\n                            \n                            \n                                    Optional\n                                default_params\n                            \n                            \n                                displayname\n                            \n                            \n                                dx\n                            \n                            \n                                inlets\n                            \n                            \n                                max_inputs\n                            \n                            \n                                name\n                            \n                            \n                                old_names\n                            \n                            \n                                params\n                            \n                            \n                                perform\n                            \n                        \n                    \n                \n\n                \n                    \n                        Methods\n                    \n                \n                \n                    \n                        \n                            \n                                constrain\n                            \n                            \n                                type\n                            \n                        \n                    \n                \n\n\n\n\n\n        \n    \n\n\n            \n    Constructor\n        \n            \n                \n                    \nconstructor(nameOrArgs: any, displayname?: string, dx?: string, performOrParams?: OpPerform | Array, performWithParams?: OpPerform)\n                    \n                \n                        \n                            \n                                Defined in src/app/mixer/model/operation/topology.ts:219\n                            \n                        \n\n                \n                    \n                            \n                                    Parameters :\n                                    \n                                        \n                                            \n                                                Name\n                                                    Type\n                                                Optional\n                                            \n                                        \n                                        \n                                                \n                                                        nameOrArgs\n                                                  \n                                                        \n                                                                        any\n                                                        \n                                                  \n                                                    \n                                                            No\n                                                    \n                                                    \n                                                \n                                                \n                                                        displayname\n                                                  \n                                                        \n                                                                        string\n                                                        \n                                                  \n                                                    \n                                                            Yes\n                                                    \n                                                    \n                                                \n                                                \n                                                        dx\n                                                  \n                                                        \n                                                                        string\n                                                        \n                                                  \n                                                    \n                                                            Yes\n                                                    \n                                                    \n                                                \n                                                \n                                                        performOrParams\n                                                  \n                                                        \n                                                                        OpPerform | Array\n                                                        \n                                                  \n                                                    \n                                                            Yes\n                                                    \n                                                    \n                                                \n                                                \n                                                        performWithParams\n                                                  \n                                                        \n                                                                        OpPerform\n                                                        \n                                                  \n                                                    \n                                                            Yes\n                                                    \n                                                    \n                                                \n                                        \n                                    \n                            \n                    \n                \n            \n        \n\n\n            \n    \n    \n        Properties\n    \n    \n        \n            \n                \n                    \n                    \n                        classifier\n                        \n                    \n                \n            \n                \n                    \n                        Type :         OpClassifier\n\n                    \n                \n                    \n                        \n                                Defined in src/app/mixer/model/operation/topology.ts:211\n                        \n                    \n\n\n        \n    \n    \n        \n            \n                \n                    \n                    \n                            Optional\n                        default_params\n                        \n                    \n                \n            \n                \n                    \n                        Type :         Array\n\n                    \n                \n                    \n                        \n                                Defined in src/app/mixer/model/operation/topology.ts:209\n                        \n                    \n\n\n        \n    \n    \n        \n            \n                \n                    \n                    \n                        displayname\n                        \n                    \n                \n            \n                \n                    \n                        Type :         string\n\n                    \n                \n                    \n                        \n                                Defined in src/app/mixer/model/operation/topology.ts:205\n                        \n                    \n\n\n        \n    \n    \n        \n            \n                \n                    \n                    \n                        dx\n                        \n                    \n                \n            \n                \n                    \n                        Type :         string\n\n                    \n                \n                    \n                        \n                                Defined in src/app/mixer/model/operation/topology.ts:206\n                        \n                    \n\n\n        \n    \n    \n        \n            \n                \n                    \n                    \n                        inlets\n                        \n                    \n                \n            \n                \n                    \n                        Type :     Array\n\n                    \n                \n                    \n                        \n                                Defined in src/app/mixer/model/operation/topology.ts:208\n                        \n                    \n\n\n        \n    \n    \n        \n            \n                \n                    \n                    \n                        max_inputs\n                        \n                    \n                \n            \n                \n                    \n                        Type :         number\n\n                    \n                \n                    \n                        \n                                Defined in src/app/mixer/model/operation/topology.ts:210\n                        \n                    \n\n\n        \n    \n    \n        \n            \n                \n                    \n                    \n                        name\n                        \n                    \n                \n            \n                \n                    \n                        Type :         string\n\n                    \n                \n                    \n                        \n                                Defined in src/app/mixer/model/operation/topology.ts:203\n                        \n                    \n\n\n        \n    \n    \n        \n            \n                \n                    \n                    \n                        old_names\n                        \n                    \n                \n            \n                \n                    \n                        Type :     Array\n\n                    \n                \n                    \n                        \n                                Defined in src/app/mixer/model/operation/topology.ts:204\n                        \n                    \n\n\n        \n    \n    \n        \n            \n                \n                    \n                    \n                        params\n                        \n                    \n                \n            \n                \n                    \n                        Type :     Array\n\n                    \n                \n                    \n                        \n                                Defined in src/app/mixer/model/operation/topology.ts:207\n                        \n                    \n\n\n        \n    \n    \n        \n            \n                \n                    \n                    \n                        perform\n                        \n                    \n                \n            \n                \n                    \n                        Type :         OpPerform\n\n                    \n                \n                    \n                        \n                                Defined in src/app/mixer/model/operation/topology.ts:212\n                        \n                    \n\n\n        \n    \n\n\n            \n    \n    \n        Methods\n    \n    \n        \n            \n                \n                    \n                    \n                        constrain\n                        \n                    \n                \n            \n            \n                \nconstrain(c: ConstraintName)\n                \n            \n\n\n            \n                \n                    Defined in src/app/mixer/model/operation/topology.ts:249\n                \n            \n\n\n            \n                \n\n                    \n                        Parameters :\n                        \n                        \n                            \n                                \n                                    Name\n                                    Type\n                                    Optional\n                                \n                            \n                            \n                                \n                                    c\n                                    \n                                                ConstraintName\n                                    \n\n                                    \n                                        No\n                                    \n\n\n                                \n                            \n                        \n                    \n                    \n                    \n                    \n                        Returns :         void\n\n                    \n                    \n                        \n                    \n                \n            \n        \n    \n    \n        \n            \n                \n                    \n                    \n                        type\n                        \n                    \n                \n            \n            \n                \ntype(t: TopologyName)\n                \n            \n\n\n            \n                \n                    Defined in src/app/mixer/model/operation/topology.ts:255\n                \n            \n\n\n            \n                \n\n                    \n                        Parameters :\n                        \n                        \n                            \n                                \n                                    Name\n                                    Type\n                                    Optional\n                                \n                            \n                            \n                                \n                                    t\n                                    \n                                                TopologyName\n                                    \n\n                                    \n                                        No\n                                    \n\n\n                                \n                            \n                        \n                    \n                    \n                    \n                    \n                        Returns :         BaseOp\n\n                    \n                    \n                        \n                    \n                \n            \n        \n    \n\n\n\n\n\n\n    \n\n\n    \n        import { Draft } from \"../../../core/model/datatypes\";\nimport { ParamValue, OperationParam as OpParam, getParamValues } from \"./params\";\nimport { OperationInlet as OpInlet, InletDrafts } from \"./inlets\";\n\n/**\n* At its heart, an Operation is a very fancy function that outputs a Draft or several Drafts.\n* The function itself is perform(), and the Operation can take inputs in the form of \n* Drafts (inlets) or Parameters (params).\n*/\n\n/** \n* Types that an Operation's perform() function can handlle as input/output\n*/\n\n/** @type Union of types that can serve as input to Operation perform() functions. */\nexport type PerformDraftInput = InletDrafts | Array | Draft | null;\n\ntype MultiDraftInput = InletDrafts | Array;\n\n/** @type Union of types that Operation perform() functions can output. */\nexport type PerformOutput = Array | Draft;\n\n/**\n * OPERATION TOPOLOGY\n * Topology refers to the shape of the Operation in terms of its\n * number of input and output Drafts. Classifies Operations.\n */\n\nexport const TopologyName = {\n  pipe: 'pipe', \n  seed: 'seed', \n  merge: 'merge', \n  branch: 'branch', \n  bus: 'bus'\n} as const;\nexport type TopologyName = keyof typeof TopologyName;\n\ninterface TopologyDef { type: TopologyName; input: PerformDraftInput; output: PerformOutput; };\n\n/**\n* @class\n* Operation that can generate a draft with no inputs, may take an optional input\n* @method perform OpPerform function: \n* - INPUT: zero or one Draft\n* - OUTPUT: exactly one Draft\n*/\nexport class Seed implements TopologyDef { type: 'seed'; input: Draft | null; output: Draft; };\n\n/**\n* @class\n* Operation that takes one input and generates one output draft. \n* @method perform OpPerform function: \n* - INPUT: exactly one Draft\n* - OUTPUT: exactly one Draft\n*/\nexport class Pipe implements TopologyDef { type: 'pipe'; input: Draft; output: Draft; };\n\n/**\n* @class\n* Operation that takes many (N) inputs and generates one output draft.\n* @method perform OpPerform function: \n* - INPUT: Array of Drafts\n* - OUTPUT: exactly one Draft\n*/\nexport class Merge implements TopologyDef { type: 'merge'; input: InletDrafts | Array; output: Draft; };\n\n/**\n* @class\n* Operation that takes one input and generates many (N) output drafts.\n* @method perform OpPerform function:\n* - INPUT: exactly one Draft\n* - OUTPUT: Array of Drafts\n*/\nexport class Branch implements TopologyDef { type: 'branch'; input: Draft; output: Array; };\n\n/**\n* CURRENTLY UNUSED\n* @class\n* Operation that takes many (N) inputs and generates many (M) output drafts.\n* Number of inputs does not necessarily match number of outputs (N ?= M).\n* @method perform OpPerform function:  \n* - INPUT: Array of Drafts\n* - OUTPUT: Array of Drafts\n*/\nexport class Bus implements TopologyDef { type: 'bus'; input: Array | InletDrafts; output: Array; };\n\ntype TopologyIndex = {\n  'seed': Seed,\n  'pipe': Pipe,\n  'merge': Merge,\n  'branch': Branch,\n  'bus': Bus\n}\ntype OpTopology = TopologyIndex[TopologyName];\n\n/**\n * OPERATION CONSTRAINT\n * A Constraint on an Operation classifies it based on its\n * input requirements (both Drafts and Params).\n */\n\nexport const ConstraintOptions = {\n  req: 'req', \n  opt: 'opt', \n  none: 'none'\n} as const;\nexport type ConstraintOptions = keyof typeof ConstraintOptions;\n\nexport const ConstraintName = {\n  no_drafts: { input_drafts: 'none', input_params: 'req' }, \n  no_params: { input_drafts: 'req', input_params: 'none' }, \n  drafts_opt: { input_drafts: 'opt', input_params: 'req' }, \n  params_opt: { input_drafts: 'req', input_params: 'opt' }, \n  all_req: {input_drafts: 'req', input_params: 'req' },\n} as const;\ntype ConstraintName = keyof typeof ConstraintName;\n\ntype ConstraintDefs = {\n  [C in keyof typeof ConstraintName]: {\n    constraint: C;\n    input_drafts: typeof ConstraintName[C][\"input_drafts\"];\n    input_params: typeof ConstraintName[C][\"input_params\"];\n  }\n}\n\nexport type NoDrafts = ConstraintDefs[\"no_drafts\"];\nexport type NoParams = ConstraintDefs[\"no_params\"];\nexport type DraftsOptional = ConstraintDefs[\"drafts_opt\"];\nexport type ParamsOptional = ConstraintDefs[\"params_opt\"];\nexport type AllRequired = ConstraintDefs[\"all_req\"];\n\ntype ConstraintIndex = {\n  'no_drafts': NoDrafts, // does not accept input drafts\n  'no_params': NoParams, // does not accept params\n  'drafts_opt': DraftsOptional, // can take no params -- has default values\n  'params_opt': ParamsOptional, // can take zero input drafts\n  'all_req': AllRequired, // both inputs and params required\n}\ntype OpConstraint = ConstraintIndex[ConstraintName]; \n\n/** \n* Generic types for perform() functions, describing options \n* for input draft multiplicity (0, 1, N) and param requirement \n*/\n\ntype NoDraftsPerform = {(params: Array): Topo[\"output\"]};\ntype NoParamsPerform = {(inputs: Topo[\"input\"]): Topo[\"output\"]};\ntype ParamsOptionalPerform = {(inputs: Topo[\"input\"], params?: Array): Topo[\"output\"]}; \ntype DraftsOptionalPerform = {(params: Array, inputs?: Topo[\"input\"]): Topo[\"output\"]};  \ntype AllRequiredPerform = {(inputs: Topo[\"input\"], params: Array): Topo[\"output\"]};  \n\ntype PerformCallSigs = {\n  no_drafts: { [Topo in keyof TopologyIndex]: NoDraftsPerform; },\n  no_params: { [Topo in keyof TopologyIndex]: NoParamsPerform; },\n  drafts_opt: { [Topo in keyof TopologyIndex]: DraftsOptionalPerform; },\n  params_opt: { [Topo in keyof TopologyIndex]: ParamsOptionalPerform; },\n  all_req: { [Topo in keyof TopologyIndex]: AllRequiredPerform; }\n}\n\n/**\n * @interface OpClassifier\n * Key-value pairs for an Operation's Topology and Constraint.\n */\ninterface OpClassifier {\n  type: Topo[\"type\"] | '';\n  input_drafts: Constraint[\"input_drafts\"] | '';\n  input_params: Constraint[\"input_params\"] | '';\n}\n\n/** @type User-defined descriptive strings for any Operation. */\ntype OperationDescriptors = { name: string, displayname: string, dx: string };\n\n/**\n* A standard Operation's metadata -- i.e. everything not the perform() function\n* @param name the internal name of this opearation (CHANGING THESE WILL BREAK LEGACY VERSIONS)\n* @param displayname the name to show upon this operation\n* @param dx the description of this operation\n* @param max_inputs the maximum number of inputs (drafts) allowed directly into this operation\n* @param params the parameters associated with this operation\n* @method perform an OpPerform function\n*/\nexport interface OperationProperties extends OperationDescriptors {\n  max_inputs: number,\n  default_params?: Array;\n  params: Array,\n}\n\n/**\n * @type A function that serves as the perform() method for an Operation. \n * This generic type requires two type parameters:\n * @param Topo one of the PerformInput types\n * @param Constraint one of the PerformOutput types\n *\n * OpPerform to give call signature for perform() function \n * Topo  = Seed | Pipe | Merge | Branch | Bus\n * Constraint = NoDrafts | NoParams | DraftsOptional | ParamsOptional | AllRequired\n */\nexport type OpPerform = PerformCallSigs[Constraint[\"constraint\"]][Topo[\"type\"]];\n// type PerformArgs = Parameters>;\n\n/** TODO doublecheck inlets have been added correctly (fields for input drafts) */\nexport class BaseOp implements OperationProperties {\n  name: string;\n  old_names: Array;\n  displayname: string;\n  dx: string;\n  params: Array;\n  inlets: Array;\n  default_params?: Array;\n  max_inputs: number;\n  classifier: OpClassifier;\n  perform: OpPerform;\n\n  /** @constructor create an Operation using an object literal (keys and values) */\n  constructor (args: OpConstructorArgs);\n  /** @constructor create an Operation using direct arguments in the constructor (values only) */\n  constructor (...args: OpConstructorArray);\n  constructor (name: string, displayname: string, dx: string, perform: OpPerform);\n  constructor (name: string, displayname: string, dx: string, params: Array, perform: OpPerform);\n  constructor (nameOrArgs: any, displayname?: string, dx?: string, performOrParams?: OpPerform | Array, performWithParams?: OpPerform) {\n    // console.log((nameOrArgs.name != undefined));\n    this.classifier = { type: '', input_drafts: '', input_params: '' };\n    if (nameOrArgs.name) {\n      let args = nameOrArgs;\n      this.name = args.name;\n      this.displayname = args.displayname;\n      this.dx = args.dx;\n      this.perform = args.perform;\n      if (args.params) this.params = args.params;\n      else this.params = [];\n      if (args.inlets) this.inlets = args.inlets;\n      else this.inlets = [];\n    } else {\n      this.name = nameOrArgs;\n      this.displayname = displayname;\n      this.dx = dx;\n      if (performWithParams) {\n        let params = > performOrParams;\n        this.params = params;\n        this.default_params = getParamValues(params);\n        this.perform = performWithParams;\n      } else {\n        this.params = [];\n        this.perform = > performOrParams;\n      }\n    }\n  }\n\n  constrain(c: ConstraintName): void {\n    if (c == 'no_drafts') { this.max_inputs = 0; this.inlets = []; }\n    this.classifier.input_drafts = ConstraintName[c][\"input_drafts\"]; \n    this.classifier.input_params = ConstraintName[c][\"input_params\"];\n  }\n\n  type(t: TopologyName): BaseOp {\n    this.classifier.type = t;\n    return this;\n  }\n}\n\ntype ConstructorArgKeysIndex = {\n  [C in keyof ConstraintIndex]: C extends \"no_params\" ? {\n    [T in keyof TopologyIndex]: {\n      name: string, displayname: string, dx: string, old_names: string[],\n      inlets: OpInlet[], perform: OpPerform\n    }\n  } : C extends \"no_drafts\" ? {\n    [T in keyof TopologyIndex]: {\n      name: string, displayname: string, dx: string, old_names: string[],\n      params: OpParam[], perform: OpPerform\n    }\n  } : {\n    [T in keyof TopologyIndex]: {\n      name: string, displayname: string, dx: string, old_names: string[],\n      params: OpParam[], inlets: OpInlet[],\n      perform: OpPerform\n    }\n  }\n}\n\ntype ConstructorArrayIndex = {\n  [C in keyof ConstraintIndex]: C extends \"no_params\" ? {\n    [T in keyof TopologyIndex]: [\n      name: string, displayname: string, dx: string, old_names: string[],\n      inlets: OpInlet[], perform: OpPerform\n    ]\n  } : C extends \"no_drafts\" ? {\n    [T in keyof TopologyIndex]: [\n      name: string, displayname: string, dx: string, old_names: string[],\n      params: OpParam[], perform: OpPerform\n    ]\n  } : {\n    [T in keyof TopologyIndex]: [\n      name: string, displayname: string, dx: string, old_names: string[],\n      params: OpParam[], inlets: OpInlet[],\n      perform: OpPerform\n    ]\n  }\n}\n\ntype OpConstructorArgKeys = \nConstructorArgKeysIndex[Constraint[\"constraint\"]][Topo[\"type\"]];\n\ntype OpConstructorArray = \nConstructorArrayIndex[Constraint[\"constraint\"]][Topo[\"type\"]];\n\ntype OpConstructorArgs = \nOpConstructorArgKeys | OpConstructorArray;\n\n// use factory design pattern to apply classifiers to BaseOp?? Is this too convoluted\n// https://refactoring.guru/design-patterns/abstract-factory/typescript\nclass AbstractOpFactory {\n  NoDrafts(args: OpConstructorArgKeys): BaseOp;\n  NoDrafts(...args: OpConstructorArray): BaseOp;\n  NoDrafts(...args: any) {\n    let op = new BaseOp(...args);\n    op.constrain(\"no_drafts\");\n    return op;\n  }\n\n  NoParams(args: OpConstructorArgKeys): BaseOp;\n  NoParams(...args: OpConstructorArray): BaseOp;\n  NoParams(...args: any) {\n    let op = new BaseOp(...args);\n    op.constrain(\"no_params\");\n    return op;\n  }\n\n  DraftsOptional(args: OpConstructorArgKeys): BaseOp;\n  DraftsOptional(...args: OpConstructorArray): BaseOp;\n  DraftsOptional(...args: any) {\n    let op = new BaseOp(...args);\n    op.constrain(\"drafts_opt\");\n    return op;\n  }\n\n  ParamsOptional(args: OpConstructorArgKeys): BaseOp;\n  ParamsOptional(...args: OpConstructorArray): BaseOp;\n  ParamsOptional(...args: any) {\n    let op = new BaseOp(...args);\n    op.constrain(\"params_opt\");\n    return op;\n  }\n\n  AllRequired(args: OpConstructorArgKeys): BaseOp;\n  AllRequired(...args: OpConstructorArray): BaseOp;\n  AllRequired(...args: any) {\n    let op = new BaseOp(...args);\n    op.constrain(\"all_req\");\n    return op;\n  }\n}\n\n// combine with mix-ins design pattern (link: TypeScript docs website)\nfunction makeTopoFactory(topo: TopologyName) {\n  return class TopologyFactory extends AbstractOpFactory {\n    static base = new AbstractOpFactory();\n    \n    static NoDrafts(args: OpConstructorArgKeys): BaseOp;\n    static NoDrafts(...args: OpConstructorArray): BaseOp;\n    static NoDrafts(...args: any) {\n      return this.base.NoDrafts(...args).type(topo);\n    }\n\n    static NoParams(args: OpConstructorArgKeys): BaseOp;\n    static NoParams(...args: OpConstructorArray): BaseOp;\n    static NoParams(...args: any) {\n      return this.base.NoParams(...args).type(topo);\n    }\n\n    static DraftsOptional(args: OpConstructorArgKeys): BaseOp;\n    static DraftsOptional(...args: OpConstructorArray): BaseOp;\n    static DraftsOptional(...args: any) {\n      return this.base.DraftsOptional(...args).type(topo);\n    }\n\n    static ParamsOptional(args: OpConstructorArgKeys): BaseOp;\n    static ParamsOptional(...args: OpConstructorArray): BaseOp;\n    static ParamsOptional(...args: any) {\n      return this.base.ParamsOptional(...args).type(topo);\n    }\n\n    static AllRequired(args: OpConstructorArgKeys): BaseOp;\n    static AllRequired(...args: OpConstructorArray): BaseOp;\n    static AllRequired(...args: any) {\n      return this.base.AllRequired(...args).type(topo);\n    }\n  }\n}\n\nexport const OpFactories = {\n  Seed: makeTopoFactory(\"seed\"),\n  Pipe: makeTopoFactory(\"pipe\"),\n  Merge: makeTopoFactory(\"merge\"),\n  Branch: makeTopoFactory(\"merge\"),\n  Bus: makeTopoFactory(\"bus\"),\n}\n\n// export const SeedOperation = makeTopoFactory(\"seed\");\n// export const PipeOperation = makeTopoFactory(\"pipe\");\n// export const MergeOperation = makeTopoFactory(\"merge\");\n// export const BranchOperation = makeTopoFactory(\"merge\");\n// export const BusOperation = makeTopoFactory(\"bus\");\n\ntype TopologyOpIndex = {\n  [T in keyof TopologyIndex]: {\n    [C in keyof ConstraintIndex]: BaseOp;\n  }\n}\n\nexport type BuildableOperation = TopologyOpIndex[TopologyName][ConstraintName];\n    \n\n\n\n\n\n\n\n\n\n\n                   \n    \n         results matching \"\"\n        \n    \n    \n        No results matching \"\"\n    \n\n"},"interfaces/Bounds.html":{"url":"interfaces/Bounds.html","title":"interface - Bounds","body":"\n                   \n\n\n\n\n\n\n\n\n\n\n\n\n\n\n  Interfaces\n  \n  Bounds\n\n\n\n        \n            Info\n        \n        \n            Source\n        \n\n\n\n    \n        \n            File\n        \n        \n            src/app/core/model/datatypes/screenlayout.ts\n        \n\n\n            \n                Description\n            \n            \n                Describes a rectangle on the screen.\n\n            \n\n\n        \n            Index\n            \n                \n                    \n                        \n                            Properties\n                        \n                    \n                    \n                        \n                            \n                                \n                                        \n                                            height\n                                        \n                                \n                                \n                                        \n                                            topleft\n                                        \n                                \n                                \n                                        \n                                            width\n                                        \n                                \n                            \n                        \n                    \n                \n            \n        \n\n\n\n            \n                Properties\n                    \n                        \n                                \n                                    \n                                        \n                                        height\n                                            \n                                                \n                                            \n                                        \n                                    \n                                \n                                \n                                    \n                                        height:         number\n\n                                    \n                                \n\n\n                                    \n                                        \n                                            Type :         number\n\n                                        \n                                    \n\n\n\n\n\n                        \n                    \n                    \n                        \n                                \n                                    \n                                        \n                                        topleft\n                                            \n                                                \n                                            \n                                        \n                                    \n                                \n                                \n                                    \n                                        topleft:         Point\n\n                                    \n                                \n\n\n                                    \n                                        \n                                            Type :         Point\n\n                                        \n                                    \n\n\n\n\n\n                        \n                    \n                    \n                        \n                                \n                                    \n                                        \n                                        width\n                                            \n                                                \n                                            \n                                        \n                                    \n                                \n                                \n                                    \n                                        width:         number\n\n                                    \n                                \n\n\n                                    \n                                        \n                                            Type :         number\n\n                                        \n                                    \n\n\n\n\n\n                        \n                    \n            \n    \n\n\n    \n        export interface Point {\n    x: number;\n    y: number;\n  }\n  \n  /**\n   * Describes a rectangle on the screen.\n   * @param topleft - position of this rectanble\n   * @param width - the width of the rectangle\n   * @param height - the height of this rectanble.\n   */\n  export interface Bounds {\n    topleft: Point;  //row on draft\n    width: number;  //column on draft \n    height: number; //corresponding screen row\n  }\n  \n  // /**\n  //  * A type to communicate locations on the loom that have been updated in response to a given action\n  //  */\n  // interface LoomUpdate {\n  //   threading: Array,\n  //   treadling: Array,\n  //   tieup: Array>\n  // }\n    \n\n\n\n\n\n\n\n\n\n                   \n    \n         results matching \"\"\n        \n    \n    \n        No results matching \"\"\n    \n\n"},"classes/Branch.html":{"url":"classes/Branch.html","title":"class - Branch","body":"\n                   \n\n\n\n\n\n\n\n\n\n\n\n\n\n  Classes\n  Branch\n\n\n\n        \n            Info\n        \n        \n            Source\n        \n\n\n\n    \n        \n            File\n        \n        \n            src/app/mixer/model/operation/topology.ts\n        \n\n\n            \n                Description\n            \n            \n                Operation that takes one input and generates many (N) output drafts.\n\nINPUT: exactly one Draft\nOUTPUT: Array of Drafts\n\n\n            \n\n\n            \n                Implements\n            \n            \n                            TopologyDef\n            \n\n\n            \n    Index\n    \n        \n                \n                    \n                        Properties\n                    \n                \n                \n                    \n                        \n                            \n                                input\n                            \n                            \n                                output\n                            \n                            \n                                type\n                            \n                        \n                    \n                \n\n\n\n\n\n\n        \n    \n\n\n\n            \n    \n    \n        Properties\n    \n    \n        \n            \n                \n                    \n                    \n                        input\n                        \n                    \n                \n            \n                \n                    \n                        Type :         Draft\n\n                    \n                \n                    \n                        \n                                Defined in src/app/mixer/model/operation/topology.ts:74\n                        \n                    \n\n\n        \n    \n    \n        \n            \n                \n                    \n                    \n                        output\n                        \n                    \n                \n            \n                \n                    \n                        Type :         Array\n\n                    \n                \n                    \n                        \n                                Defined in src/app/mixer/model/operation/topology.ts:74\n                        \n                    \n\n\n        \n    \n    \n        \n            \n                \n                    \n                    \n                        type\n                        \n                    \n                \n            \n                    \n                        \n                                Defined in src/app/mixer/model/operation/topology.ts:74\n                        \n                    \n\n\n        \n    \n\n\n\n\n\n\n\n\n    \n\n\n    \n        import { Draft } from \"../../../core/model/datatypes\";\nimport { ParamValue, OperationParam as OpParam, getParamValues } from \"./params\";\nimport { OperationInlet as OpInlet, InletDrafts } from \"./inlets\";\n\n/**\n* At its heart, an Operation is a very fancy function that outputs a Draft or several Drafts.\n* The function itself is perform(), and the Operation can take inputs in the form of \n* Drafts (inlets) or Parameters (params).\n*/\n\n/** \n* Types that an Operation's perform() function can handlle as input/output\n*/\n\n/** @type Union of types that can serve as input to Operation perform() functions. */\nexport type PerformDraftInput = InletDrafts | Array | Draft | null;\n\ntype MultiDraftInput = InletDrafts | Array;\n\n/** @type Union of types that Operation perform() functions can output. */\nexport type PerformOutput = Array | Draft;\n\n/**\n * OPERATION TOPOLOGY\n * Topology refers to the shape of the Operation in terms of its\n * number of input and output Drafts. Classifies Operations.\n */\n\nexport const TopologyName = {\n  pipe: 'pipe', \n  seed: 'seed', \n  merge: 'merge', \n  branch: 'branch', \n  bus: 'bus'\n} as const;\nexport type TopologyName = keyof typeof TopologyName;\n\ninterface TopologyDef { type: TopologyName; input: PerformDraftInput; output: PerformOutput; };\n\n/**\n* @class\n* Operation that can generate a draft with no inputs, may take an optional input\n* @method perform OpPerform function: \n* - INPUT: zero or one Draft\n* - OUTPUT: exactly one Draft\n*/\nexport class Seed implements TopologyDef { type: 'seed'; input: Draft | null; output: Draft; };\n\n/**\n* @class\n* Operation that takes one input and generates one output draft. \n* @method perform OpPerform function: \n* - INPUT: exactly one Draft\n* - OUTPUT: exactly one Draft\n*/\nexport class Pipe implements TopologyDef { type: 'pipe'; input: Draft; output: Draft; };\n\n/**\n* @class\n* Operation that takes many (N) inputs and generates one output draft.\n* @method perform OpPerform function: \n* - INPUT: Array of Drafts\n* - OUTPUT: exactly one Draft\n*/\nexport class Merge implements TopologyDef { type: 'merge'; input: InletDrafts | Array; output: Draft; };\n\n/**\n* @class\n* Operation that takes one input and generates many (N) output drafts.\n* @method perform OpPerform function:\n* - INPUT: exactly one Draft\n* - OUTPUT: Array of Drafts\n*/\nexport class Branch implements TopologyDef { type: 'branch'; input: Draft; output: Array; };\n\n/**\n* CURRENTLY UNUSED\n* @class\n* Operation that takes many (N) inputs and generates many (M) output drafts.\n* Number of inputs does not necessarily match number of outputs (N ?= M).\n* @method perform OpPerform function:  \n* - INPUT: Array of Drafts\n* - OUTPUT: Array of Drafts\n*/\nexport class Bus implements TopologyDef { type: 'bus'; input: Array | InletDrafts; output: Array; };\n\ntype TopologyIndex = {\n  'seed': Seed,\n  'pipe': Pipe,\n  'merge': Merge,\n  'branch': Branch,\n  'bus': Bus\n}\ntype OpTopology = TopologyIndex[TopologyName];\n\n/**\n * OPERATION CONSTRAINT\n * A Constraint on an Operation classifies it based on its\n * input requirements (both Drafts and Params).\n */\n\nexport const ConstraintOptions = {\n  req: 'req', \n  opt: 'opt', \n  none: 'none'\n} as const;\nexport type ConstraintOptions = keyof typeof ConstraintOptions;\n\nexport const ConstraintName = {\n  no_drafts: { input_drafts: 'none', input_params: 'req' }, \n  no_params: { input_drafts: 'req', input_params: 'none' }, \n  drafts_opt: { input_drafts: 'opt', input_params: 'req' }, \n  params_opt: { input_drafts: 'req', input_params: 'opt' }, \n  all_req: {input_drafts: 'req', input_params: 'req' },\n} as const;\ntype ConstraintName = keyof typeof ConstraintName;\n\ntype ConstraintDefs = {\n  [C in keyof typeof ConstraintName]: {\n    constraint: C;\n    input_drafts: typeof ConstraintName[C][\"input_drafts\"];\n    input_params: typeof ConstraintName[C][\"input_params\"];\n  }\n}\n\nexport type NoDrafts = ConstraintDefs[\"no_drafts\"];\nexport type NoParams = ConstraintDefs[\"no_params\"];\nexport type DraftsOptional = ConstraintDefs[\"drafts_opt\"];\nexport type ParamsOptional = ConstraintDefs[\"params_opt\"];\nexport type AllRequired = ConstraintDefs[\"all_req\"];\n\ntype ConstraintIndex = {\n  'no_drafts': NoDrafts, // does not accept input drafts\n  'no_params': NoParams, // does not accept params\n  'drafts_opt': DraftsOptional, // can take no params -- has default values\n  'params_opt': ParamsOptional, // can take zero input drafts\n  'all_req': AllRequired, // both inputs and params required\n}\ntype OpConstraint = ConstraintIndex[ConstraintName]; \n\n/** \n* Generic types for perform() functions, describing options \n* for input draft multiplicity (0, 1, N) and param requirement \n*/\n\ntype NoDraftsPerform = {(params: Array): Topo[\"output\"]};\ntype NoParamsPerform = {(inputs: Topo[\"input\"]): Topo[\"output\"]};\ntype ParamsOptionalPerform = {(inputs: Topo[\"input\"], params?: Array): Topo[\"output\"]}; \ntype DraftsOptionalPerform = {(params: Array, inputs?: Topo[\"input\"]): Topo[\"output\"]};  \ntype AllRequiredPerform = {(inputs: Topo[\"input\"], params: Array): Topo[\"output\"]};  \n\ntype PerformCallSigs = {\n  no_drafts: { [Topo in keyof TopologyIndex]: NoDraftsPerform; },\n  no_params: { [Topo in keyof TopologyIndex]: NoParamsPerform; },\n  drafts_opt: { [Topo in keyof TopologyIndex]: DraftsOptionalPerform; },\n  params_opt: { [Topo in keyof TopologyIndex]: ParamsOptionalPerform; },\n  all_req: { [Topo in keyof TopologyIndex]: AllRequiredPerform; }\n}\n\n/**\n * @interface OpClassifier\n * Key-value pairs for an Operation's Topology and Constraint.\n */\ninterface OpClassifier {\n  type: Topo[\"type\"] | '';\n  input_drafts: Constraint[\"input_drafts\"] | '';\n  input_params: Constraint[\"input_params\"] | '';\n}\n\n/** @type User-defined descriptive strings for any Operation. */\ntype OperationDescriptors = { name: string, displayname: string, dx: string };\n\n/**\n* A standard Operation's metadata -- i.e. everything not the perform() function\n* @param name the internal name of this opearation (CHANGING THESE WILL BREAK LEGACY VERSIONS)\n* @param displayname the name to show upon this operation\n* @param dx the description of this operation\n* @param max_inputs the maximum number of inputs (drafts) allowed directly into this operation\n* @param params the parameters associated with this operation\n* @method perform an OpPerform function\n*/\nexport interface OperationProperties extends OperationDescriptors {\n  max_inputs: number,\n  default_params?: Array;\n  params: Array,\n}\n\n/**\n * @type A function that serves as the perform() method for an Operation. \n * This generic type requires two type parameters:\n * @param Topo one of the PerformInput types\n * @param Constraint one of the PerformOutput types\n *\n * OpPerform to give call signature for perform() function \n * Topo  = Seed | Pipe | Merge | Branch | Bus\n * Constraint = NoDrafts | NoParams | DraftsOptional | ParamsOptional | AllRequired\n */\nexport type OpPerform = PerformCallSigs[Constraint[\"constraint\"]][Topo[\"type\"]];\n// type PerformArgs = Parameters>;\n\n/** TODO doublecheck inlets have been added correctly (fields for input drafts) */\nexport class BaseOp implements OperationProperties {\n  name: string;\n  old_names: Array;\n  displayname: string;\n  dx: string;\n  params: Array;\n  inlets: Array;\n  default_params?: Array;\n  max_inputs: number;\n  classifier: OpClassifier;\n  perform: OpPerform;\n\n  /** @constructor create an Operation using an object literal (keys and values) */\n  constructor (args: OpConstructorArgs);\n  /** @constructor create an Operation using direct arguments in the constructor (values only) */\n  constructor (...args: OpConstructorArray);\n  constructor (name: string, displayname: string, dx: string, perform: OpPerform);\n  constructor (name: string, displayname: string, dx: string, params: Array, perform: OpPerform);\n  constructor (nameOrArgs: any, displayname?: string, dx?: string, performOrParams?: OpPerform | Array, performWithParams?: OpPerform) {\n    // console.log((nameOrArgs.name != undefined));\n    this.classifier = { type: '', input_drafts: '', input_params: '' };\n    if (nameOrArgs.name) {\n      let args = nameOrArgs;\n      this.name = args.name;\n      this.displayname = args.displayname;\n      this.dx = args.dx;\n      this.perform = args.perform;\n      if (args.params) this.params = args.params;\n      else this.params = [];\n      if (args.inlets) this.inlets = args.inlets;\n      else this.inlets = [];\n    } else {\n      this.name = nameOrArgs;\n      this.displayname = displayname;\n      this.dx = dx;\n      if (performWithParams) {\n        let params = > performOrParams;\n        this.params = params;\n        this.default_params = getParamValues(params);\n        this.perform = performWithParams;\n      } else {\n        this.params = [];\n        this.perform = > performOrParams;\n      }\n    }\n  }\n\n  constrain(c: ConstraintName): void {\n    if (c == 'no_drafts') { this.max_inputs = 0; this.inlets = []; }\n    this.classifier.input_drafts = ConstraintName[c][\"input_drafts\"]; \n    this.classifier.input_params = ConstraintName[c][\"input_params\"];\n  }\n\n  type(t: TopologyName): BaseOp {\n    this.classifier.type = t;\n    return this;\n  }\n}\n\ntype ConstructorArgKeysIndex = {\n  [C in keyof ConstraintIndex]: C extends \"no_params\" ? {\n    [T in keyof TopologyIndex]: {\n      name: string, displayname: string, dx: string, old_names: string[],\n      inlets: OpInlet[], perform: OpPerform\n    }\n  } : C extends \"no_drafts\" ? {\n    [T in keyof TopologyIndex]: {\n      name: string, displayname: string, dx: string, old_names: string[],\n      params: OpParam[], perform: OpPerform\n    }\n  } : {\n    [T in keyof TopologyIndex]: {\n      name: string, displayname: string, dx: string, old_names: string[],\n      params: OpParam[], inlets: OpInlet[],\n      perform: OpPerform\n    }\n  }\n}\n\ntype ConstructorArrayIndex = {\n  [C in keyof ConstraintIndex]: C extends \"no_params\" ? {\n    [T in keyof TopologyIndex]: [\n      name: string, displayname: string, dx: string, old_names: string[],\n      inlets: OpInlet[], perform: OpPerform\n    ]\n  } : C extends \"no_drafts\" ? {\n    [T in keyof TopologyIndex]: [\n      name: string, displayname: string, dx: string, old_names: string[],\n      params: OpParam[], perform: OpPerform\n    ]\n  } : {\n    [T in keyof TopologyIndex]: [\n      name: string, displayname: string, dx: string, old_names: string[],\n      params: OpParam[], inlets: OpInlet[],\n      perform: OpPerform\n    ]\n  }\n}\n\ntype OpConstructorArgKeys = \nConstructorArgKeysIndex[Constraint[\"constraint\"]][Topo[\"type\"]];\n\ntype OpConstructorArray = \nConstructorArrayIndex[Constraint[\"constraint\"]][Topo[\"type\"]];\n\ntype OpConstructorArgs = \nOpConstructorArgKeys | OpConstructorArray;\n\n// use factory design pattern to apply classifiers to BaseOp?? Is this too convoluted\n// https://refactoring.guru/design-patterns/abstract-factory/typescript\nclass AbstractOpFactory {\n  NoDrafts(args: OpConstructorArgKeys): BaseOp;\n  NoDrafts(...args: OpConstructorArray): BaseOp;\n  NoDrafts(...args: any) {\n    let op = new BaseOp(...args);\n    op.constrain(\"no_drafts\");\n    return op;\n  }\n\n  NoParams(args: OpConstructorArgKeys): BaseOp;\n  NoParams(...args: OpConstructorArray): BaseOp;\n  NoParams(...args: any) {\n    let op = new BaseOp(...args);\n    op.constrain(\"no_params\");\n    return op;\n  }\n\n  DraftsOptional(args: OpConstructorArgKeys): BaseOp;\n  DraftsOptional(...args: OpConstructorArray): BaseOp;\n  DraftsOptional(...args: any) {\n    let op = new BaseOp(...args);\n    op.constrain(\"drafts_opt\");\n    return op;\n  }\n\n  ParamsOptional(args: OpConstructorArgKeys): BaseOp;\n  ParamsOptional(...args: OpConstructorArray): BaseOp;\n  ParamsOptional(...args: any) {\n    let op = new BaseOp(...args);\n    op.constrain(\"params_opt\");\n    return op;\n  }\n\n  AllRequired(args: OpConstructorArgKeys): BaseOp;\n  AllRequired(...args: OpConstructorArray): BaseOp;\n  AllRequired(...args: any) {\n    let op = new BaseOp(...args);\n    op.constrain(\"all_req\");\n    return op;\n  }\n}\n\n// combine with mix-ins design pattern (link: TypeScript docs website)\nfunction makeTopoFactory(topo: TopologyName) {\n  return class TopologyFactory extends AbstractOpFactory {\n    static base = new AbstractOpFactory();\n    \n    static NoDrafts(args: OpConstructorArgKeys): BaseOp;\n    static NoDrafts(...args: OpConstructorArray): BaseOp;\n    static NoDrafts(...args: any) {\n      return this.base.NoDrafts(...args).type(topo);\n    }\n\n    static NoParams(args: OpConstructorArgKeys): BaseOp;\n    static NoParams(...args: OpConstructorArray): BaseOp;\n    static NoParams(...args: any) {\n      return this.base.NoParams(...args).type(topo);\n    }\n\n    static DraftsOptional(args: OpConstructorArgKeys): BaseOp;\n    static DraftsOptional(...args: OpConstructorArray): BaseOp;\n    static DraftsOptional(...args: any) {\n      return this.base.DraftsOptional(...args).type(topo);\n    }\n\n    static ParamsOptional(args: OpConstructorArgKeys): BaseOp;\n    static ParamsOptional(...args: OpConstructorArray): BaseOp;\n    static ParamsOptional(...args: any) {\n      return this.base.ParamsOptional(...args).type(topo);\n    }\n\n    static AllRequired(args: OpConstructorArgKeys): BaseOp;\n    static AllRequired(...args: OpConstructorArray): BaseOp;\n    static AllRequired(...args: any) {\n      return this.base.AllRequired(...args).type(topo);\n    }\n  }\n}\n\nexport const OpFactories = {\n  Seed: makeTopoFactory(\"seed\"),\n  Pipe: makeTopoFactory(\"pipe\"),\n  Merge: makeTopoFactory(\"merge\"),\n  Branch: makeTopoFactory(\"merge\"),\n  Bus: makeTopoFactory(\"bus\"),\n}\n\n// export const SeedOperation = makeTopoFactory(\"seed\");\n// export const PipeOperation = makeTopoFactory(\"pipe\");\n// export const MergeOperation = makeTopoFactory(\"merge\");\n// export const BranchOperation = makeTopoFactory(\"merge\");\n// export const BusOperation = makeTopoFactory(\"bus\");\n\ntype TopologyOpIndex = {\n  [T in keyof TopologyIndex]: {\n    [C in keyof ConstraintIndex]: BaseOp;\n  }\n}\n\nexport type BuildableOperation = TopologyOpIndex[TopologyName][ConstraintName];\n    \n\n\n\n\n\n\n\n\n\n\n                   \n    \n         results matching \"\"\n        \n    \n    \n        No results matching \"\"\n    \n\n"},"classes/Bus.html":{"url":"classes/Bus.html","title":"class - Bus","body":"\n                   \n\n\n\n\n\n\n\n\n\n\n\n\n\n  Classes\n  Bus\n\n\n\n        \n            Info\n        \n        \n            Source\n        \n\n\n\n    \n        \n            File\n        \n        \n            src/app/mixer/model/operation/topology.ts\n        \n\n\n            \n                Description\n            \n            \n                CURRENTLY UNUSED\nOperation that takes many (N) inputs and generates many (M) output drafts.\nNumber of inputs does not necessarily match number of outputs (N ?= M).\n\nINPUT: Array of Drafts\nOUTPUT: Array of Drafts\n\n\n            \n\n\n            \n                Implements\n            \n            \n                            TopologyDef\n            \n\n\n            \n    Index\n    \n        \n                \n                    \n                        Properties\n                    \n                \n                \n                    \n                        \n                            \n                                input\n                            \n                            \n                                output\n                            \n                            \n                                type\n                            \n                        \n                    \n                \n\n\n\n\n\n\n        \n    \n\n\n\n            \n    \n    \n        Properties\n    \n    \n        \n            \n                \n                    \n                    \n                        input\n                        \n                    \n                \n            \n                \n                    \n                        Type :         Array | InletDrafts\n\n                    \n                \n                    \n                        \n                                Defined in src/app/mixer/model/operation/topology.ts:85\n                        \n                    \n\n\n        \n    \n    \n        \n            \n                \n                    \n                    \n                        output\n                        \n                    \n                \n            \n                \n                    \n                        Type :         Array\n\n                    \n                \n                    \n                        \n                                Defined in src/app/mixer/model/operation/topology.ts:85\n                        \n                    \n\n\n        \n    \n    \n        \n            \n                \n                    \n                    \n                        type\n                        \n                    \n                \n            \n                    \n                        \n                                Defined in src/app/mixer/model/operation/topology.ts:85\n                        \n                    \n\n\n        \n    \n\n\n\n\n\n\n\n\n    \n\n\n    \n        import { Draft } from \"../../../core/model/datatypes\";\nimport { ParamValue, OperationParam as OpParam, getParamValues } from \"./params\";\nimport { OperationInlet as OpInlet, InletDrafts } from \"./inlets\";\n\n/**\n* At its heart, an Operation is a very fancy function that outputs a Draft or several Drafts.\n* The function itself is perform(), and the Operation can take inputs in the form of \n* Drafts (inlets) or Parameters (params).\n*/\n\n/** \n* Types that an Operation's perform() function can handlle as input/output\n*/\n\n/** @type Union of types that can serve as input to Operation perform() functions. */\nexport type PerformDraftInput = InletDrafts | Array | Draft | null;\n\ntype MultiDraftInput = InletDrafts | Array;\n\n/** @type Union of types that Operation perform() functions can output. */\nexport type PerformOutput = Array | Draft;\n\n/**\n * OPERATION TOPOLOGY\n * Topology refers to the shape of the Operation in terms of its\n * number of input and output Drafts. Classifies Operations.\n */\n\nexport const TopologyName = {\n  pipe: 'pipe', \n  seed: 'seed', \n  merge: 'merge', \n  branch: 'branch', \n  bus: 'bus'\n} as const;\nexport type TopologyName = keyof typeof TopologyName;\n\ninterface TopologyDef { type: TopologyName; input: PerformDraftInput; output: PerformOutput; };\n\n/**\n* @class\n* Operation that can generate a draft with no inputs, may take an optional input\n* @method perform OpPerform function: \n* - INPUT: zero or one Draft\n* - OUTPUT: exactly one Draft\n*/\nexport class Seed implements TopologyDef { type: 'seed'; input: Draft | null; output: Draft; };\n\n/**\n* @class\n* Operation that takes one input and generates one output draft. \n* @method perform OpPerform function: \n* - INPUT: exactly one Draft\n* - OUTPUT: exactly one Draft\n*/\nexport class Pipe implements TopologyDef { type: 'pipe'; input: Draft; output: Draft; };\n\n/**\n* @class\n* Operation that takes many (N) inputs and generates one output draft.\n* @method perform OpPerform function: \n* - INPUT: Array of Drafts\n* - OUTPUT: exactly one Draft\n*/\nexport class Merge implements TopologyDef { type: 'merge'; input: InletDrafts | Array; output: Draft; };\n\n/**\n* @class\n* Operation that takes one input and generates many (N) output drafts.\n* @method perform OpPerform function:\n* - INPUT: exactly one Draft\n* - OUTPUT: Array of Drafts\n*/\nexport class Branch implements TopologyDef { type: 'branch'; input: Draft; output: Array; };\n\n/**\n* CURRENTLY UNUSED\n* @class\n* Operation that takes many (N) inputs and generates many (M) output drafts.\n* Number of inputs does not necessarily match number of outputs (N ?= M).\n* @method perform OpPerform function:  \n* - INPUT: Array of Drafts\n* - OUTPUT: Array of Drafts\n*/\nexport class Bus implements TopologyDef { type: 'bus'; input: Array | InletDrafts; output: Array; };\n\ntype TopologyIndex = {\n  'seed': Seed,\n  'pipe': Pipe,\n  'merge': Merge,\n  'branch': Branch,\n  'bus': Bus\n}\ntype OpTopology = TopologyIndex[TopologyName];\n\n/**\n * OPERATION CONSTRAINT\n * A Constraint on an Operation classifies it based on its\n * input requirements (both Drafts and Params).\n */\n\nexport const ConstraintOptions = {\n  req: 'req', \n  opt: 'opt', \n  none: 'none'\n} as const;\nexport type ConstraintOptions = keyof typeof ConstraintOptions;\n\nexport const ConstraintName = {\n  no_drafts: { input_drafts: 'none', input_params: 'req' }, \n  no_params: { input_drafts: 'req', input_params: 'none' }, \n  drafts_opt: { input_drafts: 'opt', input_params: 'req' }, \n  params_opt: { input_drafts: 'req', input_params: 'opt' }, \n  all_req: {input_drafts: 'req', input_params: 'req' },\n} as const;\ntype ConstraintName = keyof typeof ConstraintName;\n\ntype ConstraintDefs = {\n  [C in keyof typeof ConstraintName]: {\n    constraint: C;\n    input_drafts: typeof ConstraintName[C][\"input_drafts\"];\n    input_params: typeof ConstraintName[C][\"input_params\"];\n  }\n}\n\nexport type NoDrafts = ConstraintDefs[\"no_drafts\"];\nexport type NoParams = ConstraintDefs[\"no_params\"];\nexport type DraftsOptional = ConstraintDefs[\"drafts_opt\"];\nexport type ParamsOptional = ConstraintDefs[\"params_opt\"];\nexport type AllRequired = ConstraintDefs[\"all_req\"];\n\ntype ConstraintIndex = {\n  'no_drafts': NoDrafts, // does not accept input drafts\n  'no_params': NoParams, // does not accept params\n  'drafts_opt': DraftsOptional, // can take no params -- has default values\n  'params_opt': ParamsOptional, // can take zero input drafts\n  'all_req': AllRequired, // both inputs and params required\n}\ntype OpConstraint = ConstraintIndex[ConstraintName]; \n\n/** \n* Generic types for perform() functions, describing options \n* for input draft multiplicity (0, 1, N) and param requirement \n*/\n\ntype NoDraftsPerform = {(params: Array): Topo[\"output\"]};\ntype NoParamsPerform = {(inputs: Topo[\"input\"]): Topo[\"output\"]};\ntype ParamsOptionalPerform = {(inputs: Topo[\"input\"], params?: Array): Topo[\"output\"]}; \ntype DraftsOptionalPerform = {(params: Array, inputs?: Topo[\"input\"]): Topo[\"output\"]};  \ntype AllRequiredPerform = {(inputs: Topo[\"input\"], params: Array): Topo[\"output\"]};  \n\ntype PerformCallSigs = {\n  no_drafts: { [Topo in keyof TopologyIndex]: NoDraftsPerform; },\n  no_params: { [Topo in keyof TopologyIndex]: NoParamsPerform; },\n  drafts_opt: { [Topo in keyof TopologyIndex]: DraftsOptionalPerform; },\n  params_opt: { [Topo in keyof TopologyIndex]: ParamsOptionalPerform; },\n  all_req: { [Topo in keyof TopologyIndex]: AllRequiredPerform; }\n}\n\n/**\n * @interface OpClassifier\n * Key-value pairs for an Operation's Topology and Constraint.\n */\ninterface OpClassifier {\n  type: Topo[\"type\"] | '';\n  input_drafts: Constraint[\"input_drafts\"] | '';\n  input_params: Constraint[\"input_params\"] | '';\n}\n\n/** @type User-defined descriptive strings for any Operation. */\ntype OperationDescriptors = { name: string, displayname: string, dx: string };\n\n/**\n* A standard Operation's metadata -- i.e. everything not the perform() function\n* @param name the internal name of this opearation (CHANGING THESE WILL BREAK LEGACY VERSIONS)\n* @param displayname the name to show upon this operation\n* @param dx the description of this operation\n* @param max_inputs the maximum number of inputs (drafts) allowed directly into this operation\n* @param params the parameters associated with this operation\n* @method perform an OpPerform function\n*/\nexport interface OperationProperties extends OperationDescriptors {\n  max_inputs: number,\n  default_params?: Array;\n  params: Array,\n}\n\n/**\n * @type A function that serves as the perform() method for an Operation. \n * This generic type requires two type parameters:\n * @param Topo one of the PerformInput types\n * @param Constraint one of the PerformOutput types\n *\n * OpPerform to give call signature for perform() function \n * Topo  = Seed | Pipe | Merge | Branch | Bus\n * Constraint = NoDrafts | NoParams | DraftsOptional | ParamsOptional | AllRequired\n */\nexport type OpPerform = PerformCallSigs[Constraint[\"constraint\"]][Topo[\"type\"]];\n// type PerformArgs = Parameters>;\n\n/** TODO doublecheck inlets have been added correctly (fields for input drafts) */\nexport class BaseOp implements OperationProperties {\n  name: string;\n  old_names: Array;\n  displayname: string;\n  dx: string;\n  params: Array;\n  inlets: Array;\n  default_params?: Array;\n  max_inputs: number;\n  classifier: OpClassifier;\n  perform: OpPerform;\n\n  /** @constructor create an Operation using an object literal (keys and values) */\n  constructor (args: OpConstructorArgs);\n  /** @constructor create an Operation using direct arguments in the constructor (values only) */\n  constructor (...args: OpConstructorArray);\n  constructor (name: string, displayname: string, dx: string, perform: OpPerform);\n  constructor (name: string, displayname: string, dx: string, params: Array, perform: OpPerform);\n  constructor (nameOrArgs: any, displayname?: string, dx?: string, performOrParams?: OpPerform | Array, performWithParams?: OpPerform) {\n    // console.log((nameOrArgs.name != undefined));\n    this.classifier = { type: '', input_drafts: '', input_params: '' };\n    if (nameOrArgs.name) {\n      let args = nameOrArgs;\n      this.name = args.name;\n      this.displayname = args.displayname;\n      this.dx = args.dx;\n      this.perform = args.perform;\n      if (args.params) this.params = args.params;\n      else this.params = [];\n      if (args.inlets) this.inlets = args.inlets;\n      else this.inlets = [];\n    } else {\n      this.name = nameOrArgs;\n      this.displayname = displayname;\n      this.dx = dx;\n      if (performWithParams) {\n        let params = > performOrParams;\n        this.params = params;\n        this.default_params = getParamValues(params);\n        this.perform = performWithParams;\n      } else {\n        this.params = [];\n        this.perform = > performOrParams;\n      }\n    }\n  }\n\n  constrain(c: ConstraintName): void {\n    if (c == 'no_drafts') { this.max_inputs = 0; this.inlets = []; }\n    this.classifier.input_drafts = ConstraintName[c][\"input_drafts\"]; \n    this.classifier.input_params = ConstraintName[c][\"input_params\"];\n  }\n\n  type(t: TopologyName): BaseOp {\n    this.classifier.type = t;\n    return this;\n  }\n}\n\ntype ConstructorArgKeysIndex = {\n  [C in keyof ConstraintIndex]: C extends \"no_params\" ? {\n    [T in keyof TopologyIndex]: {\n      name: string, displayname: string, dx: string, old_names: string[],\n      inlets: OpInlet[], perform: OpPerform\n    }\n  } : C extends \"no_drafts\" ? {\n    [T in keyof TopologyIndex]: {\n      name: string, displayname: string, dx: string, old_names: string[],\n      params: OpParam[], perform: OpPerform\n    }\n  } : {\n    [T in keyof TopologyIndex]: {\n      name: string, displayname: string, dx: string, old_names: string[],\n      params: OpParam[], inlets: OpInlet[],\n      perform: OpPerform\n    }\n  }\n}\n\ntype ConstructorArrayIndex = {\n  [C in keyof ConstraintIndex]: C extends \"no_params\" ? {\n    [T in keyof TopologyIndex]: [\n      name: string, displayname: string, dx: string, old_names: string[],\n      inlets: OpInlet[], perform: OpPerform\n    ]\n  } : C extends \"no_drafts\" ? {\n    [T in keyof TopologyIndex]: [\n      name: string, displayname: string, dx: string, old_names: string[],\n      params: OpParam[], perform: OpPerform\n    ]\n  } : {\n    [T in keyof TopologyIndex]: [\n      name: string, displayname: string, dx: string, old_names: string[],\n      params: OpParam[], inlets: OpInlet[],\n      perform: OpPerform\n    ]\n  }\n}\n\ntype OpConstructorArgKeys = \nConstructorArgKeysIndex[Constraint[\"constraint\"]][Topo[\"type\"]];\n\ntype OpConstructorArray = \nConstructorArrayIndex[Constraint[\"constraint\"]][Topo[\"type\"]];\n\ntype OpConstructorArgs = \nOpConstructorArgKeys | OpConstructorArray;\n\n// use factory design pattern to apply classifiers to BaseOp?? Is this too convoluted\n// https://refactoring.guru/design-patterns/abstract-factory/typescript\nclass AbstractOpFactory {\n  NoDrafts(args: OpConstructorArgKeys): BaseOp;\n  NoDrafts(...args: OpConstructorArray): BaseOp;\n  NoDrafts(...args: any) {\n    let op = new BaseOp(...args);\n    op.constrain(\"no_drafts\");\n    return op;\n  }\n\n  NoParams(args: OpConstructorArgKeys): BaseOp;\n  NoParams(...args: OpConstructorArray): BaseOp;\n  NoParams(...args: any) {\n    let op = new BaseOp(...args);\n    op.constrain(\"no_params\");\n    return op;\n  }\n\n  DraftsOptional(args: OpConstructorArgKeys): BaseOp;\n  DraftsOptional(...args: OpConstructorArray): BaseOp;\n  DraftsOptional(...args: any) {\n    let op = new BaseOp(...args);\n    op.constrain(\"drafts_opt\");\n    return op;\n  }\n\n  ParamsOptional(args: OpConstructorArgKeys): BaseOp;\n  ParamsOptional(...args: OpConstructorArray): BaseOp;\n  ParamsOptional(...args: any) {\n    let op = new BaseOp(...args);\n    op.constrain(\"params_opt\");\n    return op;\n  }\n\n  AllRequired(args: OpConstructorArgKeys): BaseOp;\n  AllRequired(...args: OpConstructorArray): BaseOp;\n  AllRequired(...args: any) {\n    let op = new BaseOp(...args);\n    op.constrain(\"all_req\");\n    return op;\n  }\n}\n\n// combine with mix-ins design pattern (link: TypeScript docs website)\nfunction makeTopoFactory(topo: TopologyName) {\n  return class TopologyFactory extends AbstractOpFactory {\n    static base = new AbstractOpFactory();\n    \n    static NoDrafts(args: OpConstructorArgKeys): BaseOp;\n    static NoDrafts(...args: OpConstructorArray): BaseOp;\n    static NoDrafts(...args: any) {\n      return this.base.NoDrafts(...args).type(topo);\n    }\n\n    static NoParams(args: OpConstructorArgKeys): BaseOp;\n    static NoParams(...args: OpConstructorArray): BaseOp;\n    static NoParams(...args: any) {\n      return this.base.NoParams(...args).type(topo);\n    }\n\n    static DraftsOptional(args: OpConstructorArgKeys): BaseOp;\n    static DraftsOptional(...args: OpConstructorArray): BaseOp;\n    static DraftsOptional(...args: any) {\n      return this.base.DraftsOptional(...args).type(topo);\n    }\n\n    static ParamsOptional(args: OpConstructorArgKeys): BaseOp;\n    static ParamsOptional(...args: OpConstructorArray): BaseOp;\n    static ParamsOptional(...args: any) {\n      return this.base.ParamsOptional(...args).type(topo);\n    }\n\n    static AllRequired(args: OpConstructorArgKeys): BaseOp;\n    static AllRequired(...args: OpConstructorArray): BaseOp;\n    static AllRequired(...args: any) {\n      return this.base.AllRequired(...args).type(topo);\n    }\n  }\n}\n\nexport const OpFactories = {\n  Seed: makeTopoFactory(\"seed\"),\n  Pipe: makeTopoFactory(\"pipe\"),\n  Merge: makeTopoFactory(\"merge\"),\n  Branch: makeTopoFactory(\"merge\"),\n  Bus: makeTopoFactory(\"bus\"),\n}\n\n// export const SeedOperation = makeTopoFactory(\"seed\");\n// export const PipeOperation = makeTopoFactory(\"pipe\");\n// export const MergeOperation = makeTopoFactory(\"merge\");\n// export const BranchOperation = makeTopoFactory(\"merge\");\n// export const BusOperation = makeTopoFactory(\"bus\");\n\ntype TopologyOpIndex = {\n  [T in keyof TopologyIndex]: {\n    [C in keyof ConstraintIndex]: BaseOp;\n  }\n}\n\nexport type BuildableOperation = TopologyOpIndex[TopologyName][ConstraintName];\n    \n\n\n\n\n\n\n\n\n\n\n                   \n    \n         results matching \"\"\n        \n    \n    \n        No results matching \"\"\n    \n\n"},"classes/Cell.html":{"url":"classes/Cell.html","title":"class - Cell","body":"\n                   \n\n\n\n\n\n\n\n\n\n\n\n\n\n  Classes\n  Cell\n\n\n\n        \n            Info\n        \n        \n            Source\n        \n\n\n\n    \n        \n            File\n        \n        \n            src/app/core/model/cell.ts\n        \n\n\n            \n                Description\n            \n            \n                Definition of Cell object.\n\n            \n\n\n\n\n            \n    Index\n    \n        \n                \n                    \n                        Properties\n                    \n                \n                \n                    \n                        \n                            \n                                is_set\n                            \n                            \n                                is_up\n                            \n                        \n                    \n                \n\n                \n                    \n                        Methods\n                    \n                \n                \n                    \n                        \n                            \n                                getHeddle\n                            \n                            \n                                isSet\n                            \n                            \n                                isUp\n                            \n                            \n                                reloadCell\n                            \n                            \n                                setHeddle\n                            \n                            \n                                setHeddleDown\n                            \n                            \n                                setHeddleUp\n                            \n                            \n                                toggleHeddle\n                            \n                            \n                                unsetHeddle\n                            \n                        \n                    \n                \n\n\n\n\n\n        \n    \n\n\n            \n    Constructor\n        \n            \n                \n                    \nconstructor(setting: boolean)\n                    \n                \n                        \n                            \n                                Defined in src/app/core/model/cell.ts:11\n                            \n                        \n\n                \n                    \n                            \n                                    Parameters :\n                                    \n                                        \n                                            \n                                                Name\n                                                    Type\n                                                Optional\n                                                    Description\n                                            \n                                        \n                                        \n                                                \n                                                        setting\n                                                  \n                                                        \n                                                                        boolean\n                                                        \n                                                  \n                                                    \n                                                            No\n                                                    \n                                                    \n                                                        \n                                                                describes if the Cell should be set to heddle up or not. Null value leaves cell unset.\n\n                                                        \n                                                \n                                        \n                                    \n                            \n                    \n                \n            \n        \n\n\n            \n    \n    \n        Properties\n    \n    \n        \n            \n                \n                    \n                    \n                        is_set\n                        \n                    \n                \n            \n                \n                    \n                        Type :         boolean\n\n                    \n                \n                    \n                        \n                                Defined in src/app/core/model/cell.ts:11\n                        \n                    \n\n\n        \n    \n    \n        \n            \n                \n                    \n                    \n                        is_up\n                        \n                    \n                \n            \n                \n                    \n                        Type :         boolean\n\n                    \n                \n                    \n                        \n                                Defined in src/app/core/model/cell.ts:10\n                        \n                    \n\n\n        \n    \n\n\n            \n    \n    \n        Methods\n    \n    \n        \n            \n                \n                    \n                    \n                        getHeddle\n                        \n                    \n                \n            \n            \n                \ngetHeddle()\n                \n            \n\n\n            \n                \n                    Defined in src/app/core/model/cell.ts:84\n                \n            \n\n\n            \n                \n                    sets the value to true or false. If null, will unset the heddle\n\n\n                    \n                        Returns :         boolean\n\n                    \n                \n            \n        \n    \n    \n        \n            \n                \n                    \n                    \n                        isSet\n                        \n                    \n                \n            \n            \n                \nisSet()\n                \n            \n\n\n            \n                \n                    Defined in src/app/core/model/cell.ts:50\n                \n            \n\n\n            \n                \n\n                    \n                        Returns :         boolean\n\n                    \n                \n            \n        \n    \n    \n        \n            \n                \n                    \n                    \n                        isUp\n                        \n                    \n                \n            \n            \n                \nisUp()\n                \n            \n\n\n            \n                \n                    Defined in src/app/core/model/cell.ts:108\n                \n            \n\n\n            \n                \n\n                    \n                        Returns :         boolean\n\n                    \n                \n            \n        \n    \n    \n        \n            \n                \n                    \n                    \n                        reloadCell\n                        \n                    \n                \n            \n            \n                \nreloadCell(params: any)\n                \n            \n\n\n            \n                \n                    Defined in src/app/core/model/cell.ts:32\n                \n            \n\n\n            \n                \n                    this is called from the reload file. it takes a cell in the form of a list of params and sets the variables that are present\n\n\n                    \n                        Parameters :\n                        \n                        \n                            \n                                \n                                    Name\n                                    Type\n                                    Optional\n                                \n                            \n                            \n                                \n                                    params\n                                    \n                                                any\n                                    \n\n                                    \n                                        No\n                                    \n\n\n                                \n                            \n                        \n                    \n                    \n                    \n                    \n                        Returns :         void\n\n                    \n                    \n                        \n                    \n                \n            \n        \n    \n    \n        \n            \n                \n                    \n                    \n                        setHeddle\n                        \n                    \n                \n            \n            \n                \nsetHeddle(value: boolean)\n                \n            \n\n\n            \n                \n                    Defined in src/app/core/model/cell.ts:70\n                \n            \n\n\n            \n                \n                    sets the value to true or false. If null, will unset the heddle\n\n\n                    \n                        Parameters :\n                        \n                        \n                            \n                                \n                                    Name\n                                    Type\n                                    Optional\n                                \n                            \n                            \n                                \n                                    value\n                                    \n                                                boolean\n                                    \n\n                                    \n                                        No\n                                    \n\n\n                                \n                            \n                        \n                    \n                    \n                    \n                    \n                        Returns :         void\n\n                    \n                    \n                        \n                    \n                \n            \n        \n    \n    \n        \n            \n                \n                    \n                    \n                        setHeddleDown\n                        \n                    \n                \n            \n            \n                \nsetHeddleDown()\n                \n            \n\n\n            \n                \n                    Defined in src/app/core/model/cell.ts:59\n                \n            \n\n\n            \n                \n\n                    \n                        Returns :         void\n\n                    \n                \n            \n        \n    \n    \n        \n            \n                \n                    \n                    \n                        setHeddleUp\n                        \n                    \n                \n            \n            \n                \nsetHeddleUp()\n                \n            \n\n\n            \n                \n                    Defined in src/app/core/model/cell.ts:54\n                \n            \n\n\n            \n                \n\n                    \n                        Returns :         void\n\n                    \n                \n            \n        \n    \n    \n        \n            \n                \n                    \n                    \n                        toggleHeddle\n                        \n                    \n                \n            \n            \n                \ntoggleHeddle()\n                \n            \n\n\n            \n                \n                    Defined in src/app/core/model/cell.ts:91\n                \n            \n\n\n            \n                \n\n                    \n                        Returns :         void\n\n                    \n                \n            \n        \n    \n    \n        \n            \n                \n                    \n                    \n                        unsetHeddle\n                        \n                    \n                \n            \n            \n                \nunsetHeddle()\n                \n            \n\n\n            \n                \n                    Defined in src/app/core/model/cell.ts:101\n                \n            \n\n\n            \n                \n\n                    \n                        Returns :         void\n\n                    \n                \n            \n        \n    \n\n\n\n\n\n\n    \n\n\n    \n        export class Cell {\n  is_up: boolean;\n  is_set: boolean;\n  /**\n   * \n   * @param setting describes if the Cell should be set to heddle up or not. Null value leaves cell unset. \n   */\n  constructor(setting: boolean) {\n\n    if(setting === null || setting === undefined){\n      this.is_set = false;\n      this.is_up = false;\n    } \n    else {\n      this.is_set = true;\n      this.is_up = setting;\n    }\n  }\n\n  /**\n   * this is called from the reload file. it takes a cell in the form of a list of params and sets the variables that are present\n   * @param params \n   */\n  reloadCell(params: any){\n\n    if(params.is_up !== undefined){\n      this.is_set = true;\n      this.is_up = params.is_up;\n\n    }else{\n      this.is_set = false;\n      this.is_up = false;\n    }\n\n    if(params.is_set !== undefined){\n      this.is_set = params.is_set;\n    }\n  }\n\n\n  \n  isSet(){\n    return this.is_set;\n  }\n\n  setHeddleUp(){\n    this.is_up = true;\n    this.is_set = true;\n  }\n\n  setHeddleDown(){\n     this.is_set = true;\n     this.is_up = false;\n  }\n\n\n\n  /**\n   * sets the value to true or false. If null, will unset the heddle\n   * @param value \n   */\n  setHeddle(value:boolean){\n    if(value === null){\n      this.is_up = false;\n      this.is_set = false;\n    }else{\n      this.is_up = value;\n      this.is_set = true;\n    }\n  }\n\n    /**\n   * sets the value to true or false. If null, will unset the heddle\n   * @param value \n   */\n    getHeddle():boolean{\n       if(this.is_set){\n        return this.is_up;\n       }\n       return null;\n    }\n\n  toggleHeddle(){\n    if(!this.is_set){\n      this.is_set = true;\n      this.is_up = true;\n    }else{\n      this.is_up = !this.is_up;\n    }\n  }\n\n\n  unsetHeddle(){\n    this.is_up = false;\n    this.is_set = false;\n  }\n\n\n\n  isUp():boolean{\n    return this.is_up;\n  }\n\n\n\n  \n  \n}\n    \n\n\n\n\n\n\n\n\n\n\n                   \n    \n         results matching \"\"\n        \n    \n    \n        No results matching \"\"\n    \n\n"},"interfaces/ChainIndex.html":{"url":"interfaces/ChainIndex.html","title":"interface - ChainIndex","body":"\n                   \n\n\n\n\n\n\n\n\n\n\n\n\n\n\n  Interfaces\n  \n  ChainIndex\n\n\n\n        \n            Info\n        \n        \n            Source\n        \n\n\n\n    \n        \n            File\n        \n        \n            src/app/player/provider/sequencer.service.ts\n        \n\n\n            \n                Description\n            \n            \n                each chain op in the sequencer has an ID and\nits position in the sequencer\n\n            \n\n\n        \n            Index\n            \n                \n                    \n                        \n                            Properties\n                        \n                    \n                    \n                        \n                            \n                                \n                                        \n                                            id\n                                        \n                                \n                                \n                                        \n                                            pos\n                                        \n                                \n                            \n                        \n                    \n                \n            \n        \n\n\n\n            \n                Properties\n                    \n                        \n                                \n                                    \n                                        \n                                        id\n                                            \n                                                \n                                            \n                                        \n                                    \n                                \n                                \n                                    \n                                        id:         number\n\n                                    \n                                \n\n\n                                    \n                                        \n                                            Type :         number\n\n                                        \n                                    \n\n\n\n\n\n                        \n                    \n                    \n                        \n                                \n                                    \n                                        \n                                        pos\n                                            \n                                                \n                                            \n                                        \n                                    \n                                \n                                \n                                    \n                                        pos:         number\n\n                                    \n                                \n\n\n                                    \n                                        \n                                            Type :         number\n\n                                        \n                                    \n\n\n\n\n\n                        \n                    \n            \n    \n\n\n    \n        import { Injectable } from '@angular/core';\nimport { OpSequencer, PlayerOp, ChainOp, makeOpSequencer, makeChainOp } from '../model/op_mappings';\nimport { PlayerService } from '../player.service';\nimport { PedalsService } from './pedals.service';\n\n/** \n * each chain op in the sequencer has an ID and \n * its position in the sequencer \n */\ninterface ChainIndex {\n  id: number,\n  pos: number, // position in ops array\n}\n\n/** \n * I separated the sequencer into a generic object class\n * AND an Angular service that extends the class. Hopefully\n * that isn't clunky, but it does let me separate methods\n * that are useful to call in the HTML, from the methods\n * that are less often called in HTML\n */\n@Injectable({\n  providedIn: 'root'\n})\nexport class SequencerService extends OpSequencer {\n  // seq_array: OpSequencer;\n  selecting: boolean = false;\n  chains: Array = []; // a number pointing to index in sequencer ops\n\n  // get pos() { return this.seq_array.pos; }\n  // get ops() { return this.seq_array ? this.seq_array.ops : []; }\n  // get current() { return this.seq_array.current; }\n  get active() { return (this.readyToWeave ? true : false); }\n  get pos() { return this._pos; }\n\n  constructor(\n    public pedals: PedalsService,\n  ) {\n    super();\n    // this.seq_array = new OpSequencer();\n  }\n\n  addPedals(fwd_pedal: number, select_pedal_a: number, select_pedal_b?: number) {\n    this.mapPedal(fwd_pedal, 'fwd');\n    this.mapPedal(select_pedal_a, 'sel-next');\n    if (select_pedal_b) {\n      this.mapPedal(select_pedal_b, 'sel-back');\n    }\n  }\n\n  /** Add a single operation to the sequencer. */\n  addSingleOp(o: PlayerOp) {\n    if (this.active) {\n      this.addOp(o);\n      /** if this is the first op loaded into the player, run the op so that updates the starting draft */\n      if (this.ops.length == 1) {\n        this.pedals.emit('pedal-step', this.p_select_a);\n      }\n      // console.log(o);\n      // console.log(this.seq);\n    } else {\n      console.log('no sequencer to add to!');\n    }\n  }\n\n  /** Add a new chain operation to the sequencer. */\n  addChainOp(o: PlayerOp) { \n    let ch = makeChainOp([o]);\n    ch.id = this.chains.length;\n    this.chains.push({id: ch.id, pos: this.addOp(ch)});\n  }\n\n  /** Add a single operation onto an existing chain op in the sequencer. */\n  addToChain(ch_id: number, o: PlayerOp) {\n    let ch = this.ops[this.chains[ch_id].pos] as ChainOp;\n    this.ops[this.chains[ch_id].pos] = makeChainOp(ch.ops.concat([o]));\n    console.log(this.ops);\n  }\n\n  // removeOp() { this.seq_array.removeOp(); }\n  // nextOp() { this.seq_array.nextOp(); }\n  // prevOp() { this.seq_array.prevOp(); }\n}\n\n    \n\n\n\n\n\n\n\n\n\n                   \n    \n         results matching \"\"\n        \n    \n    \n        No results matching \"\"\n    \n\n"},"interfaces/ChainOp.html":{"url":"interfaces/ChainOp.html","title":"interface - ChainOp","body":"\n                   \n\n\n\n\n\n\n\n\n\n\n\n\n\n\n  Interfaces\n  \n  ChainOp\n\n\n\n        \n            Info\n        \n        \n            Source\n        \n\n\n\n    \n        \n            File\n        \n        \n            src/app/player/model/op_mappings.ts\n        \n\n\n            \n                Description\n            \n            \n                Op chain:\n\n1 pedal, multiple operations in a chain (array)\nif pedal, perform() each Op in sequence\n\n\n            \n\n            \n                Extends\n            \n            \n                        PedalEvent\n            \n\n        \n            Index\n            \n                \n                    \n                        \n                            Properties\n                        \n                    \n                    \n                        \n                            \n                                \n                                        \n                                            ops\n                                        \n                                \n                                \n                                        \n                                            pedal\n                                        \n                                \n                            \n                        \n                    \n                \n            \n        \n\n\n\n            \n                Properties\n                    \n                        \n                                \n                                    \n                                        \n                                        ops\n                                            \n                                                \n                                            \n                                        \n                                    \n                                \n                                \n                                    \n                                        ops:         Array\n\n                                    \n                                \n\n\n                                    \n                                        \n                                            Type :         Array\n\n                                        \n                                    \n\n\n\n\n\n                        \n                    \n                    \n                        \n                                \n                                    \n                                        \n                                        pedal\n                                            \n                                                \n                                            \n                                        \n                                    \n                                \n                                \n                                    \n                                        pedal:         number\n\n                                    \n                                \n\n\n                                    \n                                        \n                                            Type :         number\n\n                                        \n                                    \n\n\n\n\n\n                        \n                    \n            \n    \n\n\n    \n        import { Draft } from \"../../core/model/datatypes\";\nimport { wefts } from \"../../core/model/drafts\";\nimport { OpInput, TreeOperation as TreeOp, SingleInlet,\n  BaseOp as Op, BuildableOperation as GenericOp, \n  Seed, Pipe, AllRequired, DraftsOptional, \n  getDefaultParams, \n  ParamValue\n} from \"../../mixer/model/operation\";\nimport { PlayerState, initState, copyState } from \"./state\";\n\nimport { OpSequencer, makeOpSequencer } from \"./sequencer\";\nexport * from \"./sequencer\";\n\nexport interface PlayerOp {\n  id?: number,\n  name: string,\n  struct_id?: number,\n  dx?: string,\n  op?: GenericOp,\n  weavingOnly?: boolean,\n  chain?: boolean,\n  perform: (init: PlayerState) => Promise;\n}\nexport type SingleOp = PlayerOp;\n\n/** @const forward a player-specific function to progress through the draft */\nexport const forward: PlayerOp = {\n  name: 'forward',\n  perform: (init: PlayerState) => { \n    let res = copyState(init);\n    res.row = (init.row+1) % wefts(init.draft.drawdown);\n    res.pedal = 'forward';\n    if (res.weaving) res.numPicks++;\n    return Promise.resolve(res); \n  }\n}\n\n/** @const refresh a player-specific function to progress through the draft (re-sends the row to give more time) */\nexport const refresh: PlayerOp = {\n  name: 'refresh',\n  perform: (init: PlayerState) => { \n    let res = copyState(init);\n    if (res.weaving) res.numPicks++;\n    return Promise.resolve(res);\n  }\n}\n\n/** @const reverse a player-specific function to progress backwards through the draft */\nexport const reverse: PlayerOp = {\n  name: 'reverse',\n  perform: (init: PlayerState) => { \n    let res = copyState(init);\n    res.row = (init.row+wefts(init.draft.drawdown)-1) % wefts(init.draft.drawdown);\n    res.pedal = 'reverse';\n    if (res.weaving) res.numPicks++;\n    return Promise.resolve(res);\n  }\n}\n\nexport function playerOpFrom(op: GenericOp, params?: Array) {\n  // use \"rotate\" op as an example\n  let input_params = params ? params : getDefaultParams(op);\n  let perform;\n  if (op.classifier.type === 'pipe') {\n    const pipeOp = op as Op;\n    perform = function(init: PlayerState) {\n      let res = copyState(init);\n      res.draft = pipeOp.perform(init.draft, input_params);\n      res.row = (init.row) % wefts(res.draft.drawdown);\n      res.pedal = op.name;\n      return Promise.resolve(res);\n    }\n  } else if (op.classifier.type === 'seed') {\n    const seedOp = op as Op;\n    perform = function(init: PlayerState) {\n      let res = copyState(init);\n      res.draft = seedOp.perform(input_params);\n      res.row = (init.row) % wefts(res.draft.drawdown);\n      res.pedal = op.name;\n      return Promise.resolve(res);\n    }\n  }\n  \n  /** @TODO */\n  var p: PlayerOp = { \n    name: op.name,\n    dx: op.dx,\n    perform: perform\n  }\n  return p;\n}\n\n\n/** \n * @type \n * a TreeOperation is compatible with the player if it takes one or zero draft inputs \n * and outputs one draft.\n */\ntype PlayableTreeOp = TreeOp & \n  ( { inlets: [ SingleInlet ] } | \n    { inlets: [] });\n\n/** @function playerOpFromTree (untested) */\nfunction playerOpFromTree(op: PlayableTreeOp) {\n  let perform: PlayerOp[\"perform\"];\n  let param_input: OpInput = { op_name: op.name, drafts: [], params: getDefaultParams(op), inlet: -1 }\n  if (op.inlets.length == 0) {\n    perform = function(init: PlayerState) {\n      return op.perform([param_input]).then((output) => {\n        return { \n          draft: output[0], \n          row: init.row, \n          weaving: init.weaving, \n          pedal: op.name, \n          numPicks: init.numPicks \n        };\n      });\n    }\n  } else {\n    perform = function(init: PlayerState) {\n      let draft_input: OpInput = { op_name: 'child', drafts: [init.draft], params: [], inlet: 0}\n      return op.perform([param_input, draft_input]).then((output) => {\n        return { \n          draft: output[0], \n          row: init.row, \n          weaving: init.weaving,\n          pedal: op.name,\n          numPicks: init.numPicks };\n      });\n    }\n  }\n\n  var p: PlayerOp = { \n    name: op.name,\n    perform: perform\n  }\n  return p;\n}\n\n/** things that can happen in response to a pedal */\nexport interface PedalEvent {\n  id?: number,\n  pedal?: number,\n  name: string\n  perform: (init: PlayerState, ...args) => Promise;\n}\n\n/** \n * Basic combination: \n *  - 1 pedal, 1 operation\n *  - if pedal, then operation perform() \n * @param pedal ID number of pedal\n * @param op    ID number of Operation (assigned in Draft Player service)\n */\nexport interface PairedOp extends PedalEvent {\n  pedal:  number,\n  op:     PlayerOp,\n}\n\n// this ...args thing is such a hack\nexport function makePairedOp(p: number, op: PlayerOp): PairedOp {\n  let jankPerform = (init: PlayerState, ...args) => {\n    return op.perform(init);\n  }\n  return {\n    pedal: p,\n    name: op.name,\n    op: op,\n    perform: jankPerform\n  }\n}\n\n/**\n * Op chain:\n * - 1 pedal, multiple operations in a chain (array)\n * - if pedal, perform() each Op in sequence\n * @param pedal ID number of pedals\n * @param ops   array of Op ID numbers to execute in order\n */\nexport interface ChainOp extends PedalEvent{\n  pedal:  number,\n  ops:    Array,\n}\n\nexport function makeBlankChainOp(p?: number): ChainOp {\n  let res: ChainOp = {\n    pedal: -1,\n    name: \"\",\n    ops: [],\n    perform: (init: PlayerState, ...args) => {return Promise.resolve(init);}\n  }\n  \n  if (p) res.pedal = p;\n  return res;\n}\n\nexport function makeChainOp(ops: Array, p?: number): ChainOp {\n  let res = makeBlankChainOp(p);\n  res.name = \"ch\";\n  for (let o of ops) {\n    res.name += \"-\" + o.name;\n  }\n\n  res.ops = ops;\n  res.perform = (init: PlayerState, ...args) => {\n    let newState = copyState(init);\n    newState.pedal = \"ch\";\n    let d: Draft = init.draft;\n    for (let o of ops) {\n      if (o.op.classifier.type == 'seed') {\n        let base_op = o.op as Op;\n        d = base_op.perform(getDefaultParams(base_op));\n      } else if (o.op.classifier.type == 'pipe') {\n        let base_op = o.op as Op;\n        d = base_op.perform(d, getDefaultParams(base_op));\n      }\n      newState.pedal += \"-\" + o.name;\n    }\n\n    newState.draft = d;\n\n    return Promise.resolve(newState);\n  }\n\n  console.log('op chain: ', res);\n\n  return res;\n}\n\nexport type PedalOpMapping = Array;// & {\n//   [id: number]: PedalAction\n// }\n\nexport type MappingShapes = {\n  'pairing': PairedOp,\n  'chain': ChainOp,\n  'sequencer': OpSequencer\n};\n\nexport type PedalAction = MappingShapes[keyof MappingShapes];\n\nexport type MappingType = 'pairing' | 'chain' | 'sequencer';\n    \n\n\n\n\n\n\n\n\n\n                   \n    \n         results matching \"\"\n        \n    \n    \n        No results matching \"\"\n    \n\n"},"components/ConnectionComponent.html":{"url":"components/ConnectionComponent.html","title":"component - ConnectionComponent","body":"\n                   \n\n\n\n\n\n  Components\n  \n  ConnectionComponent\n\n\n\n        \n            Info\n        \n        \n            Source\n        \n        \n            Template\n        \n        \n            Styles\n        \n        \n            DOM Tree\n        \n\n\n\n    \n    File\n\n\n    src/app/mixer/palette/connection/connection.component.ts\n\n\n\n\n\n    \n        Implements\n    \n    \n                    OnInit\n    \n\n\n\n    Metadata\n    \n        \n\n\n\n\n\n\n\n\n\n\n\n            \n                selector\n                app-connection\n            \n\n            \n                styleUrls\n                ./connection.component.scss\n            \n\n\n\n            \n                templateUrl\n                ./connection.component.html\n            \n\n\n\n\n\n\n\n\n        \n    \n\n\n    \n    Index\n    \n        \n                \n                    \n                        Properties\n                    \n                \n                \n                    \n                        \n                            \n                                b_from\n                            \n                            \n                                b_to\n                            \n                            \n                                bounds\n                            \n                            \n                                disable_drag\n                            \n                            \n                                from\n                            \n                            \n                                no_draw\n                            \n                            \n                                orientation_x\n                            \n                            \n                                orientation_y\n                            \n                            \n                                svg\n                            \n                            \n                                to\n                            \n                            \n                                to_ndx\n                            \n                            \n                                    Public\n                                tree\n                            \n                        \n                    \n                \n\n                \n                    \n                        Methods\n                    \n                \n                \n                    \n                        \n                            \n                                calculateBounds\n                            \n                            \n                                disableDrag\n                            \n                            \n                                drawConnection\n                            \n                            \n                                drawForPrint\n                            \n                            \n                                enableDrag\n                            \n                            \n                                ngAfterViewInit\n                            \n                            \n                                ngOnInit\n                            \n                            \n                                rescale\n                            \n                            \n                                updateFromPosition\n                            \n                            \n                                updateToPosition\n                            \n                        \n                    \n                \n\n                \n                    \n                        Inputs\n                    \n                \n                \n                    \n                        \n                            \n                                default_cell_size\n                            \n                            \n                                id\n                            \n                            \n                                scale\n                            \n                        \n                    \n                \n\n\n\n\n        \n    \n\n\n    \n    Constructor\n        \n            \n                \n                    \nconstructor(tree: TreeService)\n                    \n                \n                        \n                            \n                                Defined in src/app/mixer/palette/connection/connection.component.ts:41\n                            \n                        \n\n                \n                    \n                            \n                                    Parameters :\n                                    \n                                        \n                                            \n                                                Name\n                                                    Type\n                                                Optional\n                                            \n                                        \n                                        \n                                                \n                                                        tree\n                                                  \n                                                        \n                                                                        TreeService\n                                                        \n                                                  \n                                                    \n                                                            No\n                                                    \n                                                    \n                                                \n                                        \n                                    \n                            \n                    \n                \n            \n        \n\n\n    \n    Inputs\n        \n            \n                \n                    \n                        \n                        default_cell_size\n                    \n                \n                \n                    \n                        Type :         number\n\n                    \n                \n                        \n                            \n                                    Defined in src/app/mixer/palette/connection/connection.component.ts:18\n                            \n                        \n            \n        \n        \n            \n                \n                    \n                        \n                        id\n                    \n                \n                \n                    \n                        Type :         number\n\n                    \n                \n                        \n                            \n                                    Defined in src/app/mixer/palette/connection/connection.component.ts:16\n                            \n                        \n            \n        \n        \n            \n                \n                    \n                        \n                        scale\n                    \n                \n                \n                    \n                        Type :         number\n\n                    \n                \n                        \n                            \n                                    Defined in src/app/mixer/palette/connection/connection.component.ts:17\n                            \n                        \n            \n        \n\n\n\n\n    \n    \n    \n        Methods\n    \n    \n        \n            \n                \n                    \n                    \n                        calculateBounds\n                        \n                    \n                \n            \n            \n                \ncalculateBounds()\n                \n            \n\n\n            \n                \n                    Defined in src/app/mixer/palette/connection/connection.component.ts:141\n                \n            \n\n\n            \n                \n\n                    \n                        Returns :         void\n\n                    \n                \n            \n        \n    \n    \n        \n            \n                \n                    \n                    \n                        disableDrag\n                        \n                    \n                \n            \n            \n                \ndisableDrag()\n                \n            \n\n\n            \n                \n                    Defined in src/app/mixer/palette/connection/connection.component.ts:75\n                \n            \n\n\n            \n                \n\n                    \n                        Returns :         void\n\n                    \n                \n            \n        \n    \n    \n        \n            \n                \n                    \n                    \n                        drawConnection\n                        \n                    \n                \n            \n            \n                \ndrawConnection()\n                \n            \n\n\n            \n                \n                    Defined in src/app/mixer/palette/connection/connection.component.ts:167\n                \n            \n\n\n            \n                \n\n                    \n                        Returns :         void\n\n                    \n                \n            \n        \n    \n    \n        \n            \n                \n                    \n                    \n                        drawForPrint\n                        \n                    \n                \n            \n            \n                \ndrawForPrint(canvas, cx, scale: number)\n                \n            \n\n\n            \n                \n                    Defined in src/app/mixer/palette/connection/connection.component.ts:185\n                \n            \n\n\n            \n                \n\n                    \n                        Parameters :\n                        \n                        \n                            \n                                \n                                    Name\n                                    Type\n                                    Optional\n                                \n                            \n                            \n                                \n                                    canvas\n                                    \n                                    \n\n                                    \n                                        No\n                                    \n\n\n                                \n                                \n                                    cx\n                                    \n                                    \n\n                                    \n                                        No\n                                    \n\n\n                                \n                                \n                                    scale\n                                    \n                                                number\n                                    \n\n                                    \n                                        No\n                                    \n\n\n                                \n                            \n                        \n                    \n                    \n                    \n                    \n                        Returns :         void\n\n                    \n                    \n                        \n                    \n                \n            \n        \n    \n    \n        \n            \n                \n                    \n                    \n                        enableDrag\n                        \n                    \n                \n            \n            \n                \nenableDrag()\n                \n            \n\n\n            \n                \n                    Defined in src/app/mixer/palette/connection/connection.component.ts:79\n                \n            \n\n\n            \n                \n\n                    \n                        Returns :         void\n\n                    \n                \n            \n        \n    \n    \n        \n            \n                \n                    \n                    \n                        ngAfterViewInit\n                        \n                    \n                \n            \n            \n                \nngAfterViewInit()\n                \n            \n\n\n            \n                \n                    Defined in src/app/mixer/palette/connection/connection.component.ts:59\n                \n            \n\n\n            \n                \n\n                    \n                        Returns :         void\n\n                    \n                \n            \n        \n    \n    \n        \n            \n                \n                    \n                    \n                        ngOnInit\n                        \n                    \n                \n            \n            \n                \nngOnInit()\n                \n            \n\n\n            \n                \n                    Defined in src/app/mixer/palette/connection/connection.component.ts:47\n                \n            \n\n\n            \n                \n\n                    \n                        Returns :         void\n\n                    \n                \n            \n        \n    \n    \n        \n            \n                \n                    \n                    \n                        rescale\n                        \n                    \n                \n            \n            \n                \nrescale(scale: number)\n                \n            \n\n\n            \n                \n                    Defined in src/app/mixer/palette/connection/connection.component.ts:207\n                \n            \n\n\n            \n                \n                    rescales this compoment.\nCall after the operation and subdraft connections have been updated.\n\n\n                    \n                        Parameters :\n                        \n                        \n                            \n                                \n                                    Name\n                                    Type\n                                    Optional\n                                \n                            \n                            \n                                \n                                    scale\n                                    \n                                                number\n                                    \n\n                                    \n                                        No\n                                    \n\n\n                                \n                            \n                        \n                    \n                    \n                    \n                    \n                        Returns :         void\n\n                    \n                    \n                        \n                    \n                \n            \n        \n    \n    \n        \n            \n                \n                    \n                    \n                        updateFromPosition\n                        \n                    \n                \n            \n            \n                \nupdateFromPosition(from: any)\n                \n            \n\n\n            \n                \n                    Defined in src/app/mixer/palette/connection/connection.component.ts:119\n                \n            \n\n\n            \n                \n                    if every connection goes from one node to another, the from node depends on the kind of object\n\n\n                    \n                        Parameters :\n                        \n                        \n                            \n                                \n                                    Name\n                                    Type\n                                    Optional\n                                    Description\n                                \n                            \n                            \n                                \n                                    from\n                                    \n                                                any\n                                    \n\n                                    \n                                        No\n                                    \n\n\n                                    \n                                        the id of the component this connection goes to\n\n                                    \n                                \n                            \n                        \n                    \n                    \n                    \n                    \n                        Returns :         void\n\n                    \n                    \n                        \n                    \n                \n            \n        \n    \n    \n        \n            \n                \n                    \n                    \n                        updateToPosition\n                        \n                    \n                \n            \n            \n                \nupdateToPosition(to: OperationComponent | SubdraftComponent)\n                \n            \n\n\n            \n                \n                    Defined in src/app/mixer/palette/connection/connection.component.ts:89\n                \n            \n\n\n            \n                \n                    if every connection goes from one node to another, the to node is always the topleft corner\nunless the to node is a dynamic operation, in which case we must move to an inlet.\n\n\n                    \n                        Parameters :\n                        \n                        \n                            \n                                \n                                    Name\n                                    Type\n                                    Optional\n                                    Description\n                                \n                            \n                            \n                                \n                                    to\n                                    \n                                            OperationComponent | SubdraftComponent\n                                    \n\n                                    \n                                        No\n                                    \n\n\n                                    \n                                        the id of the component this connection goes to\n\n                                    \n                                \n                            \n                        \n                    \n                    \n                    \n                    \n                        Returns :         void\n\n                    \n                    \n                        \n                    \n                \n            \n        \n    \n\n    \n    \n    \n        Properties\n    \n    \n        \n            \n                \n                    \n                    \n                        b_from\n                        \n                    \n                \n            \n                \n                    \n                        Type :         Point\n\n                    \n                \n                    \n                        \n                                Defined in src/app/mixer/palette/connection/connection.component.ts:25\n                        \n                    \n\n\n        \n    \n    \n        \n            \n                \n                    \n                    \n                        b_to\n                        \n                    \n                \n            \n                \n                    \n                        Type :         Point\n\n                    \n                \n                    \n                        \n                                Defined in src/app/mixer/palette/connection/connection.component.ts:26\n                        \n                    \n\n\n        \n    \n    \n        \n            \n                \n                    \n                    \n                        bounds\n                        \n                    \n                \n            \n                \n                    \n                        Type :         Bounds\n\n                    \n                \n                \n                    \n                        Default value : {\n    topleft: {x: 0, y:0},\n    width: 0,\n    height:0\n  }\n                    \n                \n                    \n                        \n                                Defined in src/app/mixer/palette/connection/connection.component.ts:33\n                        \n                    \n\n\n        \n    \n    \n        \n            \n                \n                    \n                    \n                        disable_drag\n                        \n                    \n                \n            \n                \n                    \n                        Type :         boolean\n\n                    \n                \n                \n                    \n                        Default value : true\n                    \n                \n                    \n                        \n                                Defined in src/app/mixer/palette/connection/connection.component.ts:29\n                        \n                    \n\n\n        \n    \n    \n        \n            \n                \n                    \n                    \n                        from\n                        \n                    \n                \n            \n                \n                    \n                        Type :         number\n\n                    \n                \n                    \n                        \n                                Defined in src/app/mixer/palette/connection/connection.component.ts:21\n                        \n                    \n\n\n        \n    \n    \n        \n            \n                \n                    \n                    \n                        no_draw\n                        \n                    \n                \n            \n                \n                    \n                        Type :         boolean\n\n                    \n                \n                    \n                        \n                                Defined in src/app/mixer/palette/connection/connection.component.ts:41\n                        \n                    \n\n\n        \n    \n    \n        \n            \n                \n                    \n                    \n                        orientation_x\n                        \n                    \n                \n            \n                \n                    \n                        Type :         boolean\n\n                    \n                \n                \n                    \n                        Default value : true\n                    \n                \n                    \n                        \n                                Defined in src/app/mixer/palette/connection/connection.component.ts:30\n                        \n                    \n\n\n        \n    \n    \n        \n            \n                \n                    \n                    \n                        orientation_y\n                        \n                    \n                \n            \n                \n                    \n                        Type :         boolean\n\n                    \n                \n                \n                    \n                        Default value : true\n                    \n                \n                    \n                        \n                                Defined in src/app/mixer/palette/connection/connection.component.ts:31\n                        \n                    \n\n\n        \n    \n    \n        \n            \n                \n                    \n                    \n                        svg\n                        \n                    \n                \n            \n                \n                    \n                        Type :     HTMLElement\n\n                    \n                \n                    \n                        \n                                Defined in src/app/mixer/palette/connection/connection.component.ts:39\n                        \n                    \n\n\n        \n    \n    \n        \n            \n                \n                    \n                    \n                        to\n                        \n                    \n                \n            \n                \n                    \n                        Type :         number\n\n                    \n                \n                    \n                        \n                                Defined in src/app/mixer/palette/connection/connection.component.ts:22\n                        \n                    \n\n\n        \n    \n    \n        \n            \n                \n                    \n                    \n                        to_ndx\n                        \n                    \n                \n            \n                \n                    \n                        Type :         number\n\n                    \n                \n                    \n                        \n                                Defined in src/app/mixer/palette/connection/connection.component.ts:23\n                        \n                    \n\n\n        \n    \n    \n        \n            \n                \n                    \n                    \n                            Public\n                        tree\n                        \n                    \n                \n            \n                \n                    \n                        Type :         TreeService\n\n                    \n                \n                    \n                        \n                                Defined in src/app/mixer/palette/connection/connection.component.ts:43\n                        \n                    \n\n\n        \n    \n\n\n\n\n\n    \n        import { Component, OnInit, Input } from '@angular/core';\nimport { i } from 'mathjs';\nimport { Bounds, Point } from '../../../core/model/datatypes';\nimport { TreeService } from '../../provider/tree.service';\nimport { OperationComponent } from '../operation/operation.component';\nimport { SubdraftComponent } from '../subdraft/subdraft.component';\n\n@Component({\n  selector: 'app-connection',\n  templateUrl: './connection.component.html',\n  styleUrls: ['./connection.component.scss']\n})\nexport class ConnectionComponent implements OnInit {\n\n\n  @Input() id: number;\n  @Input() scale: number;\n  @Input() default_cell_size: number;\n\n\n  from: number; \n  to: number; \n  to_ndx: number; \n  \n  b_from: Point;\n  b_to: Point;\n\n\n  disable_drag:boolean = true;\n  orientation_x: boolean = true;\n  orientation_y: boolean = true;\n\n  bounds: Bounds = {\n    topleft: {x: 0, y:0},\n    width: 0,\n    height:0\n  };\n\n  svg: HTMLElement;\n\n  no_draw: boolean;\n\n  constructor(public tree: TreeService) { \n\n  }\n\n  ngOnInit() {\n    const treenode = this.tree.getTreeNode(this.id);\n    const from_io = treenode.inputs[0];\n    const to_io = treenode.outputs[0];\n\n    this.from = from_io.tn.node.id;\n    this.to = to_io.tn.node.id;\n\n    this.no_draw = this.tree.getType(this.from) === 'op' && this.tree.hasSingleChild(this.from);\n\n  }\n\n  ngAfterViewInit(){\n\n    this.svg = document.getElementById('svg-'+this.id.toString());\n    const to_comp = this.tree.getComponent(this.to);\n    \n     if(to_comp !== null){\n      this.b_to = {\n        x:  to_comp.bounds.topleft.x + 15*this.scale/this.default_cell_size,\n        y: to_comp.bounds.topleft.y\n      };      this.updateFromPosition(this.tree.getComponent(this.from));\n      this.updateToPosition( to_comp);\n     }\n  }\n\n\n\n  disableDrag(){\n    this.disable_drag = true;\n  }\n\n  enableDrag(){\n    //there is never a case where this should be enabled so set to true\n    this.disable_drag = true;\n  }\n\n  /**\n   * if every connection goes from one node to another, the to node is always the topleft corner\n   * unless the to node is a dynamic operation, in which case we must move to an inlet. \n   * @param to the id of the component this connection goes to\n   */\n  updateToPosition(to: OperationComponent | SubdraftComponent){\n\n    if(to.id != this.to) console.error(\"attempting to move wrong TO connection\", to.id, this.to);\n   \n    this.b_to = {\n      x:  to.bounds.topleft.x + 3*this.scale/this.default_cell_size +  15* this.scale/this.default_cell_size,\n      y: to.bounds.topleft.y\n    };\n\n    if(this.tree.getType(to.id) === 'op'){\n      // get the inlet value \n      const ndx = this.tree.getInletOfCxn(to.id, this.id);\n      if(ndx !== -1){\n        const element = document.getElementById('inlet'+to.id+\"-\"+ndx);\n        if(element !== undefined && element !== null){\n          const left_offset = element.offsetLeft;\n          this.b_to = {x: to.bounds.topleft.x + left_offset*this.scale/this.default_cell_size + 15* this.scale/this.default_cell_size, y: to.bounds.topleft.y}\n        }\n      }\n    }\n\n    this.calculateBounds();\n    this.drawConnection();\n  }\n\n\n  /**\n   * if every connection goes from one node to another, the from node depends on the kind of object\n   * @param from the id of the component this connection goes to\n   */\n  updateFromPosition(from: any){\n\n    if(from.id != this.from) console.error(\"attempting to move wrong FROM connection\", from.id, this.from);\n\n    if((from).draft_visible){\n      const top_offset = document.getElementById(from.id+\"-out\").offsetTop;\n\n      this.b_from = \n      {x: from.bounds.topleft.x+ 3*this.scale, \n       y: from.bounds.topleft.y + (top_offset+30)*this.scale/this.default_cell_size};\n    }else{\n      this.b_from = \n      {x: from.bounds.topleft.x + 3*this.scale, \n       y: from.bounds.topleft.y + 30};\n    }\n\n    this.calculateBounds();\n    this.drawConnection();\n    \n  }\n\n\n  calculateBounds(){\n    \n    let p1: Point = this.b_from;\n    let p2: Point = this.b_to;\n    let bottomright: Point = {x:0, y:0};\n\n    if(p1 === undefined || p2 === undefined) return;\n\n\n    this.orientation_x = true;\n    this.orientation_y = true;\n    \n    if(p2.x  ' ;\n    }else if(!this.orientation_x && !this.orientation_y){\n      this.svg.innerHTML = '  ' ;\n    }else if(!this.orientation_x && this.orientation_y){\n      this.svg.innerHTML = '  ' ;\n    }else{\n      this.svg.innerHTML = '  ' ;\n\n    }\n  \n\n  }\n\n  drawForPrint(canvas, cx, scale: number) {\n\n    // cx.beginPath();\n    // cx.strokeStyle = \"#ff4081\";\n    // cx.setLineDash([scale, 2]);\n    // cx.lineWidth = 2;\n    // // this.cx.strokeRect(0,0, this.bounds.width, this.bounds.height);\n    // if(this.orientation){\n    //   cx.moveTo(this.bounds.topleft.x, this.bounds.topleft.y);\n    //   cx.lineTo(this.bounds.width + this.bounds.topleft.x, this.bounds.topleft.y + this.bounds.height);\n    // }else{\n    //   cx.moveTo(this.bounds.topleft.x, this.bounds.height+ this.bounds.topleft.y);\n    //   cx.lineTo(this.bounds.width + this.bounds.topleft.x, this.bounds.topleft.y);\n    // }\n    // cx.stroke();\n  }\n\n  /**\n   * rescales this compoment. \n   * Call after the operation and subdraft connections have been updated. \n   * @param scale \n   */\n  rescale(scale:number){\n\n    const from_comp: any = this.tree.getComponent(this.from);\n    const to_comp: any = this.tree.getComponent(this.to);\n\n    this.updateFromPosition(from_comp);\n    this.updateToPosition(to_comp);\n   \n    // this.b_from = {x: from_comp.bounds.topleft.x, y: from_comp.bounds.topleft.y + from_comp.bounds.height};\n    // this.b_to = {x: to_comp.bounds.topleft.x, y: to_comp.bounds.topleft.y};\n     \n    this.scale = scale;\n    this.calculateBounds();\n    this.drawConnection();\n\n    // const container: HTMLElement = document.getElementById('cxn-'+this.id);\n    // container.style.transformOrigin = 'top left';\n    // container.style.transform = 'scale(' + this.scale/5 + ')';\n\n  }\n\n\n}\n\n    \n\n    \n        \n\n\n\n  \n\n\n\n\n\n\n    \n\n    \n                \n                    ./connection.component.scss\n                \n                canvas{\n    position: absolute;\n    top:0;\n    left: 0;\n}\n\n.connection-container{\n    position: absolute;\n    top: 0px;\n    left: 0px;\n}\n    \n\n    \n        \n        \n            \n                Legend\n            \n            \n                Html element\n            \n            \n                Component\n            \n            \n                Html element with directive\n            \n        \n    \n\n    \n\n\n\n\n\n\n        var COMPONENT_TEMPLATE = '  '\n    var COMPONENTS = [{'name': 'ConnectionComponent', 'selector': 'app-connection'},{'name': 'DraftdetailComponent', 'selector': 'app-draftdetail'},{'name': 'ImageComponent', 'selector': 'app-image'},{'name': 'InletComponent', 'selector': 'app-inlet'},{'name': 'MixerComponent', 'selector': 'app-mixer'},{'name': 'MixerViewComponent', 'selector': 'app-mixerview'},{'name': 'NoteComponent', 'selector': 'app-note'},{'name': 'OperationComponent', 'selector': 'app-operation'},{'name': 'OpHelpModal', 'selector': 'app-ophelp'},{'name': 'OpsComponent', 'selector': 'app-ops'},{'name': 'OpSequencerComponent', 'selector': 'app-op-sequencer'},{'name': 'PaletteComponent', 'selector': 'app-palette'},{'name': 'ParameterComponent', 'selector': 'app-parameter'},{'name': 'PlayerComponent', 'selector': 'app-player'},{'name': 'SnackbarComponent', 'selector': 'app-snackbar'},{'name': 'SubdraftComponent', 'selector': 'app-subdraft'},{'name': 'VirtualPedalsComponent', 'selector': 'app-virtual-pedals'},{'name': 'WeavingStateComponent', 'selector': 'app-weaving-state'}];\n    var DIRECTIVES = [{'name': 'MarqueeComponent', 'selector': 'app-marquee'},{'name': 'SelectionComponent', 'selector': 'app-selection'}];\n    var ACTUAL_COMPONENT = {'name': 'ConnectionComponent'};\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n                   \n    \n         results matching \"\"\n        \n    \n    \n        No results matching \"\"\n    \n\n"},"interfaces/Crossing.html":{"url":"interfaces/Crossing.html","title":"interface - Crossing","body":"\n                   \n\n\n\n\n\n\n\n\n\n\n\n\n\n\n  Interfaces\n  \n  Crossing\n\n\n\n        \n            Info\n        \n        \n            Source\n        \n\n\n\n    \n        \n            File\n        \n        \n            src/app/core/model/datatypes/yarnsim.ts\n        \n\n\n            \n                Description\n            \n            \n                A yarn cross describes the relationship betwen two draft cells\nread from top to bottom. This is used within the sparce\ndraft representation, stores only \"warp\" crossings\n\n            \n\n\n        \n            Index\n            \n                \n                    \n                        \n                            Properties\n                        \n                    \n                    \n                        \n                            \n                                \n                                        \n                                            j\n                                        \n                                \n                                \n                                        \n                                            type\n                                        \n                                \n                            \n                        \n                    \n                \n            \n        \n\n\n\n            \n                Properties\n                    \n                        \n                                \n                                    \n                                        \n                                        j\n                                            \n                                                \n                                            \n                                        \n                                    \n                                \n                                \n                                    \n                                        j:         number\n\n                                    \n                                \n\n\n                                    \n                                        \n                                            Type :         number\n\n                                        \n                                    \n\n\n\n\n\n                        \n                    \n                    \n                        \n                                \n                                    \n                                        \n                                        type\n                                            \n                                                \n                                            \n                                        \n                                    \n                                \n                                \n                                    \n                                        type:         crossType\n\n                                    \n                                \n\n\n                                    \n                                        \n                                            Type :         crossType\n\n                                        \n                                    \n\n\n\n\n\n                        \n                    \n            \n    \n\n\n    \n        export interface Vertex {\n  x_pcent: number;\n  y: number;\n}\n\n/**\n * Used to draw on screen paths, refers to x, y coordiantes relative to the draft simulation\n * Used only in yarn sim\n * @param draft_ndx - the row id within the draft of this yarn\n * @param material_id the material id at this row\n * @param verticies - list of points that form this path\n */\nexport interface YarnPath {\n\tdraft_ndx: number;\n  material_id: number;\n  verticies: Array;\n}\n\n/**\n * describes the relationship between weft rows along the same warp\n */\nexport type crossType = \n \t{t:boolean, b:boolean} |\n  {t:null, b:null} | //\"FLOAT\",\n  {t:null, b:true} | //\"UNSET_UNDER\"\n  {t:null, b:false} | //\"UNSET_OVER\"\n  {t:true, b:null} | //\"UNDER_UNSET\"\n  {t:false, b:null} | //\"OVER_UNSET\"\n  {t:false, b:true} | //\"OVER_UNDER\",\n  {t:true, b:false}; //\"UNDER_OVER\", \n\n\n/**\n * A yarn cross describes the relationship betwen two draft cells\n * read from top to bottom. This is used within the sparce \n * draft representation, stores only \"warp\" crossings\n */\nexport interface Crossing {\n  j: number, \n  type: crossType;\n}\n    \n\n\n\n\n\n\n\n\n\n                   \n    \n         results matching \"\"\n        \n    \n    \n        No results matching \"\"\n    \n\n"},"classes/DBListener.html":{"url":"classes/DBListener.html","title":"class - DBListener","body":"\n                   \n\n\n\n\n\n\n\n\n\n\n\n\n\n  Classes\n  DBListener\n\n\n\n        \n            Info\n        \n        \n            Source\n        \n\n\n\n    \n        \n            File\n        \n        \n            src/app/player/model/dbnodes.ts\n        \n\n\n            \n                Description\n            \n            \n                When active = true, will emit events on the value changing.\n\n            \n\n            \n                Extends\n            \n            \n                        DBNode\n            \n\n\n\n            \n    Index\n    \n        \n                \n                    \n                        Properties\n                    \n                \n                \n                    \n                        \n                            \n                                _active\n                            \n                            \n                                _dbref\n                            \n                            \n                                _name\n                            \n                            \n                                _val\n                            \n                            \n                                id\n                            \n                            \n                                    Optional\n                                key\n                            \n                            \n                                unsubscribers\n                            \n                        \n                    \n                \n\n                \n                    \n                        Methods\n                    \n                \n                \n                    \n                        \n                            \n                                attach\n                            \n                            \n                                detach\n                            \n                            \n                                getNow\n                            \n                        \n                    \n                \n\n\n\n\n\n        \n    \n\n\n            \n    Constructor\n        \n            \n                \n                    \nconstructor(params: NodeParams)\n                    \n                \n                        \n                            \n                                Defined in src/app/player/model/dbnodes.ts:126\n                            \n                        \n\n                \n                    \n                            \n                                    Parameters :\n                                    \n                                        \n                                            \n                                                Name\n                                                    Type\n                                                Optional\n                                            \n                                        \n                                        \n                                                \n                                                        params\n                                                  \n                                                        \n                                                                        NodeParams\n                                                        \n                                                  \n                                                    \n                                                            No\n                                                    \n                                                    \n                                                \n                                        \n                                    \n                            \n                    \n                \n            \n        \n\n\n            \n    \n    \n        Properties\n    \n    \n        \n            \n                \n                    \n                    \n                        _active\n                        \n                    \n                \n            \n                \n                    \n                        Type :         boolean\n\n                    \n                \n                        \n                            \n                                Inherited from         DBNode\n\n                            \n                        \n                    \n                        \n                                Defined in         DBNode:126\n\n                        \n                    \n\n\n        \n    \n    \n        \n            \n                \n                    \n                    \n                        _dbref\n                        \n                    \n                \n            \n                \n                    \n                        Type :     DatabaseReference\n\n                    \n                \n                        \n                            \n                                Inherited from         DBNode\n\n                            \n                        \n                    \n                        \n                                Defined in         DBNode:124\n\n                        \n                    \n\n\n        \n    \n    \n        \n            \n                \n                    \n                    \n                        _name\n                        \n                    \n                \n            \n                \n                    \n                        Type :         string\n\n                    \n                \n                        \n                            \n                                Inherited from         DBNode\n\n                            \n                        \n                    \n                        \n                                Defined in         DBNode:123\n\n                        \n                    \n\n\n        \n    \n    \n        \n            \n                \n                    \n                    \n                        _val\n                        \n                    \n                \n            \n                \n                    \n                        Type :         any\n\n                    \n                \n                        \n                            \n                                Inherited from         DBNode\n\n                            \n                        \n                    \n                        \n                                Defined in         DBNode:125\n\n                        \n                    \n\n\n        \n    \n    \n        \n            \n                \n                    \n                    \n                        id\n                        \n                    \n                \n            \n                \n                    \n                        Type :         number\n\n                    \n                \n                        \n                            \n                                Inherited from         DBNode\n\n                            \n                        \n                    \n                        \n                                Defined in         DBNode:121\n\n                        \n                    \n\n\n        \n    \n    \n        \n            \n                \n                    \n                    \n                            Optional\n                        key\n                        \n                    \n                \n            \n                \n                    \n                        Type :         string\n\n                    \n                \n                        \n                            \n                                Inherited from         DBNode\n\n                            \n                        \n                    \n                        \n                                Defined in         DBNode:122\n\n                        \n                    \n\n\n        \n    \n    \n        \n            \n                \n                    \n                    \n                        unsubscribers\n                        \n                    \n                \n            \n                \n                    \n                        Type :     Array\n\n                    \n                \n                        \n                            \n                                Inherited from         DBNode\n\n                            \n                        \n                    \n                        \n                                Defined in         DBNode:44\n\n                        \n                    \n\n            \n                \n                    holds the Unsubscribe functions that are returned by\nDB event functions like onValue(...)\n\n                \n            \n\n        \n    \n\n\n            \n    \n    \n        Methods\n    \n    \n        \n            \n                \n                    \n                    \n                        attach\n                        \n                    \n                \n            \n            \n                \nattach()\n                \n            \n\n\n            \n                \n                    Inherited from         DBNode\n\n                \n            \n            \n                \n                        Defined in         DBNode:132\n\n                \n            \n\n\n            \n                \n\n                    \n                        Returns :         void\n\n                    \n                \n            \n        \n    \n    \n        \n            \n                \n                    \n                    \n                        detach\n                        \n                    \n                \n            \n            \n                \ndetach()\n                \n            \n\n\n            \n                \n                    Inherited from         DBNode\n\n                \n            \n            \n                \n                        Defined in         DBNode:149\n\n                \n            \n\n\n            \n                \n\n                    \n                        Returns :         void\n\n                    \n                \n            \n        \n    \n    \n        \n            \n                \n                    \n                    \n                        getNow\n                        \n                    \n                \n            \n            \n                \ngetNow()\n                \n            \n\n\n            \n                \n                    Defined in src/app/player/model/dbnodes.ts:141\n                \n            \n\n\n            \n                \n\n                    \n                        Returns :         void\n\n                    \n                \n            \n        \n    \n\n\n\n\n\n\n    \n\n\n    \n        import { child, ref, set, get, query, \n  onValue, onChildAdded, onChildChanged, onChildRemoved,\n  push, remove,\n  DatabaseReference, \n} from \"firebase/database\";\nimport { Database } from '@angular/fire/database';\nimport { EventEmitter } from 'events';\n\nexport interface NodeParams {\n  db?: Database,\n  name?: string,\n  root?: string,\n  path?: string,\n  key?: string,\n  initVal?: any,\n  ref?: DatabaseReference,\n  id?: number\n}\n\nexport type NodeValue = string | boolean | number | { [key: string]: any };\n\ninterface NodeMethods {\n  attach(): void,\n  detach(): void,\n}\n\n/**\n * @class DBNode\n * @desc Wrapper for a Firebase database ref and\n * the value stored at that DB node.\n */\nabstract class DBNode extends EventEmitter implements NodeMethods {\n  id: number;\n  key?: string;\n  _name: string;\n  _dbref: DatabaseReference;\n  _val: NodeValue;\n  _active: boolean;\n\n  /**\n   * holds the Unsubscribe functions that are returned by\n   * DB event functions like onValue(...)\n   */\n  unsubscribers: Array;\n\n  /**\n   * \n   * @param {*} params \\{ db: Database, path: string, initVal: any }\n   * @param {*} params \\{ ref: DatabaseReference, key: string, initVal: any }\n   */\n\n  constructor(params: NodeParams) {\n    super();\n    this.active = false;\n    this.unsubscribers = [];\n    if (params.db) {\n      this._name = params.path;\n      this._dbref = ref(params.db, params.root + params.path);\n      this._val = params.initVal;\n      // console.log(this);\n    } else if (params.ref) {\n      this._name = params.key;\n      this._dbref = params.ref;\n    }\n\n    if(params.id > -1) {\n      this.id = params.id;\n    }\n    console.log(this.name);\n  }\n\n  get ref() {\n    return this._dbref;\n  }\n\n  get name() {\n    return this._name;\n  }\n\n  get val() {\n    if (!this.active) {\n      return false;\n    }\n\n    if (typeof(this._val) == 'number' || typeof(this._val == 'boolean')) {\n      return this._val;\n    } \n    \n    if (this._val != undefined) {\n      return Object.keys(this._val);\n    }\n  }\n\n  set val(x) {\n    this._val = x;\n  }\n\n  get active() {\n    return this._active;\n  }\n\n  set active(tf: boolean) {\n    this._active = tf;\n  }\n\n  // methods for a node: \n  // attach() means it is updating with the database and emitting events\n  // detach() means it is not updating, no events\n  abstract attach();\n  abstract detach();\n}\n\ntype Keyed = Node & { key: string };\n\n/**\n * @class DBListener\n * @desc A DBNode that only reads from the database.\n * When `active = true`, will emit events on the value changing.\n */\nexport class DBListener extends DBNode {\n  id: number;\n  key?: string;\n  _name: string;\n  _dbref: DatabaseReference;\n  _val: any;\n  _active: boolean;\n\n  constructor(params: NodeParams) {\n    super(params);\n  }\n\n  attach() {\n    this.active = true;\n    let unsub = onValue(this.ref, (snapshot) => {\n      this.val = snapshot.val();\n      this.emit('change', this.val);\n    });\n    this.unsubscribers.push(unsub);\n  }\n\n  getNow() {\n    get(query(this.ref))\n      .then((snapshot) => {\n        this.val = snapshot.val();\n      })\n      .catch(result => console.log(result));\n  }\n\n  detach() {\n    if (this.active) {\n      while (this.unsubscribers.length > 0) {\n        let unsub = this.unsubscribers.pop();\n        unsub();\n      }\n    }\n    this.active = false;\n  }\n}\n\n/**\n * @class DBWriter\n * @desc A DBNode that only writes to the database. \n * When `active = true`, will pass `val` to the database.\n */\nexport class DBWriter extends DBNode {\n  id: number;\n  key?: string;\n  _name: string;\n  _ref: DatabaseReference;\n  _val: any;\n  _active: boolean;\n\n  constructor(params: NodeParams) {\n    super(params);\n  }\n\n  attach() {\n    this.active = true;\n  }\n\n  setVal(x) {\n    this.val = x;\n    if (this.active) {\n      set(this.ref, this.val);\n    }\n  }\n\n  detach() {\n    this.active = false;\n  }\n}\n\n/** Special DBWriter that expects the node to be cleared by the\n * other end upon receipt\n */\nexport class DBWriteBuffer extends DBWriter {\n  id: number;\n  _name: string;\n  _ref: DatabaseReference;\n  _val: any;\n  _active: boolean;\n\n  constructor(params: NodeParams) {\n    super(params);\n  }\n\n  setVal(x) {\n    get(query(this.ref))\n      .then((snapshot) => {\n        if(!snapshot.val()) {\n          console.log(\"overwriting data in buffer\");\n        }\n        super.setVal(x);\n      })\n      .catch(result => console.log(result));\n  }\n}\n\nexport class DBTwoWay extends DBNode {\n  id: number;\n  key?: string;\n  _name: string;\n  _dbref: DatabaseReference;\n  _val: any;\n  _active: boolean;\n\n  constructor(params: NodeParams) {\n    super(params);\n  }\n  \n  attach() {\n    this.active = true;\n    let unsub = onValue(this.ref, (snapshot) => {\n      this.val = snapshot.val();\n      this.emit('change', this.val);\n    });\n    this.unsubscribers.push(unsub);\n  }\n\n  getNow() {\n    get(query(this.ref))\n      .then((snapshot) => {\n        this.val = snapshot.val();\n      })\n      .catch(result => console.log(result));\n  }\n  \n  detach() {\n    if (this.active) {\n      while (this.unsubscribers.length > 0) {\n        let unsub = this.unsubscribers.pop();\n        unsub();\n      }\n    }\n    this.active = false;\n  }\n  \n  setVal(x) {\n    this.val = x;\n    if (this.active) {\n      set(this.ref, this.val);\n    }\n  }\n}\n\nclass DBNodeArray extends EventEmitter {\n  nodes: Array;\n  lengthNode: DBNode;\n  parentNode: DBNode;\n\n  constructor(lengthNode, parentNode, init: any = {}) {\n    super();\n    this.lengthNode = lengthNode;\n    this.parentNode = parentNode;\n    if (init) {\n    } else {\n      this.nodes = [];\n    }\n  }\n\n  get length() { return this.nodes.length; }\n\n  get active() { return (this.lengthNode.active && this.parentNode.active); }\n\n  get ready() { return (this.lengthNode.val > 0 && this.parentNode.val != false); }\n\n  nodeAt(n) {\n    console.log(this.nodes);\n    console.log(\"node at \", n);\n    console.log(this.nodes[n]);\n    return this.nodes[n];\n  }\n\n  pushNode(n) {\n    this.nodes.push(n);\n  }\n\n  popNode() {\n    return this.nodes.pop();\n  }\n}\n\n/**\n * @class `DBListenerArray`\n * @desc Represents a listener to a list of values in the database \n * (generalizes to `DBNodeArray`). Assumes that the data list is\n * structured such that `lengthNode` is a `DBListener` that stores the \n * length of the list, while `parentNode` is a `DBListener` to the parent\n * node of the list. Each item in the list is a child of `parentNode`,\n * which is then stored as a `DBListener` in the array `nodes`.\n */\nexport class DBListenerArray extends DBNodeArray {\n  lengthNode: DBListener;\n  parentNode: DBListener;\n  nodes: Array;\n\n  /**\n  * holds the Unsubscribe functions that are returned by\n  * DB event functions like onValue(...)\n  */\n  unsubscribers: Array;\n\n  constructor(lengthNode: DBListener, parentNode: DBListener) {\n    super(lengthNode, parentNode);\n    this.lengthNode = lengthNode;\n    this.parentNode = parentNode;\n    this.nodes = [];\n    this.unsubscribers = [];\n  }\n\n  /**\n   * @method attach\n   */\n  attach() {\n    this.lengthNode.attach();\n    this.lengthNode.on('change', (val) => {\n        this.emit('ready', this.ready);\n    });\n\n    this.parentNode.attach();\n    this.parentNode.once('change', (val) => {\n      this.emit('ready', this.ready);\n    });\n\n    for (var node of this.nodes) {\n      this.attachChildNode(node);\n    }\n\n    this.unsubscribers.push(\n      onChildAdded(this.parentNode.ref, (snapshot) => {\n        // console.log(\"child added\", snapshot);\n        this.addNode(snapshot.key);\n    }));\n\n    this.unsubscribers.push(\n      onChildChanged(this.parentNode.ref, (snapshot) => {\n        console.log(\"child changed\", snapshot);\n    }));\n\n    this.unsubscribers.push(\n      onChildRemoved(this.parentNode.ref, () => {\n        // console.log(\"child removed\", snapshot);\n        let removed = this.popNode();\n        this.emit('child-removed', removed);\n    }));\n  }\n\n  detach() {\n    if (this.active) {\n      while (this.unsubscribers.length > 0) {\n        let unsub = this.unsubscribers.pop();\n        unsub();\n      }\n    }\n  }\n\n  nodeAt(n: number) {\n    // console.log(this.nodes);\n    // console.log(\"node at \", n);\n    // console.log(this.nodes[n]);\n    return this.nodes[n];\n  }\n\n  /**\n   * Creating a new child node.\n   * @param key \n   */\n  addNode(key: string) {\n    console.log('child key', key);\n    const childRef = child(this.parentNode.ref, key);\n    const childNode = new DBListener({ ref: childRef, key: key, id: this.length });\n    this.attachChildNode(childNode);\n    this.pushNode(childNode);\n    this.emit('child-added', childNode);\n    // this.lengthNode.setVal(this.length);\n  }\n\n  /**\n   * Attaching a child node that was created elsewhere.\n   * Invokes child's `attach()` method and adds event listener\n   * that will emit a `child-change` event.\n   * @param node \n   */\n  attachChildNode(node: DBListener) {\n    node.attach();\n    node.on('change', (val) => {\n      this.emit('child-change', {\n        id: node.id,\n        val: val\n      });\n    });\n  }\n\n  // remNode() {\n  //   const node = this.popNode();\n  //   // remove(node.ref);\n  //   // this.lengthNode.setVal(this.length);\n  // }\n\n  // updateArray(num: number) {\n  //   // this.parentNode.getNow();\n  //   if (num > this.length) {\n  //     let parentKeys = this.parentNode.val;\n  //     // console.log(this.parentNode);\n  //     console.log(parentKeys);\n  //     let childKeys = Object.keys(parentKeys);\n  //     while (this.length  num) {\n  //       this.popNode();\n  //     }\n  //   }\n  //   console.log(this);\n  // }\n\n  toString() {\n    var str = \"\";\n    // str += \"length: \" + this.length + \", \";\n    str += \"[ \\n\";\n    for (var i=0; i ;\n  lengthNode: DBWriter;\n  parentNode: DBWriter;\n\n  constructor(lengthNode, parentNode, init) {\n    super(lengthNode, parentNode, init);\n    if (!init) {\n      this.lengthNode.setVal(0);\n      this.parentNode.setVal(EMPTY_NODE_ARRAY);\n    }\n\n    // console.log(this);\n  }\n\n  addNode(initVal) {\n    const childRef = push(this.parentNode.ref, initVal);\n    const childNode = new DBWriter({ ref: childRef, initVal });\n    childNode.attach();\n    this.pushNode(childNode);\n    this.lengthNode.setVal(this.length);\n  }\n\n  remNode() {\n    const node = this.popNode();\n    remove(node.ref);\n    this.lengthNode.setVal(this.length);\n  }\n\n  updateArray(num, newStates) {\n    if (num > this.length) {\n      while (this.length  num) {\n        this.remNode();\n      }\n    }\n  }\n\n  setNode(i, x) {\n    this.nodes[i].setVal(x);\n  }\n\n}\n\n/**\n * Array of two-way DBNodes where both ends are listening for\n * changes AND may write to the DB -- such as the virtual pedals\n * where both AdaCAD and the Pi/PC can add virtual pedals\n */\nexport class DBTwoWayArray extends DBNodeArray {\n  nodes: Array = [];\n  lengthNode: DBTwoWay;\n  parentNode: DBTwoWay;\n\n  /**\n  * holds the Unsubscribe functions that are returned by\n  * DB event functions like onValue(...)\n  */\n  unsubscribers: Array;\n\n  constructor(lengthNode: DBTwoWay, parentNode: DBTwoWay, init?: Array) {\n    super(lengthNode, parentNode, init);\n    this.unsubscribers = [];\n    if (!init) {\n      this.lengthNode.setVal(0);\n      this.parentNode.setVal(EMPTY_NODE_ARRAY);\n    }\n  }\n\n  addNode(initVal: any) {\n    push(this.parentNode.ref, initVal);\n    // const childNode = new DBTwoWay({ ref: childRef, initVal });\n    // childNode.attach();\n    // this.pushNode(childNode);\n    // this.lengthNode.setVal(this.length);\n    // console.log('child key', key);\n  }\n\n  onNodeAdded(key: string) {\n     const childRef = child(this.parentNode.ref, key);\n     const childNode = new DBTwoWay({ ref: childRef, key: key, id: this.length });\n     this.attachChildNode(childNode);\n     this.pushNode(childNode);\n     this.lengthNode.setVal(this.length);\n     this.emit('child-added', childNode);\n  }\n\n  remNode() {\n    const lastNode = this.nodeAt(this.length-1);\n    remove(lastNode.ref);\n    // this.lengthNode.setVal(this.length);\n  }\n\n  onNodeRemoved() {\n    let removed = this.popNode();\n    this.lengthNode.setVal(this.length);\n    return removed;\n  }\n\n  updateArray(num: number, newStates: Array) {\n    if (num > this.length) {\n      while (this.length  num) {\n        this.remNode();\n      }\n    }\n  }\n\n  setNode(i: number, x: any) {\n    this.nodes[i].setVal(x);\n  }\n\n  /**\n  * @method attach\n  */\n  attach() {\n    this.lengthNode.attach();\n    this.lengthNode.on('change', (val) => {\n        this.emit('ready', this.ready);\n    });\n\n    this.parentNode.attach();\n    this.parentNode.once('change', (val) => {\n      this.emit('ready', this.ready);\n    });\n\n    for (var node of this.nodes) {\n      this.attachChildNode(node);\n    }\n\n    this.unsubscribers.push(\n      onChildAdded(this.parentNode.ref, (snapshot) => {\n        // console.log(\"child added\", snapshot);\n        this.onNodeAdded(snapshot.key);\n    }));\n\n    this.unsubscribers.push(\n      onChildChanged(this.parentNode.ref, (snapshot) => {\n        console.log(\"child changed\", snapshot);\n    }));\n\n    this.unsubscribers.push(\n      onChildRemoved(this.parentNode.ref, () => {\n        // console.log(\"child removed\", snapshot);\n        let removed = this.onNodeRemoved();\n        this.emit('child-removed', removed);\n    }));\n  }\n \n  detach() {\n    if (this.active) {\n      while (this.unsubscribers.length > 0) {\n        let unsub = this.unsubscribers.pop();\n        unsub();\n      }\n    }\n  }\n\n  /**\n  * Attaching a child node that was created elsewhere.\n  * Invokes child's `attach()` method and adds event listener\n  * that will emit a `child-change` event.\n  * @param node \n  */\n  attachChildNode(node: DBListener) {\n    node.attach();\n    node.on('change', (val) => {\n      this.emit('child-change', {\n        id: node.id,\n        val: val\n      });\n    });\n  }\n}\n\n/** special types of DBNodes */\n\n/** @class\n * OnlineStatus representing whether or not the\n * \"host\" device is online. The host device is responsible\n * for keeping the node set to \"true\", while any listener\n * devices check occasionally for the host's status by \n * attempting to set the node to \"false\".\n */\nexport class OnlineStatus extends DBListener {\n  _name: string;\n  _ref: DatabaseReference;\n  _val: boolean;\n  _active: boolean;\n\n  constructor(params) {\n    super(params);\n    this.attach();\n    get(query(this.ref))\n      .then((snapshot) => {\n        this.val = snapshot.val();\n      })\n      .catch(result => console.log(result));\n  }\n\n  checkAlive() {\n    set(this.ref, false)\n      .then(() => { this.emit('set', true); })\n      .catch(() => { this.emit('set', false); });\n  }\n}\n\n\n    \n\n\n\n\n\n\n\n\n\n\n                   \n    \n         results matching \"\"\n        \n    \n    \n        No results matching \"\"\n    \n\n"},"classes/DBListenerArray.html":{"url":"classes/DBListenerArray.html","title":"class - DBListenerArray","body":"\n                   \n\n\n\n\n\n\n\n\n\n\n\n\n\n  Classes\n  DBListenerArray\n\n\n\n        \n            Info\n        \n        \n            Source\n        \n\n\n\n    \n        \n            File\n        \n        \n            src/app/player/model/dbnodes.ts\n        \n\n\n            \n                Description\n            \n            \n                (generalizes to DBNodeArray). Assumes that the data list is\nstructured such that lengthNode is a DBListener that stores the\nlength of the list, while parentNode is a DBListener to the parent\nnode of the list. Each item in the list is a child of parentNode,\nwhich is then stored as a DBListener in the array nodes.\n\n            \n\n            \n                Extends\n            \n            \n                        DBNodeArray\n            \n\n\n\n            \n    Index\n    \n        \n                \n                    \n                        Properties\n                    \n                \n                \n                    \n                        \n                            \n                                lengthNode\n                            \n                            \n                                nodes\n                            \n                            \n                                parentNode\n                            \n                            \n                                unsubscribers\n                            \n                        \n                    \n                \n\n                \n                    \n                        Methods\n                    \n                \n                \n                    \n                        \n                            \n                                addNode\n                            \n                            \n                                attach\n                            \n                            \n                                attachChildNode\n                            \n                            \n                                detach\n                            \n                            \n                                nodeAt\n                            \n                            \n                                toString\n                            \n                            \n                                popNode\n                            \n                            \n                                pushNode\n                            \n                        \n                    \n                \n\n\n\n\n\n        \n    \n\n\n            \n    Constructor\n        \n            \n                \n                    \nconstructor(lengthNode: DBListener, parentNode: DBListener)\n                    \n                \n                        \n                            \n                                Defined in src/app/player/model/dbnodes.ts:321\n                            \n                        \n\n                \n                    \n                            \n                                    Parameters :\n                                    \n                                        \n                                            \n                                                Name\n                                                    Type\n                                                Optional\n                                            \n                                        \n                                        \n                                                \n                                                        lengthNode\n                                                  \n                                                        \n                                                                        DBListener\n                                                        \n                                                  \n                                                    \n                                                            No\n                                                    \n                                                    \n                                                \n                                                \n                                                        parentNode\n                                                  \n                                                        \n                                                                        DBListener\n                                                        \n                                                  \n                                                    \n                                                            No\n                                                    \n                                                    \n                                                \n                                        \n                                    \n                            \n                    \n                \n            \n        \n\n\n            \n    \n    \n        Properties\n    \n    \n        \n            \n                \n                    \n                    \n                        lengthNode\n                        \n                    \n                \n            \n                \n                    \n                        Type :         DBListener\n\n                    \n                \n                        \n                            \n                                Inherited from         DBNodeArray\n\n                            \n                        \n                    \n                        \n                                Defined in         DBNodeArray:313\n\n                        \n                    \n\n\n        \n    \n    \n        \n            \n                \n                    \n                    \n                        nodes\n                        \n                    \n                \n            \n                \n                    \n                        Type :         Array\n\n                    \n                \n                        \n                            \n                                Inherited from         DBNodeArray\n\n                            \n                        \n                    \n                        \n                                Defined in         DBNodeArray:315\n\n                        \n                    \n\n\n        \n    \n    \n        \n            \n                \n                    \n                    \n                        parentNode\n                        \n                    \n                \n            \n                \n                    \n                        Type :         DBListener\n\n                    \n                \n                        \n                            \n                                Inherited from         DBNodeArray\n\n                            \n                        \n                    \n                        \n                                Defined in         DBNodeArray:314\n\n                        \n                    \n\n\n        \n    \n    \n        \n            \n                \n                    \n                    \n                        unsubscribers\n                        \n                    \n                \n            \n                \n                    \n                        Type :     Array\n\n                    \n                \n                    \n                        \n                                Defined in src/app/player/model/dbnodes.ts:321\n                        \n                    \n\n            \n                \n                    holds the Unsubscribe functions that are returned by\nDB event functions like onValue(...)\n\n                \n            \n\n        \n    \n\n\n            \n    \n    \n        Methods\n    \n    \n        \n            \n                \n                    \n                    \n                        addNode\n                        \n                    \n                \n            \n            \n                \naddNode(key: string)\n                \n            \n\n\n            \n                \n                    Defined in src/app/player/model/dbnodes.ts:388\n                \n            \n\n\n            \n                \n                    Creating a new child node.\n\n\n                    \n                        Parameters :\n                        \n                        \n                            \n                                \n                                    Name\n                                    Type\n                                    Optional\n                                \n                            \n                            \n                                \n                                    key\n                                    \n                                                string\n                                    \n\n                                    \n                                        No\n                                    \n\n\n                                \n                            \n                        \n                    \n                    \n                    \n                    \n                        Returns :         void\n\n                    \n                    \n                        \n                    \n                \n            \n        \n    \n    \n        \n            \n                \n                    \n                    \n                        attach\n                        \n                    \n                \n            \n            \n                \nattach()\n                \n            \n\n\n            \n                \n                    Defined in src/app/player/model/dbnodes.ts:334\n                \n            \n\n\n            \n                \n\n                    \n                        Returns :         void\n\n                    \n                \n            \n        \n    \n    \n        \n            \n                \n                    \n                    \n                        attachChildNode\n                        \n                    \n                \n            \n            \n                \nattachChildNode(node: DBListener)\n                \n            \n\n\n            \n                \n                    Defined in src/app/player/model/dbnodes.ts:404\n                \n            \n\n\n            \n                \n                    Attaching a child node that was created elsewhere.\nInvokes child's attach() method and adds event listener\nthat will emit a child-change event.\n\n\n                    \n                        Parameters :\n                        \n                        \n                            \n                                \n                                    Name\n                                    Type\n                                    Optional\n                                \n                            \n                            \n                                \n                                    node\n                                    \n                                                DBListener\n                                    \n\n                                    \n                                        No\n                                    \n\n\n                                \n                            \n                        \n                    \n                    \n                    \n                    \n                        Returns :         void\n\n                    \n                    \n                        \n                    \n                \n            \n        \n    \n    \n        \n            \n                \n                    \n                    \n                        detach\n                        \n                    \n                \n            \n            \n                \ndetach()\n                \n            \n\n\n            \n                \n                    Defined in src/app/player/model/dbnodes.ts:368\n                \n            \n\n\n            \n                \n\n                    \n                        Returns :         void\n\n                    \n                \n            \n        \n    \n    \n        \n            \n                \n                    \n                    \n                        nodeAt\n                        \n                    \n                \n            \n            \n                \nnodeAt(n: number)\n                \n            \n\n\n            \n                \n                    Inherited from         DBNodeArray\n\n                \n            \n            \n                \n                        Defined in         DBNodeArray:377\n\n                \n            \n\n\n            \n                \n\n                    \n                        Parameters :\n                        \n                        \n                            \n                                \n                                    Name\n                                    Type\n                                    Optional\n                                \n                            \n                            \n                                \n                                    n\n                                    \n                                                number\n                                    \n\n                                    \n                                        No\n                                    \n\n\n                                \n                            \n                        \n                    \n                    \n                    \n                    \n                        Returns :         Array\n\n                    \n                    \n                        \n                    \n                \n            \n        \n    \n    \n        \n            \n                \n                    \n                    \n                        toString\n                        \n                    \n                \n            \n            \n                \ntoString()\n                \n            \n\n\n            \n                \n                    Defined in src/app/player/model/dbnodes.ts:438\n                \n            \n\n\n            \n                \n\n                    \n                        Returns :         string\n\n                    \n                \n            \n        \n    \n    \n        \n            \n                \n                    \n                    \n                        popNode\n                        \n                    \n                \n            \n            \n                \npopNode()\n                \n            \n\n\n            \n                \n                    Inherited from         DBNodeArray\n\n                \n            \n            \n                \n                        Defined in         DBNodeArray:298\n\n                \n            \n\n\n            \n                \n\n                    \n                        Returns :         any\n\n                    \n                \n            \n        \n    \n    \n        \n            \n                \n                    \n                    \n                        pushNode\n                        \n                    \n                \n            \n            \n                \npushNode(n)\n                \n            \n\n\n            \n                \n                    Inherited from         DBNodeArray\n\n                \n            \n            \n                \n                        Defined in         DBNodeArray:294\n\n                \n            \n\n\n            \n                \n\n                    \n                        Parameters :\n                        \n                        \n                            \n                                \n                                    Name\n                                    Optional\n                                \n                            \n                            \n                                \n                                    n\n\n                                    \n                                        No\n                                    \n\n\n                                \n                            \n                        \n                    \n                    \n                    \n                    \n                        Returns :         void\n\n                    \n                    \n                        \n                    \n                \n            \n        \n    \n\n\n\n\n\n\n    \n\n\n    \n        import { child, ref, set, get, query, \n  onValue, onChildAdded, onChildChanged, onChildRemoved,\n  push, remove,\n  DatabaseReference, \n} from \"firebase/database\";\nimport { Database } from '@angular/fire/database';\nimport { EventEmitter } from 'events';\n\nexport interface NodeParams {\n  db?: Database,\n  name?: string,\n  root?: string,\n  path?: string,\n  key?: string,\n  initVal?: any,\n  ref?: DatabaseReference,\n  id?: number\n}\n\nexport type NodeValue = string | boolean | number | { [key: string]: any };\n\ninterface NodeMethods {\n  attach(): void,\n  detach(): void,\n}\n\n/**\n * @class DBNode\n * @desc Wrapper for a Firebase database ref and\n * the value stored at that DB node.\n */\nabstract class DBNode extends EventEmitter implements NodeMethods {\n  id: number;\n  key?: string;\n  _name: string;\n  _dbref: DatabaseReference;\n  _val: NodeValue;\n  _active: boolean;\n\n  /**\n   * holds the Unsubscribe functions that are returned by\n   * DB event functions like onValue(...)\n   */\n  unsubscribers: Array;\n\n  /**\n   * \n   * @param {*} params \\{ db: Database, path: string, initVal: any }\n   * @param {*} params \\{ ref: DatabaseReference, key: string, initVal: any }\n   */\n\n  constructor(params: NodeParams) {\n    super();\n    this.active = false;\n    this.unsubscribers = [];\n    if (params.db) {\n      this._name = params.path;\n      this._dbref = ref(params.db, params.root + params.path);\n      this._val = params.initVal;\n      // console.log(this);\n    } else if (params.ref) {\n      this._name = params.key;\n      this._dbref = params.ref;\n    }\n\n    if(params.id > -1) {\n      this.id = params.id;\n    }\n    console.log(this.name);\n  }\n\n  get ref() {\n    return this._dbref;\n  }\n\n  get name() {\n    return this._name;\n  }\n\n  get val() {\n    if (!this.active) {\n      return false;\n    }\n\n    if (typeof(this._val) == 'number' || typeof(this._val == 'boolean')) {\n      return this._val;\n    } \n    \n    if (this._val != undefined) {\n      return Object.keys(this._val);\n    }\n  }\n\n  set val(x) {\n    this._val = x;\n  }\n\n  get active() {\n    return this._active;\n  }\n\n  set active(tf: boolean) {\n    this._active = tf;\n  }\n\n  // methods for a node: \n  // attach() means it is updating with the database and emitting events\n  // detach() means it is not updating, no events\n  abstract attach();\n  abstract detach();\n}\n\ntype Keyed = Node & { key: string };\n\n/**\n * @class DBListener\n * @desc A DBNode that only reads from the database.\n * When `active = true`, will emit events on the value changing.\n */\nexport class DBListener extends DBNode {\n  id: number;\n  key?: string;\n  _name: string;\n  _dbref: DatabaseReference;\n  _val: any;\n  _active: boolean;\n\n  constructor(params: NodeParams) {\n    super(params);\n  }\n\n  attach() {\n    this.active = true;\n    let unsub = onValue(this.ref, (snapshot) => {\n      this.val = snapshot.val();\n      this.emit('change', this.val);\n    });\n    this.unsubscribers.push(unsub);\n  }\n\n  getNow() {\n    get(query(this.ref))\n      .then((snapshot) => {\n        this.val = snapshot.val();\n      })\n      .catch(result => console.log(result));\n  }\n\n  detach() {\n    if (this.active) {\n      while (this.unsubscribers.length > 0) {\n        let unsub = this.unsubscribers.pop();\n        unsub();\n      }\n    }\n    this.active = false;\n  }\n}\n\n/**\n * @class DBWriter\n * @desc A DBNode that only writes to the database. \n * When `active = true`, will pass `val` to the database.\n */\nexport class DBWriter extends DBNode {\n  id: number;\n  key?: string;\n  _name: string;\n  _ref: DatabaseReference;\n  _val: any;\n  _active: boolean;\n\n  constructor(params: NodeParams) {\n    super(params);\n  }\n\n  attach() {\n    this.active = true;\n  }\n\n  setVal(x) {\n    this.val = x;\n    if (this.active) {\n      set(this.ref, this.val);\n    }\n  }\n\n  detach() {\n    this.active = false;\n  }\n}\n\n/** Special DBWriter that expects the node to be cleared by the\n * other end upon receipt\n */\nexport class DBWriteBuffer extends DBWriter {\n  id: number;\n  _name: string;\n  _ref: DatabaseReference;\n  _val: any;\n  _active: boolean;\n\n  constructor(params: NodeParams) {\n    super(params);\n  }\n\n  setVal(x) {\n    get(query(this.ref))\n      .then((snapshot) => {\n        if(!snapshot.val()) {\n          console.log(\"overwriting data in buffer\");\n        }\n        super.setVal(x);\n      })\n      .catch(result => console.log(result));\n  }\n}\n\nexport class DBTwoWay extends DBNode {\n  id: number;\n  key?: string;\n  _name: string;\n  _dbref: DatabaseReference;\n  _val: any;\n  _active: boolean;\n\n  constructor(params: NodeParams) {\n    super(params);\n  }\n  \n  attach() {\n    this.active = true;\n    let unsub = onValue(this.ref, (snapshot) => {\n      this.val = snapshot.val();\n      this.emit('change', this.val);\n    });\n    this.unsubscribers.push(unsub);\n  }\n\n  getNow() {\n    get(query(this.ref))\n      .then((snapshot) => {\n        this.val = snapshot.val();\n      })\n      .catch(result => console.log(result));\n  }\n  \n  detach() {\n    if (this.active) {\n      while (this.unsubscribers.length > 0) {\n        let unsub = this.unsubscribers.pop();\n        unsub();\n      }\n    }\n    this.active = false;\n  }\n  \n  setVal(x) {\n    this.val = x;\n    if (this.active) {\n      set(this.ref, this.val);\n    }\n  }\n}\n\nclass DBNodeArray extends EventEmitter {\n  nodes: Array;\n  lengthNode: DBNode;\n  parentNode: DBNode;\n\n  constructor(lengthNode, parentNode, init: any = {}) {\n    super();\n    this.lengthNode = lengthNode;\n    this.parentNode = parentNode;\n    if (init) {\n    } else {\n      this.nodes = [];\n    }\n  }\n\n  get length() { return this.nodes.length; }\n\n  get active() { return (this.lengthNode.active && this.parentNode.active); }\n\n  get ready() { return (this.lengthNode.val > 0 && this.parentNode.val != false); }\n\n  nodeAt(n) {\n    console.log(this.nodes);\n    console.log(\"node at \", n);\n    console.log(this.nodes[n]);\n    return this.nodes[n];\n  }\n\n  pushNode(n) {\n    this.nodes.push(n);\n  }\n\n  popNode() {\n    return this.nodes.pop();\n  }\n}\n\n/**\n * @class `DBListenerArray`\n * @desc Represents a listener to a list of values in the database \n * (generalizes to `DBNodeArray`). Assumes that the data list is\n * structured such that `lengthNode` is a `DBListener` that stores the \n * length of the list, while `parentNode` is a `DBListener` to the parent\n * node of the list. Each item in the list is a child of `parentNode`,\n * which is then stored as a `DBListener` in the array `nodes`.\n */\nexport class DBListenerArray extends DBNodeArray {\n  lengthNode: DBListener;\n  parentNode: DBListener;\n  nodes: Array;\n\n  /**\n  * holds the Unsubscribe functions that are returned by\n  * DB event functions like onValue(...)\n  */\n  unsubscribers: Array;\n\n  constructor(lengthNode: DBListener, parentNode: DBListener) {\n    super(lengthNode, parentNode);\n    this.lengthNode = lengthNode;\n    this.parentNode = parentNode;\n    this.nodes = [];\n    this.unsubscribers = [];\n  }\n\n  /**\n   * @method attach\n   */\n  attach() {\n    this.lengthNode.attach();\n    this.lengthNode.on('change', (val) => {\n        this.emit('ready', this.ready);\n    });\n\n    this.parentNode.attach();\n    this.parentNode.once('change', (val) => {\n      this.emit('ready', this.ready);\n    });\n\n    for (var node of this.nodes) {\n      this.attachChildNode(node);\n    }\n\n    this.unsubscribers.push(\n      onChildAdded(this.parentNode.ref, (snapshot) => {\n        // console.log(\"child added\", snapshot);\n        this.addNode(snapshot.key);\n    }));\n\n    this.unsubscribers.push(\n      onChildChanged(this.parentNode.ref, (snapshot) => {\n        console.log(\"child changed\", snapshot);\n    }));\n\n    this.unsubscribers.push(\n      onChildRemoved(this.parentNode.ref, () => {\n        // console.log(\"child removed\", snapshot);\n        let removed = this.popNode();\n        this.emit('child-removed', removed);\n    }));\n  }\n\n  detach() {\n    if (this.active) {\n      while (this.unsubscribers.length > 0) {\n        let unsub = this.unsubscribers.pop();\n        unsub();\n      }\n    }\n  }\n\n  nodeAt(n: number) {\n    // console.log(this.nodes);\n    // console.log(\"node at \", n);\n    // console.log(this.nodes[n]);\n    return this.nodes[n];\n  }\n\n  /**\n   * Creating a new child node.\n   * @param key \n   */\n  addNode(key: string) {\n    console.log('child key', key);\n    const childRef = child(this.parentNode.ref, key);\n    const childNode = new DBListener({ ref: childRef, key: key, id: this.length });\n    this.attachChildNode(childNode);\n    this.pushNode(childNode);\n    this.emit('child-added', childNode);\n    // this.lengthNode.setVal(this.length);\n  }\n\n  /**\n   * Attaching a child node that was created elsewhere.\n   * Invokes child's `attach()` method and adds event listener\n   * that will emit a `child-change` event.\n   * @param node \n   */\n  attachChildNode(node: DBListener) {\n    node.attach();\n    node.on('change', (val) => {\n      this.emit('child-change', {\n        id: node.id,\n        val: val\n      });\n    });\n  }\n\n  // remNode() {\n  //   const node = this.popNode();\n  //   // remove(node.ref);\n  //   // this.lengthNode.setVal(this.length);\n  // }\n\n  // updateArray(num: number) {\n  //   // this.parentNode.getNow();\n  //   if (num > this.length) {\n  //     let parentKeys = this.parentNode.val;\n  //     // console.log(this.parentNode);\n  //     console.log(parentKeys);\n  //     let childKeys = Object.keys(parentKeys);\n  //     while (this.length  num) {\n  //       this.popNode();\n  //     }\n  //   }\n  //   console.log(this);\n  // }\n\n  toString() {\n    var str = \"\";\n    // str += \"length: \" + this.length + \", \";\n    str += \"[ \\n\";\n    for (var i=0; i ;\n  lengthNode: DBWriter;\n  parentNode: DBWriter;\n\n  constructor(lengthNode, parentNode, init) {\n    super(lengthNode, parentNode, init);\n    if (!init) {\n      this.lengthNode.setVal(0);\n      this.parentNode.setVal(EMPTY_NODE_ARRAY);\n    }\n\n    // console.log(this);\n  }\n\n  addNode(initVal) {\n    const childRef = push(this.parentNode.ref, initVal);\n    const childNode = new DBWriter({ ref: childRef, initVal });\n    childNode.attach();\n    this.pushNode(childNode);\n    this.lengthNode.setVal(this.length);\n  }\n\n  remNode() {\n    const node = this.popNode();\n    remove(node.ref);\n    this.lengthNode.setVal(this.length);\n  }\n\n  updateArray(num, newStates) {\n    if (num > this.length) {\n      while (this.length  num) {\n        this.remNode();\n      }\n    }\n  }\n\n  setNode(i, x) {\n    this.nodes[i].setVal(x);\n  }\n\n}\n\n/**\n * Array of two-way DBNodes where both ends are listening for\n * changes AND may write to the DB -- such as the virtual pedals\n * where both AdaCAD and the Pi/PC can add virtual pedals\n */\nexport class DBTwoWayArray extends DBNodeArray {\n  nodes: Array = [];\n  lengthNode: DBTwoWay;\n  parentNode: DBTwoWay;\n\n  /**\n  * holds the Unsubscribe functions that are returned by\n  * DB event functions like onValue(...)\n  */\n  unsubscribers: Array;\n\n  constructor(lengthNode: DBTwoWay, parentNode: DBTwoWay, init?: Array) {\n    super(lengthNode, parentNode, init);\n    this.unsubscribers = [];\n    if (!init) {\n      this.lengthNode.setVal(0);\n      this.parentNode.setVal(EMPTY_NODE_ARRAY);\n    }\n  }\n\n  addNode(initVal: any) {\n    push(this.parentNode.ref, initVal);\n    // const childNode = new DBTwoWay({ ref: childRef, initVal });\n    // childNode.attach();\n    // this.pushNode(childNode);\n    // this.lengthNode.setVal(this.length);\n    // console.log('child key', key);\n  }\n\n  onNodeAdded(key: string) {\n     const childRef = child(this.parentNode.ref, key);\n     const childNode = new DBTwoWay({ ref: childRef, key: key, id: this.length });\n     this.attachChildNode(childNode);\n     this.pushNode(childNode);\n     this.lengthNode.setVal(this.length);\n     this.emit('child-added', childNode);\n  }\n\n  remNode() {\n    const lastNode = this.nodeAt(this.length-1);\n    remove(lastNode.ref);\n    // this.lengthNode.setVal(this.length);\n  }\n\n  onNodeRemoved() {\n    let removed = this.popNode();\n    this.lengthNode.setVal(this.length);\n    return removed;\n  }\n\n  updateArray(num: number, newStates: Array) {\n    if (num > this.length) {\n      while (this.length  num) {\n        this.remNode();\n      }\n    }\n  }\n\n  setNode(i: number, x: any) {\n    this.nodes[i].setVal(x);\n  }\n\n  /**\n  * @method attach\n  */\n  attach() {\n    this.lengthNode.attach();\n    this.lengthNode.on('change', (val) => {\n        this.emit('ready', this.ready);\n    });\n\n    this.parentNode.attach();\n    this.parentNode.once('change', (val) => {\n      this.emit('ready', this.ready);\n    });\n\n    for (var node of this.nodes) {\n      this.attachChildNode(node);\n    }\n\n    this.unsubscribers.push(\n      onChildAdded(this.parentNode.ref, (snapshot) => {\n        // console.log(\"child added\", snapshot);\n        this.onNodeAdded(snapshot.key);\n    }));\n\n    this.unsubscribers.push(\n      onChildChanged(this.parentNode.ref, (snapshot) => {\n        console.log(\"child changed\", snapshot);\n    }));\n\n    this.unsubscribers.push(\n      onChildRemoved(this.parentNode.ref, () => {\n        // console.log(\"child removed\", snapshot);\n        let removed = this.onNodeRemoved();\n        this.emit('child-removed', removed);\n    }));\n  }\n \n  detach() {\n    if (this.active) {\n      while (this.unsubscribers.length > 0) {\n        let unsub = this.unsubscribers.pop();\n        unsub();\n      }\n    }\n  }\n\n  /**\n  * Attaching a child node that was created elsewhere.\n  * Invokes child's `attach()` method and adds event listener\n  * that will emit a `child-change` event.\n  * @param node \n  */\n  attachChildNode(node: DBListener) {\n    node.attach();\n    node.on('change', (val) => {\n      this.emit('child-change', {\n        id: node.id,\n        val: val\n      });\n    });\n  }\n}\n\n/** special types of DBNodes */\n\n/** @class\n * OnlineStatus representing whether or not the\n * \"host\" device is online. The host device is responsible\n * for keeping the node set to \"true\", while any listener\n * devices check occasionally for the host's status by \n * attempting to set the node to \"false\".\n */\nexport class OnlineStatus extends DBListener {\n  _name: string;\n  _ref: DatabaseReference;\n  _val: boolean;\n  _active: boolean;\n\n  constructor(params) {\n    super(params);\n    this.attach();\n    get(query(this.ref))\n      .then((snapshot) => {\n        this.val = snapshot.val();\n      })\n      .catch(result => console.log(result));\n  }\n\n  checkAlive() {\n    set(this.ref, false)\n      .then(() => { this.emit('set', true); })\n      .catch(() => { this.emit('set', false); });\n  }\n}\n\n\n    \n\n\n\n\n\n\n\n\n\n\n                   \n    \n         results matching \"\"\n        \n    \n    \n        No results matching \"\"\n    \n\n"},"classes/DBNode.html":{"url":"classes/DBNode.html","title":"class - DBNode","body":"\n                   \n\n\n\n\n\n\n\n\n\n\n\n\n\n  Classes\n  DBNode\n\n\n\n        \n            Info\n        \n        \n            Source\n        \n\n\n\n    \n        \n            File\n        \n        \n            src/app/player/model/dbnodes.ts\n        \n\n\n            \n                Description\n            \n            \n                the value stored at that DB node.\n\n            \n\n            \n                Extends\n            \n            \n                        EventEmitter\n            \n\n            \n                Implements\n            \n            \n                            NodeMethods\n            \n\n\n            \n    Index\n    \n        \n                \n                    \n                        Properties\n                    \n                \n                \n                    \n                        \n                            \n                                _active\n                            \n                            \n                                _dbref\n                            \n                            \n                                _name\n                            \n                            \n                                _val\n                            \n                            \n                                id\n                            \n                            \n                                    Optional\n                                key\n                            \n                            \n                                unsubscribers\n                            \n                        \n                    \n                \n\n                \n                    \n                        Methods\n                    \n                \n                \n                    \n                        \n                            \n                                    Abstract\n                                attach\n                            \n                            \n                                    Abstract\n                                detach\n                            \n                        \n                    \n                \n\n\n\n\n\n                    \n                        \n                            Accessors\n                        \n                    \n                    \n                        \n                            \n                                \n                                    ref\n                                \n                                \n                                    name\n                                \n                                \n                                    val\n                                \n                                \n                                    active\n                                \n                            \n                        \n                    \n        \n    \n\n\n            \n    Constructor\n        \n            \n                \n                    \nconstructor(params: NodeParams)\n                    \n                \n                        \n                            \n                                Defined in src/app/player/model/dbnodes.ts:44\n                            \n                        \n\n                \n                    \n                            \n                                    Parameters :\n                                    \n                                        \n                                            \n                                                Name\n                                                    Type\n                                                Optional\n                                                    Description\n                                            \n                                        \n                                        \n                                                \n                                                        params\n                                                  \n                                                        \n                                                                        NodeParams\n                                                        \n                                                  \n                                                    \n                                                            No\n                                                    \n                                                    \n                                                        \n                                                                { db: Database, path: string, initVal: any }\n\n                                                        \n                                                \n                                        \n                                    \n                            \n                    \n                \n            \n        \n\n\n            \n    \n    \n        Properties\n    \n    \n        \n            \n                \n                    \n                    \n                        _active\n                        \n                    \n                \n            \n                \n                    \n                        Type :         boolean\n\n                    \n                \n                    \n                        \n                                Defined in src/app/player/model/dbnodes.ts:38\n                        \n                    \n\n\n        \n    \n    \n        \n            \n                \n                    \n                    \n                        _dbref\n                        \n                    \n                \n            \n                \n                    \n                        Type :     DatabaseReference\n\n                    \n                \n                    \n                        \n                                Defined in src/app/player/model/dbnodes.ts:36\n                        \n                    \n\n\n        \n    \n    \n        \n            \n                \n                    \n                    \n                        _name\n                        \n                    \n                \n            \n                \n                    \n                        Type :         string\n\n                    \n                \n                    \n                        \n                                Defined in src/app/player/model/dbnodes.ts:35\n                        \n                    \n\n\n        \n    \n    \n        \n            \n                \n                    \n                    \n                        _val\n                        \n                    \n                \n            \n                \n                    \n                        Type :         NodeValue\n\n                    \n                \n                    \n                        \n                                Defined in src/app/player/model/dbnodes.ts:37\n                        \n                    \n\n\n        \n    \n    \n        \n            \n                \n                    \n                    \n                        id\n                        \n                    \n                \n            \n                \n                    \n                        Type :         number\n\n                    \n                \n                    \n                        \n                                Defined in src/app/player/model/dbnodes.ts:33\n                        \n                    \n\n\n        \n    \n    \n        \n            \n                \n                    \n                    \n                            Optional\n                        key\n                        \n                    \n                \n            \n                \n                    \n                        Type :         string\n\n                    \n                \n                    \n                        \n                                Defined in src/app/player/model/dbnodes.ts:34\n                        \n                    \n\n\n        \n    \n    \n        \n            \n                \n                    \n                    \n                        unsubscribers\n                        \n                    \n                \n            \n                \n                    \n                        Type :     Array\n\n                    \n                \n                    \n                        \n                                Defined in src/app/player/model/dbnodes.ts:44\n                        \n                    \n\n            \n                \n                    holds the Unsubscribe functions that are returned by\nDB event functions like onValue(...)\n\n                \n            \n\n        \n    \n\n\n            \n    \n    \n        Methods\n    \n    \n        \n            \n                \n                    \n                    \n                        Abstract\n                        attach\n                        \n                    \n                \n            \n            \n                \n                    \n                    attach()\n                \n            \n\n\n            \n                \n                    Defined in src/app/player/model/dbnodes.ts:109\n                \n            \n\n\n            \n                \n\n                    \n                        Returns :         any\n\n                    \n                \n            \n        \n    \n    \n        \n            \n                \n                    \n                    \n                        Abstract\n                        detach\n                        \n                    \n                \n            \n            \n                \n                    \n                    detach()\n                \n            \n\n\n            \n                \n                    Defined in src/app/player/model/dbnodes.ts:110\n                \n            \n\n\n            \n                \n\n                    \n                        Returns :         any\n\n                    \n                \n            \n        \n    \n\n\n\n\n\n\n            \n    \n        Accessors\n    \n        \n            \n                \n                    \n                        \n                        ref\n                    \n                \n\n                \n                    \n                        getref()\n                    \n                \n                            \n                                \n                                    Defined in src/app/player/model/dbnodes.ts:72\n                                \n                            \n\n            \n        \n        \n            \n                \n                    \n                        \n                        name\n                    \n                \n\n                \n                    \n                        getname()\n                    \n                \n                            \n                                \n                                    Defined in src/app/player/model/dbnodes.ts:76\n                                \n                            \n\n            \n        \n        \n            \n                \n                    \n                        \n                        val\n                    \n                \n\n                \n                    \n                        getval()\n                    \n                \n                            \n                                \n                                    Defined in src/app/player/model/dbnodes.ts:80\n                                \n                            \n\n                \n                    \n                        setval(x)\n                    \n                \n                            \n                                \n                                    Defined in src/app/player/model/dbnodes.ts:94\n                                \n                            \n                    \n                        \n\n                                \n                                        Parameters :\n                                        \n                                            \n                                                \n                                                    Name\n                                                    Optional\n                                                \n                                            \n                                            \n                                                    \n                                                            x\n                                                    \n                                                    \n                                                        \n                                                                No\n                                                        \n                                                        \n                                                    \n                                            \n                                        \n                                \n                                \n                                \n                                \n                                    Returns :         void\n\n                                \n                        \n                    \n            \n        \n        \n            \n                \n                    \n                        \n                        active\n                    \n                \n\n                \n                    \n                        getactive()\n                    \n                \n                            \n                                \n                                    Defined in src/app/player/model/dbnodes.ts:98\n                                \n                            \n\n                \n                    \n                        setactive(tf: boolean)\n                    \n                \n                            \n                                \n                                    Defined in src/app/player/model/dbnodes.ts:102\n                                \n                            \n                    \n                        \n\n                                \n                                        Parameters :\n                                        \n                                            \n                                                \n                                                    Name\n                                                        Type\n                                                    Optional\n                                                \n                                            \n                                            \n                                                    \n                                                            tf\n                                                    \n                                                            \n                                                                            boolean\n                                                            \n                                                    \n                                                        \n                                                                No\n                                                        \n                                                        \n                                                    \n                                            \n                                        \n                                \n                                \n                                \n                                \n                                    Returns :         void\n\n                                \n                        \n                    \n            \n        \n\n    \n\n\n    \n        import { child, ref, set, get, query, \n  onValue, onChildAdded, onChildChanged, onChildRemoved,\n  push, remove,\n  DatabaseReference, \n} from \"firebase/database\";\nimport { Database } from '@angular/fire/database';\nimport { EventEmitter } from 'events';\n\nexport interface NodeParams {\n  db?: Database,\n  name?: string,\n  root?: string,\n  path?: string,\n  key?: string,\n  initVal?: any,\n  ref?: DatabaseReference,\n  id?: number\n}\n\nexport type NodeValue = string | boolean | number | { [key: string]: any };\n\ninterface NodeMethods {\n  attach(): void,\n  detach(): void,\n}\n\n/**\n * @class DBNode\n * @desc Wrapper for a Firebase database ref and\n * the value stored at that DB node.\n */\nabstract class DBNode extends EventEmitter implements NodeMethods {\n  id: number;\n  key?: string;\n  _name: string;\n  _dbref: DatabaseReference;\n  _val: NodeValue;\n  _active: boolean;\n\n  /**\n   * holds the Unsubscribe functions that are returned by\n   * DB event functions like onValue(...)\n   */\n  unsubscribers: Array;\n\n  /**\n   * \n   * @param {*} params \\{ db: Database, path: string, initVal: any }\n   * @param {*} params \\{ ref: DatabaseReference, key: string, initVal: any }\n   */\n\n  constructor(params: NodeParams) {\n    super();\n    this.active = false;\n    this.unsubscribers = [];\n    if (params.db) {\n      this._name = params.path;\n      this._dbref = ref(params.db, params.root + params.path);\n      this._val = params.initVal;\n      // console.log(this);\n    } else if (params.ref) {\n      this._name = params.key;\n      this._dbref = params.ref;\n    }\n\n    if(params.id > -1) {\n      this.id = params.id;\n    }\n    console.log(this.name);\n  }\n\n  get ref() {\n    return this._dbref;\n  }\n\n  get name() {\n    return this._name;\n  }\n\n  get val() {\n    if (!this.active) {\n      return false;\n    }\n\n    if (typeof(this._val) == 'number' || typeof(this._val == 'boolean')) {\n      return this._val;\n    } \n    \n    if (this._val != undefined) {\n      return Object.keys(this._val);\n    }\n  }\n\n  set val(x) {\n    this._val = x;\n  }\n\n  get active() {\n    return this._active;\n  }\n\n  set active(tf: boolean) {\n    this._active = tf;\n  }\n\n  // methods for a node: \n  // attach() means it is updating with the database and emitting events\n  // detach() means it is not updating, no events\n  abstract attach();\n  abstract detach();\n}\n\ntype Keyed = Node & { key: string };\n\n/**\n * @class DBListener\n * @desc A DBNode that only reads from the database.\n * When `active = true`, will emit events on the value changing.\n */\nexport class DBListener extends DBNode {\n  id: number;\n  key?: string;\n  _name: string;\n  _dbref: DatabaseReference;\n  _val: any;\n  _active: boolean;\n\n  constructor(params: NodeParams) {\n    super(params);\n  }\n\n  attach() {\n    this.active = true;\n    let unsub = onValue(this.ref, (snapshot) => {\n      this.val = snapshot.val();\n      this.emit('change', this.val);\n    });\n    this.unsubscribers.push(unsub);\n  }\n\n  getNow() {\n    get(query(this.ref))\n      .then((snapshot) => {\n        this.val = snapshot.val();\n      })\n      .catch(result => console.log(result));\n  }\n\n  detach() {\n    if (this.active) {\n      while (this.unsubscribers.length > 0) {\n        let unsub = this.unsubscribers.pop();\n        unsub();\n      }\n    }\n    this.active = false;\n  }\n}\n\n/**\n * @class DBWriter\n * @desc A DBNode that only writes to the database. \n * When `active = true`, will pass `val` to the database.\n */\nexport class DBWriter extends DBNode {\n  id: number;\n  key?: string;\n  _name: string;\n  _ref: DatabaseReference;\n  _val: any;\n  _active: boolean;\n\n  constructor(params: NodeParams) {\n    super(params);\n  }\n\n  attach() {\n    this.active = true;\n  }\n\n  setVal(x) {\n    this.val = x;\n    if (this.active) {\n      set(this.ref, this.val);\n    }\n  }\n\n  detach() {\n    this.active = false;\n  }\n}\n\n/** Special DBWriter that expects the node to be cleared by the\n * other end upon receipt\n */\nexport class DBWriteBuffer extends DBWriter {\n  id: number;\n  _name: string;\n  _ref: DatabaseReference;\n  _val: any;\n  _active: boolean;\n\n  constructor(params: NodeParams) {\n    super(params);\n  }\n\n  setVal(x) {\n    get(query(this.ref))\n      .then((snapshot) => {\n        if(!snapshot.val()) {\n          console.log(\"overwriting data in buffer\");\n        }\n        super.setVal(x);\n      })\n      .catch(result => console.log(result));\n  }\n}\n\nexport class DBTwoWay extends DBNode {\n  id: number;\n  key?: string;\n  _name: string;\n  _dbref: DatabaseReference;\n  _val: any;\n  _active: boolean;\n\n  constructor(params: NodeParams) {\n    super(params);\n  }\n  \n  attach() {\n    this.active = true;\n    let unsub = onValue(this.ref, (snapshot) => {\n      this.val = snapshot.val();\n      this.emit('change', this.val);\n    });\n    this.unsubscribers.push(unsub);\n  }\n\n  getNow() {\n    get(query(this.ref))\n      .then((snapshot) => {\n        this.val = snapshot.val();\n      })\n      .catch(result => console.log(result));\n  }\n  \n  detach() {\n    if (this.active) {\n      while (this.unsubscribers.length > 0) {\n        let unsub = this.unsubscribers.pop();\n        unsub();\n      }\n    }\n    this.active = false;\n  }\n  \n  setVal(x) {\n    this.val = x;\n    if (this.active) {\n      set(this.ref, this.val);\n    }\n  }\n}\n\nclass DBNodeArray extends EventEmitter {\n  nodes: Array;\n  lengthNode: DBNode;\n  parentNode: DBNode;\n\n  constructor(lengthNode, parentNode, init: any = {}) {\n    super();\n    this.lengthNode = lengthNode;\n    this.parentNode = parentNode;\n    if (init) {\n    } else {\n      this.nodes = [];\n    }\n  }\n\n  get length() { return this.nodes.length; }\n\n  get active() { return (this.lengthNode.active && this.parentNode.active); }\n\n  get ready() { return (this.lengthNode.val > 0 && this.parentNode.val != false); }\n\n  nodeAt(n) {\n    console.log(this.nodes);\n    console.log(\"node at \", n);\n    console.log(this.nodes[n]);\n    return this.nodes[n];\n  }\n\n  pushNode(n) {\n    this.nodes.push(n);\n  }\n\n  popNode() {\n    return this.nodes.pop();\n  }\n}\n\n/**\n * @class `DBListenerArray`\n * @desc Represents a listener to a list of values in the database \n * (generalizes to `DBNodeArray`). Assumes that the data list is\n * structured such that `lengthNode` is a `DBListener` that stores the \n * length of the list, while `parentNode` is a `DBListener` to the parent\n * node of the list. Each item in the list is a child of `parentNode`,\n * which is then stored as a `DBListener` in the array `nodes`.\n */\nexport class DBListenerArray extends DBNodeArray {\n  lengthNode: DBListener;\n  parentNode: DBListener;\n  nodes: Array;\n\n  /**\n  * holds the Unsubscribe functions that are returned by\n  * DB event functions like onValue(...)\n  */\n  unsubscribers: Array;\n\n  constructor(lengthNode: DBListener, parentNode: DBListener) {\n    super(lengthNode, parentNode);\n    this.lengthNode = lengthNode;\n    this.parentNode = parentNode;\n    this.nodes = [];\n    this.unsubscribers = [];\n  }\n\n  /**\n   * @method attach\n   */\n  attach() {\n    this.lengthNode.attach();\n    this.lengthNode.on('change', (val) => {\n        this.emit('ready', this.ready);\n    });\n\n    this.parentNode.attach();\n    this.parentNode.once('change', (val) => {\n      this.emit('ready', this.ready);\n    });\n\n    for (var node of this.nodes) {\n      this.attachChildNode(node);\n    }\n\n    this.unsubscribers.push(\n      onChildAdded(this.parentNode.ref, (snapshot) => {\n        // console.log(\"child added\", snapshot);\n        this.addNode(snapshot.key);\n    }));\n\n    this.unsubscribers.push(\n      onChildChanged(this.parentNode.ref, (snapshot) => {\n        console.log(\"child changed\", snapshot);\n    }));\n\n    this.unsubscribers.push(\n      onChildRemoved(this.parentNode.ref, () => {\n        // console.log(\"child removed\", snapshot);\n        let removed = this.popNode();\n        this.emit('child-removed', removed);\n    }));\n  }\n\n  detach() {\n    if (this.active) {\n      while (this.unsubscribers.length > 0) {\n        let unsub = this.unsubscribers.pop();\n        unsub();\n      }\n    }\n  }\n\n  nodeAt(n: number) {\n    // console.log(this.nodes);\n    // console.log(\"node at \", n);\n    // console.log(this.nodes[n]);\n    return this.nodes[n];\n  }\n\n  /**\n   * Creating a new child node.\n   * @param key \n   */\n  addNode(key: string) {\n    console.log('child key', key);\n    const childRef = child(this.parentNode.ref, key);\n    const childNode = new DBListener({ ref: childRef, key: key, id: this.length });\n    this.attachChildNode(childNode);\n    this.pushNode(childNode);\n    this.emit('child-added', childNode);\n    // this.lengthNode.setVal(this.length);\n  }\n\n  /**\n   * Attaching a child node that was created elsewhere.\n   * Invokes child's `attach()` method and adds event listener\n   * that will emit a `child-change` event.\n   * @param node \n   */\n  attachChildNode(node: DBListener) {\n    node.attach();\n    node.on('change', (val) => {\n      this.emit('child-change', {\n        id: node.id,\n        val: val\n      });\n    });\n  }\n\n  // remNode() {\n  //   const node = this.popNode();\n  //   // remove(node.ref);\n  //   // this.lengthNode.setVal(this.length);\n  // }\n\n  // updateArray(num: number) {\n  //   // this.parentNode.getNow();\n  //   if (num > this.length) {\n  //     let parentKeys = this.parentNode.val;\n  //     // console.log(this.parentNode);\n  //     console.log(parentKeys);\n  //     let childKeys = Object.keys(parentKeys);\n  //     while (this.length  num) {\n  //       this.popNode();\n  //     }\n  //   }\n  //   console.log(this);\n  // }\n\n  toString() {\n    var str = \"\";\n    // str += \"length: \" + this.length + \", \";\n    str += \"[ \\n\";\n    for (var i=0; i ;\n  lengthNode: DBWriter;\n  parentNode: DBWriter;\n\n  constructor(lengthNode, parentNode, init) {\n    super(lengthNode, parentNode, init);\n    if (!init) {\n      this.lengthNode.setVal(0);\n      this.parentNode.setVal(EMPTY_NODE_ARRAY);\n    }\n\n    // console.log(this);\n  }\n\n  addNode(initVal) {\n    const childRef = push(this.parentNode.ref, initVal);\n    const childNode = new DBWriter({ ref: childRef, initVal });\n    childNode.attach();\n    this.pushNode(childNode);\n    this.lengthNode.setVal(this.length);\n  }\n\n  remNode() {\n    const node = this.popNode();\n    remove(node.ref);\n    this.lengthNode.setVal(this.length);\n  }\n\n  updateArray(num, newStates) {\n    if (num > this.length) {\n      while (this.length  num) {\n        this.remNode();\n      }\n    }\n  }\n\n  setNode(i, x) {\n    this.nodes[i].setVal(x);\n  }\n\n}\n\n/**\n * Array of two-way DBNodes where both ends are listening for\n * changes AND may write to the DB -- such as the virtual pedals\n * where both AdaCAD and the Pi/PC can add virtual pedals\n */\nexport class DBTwoWayArray extends DBNodeArray {\n  nodes: Array = [];\n  lengthNode: DBTwoWay;\n  parentNode: DBTwoWay;\n\n  /**\n  * holds the Unsubscribe functions that are returned by\n  * DB event functions like onValue(...)\n  */\n  unsubscribers: Array;\n\n  constructor(lengthNode: DBTwoWay, parentNode: DBTwoWay, init?: Array) {\n    super(lengthNode, parentNode, init);\n    this.unsubscribers = [];\n    if (!init) {\n      this.lengthNode.setVal(0);\n      this.parentNode.setVal(EMPTY_NODE_ARRAY);\n    }\n  }\n\n  addNode(initVal: any) {\n    push(this.parentNode.ref, initVal);\n    // const childNode = new DBTwoWay({ ref: childRef, initVal });\n    // childNode.attach();\n    // this.pushNode(childNode);\n    // this.lengthNode.setVal(this.length);\n    // console.log('child key', key);\n  }\n\n  onNodeAdded(key: string) {\n     const childRef = child(this.parentNode.ref, key);\n     const childNode = new DBTwoWay({ ref: childRef, key: key, id: this.length });\n     this.attachChildNode(childNode);\n     this.pushNode(childNode);\n     this.lengthNode.setVal(this.length);\n     this.emit('child-added', childNode);\n  }\n\n  remNode() {\n    const lastNode = this.nodeAt(this.length-1);\n    remove(lastNode.ref);\n    // this.lengthNode.setVal(this.length);\n  }\n\n  onNodeRemoved() {\n    let removed = this.popNode();\n    this.lengthNode.setVal(this.length);\n    return removed;\n  }\n\n  updateArray(num: number, newStates: Array) {\n    if (num > this.length) {\n      while (this.length  num) {\n        this.remNode();\n      }\n    }\n  }\n\n  setNode(i: number, x: any) {\n    this.nodes[i].setVal(x);\n  }\n\n  /**\n  * @method attach\n  */\n  attach() {\n    this.lengthNode.attach();\n    this.lengthNode.on('change', (val) => {\n        this.emit('ready', this.ready);\n    });\n\n    this.parentNode.attach();\n    this.parentNode.once('change', (val) => {\n      this.emit('ready', this.ready);\n    });\n\n    for (var node of this.nodes) {\n      this.attachChildNode(node);\n    }\n\n    this.unsubscribers.push(\n      onChildAdded(this.parentNode.ref, (snapshot) => {\n        // console.log(\"child added\", snapshot);\n        this.onNodeAdded(snapshot.key);\n    }));\n\n    this.unsubscribers.push(\n      onChildChanged(this.parentNode.ref, (snapshot) => {\n        console.log(\"child changed\", snapshot);\n    }));\n\n    this.unsubscribers.push(\n      onChildRemoved(this.parentNode.ref, () => {\n        // console.log(\"child removed\", snapshot);\n        let removed = this.onNodeRemoved();\n        this.emit('child-removed', removed);\n    }));\n  }\n \n  detach() {\n    if (this.active) {\n      while (this.unsubscribers.length > 0) {\n        let unsub = this.unsubscribers.pop();\n        unsub();\n      }\n    }\n  }\n\n  /**\n  * Attaching a child node that was created elsewhere.\n  * Invokes child's `attach()` method and adds event listener\n  * that will emit a `child-change` event.\n  * @param node \n  */\n  attachChildNode(node: DBListener) {\n    node.attach();\n    node.on('change', (val) => {\n      this.emit('child-change', {\n        id: node.id,\n        val: val\n      });\n    });\n  }\n}\n\n/** special types of DBNodes */\n\n/** @class\n * OnlineStatus representing whether or not the\n * \"host\" device is online. The host device is responsible\n * for keeping the node set to \"true\", while any listener\n * devices check occasionally for the host's status by \n * attempting to set the node to \"false\".\n */\nexport class OnlineStatus extends DBListener {\n  _name: string;\n  _ref: DatabaseReference;\n  _val: boolean;\n  _active: boolean;\n\n  constructor(params) {\n    super(params);\n    this.attach();\n    get(query(this.ref))\n      .then((snapshot) => {\n        this.val = snapshot.val();\n      })\n      .catch(result => console.log(result));\n  }\n\n  checkAlive() {\n    set(this.ref, false)\n      .then(() => { this.emit('set', true); })\n      .catch(() => { this.emit('set', false); });\n  }\n}\n\n\n    \n\n\n\n\n\n\n\n\n\n\n                   \n    \n         results matching \"\"\n        \n    \n    \n        No results matching \"\"\n    \n\n"},"classes/DBNodeArray.html":{"url":"classes/DBNodeArray.html","title":"class - DBNodeArray","body":"\n                   \n\n\n\n\n\n\n\n\n\n\n\n\n\n  Classes\n  DBNodeArray\n\n\n\n        \n            Info\n        \n        \n            Source\n        \n\n\n\n    \n        \n            File\n        \n        \n            src/app/player/model/dbnodes.ts\n        \n\n\n\n            \n                Extends\n            \n            \n                        EventEmitter\n            \n\n\n\n            \n    Index\n    \n        \n                \n                    \n                        Properties\n                    \n                \n                \n                    \n                        \n                            \n                                lengthNode\n                            \n                            \n                                nodes\n                            \n                            \n                                parentNode\n                            \n                        \n                    \n                \n\n                \n                    \n                        Methods\n                    \n                \n                \n                    \n                        \n                            \n                                nodeAt\n                            \n                            \n                                popNode\n                            \n                            \n                                pushNode\n                            \n                        \n                    \n                \n\n\n\n\n\n                    \n                        \n                            Accessors\n                        \n                    \n                    \n                        \n                            \n                                \n                                    length\n                                \n                                \n                                    active\n                                \n                                \n                                    ready\n                                \n                            \n                        \n                    \n        \n    \n\n\n            \n    Constructor\n        \n            \n                \n                    \nconstructor(lengthNode, parentNode, init: any)\n                    \n                \n                        \n                            \n                                Defined in src/app/player/model/dbnodes.ts:269\n                            \n                        \n\n                \n                    \n                            \n                                    Parameters :\n                                    \n                                        \n                                            \n                                                Name\n                                                    Type\n                                                Optional\n                                            \n                                        \n                                        \n                                                \n                                                        lengthNode\n                                                  \n                                                        \n                                                        \n                                                  \n                                                    \n                                                            No\n                                                    \n                                                    \n                                                \n                                                \n                                                        parentNode\n                                                  \n                                                        \n                                                        \n                                                  \n                                                    \n                                                            No\n                                                    \n                                                    \n                                                \n                                                \n                                                        init\n                                                  \n                                                        \n                                                                        any\n                                                        \n                                                  \n                                                    \n                                                            No\n                                                    \n                                                    \n                                                \n                                        \n                                    \n                            \n                    \n                \n            \n        \n\n\n            \n    \n    \n        Properties\n    \n    \n        \n            \n                \n                    \n                    \n                        lengthNode\n                        \n                    \n                \n            \n                \n                    \n                        Type :         DBNode\n\n                    \n                \n                    \n                        \n                                Defined in src/app/player/model/dbnodes.ts:268\n                        \n                    \n\n\n        \n    \n    \n        \n            \n                \n                    \n                    \n                        nodes\n                        \n                    \n                \n            \n                \n                    \n                        Type :         Array\n\n                    \n                \n                    \n                        \n                                Defined in src/app/player/model/dbnodes.ts:267\n                        \n                    \n\n\n        \n    \n    \n        \n            \n                \n                    \n                    \n                        parentNode\n                        \n                    \n                \n            \n                \n                    \n                        Type :         DBNode\n\n                    \n                \n                    \n                        \n                                Defined in src/app/player/model/dbnodes.ts:269\n                        \n                    \n\n\n        \n    \n\n\n            \n    \n    \n        Methods\n    \n    \n        \n            \n                \n                    \n                    \n                        nodeAt\n                        \n                    \n                \n            \n            \n                \nnodeAt(n)\n                \n            \n\n\n            \n                \n                    Defined in src/app/player/model/dbnodes.ts:287\n                \n            \n\n\n            \n                \n\n                    \n                        Parameters :\n                        \n                        \n                            \n                                \n                                    Name\n                                    Optional\n                                \n                            \n                            \n                                \n                                    n\n\n                                    \n                                        No\n                                    \n\n\n                                \n                            \n                        \n                    \n                    \n                    \n                    \n                        Returns :         Array\n\n                    \n                    \n                        \n                    \n                \n            \n        \n    \n    \n        \n            \n                \n                    \n                    \n                        popNode\n                        \n                    \n                \n            \n            \n                \npopNode()\n                \n            \n\n\n            \n                \n                    Defined in src/app/player/model/dbnodes.ts:298\n                \n            \n\n\n            \n                \n\n                    \n                        Returns :         any\n\n                    \n                \n            \n        \n    \n    \n        \n            \n                \n                    \n                    \n                        pushNode\n                        \n                    \n                \n            \n            \n                \npushNode(n)\n                \n            \n\n\n            \n                \n                    Defined in src/app/player/model/dbnodes.ts:294\n                \n            \n\n\n            \n                \n\n                    \n                        Parameters :\n                        \n                        \n                            \n                                \n                                    Name\n                                    Optional\n                                \n                            \n                            \n                                \n                                    n\n\n                                    \n                                        No\n                                    \n\n\n                                \n                            \n                        \n                    \n                    \n                    \n                    \n                        Returns :         void\n\n                    \n                    \n                        \n                    \n                \n            \n        \n    \n\n\n\n\n\n\n            \n    \n        Accessors\n    \n        \n            \n                \n                    \n                        \n                        length\n                    \n                \n\n                \n                    \n                        getlength()\n                    \n                \n                            \n                                \n                                    Defined in src/app/player/model/dbnodes.ts:281\n                                \n                            \n\n            \n        \n        \n            \n                \n                    \n                        \n                        active\n                    \n                \n\n                \n                    \n                        getactive()\n                    \n                \n                            \n                                \n                                    Defined in src/app/player/model/dbnodes.ts:283\n                                \n                            \n\n            \n        \n        \n            \n                \n                    \n                        \n                        ready\n                    \n                \n\n                \n                    \n                        getready()\n                    \n                \n                            \n                                \n                                    Defined in src/app/player/model/dbnodes.ts:285\n                                \n                            \n\n            \n        \n\n    \n\n\n    \n        import { child, ref, set, get, query, \n  onValue, onChildAdded, onChildChanged, onChildRemoved,\n  push, remove,\n  DatabaseReference, \n} from \"firebase/database\";\nimport { Database } from '@angular/fire/database';\nimport { EventEmitter } from 'events';\n\nexport interface NodeParams {\n  db?: Database,\n  name?: string,\n  root?: string,\n  path?: string,\n  key?: string,\n  initVal?: any,\n  ref?: DatabaseReference,\n  id?: number\n}\n\nexport type NodeValue = string | boolean | number | { [key: string]: any };\n\ninterface NodeMethods {\n  attach(): void,\n  detach(): void,\n}\n\n/**\n * @class DBNode\n * @desc Wrapper for a Firebase database ref and\n * the value stored at that DB node.\n */\nabstract class DBNode extends EventEmitter implements NodeMethods {\n  id: number;\n  key?: string;\n  _name: string;\n  _dbref: DatabaseReference;\n  _val: NodeValue;\n  _active: boolean;\n\n  /**\n   * holds the Unsubscribe functions that are returned by\n   * DB event functions like onValue(...)\n   */\n  unsubscribers: Array;\n\n  /**\n   * \n   * @param {*} params \\{ db: Database, path: string, initVal: any }\n   * @param {*} params \\{ ref: DatabaseReference, key: string, initVal: any }\n   */\n\n  constructor(params: NodeParams) {\n    super();\n    this.active = false;\n    this.unsubscribers = [];\n    if (params.db) {\n      this._name = params.path;\n      this._dbref = ref(params.db, params.root + params.path);\n      this._val = params.initVal;\n      // console.log(this);\n    } else if (params.ref) {\n      this._name = params.key;\n      this._dbref = params.ref;\n    }\n\n    if(params.id > -1) {\n      this.id = params.id;\n    }\n    console.log(this.name);\n  }\n\n  get ref() {\n    return this._dbref;\n  }\n\n  get name() {\n    return this._name;\n  }\n\n  get val() {\n    if (!this.active) {\n      return false;\n    }\n\n    if (typeof(this._val) == 'number' || typeof(this._val == 'boolean')) {\n      return this._val;\n    } \n    \n    if (this._val != undefined) {\n      return Object.keys(this._val);\n    }\n  }\n\n  set val(x) {\n    this._val = x;\n  }\n\n  get active() {\n    return this._active;\n  }\n\n  set active(tf: boolean) {\n    this._active = tf;\n  }\n\n  // methods for a node: \n  // attach() means it is updating with the database and emitting events\n  // detach() means it is not updating, no events\n  abstract attach();\n  abstract detach();\n}\n\ntype Keyed = Node & { key: string };\n\n/**\n * @class DBListener\n * @desc A DBNode that only reads from the database.\n * When `active = true`, will emit events on the value changing.\n */\nexport class DBListener extends DBNode {\n  id: number;\n  key?: string;\n  _name: string;\n  _dbref: DatabaseReference;\n  _val: any;\n  _active: boolean;\n\n  constructor(params: NodeParams) {\n    super(params);\n  }\n\n  attach() {\n    this.active = true;\n    let unsub = onValue(this.ref, (snapshot) => {\n      this.val = snapshot.val();\n      this.emit('change', this.val);\n    });\n    this.unsubscribers.push(unsub);\n  }\n\n  getNow() {\n    get(query(this.ref))\n      .then((snapshot) => {\n        this.val = snapshot.val();\n      })\n      .catch(result => console.log(result));\n  }\n\n  detach() {\n    if (this.active) {\n      while (this.unsubscribers.length > 0) {\n        let unsub = this.unsubscribers.pop();\n        unsub();\n      }\n    }\n    this.active = false;\n  }\n}\n\n/**\n * @class DBWriter\n * @desc A DBNode that only writes to the database. \n * When `active = true`, will pass `val` to the database.\n */\nexport class DBWriter extends DBNode {\n  id: number;\n  key?: string;\n  _name: string;\n  _ref: DatabaseReference;\n  _val: any;\n  _active: boolean;\n\n  constructor(params: NodeParams) {\n    super(params);\n  }\n\n  attach() {\n    this.active = true;\n  }\n\n  setVal(x) {\n    this.val = x;\n    if (this.active) {\n      set(this.ref, this.val);\n    }\n  }\n\n  detach() {\n    this.active = false;\n  }\n}\n\n/** Special DBWriter that expects the node to be cleared by the\n * other end upon receipt\n */\nexport class DBWriteBuffer extends DBWriter {\n  id: number;\n  _name: string;\n  _ref: DatabaseReference;\n  _val: any;\n  _active: boolean;\n\n  constructor(params: NodeParams) {\n    super(params);\n  }\n\n  setVal(x) {\n    get(query(this.ref))\n      .then((snapshot) => {\n        if(!snapshot.val()) {\n          console.log(\"overwriting data in buffer\");\n        }\n        super.setVal(x);\n      })\n      .catch(result => console.log(result));\n  }\n}\n\nexport class DBTwoWay extends DBNode {\n  id: number;\n  key?: string;\n  _name: string;\n  _dbref: DatabaseReference;\n  _val: any;\n  _active: boolean;\n\n  constructor(params: NodeParams) {\n    super(params);\n  }\n  \n  attach() {\n    this.active = true;\n    let unsub = onValue(this.ref, (snapshot) => {\n      this.val = snapshot.val();\n      this.emit('change', this.val);\n    });\n    this.unsubscribers.push(unsub);\n  }\n\n  getNow() {\n    get(query(this.ref))\n      .then((snapshot) => {\n        this.val = snapshot.val();\n      })\n      .catch(result => console.log(result));\n  }\n  \n  detach() {\n    if (this.active) {\n      while (this.unsubscribers.length > 0) {\n        let unsub = this.unsubscribers.pop();\n        unsub();\n      }\n    }\n    this.active = false;\n  }\n  \n  setVal(x) {\n    this.val = x;\n    if (this.active) {\n      set(this.ref, this.val);\n    }\n  }\n}\n\nclass DBNodeArray extends EventEmitter {\n  nodes: Array;\n  lengthNode: DBNode;\n  parentNode: DBNode;\n\n  constructor(lengthNode, parentNode, init: any = {}) {\n    super();\n    this.lengthNode = lengthNode;\n    this.parentNode = parentNode;\n    if (init) {\n    } else {\n      this.nodes = [];\n    }\n  }\n\n  get length() { return this.nodes.length; }\n\n  get active() { return (this.lengthNode.active && this.parentNode.active); }\n\n  get ready() { return (this.lengthNode.val > 0 && this.parentNode.val != false); }\n\n  nodeAt(n) {\n    console.log(this.nodes);\n    console.log(\"node at \", n);\n    console.log(this.nodes[n]);\n    return this.nodes[n];\n  }\n\n  pushNode(n) {\n    this.nodes.push(n);\n  }\n\n  popNode() {\n    return this.nodes.pop();\n  }\n}\n\n/**\n * @class `DBListenerArray`\n * @desc Represents a listener to a list of values in the database \n * (generalizes to `DBNodeArray`). Assumes that the data list is\n * structured such that `lengthNode` is a `DBListener` that stores the \n * length of the list, while `parentNode` is a `DBListener` to the parent\n * node of the list. Each item in the list is a child of `parentNode`,\n * which is then stored as a `DBListener` in the array `nodes`.\n */\nexport class DBListenerArray extends DBNodeArray {\n  lengthNode: DBListener;\n  parentNode: DBListener;\n  nodes: Array;\n\n  /**\n  * holds the Unsubscribe functions that are returned by\n  * DB event functions like onValue(...)\n  */\n  unsubscribers: Array;\n\n  constructor(lengthNode: DBListener, parentNode: DBListener) {\n    super(lengthNode, parentNode);\n    this.lengthNode = lengthNode;\n    this.parentNode = parentNode;\n    this.nodes = [];\n    this.unsubscribers = [];\n  }\n\n  /**\n   * @method attach\n   */\n  attach() {\n    this.lengthNode.attach();\n    this.lengthNode.on('change', (val) => {\n        this.emit('ready', this.ready);\n    });\n\n    this.parentNode.attach();\n    this.parentNode.once('change', (val) => {\n      this.emit('ready', this.ready);\n    });\n\n    for (var node of this.nodes) {\n      this.attachChildNode(node);\n    }\n\n    this.unsubscribers.push(\n      onChildAdded(this.parentNode.ref, (snapshot) => {\n        // console.log(\"child added\", snapshot);\n        this.addNode(snapshot.key);\n    }));\n\n    this.unsubscribers.push(\n      onChildChanged(this.parentNode.ref, (snapshot) => {\n        console.log(\"child changed\", snapshot);\n    }));\n\n    this.unsubscribers.push(\n      onChildRemoved(this.parentNode.ref, () => {\n        // console.log(\"child removed\", snapshot);\n        let removed = this.popNode();\n        this.emit('child-removed', removed);\n    }));\n  }\n\n  detach() {\n    if (this.active) {\n      while (this.unsubscribers.length > 0) {\n        let unsub = this.unsubscribers.pop();\n        unsub();\n      }\n    }\n  }\n\n  nodeAt(n: number) {\n    // console.log(this.nodes);\n    // console.log(\"node at \", n);\n    // console.log(this.nodes[n]);\n    return this.nodes[n];\n  }\n\n  /**\n   * Creating a new child node.\n   * @param key \n   */\n  addNode(key: string) {\n    console.log('child key', key);\n    const childRef = child(this.parentNode.ref, key);\n    const childNode = new DBListener({ ref: childRef, key: key, id: this.length });\n    this.attachChildNode(childNode);\n    this.pushNode(childNode);\n    this.emit('child-added', childNode);\n    // this.lengthNode.setVal(this.length);\n  }\n\n  /**\n   * Attaching a child node that was created elsewhere.\n   * Invokes child's `attach()` method and adds event listener\n   * that will emit a `child-change` event.\n   * @param node \n   */\n  attachChildNode(node: DBListener) {\n    node.attach();\n    node.on('change', (val) => {\n      this.emit('child-change', {\n        id: node.id,\n        val: val\n      });\n    });\n  }\n\n  // remNode() {\n  //   const node = this.popNode();\n  //   // remove(node.ref);\n  //   // this.lengthNode.setVal(this.length);\n  // }\n\n  // updateArray(num: number) {\n  //   // this.parentNode.getNow();\n  //   if (num > this.length) {\n  //     let parentKeys = this.parentNode.val;\n  //     // console.log(this.parentNode);\n  //     console.log(parentKeys);\n  //     let childKeys = Object.keys(parentKeys);\n  //     while (this.length  num) {\n  //       this.popNode();\n  //     }\n  //   }\n  //   console.log(this);\n  // }\n\n  toString() {\n    var str = \"\";\n    // str += \"length: \" + this.length + \", \";\n    str += \"[ \\n\";\n    for (var i=0; i ;\n  lengthNode: DBWriter;\n  parentNode: DBWriter;\n\n  constructor(lengthNode, parentNode, init) {\n    super(lengthNode, parentNode, init);\n    if (!init) {\n      this.lengthNode.setVal(0);\n      this.parentNode.setVal(EMPTY_NODE_ARRAY);\n    }\n\n    // console.log(this);\n  }\n\n  addNode(initVal) {\n    const childRef = push(this.parentNode.ref, initVal);\n    const childNode = new DBWriter({ ref: childRef, initVal });\n    childNode.attach();\n    this.pushNode(childNode);\n    this.lengthNode.setVal(this.length);\n  }\n\n  remNode() {\n    const node = this.popNode();\n    remove(node.ref);\n    this.lengthNode.setVal(this.length);\n  }\n\n  updateArray(num, newStates) {\n    if (num > this.length) {\n      while (this.length  num) {\n        this.remNode();\n      }\n    }\n  }\n\n  setNode(i, x) {\n    this.nodes[i].setVal(x);\n  }\n\n}\n\n/**\n * Array of two-way DBNodes where both ends are listening for\n * changes AND may write to the DB -- such as the virtual pedals\n * where both AdaCAD and the Pi/PC can add virtual pedals\n */\nexport class DBTwoWayArray extends DBNodeArray {\n  nodes: Array = [];\n  lengthNode: DBTwoWay;\n  parentNode: DBTwoWay;\n\n  /**\n  * holds the Unsubscribe functions that are returned by\n  * DB event functions like onValue(...)\n  */\n  unsubscribers: Array;\n\n  constructor(lengthNode: DBTwoWay, parentNode: DBTwoWay, init?: Array) {\n    super(lengthNode, parentNode, init);\n    this.unsubscribers = [];\n    if (!init) {\n      this.lengthNode.setVal(0);\n      this.parentNode.setVal(EMPTY_NODE_ARRAY);\n    }\n  }\n\n  addNode(initVal: any) {\n    push(this.parentNode.ref, initVal);\n    // const childNode = new DBTwoWay({ ref: childRef, initVal });\n    // childNode.attach();\n    // this.pushNode(childNode);\n    // this.lengthNode.setVal(this.length);\n    // console.log('child key', key);\n  }\n\n  onNodeAdded(key: string) {\n     const childRef = child(this.parentNode.ref, key);\n     const childNode = new DBTwoWay({ ref: childRef, key: key, id: this.length });\n     this.attachChildNode(childNode);\n     this.pushNode(childNode);\n     this.lengthNode.setVal(this.length);\n     this.emit('child-added', childNode);\n  }\n\n  remNode() {\n    const lastNode = this.nodeAt(this.length-1);\n    remove(lastNode.ref);\n    // this.lengthNode.setVal(this.length);\n  }\n\n  onNodeRemoved() {\n    let removed = this.popNode();\n    this.lengthNode.setVal(this.length);\n    return removed;\n  }\n\n  updateArray(num: number, newStates: Array) {\n    if (num > this.length) {\n      while (this.length  num) {\n        this.remNode();\n      }\n    }\n  }\n\n  setNode(i: number, x: any) {\n    this.nodes[i].setVal(x);\n  }\n\n  /**\n  * @method attach\n  */\n  attach() {\n    this.lengthNode.attach();\n    this.lengthNode.on('change', (val) => {\n        this.emit('ready', this.ready);\n    });\n\n    this.parentNode.attach();\n    this.parentNode.once('change', (val) => {\n      this.emit('ready', this.ready);\n    });\n\n    for (var node of this.nodes) {\n      this.attachChildNode(node);\n    }\n\n    this.unsubscribers.push(\n      onChildAdded(this.parentNode.ref, (snapshot) => {\n        // console.log(\"child added\", snapshot);\n        this.onNodeAdded(snapshot.key);\n    }));\n\n    this.unsubscribers.push(\n      onChildChanged(this.parentNode.ref, (snapshot) => {\n        console.log(\"child changed\", snapshot);\n    }));\n\n    this.unsubscribers.push(\n      onChildRemoved(this.parentNode.ref, () => {\n        // console.log(\"child removed\", snapshot);\n        let removed = this.onNodeRemoved();\n        this.emit('child-removed', removed);\n    }));\n  }\n \n  detach() {\n    if (this.active) {\n      while (this.unsubscribers.length > 0) {\n        let unsub = this.unsubscribers.pop();\n        unsub();\n      }\n    }\n  }\n\n  /**\n  * Attaching a child node that was created elsewhere.\n  * Invokes child's `attach()` method and adds event listener\n  * that will emit a `child-change` event.\n  * @param node \n  */\n  attachChildNode(node: DBListener) {\n    node.attach();\n    node.on('change', (val) => {\n      this.emit('child-change', {\n        id: node.id,\n        val: val\n      });\n    });\n  }\n}\n\n/** special types of DBNodes */\n\n/** @class\n * OnlineStatus representing whether or not the\n * \"host\" device is online. The host device is responsible\n * for keeping the node set to \"true\", while any listener\n * devices check occasionally for the host's status by \n * attempting to set the node to \"false\".\n */\nexport class OnlineStatus extends DBListener {\n  _name: string;\n  _ref: DatabaseReference;\n  _val: boolean;\n  _active: boolean;\n\n  constructor(params) {\n    super(params);\n    this.attach();\n    get(query(this.ref))\n      .then((snapshot) => {\n        this.val = snapshot.val();\n      })\n      .catch(result => console.log(result));\n  }\n\n  checkAlive() {\n    set(this.ref, false)\n      .then(() => { this.emit('set', true); })\n      .catch(() => { this.emit('set', false); });\n  }\n}\n\n\n    \n\n\n\n\n\n\n\n\n\n\n                   \n    \n         results matching \"\"\n        \n    \n    \n        No results matching \"\"\n    \n\n"},"classes/DBTwoWay.html":{"url":"classes/DBTwoWay.html","title":"class - DBTwoWay","body":"\n                   \n\n\n\n\n\n\n\n\n\n\n\n\n\n  Classes\n  DBTwoWay\n\n\n\n        \n            Info\n        \n        \n            Source\n        \n\n\n\n    \n        \n            File\n        \n        \n            src/app/player/model/dbnodes.ts\n        \n\n\n\n            \n                Extends\n            \n            \n                        DBNode\n            \n\n\n\n            \n    Index\n    \n        \n                \n                    \n                        Properties\n                    \n                \n                \n                    \n                        \n                            \n                                _active\n                            \n                            \n                                _dbref\n                            \n                            \n                                _name\n                            \n                            \n                                _val\n                            \n                            \n                                id\n                            \n                            \n                                    Optional\n                                key\n                            \n                            \n                                unsubscribers\n                            \n                        \n                    \n                \n\n                \n                    \n                        Methods\n                    \n                \n                \n                    \n                        \n                            \n                                attach\n                            \n                            \n                                detach\n                            \n                            \n                                getNow\n                            \n                            \n                                setVal\n                            \n                        \n                    \n                \n\n\n\n\n\n        \n    \n\n\n            \n    Constructor\n        \n            \n                \n                    \nconstructor(params: NodeParams)\n                    \n                \n                        \n                            \n                                Defined in src/app/player/model/dbnodes.ts:225\n                            \n                        \n\n                \n                    \n                            \n                                    Parameters :\n                                    \n                                        \n                                            \n                                                Name\n                                                    Type\n                                                Optional\n                                            \n                                        \n                                        \n                                                \n                                                        params\n                                                  \n                                                        \n                                                                        NodeParams\n                                                        \n                                                  \n                                                    \n                                                            No\n                                                    \n                                                    \n                                                \n                                        \n                                    \n                            \n                    \n                \n            \n        \n\n\n            \n    \n    \n        Properties\n    \n    \n        \n            \n                \n                    \n                    \n                        _active\n                        \n                    \n                \n            \n                \n                    \n                        Type :         boolean\n\n                    \n                \n                        \n                            \n                                Inherited from         DBNode\n\n                            \n                        \n                    \n                        \n                                Defined in         DBNode:225\n\n                        \n                    \n\n\n        \n    \n    \n        \n            \n                \n                    \n                    \n                        _dbref\n                        \n                    \n                \n            \n                \n                    \n                        Type :     DatabaseReference\n\n                    \n                \n                        \n                            \n                                Inherited from         DBNode\n\n                            \n                        \n                    \n                        \n                                Defined in         DBNode:223\n\n                        \n                    \n\n\n        \n    \n    \n        \n            \n                \n                    \n                    \n                        _name\n                        \n                    \n                \n            \n                \n                    \n                        Type :         string\n\n                    \n                \n                        \n                            \n                                Inherited from         DBNode\n\n                            \n                        \n                    \n                        \n                                Defined in         DBNode:222\n\n                        \n                    \n\n\n        \n    \n    \n        \n            \n                \n                    \n                    \n                        _val\n                        \n                    \n                \n            \n                \n                    \n                        Type :         any\n\n                    \n                \n                        \n                            \n                                Inherited from         DBNode\n\n                            \n                        \n                    \n                        \n                                Defined in         DBNode:224\n\n                        \n                    \n\n\n        \n    \n    \n        \n            \n                \n                    \n                    \n                        id\n                        \n                    \n                \n            \n                \n                    \n                        Type :         number\n\n                    \n                \n                        \n                            \n                                Inherited from         DBNode\n\n                            \n                        \n                    \n                        \n                                Defined in         DBNode:220\n\n                        \n                    \n\n\n        \n    \n    \n        \n            \n                \n                    \n                    \n                            Optional\n                        key\n                        \n                    \n                \n            \n                \n                    \n                        Type :         string\n\n                    \n                \n                        \n                            \n                                Inherited from         DBNode\n\n                            \n                        \n                    \n                        \n                                Defined in         DBNode:221\n\n                        \n                    \n\n\n        \n    \n    \n        \n            \n                \n                    \n                    \n                        unsubscribers\n                        \n                    \n                \n            \n                \n                    \n                        Type :     Array\n\n                    \n                \n                        \n                            \n                                Inherited from         DBNode\n\n                            \n                        \n                    \n                        \n                                Defined in         DBNode:44\n\n                        \n                    \n\n            \n                \n                    holds the Unsubscribe functions that are returned by\nDB event functions like onValue(...)\n\n                \n            \n\n        \n    \n\n\n            \n    \n    \n        Methods\n    \n    \n        \n            \n                \n                    \n                    \n                        attach\n                        \n                    \n                \n            \n            \n                \nattach()\n                \n            \n\n\n            \n                \n                    Inherited from         DBNode\n\n                \n            \n            \n                \n                        Defined in         DBNode:231\n\n                \n            \n\n\n            \n                \n\n                    \n                        Returns :         void\n\n                    \n                \n            \n        \n    \n    \n        \n            \n                \n                    \n                    \n                        detach\n                        \n                    \n                \n            \n            \n                \ndetach()\n                \n            \n\n\n            \n                \n                    Inherited from         DBNode\n\n                \n            \n            \n                \n                        Defined in         DBNode:248\n\n                \n            \n\n\n            \n                \n\n                    \n                        Returns :         void\n\n                    \n                \n            \n        \n    \n    \n        \n            \n                \n                    \n                    \n                        getNow\n                        \n                    \n                \n            \n            \n                \ngetNow()\n                \n            \n\n\n            \n                \n                    Defined in src/app/player/model/dbnodes.ts:240\n                \n            \n\n\n            \n                \n\n                    \n                        Returns :         void\n\n                    \n                \n            \n        \n    \n    \n        \n            \n                \n                    \n                    \n                        setVal\n                        \n                    \n                \n            \n            \n                \nsetVal(x)\n                \n            \n\n\n            \n                \n                    Defined in src/app/player/model/dbnodes.ts:258\n                \n            \n\n\n            \n                \n\n                    \n                        Parameters :\n                        \n                        \n                            \n                                \n                                    Name\n                                    Optional\n                                \n                            \n                            \n                                \n                                    x\n\n                                    \n                                        No\n                                    \n\n\n                                \n                            \n                        \n                    \n                    \n                    \n                    \n                        Returns :         void\n\n                    \n                    \n                        \n                    \n                \n            \n        \n    \n\n\n\n\n\n\n    \n\n\n    \n        import { child, ref, set, get, query, \n  onValue, onChildAdded, onChildChanged, onChildRemoved,\n  push, remove,\n  DatabaseReference, \n} from \"firebase/database\";\nimport { Database } from '@angular/fire/database';\nimport { EventEmitter } from 'events';\n\nexport interface NodeParams {\n  db?: Database,\n  name?: string,\n  root?: string,\n  path?: string,\n  key?: string,\n  initVal?: any,\n  ref?: DatabaseReference,\n  id?: number\n}\n\nexport type NodeValue = string | boolean | number | { [key: string]: any };\n\ninterface NodeMethods {\n  attach(): void,\n  detach(): void,\n}\n\n/**\n * @class DBNode\n * @desc Wrapper for a Firebase database ref and\n * the value stored at that DB node.\n */\nabstract class DBNode extends EventEmitter implements NodeMethods {\n  id: number;\n  key?: string;\n  _name: string;\n  _dbref: DatabaseReference;\n  _val: NodeValue;\n  _active: boolean;\n\n  /**\n   * holds the Unsubscribe functions that are returned by\n   * DB event functions like onValue(...)\n   */\n  unsubscribers: Array;\n\n  /**\n   * \n   * @param {*} params \\{ db: Database, path: string, initVal: any }\n   * @param {*} params \\{ ref: DatabaseReference, key: string, initVal: any }\n   */\n\n  constructor(params: NodeParams) {\n    super();\n    this.active = false;\n    this.unsubscribers = [];\n    if (params.db) {\n      this._name = params.path;\n      this._dbref = ref(params.db, params.root + params.path);\n      this._val = params.initVal;\n      // console.log(this);\n    } else if (params.ref) {\n      this._name = params.key;\n      this._dbref = params.ref;\n    }\n\n    if(params.id > -1) {\n      this.id = params.id;\n    }\n    console.log(this.name);\n  }\n\n  get ref() {\n    return this._dbref;\n  }\n\n  get name() {\n    return this._name;\n  }\n\n  get val() {\n    if (!this.active) {\n      return false;\n    }\n\n    if (typeof(this._val) == 'number' || typeof(this._val == 'boolean')) {\n      return this._val;\n    } \n    \n    if (this._val != undefined) {\n      return Object.keys(this._val);\n    }\n  }\n\n  set val(x) {\n    this._val = x;\n  }\n\n  get active() {\n    return this._active;\n  }\n\n  set active(tf: boolean) {\n    this._active = tf;\n  }\n\n  // methods for a node: \n  // attach() means it is updating with the database and emitting events\n  // detach() means it is not updating, no events\n  abstract attach();\n  abstract detach();\n}\n\ntype Keyed = Node & { key: string };\n\n/**\n * @class DBListener\n * @desc A DBNode that only reads from the database.\n * When `active = true`, will emit events on the value changing.\n */\nexport class DBListener extends DBNode {\n  id: number;\n  key?: string;\n  _name: string;\n  _dbref: DatabaseReference;\n  _val: any;\n  _active: boolean;\n\n  constructor(params: NodeParams) {\n    super(params);\n  }\n\n  attach() {\n    this.active = true;\n    let unsub = onValue(this.ref, (snapshot) => {\n      this.val = snapshot.val();\n      this.emit('change', this.val);\n    });\n    this.unsubscribers.push(unsub);\n  }\n\n  getNow() {\n    get(query(this.ref))\n      .then((snapshot) => {\n        this.val = snapshot.val();\n      })\n      .catch(result => console.log(result));\n  }\n\n  detach() {\n    if (this.active) {\n      while (this.unsubscribers.length > 0) {\n        let unsub = this.unsubscribers.pop();\n        unsub();\n      }\n    }\n    this.active = false;\n  }\n}\n\n/**\n * @class DBWriter\n * @desc A DBNode that only writes to the database. \n * When `active = true`, will pass `val` to the database.\n */\nexport class DBWriter extends DBNode {\n  id: number;\n  key?: string;\n  _name: string;\n  _ref: DatabaseReference;\n  _val: any;\n  _active: boolean;\n\n  constructor(params: NodeParams) {\n    super(params);\n  }\n\n  attach() {\n    this.active = true;\n  }\n\n  setVal(x) {\n    this.val = x;\n    if (this.active) {\n      set(this.ref, this.val);\n    }\n  }\n\n  detach() {\n    this.active = false;\n  }\n}\n\n/** Special DBWriter that expects the node to be cleared by the\n * other end upon receipt\n */\nexport class DBWriteBuffer extends DBWriter {\n  id: number;\n  _name: string;\n  _ref: DatabaseReference;\n  _val: any;\n  _active: boolean;\n\n  constructor(params: NodeParams) {\n    super(params);\n  }\n\n  setVal(x) {\n    get(query(this.ref))\n      .then((snapshot) => {\n        if(!snapshot.val()) {\n          console.log(\"overwriting data in buffer\");\n        }\n        super.setVal(x);\n      })\n      .catch(result => console.log(result));\n  }\n}\n\nexport class DBTwoWay extends DBNode {\n  id: number;\n  key?: string;\n  _name: string;\n  _dbref: DatabaseReference;\n  _val: any;\n  _active: boolean;\n\n  constructor(params: NodeParams) {\n    super(params);\n  }\n  \n  attach() {\n    this.active = true;\n    let unsub = onValue(this.ref, (snapshot) => {\n      this.val = snapshot.val();\n      this.emit('change', this.val);\n    });\n    this.unsubscribers.push(unsub);\n  }\n\n  getNow() {\n    get(query(this.ref))\n      .then((snapshot) => {\n        this.val = snapshot.val();\n      })\n      .catch(result => console.log(result));\n  }\n  \n  detach() {\n    if (this.active) {\n      while (this.unsubscribers.length > 0) {\n        let unsub = this.unsubscribers.pop();\n        unsub();\n      }\n    }\n    this.active = false;\n  }\n  \n  setVal(x) {\n    this.val = x;\n    if (this.active) {\n      set(this.ref, this.val);\n    }\n  }\n}\n\nclass DBNodeArray extends EventEmitter {\n  nodes: Array;\n  lengthNode: DBNode;\n  parentNode: DBNode;\n\n  constructor(lengthNode, parentNode, init: any = {}) {\n    super();\n    this.lengthNode = lengthNode;\n    this.parentNode = parentNode;\n    if (init) {\n    } else {\n      this.nodes = [];\n    }\n  }\n\n  get length() { return this.nodes.length; }\n\n  get active() { return (this.lengthNode.active && this.parentNode.active); }\n\n  get ready() { return (this.lengthNode.val > 0 && this.parentNode.val != false); }\n\n  nodeAt(n) {\n    console.log(this.nodes);\n    console.log(\"node at \", n);\n    console.log(this.nodes[n]);\n    return this.nodes[n];\n  }\n\n  pushNode(n) {\n    this.nodes.push(n);\n  }\n\n  popNode() {\n    return this.nodes.pop();\n  }\n}\n\n/**\n * @class `DBListenerArray`\n * @desc Represents a listener to a list of values in the database \n * (generalizes to `DBNodeArray`). Assumes that the data list is\n * structured such that `lengthNode` is a `DBListener` that stores the \n * length of the list, while `parentNode` is a `DBListener` to the parent\n * node of the list. Each item in the list is a child of `parentNode`,\n * which is then stored as a `DBListener` in the array `nodes`.\n */\nexport class DBListenerArray extends DBNodeArray {\n  lengthNode: DBListener;\n  parentNode: DBListener;\n  nodes: Array;\n\n  /**\n  * holds the Unsubscribe functions that are returned by\n  * DB event functions like onValue(...)\n  */\n  unsubscribers: Array;\n\n  constructor(lengthNode: DBListener, parentNode: DBListener) {\n    super(lengthNode, parentNode);\n    this.lengthNode = lengthNode;\n    this.parentNode = parentNode;\n    this.nodes = [];\n    this.unsubscribers = [];\n  }\n\n  /**\n   * @method attach\n   */\n  attach() {\n    this.lengthNode.attach();\n    this.lengthNode.on('change', (val) => {\n        this.emit('ready', this.ready);\n    });\n\n    this.parentNode.attach();\n    this.parentNode.once('change', (val) => {\n      this.emit('ready', this.ready);\n    });\n\n    for (var node of this.nodes) {\n      this.attachChildNode(node);\n    }\n\n    this.unsubscribers.push(\n      onChildAdded(this.parentNode.ref, (snapshot) => {\n        // console.log(\"child added\", snapshot);\n        this.addNode(snapshot.key);\n    }));\n\n    this.unsubscribers.push(\n      onChildChanged(this.parentNode.ref, (snapshot) => {\n        console.log(\"child changed\", snapshot);\n    }));\n\n    this.unsubscribers.push(\n      onChildRemoved(this.parentNode.ref, () => {\n        // console.log(\"child removed\", snapshot);\n        let removed = this.popNode();\n        this.emit('child-removed', removed);\n    }));\n  }\n\n  detach() {\n    if (this.active) {\n      while (this.unsubscribers.length > 0) {\n        let unsub = this.unsubscribers.pop();\n        unsub();\n      }\n    }\n  }\n\n  nodeAt(n: number) {\n    // console.log(this.nodes);\n    // console.log(\"node at \", n);\n    // console.log(this.nodes[n]);\n    return this.nodes[n];\n  }\n\n  /**\n   * Creating a new child node.\n   * @param key \n   */\n  addNode(key: string) {\n    console.log('child key', key);\n    const childRef = child(this.parentNode.ref, key);\n    const childNode = new DBListener({ ref: childRef, key: key, id: this.length });\n    this.attachChildNode(childNode);\n    this.pushNode(childNode);\n    this.emit('child-added', childNode);\n    // this.lengthNode.setVal(this.length);\n  }\n\n  /**\n   * Attaching a child node that was created elsewhere.\n   * Invokes child's `attach()` method and adds event listener\n   * that will emit a `child-change` event.\n   * @param node \n   */\n  attachChildNode(node: DBListener) {\n    node.attach();\n    node.on('change', (val) => {\n      this.emit('child-change', {\n        id: node.id,\n        val: val\n      });\n    });\n  }\n\n  // remNode() {\n  //   const node = this.popNode();\n  //   // remove(node.ref);\n  //   // this.lengthNode.setVal(this.length);\n  // }\n\n  // updateArray(num: number) {\n  //   // this.parentNode.getNow();\n  //   if (num > this.length) {\n  //     let parentKeys = this.parentNode.val;\n  //     // console.log(this.parentNode);\n  //     console.log(parentKeys);\n  //     let childKeys = Object.keys(parentKeys);\n  //     while (this.length  num) {\n  //       this.popNode();\n  //     }\n  //   }\n  //   console.log(this);\n  // }\n\n  toString() {\n    var str = \"\";\n    // str += \"length: \" + this.length + \", \";\n    str += \"[ \\n\";\n    for (var i=0; i ;\n  lengthNode: DBWriter;\n  parentNode: DBWriter;\n\n  constructor(lengthNode, parentNode, init) {\n    super(lengthNode, parentNode, init);\n    if (!init) {\n      this.lengthNode.setVal(0);\n      this.parentNode.setVal(EMPTY_NODE_ARRAY);\n    }\n\n    // console.log(this);\n  }\n\n  addNode(initVal) {\n    const childRef = push(this.parentNode.ref, initVal);\n    const childNode = new DBWriter({ ref: childRef, initVal });\n    childNode.attach();\n    this.pushNode(childNode);\n    this.lengthNode.setVal(this.length);\n  }\n\n  remNode() {\n    const node = this.popNode();\n    remove(node.ref);\n    this.lengthNode.setVal(this.length);\n  }\n\n  updateArray(num, newStates) {\n    if (num > this.length) {\n      while (this.length  num) {\n        this.remNode();\n      }\n    }\n  }\n\n  setNode(i, x) {\n    this.nodes[i].setVal(x);\n  }\n\n}\n\n/**\n * Array of two-way DBNodes where both ends are listening for\n * changes AND may write to the DB -- such as the virtual pedals\n * where both AdaCAD and the Pi/PC can add virtual pedals\n */\nexport class DBTwoWayArray extends DBNodeArray {\n  nodes: Array = [];\n  lengthNode: DBTwoWay;\n  parentNode: DBTwoWay;\n\n  /**\n  * holds the Unsubscribe functions that are returned by\n  * DB event functions like onValue(...)\n  */\n  unsubscribers: Array;\n\n  constructor(lengthNode: DBTwoWay, parentNode: DBTwoWay, init?: Array) {\n    super(lengthNode, parentNode, init);\n    this.unsubscribers = [];\n    if (!init) {\n      this.lengthNode.setVal(0);\n      this.parentNode.setVal(EMPTY_NODE_ARRAY);\n    }\n  }\n\n  addNode(initVal: any) {\n    push(this.parentNode.ref, initVal);\n    // const childNode = new DBTwoWay({ ref: childRef, initVal });\n    // childNode.attach();\n    // this.pushNode(childNode);\n    // this.lengthNode.setVal(this.length);\n    // console.log('child key', key);\n  }\n\n  onNodeAdded(key: string) {\n     const childRef = child(this.parentNode.ref, key);\n     const childNode = new DBTwoWay({ ref: childRef, key: key, id: this.length });\n     this.attachChildNode(childNode);\n     this.pushNode(childNode);\n     this.lengthNode.setVal(this.length);\n     this.emit('child-added', childNode);\n  }\n\n  remNode() {\n    const lastNode = this.nodeAt(this.length-1);\n    remove(lastNode.ref);\n    // this.lengthNode.setVal(this.length);\n  }\n\n  onNodeRemoved() {\n    let removed = this.popNode();\n    this.lengthNode.setVal(this.length);\n    return removed;\n  }\n\n  updateArray(num: number, newStates: Array) {\n    if (num > this.length) {\n      while (this.length  num) {\n        this.remNode();\n      }\n    }\n  }\n\n  setNode(i: number, x: any) {\n    this.nodes[i].setVal(x);\n  }\n\n  /**\n  * @method attach\n  */\n  attach() {\n    this.lengthNode.attach();\n    this.lengthNode.on('change', (val) => {\n        this.emit('ready', this.ready);\n    });\n\n    this.parentNode.attach();\n    this.parentNode.once('change', (val) => {\n      this.emit('ready', this.ready);\n    });\n\n    for (var node of this.nodes) {\n      this.attachChildNode(node);\n    }\n\n    this.unsubscribers.push(\n      onChildAdded(this.parentNode.ref, (snapshot) => {\n        // console.log(\"child added\", snapshot);\n        this.onNodeAdded(snapshot.key);\n    }));\n\n    this.unsubscribers.push(\n      onChildChanged(this.parentNode.ref, (snapshot) => {\n        console.log(\"child changed\", snapshot);\n    }));\n\n    this.unsubscribers.push(\n      onChildRemoved(this.parentNode.ref, () => {\n        // console.log(\"child removed\", snapshot);\n        let removed = this.onNodeRemoved();\n        this.emit('child-removed', removed);\n    }));\n  }\n \n  detach() {\n    if (this.active) {\n      while (this.unsubscribers.length > 0) {\n        let unsub = this.unsubscribers.pop();\n        unsub();\n      }\n    }\n  }\n\n  /**\n  * Attaching a child node that was created elsewhere.\n  * Invokes child's `attach()` method and adds event listener\n  * that will emit a `child-change` event.\n  * @param node \n  */\n  attachChildNode(node: DBListener) {\n    node.attach();\n    node.on('change', (val) => {\n      this.emit('child-change', {\n        id: node.id,\n        val: val\n      });\n    });\n  }\n}\n\n/** special types of DBNodes */\n\n/** @class\n * OnlineStatus representing whether or not the\n * \"host\" device is online. The host device is responsible\n * for keeping the node set to \"true\", while any listener\n * devices check occasionally for the host's status by \n * attempting to set the node to \"false\".\n */\nexport class OnlineStatus extends DBListener {\n  _name: string;\n  _ref: DatabaseReference;\n  _val: boolean;\n  _active: boolean;\n\n  constructor(params) {\n    super(params);\n    this.attach();\n    get(query(this.ref))\n      .then((snapshot) => {\n        this.val = snapshot.val();\n      })\n      .catch(result => console.log(result));\n  }\n\n  checkAlive() {\n    set(this.ref, false)\n      .then(() => { this.emit('set', true); })\n      .catch(() => { this.emit('set', false); });\n  }\n}\n\n\n    \n\n\n\n\n\n\n\n\n\n\n                   \n    \n         results matching \"\"\n        \n    \n    \n        No results matching \"\"\n    \n\n"},"classes/DBTwoWayArray.html":{"url":"classes/DBTwoWayArray.html","title":"class - DBTwoWayArray","body":"\n                   \n\n\n\n\n\n\n\n\n\n\n\n\n\n  Classes\n  DBTwoWayArray\n\n\n\n        \n            Info\n        \n        \n            Source\n        \n\n\n\n    \n        \n            File\n        \n        \n            src/app/player/model/dbnodes.ts\n        \n\n\n            \n                Description\n            \n            \n                Array of two-way DBNodes where both ends are listening for\nchanges AND may write to the DB -- such as the virtual pedals\nwhere both AdaCAD and the Pi/PC can add virtual pedals\n\n            \n\n            \n                Extends\n            \n            \n                        DBNodeArray\n            \n\n\n\n            \n    Index\n    \n        \n                \n                    \n                        Properties\n                    \n                \n                \n                    \n                        \n                            \n                                lengthNode\n                            \n                            \n                                nodes\n                            \n                            \n                                parentNode\n                            \n                            \n                                unsubscribers\n                            \n                        \n                    \n                \n\n                \n                    \n                        Methods\n                    \n                \n                \n                    \n                        \n                            \n                                addNode\n                            \n                            \n                                attach\n                            \n                            \n                                attachChildNode\n                            \n                            \n                                detach\n                            \n                            \n                                onNodeAdded\n                            \n                            \n                                onNodeRemoved\n                            \n                            \n                                remNode\n                            \n                            \n                                setNode\n                            \n                            \n                                updateArray\n                            \n                            \n                                nodeAt\n                            \n                            \n                                popNode\n                            \n                            \n                                pushNode\n                            \n                        \n                    \n                \n\n\n\n\n\n        \n    \n\n\n            \n    Constructor\n        \n            \n                \n                    \nconstructor(lengthNode: DBTwoWay, parentNode: DBTwoWay, init?: Array)\n                    \n                \n                        \n                            \n                                Defined in src/app/player/model/dbnodes.ts:518\n                            \n                        \n\n                \n                    \n                            \n                                    Parameters :\n                                    \n                                        \n                                            \n                                                Name\n                                                    Type\n                                                Optional\n                                            \n                                        \n                                        \n                                                \n                                                        lengthNode\n                                                  \n                                                        \n                                                                        DBTwoWay\n                                                        \n                                                  \n                                                    \n                                                            No\n                                                    \n                                                    \n                                                \n                                                \n                                                        parentNode\n                                                  \n                                                        \n                                                                        DBTwoWay\n                                                        \n                                                  \n                                                    \n                                                            No\n                                                    \n                                                    \n                                                \n                                                \n                                                        init\n                                                  \n                                                        \n                                                                        Array\n                                                        \n                                                  \n                                                    \n                                                            Yes\n                                                    \n                                                    \n                                                \n                                        \n                                    \n                            \n                    \n                \n            \n        \n\n\n            \n    \n    \n        Properties\n    \n    \n        \n            \n                \n                    \n                    \n                        lengthNode\n                        \n                    \n                \n            \n                \n                    \n                        Type :         DBTwoWay\n\n                    \n                \n                        \n                            \n                                Inherited from         DBNodeArray\n\n                            \n                        \n                    \n                        \n                                Defined in         DBNodeArray:511\n\n                        \n                    \n\n\n        \n    \n    \n        \n            \n                \n                    \n                    \n                        nodes\n                        \n                    \n                \n            \n                \n                    \n                        Type :         Array\n\n                    \n                \n                \n                    \n                        Default value : []\n                    \n                \n                        \n                            \n                                Inherited from         DBNodeArray\n\n                            \n                        \n                    \n                        \n                                Defined in         DBNodeArray:510\n\n                        \n                    \n\n\n        \n    \n    \n        \n            \n                \n                    \n                    \n                        parentNode\n                        \n                    \n                \n            \n                \n                    \n                        Type :         DBTwoWay\n\n                    \n                \n                        \n                            \n                                Inherited from         DBNodeArray\n\n                            \n                        \n                    \n                        \n                                Defined in         DBNodeArray:512\n\n                        \n                    \n\n\n        \n    \n    \n        \n            \n                \n                    \n                    \n                        unsubscribers\n                        \n                    \n                \n            \n                \n                    \n                        Type :     Array\n\n                    \n                \n                    \n                        \n                                Defined in src/app/player/model/dbnodes.ts:518\n                        \n                    \n\n            \n                \n                    holds the Unsubscribe functions that are returned by\nDB event functions like onValue(...)\n\n                \n            \n\n        \n    \n\n\n            \n    \n    \n        Methods\n    \n    \n        \n            \n                \n                    \n                    \n                        addNode\n                        \n                    \n                \n            \n            \n                \naddNode(initVal: any)\n                \n            \n\n\n            \n                \n                    Defined in src/app/player/model/dbnodes.ts:529\n                \n            \n\n\n            \n                \n\n                    \n                        Parameters :\n                        \n                        \n                            \n                                \n                                    Name\n                                    Type\n                                    Optional\n                                \n                            \n                            \n                                \n                                    initVal\n                                    \n                                                any\n                                    \n\n                                    \n                                        No\n                                    \n\n\n                                \n                            \n                        \n                    \n                    \n                    \n                    \n                        Returns :         void\n\n                    \n                    \n                        \n                    \n                \n            \n        \n    \n    \n        \n            \n                \n                    \n                    \n                        attach\n                        \n                    \n                \n            \n            \n                \nattach()\n                \n            \n\n\n            \n                \n                    Defined in src/app/player/model/dbnodes.ts:578\n                \n            \n\n\n            \n                \n\n                    \n                        Returns :         void\n\n                    \n                \n            \n        \n    \n    \n        \n            \n                \n                    \n                    \n                        attachChildNode\n                        \n                    \n                \n            \n            \n                \nattachChildNode(node: DBListener)\n                \n            \n\n\n            \n                \n                    Defined in src/app/player/model/dbnodes.ts:627\n                \n            \n\n\n            \n                \n                    Attaching a child node that was created elsewhere.\nInvokes child's attach() method and adds event listener\nthat will emit a child-change event.\n\n\n                    \n                        Parameters :\n                        \n                        \n                            \n                                \n                                    Name\n                                    Type\n                                    Optional\n                                \n                            \n                            \n                                \n                                    node\n                                    \n                                                DBListener\n                                    \n\n                                    \n                                        No\n                                    \n\n\n                                \n                            \n                        \n                    \n                    \n                    \n                    \n                        Returns :         void\n\n                    \n                    \n                        \n                    \n                \n            \n        \n    \n    \n        \n            \n                \n                    \n                    \n                        detach\n                        \n                    \n                \n            \n            \n                \ndetach()\n                \n            \n\n\n            \n                \n                    Defined in src/app/player/model/dbnodes.ts:612\n                \n            \n\n\n            \n                \n\n                    \n                        Returns :         void\n\n                    \n                \n            \n        \n    \n    \n        \n            \n                \n                    \n                    \n                        onNodeAdded\n                        \n                    \n                \n            \n            \n                \nonNodeAdded(key: string)\n                \n            \n\n\n            \n                \n                    Defined in src/app/player/model/dbnodes.ts:538\n                \n            \n\n\n            \n                \n\n                    \n                        Parameters :\n                        \n                        \n                            \n                                \n                                    Name\n                                    Type\n                                    Optional\n                                \n                            \n                            \n                                \n                                    key\n                                    \n                                                string\n                                    \n\n                                    \n                                        No\n                                    \n\n\n                                \n                            \n                        \n                    \n                    \n                    \n                    \n                        Returns :         void\n\n                    \n                    \n                        \n                    \n                \n            \n        \n    \n    \n        \n            \n                \n                    \n                    \n                        onNodeRemoved\n                        \n                    \n                \n            \n            \n                \nonNodeRemoved()\n                \n            \n\n\n            \n                \n                    Defined in src/app/player/model/dbnodes.ts:553\n                \n            \n\n\n            \n                \n\n                    \n                        Returns :         any\n\n                    \n                \n            \n        \n    \n    \n        \n            \n                \n                    \n                    \n                        remNode\n                        \n                    \n                \n            \n            \n                \nremNode()\n                \n            \n\n\n            \n                \n                    Defined in src/app/player/model/dbnodes.ts:547\n                \n            \n\n\n            \n                \n\n                    \n                        Returns :         void\n\n                    \n                \n            \n        \n    \n    \n        \n            \n                \n                    \n                    \n                        setNode\n                        \n                    \n                \n            \n            \n                \nsetNode(i: number, x: any)\n                \n            \n\n\n            \n                \n                    Defined in src/app/player/model/dbnodes.ts:571\n                \n            \n\n\n            \n                \n\n                    \n                        Parameters :\n                        \n                        \n                            \n                                \n                                    Name\n                                    Type\n                                    Optional\n                                \n                            \n                            \n                                \n                                    i\n                                    \n                                                number\n                                    \n\n                                    \n                                        No\n                                    \n\n\n                                \n                                \n                                    x\n                                    \n                                                any\n                                    \n\n                                    \n                                        No\n                                    \n\n\n                                \n                            \n                        \n                    \n                    \n                    \n                    \n                        Returns :         void\n\n                    \n                    \n                        \n                    \n                \n            \n        \n    \n    \n        \n            \n                \n                    \n                    \n                        updateArray\n                        \n                    \n                \n            \n            \n                \nupdateArray(num: number, newStates: Array)\n                \n            \n\n\n            \n                \n                    Defined in src/app/player/model/dbnodes.ts:559\n                \n            \n\n\n            \n                \n\n                    \n                        Parameters :\n                        \n                        \n                            \n                                \n                                    Name\n                                    Type\n                                    Optional\n                                \n                            \n                            \n                                \n                                    num\n                                    \n                                                number\n                                    \n\n                                    \n                                        No\n                                    \n\n\n                                \n                                \n                                    newStates\n                                    \n                                            Array\n                                    \n\n                                    \n                                        No\n                                    \n\n\n                                \n                            \n                        \n                    \n                    \n                    \n                    \n                        Returns :         void\n\n                    \n                    \n                        \n                    \n                \n            \n        \n    \n    \n        \n            \n                \n                    \n                    \n                        nodeAt\n                        \n                    \n                \n            \n            \n                \nnodeAt(n)\n                \n            \n\n\n            \n                \n                    Inherited from         DBNodeArray\n\n                \n            \n            \n                \n                        Defined in         DBNodeArray:287\n\n                \n            \n\n\n            \n                \n\n                    \n                        Parameters :\n                        \n                        \n                            \n                                \n                                    Name\n                                    Optional\n                                \n                            \n                            \n                                \n                                    n\n\n                                    \n                                        No\n                                    \n\n\n                                \n                            \n                        \n                    \n                    \n                    \n                    \n                        Returns :         Array\n\n                    \n                    \n                        \n                    \n                \n            \n        \n    \n    \n        \n            \n                \n                    \n                    \n                        popNode\n                        \n                    \n                \n            \n            \n                \npopNode()\n                \n            \n\n\n            \n                \n                    Inherited from         DBNodeArray\n\n                \n            \n            \n                \n                        Defined in         DBNodeArray:298\n\n                \n            \n\n\n            \n                \n\n                    \n                        Returns :         any\n\n                    \n                \n            \n        \n    \n    \n        \n            \n                \n                    \n                    \n                        pushNode\n                        \n                    \n                \n            \n            \n                \npushNode(n)\n                \n            \n\n\n            \n                \n                    Inherited from         DBNodeArray\n\n                \n            \n            \n                \n                        Defined in         DBNodeArray:294\n\n                \n            \n\n\n            \n                \n\n                    \n                        Parameters :\n                        \n                        \n                            \n                                \n                                    Name\n                                    Optional\n                                \n                            \n                            \n                                \n                                    n\n\n                                    \n                                        No\n                                    \n\n\n                                \n                            \n                        \n                    \n                    \n                    \n                    \n                        Returns :         void\n\n                    \n                    \n                        \n                    \n                \n            \n        \n    \n\n\n\n\n\n\n    \n\n\n    \n        import { child, ref, set, get, query, \n  onValue, onChildAdded, onChildChanged, onChildRemoved,\n  push, remove,\n  DatabaseReference, \n} from \"firebase/database\";\nimport { Database } from '@angular/fire/database';\nimport { EventEmitter } from 'events';\n\nexport interface NodeParams {\n  db?: Database,\n  name?: string,\n  root?: string,\n  path?: string,\n  key?: string,\n  initVal?: any,\n  ref?: DatabaseReference,\n  id?: number\n}\n\nexport type NodeValue = string | boolean | number | { [key: string]: any };\n\ninterface NodeMethods {\n  attach(): void,\n  detach(): void,\n}\n\n/**\n * @class DBNode\n * @desc Wrapper for a Firebase database ref and\n * the value stored at that DB node.\n */\nabstract class DBNode extends EventEmitter implements NodeMethods {\n  id: number;\n  key?: string;\n  _name: string;\n  _dbref: DatabaseReference;\n  _val: NodeValue;\n  _active: boolean;\n\n  /**\n   * holds the Unsubscribe functions that are returned by\n   * DB event functions like onValue(...)\n   */\n  unsubscribers: Array;\n\n  /**\n   * \n   * @param {*} params \\{ db: Database, path: string, initVal: any }\n   * @param {*} params \\{ ref: DatabaseReference, key: string, initVal: any }\n   */\n\n  constructor(params: NodeParams) {\n    super();\n    this.active = false;\n    this.unsubscribers = [];\n    if (params.db) {\n      this._name = params.path;\n      this._dbref = ref(params.db, params.root + params.path);\n      this._val = params.initVal;\n      // console.log(this);\n    } else if (params.ref) {\n      this._name = params.key;\n      this._dbref = params.ref;\n    }\n\n    if(params.id > -1) {\n      this.id = params.id;\n    }\n    console.log(this.name);\n  }\n\n  get ref() {\n    return this._dbref;\n  }\n\n  get name() {\n    return this._name;\n  }\n\n  get val() {\n    if (!this.active) {\n      return false;\n    }\n\n    if (typeof(this._val) == 'number' || typeof(this._val == 'boolean')) {\n      return this._val;\n    } \n    \n    if (this._val != undefined) {\n      return Object.keys(this._val);\n    }\n  }\n\n  set val(x) {\n    this._val = x;\n  }\n\n  get active() {\n    return this._active;\n  }\n\n  set active(tf: boolean) {\n    this._active = tf;\n  }\n\n  // methods for a node: \n  // attach() means it is updating with the database and emitting events\n  // detach() means it is not updating, no events\n  abstract attach();\n  abstract detach();\n}\n\ntype Keyed = Node & { key: string };\n\n/**\n * @class DBListener\n * @desc A DBNode that only reads from the database.\n * When `active = true`, will emit events on the value changing.\n */\nexport class DBListener extends DBNode {\n  id: number;\n  key?: string;\n  _name: string;\n  _dbref: DatabaseReference;\n  _val: any;\n  _active: boolean;\n\n  constructor(params: NodeParams) {\n    super(params);\n  }\n\n  attach() {\n    this.active = true;\n    let unsub = onValue(this.ref, (snapshot) => {\n      this.val = snapshot.val();\n      this.emit('change', this.val);\n    });\n    this.unsubscribers.push(unsub);\n  }\n\n  getNow() {\n    get(query(this.ref))\n      .then((snapshot) => {\n        this.val = snapshot.val();\n      })\n      .catch(result => console.log(result));\n  }\n\n  detach() {\n    if (this.active) {\n      while (this.unsubscribers.length > 0) {\n        let unsub = this.unsubscribers.pop();\n        unsub();\n      }\n    }\n    this.active = false;\n  }\n}\n\n/**\n * @class DBWriter\n * @desc A DBNode that only writes to the database. \n * When `active = true`, will pass `val` to the database.\n */\nexport class DBWriter extends DBNode {\n  id: number;\n  key?: string;\n  _name: string;\n  _ref: DatabaseReference;\n  _val: any;\n  _active: boolean;\n\n  constructor(params: NodeParams) {\n    super(params);\n  }\n\n  attach() {\n    this.active = true;\n  }\n\n  setVal(x) {\n    this.val = x;\n    if (this.active) {\n      set(this.ref, this.val);\n    }\n  }\n\n  detach() {\n    this.active = false;\n  }\n}\n\n/** Special DBWriter that expects the node to be cleared by the\n * other end upon receipt\n */\nexport class DBWriteBuffer extends DBWriter {\n  id: number;\n  _name: string;\n  _ref: DatabaseReference;\n  _val: any;\n  _active: boolean;\n\n  constructor(params: NodeParams) {\n    super(params);\n  }\n\n  setVal(x) {\n    get(query(this.ref))\n      .then((snapshot) => {\n        if(!snapshot.val()) {\n          console.log(\"overwriting data in buffer\");\n        }\n        super.setVal(x);\n      })\n      .catch(result => console.log(result));\n  }\n}\n\nexport class DBTwoWay extends DBNode {\n  id: number;\n  key?: string;\n  _name: string;\n  _dbref: DatabaseReference;\n  _val: any;\n  _active: boolean;\n\n  constructor(params: NodeParams) {\n    super(params);\n  }\n  \n  attach() {\n    this.active = true;\n    let unsub = onValue(this.ref, (snapshot) => {\n      this.val = snapshot.val();\n      this.emit('change', this.val);\n    });\n    this.unsubscribers.push(unsub);\n  }\n\n  getNow() {\n    get(query(this.ref))\n      .then((snapshot) => {\n        this.val = snapshot.val();\n      })\n      .catch(result => console.log(result));\n  }\n  \n  detach() {\n    if (this.active) {\n      while (this.unsubscribers.length > 0) {\n        let unsub = this.unsubscribers.pop();\n        unsub();\n      }\n    }\n    this.active = false;\n  }\n  \n  setVal(x) {\n    this.val = x;\n    if (this.active) {\n      set(this.ref, this.val);\n    }\n  }\n}\n\nclass DBNodeArray extends EventEmitter {\n  nodes: Array;\n  lengthNode: DBNode;\n  parentNode: DBNode;\n\n  constructor(lengthNode, parentNode, init: any = {}) {\n    super();\n    this.lengthNode = lengthNode;\n    this.parentNode = parentNode;\n    if (init) {\n    } else {\n      this.nodes = [];\n    }\n  }\n\n  get length() { return this.nodes.length; }\n\n  get active() { return (this.lengthNode.active && this.parentNode.active); }\n\n  get ready() { return (this.lengthNode.val > 0 && this.parentNode.val != false); }\n\n  nodeAt(n) {\n    console.log(this.nodes);\n    console.log(\"node at \", n);\n    console.log(this.nodes[n]);\n    return this.nodes[n];\n  }\n\n  pushNode(n) {\n    this.nodes.push(n);\n  }\n\n  popNode() {\n    return this.nodes.pop();\n  }\n}\n\n/**\n * @class `DBListenerArray`\n * @desc Represents a listener to a list of values in the database \n * (generalizes to `DBNodeArray`). Assumes that the data list is\n * structured such that `lengthNode` is a `DBListener` that stores the \n * length of the list, while `parentNode` is a `DBListener` to the parent\n * node of the list. Each item in the list is a child of `parentNode`,\n * which is then stored as a `DBListener` in the array `nodes`.\n */\nexport class DBListenerArray extends DBNodeArray {\n  lengthNode: DBListener;\n  parentNode: DBListener;\n  nodes: Array;\n\n  /**\n  * holds the Unsubscribe functions that are returned by\n  * DB event functions like onValue(...)\n  */\n  unsubscribers: Array;\n\n  constructor(lengthNode: DBListener, parentNode: DBListener) {\n    super(lengthNode, parentNode);\n    this.lengthNode = lengthNode;\n    this.parentNode = parentNode;\n    this.nodes = [];\n    this.unsubscribers = [];\n  }\n\n  /**\n   * @method attach\n   */\n  attach() {\n    this.lengthNode.attach();\n    this.lengthNode.on('change', (val) => {\n        this.emit('ready', this.ready);\n    });\n\n    this.parentNode.attach();\n    this.parentNode.once('change', (val) => {\n      this.emit('ready', this.ready);\n    });\n\n    for (var node of this.nodes) {\n      this.attachChildNode(node);\n    }\n\n    this.unsubscribers.push(\n      onChildAdded(this.parentNode.ref, (snapshot) => {\n        // console.log(\"child added\", snapshot);\n        this.addNode(snapshot.key);\n    }));\n\n    this.unsubscribers.push(\n      onChildChanged(this.parentNode.ref, (snapshot) => {\n        console.log(\"child changed\", snapshot);\n    }));\n\n    this.unsubscribers.push(\n      onChildRemoved(this.parentNode.ref, () => {\n        // console.log(\"child removed\", snapshot);\n        let removed = this.popNode();\n        this.emit('child-removed', removed);\n    }));\n  }\n\n  detach() {\n    if (this.active) {\n      while (this.unsubscribers.length > 0) {\n        let unsub = this.unsubscribers.pop();\n        unsub();\n      }\n    }\n  }\n\n  nodeAt(n: number) {\n    // console.log(this.nodes);\n    // console.log(\"node at \", n);\n    // console.log(this.nodes[n]);\n    return this.nodes[n];\n  }\n\n  /**\n   * Creating a new child node.\n   * @param key \n   */\n  addNode(key: string) {\n    console.log('child key', key);\n    const childRef = child(this.parentNode.ref, key);\n    const childNode = new DBListener({ ref: childRef, key: key, id: this.length });\n    this.attachChildNode(childNode);\n    this.pushNode(childNode);\n    this.emit('child-added', childNode);\n    // this.lengthNode.setVal(this.length);\n  }\n\n  /**\n   * Attaching a child node that was created elsewhere.\n   * Invokes child's `attach()` method and adds event listener\n   * that will emit a `child-change` event.\n   * @param node \n   */\n  attachChildNode(node: DBListener) {\n    node.attach();\n    node.on('change', (val) => {\n      this.emit('child-change', {\n        id: node.id,\n        val: val\n      });\n    });\n  }\n\n  // remNode() {\n  //   const node = this.popNode();\n  //   // remove(node.ref);\n  //   // this.lengthNode.setVal(this.length);\n  // }\n\n  // updateArray(num: number) {\n  //   // this.parentNode.getNow();\n  //   if (num > this.length) {\n  //     let parentKeys = this.parentNode.val;\n  //     // console.log(this.parentNode);\n  //     console.log(parentKeys);\n  //     let childKeys = Object.keys(parentKeys);\n  //     while (this.length  num) {\n  //       this.popNode();\n  //     }\n  //   }\n  //   console.log(this);\n  // }\n\n  toString() {\n    var str = \"\";\n    // str += \"length: \" + this.length + \", \";\n    str += \"[ \\n\";\n    for (var i=0; i ;\n  lengthNode: DBWriter;\n  parentNode: DBWriter;\n\n  constructor(lengthNode, parentNode, init) {\n    super(lengthNode, parentNode, init);\n    if (!init) {\n      this.lengthNode.setVal(0);\n      this.parentNode.setVal(EMPTY_NODE_ARRAY);\n    }\n\n    // console.log(this);\n  }\n\n  addNode(initVal) {\n    const childRef = push(this.parentNode.ref, initVal);\n    const childNode = new DBWriter({ ref: childRef, initVal });\n    childNode.attach();\n    this.pushNode(childNode);\n    this.lengthNode.setVal(this.length);\n  }\n\n  remNode() {\n    const node = this.popNode();\n    remove(node.ref);\n    this.lengthNode.setVal(this.length);\n  }\n\n  updateArray(num, newStates) {\n    if (num > this.length) {\n      while (this.length  num) {\n        this.remNode();\n      }\n    }\n  }\n\n  setNode(i, x) {\n    this.nodes[i].setVal(x);\n  }\n\n}\n\n/**\n * Array of two-way DBNodes where both ends are listening for\n * changes AND may write to the DB -- such as the virtual pedals\n * where both AdaCAD and the Pi/PC can add virtual pedals\n */\nexport class DBTwoWayArray extends DBNodeArray {\n  nodes: Array = [];\n  lengthNode: DBTwoWay;\n  parentNode: DBTwoWay;\n\n  /**\n  * holds the Unsubscribe functions that are returned by\n  * DB event functions like onValue(...)\n  */\n  unsubscribers: Array;\n\n  constructor(lengthNode: DBTwoWay, parentNode: DBTwoWay, init?: Array) {\n    super(lengthNode, parentNode, init);\n    this.unsubscribers = [];\n    if (!init) {\n      this.lengthNode.setVal(0);\n      this.parentNode.setVal(EMPTY_NODE_ARRAY);\n    }\n  }\n\n  addNode(initVal: any) {\n    push(this.parentNode.ref, initVal);\n    // const childNode = new DBTwoWay({ ref: childRef, initVal });\n    // childNode.attach();\n    // this.pushNode(childNode);\n    // this.lengthNode.setVal(this.length);\n    // console.log('child key', key);\n  }\n\n  onNodeAdded(key: string) {\n     const childRef = child(this.parentNode.ref, key);\n     const childNode = new DBTwoWay({ ref: childRef, key: key, id: this.length });\n     this.attachChildNode(childNode);\n     this.pushNode(childNode);\n     this.lengthNode.setVal(this.length);\n     this.emit('child-added', childNode);\n  }\n\n  remNode() {\n    const lastNode = this.nodeAt(this.length-1);\n    remove(lastNode.ref);\n    // this.lengthNode.setVal(this.length);\n  }\n\n  onNodeRemoved() {\n    let removed = this.popNode();\n    this.lengthNode.setVal(this.length);\n    return removed;\n  }\n\n  updateArray(num: number, newStates: Array) {\n    if (num > this.length) {\n      while (this.length  num) {\n        this.remNode();\n      }\n    }\n  }\n\n  setNode(i: number, x: any) {\n    this.nodes[i].setVal(x);\n  }\n\n  /**\n  * @method attach\n  */\n  attach() {\n    this.lengthNode.attach();\n    this.lengthNode.on('change', (val) => {\n        this.emit('ready', this.ready);\n    });\n\n    this.parentNode.attach();\n    this.parentNode.once('change', (val) => {\n      this.emit('ready', this.ready);\n    });\n\n    for (var node of this.nodes) {\n      this.attachChildNode(node);\n    }\n\n    this.unsubscribers.push(\n      onChildAdded(this.parentNode.ref, (snapshot) => {\n        // console.log(\"child added\", snapshot);\n        this.onNodeAdded(snapshot.key);\n    }));\n\n    this.unsubscribers.push(\n      onChildChanged(this.parentNode.ref, (snapshot) => {\n        console.log(\"child changed\", snapshot);\n    }));\n\n    this.unsubscribers.push(\n      onChildRemoved(this.parentNode.ref, () => {\n        // console.log(\"child removed\", snapshot);\n        let removed = this.onNodeRemoved();\n        this.emit('child-removed', removed);\n    }));\n  }\n \n  detach() {\n    if (this.active) {\n      while (this.unsubscribers.length > 0) {\n        let unsub = this.unsubscribers.pop();\n        unsub();\n      }\n    }\n  }\n\n  /**\n  * Attaching a child node that was created elsewhere.\n  * Invokes child's `attach()` method and adds event listener\n  * that will emit a `child-change` event.\n  * @param node \n  */\n  attachChildNode(node: DBListener) {\n    node.attach();\n    node.on('change', (val) => {\n      this.emit('child-change', {\n        id: node.id,\n        val: val\n      });\n    });\n  }\n}\n\n/** special types of DBNodes */\n\n/** @class\n * OnlineStatus representing whether or not the\n * \"host\" device is online. The host device is responsible\n * for keeping the node set to \"true\", while any listener\n * devices check occasionally for the host's status by \n * attempting to set the node to \"false\".\n */\nexport class OnlineStatus extends DBListener {\n  _name: string;\n  _ref: DatabaseReference;\n  _val: boolean;\n  _active: boolean;\n\n  constructor(params) {\n    super(params);\n    this.attach();\n    get(query(this.ref))\n      .then((snapshot) => {\n        this.val = snapshot.val();\n      })\n      .catch(result => console.log(result));\n  }\n\n  checkAlive() {\n    set(this.ref, false)\n      .then(() => { this.emit('set', true); })\n      .catch(() => { this.emit('set', false); });\n  }\n}\n\n\n    \n\n\n\n\n\n\n\n\n\n\n                   \n    \n         results matching \"\"\n        \n    \n    \n        No results matching \"\"\n    \n\n"},"classes/DBWriteBuffer.html":{"url":"classes/DBWriteBuffer.html","title":"class - DBWriteBuffer","body":"\n                   \n\n\n\n\n\n\n\n\n\n\n\n\n\n  Classes\n  DBWriteBuffer\n\n\n\n        \n            Info\n        \n        \n            Source\n        \n\n\n\n    \n        \n            File\n        \n        \n            src/app/player/model/dbnodes.ts\n        \n\n\n            \n                Description\n            \n            \n                Special DBWriter that expects the node to be cleared by the\nother end upon receipt\n\n            \n\n            \n                Extends\n            \n            \n                        DBWriter\n            \n\n\n\n            \n    Index\n    \n        \n                \n                    \n                        Properties\n                    \n                \n                \n                    \n                        \n                            \n                                _active\n                            \n                            \n                                _name\n                            \n                            \n                                _ref\n                            \n                            \n                                _val\n                            \n                            \n                                id\n                            \n                            \n                                    Optional\n                                key\n                            \n                            \n                                _dbref\n                            \n                            \n                                unsubscribers\n                            \n                        \n                    \n                \n\n                \n                    \n                        Methods\n                    \n                \n                \n                    \n                        \n                            \n                                setVal\n                            \n                            \n                                attach\n                            \n                            \n                                detach\n                            \n                        \n                    \n                \n\n\n\n\n\n        \n    \n\n\n            \n    Constructor\n        \n            \n                \n                    \nconstructor(params: NodeParams)\n                    \n                \n                        \n                            \n                                Defined in src/app/player/model/dbnodes.ts:201\n                            \n                        \n\n                \n                    \n                            \n                                    Parameters :\n                                    \n                                        \n                                            \n                                                Name\n                                                    Type\n                                                Optional\n                                            \n                                        \n                                        \n                                                \n                                                        params\n                                                  \n                                                        \n                                                                        NodeParams\n                                                        \n                                                  \n                                                    \n                                                            No\n                                                    \n                                                    \n                                                \n                                        \n                                    \n                            \n                    \n                \n            \n        \n\n\n            \n    \n    \n        Properties\n    \n    \n        \n            \n                \n                    \n                    \n                        _active\n                        \n                    \n                \n            \n                \n                    \n                        Type :         boolean\n\n                    \n                \n                        \n                            \n                                Inherited from         DBNode\n\n                            \n                        \n                    \n                        \n                                Defined in         DBNode:201\n\n                        \n                    \n\n\n        \n    \n    \n        \n            \n                \n                    \n                    \n                        _name\n                        \n                    \n                \n            \n                \n                    \n                        Type :         string\n\n                    \n                \n                        \n                            \n                                Inherited from         DBNode\n\n                            \n                        \n                    \n                        \n                                Defined in         DBNode:198\n\n                        \n                    \n\n\n        \n    \n    \n        \n            \n                \n                    \n                    \n                        _ref\n                        \n                    \n                \n            \n                \n                    \n                        Type :     DatabaseReference\n\n                    \n                \n                        \n                            \n                                Inherited from         DBWriter\n\n                            \n                        \n                    \n                        \n                                Defined in         DBWriter:199\n\n                        \n                    \n\n\n        \n    \n    \n        \n            \n                \n                    \n                    \n                        _val\n                        \n                    \n                \n            \n                \n                    \n                        Type :         any\n\n                    \n                \n                        \n                            \n                                Inherited from         DBNode\n\n                            \n                        \n                    \n                        \n                                Defined in         DBNode:200\n\n                        \n                    \n\n\n        \n    \n    \n        \n            \n                \n                    \n                    \n                        id\n                        \n                    \n                \n            \n                \n                    \n                        Type :         number\n\n                    \n                \n                        \n                            \n                                Inherited from         DBNode\n\n                            \n                        \n                    \n                        \n                                Defined in         DBNode:197\n\n                        \n                    \n\n\n        \n    \n    \n        \n            \n                \n                    \n                    \n                            Optional\n                        key\n                        \n                    \n                \n            \n                \n                    \n                        Type :         string\n\n                    \n                \n                        \n                            \n                                Inherited from         DBNode\n\n                            \n                        \n                    \n                        \n                                Defined in         DBNode:167\n\n                        \n                    \n\n\n        \n    \n    \n        \n            \n                \n                    \n                    \n                        _dbref\n                        \n                    \n                \n            \n                \n                    \n                        Type :     DatabaseReference\n\n                    \n                \n                        \n                            \n                                Inherited from         DBNode\n\n                            \n                        \n                    \n                        \n                                Defined in         DBNode:36\n\n                        \n                    \n\n\n        \n    \n    \n        \n            \n                \n                    \n                    \n                        unsubscribers\n                        \n                    \n                \n            \n                \n                    \n                        Type :     Array\n\n                    \n                \n                        \n                            \n                                Inherited from         DBNode\n\n                            \n                        \n                    \n                        \n                                Defined in         DBNode:44\n\n                        \n                    \n\n            \n                \n                    holds the Unsubscribe functions that are returned by\nDB event functions like onValue(...)\n\n                \n            \n\n        \n    \n\n\n            \n    \n    \n        Methods\n    \n    \n        \n            \n                \n                    \n                    \n                        setVal\n                        \n                    \n                \n            \n            \n                \nsetVal(x)\n                \n            \n\n\n            \n                \n                    Inherited from         DBWriter\n\n                \n            \n            \n                \n                        Defined in         DBWriter:207\n\n                \n            \n\n\n            \n                \n\n                    \n                        Parameters :\n                        \n                        \n                            \n                                \n                                    Name\n                                    Optional\n                                \n                            \n                            \n                                \n                                    x\n\n                                    \n                                        No\n                                    \n\n\n                                \n                            \n                        \n                    \n                    \n                    \n                    \n                        Returns :         void\n\n                    \n                    \n                        \n                    \n                \n            \n        \n    \n    \n        \n            \n                \n                    \n                    \n                        attach\n                        \n                    \n                \n            \n            \n                \nattach()\n                \n            \n\n\n            \n                \n                    Inherited from         DBNode\n\n                \n            \n            \n                \n                        Defined in         DBNode:177\n\n                \n            \n\n\n            \n                \n\n                    \n                        Returns :         void\n\n                    \n                \n            \n        \n    \n    \n        \n            \n                \n                    \n                    \n                        detach\n                        \n                    \n                \n            \n            \n                \ndetach()\n                \n            \n\n\n            \n                \n                    Inherited from         DBNode\n\n                \n            \n            \n                \n                        Defined in         DBNode:188\n\n                \n            \n\n\n            \n                \n\n                    \n                        Returns :         void\n\n                    \n                \n            \n        \n    \n\n\n\n\n\n\n    \n\n\n    \n        import { child, ref, set, get, query, \n  onValue, onChildAdded, onChildChanged, onChildRemoved,\n  push, remove,\n  DatabaseReference, \n} from \"firebase/database\";\nimport { Database } from '@angular/fire/database';\nimport { EventEmitter } from 'events';\n\nexport interface NodeParams {\n  db?: Database,\n  name?: string,\n  root?: string,\n  path?: string,\n  key?: string,\n  initVal?: any,\n  ref?: DatabaseReference,\n  id?: number\n}\n\nexport type NodeValue = string | boolean | number | { [key: string]: any };\n\ninterface NodeMethods {\n  attach(): void,\n  detach(): void,\n}\n\n/**\n * @class DBNode\n * @desc Wrapper for a Firebase database ref and\n * the value stored at that DB node.\n */\nabstract class DBNode extends EventEmitter implements NodeMethods {\n  id: number;\n  key?: string;\n  _name: string;\n  _dbref: DatabaseReference;\n  _val: NodeValue;\n  _active: boolean;\n\n  /**\n   * holds the Unsubscribe functions that are returned by\n   * DB event functions like onValue(...)\n   */\n  unsubscribers: Array;\n\n  /**\n   * \n   * @param {*} params \\{ db: Database, path: string, initVal: any }\n   * @param {*} params \\{ ref: DatabaseReference, key: string, initVal: any }\n   */\n\n  constructor(params: NodeParams) {\n    super();\n    this.active = false;\n    this.unsubscribers = [];\n    if (params.db) {\n      this._name = params.path;\n      this._dbref = ref(params.db, params.root + params.path);\n      this._val = params.initVal;\n      // console.log(this);\n    } else if (params.ref) {\n      this._name = params.key;\n      this._dbref = params.ref;\n    }\n\n    if(params.id > -1) {\n      this.id = params.id;\n    }\n    console.log(this.name);\n  }\n\n  get ref() {\n    return this._dbref;\n  }\n\n  get name() {\n    return this._name;\n  }\n\n  get val() {\n    if (!this.active) {\n      return false;\n    }\n\n    if (typeof(this._val) == 'number' || typeof(this._val == 'boolean')) {\n      return this._val;\n    } \n    \n    if (this._val != undefined) {\n      return Object.keys(this._val);\n    }\n  }\n\n  set val(x) {\n    this._val = x;\n  }\n\n  get active() {\n    return this._active;\n  }\n\n  set active(tf: boolean) {\n    this._active = tf;\n  }\n\n  // methods for a node: \n  // attach() means it is updating with the database and emitting events\n  // detach() means it is not updating, no events\n  abstract attach();\n  abstract detach();\n}\n\ntype Keyed = Node & { key: string };\n\n/**\n * @class DBListener\n * @desc A DBNode that only reads from the database.\n * When `active = true`, will emit events on the value changing.\n */\nexport class DBListener extends DBNode {\n  id: number;\n  key?: string;\n  _name: string;\n  _dbref: DatabaseReference;\n  _val: any;\n  _active: boolean;\n\n  constructor(params: NodeParams) {\n    super(params);\n  }\n\n  attach() {\n    this.active = true;\n    let unsub = onValue(this.ref, (snapshot) => {\n      this.val = snapshot.val();\n      this.emit('change', this.val);\n    });\n    this.unsubscribers.push(unsub);\n  }\n\n  getNow() {\n    get(query(this.ref))\n      .then((snapshot) => {\n        this.val = snapshot.val();\n      })\n      .catch(result => console.log(result));\n  }\n\n  detach() {\n    if (this.active) {\n      while (this.unsubscribers.length > 0) {\n        let unsub = this.unsubscribers.pop();\n        unsub();\n      }\n    }\n    this.active = false;\n  }\n}\n\n/**\n * @class DBWriter\n * @desc A DBNode that only writes to the database. \n * When `active = true`, will pass `val` to the database.\n */\nexport class DBWriter extends DBNode {\n  id: number;\n  key?: string;\n  _name: string;\n  _ref: DatabaseReference;\n  _val: any;\n  _active: boolean;\n\n  constructor(params: NodeParams) {\n    super(params);\n  }\n\n  attach() {\n    this.active = true;\n  }\n\n  setVal(x) {\n    this.val = x;\n    if (this.active) {\n      set(this.ref, this.val);\n    }\n  }\n\n  detach() {\n    this.active = false;\n  }\n}\n\n/** Special DBWriter that expects the node to be cleared by the\n * other end upon receipt\n */\nexport class DBWriteBuffer extends DBWriter {\n  id: number;\n  _name: string;\n  _ref: DatabaseReference;\n  _val: any;\n  _active: boolean;\n\n  constructor(params: NodeParams) {\n    super(params);\n  }\n\n  setVal(x) {\n    get(query(this.ref))\n      .then((snapshot) => {\n        if(!snapshot.val()) {\n          console.log(\"overwriting data in buffer\");\n        }\n        super.setVal(x);\n      })\n      .catch(result => console.log(result));\n  }\n}\n\nexport class DBTwoWay extends DBNode {\n  id: number;\n  key?: string;\n  _name: string;\n  _dbref: DatabaseReference;\n  _val: any;\n  _active: boolean;\n\n  constructor(params: NodeParams) {\n    super(params);\n  }\n  \n  attach() {\n    this.active = true;\n    let unsub = onValue(this.ref, (snapshot) => {\n      this.val = snapshot.val();\n      this.emit('change', this.val);\n    });\n    this.unsubscribers.push(unsub);\n  }\n\n  getNow() {\n    get(query(this.ref))\n      .then((snapshot) => {\n        this.val = snapshot.val();\n      })\n      .catch(result => console.log(result));\n  }\n  \n  detach() {\n    if (this.active) {\n      while (this.unsubscribers.length > 0) {\n        let unsub = this.unsubscribers.pop();\n        unsub();\n      }\n    }\n    this.active = false;\n  }\n  \n  setVal(x) {\n    this.val = x;\n    if (this.active) {\n      set(this.ref, this.val);\n    }\n  }\n}\n\nclass DBNodeArray extends EventEmitter {\n  nodes: Array;\n  lengthNode: DBNode;\n  parentNode: DBNode;\n\n  constructor(lengthNode, parentNode, init: any = {}) {\n    super();\n    this.lengthNode = lengthNode;\n    this.parentNode = parentNode;\n    if (init) {\n    } else {\n      this.nodes = [];\n    }\n  }\n\n  get length() { return this.nodes.length; }\n\n  get active() { return (this.lengthNode.active && this.parentNode.active); }\n\n  get ready() { return (this.lengthNode.val > 0 && this.parentNode.val != false); }\n\n  nodeAt(n) {\n    console.log(this.nodes);\n    console.log(\"node at \", n);\n    console.log(this.nodes[n]);\n    return this.nodes[n];\n  }\n\n  pushNode(n) {\n    this.nodes.push(n);\n  }\n\n  popNode() {\n    return this.nodes.pop();\n  }\n}\n\n/**\n * @class `DBListenerArray`\n * @desc Represents a listener to a list of values in the database \n * (generalizes to `DBNodeArray`). Assumes that the data list is\n * structured such that `lengthNode` is a `DBListener` that stores the \n * length of the list, while `parentNode` is a `DBListener` to the parent\n * node of the list. Each item in the list is a child of `parentNode`,\n * which is then stored as a `DBListener` in the array `nodes`.\n */\nexport class DBListenerArray extends DBNodeArray {\n  lengthNode: DBListener;\n  parentNode: DBListener;\n  nodes: Array;\n\n  /**\n  * holds the Unsubscribe functions that are returned by\n  * DB event functions like onValue(...)\n  */\n  unsubscribers: Array;\n\n  constructor(lengthNode: DBListener, parentNode: DBListener) {\n    super(lengthNode, parentNode);\n    this.lengthNode = lengthNode;\n    this.parentNode = parentNode;\n    this.nodes = [];\n    this.unsubscribers = [];\n  }\n\n  /**\n   * @method attach\n   */\n  attach() {\n    this.lengthNode.attach();\n    this.lengthNode.on('change', (val) => {\n        this.emit('ready', this.ready);\n    });\n\n    this.parentNode.attach();\n    this.parentNode.once('change', (val) => {\n      this.emit('ready', this.ready);\n    });\n\n    for (var node of this.nodes) {\n      this.attachChildNode(node);\n    }\n\n    this.unsubscribers.push(\n      onChildAdded(this.parentNode.ref, (snapshot) => {\n        // console.log(\"child added\", snapshot);\n        this.addNode(snapshot.key);\n    }));\n\n    this.unsubscribers.push(\n      onChildChanged(this.parentNode.ref, (snapshot) => {\n        console.log(\"child changed\", snapshot);\n    }));\n\n    this.unsubscribers.push(\n      onChildRemoved(this.parentNode.ref, () => {\n        // console.log(\"child removed\", snapshot);\n        let removed = this.popNode();\n        this.emit('child-removed', removed);\n    }));\n  }\n\n  detach() {\n    if (this.active) {\n      while (this.unsubscribers.length > 0) {\n        let unsub = this.unsubscribers.pop();\n        unsub();\n      }\n    }\n  }\n\n  nodeAt(n: number) {\n    // console.log(this.nodes);\n    // console.log(\"node at \", n);\n    // console.log(this.nodes[n]);\n    return this.nodes[n];\n  }\n\n  /**\n   * Creating a new child node.\n   * @param key \n   */\n  addNode(key: string) {\n    console.log('child key', key);\n    const childRef = child(this.parentNode.ref, key);\n    const childNode = new DBListener({ ref: childRef, key: key, id: this.length });\n    this.attachChildNode(childNode);\n    this.pushNode(childNode);\n    this.emit('child-added', childNode);\n    // this.lengthNode.setVal(this.length);\n  }\n\n  /**\n   * Attaching a child node that was created elsewhere.\n   * Invokes child's `attach()` method and adds event listener\n   * that will emit a `child-change` event.\n   * @param node \n   */\n  attachChildNode(node: DBListener) {\n    node.attach();\n    node.on('change', (val) => {\n      this.emit('child-change', {\n        id: node.id,\n        val: val\n      });\n    });\n  }\n\n  // remNode() {\n  //   const node = this.popNode();\n  //   // remove(node.ref);\n  //   // this.lengthNode.setVal(this.length);\n  // }\n\n  // updateArray(num: number) {\n  //   // this.parentNode.getNow();\n  //   if (num > this.length) {\n  //     let parentKeys = this.parentNode.val;\n  //     // console.log(this.parentNode);\n  //     console.log(parentKeys);\n  //     let childKeys = Object.keys(parentKeys);\n  //     while (this.length  num) {\n  //       this.popNode();\n  //     }\n  //   }\n  //   console.log(this);\n  // }\n\n  toString() {\n    var str = \"\";\n    // str += \"length: \" + this.length + \", \";\n    str += \"[ \\n\";\n    for (var i=0; i ;\n  lengthNode: DBWriter;\n  parentNode: DBWriter;\n\n  constructor(lengthNode, parentNode, init) {\n    super(lengthNode, parentNode, init);\n    if (!init) {\n      this.lengthNode.setVal(0);\n      this.parentNode.setVal(EMPTY_NODE_ARRAY);\n    }\n\n    // console.log(this);\n  }\n\n  addNode(initVal) {\n    const childRef = push(this.parentNode.ref, initVal);\n    const childNode = new DBWriter({ ref: childRef, initVal });\n    childNode.attach();\n    this.pushNode(childNode);\n    this.lengthNode.setVal(this.length);\n  }\n\n  remNode() {\n    const node = this.popNode();\n    remove(node.ref);\n    this.lengthNode.setVal(this.length);\n  }\n\n  updateArray(num, newStates) {\n    if (num > this.length) {\n      while (this.length  num) {\n        this.remNode();\n      }\n    }\n  }\n\n  setNode(i, x) {\n    this.nodes[i].setVal(x);\n  }\n\n}\n\n/**\n * Array of two-way DBNodes where both ends are listening for\n * changes AND may write to the DB -- such as the virtual pedals\n * where both AdaCAD and the Pi/PC can add virtual pedals\n */\nexport class DBTwoWayArray extends DBNodeArray {\n  nodes: Array = [];\n  lengthNode: DBTwoWay;\n  parentNode: DBTwoWay;\n\n  /**\n  * holds the Unsubscribe functions that are returned by\n  * DB event functions like onValue(...)\n  */\n  unsubscribers: Array;\n\n  constructor(lengthNode: DBTwoWay, parentNode: DBTwoWay, init?: Array) {\n    super(lengthNode, parentNode, init);\n    this.unsubscribers = [];\n    if (!init) {\n      this.lengthNode.setVal(0);\n      this.parentNode.setVal(EMPTY_NODE_ARRAY);\n    }\n  }\n\n  addNode(initVal: any) {\n    push(this.parentNode.ref, initVal);\n    // const childNode = new DBTwoWay({ ref: childRef, initVal });\n    // childNode.attach();\n    // this.pushNode(childNode);\n    // this.lengthNode.setVal(this.length);\n    // console.log('child key', key);\n  }\n\n  onNodeAdded(key: string) {\n     const childRef = child(this.parentNode.ref, key);\n     const childNode = new DBTwoWay({ ref: childRef, key: key, id: this.length });\n     this.attachChildNode(childNode);\n     this.pushNode(childNode);\n     this.lengthNode.setVal(this.length);\n     this.emit('child-added', childNode);\n  }\n\n  remNode() {\n    const lastNode = this.nodeAt(this.length-1);\n    remove(lastNode.ref);\n    // this.lengthNode.setVal(this.length);\n  }\n\n  onNodeRemoved() {\n    let removed = this.popNode();\n    this.lengthNode.setVal(this.length);\n    return removed;\n  }\n\n  updateArray(num: number, newStates: Array) {\n    if (num > this.length) {\n      while (this.length  num) {\n        this.remNode();\n      }\n    }\n  }\n\n  setNode(i: number, x: any) {\n    this.nodes[i].setVal(x);\n  }\n\n  /**\n  * @method attach\n  */\n  attach() {\n    this.lengthNode.attach();\n    this.lengthNode.on('change', (val) => {\n        this.emit('ready', this.ready);\n    });\n\n    this.parentNode.attach();\n    this.parentNode.once('change', (val) => {\n      this.emit('ready', this.ready);\n    });\n\n    for (var node of this.nodes) {\n      this.attachChildNode(node);\n    }\n\n    this.unsubscribers.push(\n      onChildAdded(this.parentNode.ref, (snapshot) => {\n        // console.log(\"child added\", snapshot);\n        this.onNodeAdded(snapshot.key);\n    }));\n\n    this.unsubscribers.push(\n      onChildChanged(this.parentNode.ref, (snapshot) => {\n        console.log(\"child changed\", snapshot);\n    }));\n\n    this.unsubscribers.push(\n      onChildRemoved(this.parentNode.ref, () => {\n        // console.log(\"child removed\", snapshot);\n        let removed = this.onNodeRemoved();\n        this.emit('child-removed', removed);\n    }));\n  }\n \n  detach() {\n    if (this.active) {\n      while (this.unsubscribers.length > 0) {\n        let unsub = this.unsubscribers.pop();\n        unsub();\n      }\n    }\n  }\n\n  /**\n  * Attaching a child node that was created elsewhere.\n  * Invokes child's `attach()` method and adds event listener\n  * that will emit a `child-change` event.\n  * @param node \n  */\n  attachChildNode(node: DBListener) {\n    node.attach();\n    node.on('change', (val) => {\n      this.emit('child-change', {\n        id: node.id,\n        val: val\n      });\n    });\n  }\n}\n\n/** special types of DBNodes */\n\n/** @class\n * OnlineStatus representing whether or not the\n * \"host\" device is online. The host device is responsible\n * for keeping the node set to \"true\", while any listener\n * devices check occasionally for the host's status by \n * attempting to set the node to \"false\".\n */\nexport class OnlineStatus extends DBListener {\n  _name: string;\n  _ref: DatabaseReference;\n  _val: boolean;\n  _active: boolean;\n\n  constructor(params) {\n    super(params);\n    this.attach();\n    get(query(this.ref))\n      .then((snapshot) => {\n        this.val = snapshot.val();\n      })\n      .catch(result => console.log(result));\n  }\n\n  checkAlive() {\n    set(this.ref, false)\n      .then(() => { this.emit('set', true); })\n      .catch(() => { this.emit('set', false); });\n  }\n}\n\n\n    \n\n\n\n\n\n\n\n\n\n\n                   \n    \n         results matching \"\"\n        \n    \n    \n        No results matching \"\"\n    \n\n"},"classes/DBWriter.html":{"url":"classes/DBWriter.html","title":"class - DBWriter","body":"\n                   \n\n\n\n\n\n\n\n\n\n\n\n\n\n  Classes\n  DBWriter\n\n\n\n        \n            Info\n        \n        \n            Source\n        \n\n\n\n    \n        \n            File\n        \n        \n            src/app/player/model/dbnodes.ts\n        \n\n\n            \n                Description\n            \n            \n                When active = true, will pass val to the database.\n\n            \n\n            \n                Extends\n            \n            \n                        DBNode\n            \n\n\n\n            \n    Index\n    \n        \n                \n                    \n                        Properties\n                    \n                \n                \n                    \n                        \n                            \n                                _active\n                            \n                            \n                                _name\n                            \n                            \n                                _ref\n                            \n                            \n                                _val\n                            \n                            \n                                id\n                            \n                            \n                                    Optional\n                                key\n                            \n                            \n                                _dbref\n                            \n                            \n                                unsubscribers\n                            \n                        \n                    \n                \n\n                \n                    \n                        Methods\n                    \n                \n                \n                    \n                        \n                            \n                                attach\n                            \n                            \n                                detach\n                            \n                            \n                                setVal\n                            \n                        \n                    \n                \n\n\n\n\n\n        \n    \n\n\n            \n    Constructor\n        \n            \n                \n                    \nconstructor(params: NodeParams)\n                    \n                \n                        \n                            \n                                Defined in src/app/player/model/dbnodes.ts:171\n                            \n                        \n\n                \n                    \n                            \n                                    Parameters :\n                                    \n                                        \n                                            \n                                                Name\n                                                    Type\n                                                Optional\n                                            \n                                        \n                                        \n                                                \n                                                        params\n                                                  \n                                                        \n                                                                        NodeParams\n                                                        \n                                                  \n                                                    \n                                                            No\n                                                    \n                                                    \n                                                \n                                        \n                                    \n                            \n                    \n                \n            \n        \n\n\n            \n    \n    \n        Properties\n    \n    \n        \n            \n                \n                    \n                    \n                        _active\n                        \n                    \n                \n            \n                \n                    \n                        Type :         boolean\n\n                    \n                \n                        \n                            \n                                Inherited from         DBNode\n\n                            \n                        \n                    \n                        \n                                Defined in         DBNode:171\n\n                        \n                    \n\n\n        \n    \n    \n        \n            \n                \n                    \n                    \n                        _name\n                        \n                    \n                \n            \n                \n                    \n                        Type :         string\n\n                    \n                \n                        \n                            \n                                Inherited from         DBNode\n\n                            \n                        \n                    \n                        \n                                Defined in         DBNode:168\n\n                        \n                    \n\n\n        \n    \n    \n        \n            \n                \n                    \n                    \n                        _ref\n                        \n                    \n                \n            \n                \n                    \n                        Type :     DatabaseReference\n\n                    \n                \n                    \n                        \n                                Defined in src/app/player/model/dbnodes.ts:169\n                        \n                    \n\n\n        \n    \n    \n        \n            \n                \n                    \n                    \n                        _val\n                        \n                    \n                \n            \n                \n                    \n                        Type :         any\n\n                    \n                \n                        \n                            \n                                Inherited from         DBNode\n\n                            \n                        \n                    \n                        \n                                Defined in         DBNode:170\n\n                        \n                    \n\n\n        \n    \n    \n        \n            \n                \n                    \n                    \n                        id\n                        \n                    \n                \n            \n                \n                    \n                        Type :         number\n\n                    \n                \n                        \n                            \n                                Inherited from         DBNode\n\n                            \n                        \n                    \n                        \n                                Defined in         DBNode:166\n\n                        \n                    \n\n\n        \n    \n    \n        \n            \n                \n                    \n                    \n                            Optional\n                        key\n                        \n                    \n                \n            \n                \n                    \n                        Type :         string\n\n                    \n                \n                        \n                            \n                                Inherited from         DBNode\n\n                            \n                        \n                    \n                        \n                                Defined in         DBNode:167\n\n                        \n                    \n\n\n        \n    \n    \n        \n            \n                \n                    \n                    \n                        _dbref\n                        \n                    \n                \n            \n                \n                    \n                        Type :     DatabaseReference\n\n                    \n                \n                        \n                            \n                                Inherited from         DBNode\n\n                            \n                        \n                    \n                        \n                                Defined in         DBNode:36\n\n                        \n                    \n\n\n        \n    \n    \n        \n            \n                \n                    \n                    \n                        unsubscribers\n                        \n                    \n                \n            \n                \n                    \n                        Type :     Array\n\n                    \n                \n                        \n                            \n                                Inherited from         DBNode\n\n                            \n                        \n                    \n                        \n                                Defined in         DBNode:44\n\n                        \n                    \n\n            \n                \n                    holds the Unsubscribe functions that are returned by\nDB event functions like onValue(...)\n\n                \n            \n\n        \n    \n\n\n            \n    \n    \n        Methods\n    \n    \n        \n            \n                \n                    \n                    \n                        attach\n                        \n                    \n                \n            \n            \n                \nattach()\n                \n            \n\n\n            \n                \n                    Inherited from         DBNode\n\n                \n            \n            \n                \n                        Defined in         DBNode:177\n\n                \n            \n\n\n            \n                \n\n                    \n                        Returns :         void\n\n                    \n                \n            \n        \n    \n    \n        \n            \n                \n                    \n                    \n                        detach\n                        \n                    \n                \n            \n            \n                \ndetach()\n                \n            \n\n\n            \n                \n                    Inherited from         DBNode\n\n                \n            \n            \n                \n                        Defined in         DBNode:188\n\n                \n            \n\n\n            \n                \n\n                    \n                        Returns :         void\n\n                    \n                \n            \n        \n    \n    \n        \n            \n                \n                    \n                    \n                        setVal\n                        \n                    \n                \n            \n            \n                \nsetVal(x)\n                \n            \n\n\n            \n                \n                    Defined in src/app/player/model/dbnodes.ts:181\n                \n            \n\n\n            \n                \n\n                    \n                        Parameters :\n                        \n                        \n                            \n                                \n                                    Name\n                                    Optional\n                                \n                            \n                            \n                                \n                                    x\n\n                                    \n                                        No\n                                    \n\n\n                                \n                            \n                        \n                    \n                    \n                    \n                    \n                        Returns :         void\n\n                    \n                    \n                        \n                    \n                \n            \n        \n    \n\n\n\n\n\n\n    \n\n\n    \n        import { child, ref, set, get, query, \n  onValue, onChildAdded, onChildChanged, onChildRemoved,\n  push, remove,\n  DatabaseReference, \n} from \"firebase/database\";\nimport { Database } from '@angular/fire/database';\nimport { EventEmitter } from 'events';\n\nexport interface NodeParams {\n  db?: Database,\n  name?: string,\n  root?: string,\n  path?: string,\n  key?: string,\n  initVal?: any,\n  ref?: DatabaseReference,\n  id?: number\n}\n\nexport type NodeValue = string | boolean | number | { [key: string]: any };\n\ninterface NodeMethods {\n  attach(): void,\n  detach(): void,\n}\n\n/**\n * @class DBNode\n * @desc Wrapper for a Firebase database ref and\n * the value stored at that DB node.\n */\nabstract class DBNode extends EventEmitter implements NodeMethods {\n  id: number;\n  key?: string;\n  _name: string;\n  _dbref: DatabaseReference;\n  _val: NodeValue;\n  _active: boolean;\n\n  /**\n   * holds the Unsubscribe functions that are returned by\n   * DB event functions like onValue(...)\n   */\n  unsubscribers: Array;\n\n  /**\n   * \n   * @param {*} params \\{ db: Database, path: string, initVal: any }\n   * @param {*} params \\{ ref: DatabaseReference, key: string, initVal: any }\n   */\n\n  constructor(params: NodeParams) {\n    super();\n    this.active = false;\n    this.unsubscribers = [];\n    if (params.db) {\n      this._name = params.path;\n      this._dbref = ref(params.db, params.root + params.path);\n      this._val = params.initVal;\n      // console.log(this);\n    } else if (params.ref) {\n      this._name = params.key;\n      this._dbref = params.ref;\n    }\n\n    if(params.id > -1) {\n      this.id = params.id;\n    }\n    console.log(this.name);\n  }\n\n  get ref() {\n    return this._dbref;\n  }\n\n  get name() {\n    return this._name;\n  }\n\n  get val() {\n    if (!this.active) {\n      return false;\n    }\n\n    if (typeof(this._val) == 'number' || typeof(this._val == 'boolean')) {\n      return this._val;\n    } \n    \n    if (this._val != undefined) {\n      return Object.keys(this._val);\n    }\n  }\n\n  set val(x) {\n    this._val = x;\n  }\n\n  get active() {\n    return this._active;\n  }\n\n  set active(tf: boolean) {\n    this._active = tf;\n  }\n\n  // methods for a node: \n  // attach() means it is updating with the database and emitting events\n  // detach() means it is not updating, no events\n  abstract attach();\n  abstract detach();\n}\n\ntype Keyed = Node & { key: string };\n\n/**\n * @class DBListener\n * @desc A DBNode that only reads from the database.\n * When `active = true`, will emit events on the value changing.\n */\nexport class DBListener extends DBNode {\n  id: number;\n  key?: string;\n  _name: string;\n  _dbref: DatabaseReference;\n  _val: any;\n  _active: boolean;\n\n  constructor(params: NodeParams) {\n    super(params);\n  }\n\n  attach() {\n    this.active = true;\n    let unsub = onValue(this.ref, (snapshot) => {\n      this.val = snapshot.val();\n      this.emit('change', this.val);\n    });\n    this.unsubscribers.push(unsub);\n  }\n\n  getNow() {\n    get(query(this.ref))\n      .then((snapshot) => {\n        this.val = snapshot.val();\n      })\n      .catch(result => console.log(result));\n  }\n\n  detach() {\n    if (this.active) {\n      while (this.unsubscribers.length > 0) {\n        let unsub = this.unsubscribers.pop();\n        unsub();\n      }\n    }\n    this.active = false;\n  }\n}\n\n/**\n * @class DBWriter\n * @desc A DBNode that only writes to the database. \n * When `active = true`, will pass `val` to the database.\n */\nexport class DBWriter extends DBNode {\n  id: number;\n  key?: string;\n  _name: string;\n  _ref: DatabaseReference;\n  _val: any;\n  _active: boolean;\n\n  constructor(params: NodeParams) {\n    super(params);\n  }\n\n  attach() {\n    this.active = true;\n  }\n\n  setVal(x) {\n    this.val = x;\n    if (this.active) {\n      set(this.ref, this.val);\n    }\n  }\n\n  detach() {\n    this.active = false;\n  }\n}\n\n/** Special DBWriter that expects the node to be cleared by the\n * other end upon receipt\n */\nexport class DBWriteBuffer extends DBWriter {\n  id: number;\n  _name: string;\n  _ref: DatabaseReference;\n  _val: any;\n  _active: boolean;\n\n  constructor(params: NodeParams) {\n    super(params);\n  }\n\n  setVal(x) {\n    get(query(this.ref))\n      .then((snapshot) => {\n        if(!snapshot.val()) {\n          console.log(\"overwriting data in buffer\");\n        }\n        super.setVal(x);\n      })\n      .catch(result => console.log(result));\n  }\n}\n\nexport class DBTwoWay extends DBNode {\n  id: number;\n  key?: string;\n  _name: string;\n  _dbref: DatabaseReference;\n  _val: any;\n  _active: boolean;\n\n  constructor(params: NodeParams) {\n    super(params);\n  }\n  \n  attach() {\n    this.active = true;\n    let unsub = onValue(this.ref, (snapshot) => {\n      this.val = snapshot.val();\n      this.emit('change', this.val);\n    });\n    this.unsubscribers.push(unsub);\n  }\n\n  getNow() {\n    get(query(this.ref))\n      .then((snapshot) => {\n        this.val = snapshot.val();\n      })\n      .catch(result => console.log(result));\n  }\n  \n  detach() {\n    if (this.active) {\n      while (this.unsubscribers.length > 0) {\n        let unsub = this.unsubscribers.pop();\n        unsub();\n      }\n    }\n    this.active = false;\n  }\n  \n  setVal(x) {\n    this.val = x;\n    if (this.active) {\n      set(this.ref, this.val);\n    }\n  }\n}\n\nclass DBNodeArray extends EventEmitter {\n  nodes: Array;\n  lengthNode: DBNode;\n  parentNode: DBNode;\n\n  constructor(lengthNode, parentNode, init: any = {}) {\n    super();\n    this.lengthNode = lengthNode;\n    this.parentNode = parentNode;\n    if (init) {\n    } else {\n      this.nodes = [];\n    }\n  }\n\n  get length() { return this.nodes.length; }\n\n  get active() { return (this.lengthNode.active && this.parentNode.active); }\n\n  get ready() { return (this.lengthNode.val > 0 && this.parentNode.val != false); }\n\n  nodeAt(n) {\n    console.log(this.nodes);\n    console.log(\"node at \", n);\n    console.log(this.nodes[n]);\n    return this.nodes[n];\n  }\n\n  pushNode(n) {\n    this.nodes.push(n);\n  }\n\n  popNode() {\n    return this.nodes.pop();\n  }\n}\n\n/**\n * @class `DBListenerArray`\n * @desc Represents a listener to a list of values in the database \n * (generalizes to `DBNodeArray`). Assumes that the data list is\n * structured such that `lengthNode` is a `DBListener` that stores the \n * length of the list, while `parentNode` is a `DBListener` to the parent\n * node of the list. Each item in the list is a child of `parentNode`,\n * which is then stored as a `DBListener` in the array `nodes`.\n */\nexport class DBListenerArray extends DBNodeArray {\n  lengthNode: DBListener;\n  parentNode: DBListener;\n  nodes: Array;\n\n  /**\n  * holds the Unsubscribe functions that are returned by\n  * DB event functions like onValue(...)\n  */\n  unsubscribers: Array;\n\n  constructor(lengthNode: DBListener, parentNode: DBListener) {\n    super(lengthNode, parentNode);\n    this.lengthNode = lengthNode;\n    this.parentNode = parentNode;\n    this.nodes = [];\n    this.unsubscribers = [];\n  }\n\n  /**\n   * @method attach\n   */\n  attach() {\n    this.lengthNode.attach();\n    this.lengthNode.on('change', (val) => {\n        this.emit('ready', this.ready);\n    });\n\n    this.parentNode.attach();\n    this.parentNode.once('change', (val) => {\n      this.emit('ready', this.ready);\n    });\n\n    for (var node of this.nodes) {\n      this.attachChildNode(node);\n    }\n\n    this.unsubscribers.push(\n      onChildAdded(this.parentNode.ref, (snapshot) => {\n        // console.log(\"child added\", snapshot);\n        this.addNode(snapshot.key);\n    }));\n\n    this.unsubscribers.push(\n      onChildChanged(this.parentNode.ref, (snapshot) => {\n        console.log(\"child changed\", snapshot);\n    }));\n\n    this.unsubscribers.push(\n      onChildRemoved(this.parentNode.ref, () => {\n        // console.log(\"child removed\", snapshot);\n        let removed = this.popNode();\n        this.emit('child-removed', removed);\n    }));\n  }\n\n  detach() {\n    if (this.active) {\n      while (this.unsubscribers.length > 0) {\n        let unsub = this.unsubscribers.pop();\n        unsub();\n      }\n    }\n  }\n\n  nodeAt(n: number) {\n    // console.log(this.nodes);\n    // console.log(\"node at \", n);\n    // console.log(this.nodes[n]);\n    return this.nodes[n];\n  }\n\n  /**\n   * Creating a new child node.\n   * @param key \n   */\n  addNode(key: string) {\n    console.log('child key', key);\n    const childRef = child(this.parentNode.ref, key);\n    const childNode = new DBListener({ ref: childRef, key: key, id: this.length });\n    this.attachChildNode(childNode);\n    this.pushNode(childNode);\n    this.emit('child-added', childNode);\n    // this.lengthNode.setVal(this.length);\n  }\n\n  /**\n   * Attaching a child node that was created elsewhere.\n   * Invokes child's `attach()` method and adds event listener\n   * that will emit a `child-change` event.\n   * @param node \n   */\n  attachChildNode(node: DBListener) {\n    node.attach();\n    node.on('change', (val) => {\n      this.emit('child-change', {\n        id: node.id,\n        val: val\n      });\n    });\n  }\n\n  // remNode() {\n  //   const node = this.popNode();\n  //   // remove(node.ref);\n  //   // this.lengthNode.setVal(this.length);\n  // }\n\n  // updateArray(num: number) {\n  //   // this.parentNode.getNow();\n  //   if (num > this.length) {\n  //     let parentKeys = this.parentNode.val;\n  //     // console.log(this.parentNode);\n  //     console.log(parentKeys);\n  //     let childKeys = Object.keys(parentKeys);\n  //     while (this.length  num) {\n  //       this.popNode();\n  //     }\n  //   }\n  //   console.log(this);\n  // }\n\n  toString() {\n    var str = \"\";\n    // str += \"length: \" + this.length + \", \";\n    str += \"[ \\n\";\n    for (var i=0; i ;\n  lengthNode: DBWriter;\n  parentNode: DBWriter;\n\n  constructor(lengthNode, parentNode, init) {\n    super(lengthNode, parentNode, init);\n    if (!init) {\n      this.lengthNode.setVal(0);\n      this.parentNode.setVal(EMPTY_NODE_ARRAY);\n    }\n\n    // console.log(this);\n  }\n\n  addNode(initVal) {\n    const childRef = push(this.parentNode.ref, initVal);\n    const childNode = new DBWriter({ ref: childRef, initVal });\n    childNode.attach();\n    this.pushNode(childNode);\n    this.lengthNode.setVal(this.length);\n  }\n\n  remNode() {\n    const node = this.popNode();\n    remove(node.ref);\n    this.lengthNode.setVal(this.length);\n  }\n\n  updateArray(num, newStates) {\n    if (num > this.length) {\n      while (this.length  num) {\n        this.remNode();\n      }\n    }\n  }\n\n  setNode(i, x) {\n    this.nodes[i].setVal(x);\n  }\n\n}\n\n/**\n * Array of two-way DBNodes where both ends are listening for\n * changes AND may write to the DB -- such as the virtual pedals\n * where both AdaCAD and the Pi/PC can add virtual pedals\n */\nexport class DBTwoWayArray extends DBNodeArray {\n  nodes: Array = [];\n  lengthNode: DBTwoWay;\n  parentNode: DBTwoWay;\n\n  /**\n  * holds the Unsubscribe functions that are returned by\n  * DB event functions like onValue(...)\n  */\n  unsubscribers: Array;\n\n  constructor(lengthNode: DBTwoWay, parentNode: DBTwoWay, init?: Array) {\n    super(lengthNode, parentNode, init);\n    this.unsubscribers = [];\n    if (!init) {\n      this.lengthNode.setVal(0);\n      this.parentNode.setVal(EMPTY_NODE_ARRAY);\n    }\n  }\n\n  addNode(initVal: any) {\n    push(this.parentNode.ref, initVal);\n    // const childNode = new DBTwoWay({ ref: childRef, initVal });\n    // childNode.attach();\n    // this.pushNode(childNode);\n    // this.lengthNode.setVal(this.length);\n    // console.log('child key', key);\n  }\n\n  onNodeAdded(key: string) {\n     const childRef = child(this.parentNode.ref, key);\n     const childNode = new DBTwoWay({ ref: childRef, key: key, id: this.length });\n     this.attachChildNode(childNode);\n     this.pushNode(childNode);\n     this.lengthNode.setVal(this.length);\n     this.emit('child-added', childNode);\n  }\n\n  remNode() {\n    const lastNode = this.nodeAt(this.length-1);\n    remove(lastNode.ref);\n    // this.lengthNode.setVal(this.length);\n  }\n\n  onNodeRemoved() {\n    let removed = this.popNode();\n    this.lengthNode.setVal(this.length);\n    return removed;\n  }\n\n  updateArray(num: number, newStates: Array) {\n    if (num > this.length) {\n      while (this.length  num) {\n        this.remNode();\n      }\n    }\n  }\n\n  setNode(i: number, x: any) {\n    this.nodes[i].setVal(x);\n  }\n\n  /**\n  * @method attach\n  */\n  attach() {\n    this.lengthNode.attach();\n    this.lengthNode.on('change', (val) => {\n        this.emit('ready', this.ready);\n    });\n\n    this.parentNode.attach();\n    this.parentNode.once('change', (val) => {\n      this.emit('ready', this.ready);\n    });\n\n    for (var node of this.nodes) {\n      this.attachChildNode(node);\n    }\n\n    this.unsubscribers.push(\n      onChildAdded(this.parentNode.ref, (snapshot) => {\n        // console.log(\"child added\", snapshot);\n        this.onNodeAdded(snapshot.key);\n    }));\n\n    this.unsubscribers.push(\n      onChildChanged(this.parentNode.ref, (snapshot) => {\n        console.log(\"child changed\", snapshot);\n    }));\n\n    this.unsubscribers.push(\n      onChildRemoved(this.parentNode.ref, () => {\n        // console.log(\"child removed\", snapshot);\n        let removed = this.onNodeRemoved();\n        this.emit('child-removed', removed);\n    }));\n  }\n \n  detach() {\n    if (this.active) {\n      while (this.unsubscribers.length > 0) {\n        let unsub = this.unsubscribers.pop();\n        unsub();\n      }\n    }\n  }\n\n  /**\n  * Attaching a child node that was created elsewhere.\n  * Invokes child's `attach()` method and adds event listener\n  * that will emit a `child-change` event.\n  * @param node \n  */\n  attachChildNode(node: DBListener) {\n    node.attach();\n    node.on('change', (val) => {\n      this.emit('child-change', {\n        id: node.id,\n        val: val\n      });\n    });\n  }\n}\n\n/** special types of DBNodes */\n\n/** @class\n * OnlineStatus representing whether or not the\n * \"host\" device is online. The host device is responsible\n * for keeping the node set to \"true\", while any listener\n * devices check occasionally for the host's status by \n * attempting to set the node to \"false\".\n */\nexport class OnlineStatus extends DBListener {\n  _name: string;\n  _ref: DatabaseReference;\n  _val: boolean;\n  _active: boolean;\n\n  constructor(params) {\n    super(params);\n    this.attach();\n    get(query(this.ref))\n      .then((snapshot) => {\n        this.val = snapshot.val();\n      })\n      .catch(result => console.log(result));\n  }\n\n  checkAlive() {\n    set(this.ref, false)\n      .then(() => { this.emit('set', true); })\n      .catch(() => { this.emit('set', false); });\n  }\n}\n\n\n    \n\n\n\n\n\n\n\n\n\n\n                   \n    \n         results matching \"\"\n        \n    \n    \n        No results matching \"\"\n    \n\n"},"classes/DBWriterArray.html":{"url":"classes/DBWriterArray.html","title":"class - DBWriterArray","body":"\n                   \n\n\n\n\n\n\n\n\n\n\n\n\n\n  Classes\n  DBWriterArray\n\n\n\n        \n            Info\n        \n        \n            Source\n        \n\n\n\n    \n        \n            File\n        \n        \n            src/app/player/model/dbnodes.ts\n        \n\n\n\n            \n                Extends\n            \n            \n                        DBNodeArray\n            \n\n\n\n            \n    Index\n    \n        \n                \n                    \n                        Properties\n                    \n                \n                \n                    \n                        \n                            \n                                lengthNode\n                            \n                            \n                                nodes\n                            \n                            \n                                parentNode\n                            \n                        \n                    \n                \n\n                \n                    \n                        Methods\n                    \n                \n                \n                    \n                        \n                            \n                                addNode\n                            \n                            \n                                remNode\n                            \n                            \n                                setNode\n                            \n                            \n                                updateArray\n                            \n                            \n                                nodeAt\n                            \n                            \n                                popNode\n                            \n                            \n                                pushNode\n                            \n                        \n                    \n                \n\n\n\n\n\n        \n    \n\n\n            \n    Constructor\n        \n            \n                \n                    \nconstructor(lengthNode, parentNode, init)\n                    \n                \n                        \n                            \n                                Defined in src/app/player/model/dbnodes.ts:460\n                            \n                        \n\n                \n                    \n                            \n                                    Parameters :\n                                    \n                                        \n                                            \n                                                Name\n                                                Optional\n                                            \n                                        \n                                        \n                                                \n                                                        lengthNode\n                                                  \n                                                  \n                                                    \n                                                            No\n                                                    \n                                                    \n                                                \n                                                \n                                                        parentNode\n                                                  \n                                                  \n                                                    \n                                                            No\n                                                    \n                                                    \n                                                \n                                                \n                                                        init\n                                                  \n                                                  \n                                                    \n                                                            No\n                                                    \n                                                    \n                                                \n                                        \n                                    \n                            \n                    \n                \n            \n        \n\n\n            \n    \n    \n        Properties\n    \n    \n        \n            \n                \n                    \n                    \n                        lengthNode\n                        \n                    \n                \n            \n                \n                    \n                        Type :         DBWriter\n\n                    \n                \n                        \n                            \n                                Inherited from         DBNodeArray\n\n                            \n                        \n                    \n                        \n                                Defined in         DBNodeArray:459\n\n                        \n                    \n\n\n        \n    \n    \n        \n            \n                \n                    \n                    \n                        nodes\n                        \n                    \n                \n            \n                \n                    \n                        Type :         Array\n\n                    \n                \n                        \n                            \n                                Inherited from         DBNodeArray\n\n                            \n                        \n                    \n                        \n                                Defined in         DBNodeArray:458\n\n                        \n                    \n\n\n        \n    \n    \n        \n            \n                \n                    \n                    \n                        parentNode\n                        \n                    \n                \n            \n                \n                    \n                        Type :         DBWriter\n\n                    \n                \n                        \n                            \n                                Inherited from         DBNodeArray\n\n                            \n                        \n                    \n                        \n                                Defined in         DBNodeArray:460\n\n                        \n                    \n\n\n        \n    \n\n\n            \n    \n    \n        Methods\n    \n    \n        \n            \n                \n                    \n                    \n                        addNode\n                        \n                    \n                \n            \n            \n                \naddNode(initVal)\n                \n            \n\n\n            \n                \n                    Defined in src/app/player/model/dbnodes.ts:472\n                \n            \n\n\n            \n                \n\n                    \n                        Parameters :\n                        \n                        \n                            \n                                \n                                    Name\n                                    Optional\n                                \n                            \n                            \n                                \n                                    initVal\n\n                                    \n                                        No\n                                    \n\n\n                                \n                            \n                        \n                    \n                    \n                    \n                    \n                        Returns :         void\n\n                    \n                    \n                        \n                    \n                \n            \n        \n    \n    \n        \n            \n                \n                    \n                    \n                        remNode\n                        \n                    \n                \n            \n            \n                \nremNode()\n                \n            \n\n\n            \n                \n                    Defined in src/app/player/model/dbnodes.ts:480\n                \n            \n\n\n            \n                \n\n                    \n                        Returns :         void\n\n                    \n                \n            \n        \n    \n    \n        \n            \n                \n                    \n                    \n                        setNode\n                        \n                    \n                \n            \n            \n                \nsetNode(i, x)\n                \n            \n\n\n            \n                \n                    Defined in src/app/player/model/dbnodes.ts:498\n                \n            \n\n\n            \n                \n\n                    \n                        Parameters :\n                        \n                        \n                            \n                                \n                                    Name\n                                    Optional\n                                \n                            \n                            \n                                \n                                    i\n\n                                    \n                                        No\n                                    \n\n\n                                \n                                \n                                    x\n\n                                    \n                                        No\n                                    \n\n\n                                \n                            \n                        \n                    \n                    \n                    \n                    \n                        Returns :         void\n\n                    \n                    \n                        \n                    \n                \n            \n        \n    \n    \n        \n            \n                \n                    \n                    \n                        updateArray\n                        \n                    \n                \n            \n            \n                \nupdateArray(num, newStates)\n                \n            \n\n\n            \n                \n                    Defined in src/app/player/model/dbnodes.ts:486\n                \n            \n\n\n            \n                \n\n                    \n                        Parameters :\n                        \n                        \n                            \n                                \n                                    Name\n                                    Optional\n                                \n                            \n                            \n                                \n                                    num\n\n                                    \n                                        No\n                                    \n\n\n                                \n                                \n                                    newStates\n\n                                    \n                                        No\n                                    \n\n\n                                \n                            \n                        \n                    \n                    \n                    \n                    \n                        Returns :         void\n\n                    \n                    \n                        \n                    \n                \n            \n        \n    \n    \n        \n            \n                \n                    \n                    \n                        nodeAt\n                        \n                    \n                \n            \n            \n                \nnodeAt(n)\n                \n            \n\n\n            \n                \n                    Inherited from         DBNodeArray\n\n                \n            \n            \n                \n                        Defined in         DBNodeArray:287\n\n                \n            \n\n\n            \n                \n\n                    \n                        Parameters :\n                        \n                        \n                            \n                                \n                                    Name\n                                    Optional\n                                \n                            \n                            \n                                \n                                    n\n\n                                    \n                                        No\n                                    \n\n\n                                \n                            \n                        \n                    \n                    \n                    \n                    \n                        Returns :         Array\n\n                    \n                    \n                        \n                    \n                \n            \n        \n    \n    \n        \n            \n                \n                    \n                    \n                        popNode\n                        \n                    \n                \n            \n            \n                \npopNode()\n                \n            \n\n\n            \n                \n                    Inherited from         DBNodeArray\n\n                \n            \n            \n                \n                        Defined in         DBNodeArray:298\n\n                \n            \n\n\n            \n                \n\n                    \n                        Returns :         any\n\n                    \n                \n            \n        \n    \n    \n        \n            \n                \n                    \n                    \n                        pushNode\n                        \n                    \n                \n            \n            \n                \npushNode(n)\n                \n            \n\n\n            \n                \n                    Inherited from         DBNodeArray\n\n                \n            \n            \n                \n                        Defined in         DBNodeArray:294\n\n                \n            \n\n\n            \n                \n\n                    \n                        Parameters :\n                        \n                        \n                            \n                                \n                                    Name\n                                    Optional\n                                \n                            \n                            \n                                \n                                    n\n\n                                    \n                                        No\n                                    \n\n\n                                \n                            \n                        \n                    \n                    \n                    \n                    \n                        Returns :         void\n\n                    \n                    \n                        \n                    \n                \n            \n        \n    \n\n\n\n\n\n\n    \n\n\n    \n        import { child, ref, set, get, query, \n  onValue, onChildAdded, onChildChanged, onChildRemoved,\n  push, remove,\n  DatabaseReference, \n} from \"firebase/database\";\nimport { Database } from '@angular/fire/database';\nimport { EventEmitter } from 'events';\n\nexport interface NodeParams {\n  db?: Database,\n  name?: string,\n  root?: string,\n  path?: string,\n  key?: string,\n  initVal?: any,\n  ref?: DatabaseReference,\n  id?: number\n}\n\nexport type NodeValue = string | boolean | number | { [key: string]: any };\n\ninterface NodeMethods {\n  attach(): void,\n  detach(): void,\n}\n\n/**\n * @class DBNode\n * @desc Wrapper for a Firebase database ref and\n * the value stored at that DB node.\n */\nabstract class DBNode extends EventEmitter implements NodeMethods {\n  id: number;\n  key?: string;\n  _name: string;\n  _dbref: DatabaseReference;\n  _val: NodeValue;\n  _active: boolean;\n\n  /**\n   * holds the Unsubscribe functions that are returned by\n   * DB event functions like onValue(...)\n   */\n  unsubscribers: Array;\n\n  /**\n   * \n   * @param {*} params \\{ db: Database, path: string, initVal: any }\n   * @param {*} params \\{ ref: DatabaseReference, key: string, initVal: any }\n   */\n\n  constructor(params: NodeParams) {\n    super();\n    this.active = false;\n    this.unsubscribers = [];\n    if (params.db) {\n      this._name = params.path;\n      this._dbref = ref(params.db, params.root + params.path);\n      this._val = params.initVal;\n      // console.log(this);\n    } else if (params.ref) {\n      this._name = params.key;\n      this._dbref = params.ref;\n    }\n\n    if(params.id > -1) {\n      this.id = params.id;\n    }\n    console.log(this.name);\n  }\n\n  get ref() {\n    return this._dbref;\n  }\n\n  get name() {\n    return this._name;\n  }\n\n  get val() {\n    if (!this.active) {\n      return false;\n    }\n\n    if (typeof(this._val) == 'number' || typeof(this._val == 'boolean')) {\n      return this._val;\n    } \n    \n    if (this._val != undefined) {\n      return Object.keys(this._val);\n    }\n  }\n\n  set val(x) {\n    this._val = x;\n  }\n\n  get active() {\n    return this._active;\n  }\n\n  set active(tf: boolean) {\n    this._active = tf;\n  }\n\n  // methods for a node: \n  // attach() means it is updating with the database and emitting events\n  // detach() means it is not updating, no events\n  abstract attach();\n  abstract detach();\n}\n\ntype Keyed = Node & { key: string };\n\n/**\n * @class DBListener\n * @desc A DBNode that only reads from the database.\n * When `active = true`, will emit events on the value changing.\n */\nexport class DBListener extends DBNode {\n  id: number;\n  key?: string;\n  _name: string;\n  _dbref: DatabaseReference;\n  _val: any;\n  _active: boolean;\n\n  constructor(params: NodeParams) {\n    super(params);\n  }\n\n  attach() {\n    this.active = true;\n    let unsub = onValue(this.ref, (snapshot) => {\n      this.val = snapshot.val();\n      this.emit('change', this.val);\n    });\n    this.unsubscribers.push(unsub);\n  }\n\n  getNow() {\n    get(query(this.ref))\n      .then((snapshot) => {\n        this.val = snapshot.val();\n      })\n      .catch(result => console.log(result));\n  }\n\n  detach() {\n    if (this.active) {\n      while (this.unsubscribers.length > 0) {\n        let unsub = this.unsubscribers.pop();\n        unsub();\n      }\n    }\n    this.active = false;\n  }\n}\n\n/**\n * @class DBWriter\n * @desc A DBNode that only writes to the database. \n * When `active = true`, will pass `val` to the database.\n */\nexport class DBWriter extends DBNode {\n  id: number;\n  key?: string;\n  _name: string;\n  _ref: DatabaseReference;\n  _val: any;\n  _active: boolean;\n\n  constructor(params: NodeParams) {\n    super(params);\n  }\n\n  attach() {\n    this.active = true;\n  }\n\n  setVal(x) {\n    this.val = x;\n    if (this.active) {\n      set(this.ref, this.val);\n    }\n  }\n\n  detach() {\n    this.active = false;\n  }\n}\n\n/** Special DBWriter that expects the node to be cleared by the\n * other end upon receipt\n */\nexport class DBWriteBuffer extends DBWriter {\n  id: number;\n  _name: string;\n  _ref: DatabaseReference;\n  _val: any;\n  _active: boolean;\n\n  constructor(params: NodeParams) {\n    super(params);\n  }\n\n  setVal(x) {\n    get(query(this.ref))\n      .then((snapshot) => {\n        if(!snapshot.val()) {\n          console.log(\"overwriting data in buffer\");\n        }\n        super.setVal(x);\n      })\n      .catch(result => console.log(result));\n  }\n}\n\nexport class DBTwoWay extends DBNode {\n  id: number;\n  key?: string;\n  _name: string;\n  _dbref: DatabaseReference;\n  _val: any;\n  _active: boolean;\n\n  constructor(params: NodeParams) {\n    super(params);\n  }\n  \n  attach() {\n    this.active = true;\n    let unsub = onValue(this.ref, (snapshot) => {\n      this.val = snapshot.val();\n      this.emit('change', this.val);\n    });\n    this.unsubscribers.push(unsub);\n  }\n\n  getNow() {\n    get(query(this.ref))\n      .then((snapshot) => {\n        this.val = snapshot.val();\n      })\n      .catch(result => console.log(result));\n  }\n  \n  detach() {\n    if (this.active) {\n      while (this.unsubscribers.length > 0) {\n        let unsub = this.unsubscribers.pop();\n        unsub();\n      }\n    }\n    this.active = false;\n  }\n  \n  setVal(x) {\n    this.val = x;\n    if (this.active) {\n      set(this.ref, this.val);\n    }\n  }\n}\n\nclass DBNodeArray extends EventEmitter {\n  nodes: Array;\n  lengthNode: DBNode;\n  parentNode: DBNode;\n\n  constructor(lengthNode, parentNode, init: any = {}) {\n    super();\n    this.lengthNode = lengthNode;\n    this.parentNode = parentNode;\n    if (init) {\n    } else {\n      this.nodes = [];\n    }\n  }\n\n  get length() { return this.nodes.length; }\n\n  get active() { return (this.lengthNode.active && this.parentNode.active); }\n\n  get ready() { return (this.lengthNode.val > 0 && this.parentNode.val != false); }\n\n  nodeAt(n) {\n    console.log(this.nodes);\n    console.log(\"node at \", n);\n    console.log(this.nodes[n]);\n    return this.nodes[n];\n  }\n\n  pushNode(n) {\n    this.nodes.push(n);\n  }\n\n  popNode() {\n    return this.nodes.pop();\n  }\n}\n\n/**\n * @class `DBListenerArray`\n * @desc Represents a listener to a list of values in the database \n * (generalizes to `DBNodeArray`). Assumes that the data list is\n * structured such that `lengthNode` is a `DBListener` that stores the \n * length of the list, while `parentNode` is a `DBListener` to the parent\n * node of the list. Each item in the list is a child of `parentNode`,\n * which is then stored as a `DBListener` in the array `nodes`.\n */\nexport class DBListenerArray extends DBNodeArray {\n  lengthNode: DBListener;\n  parentNode: DBListener;\n  nodes: Array;\n\n  /**\n  * holds the Unsubscribe functions that are returned by\n  * DB event functions like onValue(...)\n  */\n  unsubscribers: Array;\n\n  constructor(lengthNode: DBListener, parentNode: DBListener) {\n    super(lengthNode, parentNode);\n    this.lengthNode = lengthNode;\n    this.parentNode = parentNode;\n    this.nodes = [];\n    this.unsubscribers = [];\n  }\n\n  /**\n   * @method attach\n   */\n  attach() {\n    this.lengthNode.attach();\n    this.lengthNode.on('change', (val) => {\n        this.emit('ready', this.ready);\n    });\n\n    this.parentNode.attach();\n    this.parentNode.once('change', (val) => {\n      this.emit('ready', this.ready);\n    });\n\n    for (var node of this.nodes) {\n      this.attachChildNode(node);\n    }\n\n    this.unsubscribers.push(\n      onChildAdded(this.parentNode.ref, (snapshot) => {\n        // console.log(\"child added\", snapshot);\n        this.addNode(snapshot.key);\n    }));\n\n    this.unsubscribers.push(\n      onChildChanged(this.parentNode.ref, (snapshot) => {\n        console.log(\"child changed\", snapshot);\n    }));\n\n    this.unsubscribers.push(\n      onChildRemoved(this.parentNode.ref, () => {\n        // console.log(\"child removed\", snapshot);\n        let removed = this.popNode();\n        this.emit('child-removed', removed);\n    }));\n  }\n\n  detach() {\n    if (this.active) {\n      while (this.unsubscribers.length > 0) {\n        let unsub = this.unsubscribers.pop();\n        unsub();\n      }\n    }\n  }\n\n  nodeAt(n: number) {\n    // console.log(this.nodes);\n    // console.log(\"node at \", n);\n    // console.log(this.nodes[n]);\n    return this.nodes[n];\n  }\n\n  /**\n   * Creating a new child node.\n   * @param key \n   */\n  addNode(key: string) {\n    console.log('child key', key);\n    const childRef = child(this.parentNode.ref, key);\n    const childNode = new DBListener({ ref: childRef, key: key, id: this.length });\n    this.attachChildNode(childNode);\n    this.pushNode(childNode);\n    this.emit('child-added', childNode);\n    // this.lengthNode.setVal(this.length);\n  }\n\n  /**\n   * Attaching a child node that was created elsewhere.\n   * Invokes child's `attach()` method and adds event listener\n   * that will emit a `child-change` event.\n   * @param node \n   */\n  attachChildNode(node: DBListener) {\n    node.attach();\n    node.on('change', (val) => {\n      this.emit('child-change', {\n        id: node.id,\n        val: val\n      });\n    });\n  }\n\n  // remNode() {\n  //   const node = this.popNode();\n  //   // remove(node.ref);\n  //   // this.lengthNode.setVal(this.length);\n  // }\n\n  // updateArray(num: number) {\n  //   // this.parentNode.getNow();\n  //   if (num > this.length) {\n  //     let parentKeys = this.parentNode.val;\n  //     // console.log(this.parentNode);\n  //     console.log(parentKeys);\n  //     let childKeys = Object.keys(parentKeys);\n  //     while (this.length  num) {\n  //       this.popNode();\n  //     }\n  //   }\n  //   console.log(this);\n  // }\n\n  toString() {\n    var str = \"\";\n    // str += \"length: \" + this.length + \", \";\n    str += \"[ \\n\";\n    for (var i=0; i ;\n  lengthNode: DBWriter;\n  parentNode: DBWriter;\n\n  constructor(lengthNode, parentNode, init) {\n    super(lengthNode, parentNode, init);\n    if (!init) {\n      this.lengthNode.setVal(0);\n      this.parentNode.setVal(EMPTY_NODE_ARRAY);\n    }\n\n    // console.log(this);\n  }\n\n  addNode(initVal) {\n    const childRef = push(this.parentNode.ref, initVal);\n    const childNode = new DBWriter({ ref: childRef, initVal });\n    childNode.attach();\n    this.pushNode(childNode);\n    this.lengthNode.setVal(this.length);\n  }\n\n  remNode() {\n    const node = this.popNode();\n    remove(node.ref);\n    this.lengthNode.setVal(this.length);\n  }\n\n  updateArray(num, newStates) {\n    if (num > this.length) {\n      while (this.length  num) {\n        this.remNode();\n      }\n    }\n  }\n\n  setNode(i, x) {\n    this.nodes[i].setVal(x);\n  }\n\n}\n\n/**\n * Array of two-way DBNodes where both ends are listening for\n * changes AND may write to the DB -- such as the virtual pedals\n * where both AdaCAD and the Pi/PC can add virtual pedals\n */\nexport class DBTwoWayArray extends DBNodeArray {\n  nodes: Array = [];\n  lengthNode: DBTwoWay;\n  parentNode: DBTwoWay;\n\n  /**\n  * holds the Unsubscribe functions that are returned by\n  * DB event functions like onValue(...)\n  */\n  unsubscribers: Array;\n\n  constructor(lengthNode: DBTwoWay, parentNode: DBTwoWay, init?: Array) {\n    super(lengthNode, parentNode, init);\n    this.unsubscribers = [];\n    if (!init) {\n      this.lengthNode.setVal(0);\n      this.parentNode.setVal(EMPTY_NODE_ARRAY);\n    }\n  }\n\n  addNode(initVal: any) {\n    push(this.parentNode.ref, initVal);\n    // const childNode = new DBTwoWay({ ref: childRef, initVal });\n    // childNode.attach();\n    // this.pushNode(childNode);\n    // this.lengthNode.setVal(this.length);\n    // console.log('child key', key);\n  }\n\n  onNodeAdded(key: string) {\n     const childRef = child(this.parentNode.ref, key);\n     const childNode = new DBTwoWay({ ref: childRef, key: key, id: this.length });\n     this.attachChildNode(childNode);\n     this.pushNode(childNode);\n     this.lengthNode.setVal(this.length);\n     this.emit('child-added', childNode);\n  }\n\n  remNode() {\n    const lastNode = this.nodeAt(this.length-1);\n    remove(lastNode.ref);\n    // this.lengthNode.setVal(this.length);\n  }\n\n  onNodeRemoved() {\n    let removed = this.popNode();\n    this.lengthNode.setVal(this.length);\n    return removed;\n  }\n\n  updateArray(num: number, newStates: Array) {\n    if (num > this.length) {\n      while (this.length  num) {\n        this.remNode();\n      }\n    }\n  }\n\n  setNode(i: number, x: any) {\n    this.nodes[i].setVal(x);\n  }\n\n  /**\n  * @method attach\n  */\n  attach() {\n    this.lengthNode.attach();\n    this.lengthNode.on('change', (val) => {\n        this.emit('ready', this.ready);\n    });\n\n    this.parentNode.attach();\n    this.parentNode.once('change', (val) => {\n      this.emit('ready', this.ready);\n    });\n\n    for (var node of this.nodes) {\n      this.attachChildNode(node);\n    }\n\n    this.unsubscribers.push(\n      onChildAdded(this.parentNode.ref, (snapshot) => {\n        // console.log(\"child added\", snapshot);\n        this.onNodeAdded(snapshot.key);\n    }));\n\n    this.unsubscribers.push(\n      onChildChanged(this.parentNode.ref, (snapshot) => {\n        console.log(\"child changed\", snapshot);\n    }));\n\n    this.unsubscribers.push(\n      onChildRemoved(this.parentNode.ref, () => {\n        // console.log(\"child removed\", snapshot);\n        let removed = this.onNodeRemoved();\n        this.emit('child-removed', removed);\n    }));\n  }\n \n  detach() {\n    if (this.active) {\n      while (this.unsubscribers.length > 0) {\n        let unsub = this.unsubscribers.pop();\n        unsub();\n      }\n    }\n  }\n\n  /**\n  * Attaching a child node that was created elsewhere.\n  * Invokes child's `attach()` method and adds event listener\n  * that will emit a `child-change` event.\n  * @param node \n  */\n  attachChildNode(node: DBListener) {\n    node.attach();\n    node.on('change', (val) => {\n      this.emit('child-change', {\n        id: node.id,\n        val: val\n      });\n    });\n  }\n}\n\n/** special types of DBNodes */\n\n/** @class\n * OnlineStatus representing whether or not the\n * \"host\" device is online. The host device is responsible\n * for keeping the node set to \"true\", while any listener\n * devices check occasionally for the host's status by \n * attempting to set the node to \"false\".\n */\nexport class OnlineStatus extends DBListener {\n  _name: string;\n  _ref: DatabaseReference;\n  _val: boolean;\n  _active: boolean;\n\n  constructor(params) {\n    super(params);\n    this.attach();\n    get(query(this.ref))\n      .then((snapshot) => {\n        this.val = snapshot.val();\n      })\n      .catch(result => console.log(result));\n  }\n\n  checkAlive() {\n    set(this.ref, false)\n      .then(() => { this.emit('set', true); })\n      .catch(() => { this.emit('set', false); });\n  }\n}\n\n\n    \n\n\n\n\n\n\n\n\n\n\n                   \n    \n         results matching \"\"\n        \n    \n    \n        No results matching \"\"\n    \n\n"},"interfaces/DensityUnits.html":{"url":"interfaces/DensityUnits.html","title":"interface - DensityUnits","body":"\n                   \n\n\n\n\n\n\n\n\n\n\n\n\n\n\n  Interfaces\n  \n  DensityUnits\n\n\n\n        \n            Info\n        \n        \n            Source\n        \n\n\n\n    \n        \n            File\n        \n        \n            src/app/core/model/datatypes/selectlists.ts\n        \n\n\n\n\n        \n            Index\n            \n                \n                    \n                        \n                            Properties\n                        \n                    \n                    \n                        \n                            \n                                \n                                        \n                                            value\n                                        \n                                \n                                \n                                        \n                                            viewValue\n                                        \n                                \n                            \n                        \n                    \n                \n            \n        \n\n\n\n            \n                Properties\n                    \n                        \n                                \n                                    \n                                        \n                                        value\n                                            \n                                                \n                                            \n                                        \n                                    \n                                \n                                \n                                    \n                                        value:         string\n\n                                    \n                                \n\n\n                                    \n                                        \n                                            Type :         string\n\n                                        \n                                    \n\n\n\n\n\n                        \n                    \n                    \n                        \n                                \n                                    \n                                        \n                                        viewValue\n                                            \n                                                \n                                            \n                                        \n                                    \n                                \n                                \n                                    \n                                        viewValue:         string\n\n                                    \n                                \n\n\n                                    \n                                        \n                                            Type :         string\n\n                                        \n                                    \n\n\n\n\n\n                        \n                    \n            \n    \n\n\n    \n        export interface LoomTypes {\n    value: string;\n    viewValue: string;\n  }\n  \n  export interface MaterialTypes {\n    value: number;\n    viewValue: string;\n  }\n  \n  export interface DensityUnits {\n    value: string;\n    viewValue: string;\n  }\n  \n  export interface ViewModes {\n    value: string;\n    viewValue: string;\n  }\n  \n  \n  /**\n   * Stores the icons and language for determining different \n   * modes within which the mouse points are handled\n   * @param value - reference \n   * @param viewValue - text shown to users\n   * @param icon\n   * @param children, menu to nest within this\n   * @param selected boolean to show if it is selected\n   */\n  export interface DesignMode {\n    value: string;\n    viewValue: string;\n    icon: string;\n    children: Array;\n    selected: boolean;\n  }\n  \n    \n\n\n\n\n\n\n\n\n\n                   \n    \n         results matching \"\"\n        \n    \n    \n        No results matching \"\"\n    \n\n"},"interfaces/DesignActions.html":{"url":"interfaces/DesignActions.html","title":"interface - DesignActions","body":"\n                   \n\n\n\n\n\n\n\n\n\n\n\n\n\n\n  Interfaces\n  \n  DesignActions\n\n\n\n        \n            Info\n        \n        \n            Source\n        \n\n\n\n    \n        \n            File\n        \n        \n            src/app/mixer/palette/subdraft/subdraft.component.ts\n        \n\n\n\n\n        \n            Index\n            \n                \n                    \n                        \n                            Properties\n                        \n                    \n                    \n                        \n                            \n                                \n                                        \n                                            icon\n                                        \n                                \n                                \n                                        \n                                            value\n                                        \n                                \n                                \n                                        \n                                            viewValue\n                                        \n                                \n                            \n                        \n                    \n                \n            \n        \n\n\n\n            \n                Properties\n                    \n                        \n                                \n                                    \n                                        \n                                        icon\n                                            \n                                                \n                                            \n                                        \n                                    \n                                \n                                \n                                    \n                                        icon:         string\n\n                                    \n                                \n\n\n                                    \n                                        \n                                            Type :         string\n\n                                        \n                                    \n\n\n\n\n\n                        \n                    \n                    \n                        \n                                \n                                    \n                                        \n                                        value\n                                            \n                                                \n                                            \n                                        \n                                    \n                                \n                                \n                                    \n                                        value:         string\n\n                                    \n                                \n\n\n                                    \n                                        \n                                            Type :         string\n\n                                        \n                                    \n\n\n\n\n\n                        \n                    \n                    \n                        \n                                \n                                    \n                                        \n                                        viewValue\n                                            \n                                                \n                                            \n                                        \n                                    \n                                \n                                \n                                    \n                                        viewValue:         string\n\n                                    \n                                \n\n\n                                    \n                                        \n                                            Type :         string\n\n                                        \n                                    \n\n\n\n\n\n                        \n                    \n            \n    \n\n\n    \n        import { Component, OnInit, Input, Output, ViewChild, ElementRef, EventEmitter, HostListener, OnChanges, ChangeDetectionStrategy, SimpleChanges} from '@angular/core';\nimport { Point, Interlacement, Bounds, DraftMap, Draft, LoomSettings } from '../../../core/model/datatypes';\nimport { InkService } from '../../provider/ink.service';\nimport { LayersService } from '../../provider/layers.service';\nimport utilInstance from '../../../core/model/util';\nimport { OperationService } from '../../provider/operation.service';\nimport { TreeService } from '../../provider/tree.service';\nimport { FileService } from '../../../core/provider/file.service';\nimport { ViewportService } from '../../provider/viewport.service';\nimport { MatDialog, MatDialogRef } from '@angular/material/dialog';\nimport { DraftdetailComponent } from '../../modal/draftdetail/draftdetail.component';\nimport { Cell } from '../../../core/model/cell';\nimport { OperationComponent } from '../operation/operation.component';\nimport { WorkspaceService } from '../../../core/provider/workspace.service';\nimport { MaterialsService } from '../../../core/provider/materials.service';\nimport { createDraft, getDraftName, initDraftWithParams, isSet, isUp, warps, wefts } from '../../../core/model/drafts';\n\n\n\n\ninterface DesignActions{\n  value: string;\n  viewValue: string;\n  icon: string;\n}\n\n@Component({\n  selector: 'app-subdraft',\n  templateUrl: './subdraft.component.html',\n  styleUrls: ['./subdraft.component.scss']\n})\n\n\n\nexport class SubdraftComponent implements OnInit {\n\n  @Input()  id: number; //generated by the tree service\n  @Input()  default_cell: number;\n\n\n  @Input()\n  get scale(): number { return this._scale; }\n  set scale(value: number) {\n    this._scale = value;\n    this.rescale();\n  }\n  private _scale:number = 5;\n\n  @Input()\n  get draft(): Draft { return this._draft; }\n  set draft(value: Draft) {\n    this._draft = value;\n    this.drawDraft(value);\n  }\n\n  private _draft:Draft = null;\n\n  @Input()\n  get bounds(): Bounds { return this._bounds; }\n  set bounds(value: Bounds) {\n    this.updateViewport(value);\n    this._bounds = value;\n    ;\n  }\n\n  private _bounds:Bounds = {\n    topleft: {x: 0, y: 0},\n    width: 0, \n    height: 0\n  };\n\n  \n\n  @Output() onSubdraftMove = new EventEmitter (); \n  @Output() onSubdraftDrop = new EventEmitter (); \n  @Output() onSubdraftStart = new EventEmitter (); \n  @Output() onDeleteCalled = new EventEmitter (); \n  @Output() onDuplicateCalled = new EventEmitter (); \n  @Output() onConnectionMade = new EventEmitter (); \n  @Output() onConnectionRemoved = new EventEmitter (); \n  @Output() onDesignAction = new  EventEmitter ();\n  @Output() onConnectionStarted:any = new EventEmitter();\n  @Output() onSubdraftViewChange:any = new EventEmitter();\n  @Output() onNameChange:any = new EventEmitter();\n  @Output() onDraftToPlayer = new EventEmitter();\n\n  @ViewChild('bitmapImage') bitmap: any;\n\n\n\n  canvas: HTMLCanvasElement;\n  cx: any;\n\n  parent_id: number = -1;\n\n  /**\n  * flag to tell if this is in a mode where it is looking foor a connectino\n  */\n  selecting_connection: boolean = false;\n\n\n  /**\n   * hold the top left point as an interlacement, independent of scale\n   */\n  interlacement: Interlacement;\n\n  // private _scale: number; \n\n  ink = 'neq'; //can be or, and, neq, not, splice\n\n  counter:number  =  0; // keeps track of how frequently to call the move functions\n \n  counter_limit: number = 50;  //this sets the threshold for move calls, lower number == more calls\n \n  last_ndx:Interlacement = {i: -1, j:-1, si: -1}; //used to check if we should recalculate a move operation\n\n  moving: boolean  = false;\n \n  disable_drag: boolean = false;\n\n  is_preview: boolean = false;\n \n  zndx = 0;\n\n  has_active_connection: boolean = false;\n\n  set_connectable:boolean = false;\n\n  modal: MatDialogRef;\n\n  draft_visible: boolean = true;\n\n  loom_settings: LoomSettings;\n\n  constructor(private inks: InkService, \n    private layer: LayersService, \n    private ms: MaterialsService, \n    public tree: TreeService,\n    private fs: FileService,\n    private viewport: ViewportService,\n    private dialog: MatDialog,\n    private ws: WorkspaceService) { \n\n      this.zndx = layer.createLayer();\n\n  }\n\n  ngOnInit(){\n\n    if(!this.is_preview) this.parent_id = this.tree.getSubdraftParent(this.id);\n    const tl: Point = this.viewport.getTopLeft();\n    const tl_offset = {x: tl.x + 60, y: tl.y};\n\n\n    if(this.bounds.topleft.x === 0 && this.bounds.topleft.y === 0) this.setPosition(tl_offset);\n    this.interlacement = utilInstance.resolvePointToAbsoluteNdx(this.bounds.topleft, this.scale);\n\n    if(!this.is_preview) this.viewport.addObj(this.id, this.interlacement);\n\n    const draft = this.tree.getDraft(this.id);\n    this.loom_settings = this.tree.getLoomSettings(this.id);\n\n    if(draft !== undefined){\n      this.bounds.width = warps(draft.drawdown) * this.scale;\n      this.bounds.height = wefts(draft.drawdown) * this.scale;\n    }else{\n      this.bounds.width = warps(draft.drawdown) * this.scale;\n      this.bounds.height = wefts(draft.drawdown) * this.scale;\n    }\n\n  }\n\n\n  ngAfterViewInit() {\n\n\n    this.canvas =  document.getElementById(this.id.toString());\n    this.cx = this.canvas.getContext(\"2d\");\n    this.drawDraft(this.draft); //force call here because it likely didn't render previously. \n\n    this.rescale();\n    this.updateViewport(this.bounds);\n\n  }\n\n  sendDraftToPlayer() {\n    this.onDraftToPlayer.emit(this._draft);\n  }\n\n  nameFocusOut(){\n    this.onNameChange.emit(this.id);\n  }\n\n\n  /**\n   * Called when main palette is rescaled and triggers call to rescale this element, and update its position \n   * so it remains at the same coords. \n   * @param scale - the zoom scale of the iterface (e.g. the number of pixels to render each cell)\n   */\n  rescale(){\n\n    \n\n    if(this.draft === null){\n      return;\n    } \n\n    const zoom_factor:number = this.scale/this.default_cell;\n\n    //redraw at scale\n    const container: HTMLElement = document.getElementById('scale-'+this.id.toString());\n   \n    if(container === null) return;\n\n\n    container.style.transformOrigin = 'top left';\n    container.style.transform = 'scale(' + zoom_factor + ')';\n\n   \n    this.bounds.topleft = {\n      x: this.interlacement.j * this.scale,\n      y: this.interlacement.i * this.scale\n    };\n\n    this.bounds.width = warps(this.draft.drawdown) * this.scale;\n    this.bounds.height = wefts(this.draft.drawdown) * this.scale;\n\n  }\n\n  /**called when bounds change, updates the global view port */\n  updateViewport(bounds: Bounds){\n    this.interlacement = utilInstance.resolvePointToAbsoluteNdx(bounds.topleft, this.scale);\n    this.viewport.updatePoint(this.id, this.interlacement);\n\n  }\n\n  /**\n   * updates this components position based on the input component's position\n   * */\n  updatePositionFromParent(parent: OperationComponent){\n\n    if(this.parent_id !== parent.id){\n      console.error(\"attempitng to update subdraft position from non-parent operation\", this.parent_id, parent.id);\n      return;\n    }\n\n    const container =  document.getElementById(\"scale-\"+this.parent_id);\n    this.setPosition({x: parent.bounds.topleft.x, y: parent.bounds.topleft.y + (container.offsetHeight * this.scale/this.default_cell) });\n\n\n  }\n\n\n\n  updateSize(parent: OperationComponent){\n\n    const draft = this.tree.getDraft(this.id);\n\n    this.bounds.width = warps(draft.drawdown) * this.scale;\n    this.bounds.height = wefts(draft.drawdown) * this.scale;\n\n    if(this.parent_id !== parent.id){\n      console.error(\"attempitng to update subdraft position from non-parent operation\", this.parent_id, parent.id);\n      console.log(\"attempitng to update subdraft position from non-parent operation\", this.parent_id, parent.id);\n      return;\n    }\n\n    this.bounds.width = Math.max(parent.bounds.width, this.bounds.width);\n    this.bounds.height = Math.max(parent.bounds.height, this.bounds.height);\n\n  }\n  \n\n\n\n  /**\n   * Called when main palette is rescaled and triggers call to rescale this element, and update its position \n   * so it remains at the same coords. \n   * @param scale - the zoom scale of the iterface (e.g. the number of pixels to render each cell)\n   */\n   rescaleForBitmap(){\n\n    \n    if(this.canvas === undefined) return;\n    const draft = this.tree.getDraft(this.id);\n\n\n    this.canvas.width = warps(draft.drawdown) * this.default_cell;\n    this.canvas.height = wefts(draft.drawdown) * this.default_cell;\n\n    for (let i = 0; i  endPosition.x) return false;\n      if(p.y  endPosition.y) return false;\n\n    \n    return true;\n\n  }\n\n\n/**\n * Takes row/column position in this subdraft and translates it to an absolution position  \n * @param ndx the index\n * @returns the absolute position as nxy\n */\n public resolveNdxToPoint(ndx:Interlacement) : Point{\n  \n  let y = this.bounds.topleft.y + ndx.i * this.scale;\n  let x = this.bounds.topleft.x + ndx.j * this.scale;\n  return {x: x, y:y};\n\n}\n\n/**\n * Takes an absolute coordinate and translates it to the row/column position Relative to this subdraft\n * @param p the screen coordinate\n * @returns the row and column within the draft (i = row, j=col), returns -1 if out of bounds\n */\n  public resolvePointToNdx(p:Point) : Interlacement{\n    const draft = this.tree.getDraft(this.id);\n\n    let i = Math.floor((p.y -this.bounds.topleft.y) / this.scale);\n    let j = Math.floor((p.x - this.bounds.topleft.x) / this.scale);\n\n    if(i = wefts(draft.drawdown)) i = -1;\n    if(j = warps(draft.drawdown)) j = -1;\n\n    return {i: i, j:j, si: i};\n\n  }\n\n\n\n/**\n * takes an absolute reference and returns the value at that cell boolean or null if its unset\n * @param p a point of the absolute poistion of coordinate in question\n * @returns true/false/or null representing the eddle value at this point\n */\n  public resolveToValue(p:Point) : boolean{\n\n    const coords = this.resolvePointToNdx(p);\n\n    if(coords.i  {\n\n    draft = this.tree.getDraft(this.id);\n\n    if(this.canvas === undefined) return;\n    this.cx = this.canvas.getContext(\"2d\");\n   \n    if(draft === null){\n      this.canvas.width = 0;\n      this.canvas.height = 0;\n\n    }else{\n      this.canvas.width = warps(draft.drawdown) * this.default_cell;\n      this.canvas.height = wefts(draft.drawdown) * this.default_cell;\n\n      for (let i = 0; i  {\n\n    this.rescaleForBitmap();\n\n    let b = this.bitmap.nativeElement;\n    let context = b.getContext('2d');\n    const draft = this.tree.getDraft(this.id);\n\n    b.width = (warps(draft.drawdown));\n    b.height = (wefts(draft.drawdown));\n    \n    context.fillStyle = \"white\";\n    context.fillRect(0,0,b.width,b.height);\n    context.drawImage(this.canvas, 0, 0);\n\n    const a = document.createElement('a')\n    return this.fs.saver.bmp(b)\n    .then(href => {\n      a.href =  href;\n      a.download = getDraftName(draft) + \"_bitmap.jpg\";\n      a.click();\n      this.drawDraft(draft);\n\n    });\n    \n\n\n      \n  }\n  \n    async saveAsAda() : Promise{\n      const draft = this.tree.getDraft(this.id);\n\n      const a = document.createElement('a');\n      return this.fs.saver.ada('draft', false, this.scale).then(out => {\n        a.href = \"data:application/json;charset=UTF-8,\" + encodeURIComponent(out.json);\n        a.download = getDraftName(draft) + \".ada\";\n        a.click();\n      }); \n    }\n  \n    async saveAsWif() {\n\n      // const draft = this.tree.getDraft(this.id);\n      // const loom = this.tree.getLoom(this.id);\n\n      \n      \n\n      // const a = document.createElement('a');\n      // return this.fs.saver.wif(draft, loom)\n      // .then(href => {\n      //   a.href = href;\n      //   a.download  = getDraftName(draft) +\".wif\";\n      //   a.click();\n      // });\n    \n    }\n  \n    async saveAsPrint() {\n     \n      let dims = this.scale;\n      let b = this.bitmap.nativeElement;\n      let context = b.getContext('2d');\n\n      const draft = this.tree.getDraft(this.id);\n\n\n      b.width = warps(draft.drawdown) * dims;\n      b.height = wefts(draft.drawdown) * dims;\n      \n      context.fillStyle = \"white\";\n      context.fillRect(0,0,b.width,b.height);\n      \n\n      context.drawImage(this.canvas, 0, 0);\n\n      const a = document.createElement('a')\n      return this.fs.saver.jpg(b)\n        .then(href => {\n          a.href =  href;\n          a.download = getDraftName(draft) + \".jpg\";\n          a.click();\n      \n        });\n    }\n\n    warps(){\n      return warps(this.draft.drawdown);\n    }\n\n    wefts(){\n      return wefts(this.draft.drawdown);\n    }\n\n    finetune(){\n\n      //if this is already open, don't reopen it\n      if(this.modal != undefined && this.modal.componentInstance != null) return;\n      const draft = this.tree.getDraft(this.id);\n      const loom = this.tree.getLoom(this.id);\n      const loom_settings = this.tree.getLoomSettings(this.id);\n\n      this.modal = this.dialog.open(DraftdetailComponent,\n        {disableClose: true,\n          hasBackdrop: false,\n          data: {\n            id: this.id,\n            ink: this.inks.getInk(this.ink).viewValue\n          }\n        });\n\n\n\n        this.modal.afterClosed().subscribe(result => {\n          if(result != null){\n            if(this.parent_id == -1){\n\n              console.log(\"RESULT\", result);\n              //create a new draft here and make sure its assigned\n              //this should be happening directly in the tree, and not here\n              // this.draft = initDraftWithParams({\n              //   id: result.id,\n              //   gen_name: result.gen_name,\n              //   ud_name: result.ud_name,\n              //   drawdown: result.drawdown,\n              //   rowShuttleMapping: result.rowShuttleMapping,\n              //   rowSystemMapping: result.rowSystemMapping,\n              //   colSystemMapping: result.colSystemMapping,\n              //   colShuttleMapping: result.colShuttleMapping\n              // });\n\n              \n              // this.tree.setDraft(this.id, this.draft, this.loom_settings);\n              this.draft = this.tree.getDraft(this.id);\n\n              this.onDesignAction.emit({id: this.id});\n            }\n          }\n        })   \n       }\n\n \n\n\n}\n\n    \n\n\n\n\n\n\n\n\n\n                   \n    \n         results matching \"\"\n        \n    \n    \n        No results matching \"\"\n    \n\n"},"interfaces/DesignMode.html":{"url":"interfaces/DesignMode.html","title":"interface - DesignMode","body":"\n                   \n\n\n\n\n\n\n\n\n\n\n\n\n\n\n  Interfaces\n  \n  DesignMode\n\n\n\n        \n            Info\n        \n        \n            Source\n        \n\n\n\n    \n        \n            File\n        \n        \n            src/app/core/model/datatypes/selectlists.ts\n        \n\n\n            \n                Description\n            \n            \n                Stores the icons and language for determining different\nmodes within which the mouse points are handled\n\n            \n\n\n        \n            Index\n            \n                \n                    \n                        \n                            Properties\n                        \n                    \n                    \n                        \n                            \n                                \n                                        \n                                            children\n                                        \n                                \n                                \n                                        \n                                            icon\n                                        \n                                \n                                \n                                        \n                                            selected\n                                        \n                                \n                                \n                                        \n                                            value\n                                        \n                                \n                                \n                                        \n                                            viewValue\n                                        \n                                \n                            \n                        \n                    \n                \n            \n        \n\n\n\n            \n                Properties\n                    \n                        \n                                \n                                    \n                                        \n                                        children\n                                            \n                                                \n                                            \n                                        \n                                    \n                                \n                                \n                                    \n                                        children:         Array\n\n                                    \n                                \n\n\n                                    \n                                        \n                                            Type :         Array\n\n                                        \n                                    \n\n\n\n\n\n                        \n                    \n                    \n                        \n                                \n                                    \n                                        \n                                        icon\n                                            \n                                                \n                                            \n                                        \n                                    \n                                \n                                \n                                    \n                                        icon:         string\n\n                                    \n                                \n\n\n                                    \n                                        \n                                            Type :         string\n\n                                        \n                                    \n\n\n\n\n\n                        \n                    \n                    \n                        \n                                \n                                    \n                                        \n                                        selected\n                                            \n                                                \n                                            \n                                        \n                                    \n                                \n                                \n                                    \n                                        selected:         boolean\n\n                                    \n                                \n\n\n                                    \n                                        \n                                            Type :         boolean\n\n                                        \n                                    \n\n\n\n\n\n                        \n                    \n                    \n                        \n                                \n                                    \n                                        \n                                        value\n                                            \n                                                \n                                            \n                                        \n                                    \n                                \n                                \n                                    \n                                        value:         string\n\n                                    \n                                \n\n\n                                    \n                                        \n                                            Type :         string\n\n                                        \n                                    \n\n\n\n\n\n                        \n                    \n                    \n                        \n                                \n                                    \n                                        \n                                        viewValue\n                                            \n                                                \n                                            \n                                        \n                                    \n                                \n                                \n                                    \n                                        viewValue:         string\n\n                                    \n                                \n\n\n                                    \n                                        \n                                            Type :         string\n\n                                        \n                                    \n\n\n\n\n\n                        \n                    \n            \n    \n\n\n    \n        export interface LoomTypes {\n    value: string;\n    viewValue: string;\n  }\n  \n  export interface MaterialTypes {\n    value: number;\n    viewValue: string;\n  }\n  \n  export interface DensityUnits {\n    value: string;\n    viewValue: string;\n  }\n  \n  export interface ViewModes {\n    value: string;\n    viewValue: string;\n  }\n  \n  \n  /**\n   * Stores the icons and language for determining different \n   * modes within which the mouse points are handled\n   * @param value - reference \n   * @param viewValue - text shown to users\n   * @param icon\n   * @param children, menu to nest within this\n   * @param selected boolean to show if it is selected\n   */\n  export interface DesignMode {\n    value: string;\n    viewValue: string;\n    icon: string;\n    children: Array;\n    selected: boolean;\n  }\n  \n    \n\n\n\n\n\n\n\n\n\n                   \n    \n         results matching \"\"\n        \n    \n    \n        No results matching \"\"\n    \n\n"},"interfaces/DraftMap.html":{"url":"interfaces/DraftMap.html","title":"interface - DraftMap","body":"\n                   \n\n\n\n\n\n\n\n\n\n\n\n\n\n\n  Interfaces\n  \n  DraftMap\n\n\n\n        \n            Info\n        \n        \n            Source\n        \n\n\n\n    \n        \n            File\n        \n        \n            src/app/core/model/datatypes/drafts.ts\n        \n\n\n            \n                Description\n            \n            \n                this stores a list of drafts created with associated component ids for those drafts,\nor -1 if the component for this draft has not been generated yet.\n\n            \n\n\n        \n            Index\n            \n                \n                    \n                        \n                            Properties\n                        \n                    \n                    \n                        \n                            \n                                \n                                        \n                                            component_id\n                                        \n                                \n                                \n                                        \n                                            draft\n                                        \n                                \n                            \n                        \n                    \n                \n            \n        \n\n\n\n            \n                Properties\n                    \n                        \n                                \n                                    \n                                        \n                                        component_id\n                                            \n                                                \n                                            \n                                        \n                                    \n                                \n                                \n                                    \n                                        component_id:         number\n\n                                    \n                                \n\n\n                                    \n                                        \n                                            Type :         number\n\n                                        \n                                    \n\n\n\n\n\n                        \n                    \n                    \n                        \n                                \n                                    \n                                        \n                                        draft\n                                            \n                                                \n                                            \n                                        \n                                    \n                                \n                                \n                                    \n                                        draft:         any\n\n                                    \n                                \n\n\n                                    \n                                        \n                                            Type :         any\n\n                                        \n                                    \n\n\n\n\n\n                        \n                    \n            \n    \n\n\n    \n        import { Cell } from '../cell';\n\n/*****   OBJECTS/TYPES RELATED TO DRAFTS  *******/\n\n/**\n * Drawdown can be used as shorthand for drafts, which are just 2D arrays of Cells\n */\n export type Drawdown = Array>;\n\n\n /**\n  * stores a drawdown along with broader information a draft such\n  * @param id a unique id to refer to this draft, used for linking the draft to screen components\n  * @param gen_name a automatically generated name for this draft (from parent operation)\n  * @param ud_name a user defined name for this draft, which, if it exists, will be used instead of the generated name\n  * @param drawdown the drawdown/interlacement pattern used in this draft\n  * @param rowShuttleMapping the repeating pattern to use to assign draft rows to shuttles (materials)\n  * @param rowSystemMapping the repeating pattern to use to assign draft rows to systems (structual units like layers for instance)\n  * @param colShuttleMapping the repeating pattern to use to assign draft columns to shuttles (materials)\n  * @param colSystemMapping the repeating pattern to use to assign draft columns to systems (structual units like layers for instance)\n  */\n export interface Draft {\n   id: number,\n   gen_name: string,\n   ud_name: string,\n   drawdown: Drawdown,\n   rowShuttleMapping: Array,\n   rowSystemMapping: Array,\n   colShuttleMapping: Array,\n   colSystemMapping: Array,\n }\n \n /**\n  * represents a location within a draft.\n  * @param i is the row/weft number (0 being at the top of the drawdown)\n  * @param j is the column/warp number (0 being at the far left of the drawdown)\n  * @param si is the location of this cell within the current view (where the view may be hiding some rows)\n  *        this value can be de-indexed to absolute position in the rows using draft.visibleRows array\n  * @example const i: number = draft.visibleRows[si];\n  */\n export interface Interlacement {\n   i: number;  \n   j: number;  \n   si: number; \n }\n \n /**\n  * represents a location within a draft as well as the value to be placed at that location\n  * used by Loom to stage updates before settting them\n  * @param i is the row/weft number (0 being at the top of the drawdown)\n  * @param j is the column/warp number (0 being at the far left of the drawdown)\n  * @param val the value to be assigned at the given location\n  */\n \n export interface InterlacementVal {\n   i: number;  \n   j: number \n   val: boolean; \n }\n \n \n /***** OBJECTS/TYPES RELATED TO MIXER COMPONENTS ****/\n \n /**\n  * this stores a list of drafts created with associated component ids for those drafts, \n  * or -1 if the component for this draft has not been generated yet. \n  */\n export interface DraftMap {\n   component_id: number;\n   draft: any;\n }\n    \n\n\n\n\n\n\n\n\n\n                   \n    \n         results matching \"\"\n        \n    \n    \n        No results matching \"\"\n    \n\n"},"interfaces/DraftNodeProxy.html":{"url":"interfaces/DraftNodeProxy.html","title":"interface - DraftNodeProxy","body":"\n                   \n\n\n\n\n\n\n\n\n\n\n\n\n\n\n  Interfaces\n  \n  DraftNodeProxy\n\n\n\n        \n            Info\n        \n        \n            Source\n        \n\n\n\n    \n        \n            File\n        \n        \n            src/app/core/model/datatypes/files.ts\n        \n\n\n            \n                Description\n            \n            \n                holds data about each draft component in a compressed form\n\n            \n\n\n        \n            Index\n            \n                \n                    \n                        \n                            Properties\n                        \n                    \n                    \n                        \n                            \n                                \n                                        \n                                            draft\n                                        \n                                \n                                \n                                        \n                                            draft_id\n                                        \n                                \n                                \n                                        \n                                            draft_name\n                                        \n                                \n                                \n                                        \n                                            draft_visible\n                                        \n                                \n                                \n                                        \n                                            loom\n                                        \n                                \n                                \n                                        \n                                            loom_settings\n                                        \n                                \n                                \n                                        \n                                            node_id\n                                        \n                                \n                            \n                        \n                    \n                \n            \n        \n\n\n\n            \n                Properties\n                    \n                        \n                                \n                                    \n                                        \n                                        draft\n                                            \n                                                \n                                            \n                                        \n                                    \n                                \n                                \n                                    \n                                        draft:         Draft\n\n                                    \n                                \n\n\n                                    \n                                        \n                                            Type :         Draft\n\n                                        \n                                    \n\n\n\n\n\n                        \n                    \n                    \n                        \n                                \n                                    \n                                        \n                                        draft_id\n                                            \n                                                \n                                            \n                                        \n                                    \n                                \n                                \n                                    \n                                        draft_id:         number\n\n                                    \n                                \n\n\n                                    \n                                        \n                                            Type :         number\n\n                                        \n                                    \n\n\n\n\n\n                        \n                    \n                    \n                        \n                                \n                                    \n                                        \n                                        draft_name\n                                            \n                                                \n                                            \n                                        \n                                    \n                                \n                                \n                                    \n                                        draft_name:         string\n\n                                    \n                                \n\n\n                                    \n                                        \n                                            Type :         string\n\n                                        \n                                    \n\n\n\n\n\n                        \n                    \n                    \n                        \n                                \n                                    \n                                        \n                                        draft_visible\n                                            \n                                                \n                                            \n                                        \n                                    \n                                \n                                \n                                    \n                                        draft_visible:         boolean\n\n                                    \n                                \n\n\n                                    \n                                        \n                                            Type :         boolean\n\n                                        \n                                    \n\n\n\n\n\n                        \n                    \n                    \n                        \n                                \n                                    \n                                        \n                                        loom\n                                            \n                                                \n                                            \n                                        \n                                    \n                                \n                                \n                                    \n                                        loom:         Loom\n\n                                    \n                                \n\n\n                                    \n                                        \n                                            Type :         Loom\n\n                                        \n                                    \n\n\n\n\n\n                        \n                    \n                    \n                        \n                                \n                                    \n                                        \n                                        loom_settings\n                                            \n                                                \n                                            \n                                        \n                                    \n                                \n                                \n                                    \n                                        loom_settings:         LoomSettings\n\n                                    \n                                \n\n\n                                    \n                                        \n                                            Type :         LoomSettings\n\n                                        \n                                    \n\n\n\n\n\n                        \n                    \n                    \n                        \n                                \n                                    \n                                        \n                                        node_id\n                                            \n                                                \n                                            \n                                        \n                                    \n                                \n                                \n                                    \n                                        node_id:         number\n\n                                    \n                                \n\n\n                                    \n                                        \n                                            Type :         number\n\n                                        \n                                    \n\n\n\n\n\n                        \n                    \n            \n    \n\n\n    \n        import { Draft } from './drafts';\nimport { Loom, LoomSettings } from './looms';\nimport { Shuttle } from '../shuttle';\nimport { Note } from '../../provider/notes.service';\nimport { Bounds } from './screenlayout';\n\n/****** OBJECTS/TYPES FOR LOADING AND SAVING FILES *****/\n\n/**\n * holds data about each node/component in a form to easily load.\n * @param node_id the id of this node within the tree\n * @param type the type of node\n * @param bounds the screen position and size data for this node\n */\nexport interface NodeComponentProxy {\n    node_id: number,\n    type: string,\n    bounds: Bounds\n  }\n  \n  /**\n   * stores a sparce version of a tree node for easy reloading\n   * @param node the node id this treenode refers too\n   * @param parent the node id of the parent node for this treenode\n   * @param inputs an array of treenode ids for all values coming into this node\n   * @param outputs an array of treenode ids for all downstream functions \n   */\n   export interface TreeNodeProxy {\n    node: number,\n    parent: number; \n    inputs: Array;\n    outputs: Array; \n   }\n  \n    /**\n    * holds data about each draft component in a compressed form \n    * @param draft_id the draft id associated with this node (if available)\n   * @param draft_visible a boolean to state if this node is visible or not. \n   * @param draft_name a string representing a user defined name\n   * @param draft this will only export if the draft is a seed draft\n   * @param loom this will only export if the draft is a seed draft \n   * @param loom_settings the associated loom settings on this node, if present\n    */\n  \n    export interface DraftNodeProxy {\n      node_id: number;\n      draft_id: number;\n      draft_name: string;\n      draft: Draft;\n      draft_visible: boolean;\n      loom: Loom,\n      loom_settings: LoomSettings;\n    }\n  \n  /**\n    * a sparce form of an operaction component to use for saving\n    * @param node_id the node id this object refers too\n    * @param name the name of the operation at this node\n    * @param params the list of input parameters to this operation\n    * @param inlets the let of inlets and associated values \n    */\n  export interface OpComponentProxy {\n    node_id: number,\n    name: string,\n    params: Array, \n    inlets: Array;\n  }\n  \n  \n   /**\n    * describes the data from the workspace that is saved.\n    */\n   export interface SaveObj {\n    version: string,\n    workspace: any,\n    type: string,\n    nodes: Array,\n    tree: Array,\n    draft_nodes: Array,\n    ops: Array,\n    notes: Array,\n    materials: Array,\n    scale: number\n   }\n  \n  export interface FileObj {\n   version: string,\n   workspace: any,\n   filename: string,\n   nodes: Array,\n   treenodes: Array,\n   draft_nodes: Array,\n   ops: Array\n   scale: number\n  }\n  \n  export interface StatusMessage {\n    id: number,\n    message: string,\n    success: boolean\n  }\n  \n  export interface LoadResponse {\n    data: FileObj,\n    status: number;\n  }\n  \n  export interface Fileloader {\n    ada: (filename: string, data: any) => Promise,\n    //wif: (filename: string, data: any) => Promise,\n    //bmp: (filename: string, data: any) => Promise,\n    //jpg: (filename: string, data: any) => Promise,\n    form: (data: any) => Promise}\n  \n  export interface FileSaver {\n    ada: (type: string, for_timeline:boolean, current_scale: number) => Promise,\n    //wif: (draft: Draft, loom: Loom) => Promise,\n    bmp: (canvas: HTMLCanvasElement) => Promise,\n    jpg: (canvas: HTMLCanvasElement) => Promise\n  }\n    \n\n\n\n\n\n\n\n\n\n                   \n    \n         results matching \"\"\n        \n    \n    \n        No results matching \"\"\n    \n\n"},"interfaces/DraftOperationClassification.html":{"url":"interfaces/DraftOperationClassification.html","title":"interface - DraftOperationClassification","body":"\n                   \n\n\n\n\n\n\n\n\n\n\n\n\n\n\n  Interfaces\n  \n  DraftOperationClassification\n\n\n\n        \n            Info\n        \n        \n            Source\n        \n\n\n\n    \n        \n            File\n        \n        \n            src/app/player/player.service.ts\n        \n\n\n\n\n        \n            Index\n            \n                \n                    \n                        \n                            Properties\n                        \n                    \n                    \n                        \n                            \n                                \n                                        \n                                            category\n                                        \n                                \n                                \n                                        \n                                            dx\n                                        \n                                \n                                \n                                        \n                                            ops\n                                        \n                                \n                            \n                        \n                    \n                \n            \n        \n\n\n\n            \n                Properties\n                    \n                        \n                                \n                                    \n                                        \n                                        category\n                                            \n                                                \n                                            \n                                        \n                                    \n                                \n                                \n                                    \n                                        category:         string\n\n                                    \n                                \n\n\n                                    \n                                        \n                                            Type :         string\n\n                                        \n                                    \n\n\n\n\n\n                        \n                    \n                    \n                        \n                                \n                                    \n                                        \n                                        dx\n                                            \n                                                \n                                            \n                                        \n                                    \n                                \n                                \n                                    \n                                        dx:         string\n\n                                    \n                                \n\n\n                                    \n                                        \n                                            Type :         string\n\n                                        \n                                    \n\n\n\n\n\n                        \n                    \n                    \n                        \n                                \n                                    \n                                        \n                                        ops\n                                            \n                                                \n                                            \n                                        \n                                    \n                                \n                                \n                                    \n                                        ops:         Array\n\n                                    \n                                \n\n\n                                    \n                                        \n                                            Type :         Array\n\n                                        \n                                    \n\n\n\n\n\n                        \n                    \n            \n    \n\n\n    \n        import { Injectable} from '@angular/core';\nimport { EventEmitter } from 'events';\nimport { wefts } from '../core/model/drafts';\nimport { Draft } from '../core/model/datatypes';\nimport { BaseOp, BuildableOperation as GenericOp, \n  TreeOperation as TreeOp,\n  Seed, Pipe, DraftsOptional, AllRequired, getDefaultParams,\n  SingleInlet, OpInput\n} from '../mixer/model/operation';\nimport * as defs from '../mixer/model/op_definitions';\nimport { PlayerOp, playerOpFrom, \n  ChainOp, OpSequencer, PairedOp, PedalOpMapping,\n  makePairedOp, makeChainOp, makeOpSequencer,\n  forward, refresh, reverse\n} from './model/op_mappings';\nimport { PlayerState, WeavingPick, copyState, initState } from './model/state';\nimport { MappingsService } from './provider/mappings.service';\nimport { PedalsService, PedalStatus, Pedal } from './provider/pedals.service';\nimport { SequencerService } from './provider/sequencer.service';\n// import { OperationService } from '../mixer/provider/operation.service';\n\nexport interface DraftOperationClassification {\n  category: string,\n  dx: string,\n  ops: Array \n }\n\ninterface LoomConfig {\n  warps: number,\n  draftTiling: boolean\n}\n\n/**\n * @class PedalConfig\n * @desc OLD, UPDATE THIS ---> \n * Represents a set of two-way bindings between a set of Pedals\n * and a set of (Player)Operations. A pedal can only be bound to one\n * Action (a single Op, a chain of Ops, or to control an OpRoulette)\n * @todo The second restriction may change, it might make sense for pedals to\n * get bound to a sequence of operations.\n */\nclass PedalConfig {\n  // numPedals: number;\n  pedals: Array;\n  ops: Array;\n  availPedals: Array;\n  mapping: PedalOpMapping;\n\n  constructor(pedalArray: Array, loadConfig = false) {\n    this.pedals = pedalArray;\n    this.ops = []\n    this.availPedals = pedalArray.map((p) => p.id);\n    this.mapping = [];\n  }\n\n  get numPedals() {\n    return this.pedals.length;\n  }\n\n  get numMappings() {\n    return Object.entries(this.mapping).length;\n  }\n\n  addPedal(p: Pedal) {\n    // this.pedals.push(p);\n    this.availPedals.push(p.id);\n  }\n\n  remPedal() {\n    // this.pedals.pop();\n    this.availPedals.filter((id) => id != this.pedals.length);\n  }\n\n  addOperation(o: PlayerOp, chain?: boolean) {\n    o.id = this.ops.length;\n    this.ops.push(o);\n    if (chain) {\n      o.chain = chain;\n    }\n    // this.unpairedOps.push(o);\n    // console.log(this.ops);\n  }\n\n  pair(pedalId: number, opName: string) {\n    let o = this.ops.findIndex((op) => op.name == opName);\n    // let thisOp = this.unpairedOps.splice(o, 1);\n    let thisOp = this.ops;\n    this.mapping[pedalId] = makePairedOp(pedalId, thisOp[o]); \n  }\n\n  chain(pedalId: number, opName: string) {\n    let o = this.ops[this.ops.findIndex((op) => op.name == opName)];\n    if (this.pedalIsChained(pedalId)) {\n      let curr_ops = ( this.mapping[pedalId]).ops;\n      this.mapping[pedalId] = makeChainOp(curr_ops.concat([o]), pedalId);\n    } else if (this.pedalIsPaired(pedalId)) {\n      let first_op = ( this.mapping[pedalId]).op;\n      this.mapping[pedalId] = makeChainOp([first_op].concat([o]), pedalId);\n    } else {\n      this.mapping[pedalId] = makeChainOp([o], pedalId);\n    }\n  }\n\n  chainToPedal(pedalId: number, ops: Array) {\n    let op_array = ops.map((name) => this.ops[this.ops.findIndex((op) => op.name == name)]);\n    if (this.pedalIsChained(pedalId)) { \n      // if pedal already has a chain, add ops to the chain\n      let curr_ops = ( this.mapping[pedalId]).ops;\n      this.mapping[pedalId] = makeChainOp(curr_ops.concat(op_array), pedalId);\n    } else if (this.pedalIsPaired(pedalId)) {\n      // if pedal is paired, you can turn it into a chain\n      let first_op = ( this.mapping[pedalId]).op;\n      this.mapping[pedalId] = makeChainOp([first_op].concat(op_array), pedalId);\n    } else {\n      // pedal doesn't have anything mapped, just add a new chain\n      this.mapping[pedalId] = makeChainOp(op_array, pedalId);\n    }\n  }\n\n  // will return true if an op is mapped to a pedal in any way\n  opIsMapped(opName: string): boolean {\n    if (this.mapping.filter((m) => m.name.includes(opName)).length > 0) {\n      return true;\n    } else return false;\n  }\n\n  pedalIsMapped(id: number) {\n    return (this.mapping[id]);\n  }\n\n  pedalIsChained(id: number) {\n    if (this.pedalIsMapped(id) && this.mapping[id].name.startsWith('ch')) { return true; }\n    else {return false; }\n  }\n\n  pedalIsPaired(id: number) {\n    return (this.pedalIsMapped(id) && !this.pedalIsChained(id));\n  }\n\n  unpairPedal(id: number) {\n    console.log(`unpairing pedal ${id}`);\n    // let op = this.pairs[id];\n    // this.unpairedOps.splice(op.id, 0, op);\n    delete this.mapping[id];\n  }\n\n  // unpairOp(name: string) {\n  //   let pid = this.opIsPaired(name);\n  //   this.unpairPedal(pid);\n  // }\n}\n\n/**\n * The Draft Player Service is in charge of updating the the global PlayerState and tracking where the weaver is in the draft.\n */\n@Injectable({\n  providedIn: 'root'\n})\nexport class PlayerService {\n  state: PlayerState;\n  loom: LoomConfig;\n  redraw = new EventEmitter();\n  draftClassification: Array = [];\n\n  constructor(\n    public pedals: PedalsService,\n    public mappings: MappingsService,\n    public seq: SequencerService,\n    // private oss: OperationService\n  ) {\n    // this.draft = null; \n    console.log(\"draft player constructor\");\n    // const startPattern = playerOpFrom(defs.tabby);\n    // console.log(startPattern);\n    // startPattern.perform(nullOpInput).then((result) => {\n    //   console.log(result);\n    //   this.setDraft(result[0]);\n    // });\n\n    this.state = initState();\n    this.state.draft = defs.tabby.perform([1]);\n\n    this.loom = { warps: 2640, draftTiling: true };\n\n    // load the draft progress ops\n    mappings.addOperation(forward);\n    mappings.addOperation(refresh);\n    mappings.addOperation(reverse);\n\n    function addOp(op: GenericOp, params?: Array) {\n      let p_op = params ? playerOpFrom(op, params) : playerOpFrom(op);\n      mappings.addOperation(p_op);\n      return p_op;\n    }\n\n    // load ops from the main mixer\n    const tabby = addOp(defs.tabby);\n    const twill = addOp(defs.twill);\n    const satin = addOp(defs.satin);\n    const waffle = addOp(defs.waffle);\n    const basket = addOp(defs.basket);\n    const rib = addOp(defs.rib);\n    const random = addOp(defs.random);\n    const rotate = addOp(defs.rotate);\n    const invert = addOp(defs.invert);\n    const shiftx = addOp(defs.shiftx);\n    const shifty = addOp(defs.shifty);\n    const slope = addOp(defs.slope);\n    const flipx = addOp(defs.flipx);\n    const flipy = addOp(defs.flipy);\n    const symm = addOp(defs.makesymmetric);\n    const stretch = addOp(defs.stretch);\n    const bindweft = addOp(defs.bindweftfloats);\n    const bindwarp = addOp(defs.bindwarpfloats);\n\n    const tile: PlayerOp = {\n      name: defs.tile.name,\n      perform: (init: PlayerState) => {\n        let res = copyState(init);\n        res.draft = defs.tile.perform([init.draft], [2, 2]);\n        res.row = init.row % wefts(res.draft.drawdown);\n        res.pedal = defs.tile.name;\n        return Promise.resolve(res);\n      }\n    }\n    mappings.addOperation(tile);\n\n    this.draftClassification.push(\n      {category: 'structure',\n      dx: \"0-1 input, 1 output, algorithmically generates weave structures based on parameters\",\n      ops: [tabby, twill, satin, waffle, random]}\n    );\n\n    this.draftClassification.push(\n      { category: 'custom structure',\n        dx: \"custom structures loaded from the Mixer\",\n        ops: []\n      }\n    );\n\n    this.draftClassification.push(\n      {category: 'transformation',\n      dx: \"1 input, 1 output, applies an operation to the input that transforms it in some way\",\n      ops: [invert, flipx, flipy, shiftx, shifty, rotate, slope, stretch, symm, tile, bindwarp, bindweft]}\n    );\n\n    // //test this\n    // console.log(this.oss.getOp('germanify'));\n    // const germanify = this.pedalOps.addOperation(playerOpFromTree( this.oss.getOp('germanify')));\n    \n    console.log('pedal ops added');\n\n    pedals.on('pedal-step', (id) => this.onPedal(id));\n\n    pedals.on('pedal-added', (n) => {\n      if (n == 1) {\n        mappings.pair(0, 'forward');\n        console.log(\"pedals mapping\", mappings);\n      } else if (n == 2) {\n        if (mappings.pedalIsMapped(0)) mappings.unmap(0);\n        mappings[0] = this.seq;\n        mappings[1] = this.seq;\n        this.seq.addPedals(0, 1);\n        console.log(\"pedals mapping\", mappings);\n      }\n    })\n  }\n\n  get readyToWeave() {  // need either one pedal forward or one pedal reverse, in order to progress through draft\n    return (this.pedals.readyToWeave && \n      (this.mappings.opIsMapped('forward') || this.mappings.opIsMapped('reverse') || this.seq.readyToWeave)\n    );\n  }\n\n  /** get whether or not the loom is weaving */\n  get weaving() {\n    return this.pedals.active_draft.val;\n  }\n  get draft() {\n    return this.state.draft;\n  }\n\n  hasCustomStructure(d: Draft): boolean {\n    let ops = this.draftClassification.filter((c) => c.category == \"custom structure\")[0].ops;\n    console.log(ops);\n    if (ops.length == 0) return false;\n    return ops\n      .map((el) => { return el.struct_id == d.id})\n      .reduce((a, b) => { return a || b; });\n  }\n\n  setDraft(d: Draft) {\n    if (!this.hasCustomStructure(d)) {\n      console.log(\"a new structure!\");\n      let structOps = this.draftClassification.filter((c) => c.category == \"custom structure\")[0].ops;\n      let op = this.structureOpFromDraft(d);\n      structOps.push(op);\n      this.mappings.addOperation(op);\n    }\n    this.state.draft = d;\n    this.state.row = 0;\n    // console.log(\"player has active draft\");\n    // console.log(\"draft is \", this.draft);\n    console.log(\"draft set \", this.state);\n  }\n\n  /**\n   * \n   * @param d the Draft to turn into a custom structure Operation\n   */\n  structureOpFromDraft(d: Draft) {\n    let structOp: PlayerOp = {\n      name: d.gen_name,\n      struct_id: d.id,\n      perform: (init: PlayerState) => {\n        let res = copyState(init);\n        res.draft = d;\n        res.row = init.row % wefts(d.drawdown);\n        return Promise.resolve(res);\n      }\n    };\n    return structOp;\n  }\n\n  // e is a string = op.name\n  setPedalOp(e: any, p: Pedal) {\n    console.log(e, p);\n    if (this.mappings.pedalIsPaired(p.id)) {\n      this.mappings.unmap(p.id);\n    }\n    this.mappings.pair(p.id, e);\n    console.log(\"pedals map\", this.mappings);\n  }\n\n  onPedal(id: number) {\n    console.log('player service: pedal ', id);\n    let mapped = this.mappings.getMap(id);\n    // console.log(this.mappings);\n    // console.log(this.seq);\n    if (mapped) {\n      console.log('mapping exists for pedal');\n      mapped.perform(this.state, id)\n      .then((state: PlayerState) => {\n        this.state = copyState(state);\n        console.log(this.state);\n        this.redraw.emit('redraw');\n        if (this.state.weaving) {\n          console.log(\"draft player: sending row\");\n          this.pedals.sendDraftRow(this.currentRow());\n        }\n      });\n    }\n  }\n\n  currentRow() {\n    let {draft, row} = this.state;\n    let draftRow = draft.drawdown[row % wefts(draft.drawdown)];\n    let data = \"\";\n\n    let targetLength = (this.loom.draftTiling ? this.loom.warps : draftRow.length);\n    while (data.length  {\n    //   if (state) {\n    //   }\n    // });\n  }\n}\n\n    \n\n\n\n\n\n\n\n\n\n                   \n    \n         results matching \"\"\n        \n    \n    \n        No results matching \"\"\n    \n\n"},"components/DraftdetailComponent.html":{"url":"components/DraftdetailComponent.html","title":"component - DraftdetailComponent","body":"\n                   \n\n\n\n\n\n  Components\n  \n  DraftdetailComponent\n\n\n\n        \n            Info\n        \n        \n            Source\n        \n        \n            Template\n        \n        \n            Styles\n        \n        \n            DOM Tree\n        \n\n\n\n    \n    File\n\n\n    src/app/mixer/modal/draftdetail/draftdetail.component.ts\n\n\n\n    \n        Description\n    \n    \n        this component initatites the draft viewer with custom options.\na copy of the draft is passed to the window and passed back to the parent on close (or null if changes not saved)\n\n    \n\n\n    \n        Implements\n    \n    \n                    OnInit\n    \n\n\n\n    Metadata\n    \n        \n\n\n\n\n\n\n\n\n\n\n\n            \n                selector\n                app-draftdetail\n            \n\n            \n                styleUrls\n                ./draftdetail.component.scss\n            \n\n\n\n            \n                templateUrl\n                ./draftdetail.component.html\n            \n\n\n\n\n\n\n\n\n        \n    \n\n\n    \n    Index\n    \n        \n                \n                    \n                        Properties\n                    \n                \n                \n                    \n                        \n                            \n                                    Public\n                                dm\n                            \n                            \n                                draft\n                            \n                            \n                                id\n                            \n                            \n                                ink\n                            \n                            \n                                    Public\n                                inks\n                            \n                            \n                                loom\n                            \n                            \n                                loom_settings\n                            \n                            \n                                scrollingSubscription\n                            \n                            \n                                viewonly\n                            \n                            \n                                weaver\n                            \n                            \n                                    Public\n                                ws\n                            \n                        \n                    \n                \n\n                \n                    \n                        Methods\n                    \n                \n                \n                    \n                        \n                            \n                                    Public\n                                inkActionChange\n                            \n                            \n                                ngAfterViewInit\n                            \n                            \n                                ngOnInit\n                            \n                            \n                                numFrames\n                            \n                            \n                                numTreadles\n                            \n                            \n                                    Public\n                                onCancel\n                            \n                            \n                                onNoClick\n                            \n                            \n                                    Public\n                                onSave\n                            \n                            \n                                    Private\n                                onWindowScroll\n                            \n                            \n                                    Public\n                                redraw\n                            \n                            \n                                swapEditingStyle\n                            \n                            \n                                updateSelection\n                            \n                            \n                                warps\n                            \n                            \n                                wefts\n                            \n                            \n                                width\n                            \n                        \n                    \n                \n\n\n\n\n\n        \n    \n\n\n    \n    Constructor\n        \n            \n                \n                    \nconstructor(dialogRef: MatDialogRef, data: any, scroll: ScrollDispatcher, inks: InkService, dm: DesignmodesService, ops: OperationService, ms: MaterialsService, ws: WorkspaceService, tree: TreeService)\n                    \n                \n                        \n                            \n                                Defined in src/app/mixer/modal/draftdetail/draftdetail.component.ts:55\n                            \n                        \n\n                \n                    \n                            \n                                    Parameters :\n                                    \n                                        \n                                            \n                                                Name\n                                                    Type\n                                                Optional\n                                            \n                                        \n                                        \n                                                \n                                                        dialogRef\n                                                  \n                                                        \n                                                                        MatDialogRef\n                                                        \n                                                  \n                                                    \n                                                            No\n                                                    \n                                                    \n                                                \n                                                \n                                                        data\n                                                  \n                                                        \n                                                                        any\n                                                        \n                                                  \n                                                    \n                                                            No\n                                                    \n                                                    \n                                                \n                                                \n                                                        scroll\n                                                  \n                                                        \n                                                                    ScrollDispatcher\n                                                        \n                                                  \n                                                    \n                                                            No\n                                                    \n                                                    \n                                                \n                                                \n                                                        inks\n                                                  \n                                                        \n                                                                        InkService\n                                                        \n                                                  \n                                                    \n                                                            No\n                                                    \n                                                    \n                                                \n                                                \n                                                        dm\n                                                  \n                                                        \n                                                                    DesignmodesService\n                                                        \n                                                  \n                                                    \n                                                            No\n                                                    \n                                                    \n                                                \n                                                \n                                                        ops\n                                                  \n                                                        \n                                                                        OperationService\n                                                        \n                                                  \n                                                    \n                                                            No\n                                                    \n                                                    \n                                                \n                                                \n                                                        ms\n                                                  \n                                                        \n                                                                    MaterialsService\n                                                        \n                                                  \n                                                    \n                                                            No\n                                                    \n                                                    \n                                                \n                                                \n                                                        ws\n                                                  \n                                                        \n                                                                    WorkspaceService\n                                                        \n                                                  \n                                                    \n                                                            No\n                                                    \n                                                    \n                                                \n                                                \n                                                        tree\n                                                  \n                                                        \n                                                                        TreeService\n                                                        \n                                                  \n                                                    \n                                                            No\n                                                    \n                                                    \n                                                \n                                        \n                                    \n                            \n                    \n                \n            \n        \n\n\n\n\n\n\n    \n    \n    \n        Methods\n    \n    \n        \n            \n                \n                    \n                    \n                        Public\n                        inkActionChange\n                        \n                    \n                \n            \n            \n                \n                    \n                    inkActionChange(name: string)\n                \n            \n\n\n            \n                \n                    Defined in src/app/mixer/modal/draftdetail/draftdetail.component.ts:139\n                \n            \n\n\n            \n                \n\n                    \n                        Parameters :\n                        \n                        \n                            \n                                \n                                    Name\n                                    Type\n                                    Optional\n                                \n                            \n                            \n                                \n                                    name\n                                    \n                                                string\n                                    \n\n                                    \n                                        No\n                                    \n\n\n                                \n                            \n                        \n                    \n                    \n                    \n                    \n                        Returns :         void\n\n                    \n                    \n                        \n                    \n                \n            \n        \n    \n    \n        \n            \n                \n                    \n                    \n                        ngAfterViewInit\n                        \n                    \n                \n            \n            \n                \nngAfterViewInit()\n                \n            \n\n\n            \n                \n                    Defined in src/app/mixer/modal/draftdetail/draftdetail.component.ts:127\n                \n            \n\n\n            \n                \n\n                    \n                        Returns :         void\n\n                    \n                \n            \n        \n    \n    \n        \n            \n                \n                    \n                    \n                        ngOnInit\n                        \n                    \n                \n            \n            \n                \nngOnInit()\n                \n            \n\n\n            \n                \n                    Defined in src/app/mixer/modal/draftdetail/draftdetail.component.ts:119\n                \n            \n\n\n            \n                \n                    this handles the case where someone clicks outside of the modal window\n\n\n                    \n                        Returns :         void\n\n                    \n                \n            \n        \n    \n    \n        \n            \n                \n                    \n                    \n                        numFrames\n                        \n                    \n                \n            \n            \n                \nnumFrames()\n                \n            \n\n\n            \n                \n                    Defined in src/app/mixer/modal/draftdetail/draftdetail.component.ts:185\n                \n            \n\n\n            \n                \n\n                    \n                        Returns :         any\n\n                    \n                \n            \n        \n    \n    \n        \n            \n                \n                    \n                    \n                        numTreadles\n                        \n                    \n                \n            \n            \n                \nnumTreadles()\n                \n            \n\n\n            \n                \n                    Defined in src/app/mixer/modal/draftdetail/draftdetail.component.ts:190\n                \n            \n\n\n            \n                \n\n                    \n                        Returns :         any\n\n                    \n                \n            \n        \n    \n    \n        \n            \n                \n                    \n                    \n                        Public\n                        onCancel\n                        \n                    \n                \n            \n            \n                \n                    \n                    onCancel()\n                \n            \n\n\n            \n                \n                    Defined in src/app/mixer/modal/draftdetail/draftdetail.component.ts:159\n                \n            \n\n\n            \n                \n\n                    \n                        Returns :         void\n\n                    \n                \n            \n        \n    \n    \n        \n            \n                \n                    \n                    \n                        onNoClick\n                        \n                    \n                \n            \n            \n                \nonNoClick()\n                \n            \n\n\n            \n                \n                    Defined in src/app/mixer/modal/draftdetail/draftdetail.component.ts:135\n                \n            \n\n\n            \n                \n\n                    \n                        Returns :         void\n\n                    \n                \n            \n        \n    \n    \n        \n            \n                \n                    \n                    \n                        Public\n                        onSave\n                        \n                    \n                \n            \n            \n                \n                    \n                    onSave()\n                \n            \n\n\n            \n                \n                    Defined in src/app/mixer/modal/draftdetail/draftdetail.component.ts:165\n                \n            \n\n\n            \n                \n\n                    \n                        Returns :         void\n\n                    \n                \n            \n        \n    \n    \n        \n            \n                \n                    \n                    \n                        Private\n                        onWindowScroll\n                        \n                    \n                \n            \n            \n                \n                    \n                    onWindowScroll(data: CdkScrollable)\n                \n            \n\n\n            \n                \n                    Defined in src/app/mixer/modal/draftdetail/draftdetail.component.ts:96\n                \n            \n\n\n            \n                \n\n                    \n                        Parameters :\n                        \n                        \n                            \n                                \n                                    Name\n                                    Type\n                                    Optional\n                                \n                            \n                            \n                                \n                                    data\n                                    \n                                            CdkScrollable\n                                    \n\n                                    \n                                        No\n                                    \n\n\n                                \n                            \n                        \n                    \n                    \n                    \n                    \n                        Returns :         void\n\n                    \n                    \n                        \n                    \n                \n            \n        \n    \n    \n        \n            \n                \n                    \n                    \n                        Public\n                        redraw\n                        \n                    \n                \n            \n            \n                \n                    \n                    redraw()\n                \n            \n\n\n            \n                \n                    Defined in src/app/mixer/modal/draftdetail/draftdetail.component.ts:155\n                \n            \n\n\n            \n                \n\n                    \n                        Returns :         void\n\n                    \n                \n            \n        \n    \n    \n        \n            \n                \n                    \n                    \n                        swapEditingStyle\n                        \n                    \n                \n            \n            \n                \nswapEditingStyle()\n                \n            \n\n\n            \n                \n                    Defined in src/app/mixer/modal/draftdetail/draftdetail.component.ts:195\n                \n            \n\n\n            \n                \n\n                    \n                        Returns :         void\n\n                    \n                \n            \n        \n    \n    \n        \n            \n                \n                    \n                    \n                        updateSelection\n                        \n                    \n                \n            \n            \n                \nupdateSelection(event: any)\n                \n            \n\n\n            \n                \n                    Defined in src/app/mixer/modal/draftdetail/draftdetail.component.ts:93\n                \n            \n\n\n            \n                \n\n                    \n                        Parameters :\n                        \n                        \n                            \n                                \n                                    Name\n                                    Type\n                                    Optional\n                                \n                            \n                            \n                                \n                                    event\n                                    \n                                                any\n                                    \n\n                                    \n                                        No\n                                    \n\n\n                                \n                            \n                        \n                    \n                    \n                    \n                    \n                        Returns :         void\n\n                    \n                    \n                        \n                    \n                \n            \n        \n    \n    \n        \n            \n                \n                    \n                    \n                        warps\n                        \n                    \n                \n            \n            \n                \nwarps()\n                \n            \n\n\n            \n                \n                    Defined in src/app/mixer/modal/draftdetail/draftdetail.component.ts:172\n                \n            \n\n\n            \n                \n\n                    \n                        Returns :         any\n\n                    \n                \n            \n        \n    \n    \n        \n            \n                \n                    \n                    \n                        wefts\n                        \n                    \n                \n            \n            \n                \nwefts()\n                \n            \n\n\n            \n                \n                    Defined in src/app/mixer/modal/draftdetail/draftdetail.component.ts:176\n                \n            \n\n\n            \n                \n\n                    \n                        Returns :         any\n\n                    \n                \n            \n        \n    \n    \n        \n            \n                \n                    \n                    \n                        width\n                        \n                    \n                \n            \n            \n                \nwidth()\n                \n            \n\n\n            \n                \n                    Defined in src/app/mixer/modal/draftdetail/draftdetail.component.ts:180\n                \n            \n\n\n            \n                \n\n                    \n                        Returns :         number\n\n                    \n                \n            \n        \n    \n\n    \n    \n    \n        Properties\n    \n    \n        \n            \n                \n                    \n                    \n                            Public\n                        dm\n                        \n                    \n                \n            \n                \n                    \n                        Type :     DesignmodesService\n\n                    \n                \n                    \n                        \n                                Defined in src/app/mixer/modal/draftdetail/draftdetail.component.ts:62\n                        \n                    \n\n\n        \n    \n    \n        \n            \n                \n                    \n                    \n                        draft\n                        \n                    \n                \n            \n                \n                    \n                        Type :         Draft\n\n                    \n                \n                    \n                        \n                                Defined in src/app/mixer/modal/draftdetail/draftdetail.component.ts:41\n                        \n                    \n\n            \n                \n                    a reference to the draft that we're modifying\n\n                \n            \n\n        \n    \n    \n        \n            \n                \n                    \n                    \n                        id\n                        \n                    \n                \n            \n                \n                    \n                        Type :         number\n\n                    \n                \n                    \n                        \n                                Defined in src/app/mixer/modal/draftdetail/draftdetail.component.ts:33\n                        \n                    \n\n\n        \n    \n    \n        \n            \n                \n                    \n                    \n                        ink\n                        \n                    \n                \n            \n                \n                    \n                        Type :         String\n\n                    \n                \n                    \n                        \n                                Defined in src/app/mixer/modal/draftdetail/draftdetail.component.ts:36\n                        \n                    \n\n\n        \n    \n    \n        \n            \n                \n                    \n                    \n                            Public\n                        inks\n                        \n                    \n                \n            \n                \n                    \n                        Type :         InkService\n\n                    \n                \n                    \n                        \n                                Defined in src/app/mixer/modal/draftdetail/draftdetail.component.ts:61\n                        \n                    \n\n\n        \n    \n    \n        \n            \n                \n                    \n                    \n                        loom\n                        \n                    \n                \n            \n                \n                    \n                        Type :         Loom\n\n                    \n                \n                    \n                        \n                                Defined in src/app/mixer/modal/draftdetail/draftdetail.component.ts:48\n                        \n                    \n\n            \n                \n                    The weave Loom object.\n\n                \n            \n\n        \n    \n    \n        \n            \n                \n                    \n                    \n                        loom_settings\n                        \n                    \n                \n            \n                \n                    \n                        Type :         LoomSettings\n\n                    \n                \n                    \n                        \n                                Defined in src/app/mixer/modal/draftdetail/draftdetail.component.ts:50\n                        \n                    \n\n\n        \n    \n    \n        \n            \n                \n                    \n                    \n                        scrollingSubscription\n                        \n                    \n                \n            \n                \n                    \n                        Type :         any\n\n                    \n                \n                    \n                        \n                                Defined in src/app/mixer/modal/draftdetail/draftdetail.component.ts:53\n                        \n                    \n\n\n        \n    \n    \n        \n            \n                \n                    \n                    \n                        viewonly\n                        \n                    \n                \n            \n                \n                    \n                        Type :         boolean\n\n                    \n                \n                \n                    \n                        Default value : false\n                    \n                \n                    \n                        \n                                Defined in src/app/mixer/modal/draftdetail/draftdetail.component.ts:55\n                        \n                    \n\n\n        \n    \n    \n        \n            \n                \n                    \n                    \n                        weaver\n                        \n                    \n                \n            \n                \n                    \n                        Type :     WeaverComponent\n\n                    \n                \n                \n                    \n                        Decorators : \n                        \n                        \n                            @ViewChild('weaver', {read: WeaverComponent, static: true})\n                        \n                    \n                \n                    \n                        \n                                Defined in src/app/mixer/modal/draftdetail/draftdetail.component.ts:30\n                        \n                    \n\n\n        \n    \n    \n        \n            \n                \n                    \n                    \n                            Public\n                        ws\n                        \n                    \n                \n            \n                \n                    \n                        Type :     WorkspaceService\n\n                    \n                \n                    \n                        \n                                Defined in src/app/mixer/modal/draftdetail/draftdetail.component.ts:65\n                        \n                    \n\n\n        \n    \n\n\n\n\n\n    \n        import { Component, HostListener, Inject, OnInit, ViewChild } from '@angular/core';\nimport { MatDialogRef, MAT_DIALOG_DATA } from '@angular/material/dialog';\nimport { Draft, Loom, LoomSettings } from '../../../core/model/datatypes';\nimport { numFrames, numTreadles } from '../../../core/model/looms';\nimport {wefts, warps} from '../../../core/model/drafts'\nimport { CdkScrollable, ScrollDispatcher } from '@angular/cdk/scrolling';\nimport { InkService } from '../../provider/ink.service';\nimport { OperationService } from '../../provider/operation.service';\nimport { DesignmodesService } from '../../../core/provider/designmodes.service';\nimport { WeaverComponent } from '../../../weaver/weaver.component';\nimport { MaterialsService } from '../../../core/provider/materials.service';\nimport { WorkspaceService } from '../../../core/provider/workspace.service';\nimport { from } from 'rxjs';\nimport { TreeService } from '../../provider/tree.service';\n\n\n/**\n * this component initatites the draft viewer with custom options. \n * a copy of the draft is passed to the window and passed back to the parent on close (or null if changes not saved) \n */\n@Component({\n  selector: 'app-draftdetail',\n  templateUrl: './draftdetail.component.html',\n  styleUrls: ['./draftdetail.component.scss']\n})\nexport class DraftdetailComponent implements OnInit {\n\n \n  //the draft view shared by this and weaver\n  @ViewChild('weaver', {read: WeaverComponent, static: true}) weaver: WeaverComponent;\n\n\n  id: number;\n\n\n  ink: String; //the name of the selected ink.\n\n  /**\n   * a reference to the draft that we're modifying\n   */\n  draft:Draft;\n\n\n  /**\n   * The weave Loom object.\n   * @property {Loom}\n   */\n   loom: Loom;\n\n   loom_settings: LoomSettings;\n\n\n  scrollingSubscription: any;\n\n  viewonly: boolean = false;\n\n\n  constructor(private dialogRef: MatDialogRef,\n             @Inject(MAT_DIALOG_DATA) private data: any, \n             private scroll: ScrollDispatcher,\n             public inks: InkService,\n             public dm: DesignmodesService,\n             private ops: OperationService,\n             private ms: MaterialsService,\n             public ws: WorkspaceService,\n             private tree: TreeService) { \n\n              this.scrollingSubscription = this.scroll\n              .scrolled()\n              .subscribe((data: any) => {\n                 this.onWindowScroll(data);\n               });\n\n               this.id = data.id;\n               this.draft = this.tree.getDraft(this.id);\n               this.loom = this.tree.getLoom(this.id);\n               this.loom_settings = this.tree.getLoomSettings(this.id);\n               this.ink = data.ink;\n               this.viewonly = this.tree.hasParent(this.id);\n\n               if(this.loom_settings.type == 'jacquard'){\n                this.dm.selectDesignMode('drawdown', 'drawdown_editing_style')\n              }else{\n                this.dm.selectDesignMode('loom', 'drawdown_editing_style')\n\n               }\n                            \n\n              // this.modal_height = (this.draft.wefts+20) * this.render.getCellDims('base').h;\n\n  }\n\n  updateSelection(event: any){\n  }\n\n  private onWindowScroll(data: CdkScrollable) {\n    const scrollTop = data.measureScrollOffset(\"top\");\n    const scrollLeft = data.measureScrollOffset(\"left\");\n\n    // this.dv.reposition(scrollTop, scrollLeft);\n  }\n\n  /**\n   * this handles the case where someone clicks outside of the modal window \n   * @param $event \n   */\n  // @HostListener('document:click', ['$event']) click($event){\n  //   // here you can hide your menu\n  //   const target: HTMLElement = $event.target;\n  //   const name: string = target.className;\n  //   if(name.includes(\"cdk-overlay-backdrop\")){\n  //       this.onSave();\n  //   }\n  //   console.log(\"anywhere click\", target.className);\n  // }\n\n\n\n  ngOnInit() {\n\n\n  }\n\n  \n\n\n  ngAfterViewInit(){\n\n\n   \n  }\n\n\n  \n  onNoClick(){\n    this.onSave();\n  }\n\n  public inkActionChange(name: string){\n    this.ink = name;\n  }\n\n  // designActionChange(e){\n\n  // const drafts: Array = this.ops.getOp(e).perform([this.draft], []);\n  //       drafts.forEach(draft => {\n  //         this.draft.reload(draft);\n  //         this.dv.redraw({drawdown:true});  \n  //       }); \n  //   this.dv.redraw({\n  //     drawdown: true\n  //   });   \n  // }\n\n  public redraw(){\n    this.weaver.materialChange();\n  }\n\n  public onCancel(){\n    this.scrollingSubscription.unsubscribe();\n    this.weaver.closeAllModals();\n    this.dialogRef.close(null);\n  }\n\n  public onSave(){\n    this.scrollingSubscription.unsubscribe();\n    this.weaver.closeAllModals();\n    this.dialogRef.close(this.draft);\n  }\n\n  //HELPER FUNCTIONS TO AID VARIABLES CALLED FROM HTML\n warps(){\n    return warps(this.draft.drawdown);\n  }\n\n wefts(){\n    return wefts(this.draft.drawdown);\n  }\n\n width(){\n    if(this.loom_settings.units == 'cm') return warps(this.draft.drawdown) / this.loom_settings.epi * 10;\n    else return warps(this.draft.drawdown) / this.loom_settings.epi;\n  }\n\n  numFrames(){\n    const loom = this.tree.getLoom(this.id);\n    return numFrames(loom);\n  }\n  \n  numTreadles(){\n    const loom = this.tree.getLoom(this.id);\n    return numTreadles(loom);\n  }\n\n  swapEditingStyle(){\n    if(this.dm.getSelectedDesignMode('drawdown_editing_style').value === 'drawdown'){\n      this.dm.selectDesignMode('loom', 'drawdown_editing_style')\n    }else{\n      this.dm.selectDesignMode('drawdown', 'drawdown_editing_style')\n    }\n\n  }\n  \n}\n    \n\n    \n        \n\n\n  \n    \n    \n    \n    Fine Tune this Draft\n\n      You are in View Only Mode because this draft has been generated by an operation. In viewonly mode, you may only adjust colors and warp systems and visualize yarn paths. If you want to modify the draft, you must go back to the mixer and duplicate it to remove it from the parent operation\n    \n    \n  \n\n  \n\n\n  \n\n    \n       loom type: {{loom_settings.type}}\n       size: {{warps()}} ends, {{wefts()}} pics\n       width: {{width()}} {{loom_settings.units}}\n       epi: {{loom_settings.epi}}\n       ep10cm: {{loom_settings.epi}}\n      requires {{numFrames()}} frames, {{numTreadles()}} treadles\n      \n         This draft requires more than the {{ws.min_frames}} frames or {{ws.min_treadles}} treadles than you have specified for your loom -->\n     \n\n\n    \n      Using Ink\n      \n        \n          {{i.viewValue}}\n        \n       \n    \n\n    \n      Editing Mode: \n      \n      \n      {{dm.getSelectedDesignMode('drawdown_editing_style').viewValue}}\n\n      \n -->\n\n\n    \n\n    \n                \n                    ./draftdetail.component.scss\n                \n                .draft-detail-modal{\n  display: flex;\n  flex-direction: column;\n}\n\n.toolbars{\n  display: flex;\n  flex: row;\n}\n\n.draft-drawer{\n  background: #3d3d3d;\n}\n\n.draft-detail-body{\n  display: flex;\n  flex-direction: row;\n}\n\n.draft-viewer{\n  overflow: scroll;\n}\n\n.options{\n  margin-left: 18px;\n  width: 200px;\n}\n\n.toggle-row{\n  font-size: .8em;\n}\n\n.titledata{\n  display: flex;\n  flex-direction: column;\n}\n\n.toprow{\n  display: flex;\n  flex-direction: row;\n  line-height: 1em;\n  margin-bottom: 20px;\n}\n\n.ink-block{\n  display: flex;\n  flex-direction: column;\n  width: 42%;\n}\n\n.mat-dialog-title {\n  margin: 0px;\n  display: block;\n}\n\n.error{\n  color: #ff3860;\n}\n\n.viewonly{\n  font-size: .8em;\n}\n\n.weave_stats{\n  display: flex;\n  flex-direction: column;\n}\n\n.draft-detail-footer{\n  width: 80%;\n  font-size: .8em;\n  display: flex;\n  flex-direction: row;\n  justify-content: space-between;\n}\n\n\n\n\n\n    \n\n    \n        \n        \n            \n                Legend\n            \n            \n                Html element\n            \n            \n                Component\n            \n            \n                Html element with directive\n            \n        \n    \n\n    \n\n\n\n\n\n\n        var COMPONENT_TEMPLATE = '                  Fine Tune this Draft      You are in View Only Mode because this draft has been generated by an operation. In viewonly mode, you may only adjust colors and warp systems and visualize yarn paths. If you want to modify the draft, you must go back to the mixer and duplicate it to remove it from the parent operation                         loom type: {{loom_settings.type}}       size: {{warps()}} ends, {{wefts()}} pics       width: {{width()}} {{loom_settings.units}}       epi: {{loom_settings.epi}}       ep10cm: {{loom_settings.epi}}      requires {{numFrames()}} frames, {{numTreadles()}} treadles               This draft requires more than the {{ws.min_frames}} frames or {{ws.min_treadles}} treadles than you have specified for your loom -->               Using Ink                        {{i.viewValue}}                             Editing Mode:                   {{dm.getSelectedDesignMode(\\'drawdown_editing_style\\').viewValue}}       -->'\n    var COMPONENTS = [{'name': 'ConnectionComponent', 'selector': 'app-connection'},{'name': 'DraftdetailComponent', 'selector': 'app-draftdetail'},{'name': 'ImageComponent', 'selector': 'app-image'},{'name': 'InletComponent', 'selector': 'app-inlet'},{'name': 'MixerComponent', 'selector': 'app-mixer'},{'name': 'MixerViewComponent', 'selector': 'app-mixerview'},{'name': 'NoteComponent', 'selector': 'app-note'},{'name': 'OperationComponent', 'selector': 'app-operation'},{'name': 'OpHelpModal', 'selector': 'app-ophelp'},{'name': 'OpsComponent', 'selector': 'app-ops'},{'name': 'OpSequencerComponent', 'selector': 'app-op-sequencer'},{'name': 'PaletteComponent', 'selector': 'app-palette'},{'name': 'ParameterComponent', 'selector': 'app-parameter'},{'name': 'PlayerComponent', 'selector': 'app-player'},{'name': 'SnackbarComponent', 'selector': 'app-snackbar'},{'name': 'SubdraftComponent', 'selector': 'app-subdraft'},{'name': 'VirtualPedalsComponent', 'selector': 'app-virtual-pedals'},{'name': 'WeavingStateComponent', 'selector': 'app-weaving-state'}];\n    var DIRECTIVES = [{'name': 'MarqueeComponent', 'selector': 'app-marquee'},{'name': 'SelectionComponent', 'selector': 'app-selection'}];\n    var ACTUAL_COMPONENT = {'name': 'DraftdetailComponent'};\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n                   \n    \n         results matching \"\"\n        \n    \n    \n        No results matching \"\"\n    \n\n"},"interfaces/DynamicOperation.html":{"url":"interfaces/DynamicOperation.html","title":"interface - DynamicOperation","body":"\n                   \n\n\n\n\n\n\n\n\n\n\n\n\n\n\n  Interfaces\n  \n  DynamicOperation\n\n\n\n        \n            Info\n        \n        \n            Source\n        \n\n\n\n    \n        \n            File\n        \n        \n            src/app/mixer/model/operation.ts\n        \n\n\n            \n                Description\n            \n            \n                A container operation that takes drafts with some parameter assigned to them\n\n            \n\n            \n                Extends\n            \n            \n                        TreeOperation\n            \n\n        \n            Index\n            \n                \n                    \n                        \n                            Properties\n                        \n                    \n                    \n                        \n                            \n                                \n                                        \n                                            displayname\n                                        \n                                \n                                \n                                        \n                                            dx\n                                        \n                                \n                                \n                                        \n                                            dynamic_param_id\n                                        \n                                \n                                \n                                        \n                                            dynamic_param_type\n                                        \n                                \n                                \n                                        \n                                            inlets\n                                        \n                                \n                                \n                                        \n                                            name\n                                        \n                                \n                                \n                                        \n                                            old_names\n                                        \n                                \n                                \n                                        \n                                            params\n                                        \n                                \n                                \n                                        \n                                            perform\n                                        \n                                \n                            \n                        \n                    \n                \n            \n        \n\n\n\n            \n                Properties\n                    \n                        \n                                \n                                    \n                                        \n                                        displayname\n                                            \n                                                \n                                            \n                                        \n                                    \n                                \n                                \n                                    \n                                        displayname:         string\n\n                                    \n                                \n\n\n                                    \n                                        \n                                            Type :         string\n\n                                        \n                                    \n\n\n\n\n\n                        \n                    \n                    \n                        \n                                \n                                    \n                                        \n                                        dx\n                                            \n                                                \n                                            \n                                        \n                                    \n                                \n                                \n                                    \n                                        dx:         string\n\n                                    \n                                \n\n\n                                    \n                                        \n                                            Type :         string\n\n                                        \n                                    \n\n\n\n\n\n                        \n                    \n                    \n                        \n                                \n                                    \n                                        \n                                        dynamic_param_id\n                                            \n                                                \n                                            \n                                        \n                                    \n                                \n                                \n                                    \n                                        dynamic_param_id:         number\n\n                                    \n                                \n\n\n                                    \n                                        \n                                            Type :         number\n\n                                        \n                                    \n\n\n\n\n\n                        \n                    \n                    \n                        \n                                \n                                    \n                                        \n                                        dynamic_param_type\n                                            \n                                                \n                                            \n                                        \n                                    \n                                \n                                \n                                    \n                                        dynamic_param_type:         string\n\n                                    \n                                \n\n\n                                    \n                                        \n                                            Type :         string\n\n                                        \n                                    \n\n\n\n\n\n                        \n                    \n                    \n                        \n                                \n                                    \n                                        \n                                        inlets\n                                            \n                                                \n                                            \n                                        \n                                    \n                                \n                                \n                                    \n                                        inlets:     Array\n\n                                    \n                                \n\n\n                                    \n                                        \n                                            Type :     Array\n\n                                        \n                                    \n\n\n\n\n\n                        \n                    \n                    \n                        \n                                \n                                    \n                                        \n                                        name\n                                            \n                                                \n                                            \n                                        \n                                    \n                                \n                                \n                                    \n                                        name:         string\n\n                                    \n                                \n\n\n                                    \n                                        \n                                            Type :         string\n\n                                        \n                                    \n\n\n\n\n\n                        \n                    \n                    \n                        \n                                \n                                    \n                                        \n                                        old_names\n                                            \n                                                \n                                            \n                                        \n                                    \n                                \n                                \n                                    \n                                        old_names:     Array\n\n                                    \n                                \n\n\n                                    \n                                        \n                                            Type :     Array\n\n                                        \n                                    \n\n\n\n\n\n                        \n                    \n                    \n                        \n                                \n                                    \n                                        \n                                        params\n                                            \n                                                \n                                            \n                                        \n                                    \n                                \n                                \n                                    \n                                        params:         Array\n\n                                    \n                                \n\n\n                                    \n                                        \n                                            Type :         Array\n\n                                        \n                                    \n\n\n\n\n\n                        \n                    \n                    \n                        \n                                \n                                    \n                                        \n                                        perform\n                                            \n                                                \n                                            \n                                        \n                                    \n                                \n                                \n                                    \n                                        perform:         function\n\n                                    \n                                \n\n\n                                    \n                                        \n                                            Type :         function\n\n                                        \n                                    \n\n\n\n\n\n                        \n                    \n            \n    \n\n\n    \n        import { Draft } from '../../core/model/datatypes';\nimport { OperationParam, ParamValue } from './operation/params';\nimport { InletDrafts, OperationInlet } from './operation/inlets';\nimport { BaseOp as Op, BuildableOperation as GenericOp,\n  Seed, Pipe, Merge, Branch, Bus,\n  NoDrafts, NoParams, DraftsOptional, ParamsOptional, AllRequired\n} from './operation/topology';\n\n\n/** ALL OBJECTS/TYPES/UTILITY FUNCTIONS RELATED to OPERATIONS *****************/\n\nexport * from './operation/inlets';\nexport * from './operation/params';\nexport * from './operation/topology';\nexport * as format from './operation/formatting';\n\n/**** USING OPERATIONS with the MIXER TREE **************/\n\n/**\n * this is a type that contains a series of smaller operations held under the banner of one larger operation (such as layer)\n * @param op_name the name of the operation or \"child\" if this is an assignment to an input parameter\n * @param drafts the drafts associated with this input\n * @param params the parameters associated with this operation OR child input\n * @param inlets the index of the inlet for which the draft is entering upon\n */\n export interface OpInput {\n  op_name: string,\n  drafts: Array,\n  params: Array,\n  inlet: number | null\n}\n\nfunction getParamsFromInputs(inputs: Array): Array {\n  let res = inputs.map((el) => el.params).reduce((acc, el) => acc.concat(el), []);\n  console.log(res);\n  return res;\n}\n\nfunction getDraftsFromInputs(inputs: Array): Array {\n  return inputs.map((el) => el.drafts).reduce((acc, ds) => acc.concat(ds), []);\n}\n\nfunction getInletsFromInputs(inputs: Array, n: number): InletDrafts {\n  let res: InletDrafts = {};\n  for (let i = 0; i  el.inlet == i);\n    let inlet_drafts = this_inlet.map((el) => el.drafts);\n    res[i] = inlet_drafts.reduce((acc, ds) => acc.concat(ds), []);\n  }\n  return res;\n}\n  \n/**\n * a standard operation used by the tree\n * @param name the internal name of this opearation (CHANGING THESE WILL BREAK LEGACY VERSIONS)\n * @param displayname the name to show upon this operation in the interface\n * @param dx the description of this operation\n * @param params the parameters associated with this operation\n * @param inets the inlets associated with this operation\n * @param old_names referes to any prior name of this operation to aid when loading old files\n * @param perform a function that executes when this operation is performed, takes a series of inputs and resturns an array of drafts\n */\nexport interface TreeOperation {\n  name: string,\n  displayname: string,\n  dx: string,\n  params: Array,\n  inlets: Array,\n  old_names: Array,\n  perform: (op_inputs: Array) => Promise>\n}\n\nexport function getDefaultParams(op: TreeOperation | GenericOp): Array {\n  if (!op.params || op.params.length == 0) {\n    return [] as Array;\n  }\n  return op.params.map((el) => el.value);\n}\n\n/** \n * @function \n * The big function to pack an operation from op_definitions (working directly with params and drafts)\n * into an operation that the tree can recognize (uses OpInputs)\n */\nexport function buildTreeOp(base: GenericOp): TreeOperation {\n  let tree_op_perform: TreeOperation[\"perform\"];\n  // check what type of op, topologically with I/O (seed, pipe, merge, branch, bus, dynamic)\n    // convert perform args to Array\n  // check for special case of args (no drafts, no params, everything else is ok)\n    // only seed -> no drafts, everything else\n    // pipe/merge/branch/bus -> no params, everything else\n  // check if there is a param or draft in op_inputs[0] to put into an optional arg\n  if (base.classifier.type === 'seed') {\n    if (base.classifier.input_drafts === 'none') {\n      let seedOp = base as Op;\n      tree_op_perform = (op_inputs: Array) => {\n        return Promise.resolve([seedOp.perform(op_inputs[0].params)]);\n      }\n    } else {\n      let seedOp = base as Op;\n      tree_op_perform = (op_inputs: Array) => {\n        console.log(\"op inputs: \", base.name, op_inputs);\n        if (op_inputs.filter((el) => (el.op_name == 'child')).length > 0) {\n          return Promise.resolve([seedOp.perform(op_inputs[0].params, getDraftsFromInputs(op_inputs)[0])]);\n        } else {\n          return Promise.resolve([seedOp.perform(op_inputs[0].params)]);\n        }\n      }\n    }\n  } else if (base.classifier.type === 'pipe') {\n    // let pipeOp;\n    if (base.classifier.input_params === 'none') {\n      let pipeOp = base as Op ;\n      tree_op_perform = (op_inputs: Array) => {\n        if (op_inputs.filter((el) => (el.op_name == 'child')).length == 0) {\n          return Promise.resolve([]) as Promise>;\n        }\n        return Promise.resolve([pipeOp.perform(getDraftsFromInputs(op_inputs)[0])]);\n      }\n    } else if (base.classifier.input_params === 'req') {\n      let pipeOp = base as Op;\n      console.log(\"perform op, pipe all required\");\n      tree_op_perform = (op_inputs: Array) => {\n        if (op_inputs.filter((el) => (el.op_name == 'child')).length == 0) {\n          return Promise.resolve([]) as Promise>;\n        }\n        return Promise.resolve([pipeOp.perform(getDraftsFromInputs(op_inputs)[0], op_inputs[0].params)]);\n      }\n    } else {\n      let pipeOp = base as Op;\n      tree_op_perform = (op_inputs: Array) => {\n        if (op_inputs[0].params.length > 0) {\n          return Promise.resolve([pipeOp.perform(op_inputs[0].drafts[0], op_inputs[0].params)]);\n        } else {\n          return Promise.resolve([pipeOp.perform(op_inputs[0].drafts[0])]);\n        }\n      }\n    }\n  } else if (base.classifier.type === 'merge') {\n    if (base.classifier.input_params === 'none') {\n      let mergeOp = base as Op;\n      if (base.inlets.filter((i) => i.num_drafts != 1).length) {\n        // complex merge, at least one inlet can take multiple drafts, so we have to prepare\n        // the inputs a little differently\n        tree_op_perform = (op_inputs: Array) => {\n          if (op_inputs.filter((el) => (el.op_name == 'child')).length >;\n          }\n          let inputs: InletDrafts = {};\n          for (let i = 0; i  el.inlet == i);\n            let inlet_drafts = this_inlet.map((el) => el.drafts);\n            inputs[i] = inlet_drafts.reduce((acc, ds) => acc.concat(ds), []);\n          }\n          return Promise.resolve([mergeOp.perform(inputs)]);\n        }\n      } else {\n        // simple merge, either 1 multi-inlet or mulitple single inlets\n        tree_op_perform = (op_inputs: Array) => {\n          if (op_inputs.filter((el) => (el.op_name == 'child')).length == 0) {\n            return Promise.resolve([]) as Promise>;\n          }\n          let inputs: Array;\n          inputs = op_inputs.map((el) => el.drafts).reduce((acc, ds) => acc.concat(ds), []);\n          return Promise.resolve([mergeOp.perform(inputs)]);\n        }\n      }\n    } else if (base.classifier.input_params === 'req') {\n      let mergeOp = base as Op;\n      if (base.inlets.length > 1 && base.inlets.filter((i) => i.num_drafts != 1).length) {\n        // complex merge, more than one inlet and at least one inlet can take multiple drafts, so we have to prepare\n        // the inputs a little differently\n        tree_op_perform = (op_inputs: Array) => {\n          if (op_inputs.filter((el) => (el.op_name == 'child')).length == 0) {\n            return Promise.resolve([]) as Promise>;\n          }\n          let inputs: InletDrafts = {};\n          for (let i = 0; i  el.inlet == i);\n            let inlet_drafts = this_inlet.map((el) => el.drafts);\n            inputs[i] = inlet_drafts.reduce((acc, ds) => acc.concat(ds), []);\n          }\n          return Promise.resolve([mergeOp.perform(inputs, op_inputs[0].params)]);\n        }\n      } else {\n        // simple merge, either 1 multi-inlet or multple single inlets\n        tree_op_perform = (op_inputs: Array) => {\n          if (op_inputs.filter((el) => (el.op_name == 'child')).length == 0) {\n            return Promise.resolve([]) as Promise>;\n          }\n          let inputs: Array;\n          inputs = op_inputs.map((el) => el.drafts).reduce((acc, ds) => acc.concat(ds));\n          return Promise.resolve([mergeOp.perform(inputs, op_inputs[0].params)]);\n        }\n      }\n    }\n  } else if (base.classifier.type === 'branch') { \n    if (base.classifier.input_params === 'req') {\n      let branchOp = base as Op;\n      tree_op_perform = (op_inputs: Array) => {\n        return Promise.resolve(branchOp.perform(op_inputs[1].drafts[0], getParamsFromInputs(op_inputs))) as Promise>;\n      }\n    } else {\n      let branchOp = base as Op;\n      tree_op_perform = (op_inputs: Array) => {\n        if (op_inputs.filter((el) => (el.op_name == 'child')).length == 0) {\n          return Promise.resolve([]) as Promise>;\n        }\n        return Promise.resolve(branchOp.perform(op_inputs[1].drafts[0])) as Promise>;\n      }\n    }\n  } else { /** @todo bus ops, but there aren't any operations in this category currently */\n    tree_op_perform = (op_inputs: Array) => {\n      return Promise.resolve([]) as Promise>;\n    }\n  }\n\n  let new_op = {\n    name: base.name,\n    topo_op: base,\n    old_names: base.old_names,\n    inlets: base.inlets,\n    displayname: base.displayname,\n    dx: base.dx,\n    max_inputs: base.max_inputs,\n    params: base.params,\n    perform: tree_op_perform\n  } as TreeOperation;\n\n  return new_op;\n}\n\n/**\n * A container operation that takes drafts with some parameter assigned to them \n * @param name the internal name of this operation used for index (DO NOT CHANGE THESE NAMES!)\n * @param displayname the name to show the viewer \n * @param params the parameters that one can directly input to the parent\n * @param dynamic_param_id which parameter id should we use to dynamically create paramaterized input slots\n * @param dynamic_param_type the type of parameter that we look to generate\n * @param inlets the inlets available for input by default on this operation\n * @param dx the description of this operation\n * @param old_names referes to any prior name of this operation to aid when loading old files\n * @param perform a function that executes when this operation is performed, takes a series of inputs and resturns an array of drafts\n */\nexport interface DynamicOperation extends TreeOperation {\n  name: string,\n  displayname: string,\n  params: Array, \n  dynamic_param_id: number,\n  dynamic_param_type: string,\n  inlets: Array,\n  dx: string,\n  old_names: Array,\n  perform: (op_inputs: Array) => Promise>;\n}\n\n /**\n  * this type is used to classify operations in the dropdown menu\n  * @param category the name of the category for all associated operations (e.g. block, structure)\n  * @param dx a description of that category to show on screen\n  * @param ops an array of all the operations associated with this category\n  */\n export interface OperationClassification {\n  category: string,\n  dx: string,\n  ops: Array \n }\n\n export type Operation = TreeOperation; // default: export operations to interface with Tree\n\n \n    \n\n\n\n\n\n\n\n\n\n                   \n    \n         results matching \"\"\n        \n    \n    \n        No results matching \"\"\n    \n\n"},"interfaces/FileObj.html":{"url":"interfaces/FileObj.html","title":"interface - FileObj","body":"\n                   \n\n\n\n\n\n\n\n\n\n\n\n\n\n\n  Interfaces\n  \n  FileObj\n\n\n\n        \n            Info\n        \n        \n            Source\n        \n\n\n\n    \n        \n            File\n        \n        \n            src/app/core/model/datatypes/files.ts\n        \n\n\n\n\n        \n            Index\n            \n                \n                    \n                        \n                            Properties\n                        \n                    \n                    \n                        \n                            \n                                \n                                        \n                                            draft_nodes\n                                        \n                                \n                                \n                                        \n                                            filename\n                                        \n                                \n                                \n                                        \n                                            nodes\n                                        \n                                \n                                \n                                        \n                                            ops\n                                        \n                                \n                                \n                                        \n                                            scale\n                                        \n                                \n                                \n                                        \n                                            treenodes\n                                        \n                                \n                                \n                                        \n                                            version\n                                        \n                                \n                                \n                                        \n                                            workspace\n                                        \n                                \n                            \n                        \n                    \n                \n            \n        \n\n\n\n            \n                Properties\n                    \n                        \n                                \n                                    \n                                        \n                                        draft_nodes\n                                            \n                                                \n                                            \n                                        \n                                    \n                                \n                                \n                                    \n                                        draft_nodes:         Array\n\n                                    \n                                \n\n\n                                    \n                                        \n                                            Type :         Array\n\n                                        \n                                    \n\n\n\n\n\n                        \n                    \n                    \n                        \n                                \n                                    \n                                        \n                                        filename\n                                            \n                                                \n                                            \n                                        \n                                    \n                                \n                                \n                                    \n                                        filename:         string\n\n                                    \n                                \n\n\n                                    \n                                        \n                                            Type :         string\n\n                                        \n                                    \n\n\n\n\n\n                        \n                    \n                    \n                        \n                                \n                                    \n                                        \n                                        nodes\n                                            \n                                                \n                                            \n                                        \n                                    \n                                \n                                \n                                    \n                                        nodes:         Array\n\n                                    \n                                \n\n\n                                    \n                                        \n                                            Type :         Array\n\n                                        \n                                    \n\n\n\n\n\n                        \n                    \n                    \n                        \n                                \n                                    \n                                        \n                                        ops\n                                            \n                                                \n                                            \n                                        \n                                    \n                                \n                                \n                                    \n                                        ops:         Array\n\n                                    \n                                \n\n\n                                    \n                                        \n                                            Type :         Array\n\n                                        \n                                    \n\n\n\n\n\n                        \n                    \n                    \n                        \n                                \n                                    \n                                        \n                                        scale\n                                            \n                                                \n                                            \n                                        \n                                    \n                                \n                                \n                                    \n                                        scale:         number\n\n                                    \n                                \n\n\n                                    \n                                        \n                                            Type :         number\n\n                                        \n                                    \n\n\n\n\n\n                        \n                    \n                    \n                        \n                                \n                                    \n                                        \n                                        treenodes\n                                            \n                                                \n                                            \n                                        \n                                    \n                                \n                                \n                                    \n                                        treenodes:         Array\n\n                                    \n                                \n\n\n                                    \n                                        \n                                            Type :         Array\n\n                                        \n                                    \n\n\n\n\n\n                        \n                    \n                    \n                        \n                                \n                                    \n                                        \n                                        version\n                                            \n                                                \n                                            \n                                        \n                                    \n                                \n                                \n                                    \n                                        version:         string\n\n                                    \n                                \n\n\n                                    \n                                        \n                                            Type :         string\n\n                                        \n                                    \n\n\n\n\n\n                        \n                    \n                    \n                        \n                                \n                                    \n                                        \n                                        workspace\n                                            \n                                                \n                                            \n                                        \n                                    \n                                \n                                \n                                    \n                                        workspace:         any\n\n                                    \n                                \n\n\n                                    \n                                        \n                                            Type :         any\n\n                                        \n                                    \n\n\n\n\n\n                        \n                    \n            \n    \n\n\n    \n        import { Draft } from './drafts';\nimport { Loom, LoomSettings } from './looms';\nimport { Shuttle } from '../shuttle';\nimport { Note } from '../../provider/notes.service';\nimport { Bounds } from './screenlayout';\n\n/****** OBJECTS/TYPES FOR LOADING AND SAVING FILES *****/\n\n/**\n * holds data about each node/component in a form to easily load.\n * @param node_id the id of this node within the tree\n * @param type the type of node\n * @param bounds the screen position and size data for this node\n */\nexport interface NodeComponentProxy {\n    node_id: number,\n    type: string,\n    bounds: Bounds\n  }\n  \n  /**\n   * stores a sparce version of a tree node for easy reloading\n   * @param node the node id this treenode refers too\n   * @param parent the node id of the parent node for this treenode\n   * @param inputs an array of treenode ids for all values coming into this node\n   * @param outputs an array of treenode ids for all downstream functions \n   */\n   export interface TreeNodeProxy {\n    node: number,\n    parent: number; \n    inputs: Array;\n    outputs: Array; \n   }\n  \n    /**\n    * holds data about each draft component in a compressed form \n    * @param draft_id the draft id associated with this node (if available)\n   * @param draft_visible a boolean to state if this node is visible or not. \n   * @param draft_name a string representing a user defined name\n   * @param draft this will only export if the draft is a seed draft\n   * @param loom this will only export if the draft is a seed draft \n   * @param loom_settings the associated loom settings on this node, if present\n    */\n  \n    export interface DraftNodeProxy {\n      node_id: number;\n      draft_id: number;\n      draft_name: string;\n      draft: Draft;\n      draft_visible: boolean;\n      loom: Loom,\n      loom_settings: LoomSettings;\n    }\n  \n  /**\n    * a sparce form of an operaction component to use for saving\n    * @param node_id the node id this object refers too\n    * @param name the name of the operation at this node\n    * @param params the list of input parameters to this operation\n    * @param inlets the let of inlets and associated values \n    */\n  export interface OpComponentProxy {\n    node_id: number,\n    name: string,\n    params: Array, \n    inlets: Array;\n  }\n  \n  \n   /**\n    * describes the data from the workspace that is saved.\n    */\n   export interface SaveObj {\n    version: string,\n    workspace: any,\n    type: string,\n    nodes: Array,\n    tree: Array,\n    draft_nodes: Array,\n    ops: Array,\n    notes: Array,\n    materials: Array,\n    scale: number\n   }\n  \n  export interface FileObj {\n   version: string,\n   workspace: any,\n   filename: string,\n   nodes: Array,\n   treenodes: Array,\n   draft_nodes: Array,\n   ops: Array\n   scale: number\n  }\n  \n  export interface StatusMessage {\n    id: number,\n    message: string,\n    success: boolean\n  }\n  \n  export interface LoadResponse {\n    data: FileObj,\n    status: number;\n  }\n  \n  export interface Fileloader {\n    ada: (filename: string, data: any) => Promise,\n    //wif: (filename: string, data: any) => Promise,\n    //bmp: (filename: string, data: any) => Promise,\n    //jpg: (filename: string, data: any) => Promise,\n    form: (data: any) => Promise}\n  \n  export interface FileSaver {\n    ada: (type: string, for_timeline:boolean, current_scale: number) => Promise,\n    //wif: (draft: Draft, loom: Loom) => Promise,\n    bmp: (canvas: HTMLCanvasElement) => Promise,\n    jpg: (canvas: HTMLCanvasElement) => Promise\n  }\n    \n\n\n\n\n\n\n\n\n\n                   \n    \n         results matching \"\"\n        \n    \n    \n        No results matching \"\"\n    \n\n"},"interfaces/FileSaver.html":{"url":"interfaces/FileSaver.html","title":"interface - FileSaver","body":"\n                   \n\n\n\n\n\n\n\n\n\n\n\n\n\n\n  Interfaces\n  \n  FileSaver\n\n\n\n        \n            Info\n        \n        \n            Source\n        \n\n\n\n    \n        \n            File\n        \n        \n            src/app/core/model/datatypes/files.ts\n        \n\n\n\n\n        \n            Index\n            \n                \n                    \n                        \n                            Properties\n                        \n                    \n                    \n                        \n                            \n                                \n                                        \n                                            ada\n                                        \n                                \n                                \n                                        \n                                            bmp\n                                        \n                                \n                                \n                                        \n                                            jpg\n                                        \n                                \n                            \n                        \n                    \n                \n            \n        \n\n\n\n            \n                Properties\n                    \n                        \n                                \n                                    \n                                        \n                                        ada\n                                            \n                                                \n                                            \n                                        \n                                    \n                                \n                                \n                                    \n                                        ada:         function\n\n                                    \n                                \n\n\n                                    \n                                        \n                                            Type :         function\n\n                                        \n                                    \n\n\n\n\n\n                        \n                    \n                    \n                        \n                                \n                                    \n                                        \n                                        bmp\n                                            \n                                                \n                                            \n                                        \n                                    \n                                \n                                \n                                    \n                                        bmp:         function\n\n                                    \n                                \n\n\n                                    \n                                        \n                                            Type :         function\n\n                                        \n                                    \n\n\n\n\n\n                        \n                    \n                    \n                        \n                                \n                                    \n                                        \n                                        jpg\n                                            \n                                                \n                                            \n                                        \n                                    \n                                \n                                \n                                    \n                                        jpg:         function\n\n                                    \n                                \n\n\n                                    \n                                        \n                                            Type :         function\n\n                                        \n                                    \n\n\n\n\n\n                        \n                    \n            \n    \n\n\n    \n        import { Draft } from './drafts';\nimport { Loom, LoomSettings } from './looms';\nimport { Shuttle } from '../shuttle';\nimport { Note } from '../../provider/notes.service';\nimport { Bounds } from './screenlayout';\n\n/****** OBJECTS/TYPES FOR LOADING AND SAVING FILES *****/\n\n/**\n * holds data about each node/component in a form to easily load.\n * @param node_id the id of this node within the tree\n * @param type the type of node\n * @param bounds the screen position and size data for this node\n */\nexport interface NodeComponentProxy {\n    node_id: number,\n    type: string,\n    bounds: Bounds\n  }\n  \n  /**\n   * stores a sparce version of a tree node for easy reloading\n   * @param node the node id this treenode refers too\n   * @param parent the node id of the parent node for this treenode\n   * @param inputs an array of treenode ids for all values coming into this node\n   * @param outputs an array of treenode ids for all downstream functions \n   */\n   export interface TreeNodeProxy {\n    node: number,\n    parent: number; \n    inputs: Array;\n    outputs: Array; \n   }\n  \n    /**\n    * holds data about each draft component in a compressed form \n    * @param draft_id the draft id associated with this node (if available)\n   * @param draft_visible a boolean to state if this node is visible or not. \n   * @param draft_name a string representing a user defined name\n   * @param draft this will only export if the draft is a seed draft\n   * @param loom this will only export if the draft is a seed draft \n   * @param loom_settings the associated loom settings on this node, if present\n    */\n  \n    export interface DraftNodeProxy {\n      node_id: number;\n      draft_id: number;\n      draft_name: string;\n      draft: Draft;\n      draft_visible: boolean;\n      loom: Loom,\n      loom_settings: LoomSettings;\n    }\n  \n  /**\n    * a sparce form of an operaction component to use for saving\n    * @param node_id the node id this object refers too\n    * @param name the name of the operation at this node\n    * @param params the list of input parameters to this operation\n    * @param inlets the let of inlets and associated values \n    */\n  export interface OpComponentProxy {\n    node_id: number,\n    name: string,\n    params: Array, \n    inlets: Array;\n  }\n  \n  \n   /**\n    * describes the data from the workspace that is saved.\n    */\n   export interface SaveObj {\n    version: string,\n    workspace: any,\n    type: string,\n    nodes: Array,\n    tree: Array,\n    draft_nodes: Array,\n    ops: Array,\n    notes: Array,\n    materials: Array,\n    scale: number\n   }\n  \n  export interface FileObj {\n   version: string,\n   workspace: any,\n   filename: string,\n   nodes: Array,\n   treenodes: Array,\n   draft_nodes: Array,\n   ops: Array\n   scale: number\n  }\n  \n  export interface StatusMessage {\n    id: number,\n    message: string,\n    success: boolean\n  }\n  \n  export interface LoadResponse {\n    data: FileObj,\n    status: number;\n  }\n  \n  export interface Fileloader {\n    ada: (filename: string, data: any) => Promise,\n    //wif: (filename: string, data: any) => Promise,\n    //bmp: (filename: string, data: any) => Promise,\n    //jpg: (filename: string, data: any) => Promise,\n    form: (data: any) => Promise}\n  \n  export interface FileSaver {\n    ada: (type: string, for_timeline:boolean, current_scale: number) => Promise,\n    //wif: (draft: Draft, loom: Loom) => Promise,\n    bmp: (canvas: HTMLCanvasElement) => Promise,\n    jpg: (canvas: HTMLCanvasElement) => Promise\n  }\n    \n\n\n\n\n\n\n\n\n\n                   \n    \n         results matching \"\"\n        \n    \n    \n        No results matching \"\"\n    \n\n"},"interfaces/Fileloader.html":{"url":"interfaces/Fileloader.html","title":"interface - Fileloader","body":"\n                   \n\n\n\n\n\n\n\n\n\n\n\n\n\n\n  Interfaces\n  \n  Fileloader\n\n\n\n        \n            Info\n        \n        \n            Source\n        \n\n\n\n    \n        \n            File\n        \n        \n            src/app/core/model/datatypes/files.ts\n        \n\n\n\n\n        \n            Index\n            \n                \n                    \n                        \n                            Properties\n                        \n                    \n                    \n                        \n                            \n                                \n                                        \n                                            ada\n                                        \n                                \n                                \n                                        \n                                            form\n                                        \n                                \n                            \n                        \n                    \n                \n            \n        \n\n\n\n            \n                Properties\n                    \n                        \n                                \n                                    \n                                        \n                                        ada\n                                            \n                                                \n                                            \n                                        \n                                    \n                                \n                                \n                                    \n                                        ada:         function\n\n                                    \n                                \n\n\n                                    \n                                        \n                                            Type :         function\n\n                                        \n                                    \n\n\n\n\n\n                        \n                    \n                    \n                        \n                                \n                                    \n                                        \n                                        form\n                                            \n                                                \n                                            \n                                        \n                                    \n                                \n                                \n                                    \n                                        form:         function\n\n                                    \n                                \n\n\n                                    \n                                        \n                                            Type :         function\n\n                                        \n                                    \n\n\n\n\n\n                        \n                    \n            \n    \n\n\n    \n        import { Draft } from './drafts';\nimport { Loom, LoomSettings } from './looms';\nimport { Shuttle } from '../shuttle';\nimport { Note } from '../../provider/notes.service';\nimport { Bounds } from './screenlayout';\n\n/****** OBJECTS/TYPES FOR LOADING AND SAVING FILES *****/\n\n/**\n * holds data about each node/component in a form to easily load.\n * @param node_id the id of this node within the tree\n * @param type the type of node\n * @param bounds the screen position and size data for this node\n */\nexport interface NodeComponentProxy {\n    node_id: number,\n    type: string,\n    bounds: Bounds\n  }\n  \n  /**\n   * stores a sparce version of a tree node for easy reloading\n   * @param node the node id this treenode refers too\n   * @param parent the node id of the parent node for this treenode\n   * @param inputs an array of treenode ids for all values coming into this node\n   * @param outputs an array of treenode ids for all downstream functions \n   */\n   export interface TreeNodeProxy {\n    node: number,\n    parent: number; \n    inputs: Array;\n    outputs: Array; \n   }\n  \n    /**\n    * holds data about each draft component in a compressed form \n    * @param draft_id the draft id associated with this node (if available)\n   * @param draft_visible a boolean to state if this node is visible or not. \n   * @param draft_name a string representing a user defined name\n   * @param draft this will only export if the draft is a seed draft\n   * @param loom this will only export if the draft is a seed draft \n   * @param loom_settings the associated loom settings on this node, if present\n    */\n  \n    export interface DraftNodeProxy {\n      node_id: number;\n      draft_id: number;\n      draft_name: string;\n      draft: Draft;\n      draft_visible: boolean;\n      loom: Loom,\n      loom_settings: LoomSettings;\n    }\n  \n  /**\n    * a sparce form of an operaction component to use for saving\n    * @param node_id the node id this object refers too\n    * @param name the name of the operation at this node\n    * @param params the list of input parameters to this operation\n    * @param inlets the let of inlets and associated values \n    */\n  export interface OpComponentProxy {\n    node_id: number,\n    name: string,\n    params: Array, \n    inlets: Array;\n  }\n  \n  \n   /**\n    * describes the data from the workspace that is saved.\n    */\n   export interface SaveObj {\n    version: string,\n    workspace: any,\n    type: string,\n    nodes: Array,\n    tree: Array,\n    draft_nodes: Array,\n    ops: Array,\n    notes: Array,\n    materials: Array,\n    scale: number\n   }\n  \n  export interface FileObj {\n   version: string,\n   workspace: any,\n   filename: string,\n   nodes: Array,\n   treenodes: Array,\n   draft_nodes: Array,\n   ops: Array\n   scale: number\n  }\n  \n  export interface StatusMessage {\n    id: number,\n    message: string,\n    success: boolean\n  }\n  \n  export interface LoadResponse {\n    data: FileObj,\n    status: number;\n  }\n  \n  export interface Fileloader {\n    ada: (filename: string, data: any) => Promise,\n    //wif: (filename: string, data: any) => Promise,\n    //bmp: (filename: string, data: any) => Promise,\n    //jpg: (filename: string, data: any) => Promise,\n    form: (data: any) => Promise}\n  \n  export interface FileSaver {\n    ada: (type: string, for_timeline:boolean, current_scale: number) => Promise,\n    //wif: (draft: Draft, loom: Loom) => Promise,\n    bmp: (canvas: HTMLCanvasElement) => Promise,\n    jpg: (canvas: HTMLCanvasElement) => Promise\n  }\n    \n\n\n\n\n\n\n\n\n\n                   \n    \n         results matching \"\"\n        \n    \n    \n        No results matching \"\"\n    \n\n"},"interfaces/IOTuple.html":{"url":"interfaces/IOTuple.html","title":"interface - IOTuple","body":"\n                   \n\n\n\n\n\n\n\n\n\n\n\n\n\n\n  Interfaces\n  \n  IOTuple\n\n\n\n        \n            Info\n        \n        \n            Source\n        \n\n\n\n    \n        \n            File\n        \n        \n            src/app/core/model/datatypes/tree.ts\n        \n\n\n            \n                Description\n            \n            \n                a type to store input and output information for nodes that takes multiple node inputs and outputs into account.\neach node stores the node it gets as input and output and the inlet/outlet that node enter into on itself.\nconnections will have inlet/outlet indexes of 0, 0 (they cannot connect ot multiple things)\ndrafts will have inset/outout indexes of 0, 0 (they can only have one parent)\nops will have multiple inlets and outlets. For example, an input of (2, 1) means that treenode 2 is connected to inlet 1.\n\n            \n\n\n        \n            Index\n            \n                \n                    \n                        \n                            Properties\n                        \n                    \n                    \n                        \n                            \n                                \n                                        \n                                            ndx\n                                        \n                                \n                                \n                                        \n                                            tn\n                                        \n                                \n                            \n                        \n                    \n                \n            \n        \n\n\n\n            \n                Properties\n                    \n                        \n                                \n                                    \n                                        \n                                        ndx\n                                            \n                                                \n                                            \n                                        \n                                    \n                                \n                                \n                                    \n                                        ndx:         number\n\n                                    \n                                \n\n\n                                    \n                                        \n                                            Type :         number\n\n                                        \n                                    \n\n\n\n\n\n                        \n                    \n                    \n                        \n                                \n                                    \n                                        \n                                        tn\n                                            \n                                                \n                                            \n                                        \n                                    \n                                \n                                \n                                    \n                                        tn:         TreeNode\n\n                                    \n                                \n\n\n                                    \n                                        \n                                            Type :         TreeNode\n\n                                        \n                                    \n\n\n\n\n\n                        \n                    \n            \n    \n\n\n    \n        import { ViewRef } from '@angular/core';\nimport { ConnectionComponent } from \"../../../mixer/palette/connection/connection.component\";\nimport { OperationComponent } from \"../../../mixer/palette/operation/operation.component\";\nimport { SubdraftComponent } from \"../../../mixer/palette/subdraft/subdraft.component\";\n\nimport { Draft } from './drafts';\nimport { Loom, LoomSettings } from './looms';\n\n/****************** OBJECTS/TYPES RELATED to OPERATION TREE *****************/\n\n/**\n * this stores a reference to a component on the palette with its id and some\n * @param type is the type of component'\n * @param view_id is ndx to reference to this object in the ViewComponentRef (for deleting)\n * @param id is a unique id linked forever to this component \n * @param component is a reference to the component object\n * @param dirty describes if this needs to be recalcuated or redrawn \n */\n type BaseNode = {\n    type: 'draft' | 'op' | 'cxn',\n    ref: ViewRef,\n    id: number, //this will be unique for every instance\n    component: SubdraftComponent | OperationComponent | ConnectionComponent,\n    dirty: boolean\n  }\n  \n  \n  /**\n   * an OpNode is an extension of BaseNode that includes additional params\n   * @param name the name of the operation at this node\n   * @param params an array of the current param values at this node\n   * @param inlets an array of the inlet values at this node\n   */\n  export type OpNode = BaseNode & {\n    name: string,\n    params: Array\n    inlets: Array;\n   }\n  \n  \n   /**\n   * a DraftNode is an extension of BaseNode that includes additional params\n   * @param draft the active draft at this node\n   * @param loom the loom associated with the draft at this node\n   * @param loom_settings the settings associted with the loom at this node\n   */\n   export type DraftNode = BaseNode & {\n    draft: Draft,\n    loom: Loom,\n    loom_settings: LoomSettings\n   }\n  \n  \n  /**\n   * Allows one to use Node as shorthand for any of these types of nodes\n   */\n   export type Node = BaseNode | OpNode | DraftNode;\n  \n  \n   /**\n    * a type to store input and output information for nodes that takes multiple node inputs and outputs into account.\n    * each node stores the node it gets as input and output and the inlet/outlet that node enter into on itself. \n    * connections will have inlet/outlet indexes of 0, 0 (they cannot connect ot multiple things)\n    * drafts will have inset/outout indexes of 0, 0 (they can only have one parent)\n    * ops will have multiple inlets and outlets. For example, an input of (2, 1) means that treenode 2 is connected to inlet 1. \n    * @param treenode - the treenode that this input or output goes towards\n    * @param ndx - which ndx on the said treenodes does this connect to specifically\n    */\n   export interface IOTuple {\n     tn: TreeNode,\n     ndx: number\n   }\n  \n  /**\n   * A tree node stores relationships between the components created by operations\n    * @param node: is a reference to the node object stored in the tree. \n    * @param parent links to the treenode that \"created\" this node or null if it was created by the user \n    * @param inputs a list of TreeNodes that are used as input to this TreeNode with an idex to which input they belong to\n    * @param outputs a list of TreeNodes created by this node or specified by the user\n    * Rules: \n    *   Operations can have many inputs and many outputs \n    *   Subdrafts can only have one input and one output (for now)\n    *   \n  */\nexport interface TreeNode {\n    node: Node,\n    parent: TreeNode,\n    inputs: Array,\n    outputs: Array\n}\n    \n\n\n\n\n\n\n\n\n\n                   \n    \n         results matching \"\"\n        \n    \n    \n        No results matching \"\"\n    \n\n"},"components/ImageComponent.html":{"url":"components/ImageComponent.html","title":"component - ImageComponent","body":"\n                   \n\n\n\n\n\n  Components\n  \n  ImageComponent\n\n\n\n        \n            Info\n        \n        \n            Source\n        \n        \n            Template\n        \n        \n            Styles\n        \n        \n            DOM Tree\n        \n\n\n\n    \n    File\n\n\n    src/app/mixer/palette/image/image.component.ts\n\n\n\n\n\n    \n        Implements\n    \n    \n                    OnInit\n    \n\n\n\n    Metadata\n    \n        \n\n\n\n\n\n\n\n\n\n\n\n            \n                selector\n                app-image\n            \n\n            \n                styleUrls\n                ./image.component.scss\n            \n\n\n\n            \n                templateUrl\n                ./image.component.html\n            \n\n\n\n\n\n\n\n\n        \n    \n\n\n    \n    Index\n    \n        \n\n                \n                    \n                        Methods\n                    \n                \n                \n                    \n                        \n                            \n                                ngOnInit\n                            \n                        \n                    \n                \n\n\n\n\n\n        \n    \n\n\n    \n    Constructor\n        \n            \n                \n                    \nconstructor()\n                    \n                \n                        \n                            \n                                Defined in src/app/mixer/palette/image/image.component.ts:8\n                            \n                        \n\n            \n        \n\n\n\n\n\n\n    \n    \n    \n        Methods\n    \n    \n        \n            \n                \n                    \n                    \n                        ngOnInit\n                        \n                    \n                \n            \n            \n                \nngOnInit()\n                \n            \n\n\n            \n                \n                    Defined in src/app/mixer/palette/image/image.component.ts:12\n                \n            \n\n\n            \n                \n\n                    \n                        Returns :         void\n\n                    \n                \n            \n        \n    \n\n\n\n\n\n    \n        import { Component, OnInit } from '@angular/core';\n\n@Component({\n  selector: 'app-image',\n  templateUrl: './image.component.html',\n  styleUrls: ['./image.component.scss']\n})\nexport class ImageComponent implements OnInit {\n\n  constructor() { }\n\n  ngOnInit() {\n  }\n\n}\n\n    \n\n    \n        \n    \n\n    \n    \n        colortable\n        number of drafts/color groups\n    \n\n    \n\n    \n                \n                    ./image.component.scss\n                \n                \n    \n\n    \n        \n        \n            \n                Legend\n            \n            \n                Html element\n            \n            \n                Component\n            \n            \n                Html element with directive\n            \n        \n    \n\n    \n\n\n\n\n\n\n        var COMPONENT_TEMPLATE = '                    colortable        number of drafts/color groups    '\n    var COMPONENTS = [{'name': 'ConnectionComponent', 'selector': 'app-connection'},{'name': 'DraftdetailComponent', 'selector': 'app-draftdetail'},{'name': 'ImageComponent', 'selector': 'app-image'},{'name': 'InletComponent', 'selector': 'app-inlet'},{'name': 'MixerComponent', 'selector': 'app-mixer'},{'name': 'MixerViewComponent', 'selector': 'app-mixerview'},{'name': 'NoteComponent', 'selector': 'app-note'},{'name': 'OperationComponent', 'selector': 'app-operation'},{'name': 'OpHelpModal', 'selector': 'app-ophelp'},{'name': 'OpsComponent', 'selector': 'app-ops'},{'name': 'OpSequencerComponent', 'selector': 'app-op-sequencer'},{'name': 'PaletteComponent', 'selector': 'app-palette'},{'name': 'ParameterComponent', 'selector': 'app-parameter'},{'name': 'PlayerComponent', 'selector': 'app-player'},{'name': 'SnackbarComponent', 'selector': 'app-snackbar'},{'name': 'SubdraftComponent', 'selector': 'app-subdraft'},{'name': 'VirtualPedalsComponent', 'selector': 'app-virtual-pedals'},{'name': 'WeavingStateComponent', 'selector': 'app-weaving-state'}];\n    var DIRECTIVES = [{'name': 'MarqueeComponent', 'selector': 'app-marquee'},{'name': 'SelectionComponent', 'selector': 'app-selection'}];\n    var ACTUAL_COMPONENT = {'name': 'ImageComponent'};\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n                   \n    \n         results matching \"\"\n        \n    \n    \n        No results matching \"\"\n    \n\n"},"interfaces/Ink.html":{"url":"interfaces/Ink.html","title":"interface - Ink","body":"\n                   \n\n\n\n\n\n\n\n\n\n\n\n\n\n\n  Interfaces\n  \n  Ink\n\n\n\n        \n            Info\n        \n        \n            Source\n        \n\n\n\n    \n        \n            File\n        \n        \n            src/app/mixer/provider/ink.service.ts\n        \n\n\n\n\n        \n            Index\n            \n                \n                    \n                        \n                            Properties\n                        \n                    \n                    \n                        \n                            \n                                \n                                        \n                                            dx\n                                        \n                                \n                                \n                                        \n                                            icon\n                                        \n                                \n                                \n                                        \n                                            selected\n                                        \n                                \n                                \n                                        \n                                            uses_mask\n                                        \n                                \n                                \n                                        \n                                            value\n                                        \n                                \n                                \n                                        \n                                            viewValue\n                                        \n                                \n                            \n                        \n                    \n                \n            \n        \n\n\n\n            \n                Properties\n                    \n                        \n                                \n                                    \n                                        \n                                        dx\n                                            \n                                                \n                                            \n                                        \n                                    \n                                \n                                \n                                    \n                                        dx:         string\n\n                                    \n                                \n\n\n                                    \n                                        \n                                            Type :         string\n\n                                        \n                                    \n\n\n\n\n\n                        \n                    \n                    \n                        \n                                \n                                    \n                                        \n                                        icon\n                                            \n                                                \n                                            \n                                        \n                                    \n                                \n                                \n                                    \n                                        icon:         string\n\n                                    \n                                \n\n\n                                    \n                                        \n                                            Type :         string\n\n                                        \n                                    \n\n\n\n\n\n                        \n                    \n                    \n                        \n                                \n                                    \n                                        \n                                        selected\n                                            \n                                                \n                                            \n                                        \n                                    \n                                \n                                \n                                    \n                                        selected:         boolean\n\n                                    \n                                \n\n\n                                    \n                                        \n                                            Type :         boolean\n\n                                        \n                                    \n\n\n\n\n\n                        \n                    \n                    \n                        \n                                \n                                    \n                                        \n                                        uses_mask\n                                            \n                                                \n                                            \n                                        \n                                    \n                                \n                                \n                                    \n                                        uses_mask:         boolean\n\n                                    \n                                \n\n\n                                    \n                                        \n                                            Type :         boolean\n\n                                        \n                                    \n\n\n\n\n\n                        \n                    \n                    \n                        \n                                \n                                    \n                                        \n                                        value\n                                            \n                                                \n                                            \n                                        \n                                    \n                                \n                                \n                                    \n                                        value:         string\n\n                                    \n                                \n\n\n                                    \n                                        \n                                            Type :         string\n\n                                        \n                                    \n\n\n\n\n\n                        \n                    \n                    \n                        \n                                \n                                    \n                                        \n                                        viewValue\n                                            \n                                                \n                                            \n                                        \n                                    \n                                \n                                \n                                    \n                                        viewValue:         string\n\n                                    \n                                \n\n\n                                    \n                                        \n                                            Type :         string\n\n                                        \n                                    \n\n\n\n\n\n                        \n                    \n            \n    \n\n\n    \n        import { Injectable } from '@angular/core';\n\n\n\ninterface Ink{\n  value: string;\n  viewValue: string;\n  dx: string;\n  icon: string;\n  selected: boolean;\n  uses_mask: boolean;\n}\n\n\n@Injectable({\n  providedIn: 'root'\n})\nexport class InkService {\n  private inks: Array;\n  private selected: Ink;\n\n\n  constructor() { \n\n\n    this.inks = [\n      {value: 'neq', viewValue: 'Reversing Ink', dx: \"REVERSING INK compares this pattern with what is underneight and draws black square when they are not equal\", icon: \"fas fa-adjust\", selected: false, uses_mask:false},\n      {value: 'up', viewValue: 'Setting Ink', dx: \"SETTING INK sets this pattern within the draft no matter what is under it\", icon: \"fas fa-square\",  selected: false, uses_mask:false},\n      {value: 'down', viewValue: 'Erasing Ink', dx: \"ERASING INK places all the heddle downs atop the draft underneith it\", icon: \"far fa-square\",  selected: false, uses_mask:false},\n      {value: 'unset', viewValue: 'Removing Ink', dx: \"REMOVING INK removes the use of this heddle in the draft (for shape and inlay weaving)\", icon: \"fas fa-times\", selected: false, uses_mask:false},\n      {value: 'and', viewValue: 'Masking Ink', dx: \"MASKING INK only reveals bottom pattern in areas where this pattern is black\", icon: \"fas fa-mask\", selected: false, uses_mask:true},\n     {value: 'or', viewValue: 'Overlaying Ink', dx: \"OVERLAYING INK copies all black pattern cells atop the draft\", icon: \"fas fa-plus\", selected: false, uses_mask:false}\n    ];\n  \n    this.select('neq');\n\n    \n  \n  }\n\n  getInks():Array{\n    return this.inks;\n  }\n\n  selectedHasMask():boolean{\n    const mode:Ink = this.getInk(this.getSelected());\n    return mode.uses_mask;\n  }\n\n  /**\n   * A function to retreive an ink by name. \n   * @param name the name of the ink we're looking to retreive\n   * @returns the Ink associated with that name, or null if nothing was found\n   */\n\n   getInk(name: string): Ink {\n    let found: Ink = null;\n \n    this.inks.forEach( ink => {\n       if(ink.value === name) found =  ink;\n    });\n    return found;\n   }\n \n   /**\n    * sets false to the selection parameter on all the modes. \n    */\n   clearSelection(){\n     this.selected = null\n   }\n \n /**\n  * clears previous selections and selects ink associated with name\n  * @param name a string corresponding to the name of this ink\n  * @returns boolean cooresponding to whether or not a selection was made \n  */\n   select(name: string): boolean{\n \n     let found: boolean = false;\n     this.clearSelection();\n \n     this.inks.forEach(ink => {\n       if(ink.value === name){\n         ink.selected = true;\n         found = true;\n         this.selected = ink;\n       } else{\n         ink.selected = false;\n       }\n    });\n \n    return found;\n   }\n \n \n   /**\n    * Get the current ink name that is selected\n    * @returns returns the selected ink name\n    */\n   getSelected():string{\n     return this.selected.value;\n   }\n \n   /**\n    * checks if a user specified ink is selected\n    * @param name the name of the mode we are asking about\n    * @returns boolean describing if it was selected or not\n    */\n   isSelected(name:string):boolean{\n     return(name == this.selected.value);\n   }\n}\n\n    \n\n\n\n\n\n\n\n\n\n                   \n    \n         results matching \"\"\n        \n    \n    \n        No results matching \"\"\n    \n\n"},"injectables/InkService.html":{"url":"injectables/InkService.html","title":"injectable - InkService","body":"\n                   \n\n\n\n\n\n\n\n\n\n  Injectables\n  InkService\n\n\n\n        \n            Info\n        \n        \n            Source\n        \n\n\n\n    \n        \n            File\n        \n        \n            src/app/mixer/provider/ink.service.ts\n        \n\n\n\n\n\n            \n    Index\n    \n        \n                \n                    \n                        Properties\n                    \n                \n                \n                    \n                        \n                            \n                                    Private\n                                inks\n                            \n                            \n                                    Private\n                                selected\n                            \n                        \n                    \n                \n\n                \n                    \n                        Methods\n                    \n                \n                \n                    \n                        \n                            \n                                clearSelection\n                            \n                            \n                                getInk\n                            \n                            \n                                getInks\n                            \n                            \n                                getSelected\n                            \n                            \n                                isSelected\n                            \n                            \n                                select\n                            \n                            \n                                selectedHasMask\n                            \n                        \n                    \n                \n\n\n\n\n\n        \n    \n\n\n            \n    Constructor\n        \n            \n                \n                    \nconstructor()\n                    \n                \n                        \n                            \n                                Defined in src/app/mixer/provider/ink.service.ts:20\n                            \n                        \n\n            \n        \n\n\n            \n    \n    \n        Methods\n    \n    \n        \n            \n                \n                    \n                    \n                        clearSelection\n                        \n                    \n                \n            \n            \n                \nclearSelection()\n                \n            \n\n\n            \n                \n                    Defined in src/app/mixer/provider/ink.service.ts:68\n                \n            \n\n\n            \n                \n                    sets false to the selection parameter on all the modes.\n\n\n                    \n                        Returns :         void\n\n                    \n                \n            \n        \n    \n    \n        \n            \n                \n                    \n                    \n                        getInk\n                        \n                    \n                \n            \n            \n                \ngetInk(name: string)\n                \n            \n\n\n            \n                \n                    Defined in src/app/mixer/provider/ink.service.ts:56\n                \n            \n\n\n            \n                \n                    A function to retreive an ink by name.\n\n\n                    \n                        Parameters :\n                        \n                        \n                            \n                                \n                                    Name\n                                    Type\n                                    Optional\n                                    Description\n                                \n                            \n                            \n                                \n                                    name\n                                    \n                                                string\n                                    \n\n                                    \n                                        No\n                                    \n\n\n                                    \n                                        the name of the ink we're looking to retreive\n\n                                    \n                                \n                            \n                        \n                    \n                    \n                    \n                    \n                        Returns :         Ink\n\n                    \n                    \n                        the Ink associated with that name, or null if nothing was found\n\n                    \n                \n            \n        \n    \n    \n        \n            \n                \n                    \n                    \n                        getInks\n                        \n                    \n                \n            \n            \n                \ngetInks()\n                \n            \n\n\n            \n                \n                    Defined in src/app/mixer/provider/ink.service.ts:41\n                \n            \n\n\n            \n                \n\n                    \n                        Returns :         Array\n\n                    \n                \n            \n        \n    \n    \n        \n            \n                \n                    \n                    \n                        getSelected\n                        \n                    \n                \n            \n            \n                \ngetSelected()\n                \n            \n\n\n            \n                \n                    Defined in src/app/mixer/provider/ink.service.ts:100\n                \n            \n\n\n            \n                \n                    Get the current ink name that is selected\n\n\n                    \n                    \n                    \n                        Returns :         string\n\n                    \n                    \n                        returns the selected ink name\n\n                    \n                \n            \n        \n    \n    \n        \n            \n                \n                    \n                    \n                        isSelected\n                        \n                    \n                \n            \n            \n                \nisSelected(name: string)\n                \n            \n\n\n            \n                \n                    Defined in src/app/mixer/provider/ink.service.ts:109\n                \n            \n\n\n            \n                \n                    checks if a user specified ink is selected\n\n\n                    \n                        Parameters :\n                        \n                        \n                            \n                                \n                                    Name\n                                    Type\n                                    Optional\n                                    Description\n                                \n                            \n                            \n                                \n                                    name\n                                    \n                                                string\n                                    \n\n                                    \n                                        No\n                                    \n\n\n                                    \n                                        the name of the mode we are asking about\n\n                                    \n                                \n                            \n                        \n                    \n                    \n                    \n                    \n                        Returns :         boolean\n\n                    \n                    \n                        boolean describing if it was selected or not\n\n                    \n                \n            \n        \n    \n    \n        \n            \n                \n                    \n                    \n                        select\n                        \n                    \n                \n            \n            \n                \nselect(name: string)\n                \n            \n\n\n            \n                \n                    Defined in src/app/mixer/provider/ink.service.ts:77\n                \n            \n\n\n            \n                \n                    clears previous selections and selects ink associated with name\n\n\n                    \n                        Parameters :\n                        \n                        \n                            \n                                \n                                    Name\n                                    Type\n                                    Optional\n                                    Description\n                                \n                            \n                            \n                                \n                                    name\n                                    \n                                                string\n                                    \n\n                                    \n                                        No\n                                    \n\n\n                                    \n                                        a string corresponding to the name of this ink\n\n                                    \n                                \n                            \n                        \n                    \n                    \n                    \n                    \n                        Returns :         boolean\n\n                    \n                    \n                        boolean cooresponding to whether or not a selection was made\n\n                    \n                \n            \n        \n    \n    \n        \n            \n                \n                    \n                    \n                        selectedHasMask\n                        \n                    \n                \n            \n            \n                \nselectedHasMask()\n                \n            \n\n\n            \n                \n                    Defined in src/app/mixer/provider/ink.service.ts:45\n                \n            \n\n\n            \n                \n\n                    \n                        Returns :         boolean\n\n                    \n                \n            \n        \n    \n\n            \n    \n    \n        Properties\n    \n    \n        \n            \n                \n                    \n                    \n                            Private\n                        inks\n                        \n                    \n                \n            \n                \n                    \n                        Type :         Array\n\n                    \n                \n                    \n                        \n                                Defined in src/app/mixer/provider/ink.service.ts:19\n                        \n                    \n\n\n        \n    \n    \n        \n            \n                \n                    \n                    \n                            Private\n                        selected\n                        \n                    \n                \n            \n                \n                    \n                        Type :         Ink\n\n                    \n                \n                    \n                        \n                                Defined in src/app/mixer/provider/ink.service.ts:20\n                        \n                    \n\n\n        \n    \n\n\n    \n\n\n    \n        import { Injectable } from '@angular/core';\n\n\n\ninterface Ink{\n  value: string;\n  viewValue: string;\n  dx: string;\n  icon: string;\n  selected: boolean;\n  uses_mask: boolean;\n}\n\n\n@Injectable({\n  providedIn: 'root'\n})\nexport class InkService {\n  private inks: Array;\n  private selected: Ink;\n\n\n  constructor() { \n\n\n    this.inks = [\n      {value: 'neq', viewValue: 'Reversing Ink', dx: \"REVERSING INK compares this pattern with what is underneight and draws black square when they are not equal\", icon: \"fas fa-adjust\", selected: false, uses_mask:false},\n      {value: 'up', viewValue: 'Setting Ink', dx: \"SETTING INK sets this pattern within the draft no matter what is under it\", icon: \"fas fa-square\",  selected: false, uses_mask:false},\n      {value: 'down', viewValue: 'Erasing Ink', dx: \"ERASING INK places all the heddle downs atop the draft underneith it\", icon: \"far fa-square\",  selected: false, uses_mask:false},\n      {value: 'unset', viewValue: 'Removing Ink', dx: \"REMOVING INK removes the use of this heddle in the draft (for shape and inlay weaving)\", icon: \"fas fa-times\", selected: false, uses_mask:false},\n      {value: 'and', viewValue: 'Masking Ink', dx: \"MASKING INK only reveals bottom pattern in areas where this pattern is black\", icon: \"fas fa-mask\", selected: false, uses_mask:true},\n     {value: 'or', viewValue: 'Overlaying Ink', dx: \"OVERLAYING INK copies all black pattern cells atop the draft\", icon: \"fas fa-plus\", selected: false, uses_mask:false}\n    ];\n  \n    this.select('neq');\n\n    \n  \n  }\n\n  getInks():Array{\n    return this.inks;\n  }\n\n  selectedHasMask():boolean{\n    const mode:Ink = this.getInk(this.getSelected());\n    return mode.uses_mask;\n  }\n\n  /**\n   * A function to retreive an ink by name. \n   * @param name the name of the ink we're looking to retreive\n   * @returns the Ink associated with that name, or null if nothing was found\n   */\n\n   getInk(name: string): Ink {\n    let found: Ink = null;\n \n    this.inks.forEach( ink => {\n       if(ink.value === name) found =  ink;\n    });\n    return found;\n   }\n \n   /**\n    * sets false to the selection parameter on all the modes. \n    */\n   clearSelection(){\n     this.selected = null\n   }\n \n /**\n  * clears previous selections and selects ink associated with name\n  * @param name a string corresponding to the name of this ink\n  * @returns boolean cooresponding to whether or not a selection was made \n  */\n   select(name: string): boolean{\n \n     let found: boolean = false;\n     this.clearSelection();\n \n     this.inks.forEach(ink => {\n       if(ink.value === name){\n         ink.selected = true;\n         found = true;\n         this.selected = ink;\n       } else{\n         ink.selected = false;\n       }\n    });\n \n    return found;\n   }\n \n \n   /**\n    * Get the current ink name that is selected\n    * @returns returns the selected ink name\n    */\n   getSelected():string{\n     return this.selected.value;\n   }\n \n   /**\n    * checks if a user specified ink is selected\n    * @param name the name of the mode we are asking about\n    * @returns boolean describing if it was selected or not\n    */\n   isSelected(name:string):boolean{\n     return(name == this.selected.value);\n   }\n}\n\n    \n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n                   \n    \n         results matching \"\"\n        \n    \n    \n        No results matching \"\"\n    \n\n"},"components/InletComponent.html":{"url":"components/InletComponent.html","title":"component - InletComponent","body":"\n                   \n\n\n\n\n\n  Components\n  \n  InletComponent\n\n\n\n        \n            Info\n        \n        \n            Source\n        \n        \n            Template\n        \n        \n            Styles\n        \n        \n            DOM Tree\n        \n\n\n\n    \n    File\n\n\n    src/app/mixer/palette/operation/inlet/inlet.component.ts\n\n\n\n\n\n    \n        Implements\n    \n    \n                    OnInit\n    \n\n\n\n    Metadata\n    \n        \n\n\n\n\n\n\n\n\n\n\n\n            \n                selector\n                app-inlet\n            \n\n            \n                styleUrls\n                ./inlet.component.scss\n            \n\n\n\n            \n                templateUrl\n                ./inlet.component.html\n            \n\n\n\n\n\n\n\n\n        \n    \n\n\n    \n    Index\n    \n        \n                \n                    \n                        Properties\n                    \n                \n                \n                    \n                        \n                            \n                                all_system_codes\n                            \n                            \n                                fc\n                            \n                            \n                                inlet\n                            \n                            \n                                number_opts\n                            \n                            \n                                opnode\n                            \n                            \n                                selectedValue\n                            \n                            \n                                textValidate\n                            \n                            \n                                    Public\n                                tree\n                            \n                        \n                    \n                \n\n                \n                    \n                        Methods\n                    \n                \n                \n                    \n                        \n                            \n                                getInputName\n                            \n                            \n                                inletChange\n                            \n                            \n                                inputSelected\n                            \n                            \n                                ngOnInit\n                            \n                            \n                                parseDefaultInletValue\n                            \n                            \n                                removeConnectionTo\n                            \n                        \n                    \n                \n\n                \n                    \n                        Inputs\n                    \n                \n                \n                    \n                        \n                            \n                                dynamic\n                            \n                            \n                                inletid\n                            \n                            \n                                opid\n                            \n                        \n                    \n                \n\n                \n                    \n                        Outputs\n                    \n                \n                \n                    \n                        \n                            \n                                onConnectionRemoved\n                            \n                            \n                                onInletChange\n                            \n                            \n                                onInputSelected\n                            \n                        \n                    \n                \n\n\n\n        \n    \n\n\n    \n    Constructor\n        \n            \n                \n                    \nconstructor(tree: TreeService, systems: SystemsService, ops: OperationService)\n                    \n                \n                        \n                            \n                                Defined in src/app/mixer/palette/operation/inlet/inlet.component.ts:32\n                            \n                        \n\n                \n                    \n                            \n                                    Parameters :\n                                    \n                                        \n                                            \n                                                Name\n                                                    Type\n                                                Optional\n                                            \n                                        \n                                        \n                                                \n                                                        tree\n                                                  \n                                                        \n                                                                        TreeService\n                                                        \n                                                  \n                                                    \n                                                            No\n                                                    \n                                                    \n                                                \n                                                \n                                                        systems\n                                                  \n                                                        \n                                                                        SystemsService\n                                                        \n                                                  \n                                                    \n                                                            No\n                                                    \n                                                    \n                                                \n                                                \n                                                        ops\n                                                  \n                                                        \n                                                                        OperationService\n                                                        \n                                                  \n                                                    \n                                                            No\n                                                    \n                                                    \n                                                \n                                        \n                                    \n                            \n                    \n                \n            \n        \n\n\n    \n    Inputs\n        \n            \n                \n                    \n                        \n                        dynamic\n                    \n                \n                \n                    \n                        Type :         boolean\n\n                    \n                \n                        \n                            \n                                    Defined in src/app/mixer/palette/operation/inlet/inlet.component.ts:21\n                            \n                        \n            \n        \n        \n            \n                \n                    \n                        \n                        inletid\n                    \n                \n                \n                    \n                        Type :         number\n\n                    \n                \n                        \n                            \n                                    Defined in src/app/mixer/palette/operation/inlet/inlet.component.ts:20\n                            \n                        \n            \n        \n        \n            \n                \n                    \n                        \n                        opid\n                    \n                \n                \n                    \n                        Type :         number\n\n                    \n                \n                        \n                            \n                                    Defined in src/app/mixer/palette/operation/inlet/inlet.component.ts:19\n                            \n                        \n            \n        \n\n    \n    Outputs\n        \n            \n                \n                    \n                        \n                        onConnectionRemoved\n                    \n                \n                \n                    \n                        Type :         EventEmitter\n\n                    \n                \n                        \n                            \n                                    Defined in src/app/mixer/palette/operation/inlet/inlet.component.ts:23\n                            \n                        \n            \n        \n        \n            \n                \n                    \n                        \n                        onInletChange\n                    \n                \n                \n                    \n                        Type :         EventEmitter\n\n                    \n                \n                        \n                            \n                                    Defined in src/app/mixer/palette/operation/inlet/inlet.component.ts:24\n                            \n                        \n            \n        \n        \n            \n                \n                    \n                        \n                        onInputSelected\n                    \n                \n                \n                    \n                        Type :         EventEmitter\n\n                    \n                \n                        \n                            \n                                    Defined in src/app/mixer/palette/operation/inlet/inlet.component.ts:22\n                            \n                        \n            \n        \n\n\n\n    \n    \n    \n        Methods\n    \n    \n        \n            \n                \n                    \n                    \n                        getInputName\n                        \n                    \n                \n            \n            \n                \ngetInputName(id: number)\n                \n            \n\n\n            \n                \n                    Defined in src/app/mixer/palette/operation/inlet/inlet.component.ts:101\n                \n            \n\n\n            \n                \n\n                    \n                        Parameters :\n                        \n                        \n                            \n                                \n                                    Name\n                                    Type\n                                    Optional\n                                \n                            \n                            \n                                \n                                    id\n                                    \n                                                number\n                                    \n\n                                    \n                                        No\n                                    \n\n\n                                \n                            \n                        \n                    \n                    \n                    \n                    \n                        Returns :         string\n\n                    \n                    \n                        \n                    \n                \n            \n        \n    \n    \n        \n            \n                \n                    \n                    \n                        inletChange\n                        \n                    \n                \n            \n            \n                \ninletChange()\n                \n            \n\n\n            \n                \n                    Defined in src/app/mixer/palette/operation/inlet/inlet.component.ts:107\n                \n            \n\n\n            \n                \n\n                    \n                        Returns :         void\n\n                    \n                \n            \n        \n    \n    \n        \n            \n                \n                    \n                    \n                        inputSelected\n                        \n                    \n                \n            \n            \n                \ninputSelected()\n                \n            \n\n\n            \n                \n                    Defined in src/app/mixer/palette/operation/inlet/inlet.component.ts:93\n                \n            \n\n\n            \n                \n\n                    \n                        Returns :         void\n\n                    \n                \n            \n        \n    \n    \n        \n            \n                \n                    \n                    \n                        ngOnInit\n                        \n                    \n                \n            \n            \n                \nngOnInit()\n                \n            \n\n\n            \n                \n                    Defined in src/app/mixer/palette/operation/inlet/inlet.component.ts:38\n                \n            \n\n\n            \n                \n\n                    \n                        Returns :         void\n\n                    \n                \n            \n        \n    \n    \n        \n            \n                \n                    \n                    \n                        parseDefaultInletValue\n                        \n                    \n                \n            \n            \n                \nparseDefaultInletValue(type: string, value: any)\n                \n            \n\n\n            \n                \n                    Defined in src/app/mixer/palette/operation/inlet/inlet.component.ts:77\n                \n            \n\n\n            \n                \n\n                    \n                        Parameters :\n                        \n                        \n                            \n                                \n                                    Name\n                                    Type\n                                    Optional\n                                \n                            \n                            \n                                \n                                    type\n                                    \n                                                string\n                                    \n\n                                    \n                                        No\n                                    \n\n\n                                \n                                \n                                    value\n                                    \n                                                any\n                                    \n\n                                    \n                                        No\n                                    \n\n\n                                \n                            \n                        \n                    \n                    \n                    \n                    \n                        Returns :         any\n\n                    \n                    \n                        \n                    \n                \n            \n        \n    \n    \n        \n            \n                \n                    \n                    \n                        removeConnectionTo\n                        \n                    \n                \n            \n            \n                \nremoveConnectionTo(sd_id: number)\n                \n            \n\n\n            \n                \n                    Defined in src/app/mixer/palette/operation/inlet/inlet.component.ts:97\n                \n            \n\n\n            \n                \n\n                    \n                        Parameters :\n                        \n                        \n                            \n                                \n                                    Name\n                                    Type\n                                    Optional\n                                \n                            \n                            \n                                \n                                    sd_id\n                                    \n                                                number\n                                    \n\n                                    \n                                        No\n                                    \n\n\n                                \n                            \n                        \n                    \n                    \n                    \n                    \n                        Returns :         void\n\n                    \n                    \n                        \n                    \n                \n            \n        \n    \n\n    \n    \n    \n        Properties\n    \n    \n        \n            \n                \n                    \n                    \n                        all_system_codes\n                        \n                    \n                \n            \n                \n                    \n                        Type :     Array\n\n                    \n                \n                    \n                        \n                                Defined in src/app/mixer/palette/operation/inlet/inlet.component.ts:28\n                        \n                    \n\n\n        \n    \n    \n        \n            \n                \n                    \n                    \n                        fc\n                        \n                    \n                \n            \n                \n                    \n                        Type :         FormControl\n\n                    \n                \n                    \n                        \n                                Defined in src/app/mixer/palette/operation/inlet/inlet.component.ts:26\n                        \n                    \n\n\n        \n    \n    \n        \n            \n                \n                    \n                    \n                        inlet\n                        \n                    \n                \n            \n                \n                    \n                        Type :         OperationInlet\n\n                    \n                \n                    \n                        \n                                Defined in src/app/mixer/palette/operation/inlet/inlet.component.ts:31\n                        \n                    \n\n\n        \n    \n    \n        \n            \n                \n                    \n                    \n                        number_opts\n                        \n                    \n                \n            \n                \n                    \n                        Type :     Array\n\n                    \n                \n                    \n                        \n                                Defined in src/app/mixer/palette/operation/inlet/inlet.component.ts:29\n                        \n                    \n\n\n        \n    \n    \n        \n            \n                \n                    \n                    \n                        opnode\n                        \n                    \n                \n            \n                \n                    \n                        Type :         OpNode\n\n                    \n                \n                    \n                        \n                                Defined in src/app/mixer/palette/operation/inlet/inlet.component.ts:30\n                        \n                    \n\n\n        \n    \n    \n        \n            \n                \n                    \n                    \n                        selectedValue\n                        \n                    \n                \n            \n                \n                    \n                        Type :         number\n\n                    \n                \n                    \n                        \n                                Defined in src/app/mixer/palette/operation/inlet/inlet.component.ts:32\n                        \n                    \n\n\n        \n    \n    \n        \n            \n                \n                    \n                    \n                        textValidate\n                        \n                    \n                \n            \n                \n                    \n                        Type :         any\n\n                    \n                \n                    \n                        \n                                Defined in src/app/mixer/palette/operation/inlet/inlet.component.ts:27\n                        \n                    \n\n\n        \n    \n    \n        \n            \n                \n                    \n                    \n                            Public\n                        tree\n                        \n                    \n                \n            \n                \n                    \n                        Type :         TreeService\n\n                    \n                \n                    \n                        \n                                Defined in src/app/mixer/palette/operation/inlet/inlet.component.ts:34\n                        \n                    \n\n\n        \n    \n\n\n\n\n\n    \n        import { Component, Input, OnInit, Output, EventEmitter } from '@angular/core';\nimport { FormControl, FormGroupDirective, NgForm } from '@angular/forms';\nimport { OperationService } from '../../../provider/operation.service';\nimport { SystemsService } from '../../../../core/provider/systems.service';\nimport { TreeService } from '../../../provider/tree.service';\nimport { getDraftName } from '../../../../core/model/drafts';\nimport { DynamicOperation, OperationInlet,OpNode } from '../../../../core/model/datatypes';\nimport { I } from '@angular/cdk/keycodes';\n\n\n\n@Component({\n  selector: 'app-inlet',\n  templateUrl: './inlet.component.html',\n  styleUrls: ['./inlet.component.scss']\n})\nexport class InletComponent implements OnInit {\n\n  @Input() opid:  number;\n  @Input() inletid:  number;\n  @Input() dynamic: boolean;\n  @Output() onInputSelected = new EventEmitter (); \n  @Output() onConnectionRemoved = new EventEmitter (); \n  @Output() onInletChange = new EventEmitter (); \n\n  fc: FormControl;\n  textValidate: any;\n  all_system_codes: Array;\n  number_opts: Array;\n  opnode: OpNode;\n  inlet: OperationInlet;\n  selectedValue: number; \n\n  constructor(public tree: TreeService, private systems: SystemsService, private ops: OperationService) { \n\n  }\n\n  ngOnInit(): void {    \n    this.opnode = this.tree.getOpNode(this.opid);\n    this.all_system_codes = this.systems.weft_systems.map(el => {return {code: el.name, id: el.id}} );\n    const op = this.ops.getOp(this.opnode.name);  \n    this.number_opts = [];\n    for(let i = 1; i = op.inlets.length && this.dynamic){\n      const type = ( op).dynamic_param_type;\n      this.inlet = {\n        type: type,\n        name: '',\n        value: this.parseDefaultInletValue(type, this.opnode.inlets[this.inletid]),\n        num_drafts: 1,\n        dx: ''\n      }\n    }else{\n      this.inlet = op.inlets[this.inletid];\n    }\n\n    if(this.inlet === undefined){\n      this.inlet = {\n        type: 'null',\n        name: '',\n        value: -1,\n        num_drafts: 1,\n        dx: ''\n      }\n    }\n\n\n    this.fc = new FormControl(this.parseDefaultInletValue(this.inlet.type, this.opnode.inlets[this.inletid]));\n\n  }\n\n  parseDefaultInletValue(type: string, value: any) : any {\n    switch (type){\n      case 'number':\n      case 'system':\n      case 'draft':\n        return parseInt(value);\n        break;\n      case 'notation':\n      case 'string':\n      case 'color':\n        return value.slice();\n      \n    }\n  }\n\n\n  inputSelected(){\n    this.onInputSelected.emit(this.inletid);\n  }\n\n  removeConnectionTo(sd_id: number){\n    this.onConnectionRemoved.emit({from: sd_id, to: this.opid, inletid: this.inletid});\n  }\n\n  getInputName(id: number) : string {\n    const sd = this.tree.getDraft(id);\n    if(sd === null || sd === undefined) return \"null draft\"\n    return getDraftName(sd);\n  }\n\n  inletChange(){\n\n    const opnode: OpNode =  this.tree.getNode(this.opid);\n\n    // switch(this.inlet.type){\n    //   case 'number':\n    //     this.fc.setValue(value);\n    //     opnode.inlets[this.inletid] = value;\n    //     break;\n    //   case 'system':\n    //    // opnode.inlets[this.inletid] = value;\n    //     break;\n    //   case 'color':\n    //     this.fc.setValue(value);\n    //     opnode.inlets[this.inletid] = value;\n    //     break;\n    //   case 'notation':\n    //     this.fc.setValue(value);\n    //     opnode.inlets[this.inletid] = value;\n    //     break;\n\n    // }\n\n    this.onInletChange.emit({id: this.inletid});\n\n  }\n\n\n\n\n\n\n}\n\n    \n\n    \n        \n    \n\n\n    \n         \n    \n\n    {{inlet.name}}\n\n    \n\n        \n             \n        \n\n       {{opnode.inlets[inletid]}} -->\n\n       \n       \n           {{num}}\n       \n   \n\n\n    \n\n\n\n    \n    \n\n        \n             \n        \n\n         ({{opnode.inlets[inletid]}})\n         {{opnode.inlets[inletid]}}\n\n    \n\n\n\n    \n        \n             \n        \n        layer {{inletid+1}}, system: \n            \n            \n                {{sys.code}}\n            \n        \n\n\n \n\n    \n\n    \n       \n        \n            \n        \n        \n\n    \n\n\n    \n    \n    {{getInputName(input)}} \n       \n\n\n\n\n    \n\n    \n                \n                    ./inlet.component.scss\n                \n                \n.input-color{\n    width: 30px;\n    height: 30px;\n    border: thin solid white;\n}\n\nbutton.input{\n    position: relative;\n\tbackground-color: #00d1b2;\n\tcolor: white;\n\tborder: none;\n    width:30px;\n}\n\n\n\nbutton.cxn{\n    background-color: lightgrey;\n    border: thin solid black;\n    color: black;\n}\n\n.input-name{\n    margin-left: 8px;\n    line-height: 30px;\n}\n\n\n.inputs{\n    display: flex;\n    justify-content: flex-start;\n    text-align: center;\n}\n\n\n.mat-select{\n    width: 34px;\n    padding-left: 4px;\n    line-height: 30px;\n    background-color: #fff;\n}\n\n.mat-select-value{\n    color: #fff !important;\n}\n\ninput{\n    width: 35px;\n}\n\n\n\n.inlet-label,\n.inlet-name{\n    color: #fff;\n    line-height: 30px;\n    padding-right: 6px;\n}\n    \n\n    \n        \n        \n            \n                Legend\n            \n            \n                Html element\n            \n            \n                Component\n            \n            \n                Html element with directive\n            \n        \n    \n\n    \n\n\n\n\n\n\n        var COMPONENT_TEMPLATE = '                         {{inlet.name}}                                        {{opnode.inlets[inletid]}} -->                         {{num}}                                                            ({{opnode.inlets[inletid]}})         {{opnode.inlets[inletid]}}                                             layer {{inletid+1}}, system:                                         {{sys.code}}                                                                                        {{getInputName(input)}}        '\n    var COMPONENTS = [{'name': 'ConnectionComponent', 'selector': 'app-connection'},{'name': 'DraftdetailComponent', 'selector': 'app-draftdetail'},{'name': 'ImageComponent', 'selector': 'app-image'},{'name': 'InletComponent', 'selector': 'app-inlet'},{'name': 'MixerComponent', 'selector': 'app-mixer'},{'name': 'MixerViewComponent', 'selector': 'app-mixerview'},{'name': 'NoteComponent', 'selector': 'app-note'},{'name': 'OperationComponent', 'selector': 'app-operation'},{'name': 'OpHelpModal', 'selector': 'app-ophelp'},{'name': 'OpsComponent', 'selector': 'app-ops'},{'name': 'OpSequencerComponent', 'selector': 'app-op-sequencer'},{'name': 'PaletteComponent', 'selector': 'app-palette'},{'name': 'ParameterComponent', 'selector': 'app-parameter'},{'name': 'PlayerComponent', 'selector': 'app-player'},{'name': 'SnackbarComponent', 'selector': 'app-snackbar'},{'name': 'SubdraftComponent', 'selector': 'app-subdraft'},{'name': 'VirtualPedalsComponent', 'selector': 'app-virtual-pedals'},{'name': 'WeavingStateComponent', 'selector': 'app-weaving-state'}];\n    var DIRECTIVES = [{'name': 'MarqueeComponent', 'selector': 'app-marquee'},{'name': 'SelectionComponent', 'selector': 'app-selection'}];\n    var ACTUAL_COMPONENT = {'name': 'InletComponent'};\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n                   \n    \n         results matching \"\"\n        \n    \n    \n        No results matching \"\"\n    \n\n"},"interfaces/Interlacement.html":{"url":"interfaces/Interlacement.html","title":"interface - Interlacement","body":"\n                   \n\n\n\n\n\n\n\n\n\n\n\n\n\n\n  Interfaces\n  \n  Interlacement\n\n\n\n        \n            Info\n        \n        \n            Source\n        \n\n\n\n    \n        \n            File\n        \n        \n            src/app/core/model/datatypes/drafts.ts\n        \n\n\n            \n                Description\n            \n            \n                represents a location within a draft.\n       this value can be de-indexed to absolute position in the rows using draft.visibleRows array\n\n            \n\n\n        \n            Index\n            \n                \n                    \n                        \n                            Properties\n                        \n                    \n                    \n                        \n                            \n                                \n                                        \n                                            i\n                                        \n                                \n                                \n                                        \n                                            j\n                                        \n                                \n                                \n                                        \n                                            si\n                                        \n                                \n                            \n                        \n                    \n                \n            \n        \n\n\n\n            \n                Properties\n                    \n                        \n                                \n                                    \n                                        \n                                        i\n                                            \n                                                \n                                            \n                                        \n                                    \n                                \n                                \n                                    \n                                        i:         number\n\n                                    \n                                \n\n\n                                    \n                                        \n                                            Type :         number\n\n                                        \n                                    \n\n\n\n\n\n                        \n                    \n                    \n                        \n                                \n                                    \n                                        \n                                        j\n                                            \n                                                \n                                            \n                                        \n                                    \n                                \n                                \n                                    \n                                        j:         number\n\n                                    \n                                \n\n\n                                    \n                                        \n                                            Type :         number\n\n                                        \n                                    \n\n\n\n\n\n                        \n                    \n                    \n                        \n                                \n                                    \n                                        \n                                        si\n                                            \n                                                \n                                            \n                                        \n                                    \n                                \n                                \n                                    \n                                        si:         number\n\n                                    \n                                \n\n\n                                    \n                                        \n                                            Type :         number\n\n                                        \n                                    \n\n\n\n\n\n                        \n                    \n            \n    \n\n\n    \n        import { Cell } from '../cell';\n\n/*****   OBJECTS/TYPES RELATED TO DRAFTS  *******/\n\n/**\n * Drawdown can be used as shorthand for drafts, which are just 2D arrays of Cells\n */\n export type Drawdown = Array>;\n\n\n /**\n  * stores a drawdown along with broader information a draft such\n  * @param id a unique id to refer to this draft, used for linking the draft to screen components\n  * @param gen_name a automatically generated name for this draft (from parent operation)\n  * @param ud_name a user defined name for this draft, which, if it exists, will be used instead of the generated name\n  * @param drawdown the drawdown/interlacement pattern used in this draft\n  * @param rowShuttleMapping the repeating pattern to use to assign draft rows to shuttles (materials)\n  * @param rowSystemMapping the repeating pattern to use to assign draft rows to systems (structual units like layers for instance)\n  * @param colShuttleMapping the repeating pattern to use to assign draft columns to shuttles (materials)\n  * @param colSystemMapping the repeating pattern to use to assign draft columns to systems (structual units like layers for instance)\n  */\n export interface Draft {\n   id: number,\n   gen_name: string,\n   ud_name: string,\n   drawdown: Drawdown,\n   rowShuttleMapping: Array,\n   rowSystemMapping: Array,\n   colShuttleMapping: Array,\n   colSystemMapping: Array,\n }\n \n /**\n  * represents a location within a draft.\n  * @param i is the row/weft number (0 being at the top of the drawdown)\n  * @param j is the column/warp number (0 being at the far left of the drawdown)\n  * @param si is the location of this cell within the current view (where the view may be hiding some rows)\n  *        this value can be de-indexed to absolute position in the rows using draft.visibleRows array\n  * @example const i: number = draft.visibleRows[si];\n  */\n export interface Interlacement {\n   i: number;  \n   j: number;  \n   si: number; \n }\n \n /**\n  * represents a location within a draft as well as the value to be placed at that location\n  * used by Loom to stage updates before settting them\n  * @param i is the row/weft number (0 being at the top of the drawdown)\n  * @param j is the column/warp number (0 being at the far left of the drawdown)\n  * @param val the value to be assigned at the given location\n  */\n \n export interface InterlacementVal {\n   i: number;  \n   j: number \n   val: boolean; \n }\n \n \n /***** OBJECTS/TYPES RELATED TO MIXER COMPONENTS ****/\n \n /**\n  * this stores a list of drafts created with associated component ids for those drafts, \n  * or -1 if the component for this draft has not been generated yet. \n  */\n export interface DraftMap {\n   component_id: number;\n   draft: any;\n }\n    \n\n\n\n\n\n\n\n\n\n                   \n    \n         results matching \"\"\n        \n    \n    \n        No results matching \"\"\n    \n\n"},"interfaces/InterlacementVal.html":{"url":"interfaces/InterlacementVal.html","title":"interface - InterlacementVal","body":"\n                   \n\n\n\n\n\n\n\n\n\n\n\n\n\n\n  Interfaces\n  \n  InterlacementVal\n\n\n\n        \n            Info\n        \n        \n            Source\n        \n\n\n\n    \n        \n            File\n        \n        \n            src/app/core/model/datatypes/drafts.ts\n        \n\n\n            \n                Description\n            \n            \n                represents a location within a draft as well as the value to be placed at that location\nused by Loom to stage updates before settting them\n\n            \n\n\n        \n            Index\n            \n                \n                    \n                        \n                            Properties\n                        \n                    \n                    \n                        \n                            \n                                \n                                        \n                                            i\n                                        \n                                \n                                \n                                        \n                                            j\n                                        \n                                \n                                \n                                        \n                                            val\n                                        \n                                \n                            \n                        \n                    \n                \n            \n        \n\n\n\n            \n                Properties\n                    \n                        \n                                \n                                    \n                                        \n                                        i\n                                            \n                                                \n                                            \n                                        \n                                    \n                                \n                                \n                                    \n                                        i:         number\n\n                                    \n                                \n\n\n                                    \n                                        \n                                            Type :         number\n\n                                        \n                                    \n\n\n\n\n\n                        \n                    \n                    \n                        \n                                \n                                    \n                                        \n                                        j\n                                            \n                                                \n                                            \n                                        \n                                    \n                                \n                                \n                                    \n                                        j:         number\n\n                                    \n                                \n\n\n                                    \n                                        \n                                            Type :         number\n\n                                        \n                                    \n\n\n\n\n\n                        \n                    \n                    \n                        \n                                \n                                    \n                                        \n                                        val\n                                            \n                                                \n                                            \n                                        \n                                    \n                                \n                                \n                                    \n                                        val:         boolean\n\n                                    \n                                \n\n\n                                    \n                                        \n                                            Type :         boolean\n\n                                        \n                                    \n\n\n\n\n\n                        \n                    \n            \n    \n\n\n    \n        import { Cell } from '../cell';\n\n/*****   OBJECTS/TYPES RELATED TO DRAFTS  *******/\n\n/**\n * Drawdown can be used as shorthand for drafts, which are just 2D arrays of Cells\n */\n export type Drawdown = Array>;\n\n\n /**\n  * stores a drawdown along with broader information a draft such\n  * @param id a unique id to refer to this draft, used for linking the draft to screen components\n  * @param gen_name a automatically generated name for this draft (from parent operation)\n  * @param ud_name a user defined name for this draft, which, if it exists, will be used instead of the generated name\n  * @param drawdown the drawdown/interlacement pattern used in this draft\n  * @param rowShuttleMapping the repeating pattern to use to assign draft rows to shuttles (materials)\n  * @param rowSystemMapping the repeating pattern to use to assign draft rows to systems (structual units like layers for instance)\n  * @param colShuttleMapping the repeating pattern to use to assign draft columns to shuttles (materials)\n  * @param colSystemMapping the repeating pattern to use to assign draft columns to systems (structual units like layers for instance)\n  */\n export interface Draft {\n   id: number,\n   gen_name: string,\n   ud_name: string,\n   drawdown: Drawdown,\n   rowShuttleMapping: Array,\n   rowSystemMapping: Array,\n   colShuttleMapping: Array,\n   colSystemMapping: Array,\n }\n \n /**\n  * represents a location within a draft.\n  * @param i is the row/weft number (0 being at the top of the drawdown)\n  * @param j is the column/warp number (0 being at the far left of the drawdown)\n  * @param si is the location of this cell within the current view (where the view may be hiding some rows)\n  *        this value can be de-indexed to absolute position in the rows using draft.visibleRows array\n  * @example const i: number = draft.visibleRows[si];\n  */\n export interface Interlacement {\n   i: number;  \n   j: number;  \n   si: number; \n }\n \n /**\n  * represents a location within a draft as well as the value to be placed at that location\n  * used by Loom to stage updates before settting them\n  * @param i is the row/weft number (0 being at the top of the drawdown)\n  * @param j is the column/warp number (0 being at the far left of the drawdown)\n  * @param val the value to be assigned at the given location\n  */\n \n export interface InterlacementVal {\n   i: number;  \n   j: number \n   val: boolean; \n }\n \n \n /***** OBJECTS/TYPES RELATED TO MIXER COMPONENTS ****/\n \n /**\n  * this stores a list of drafts created with associated component ids for those drafts, \n  * or -1 if the component for this draft has not been generated yet. \n  */\n export interface DraftMap {\n   component_id: number;\n   draft: any;\n }\n    \n\n\n\n\n\n\n\n\n\n                   \n    \n         results matching \"\"\n        \n    \n    \n        No results matching \"\"\n    \n\n"},"injectables/LayersService.html":{"url":"injectables/LayersService.html","title":"injectable - LayersService","body":"\n                   \n\n\n\n\n\n\n\n\n\n  Injectables\n  LayersService\n\n\n\n        \n            Info\n        \n        \n            Source\n        \n\n\n\n    \n        \n            File\n        \n        \n            src/app/mixer/provider/layers.service.ts\n        \n\n\n            \n                Description\n            \n            \n                a service that keeps track of how many elements are on the screen so that new\nlayers can always be drawn in front\n\n            \n\n\n\n            \n    Index\n    \n        \n                \n                    \n                        Properties\n                    \n                \n                \n                    \n                        \n                            \n                                count\n                            \n                        \n                    \n                \n\n                \n                    \n                        Methods\n                    \n                \n                \n                    \n                        \n                            \n                                clearLayers\n                            \n                            \n                                createLayer\n                            \n                            \n                                getFrontLayer\n                            \n                        \n                    \n                \n\n\n\n\n\n        \n    \n\n\n            \n    Constructor\n        \n            \n                \n                    \nconstructor()\n                    \n                \n                        \n                            \n                                Defined in src/app/mixer/provider/layers.service.ts:13\n                            \n                        \n\n            \n        \n\n\n            \n    \n    \n        Methods\n    \n    \n        \n            \n                \n                    \n                    \n                        clearLayers\n                        \n                    \n                \n            \n            \n                \nclearLayers()\n                \n            \n\n\n            \n                \n                    Defined in src/app/mixer/provider/layers.service.ts:24\n                \n            \n\n\n            \n                \n\n                    \n                        Returns :         void\n\n                    \n                \n            \n        \n    \n    \n        \n            \n                \n                    \n                    \n                        createLayer\n                        \n                    \n                \n            \n            \n                \ncreateLayer()\n                \n            \n\n\n            \n                \n                    Defined in src/app/mixer/provider/layers.service.ts:19\n                \n            \n\n\n            \n                \n\n                    \n                        Returns :         number\n\n                    \n                \n            \n        \n    \n    \n        \n            \n                \n                    \n                    \n                        getFrontLayer\n                        \n                    \n                \n            \n            \n                \ngetFrontLayer()\n                \n            \n\n\n            \n                \n                    Defined in src/app/mixer/provider/layers.service.ts:28\n                \n            \n\n\n            \n                \n\n                    \n                        Returns :         number\n\n                    \n                \n            \n        \n    \n\n            \n    \n    \n        Properties\n    \n    \n        \n            \n                \n                    \n                    \n                        count\n                        \n                    \n                \n            \n                \n                    \n                        Type :         number\n\n                    \n                \n                    \n                        \n                                Defined in src/app/mixer/provider/layers.service.ts:13\n                        \n                    \n\n\n        \n    \n\n\n    \n\n\n    \n        import { Injectable } from '@angular/core';\n\n\n/**\n * a service that keeps track of how many elements are on the screen so that new \n * layers can always be drawn in front\n */\n@Injectable({\n  providedIn: 'root'\n})\nexport class LayersService {\n\n  count: number;\n\n  constructor() {\n    this.count = 0;\n   }\n\n   createLayer(): number{\n     this.count++;\n     return this.count;\n   }\n\n   clearLayers(){\n     this.count = 0;\n   }\n\n  getFrontLayer():number{\n    return this.count;\n  }\n\n}\n\n    \n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n                   \n    \n         results matching \"\"\n        \n    \n    \n        No results matching \"\"\n    \n\n"},"interfaces/LoadResponse.html":{"url":"interfaces/LoadResponse.html","title":"interface - LoadResponse","body":"\n                   \n\n\n\n\n\n\n\n\n\n\n\n\n\n\n  Interfaces\n  \n  LoadResponse\n\n\n\n        \n            Info\n        \n        \n            Source\n        \n\n\n\n    \n        \n            File\n        \n        \n            src/app/core/model/datatypes/files.ts\n        \n\n\n\n\n        \n            Index\n            \n                \n                    \n                        \n                            Properties\n                        \n                    \n                    \n                        \n                            \n                                \n                                        \n                                            data\n                                        \n                                \n                                \n                                        \n                                            status\n                                        \n                                \n                            \n                        \n                    \n                \n            \n        \n\n\n\n            \n                Properties\n                    \n                        \n                                \n                                    \n                                        \n                                        data\n                                            \n                                                \n                                            \n                                        \n                                    \n                                \n                                \n                                    \n                                        data:         FileObj\n\n                                    \n                                \n\n\n                                    \n                                        \n                                            Type :         FileObj\n\n                                        \n                                    \n\n\n\n\n\n                        \n                    \n                    \n                        \n                                \n                                    \n                                        \n                                        status\n                                            \n                                                \n                                            \n                                        \n                                    \n                                \n                                \n                                    \n                                        status:         number\n\n                                    \n                                \n\n\n                                    \n                                        \n                                            Type :         number\n\n                                        \n                                    \n\n\n\n\n\n                        \n                    \n            \n    \n\n\n    \n        import { Draft } from './drafts';\nimport { Loom, LoomSettings } from './looms';\nimport { Shuttle } from '../shuttle';\nimport { Note } from '../../provider/notes.service';\nimport { Bounds } from './screenlayout';\n\n/****** OBJECTS/TYPES FOR LOADING AND SAVING FILES *****/\n\n/**\n * holds data about each node/component in a form to easily load.\n * @param node_id the id of this node within the tree\n * @param type the type of node\n * @param bounds the screen position and size data for this node\n */\nexport interface NodeComponentProxy {\n    node_id: number,\n    type: string,\n    bounds: Bounds\n  }\n  \n  /**\n   * stores a sparce version of a tree node for easy reloading\n   * @param node the node id this treenode refers too\n   * @param parent the node id of the parent node for this treenode\n   * @param inputs an array of treenode ids for all values coming into this node\n   * @param outputs an array of treenode ids for all downstream functions \n   */\n   export interface TreeNodeProxy {\n    node: number,\n    parent: number; \n    inputs: Array;\n    outputs: Array; \n   }\n  \n    /**\n    * holds data about each draft component in a compressed form \n    * @param draft_id the draft id associated with this node (if available)\n   * @param draft_visible a boolean to state if this node is visible or not. \n   * @param draft_name a string representing a user defined name\n   * @param draft this will only export if the draft is a seed draft\n   * @param loom this will only export if the draft is a seed draft \n   * @param loom_settings the associated loom settings on this node, if present\n    */\n  \n    export interface DraftNodeProxy {\n      node_id: number;\n      draft_id: number;\n      draft_name: string;\n      draft: Draft;\n      draft_visible: boolean;\n      loom: Loom,\n      loom_settings: LoomSettings;\n    }\n  \n  /**\n    * a sparce form of an operaction component to use for saving\n    * @param node_id the node id this object refers too\n    * @param name the name of the operation at this node\n    * @param params the list of input parameters to this operation\n    * @param inlets the let of inlets and associated values \n    */\n  export interface OpComponentProxy {\n    node_id: number,\n    name: string,\n    params: Array, \n    inlets: Array;\n  }\n  \n  \n   /**\n    * describes the data from the workspace that is saved.\n    */\n   export interface SaveObj {\n    version: string,\n    workspace: any,\n    type: string,\n    nodes: Array,\n    tree: Array,\n    draft_nodes: Array,\n    ops: Array,\n    notes: Array,\n    materials: Array,\n    scale: number\n   }\n  \n  export interface FileObj {\n   version: string,\n   workspace: any,\n   filename: string,\n   nodes: Array,\n   treenodes: Array,\n   draft_nodes: Array,\n   ops: Array\n   scale: number\n  }\n  \n  export interface StatusMessage {\n    id: number,\n    message: string,\n    success: boolean\n  }\n  \n  export interface LoadResponse {\n    data: FileObj,\n    status: number;\n  }\n  \n  export interface Fileloader {\n    ada: (filename: string, data: any) => Promise,\n    //wif: (filename: string, data: any) => Promise,\n    //bmp: (filename: string, data: any) => Promise,\n    //jpg: (filename: string, data: any) => Promise,\n    form: (data: any) => Promise}\n  \n  export interface FileSaver {\n    ada: (type: string, for_timeline:boolean, current_scale: number) => Promise,\n    //wif: (draft: Draft, loom: Loom) => Promise,\n    bmp: (canvas: HTMLCanvasElement) => Promise,\n    jpg: (canvas: HTMLCanvasElement) => Promise\n  }\n    \n\n\n\n\n\n\n\n\n\n                   \n    \n         results matching \"\"\n        \n    \n    \n        No results matching \"\"\n    \n\n"},"interfaces/LoomConfig.html":{"url":"interfaces/LoomConfig.html","title":"interface - LoomConfig","body":"\n                   \n\n\n\n\n\n\n\n\n\n\n\n\n\n\n  Interfaces\n  \n  LoomConfig\n\n\n\n        \n            Info\n        \n        \n            Source\n        \n\n\n\n    \n        \n            File\n        \n        \n            src/app/player/player.service.ts\n        \n\n\n\n\n        \n            Index\n            \n                \n                    \n                        \n                            Properties\n                        \n                    \n                    \n                        \n                            \n                                \n                                        \n                                            draftTiling\n                                        \n                                \n                                \n                                        \n                                            warps\n                                        \n                                \n                            \n                        \n                    \n                \n            \n        \n\n\n\n            \n                Properties\n                    \n                        \n                                \n                                    \n                                        \n                                        draftTiling\n                                            \n                                                \n                                            \n                                        \n                                    \n                                \n                                \n                                    \n                                        draftTiling:         boolean\n\n                                    \n                                \n\n\n                                    \n                                        \n                                            Type :         boolean\n\n                                        \n                                    \n\n\n\n\n\n                        \n                    \n                    \n                        \n                                \n                                    \n                                        \n                                        warps\n                                            \n                                                \n                                            \n                                        \n                                    \n                                \n                                \n                                    \n                                        warps:         number\n\n                                    \n                                \n\n\n                                    \n                                        \n                                            Type :         number\n\n                                        \n                                    \n\n\n\n\n\n                        \n                    \n            \n    \n\n\n    \n        import { Injectable} from '@angular/core';\nimport { EventEmitter } from 'events';\nimport { wefts } from '../core/model/drafts';\nimport { Draft } from '../core/model/datatypes';\nimport { BaseOp, BuildableOperation as GenericOp, \n  TreeOperation as TreeOp,\n  Seed, Pipe, DraftsOptional, AllRequired, getDefaultParams,\n  SingleInlet, OpInput\n} from '../mixer/model/operation';\nimport * as defs from '../mixer/model/op_definitions';\nimport { PlayerOp, playerOpFrom, \n  ChainOp, OpSequencer, PairedOp, PedalOpMapping,\n  makePairedOp, makeChainOp, makeOpSequencer,\n  forward, refresh, reverse\n} from './model/op_mappings';\nimport { PlayerState, WeavingPick, copyState, initState } from './model/state';\nimport { MappingsService } from './provider/mappings.service';\nimport { PedalsService, PedalStatus, Pedal } from './provider/pedals.service';\nimport { SequencerService } from './provider/sequencer.service';\n// import { OperationService } from '../mixer/provider/operation.service';\n\nexport interface DraftOperationClassification {\n  category: string,\n  dx: string,\n  ops: Array \n }\n\ninterface LoomConfig {\n  warps: number,\n  draftTiling: boolean\n}\n\n/**\n * @class PedalConfig\n * @desc OLD, UPDATE THIS ---> \n * Represents a set of two-way bindings between a set of Pedals\n * and a set of (Player)Operations. A pedal can only be bound to one\n * Action (a single Op, a chain of Ops, or to control an OpRoulette)\n * @todo The second restriction may change, it might make sense for pedals to\n * get bound to a sequence of operations.\n */\nclass PedalConfig {\n  // numPedals: number;\n  pedals: Array;\n  ops: Array;\n  availPedals: Array;\n  mapping: PedalOpMapping;\n\n  constructor(pedalArray: Array, loadConfig = false) {\n    this.pedals = pedalArray;\n    this.ops = []\n    this.availPedals = pedalArray.map((p) => p.id);\n    this.mapping = [];\n  }\n\n  get numPedals() {\n    return this.pedals.length;\n  }\n\n  get numMappings() {\n    return Object.entries(this.mapping).length;\n  }\n\n  addPedal(p: Pedal) {\n    // this.pedals.push(p);\n    this.availPedals.push(p.id);\n  }\n\n  remPedal() {\n    // this.pedals.pop();\n    this.availPedals.filter((id) => id != this.pedals.length);\n  }\n\n  addOperation(o: PlayerOp, chain?: boolean) {\n    o.id = this.ops.length;\n    this.ops.push(o);\n    if (chain) {\n      o.chain = chain;\n    }\n    // this.unpairedOps.push(o);\n    // console.log(this.ops);\n  }\n\n  pair(pedalId: number, opName: string) {\n    let o = this.ops.findIndex((op) => op.name == opName);\n    // let thisOp = this.unpairedOps.splice(o, 1);\n    let thisOp = this.ops;\n    this.mapping[pedalId] = makePairedOp(pedalId, thisOp[o]); \n  }\n\n  chain(pedalId: number, opName: string) {\n    let o = this.ops[this.ops.findIndex((op) => op.name == opName)];\n    if (this.pedalIsChained(pedalId)) {\n      let curr_ops = ( this.mapping[pedalId]).ops;\n      this.mapping[pedalId] = makeChainOp(curr_ops.concat([o]), pedalId);\n    } else if (this.pedalIsPaired(pedalId)) {\n      let first_op = ( this.mapping[pedalId]).op;\n      this.mapping[pedalId] = makeChainOp([first_op].concat([o]), pedalId);\n    } else {\n      this.mapping[pedalId] = makeChainOp([o], pedalId);\n    }\n  }\n\n  chainToPedal(pedalId: number, ops: Array) {\n    let op_array = ops.map((name) => this.ops[this.ops.findIndex((op) => op.name == name)]);\n    if (this.pedalIsChained(pedalId)) { \n      // if pedal already has a chain, add ops to the chain\n      let curr_ops = ( this.mapping[pedalId]).ops;\n      this.mapping[pedalId] = makeChainOp(curr_ops.concat(op_array), pedalId);\n    } else if (this.pedalIsPaired(pedalId)) {\n      // if pedal is paired, you can turn it into a chain\n      let first_op = ( this.mapping[pedalId]).op;\n      this.mapping[pedalId] = makeChainOp([first_op].concat(op_array), pedalId);\n    } else {\n      // pedal doesn't have anything mapped, just add a new chain\n      this.mapping[pedalId] = makeChainOp(op_array, pedalId);\n    }\n  }\n\n  // will return true if an op is mapped to a pedal in any way\n  opIsMapped(opName: string): boolean {\n    if (this.mapping.filter((m) => m.name.includes(opName)).length > 0) {\n      return true;\n    } else return false;\n  }\n\n  pedalIsMapped(id: number) {\n    return (this.mapping[id]);\n  }\n\n  pedalIsChained(id: number) {\n    if (this.pedalIsMapped(id) && this.mapping[id].name.startsWith('ch')) { return true; }\n    else {return false; }\n  }\n\n  pedalIsPaired(id: number) {\n    return (this.pedalIsMapped(id) && !this.pedalIsChained(id));\n  }\n\n  unpairPedal(id: number) {\n    console.log(`unpairing pedal ${id}`);\n    // let op = this.pairs[id];\n    // this.unpairedOps.splice(op.id, 0, op);\n    delete this.mapping[id];\n  }\n\n  // unpairOp(name: string) {\n  //   let pid = this.opIsPaired(name);\n  //   this.unpairPedal(pid);\n  // }\n}\n\n/**\n * The Draft Player Service is in charge of updating the the global PlayerState and tracking where the weaver is in the draft.\n */\n@Injectable({\n  providedIn: 'root'\n})\nexport class PlayerService {\n  state: PlayerState;\n  loom: LoomConfig;\n  redraw = new EventEmitter();\n  draftClassification: Array = [];\n\n  constructor(\n    public pedals: PedalsService,\n    public mappings: MappingsService,\n    public seq: SequencerService,\n    // private oss: OperationService\n  ) {\n    // this.draft = null; \n    console.log(\"draft player constructor\");\n    // const startPattern = playerOpFrom(defs.tabby);\n    // console.log(startPattern);\n    // startPattern.perform(nullOpInput).then((result) => {\n    //   console.log(result);\n    //   this.setDraft(result[0]);\n    // });\n\n    this.state = initState();\n    this.state.draft = defs.tabby.perform([1]);\n\n    this.loom = { warps: 2640, draftTiling: true };\n\n    // load the draft progress ops\n    mappings.addOperation(forward);\n    mappings.addOperation(refresh);\n    mappings.addOperation(reverse);\n\n    function addOp(op: GenericOp, params?: Array) {\n      let p_op = params ? playerOpFrom(op, params) : playerOpFrom(op);\n      mappings.addOperation(p_op);\n      return p_op;\n    }\n\n    // load ops from the main mixer\n    const tabby = addOp(defs.tabby);\n    const twill = addOp(defs.twill);\n    const satin = addOp(defs.satin);\n    const waffle = addOp(defs.waffle);\n    const basket = addOp(defs.basket);\n    const rib = addOp(defs.rib);\n    const random = addOp(defs.random);\n    const rotate = addOp(defs.rotate);\n    const invert = addOp(defs.invert);\n    const shiftx = addOp(defs.shiftx);\n    const shifty = addOp(defs.shifty);\n    const slope = addOp(defs.slope);\n    const flipx = addOp(defs.flipx);\n    const flipy = addOp(defs.flipy);\n    const symm = addOp(defs.makesymmetric);\n    const stretch = addOp(defs.stretch);\n    const bindweft = addOp(defs.bindweftfloats);\n    const bindwarp = addOp(defs.bindwarpfloats);\n\n    const tile: PlayerOp = {\n      name: defs.tile.name,\n      perform: (init: PlayerState) => {\n        let res = copyState(init);\n        res.draft = defs.tile.perform([init.draft], [2, 2]);\n        res.row = init.row % wefts(res.draft.drawdown);\n        res.pedal = defs.tile.name;\n        return Promise.resolve(res);\n      }\n    }\n    mappings.addOperation(tile);\n\n    this.draftClassification.push(\n      {category: 'structure',\n      dx: \"0-1 input, 1 output, algorithmically generates weave structures based on parameters\",\n      ops: [tabby, twill, satin, waffle, random]}\n    );\n\n    this.draftClassification.push(\n      { category: 'custom structure',\n        dx: \"custom structures loaded from the Mixer\",\n        ops: []\n      }\n    );\n\n    this.draftClassification.push(\n      {category: 'transformation',\n      dx: \"1 input, 1 output, applies an operation to the input that transforms it in some way\",\n      ops: [invert, flipx, flipy, shiftx, shifty, rotate, slope, stretch, symm, tile, bindwarp, bindweft]}\n    );\n\n    // //test this\n    // console.log(this.oss.getOp('germanify'));\n    // const germanify = this.pedalOps.addOperation(playerOpFromTree( this.oss.getOp('germanify')));\n    \n    console.log('pedal ops added');\n\n    pedals.on('pedal-step', (id) => this.onPedal(id));\n\n    pedals.on('pedal-added', (n) => {\n      if (n == 1) {\n        mappings.pair(0, 'forward');\n        console.log(\"pedals mapping\", mappings);\n      } else if (n == 2) {\n        if (mappings.pedalIsMapped(0)) mappings.unmap(0);\n        mappings[0] = this.seq;\n        mappings[1] = this.seq;\n        this.seq.addPedals(0, 1);\n        console.log(\"pedals mapping\", mappings);\n      }\n    })\n  }\n\n  get readyToWeave() {  // need either one pedal forward or one pedal reverse, in order to progress through draft\n    return (this.pedals.readyToWeave && \n      (this.mappings.opIsMapped('forward') || this.mappings.opIsMapped('reverse') || this.seq.readyToWeave)\n    );\n  }\n\n  /** get whether or not the loom is weaving */\n  get weaving() {\n    return this.pedals.active_draft.val;\n  }\n  get draft() {\n    return this.state.draft;\n  }\n\n  hasCustomStructure(d: Draft): boolean {\n    let ops = this.draftClassification.filter((c) => c.category == \"custom structure\")[0].ops;\n    console.log(ops);\n    if (ops.length == 0) return false;\n    return ops\n      .map((el) => { return el.struct_id == d.id})\n      .reduce((a, b) => { return a || b; });\n  }\n\n  setDraft(d: Draft) {\n    if (!this.hasCustomStructure(d)) {\n      console.log(\"a new structure!\");\n      let structOps = this.draftClassification.filter((c) => c.category == \"custom structure\")[0].ops;\n      let op = this.structureOpFromDraft(d);\n      structOps.push(op);\n      this.mappings.addOperation(op);\n    }\n    this.state.draft = d;\n    this.state.row = 0;\n    // console.log(\"player has active draft\");\n    // console.log(\"draft is \", this.draft);\n    console.log(\"draft set \", this.state);\n  }\n\n  /**\n   * \n   * @param d the Draft to turn into a custom structure Operation\n   */\n  structureOpFromDraft(d: Draft) {\n    let structOp: PlayerOp = {\n      name: d.gen_name,\n      struct_id: d.id,\n      perform: (init: PlayerState) => {\n        let res = copyState(init);\n        res.draft = d;\n        res.row = init.row % wefts(d.drawdown);\n        return Promise.resolve(res);\n      }\n    };\n    return structOp;\n  }\n\n  // e is a string = op.name\n  setPedalOp(e: any, p: Pedal) {\n    console.log(e, p);\n    if (this.mappings.pedalIsPaired(p.id)) {\n      this.mappings.unmap(p.id);\n    }\n    this.mappings.pair(p.id, e);\n    console.log(\"pedals map\", this.mappings);\n  }\n\n  onPedal(id: number) {\n    console.log('player service: pedal ', id);\n    let mapped = this.mappings.getMap(id);\n    // console.log(this.mappings);\n    // console.log(this.seq);\n    if (mapped) {\n      console.log('mapping exists for pedal');\n      mapped.perform(this.state, id)\n      .then((state: PlayerState) => {\n        this.state = copyState(state);\n        console.log(this.state);\n        this.redraw.emit('redraw');\n        if (this.state.weaving) {\n          console.log(\"draft player: sending row\");\n          this.pedals.sendDraftRow(this.currentRow());\n        }\n      });\n    }\n  }\n\n  currentRow() {\n    let {draft, row} = this.state;\n    let draftRow = draft.drawdown[row % wefts(draft.drawdown)];\n    let data = \"\";\n\n    let targetLength = (this.loom.draftTiling ? this.loom.warps : draftRow.length);\n    while (data.length  {\n    //   if (state) {\n    //   }\n    // });\n  }\n}\n\n    \n\n\n\n\n\n\n\n\n\n                   \n    \n         results matching \"\"\n        \n    \n    \n        No results matching \"\"\n    \n\n"},"interfaces/LoomTypes.html":{"url":"interfaces/LoomTypes.html","title":"interface - LoomTypes","body":"\n                   \n\n\n\n\n\n\n\n\n\n\n\n\n\n\n  Interfaces\n  \n  LoomTypes\n\n\n\n        \n            Info\n        \n        \n            Source\n        \n\n\n\n    \n        \n            File\n        \n        \n            src/app/core/model/datatypes/selectlists.ts\n        \n\n\n            \n                Description\n            \n            \n                OBJECTS/TYPES to CONTROL SELECT LISTS\n\n            \n\n\n        \n            Index\n            \n                \n                    \n                        \n                            Properties\n                        \n                    \n                    \n                        \n                            \n                                \n                                        \n                                            value\n                                        \n                                \n                                \n                                        \n                                            viewValue\n                                        \n                                \n                            \n                        \n                    \n                \n            \n        \n\n\n\n            \n                Properties\n                    \n                        \n                                \n                                    \n                                        \n                                        value\n                                            \n                                                \n                                            \n                                        \n                                    \n                                \n                                \n                                    \n                                        value:         string\n\n                                    \n                                \n\n\n                                    \n                                        \n                                            Type :         string\n\n                                        \n                                    \n\n\n\n\n\n                        \n                    \n                    \n                        \n                                \n                                    \n                                        \n                                        viewValue\n                                            \n                                                \n                                            \n                                        \n                                    \n                                \n                                \n                                    \n                                        viewValue:         string\n\n                                    \n                                \n\n\n                                    \n                                        \n                                            Type :         string\n\n                                        \n                                    \n\n\n\n\n\n                        \n                    \n            \n    \n\n\n    \n        export interface LoomTypes {\n    value: string;\n    viewValue: string;\n  }\n  \n  export interface MaterialTypes {\n    value: number;\n    viewValue: string;\n  }\n  \n  export interface DensityUnits {\n    value: string;\n    viewValue: string;\n  }\n  \n  export interface ViewModes {\n    value: string;\n    viewValue: string;\n  }\n  \n  \n  /**\n   * Stores the icons and language for determining different \n   * modes within which the mouse points are handled\n   * @param value - reference \n   * @param viewValue - text shown to users\n   * @param icon\n   * @param children, menu to nest within this\n   * @param selected boolean to show if it is selected\n   */\n  export interface DesignMode {\n    value: string;\n    viewValue: string;\n    icon: string;\n    children: Array;\n    selected: boolean;\n  }\n  \n    \n\n\n\n\n\n\n\n\n\n                   \n    \n         results matching \"\"\n        \n    \n    \n        No results matching \"\"\n    \n\n"},"injectables/MappingsService.html":{"url":"injectables/MappingsService.html","title":"injectable - MappingsService","body":"\n                   \n\n\n\n\n\n\n\n\n\n  Injectables\n  MappingsService\n\n\n\n        \n            Info\n        \n        \n            Source\n        \n\n\n\n    \n        \n            File\n        \n        \n            src/app/player/provider/mappings.service.ts\n        \n\n\n            \n                Description\n            \n            \n                correspond to pedal ID's, and values (PedalActions) correspond\nto a mapped SingleOp, ChainOp, or OpSequencer.\n\n            \n\n            \n                Extends\n            \n            \n                    Array\n            \n\n\n            \n    Index\n    \n        \n                \n                    \n                        Properties\n                    \n                \n                \n                    \n                        \n                            \n                                availPedals\n                            \n                            \n                                index\n                            \n                            \n                                ops\n                            \n                            \n                                    Public\n                                pds\n                            \n                        \n                    \n                \n\n                \n                    \n                        Methods\n                    \n                \n                \n                    \n                        \n                            \n                                addOperation\n                            \n                            \n                                chain\n                            \n                            \n                                chainArray\n                            \n                            \n                                getMap\n                            \n                            \n                                getMapOptions\n                            \n                            \n                                getOp\n                            \n                            \n                                opIsMapped\n                            \n                            \n                                pair\n                            \n                            \n                                pedalInSequencer\n                            \n                            \n                                pedalIsChained\n                            \n                            \n                                pedalIsMapped\n                            \n                            \n                                pedalIsPaired\n                            \n                            \n                                setMap\n                            \n                            \n                                unmap\n                            \n                        \n                    \n                \n\n\n\n\n\n                    \n                        \n                            Accessors\n                        \n                    \n                    \n                        \n                            \n                                \n                                    sequencer\n                                \n                            \n                        \n                    \n        \n    \n\n\n            \n    Constructor\n        \n            \n                \n                    \nconstructor(pds: PedalsService, seq: SequencerService)\n                    \n                \n                        \n                            \n                                Defined in src/app/player/provider/mappings.service.ts:45\n                            \n                        \n\n                \n                    \n                            \n                                    Parameters :\n                                    \n                                        \n                                            \n                                                Name\n                                                    Type\n                                                Optional\n                                            \n                                        \n                                        \n                                                \n                                                        pds\n                                                  \n                                                        \n                                                                        PedalsService\n                                                        \n                                                  \n                                                    \n                                                            No\n                                                    \n                                                    \n                                                \n                                                \n                                                        seq\n                                                  \n                                                        \n                                                                        SequencerService\n                                                        \n                                                  \n                                                    \n                                                            No\n                                                    \n                                                    \n                                                \n                                        \n                                    \n                            \n                    \n                \n            \n        \n\n\n            \n    \n    \n        Methods\n    \n    \n        \n            \n                \n                    \n                    \n                        addOperation\n                        \n                    \n                \n            \n            \n                \naddOperation(o: SingleOp, chain?: boolean)\n                \n            \n\n\n            \n                \n                    Defined in src/app/player/provider/mappings.service.ts:90\n                \n            \n\n\n            \n                \n\n                    \n                        Parameters :\n                        \n                        \n                            \n                                \n                                    Name\n                                    Type\n                                    Optional\n                                \n                            \n                            \n                                \n                                    o\n                                    \n                                                SingleOp\n                                    \n\n                                    \n                                        No\n                                    \n\n\n                                \n                                \n                                    chain\n                                    \n                                                boolean\n                                    \n\n                                    \n                                        Yes\n                                    \n\n\n                                \n                            \n                        \n                    \n                    \n                    \n                    \n                        Returns :         void\n\n                    \n                    \n                        \n                    \n                \n            \n        \n    \n    \n        \n            \n                \n                    \n                    \n                        chain\n                        \n                    \n                \n            \n            \n                \nchain(id: number, opName: string)\n                \n            \n\n\n            \n                \n                    Defined in src/app/player/provider/mappings.service.ts:149\n                \n            \n\n\n            \n                \n\n                    \n                        Parameters :\n                        \n                        \n                            \n                                \n                                    Name\n                                    Type\n                                    Optional\n                                \n                            \n                            \n                                \n                                    id\n                                    \n                                                number\n                                    \n\n                                    \n                                        No\n                                    \n\n\n                                \n                                \n                                    opName\n                                    \n                                                string\n                                    \n\n                                    \n                                        No\n                                    \n\n\n                                \n                            \n                        \n                    \n                    \n                    \n                    \n                        Returns :         void\n\n                    \n                    \n                        \n                    \n                \n            \n        \n    \n    \n        \n            \n                \n                    \n                    \n                        chainArray\n                        \n                    \n                \n            \n            \n                \nchainArray(id: number, ops: Array)\n                \n            \n\n\n            \n                \n                    Defined in src/app/player/provider/mappings.service.ts:162\n                \n            \n\n\n            \n                \n\n                    \n                        Parameters :\n                        \n                        \n                            \n                                \n                                    Name\n                                    Type\n                                    Optional\n                                \n                            \n                            \n                                \n                                    id\n                                    \n                                                number\n                                    \n\n                                    \n                                        No\n                                    \n\n\n                                \n                                \n                                    ops\n                                    \n                                            Array\n                                    \n\n                                    \n                                        No\n                                    \n\n\n                                \n                            \n                        \n                    \n                    \n                    \n                    \n                        Returns :         void\n\n                    \n                    \n                        \n                    \n                \n            \n        \n    \n    \n        \n            \n                \n                    \n                    \n                        getMap\n                        \n                    \n                \n            \n            \n                \ngetMap(id: number)\n                \n            \n\n\n            \n                \n                    Defined in src/app/player/provider/mappings.service.ts:99\n                \n            \n\n\n            \n                \n\n                    \n                        Parameters :\n                        \n                        \n                            \n                                \n                                    Name\n                                    Type\n                                    Optional\n                                \n                            \n                            \n                                \n                                    id\n                                    \n                                                number\n                                    \n\n                                    \n                                        No\n                                    \n\n\n                                \n                            \n                        \n                    \n                    \n                    \n                    \n                        Returns :         any\n\n                    \n                    \n                        \n                    \n                \n            \n        \n    \n    \n        \n            \n                \n                    \n                    \n                        getMapOptions\n                        \n                    \n                \n            \n            \n                \ngetMapOptions(p: number)\n                \n            \n\n\n            \n                \n                    Defined in src/app/player/provider/mappings.service.ts:65\n                \n            \n\n\n            \n                \n\n                    \n                        Parameters :\n                        \n                        \n                            \n                                \n                                    Name\n                                    Type\n                                    Optional\n                                \n                            \n                            \n                                \n                                    p\n                                    \n                                                number\n                                    \n\n                                    \n                                        No\n                                    \n\n\n                                \n                            \n                        \n                    \n                    \n                    \n                    \n                        Returns :         Array\n\n                    \n                    \n                        \n                    \n                \n            \n        \n    \n    \n        \n            \n                \n                    \n                    \n                        getOp\n                        \n                    \n                \n            \n            \n                \ngetOp(name: string)\n                \n            \n\n\n            \n                \n                    Defined in src/app/player/provider/mappings.service.ts:190\n                \n            \n\n\n            \n                \n\n                    \n                        Parameters :\n                        \n                        \n                            \n                                \n                                    Name\n                                    Type\n                                    Optional\n                                \n                            \n                            \n                                \n                                    name\n                                    \n                                                string\n                                    \n\n                                    \n                                        No\n                                    \n\n\n                                \n                            \n                        \n                    \n                    \n                    \n                    \n                        Returns :         SingleOp\n\n                    \n                    \n                        \n                    \n                \n            \n        \n    \n    \n        \n            \n                \n                    \n                    \n                        opIsMapped\n                        \n                    \n                \n            \n            \n                \nopIsMapped(opName: string)\n                \n            \n\n\n            \n                \n                    Defined in src/app/player/provider/mappings.service.ts:183\n                \n            \n\n\n            \n                \n\n                    \n                        Parameters :\n                        \n                        \n                            \n                                \n                                    Name\n                                    Type\n                                    Optional\n                                \n                            \n                            \n                                \n                                    opName\n                                    \n                                                string\n                                    \n\n                                    \n                                        No\n                                    \n\n\n                                \n                            \n                        \n                    \n                    \n                    \n                    \n                        Returns :         boolean\n\n                    \n                    \n                        \n                    \n                \n            \n        \n    \n    \n        \n            \n                \n                    \n                    \n                        pair\n                        \n                    \n                \n            \n            \n                \npair(id: number, opName: string)\n                \n            \n\n\n            \n                \n                    Defined in src/app/player/provider/mappings.service.ts:141\n                \n            \n\n\n            \n                \n\n                    \n                        Parameters :\n                        \n                        \n                            \n                                \n                                    Name\n                                    Type\n                                    Optional\n                                \n                            \n                            \n                                \n                                    id\n                                    \n                                                number\n                                    \n\n                                    \n                                        No\n                                    \n\n\n                                \n                                \n                                    opName\n                                    \n                                                string\n                                    \n\n                                    \n                                        No\n                                    \n\n\n                                \n                            \n                        \n                    \n                    \n                    \n                    \n                        Returns :         void\n\n                    \n                    \n                        \n                    \n                \n            \n        \n    \n    \n        \n            \n                \n                    \n                    \n                        pedalInSequencer\n                        \n                    \n                \n            \n            \n                \npedalInSequencer(id: number)\n                \n            \n\n\n            \n                \n                    Defined in src/app/player/provider/mappings.service.ts:207\n                \n            \n\n\n            \n                \n\n                    \n                        Parameters :\n                        \n                        \n                            \n                                \n                                    Name\n                                    Type\n                                    Optional\n                                \n                            \n                            \n                                \n                                    id\n                                    \n                                                number\n                                    \n\n                                    \n                                        No\n                                    \n\n\n                                \n                            \n                        \n                    \n                    \n                    \n                    \n                        Returns :         boolean\n\n                    \n                    \n                        \n                    \n                \n            \n        \n    \n    \n        \n            \n                \n                    \n                    \n                        pedalIsChained\n                        \n                    \n                \n            \n            \n                \npedalIsChained(id: number)\n                \n            \n\n\n            \n                \n                    Defined in src/app/player/provider/mappings.service.ts:202\n                \n            \n\n\n            \n                \n\n                    \n                        Parameters :\n                        \n                        \n                            \n                                \n                                    Name\n                                    Type\n                                    Optional\n                                \n                            \n                            \n                                \n                                    id\n                                    \n                                                number\n                                    \n\n                                    \n                                        No\n                                    \n\n\n                                \n                            \n                        \n                    \n                    \n                    \n                    \n                        Returns :         boolean\n\n                    \n                    \n                        \n                    \n                \n            \n        \n    \n    \n        \n            \n                \n                    \n                    \n                        pedalIsMapped\n                        \n                    \n                \n            \n            \n                \npedalIsMapped(id: number)\n                \n            \n\n\n            \n                \n                    Defined in src/app/player/provider/mappings.service.ts:197\n                \n            \n\n\n            \n                \n\n                    \n                        Parameters :\n                        \n                        \n                            \n                                \n                                    Name\n                                    Type\n                                    Optional\n                                \n                            \n                            \n                                \n                                    id\n                                    \n                                                number\n                                    \n\n                                    \n                                        No\n                                    \n\n\n                                \n                            \n                        \n                    \n                    \n                    \n                    \n                        Returns :         boolean\n\n                    \n                    \n                        \n                    \n                \n            \n        \n    \n    \n        \n            \n                \n                    \n                    \n                        pedalIsPaired\n                        \n                    \n                \n            \n            \n                \npedalIsPaired(id: number)\n                \n            \n\n\n            \n                \n                    Defined in src/app/player/provider/mappings.service.ts:212\n                \n            \n\n\n            \n                \n\n                    \n                        Parameters :\n                        \n                        \n                            \n                                \n                                    Name\n                                    Type\n                                    Optional\n                                \n                            \n                            \n                                \n                                    id\n                                    \n                                                number\n                                    \n\n                                    \n                                        No\n                                    \n\n\n                                \n                            \n                        \n                    \n                    \n                    \n                    \n                        Returns :         boolean\n\n                    \n                    \n                        \n                    \n                \n            \n        \n    \n    \n        \n            \n                \n                    \n                    \n                        setMap\n                        \n                    \n                \n            \n            \n                \nsetMap(p: number, m: PedalAction)\n                \n            \n\n\n            \n                \n                    Defined in src/app/player/provider/mappings.service.ts:107\n                \n            \n\n\n            \n                \n\n                    \n                        Parameters :\n                        \n                        \n                            \n                                \n                                    Name\n                                    Type\n                                    Optional\n                                \n                            \n                            \n                                \n                                    p\n                                    \n                                                number\n                                    \n\n                                    \n                                        No\n                                    \n\n\n                                \n                                \n                                    m\n                                    \n                                                PedalAction\n                                    \n\n                                    \n                                        No\n                                    \n\n\n                                \n                            \n                        \n                    \n                    \n                    \n                    \n                        Returns :         void\n\n                    \n                    \n                        \n                    \n                \n            \n        \n    \n    \n        \n            \n                \n                    \n                    \n                        unmap\n                        \n                    \n                \n            \n            \n                \nunmap(id: number)\n                \n            \n\n\n            \n                \n                    Defined in src/app/player/provider/mappings.service.ts:127\n                \n            \n\n\n            \n                \n\n                    \n                        Parameters :\n                        \n                        \n                            \n                                \n                                    Name\n                                    Type\n                                    Optional\n                                \n                            \n                            \n                                \n                                    id\n                                    \n                                                number\n                                    \n\n                                    \n                                        No\n                                    \n\n\n                                \n                            \n                        \n                    \n                    \n                    \n                    \n                        Returns :         void\n\n                    \n                    \n                        \n                    \n                \n            \n        \n    \n\n            \n    \n    \n        Properties\n    \n    \n        \n            \n                \n                    \n                    \n                        availPedals\n                        \n                    \n                \n            \n                \n                    \n                        Type :     Array\n\n                    \n                \n                    \n                        \n                                Defined in src/app/player/provider/mappings.service.ts:41\n                        \n                    \n\n\n        \n    \n    \n        \n            \n                \n                    \n                    \n                        index\n                        \n                    \n                \n            \n                \n                    \n                        Type :         MappingIndex\n\n                    \n                \n                    \n                        \n                                Defined in src/app/player/provider/mappings.service.ts:45\n                        \n                    \n\n\n        \n    \n    \n        \n            \n                \n                    \n                    \n                        ops\n                        \n                    \n                \n            \n                \n                    \n                        Type :         Array\n\n                    \n                \n                \n                    \n                        Default value : []\n                    \n                \n                    \n                        \n                                Defined in src/app/player/provider/mappings.service.ts:40\n                        \n                    \n\n\n        \n    \n    \n        \n            \n                \n                    \n                    \n                            Public\n                        pds\n                        \n                    \n                \n            \n                \n                    \n                        Type :         PedalsService\n\n                    \n                \n                    \n                        \n                                Defined in src/app/player/provider/mappings.service.ts:48\n                        \n                    \n\n\n        \n    \n\n\n            \n    \n        Accessors\n    \n        \n            \n                \n                    \n                        \n                        sequencer\n                    \n                \n\n                \n                    \n                        getsequencer()\n                    \n                \n                            \n                                \n                                    Defined in src/app/player/provider/mappings.service.ts:59\n                                \n                            \n\n            \n        \n\n    \n\n\n    \n        import { Injectable } from '@angular/core';\nimport { Pedal, PedalsService } from './pedals.service';\nimport { PlayerService } from '../player.service';\nimport { PlayerOp as SingleOp, PedalOpMapping,\n  ChainOp, PairedOp, OpSequencer,\n  makeChainOp, makePairedOp, makeOpSequencer,\n  MappingShapes, MappingType, PedalAction\n} from '../model/op_mappings';\nimport { SequencerService } from './sequencer.service';\n\ntype PedalOpMap = {\n  [key: number]: { type: MappingType, i: number }\n}\n\ntype MappingIndex = {\n  [m in keyof MappingShapes]: Array;//Array;\n}\n\nfunction newMapIndex(): MappingIndex {\n  return {\n    'pairing': [],\n    'chain': [],\n    'sequencer': [],\n  }\n}\n\n/**\n * @class MappingsService (was PedalConfig class)\n * @desc A collection of key: value entries where keys (numbers)\n * correspond to pedal ID's, and values (PedalActions) correspond \n * to a mapped SingleOp, ChainOp, or OpSequencer.\n * @todo I WILL ASSUME THAT IF MULTIPLE PEDALS ARE MAPPED TO THE SAME THING, THE KEYS WILL POINT TO THE SAME OBJECT\n */\n\n@Injectable({\n  providedIn: 'root'\n})\nexport class MappingsService extends Array {\n  // pedals: Array;\n  ops: Array = [];\n  availPedals: Array;\n  // array: PedalOpMap = [];  // pedal ID (number)  op (PedalAction)\n  \n  // where all of the actual OpPairing, OpChain, OpSequencer objects end up so they are only created once\n  index: MappingIndex;\n\n  constructor(\n  public pds: PedalsService,\n  private seq: SequencerService,\n) { \n    super();\n    this.ops = [];\n    // this.availPedals = pds.pedals.array((p) => p.id);\n\n    // this.array = [];\n    // this.index = newMapIndex();\n  }\n\n  get sequencer(): OpSequencer {\n    let seq = this.filter((m) => m.name == \"sequencer\") as Array;\n    if (seq.length > 0) return seq[0];\n    else return undefined as OpSequencer;\n  }\n\n  getMapOptions(p: number): Array {\n    let res;\n    // if (this.pedalIsPaired(p)) {\n    //   console.log(\"filtering\");\n    //   console.log(this.getMap(p));\n    //   res = this.ops.filter(op => {\n    //   op.name != (this.getMap(p) as SingleOp).name;\n    // });\n    // } else { \n      res = this.ops; \n    // }\n    // console.log(res);\n    return res;\n  }\n\n  // onAddPedal(p: Pedal) {\n  //   this.availPedals.push(p.id);\n  // }\n\n  // onRemPedal() {\n  //   // this.pedals.pop();\n  //   this.availPedals.filter((id) => id != this.pedals.length);\n  // }\n\n  // register an operation from the Player to the options for mapping\n  addOperation(o: SingleOp, chain?: boolean) {\n    o.id = this.ops.length;\n    this.ops.push(o);\n    if (chain) { // chainable?\n      o.chain = chain;\n    };\n  }\n\n  // I don't know if I'm making this too complicated but I don't trust TypeScript/Javascript passing things by reference\n  getMap(id: number) {\n    return this[id];\n    // let x = this.array[id];\n    // if (x) {\n    //   return this.index[x.type][x.i];\n    // } else return undefined;\n  }\n\n  setMap(p: number, m: PedalAction) {\n    this[p] = m;\n    // if (this.getMap[p]) this.unmap(p);\n    \n    // const copyMap = ((src: number, dst: number) => {\n    //   if (this.getMap(dst)) this.unmap(dst);\n    //   this.array[dst] = this.array[src];\n    // }).bind(this);\n\n    // let ind = this.index[type].push(m) - 1;\n    // this.array[p] = { type: type, i: ind };\n    // if (type === 'sequencer') { // p_conf had been mapped\n    //   let r = m as OpSequencer;\n\n    //   // set mappings for the other roulette pedals to the same\n    //   copyMap(p, r.p_select_a);\n    //   if (r.p_select_b) copyMap(r.p_select_b);\n    // }\n  }\n  \n  unmap(id: number) {\n    console.log(`unmapping pedal ${id}`);\n    // let op = this.pairs[id];\n    // this.unpairedOps.splice(op.id, 0, op);\n    // let m = this.array[id];\n    // let u = this.index[m.type].splice(m.i, 1);\n    // if (m.type == \"sequencer\") {\n    //   let roul =  u[0];\n    //   delete this[roul.p_select_a];\n    //   if (roul.p_select_b) delete this[roul.p_select_b];\n    // }\n    delete this[id];\n  }\n\n  pair(id: number, opName: string) {\n    console.log(this.ops);\n    let o = this.getOp(opName);\n    console.log(o);\n    // let thisOp = this.unpairedOps.splice(o, 1);\n    this.setMap(id, makePairedOp(id, o));\n  }\n\n  chain(id: number, opName: string) {\n    let o = this.ops[this.ops.findIndex((op) => op.name == opName)];\n    if (this.pedalIsChained(id)) {\n      let curr_ops = ( this.getMap(id)).ops;\n      this.setMap(id, makeChainOp(curr_ops.concat([o]), id));\n    } else if (this.pedalIsPaired(id)) {\n      let first_op = ( this.getMap(id)).op;\n      this.setMap(id, makeChainOp([first_op].concat([o]), id));\n    } else {\n      this.setMap(id, makeChainOp([o], id));\n    }\n  }\n\n  chainArray(id: number, ops: Array) {\n    let op_array = ops.map((name) => this.ops[this.ops.findIndex((op) => op.name == name)]);\n    if (this.pedalIsChained(id)) { \n      // if pedal already has a chain, add ops to the chain\n      let curr_ops = ( this.getMap(id)).ops;\n      this.setMap(id, makeChainOp(curr_ops.concat(op_array), id));\n    } else if (this.pedalIsPaired(id)) {\n      // if pedal is paired, you can turn it into a chain\n      let first_op = ( this.getMap(id)).op;\n      this.setMap(id, makeChainOp([first_op].concat(op_array), id));\n    } else {\n      // pedal doesn't have anything mapped, just add a new chain\n      this.setMap(id, makeChainOp(op_array, id));\n    }\n  }\n\n  // makeOpSequencer(conf: number = 0, sel_fwd: number = 1, sel_back?: number, start_ops?: Array) {\n  //   this.setMap(\"sequencer\", conf, makeOpSequencer(conf, sel_fwd, sel_back, start_ops));\n  // }\n\n  // will return true if an op is mapped to a pedal in any way\n  opIsMapped(opName: string): boolean {\n    // let allMaps = this.index[\"roulette\"].concat(this.index[\"chain\"], this.index[\"pairing\"]);\n    if (this.filter((m) => m.name.includes(opName)).length > 0) {\n      return true;\n    } else return false;\n  }\n\n  getOp(name: string): SingleOp {\n    console.log(name);\n    let res = this.ops.filter((op) => op.name == name)[0];\n    console.log(res);\n    return res;\n  }\n\n  pedalIsMapped(id: number) {\n    if (this.getMap(id)) return true;\n    return false;\n  }\n\n  pedalIsChained(id: number) {\n    if (this[id].name.startsWith('ch')) { return true; }\n    else {return false; }\n  }\n\n  pedalInSequencer(id: number) {\n    if (this[id].name.startsWith('sequencer')) { return true; }\n    else { return false; }\n  }\n\n  pedalIsPaired(id: number) {\n    return (this.pedalIsMapped(id) && !this.pedalIsChained(id) && !this.pedalInSequencer(id));\n  }\n}\n\n    \n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n                   \n    \n         results matching \"\"\n        \n    \n    \n        No results matching \"\"\n    \n\n"},"directives/MarqueeComponent.html":{"url":"directives/MarqueeComponent.html","title":"directive - MarqueeComponent","body":"\n                   \n\n\n\n\n\n\n\n\n  Directives\n  MarqueeComponent\n\n\n\n        \n            Info\n        \n        \n            Source\n        \n\n\n\n    \n        \n            File\n        \n        \n            src/app/mixer/palette/marquee/marquee.component.ts\n        \n\n\n\n\n            \n                Implements\n            \n            \n                            OnInit\n            \n\n\n        \n            Metadata\n            \n                \n\n                    \n                        Selector\n                        app-marquee\n                    \n\n                \n            \n        \n\n            \n    Index\n    \n        \n                \n                    \n                        Properties\n                    \n                \n                \n                    \n                        \n                            \n                                active\n                            \n                            \n                                bounds\n                            \n                            \n                                draft\n                            \n                            \n                                filter\n                            \n                            \n                                id\n                            \n                            \n                                scale\n                            \n                            \n                                start\n                            \n                        \n                    \n                \n\n                \n                    \n                        Methods\n                    \n                \n                \n                    \n                        \n                            \n                                    Public\n                                getDraftId\n                            \n                            \n                                ngOnInit\n                            \n                            \n                                    Public\n                                setPositionAndSize\n                            \n                        \n                    \n                \n\n\n\n\n\n        \n    \n\n\n\n\n\n\n\n            \n    \n    \n        Methods\n    \n    \n        \n            \n                \n                    \n                    \n                        Public\n                        getDraftId\n                        \n                    \n                \n            \n            \n                \n                    \n                    getDraftId()\n                \n            \n\n\n            \n                \n                    Defined in src/app/mixer/palette/marquee/marquee.component.ts:31\n                \n            \n\n\n            \n                \n\n                    \n                        Returns :         any\n\n                    \n                \n            \n        \n    \n    \n        \n            \n                \n                    \n                    \n                        ngOnInit\n                        \n                    \n                \n            \n            \n                \nngOnInit()\n                \n            \n\n\n            \n                \n                    Defined in src/app/mixer/palette/marquee/marquee.component.ts:27\n                \n            \n\n\n            \n                \n\n                    \n                        Returns :         void\n\n                    \n                \n            \n        \n    \n    \n        \n            \n                \n                    \n                    \n                        Public\n                        setPositionAndSize\n                        \n                    \n                \n            \n            \n                \n                    \n                    setPositionAndSize(bounds: Bounds)\n                \n            \n\n\n            \n                \n                    Defined in src/app/mixer/palette/marquee/marquee.component.ts:36\n                \n            \n\n\n            \n                \n\n                    \n                        Parameters :\n                        \n                        \n                            \n                                \n                                    Name\n                                    Type\n                                    Optional\n                                \n                            \n                            \n                                \n                                    bounds\n                                    \n                                                Bounds\n                                    \n\n                                    \n                                        No\n                                    \n\n\n                                \n                            \n                        \n                    \n                    \n                    \n                    \n                        Returns :         void\n\n                    \n                    \n                        \n                    \n                \n            \n        \n    \n\n            \n    \n    \n        Properties\n    \n    \n        \n            \n                \n                    \n                    \n                        active\n                        \n                    \n                \n            \n                \n                    \n                        Default value : false\n                    \n                \n                    \n                        \n                                Defined in src/app/mixer/palette/marquee/marquee.component.ts:23\n                        \n                    \n\n\n        \n    \n    \n        \n            \n                \n                    \n                    \n                        bounds\n                        \n                    \n                \n            \n                \n                    \n                        Type :         Bounds\n\n                    \n                \n                \n                    \n                        Default value : {\n    topleft: {x: 0, y:0},\n    width: 0,\n    height: 0\n  }\n                    \n                \n                    \n                        \n                                Defined in src/app/mixer/palette/marquee/marquee.component.ts:16\n                        \n                    \n\n\n        \n    \n    \n        \n            \n                \n                    \n                    \n                        draft\n                        \n                    \n                \n            \n                \n                    \n                        Type :         Draft\n\n                    \n                \n                \n                    \n                        Default value : initDraftWithParams({ud_name: \"selection\"})\n                    \n                \n                    \n                        \n                                Defined in src/app/mixer/palette/marquee/marquee.component.ts:14\n                        \n                    \n\n\n        \n    \n    \n        \n            \n                \n                    \n                    \n                        filter\n                        \n                    \n                \n            \n                \n                    \n                        Type :         string\n\n                    \n                \n                \n                    \n                        Default value : \"or\"\n                    \n                \n                    \n                        \n                                Defined in src/app/mixer/palette/marquee/marquee.component.ts:25\n                        \n                    \n\n\n        \n    \n    \n        \n            \n                \n                    \n                    \n                        id\n                        \n                    \n                \n            \n                \n                    \n                        Type :         number\n\n                    \n                \n                    \n                        \n                                Defined in src/app/mixer/palette/marquee/marquee.component.ts:13\n                        \n                    \n\n\n        \n    \n    \n        \n            \n                \n                    \n                    \n                        scale\n                        \n                    \n                \n            \n                \n                    \n                        Type :         number\n\n                    \n                \n                    \n                        \n                                Defined in src/app/mixer/palette/marquee/marquee.component.ts:24\n                        \n                    \n\n\n        \n    \n    \n        \n            \n                \n                    \n                    \n                        start\n                        \n                    \n                \n            \n                \n                    \n                        Type :         Interlacement\n\n                    \n                \n                \n                    \n                        Default value : {i: 0, j:0, si: 0}\n                    \n                \n                    \n                        \n                                Defined in src/app/mixer/palette/marquee/marquee.component.ts:22\n                        \n                    \n\n\n        \n    \n\n\n\n    \n\n\n    \n        import { Directive, OnInit } from '@angular/core';\nimport { initDraftWithParams } from '../../../core/model/drafts';\nimport { Draft } from '../../../core/model/datatypes';\nimport { Point, Bounds, Interlacement } from '../../../core/model/datatypes';\n\n@Directive({\n  selector: 'app-marquee'\n})\n\n\nexport class MarqueeComponent implements OnInit{\n\n  id: number;\n  draft: Draft = initDraftWithParams({ud_name: \"selection\"});\n\n  bounds:Bounds = {\n    topleft: {x: 0, y:0},\n    width: 0,\n    height: 0\n  }\n\n  start:Interlacement = {i: 0, j:0, si: 0};\n  active = false;\n  scale: number; \n  filter = \"or\"\n\n  ngOnInit(){\n    console.log(this.draft.id);\n  }\n\n  public getDraftId(){\n    return this.draft.id;\n  }\n\n\n  public setPositionAndSize(bounds: Bounds){\n    this.bounds  = bounds;\n  }\n\n\n\n}\n\n    \n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n                   \n    \n         results matching \"\"\n        \n    \n    \n        No results matching \"\"\n    \n\n"},"interfaces/MaterialTypes.html":{"url":"interfaces/MaterialTypes.html","title":"interface - MaterialTypes","body":"\n                   \n\n\n\n\n\n\n\n\n\n\n\n\n\n\n  Interfaces\n  \n  MaterialTypes\n\n\n\n        \n            Info\n        \n        \n            Source\n        \n\n\n\n    \n        \n            File\n        \n        \n            src/app/core/model/datatypes/selectlists.ts\n        \n\n\n\n\n        \n            Index\n            \n                \n                    \n                        \n                            Properties\n                        \n                    \n                    \n                        \n                            \n                                \n                                        \n                                            value\n                                        \n                                \n                                \n                                        \n                                            viewValue\n                                        \n                                \n                            \n                        \n                    \n                \n            \n        \n\n\n\n            \n                Properties\n                    \n                        \n                                \n                                    \n                                        \n                                        value\n                                            \n                                                \n                                            \n                                        \n                                    \n                                \n                                \n                                    \n                                        value:         number\n\n                                    \n                                \n\n\n                                    \n                                        \n                                            Type :         number\n\n                                        \n                                    \n\n\n\n\n\n                        \n                    \n                    \n                        \n                                \n                                    \n                                        \n                                        viewValue\n                                            \n                                                \n                                            \n                                        \n                                    \n                                \n                                \n                                    \n                                        viewValue:         string\n\n                                    \n                                \n\n\n                                    \n                                        \n                                            Type :         string\n\n                                        \n                                    \n\n\n\n\n\n                        \n                    \n            \n    \n\n\n    \n        export interface LoomTypes {\n    value: string;\n    viewValue: string;\n  }\n  \n  export interface MaterialTypes {\n    value: number;\n    viewValue: string;\n  }\n  \n  export interface DensityUnits {\n    value: string;\n    viewValue: string;\n  }\n  \n  export interface ViewModes {\n    value: string;\n    viewValue: string;\n  }\n  \n  \n  /**\n   * Stores the icons and language for determining different \n   * modes within which the mouse points are handled\n   * @param value - reference \n   * @param viewValue - text shown to users\n   * @param icon\n   * @param children, menu to nest within this\n   * @param selected boolean to show if it is selected\n   */\n  export interface DesignMode {\n    value: string;\n    viewValue: string;\n    icon: string;\n    children: Array;\n    selected: boolean;\n  }\n  \n    \n\n\n\n\n\n\n\n\n\n                   \n    \n         results matching \"\"\n        \n    \n    \n        No results matching \"\"\n    \n\n"},"classes/Merge.html":{"url":"classes/Merge.html","title":"class - Merge","body":"\n                   \n\n\n\n\n\n\n\n\n\n\n\n\n\n  Classes\n  Merge\n\n\n\n        \n            Info\n        \n        \n            Source\n        \n\n\n\n    \n        \n            File\n        \n        \n            src/app/mixer/model/operation/topology.ts\n        \n\n\n            \n                Description\n            \n            \n                Operation that takes many (N) inputs and generates one output draft.\n\nINPUT: Array of Drafts\nOUTPUT: exactly one Draft\n\n\n            \n\n\n            \n                Implements\n            \n            \n                            TopologyDef\n            \n\n\n            \n    Index\n    \n        \n                \n                    \n                        Properties\n                    \n                \n                \n                    \n                        \n                            \n                                input\n                            \n                            \n                                output\n                            \n                            \n                                type\n                            \n                        \n                    \n                \n\n\n\n\n\n\n        \n    \n\n\n\n            \n    \n    \n        Properties\n    \n    \n        \n            \n                \n                    \n                    \n                        input\n                        \n                    \n                \n            \n                \n                    \n                        Type :         InletDrafts | Array\n\n                    \n                \n                    \n                        \n                                Defined in src/app/mixer/model/operation/topology.ts:65\n                        \n                    \n\n\n        \n    \n    \n        \n            \n                \n                    \n                    \n                        output\n                        \n                    \n                \n            \n                \n                    \n                        Type :         Draft\n\n                    \n                \n                    \n                        \n                                Defined in src/app/mixer/model/operation/topology.ts:65\n                        \n                    \n\n\n        \n    \n    \n        \n            \n                \n                    \n                    \n                        type\n                        \n                    \n                \n            \n                    \n                        \n                                Defined in src/app/mixer/model/operation/topology.ts:65\n                        \n                    \n\n\n        \n    \n\n\n\n\n\n\n\n\n    \n\n\n    \n        import { Draft } from \"../../../core/model/datatypes\";\nimport { ParamValue, OperationParam as OpParam, getParamValues } from \"./params\";\nimport { OperationInlet as OpInlet, InletDrafts } from \"./inlets\";\n\n/**\n* At its heart, an Operation is a very fancy function that outputs a Draft or several Drafts.\n* The function itself is perform(), and the Operation can take inputs in the form of \n* Drafts (inlets) or Parameters (params).\n*/\n\n/** \n* Types that an Operation's perform() function can handlle as input/output\n*/\n\n/** @type Union of types that can serve as input to Operation perform() functions. */\nexport type PerformDraftInput = InletDrafts | Array | Draft | null;\n\ntype MultiDraftInput = InletDrafts | Array;\n\n/** @type Union of types that Operation perform() functions can output. */\nexport type PerformOutput = Array | Draft;\n\n/**\n * OPERATION TOPOLOGY\n * Topology refers to the shape of the Operation in terms of its\n * number of input and output Drafts. Classifies Operations.\n */\n\nexport const TopologyName = {\n  pipe: 'pipe', \n  seed: 'seed', \n  merge: 'merge', \n  branch: 'branch', \n  bus: 'bus'\n} as const;\nexport type TopologyName = keyof typeof TopologyName;\n\ninterface TopologyDef { type: TopologyName; input: PerformDraftInput; output: PerformOutput; };\n\n/**\n* @class\n* Operation that can generate a draft with no inputs, may take an optional input\n* @method perform OpPerform function: \n* - INPUT: zero or one Draft\n* - OUTPUT: exactly one Draft\n*/\nexport class Seed implements TopologyDef { type: 'seed'; input: Draft | null; output: Draft; };\n\n/**\n* @class\n* Operation that takes one input and generates one output draft. \n* @method perform OpPerform function: \n* - INPUT: exactly one Draft\n* - OUTPUT: exactly one Draft\n*/\nexport class Pipe implements TopologyDef { type: 'pipe'; input: Draft; output: Draft; };\n\n/**\n* @class\n* Operation that takes many (N) inputs and generates one output draft.\n* @method perform OpPerform function: \n* - INPUT: Array of Drafts\n* - OUTPUT: exactly one Draft\n*/\nexport class Merge implements TopologyDef { type: 'merge'; input: InletDrafts | Array; output: Draft; };\n\n/**\n* @class\n* Operation that takes one input and generates many (N) output drafts.\n* @method perform OpPerform function:\n* - INPUT: exactly one Draft\n* - OUTPUT: Array of Drafts\n*/\nexport class Branch implements TopologyDef { type: 'branch'; input: Draft; output: Array; };\n\n/**\n* CURRENTLY UNUSED\n* @class\n* Operation that takes many (N) inputs and generates many (M) output drafts.\n* Number of inputs does not necessarily match number of outputs (N ?= M).\n* @method perform OpPerform function:  \n* - INPUT: Array of Drafts\n* - OUTPUT: Array of Drafts\n*/\nexport class Bus implements TopologyDef { type: 'bus'; input: Array | InletDrafts; output: Array; };\n\ntype TopologyIndex = {\n  'seed': Seed,\n  'pipe': Pipe,\n  'merge': Merge,\n  'branch': Branch,\n  'bus': Bus\n}\ntype OpTopology = TopologyIndex[TopologyName];\n\n/**\n * OPERATION CONSTRAINT\n * A Constraint on an Operation classifies it based on its\n * input requirements (both Drafts and Params).\n */\n\nexport const ConstraintOptions = {\n  req: 'req', \n  opt: 'opt', \n  none: 'none'\n} as const;\nexport type ConstraintOptions = keyof typeof ConstraintOptions;\n\nexport const ConstraintName = {\n  no_drafts: { input_drafts: 'none', input_params: 'req' }, \n  no_params: { input_drafts: 'req', input_params: 'none' }, \n  drafts_opt: { input_drafts: 'opt', input_params: 'req' }, \n  params_opt: { input_drafts: 'req', input_params: 'opt' }, \n  all_req: {input_drafts: 'req', input_params: 'req' },\n} as const;\ntype ConstraintName = keyof typeof ConstraintName;\n\ntype ConstraintDefs = {\n  [C in keyof typeof ConstraintName]: {\n    constraint: C;\n    input_drafts: typeof ConstraintName[C][\"input_drafts\"];\n    input_params: typeof ConstraintName[C][\"input_params\"];\n  }\n}\n\nexport type NoDrafts = ConstraintDefs[\"no_drafts\"];\nexport type NoParams = ConstraintDefs[\"no_params\"];\nexport type DraftsOptional = ConstraintDefs[\"drafts_opt\"];\nexport type ParamsOptional = ConstraintDefs[\"params_opt\"];\nexport type AllRequired = ConstraintDefs[\"all_req\"];\n\ntype ConstraintIndex = {\n  'no_drafts': NoDrafts, // does not accept input drafts\n  'no_params': NoParams, // does not accept params\n  'drafts_opt': DraftsOptional, // can take no params -- has default values\n  'params_opt': ParamsOptional, // can take zero input drafts\n  'all_req': AllRequired, // both inputs and params required\n}\ntype OpConstraint = ConstraintIndex[ConstraintName]; \n\n/** \n* Generic types for perform() functions, describing options \n* for input draft multiplicity (0, 1, N) and param requirement \n*/\n\ntype NoDraftsPerform = {(params: Array): Topo[\"output\"]};\ntype NoParamsPerform = {(inputs: Topo[\"input\"]): Topo[\"output\"]};\ntype ParamsOptionalPerform = {(inputs: Topo[\"input\"], params?: Array): Topo[\"output\"]}; \ntype DraftsOptionalPerform = {(params: Array, inputs?: Topo[\"input\"]): Topo[\"output\"]};  \ntype AllRequiredPerform = {(inputs: Topo[\"input\"], params: Array): Topo[\"output\"]};  \n\ntype PerformCallSigs = {\n  no_drafts: { [Topo in keyof TopologyIndex]: NoDraftsPerform; },\n  no_params: { [Topo in keyof TopologyIndex]: NoParamsPerform; },\n  drafts_opt: { [Topo in keyof TopologyIndex]: DraftsOptionalPerform; },\n  params_opt: { [Topo in keyof TopologyIndex]: ParamsOptionalPerform; },\n  all_req: { [Topo in keyof TopologyIndex]: AllRequiredPerform; }\n}\n\n/**\n * @interface OpClassifier\n * Key-value pairs for an Operation's Topology and Constraint.\n */\ninterface OpClassifier {\n  type: Topo[\"type\"] | '';\n  input_drafts: Constraint[\"input_drafts\"] | '';\n  input_params: Constraint[\"input_params\"] | '';\n}\n\n/** @type User-defined descriptive strings for any Operation. */\ntype OperationDescriptors = { name: string, displayname: string, dx: string };\n\n/**\n* A standard Operation's metadata -- i.e. everything not the perform() function\n* @param name the internal name of this opearation (CHANGING THESE WILL BREAK LEGACY VERSIONS)\n* @param displayname the name to show upon this operation\n* @param dx the description of this operation\n* @param max_inputs the maximum number of inputs (drafts) allowed directly into this operation\n* @param params the parameters associated with this operation\n* @method perform an OpPerform function\n*/\nexport interface OperationProperties extends OperationDescriptors {\n  max_inputs: number,\n  default_params?: Array;\n  params: Array,\n}\n\n/**\n * @type A function that serves as the perform() method for an Operation. \n * This generic type requires two type parameters:\n * @param Topo one of the PerformInput types\n * @param Constraint one of the PerformOutput types\n *\n * OpPerform to give call signature for perform() function \n * Topo  = Seed | Pipe | Merge | Branch | Bus\n * Constraint = NoDrafts | NoParams | DraftsOptional | ParamsOptional | AllRequired\n */\nexport type OpPerform = PerformCallSigs[Constraint[\"constraint\"]][Topo[\"type\"]];\n// type PerformArgs = Parameters>;\n\n/** TODO doublecheck inlets have been added correctly (fields for input drafts) */\nexport class BaseOp implements OperationProperties {\n  name: string;\n  old_names: Array;\n  displayname: string;\n  dx: string;\n  params: Array;\n  inlets: Array;\n  default_params?: Array;\n  max_inputs: number;\n  classifier: OpClassifier;\n  perform: OpPerform;\n\n  /** @constructor create an Operation using an object literal (keys and values) */\n  constructor (args: OpConstructorArgs);\n  /** @constructor create an Operation using direct arguments in the constructor (values only) */\n  constructor (...args: OpConstructorArray);\n  constructor (name: string, displayname: string, dx: string, perform: OpPerform);\n  constructor (name: string, displayname: string, dx: string, params: Array, perform: OpPerform);\n  constructor (nameOrArgs: any, displayname?: string, dx?: string, performOrParams?: OpPerform | Array, performWithParams?: OpPerform) {\n    // console.log((nameOrArgs.name != undefined));\n    this.classifier = { type: '', input_drafts: '', input_params: '' };\n    if (nameOrArgs.name) {\n      let args = nameOrArgs;\n      this.name = args.name;\n      this.displayname = args.displayname;\n      this.dx = args.dx;\n      this.perform = args.perform;\n      if (args.params) this.params = args.params;\n      else this.params = [];\n      if (args.inlets) this.inlets = args.inlets;\n      else this.inlets = [];\n    } else {\n      this.name = nameOrArgs;\n      this.displayname = displayname;\n      this.dx = dx;\n      if (performWithParams) {\n        let params = > performOrParams;\n        this.params = params;\n        this.default_params = getParamValues(params);\n        this.perform = performWithParams;\n      } else {\n        this.params = [];\n        this.perform = > performOrParams;\n      }\n    }\n  }\n\n  constrain(c: ConstraintName): void {\n    if (c == 'no_drafts') { this.max_inputs = 0; this.inlets = []; }\n    this.classifier.input_drafts = ConstraintName[c][\"input_drafts\"]; \n    this.classifier.input_params = ConstraintName[c][\"input_params\"];\n  }\n\n  type(t: TopologyName): BaseOp {\n    this.classifier.type = t;\n    return this;\n  }\n}\n\ntype ConstructorArgKeysIndex = {\n  [C in keyof ConstraintIndex]: C extends \"no_params\" ? {\n    [T in keyof TopologyIndex]: {\n      name: string, displayname: string, dx: string, old_names: string[],\n      inlets: OpInlet[], perform: OpPerform\n    }\n  } : C extends \"no_drafts\" ? {\n    [T in keyof TopologyIndex]: {\n      name: string, displayname: string, dx: string, old_names: string[],\n      params: OpParam[], perform: OpPerform\n    }\n  } : {\n    [T in keyof TopologyIndex]: {\n      name: string, displayname: string, dx: string, old_names: string[],\n      params: OpParam[], inlets: OpInlet[],\n      perform: OpPerform\n    }\n  }\n}\n\ntype ConstructorArrayIndex = {\n  [C in keyof ConstraintIndex]: C extends \"no_params\" ? {\n    [T in keyof TopologyIndex]: [\n      name: string, displayname: string, dx: string, old_names: string[],\n      inlets: OpInlet[], perform: OpPerform\n    ]\n  } : C extends \"no_drafts\" ? {\n    [T in keyof TopologyIndex]: [\n      name: string, displayname: string, dx: string, old_names: string[],\n      params: OpParam[], perform: OpPerform\n    ]\n  } : {\n    [T in keyof TopologyIndex]: [\n      name: string, displayname: string, dx: string, old_names: string[],\n      params: OpParam[], inlets: OpInlet[],\n      perform: OpPerform\n    ]\n  }\n}\n\ntype OpConstructorArgKeys = \nConstructorArgKeysIndex[Constraint[\"constraint\"]][Topo[\"type\"]];\n\ntype OpConstructorArray = \nConstructorArrayIndex[Constraint[\"constraint\"]][Topo[\"type\"]];\n\ntype OpConstructorArgs = \nOpConstructorArgKeys | OpConstructorArray;\n\n// use factory design pattern to apply classifiers to BaseOp?? Is this too convoluted\n// https://refactoring.guru/design-patterns/abstract-factory/typescript\nclass AbstractOpFactory {\n  NoDrafts(args: OpConstructorArgKeys): BaseOp;\n  NoDrafts(...args: OpConstructorArray): BaseOp;\n  NoDrafts(...args: any) {\n    let op = new BaseOp(...args);\n    op.constrain(\"no_drafts\");\n    return op;\n  }\n\n  NoParams(args: OpConstructorArgKeys): BaseOp;\n  NoParams(...args: OpConstructorArray): BaseOp;\n  NoParams(...args: any) {\n    let op = new BaseOp(...args);\n    op.constrain(\"no_params\");\n    return op;\n  }\n\n  DraftsOptional(args: OpConstructorArgKeys): BaseOp;\n  DraftsOptional(...args: OpConstructorArray): BaseOp;\n  DraftsOptional(...args: any) {\n    let op = new BaseOp(...args);\n    op.constrain(\"drafts_opt\");\n    return op;\n  }\n\n  ParamsOptional(args: OpConstructorArgKeys): BaseOp;\n  ParamsOptional(...args: OpConstructorArray): BaseOp;\n  ParamsOptional(...args: any) {\n    let op = new BaseOp(...args);\n    op.constrain(\"params_opt\");\n    return op;\n  }\n\n  AllRequired(args: OpConstructorArgKeys): BaseOp;\n  AllRequired(...args: OpConstructorArray): BaseOp;\n  AllRequired(...args: any) {\n    let op = new BaseOp(...args);\n    op.constrain(\"all_req\");\n    return op;\n  }\n}\n\n// combine with mix-ins design pattern (link: TypeScript docs website)\nfunction makeTopoFactory(topo: TopologyName) {\n  return class TopologyFactory extends AbstractOpFactory {\n    static base = new AbstractOpFactory();\n    \n    static NoDrafts(args: OpConstructorArgKeys): BaseOp;\n    static NoDrafts(...args: OpConstructorArray): BaseOp;\n    static NoDrafts(...args: any) {\n      return this.base.NoDrafts(...args).type(topo);\n    }\n\n    static NoParams(args: OpConstructorArgKeys): BaseOp;\n    static NoParams(...args: OpConstructorArray): BaseOp;\n    static NoParams(...args: any) {\n      return this.base.NoParams(...args).type(topo);\n    }\n\n    static DraftsOptional(args: OpConstructorArgKeys): BaseOp;\n    static DraftsOptional(...args: OpConstructorArray): BaseOp;\n    static DraftsOptional(...args: any) {\n      return this.base.DraftsOptional(...args).type(topo);\n    }\n\n    static ParamsOptional(args: OpConstructorArgKeys): BaseOp;\n    static ParamsOptional(...args: OpConstructorArray): BaseOp;\n    static ParamsOptional(...args: any) {\n      return this.base.ParamsOptional(...args).type(topo);\n    }\n\n    static AllRequired(args: OpConstructorArgKeys): BaseOp;\n    static AllRequired(...args: OpConstructorArray): BaseOp;\n    static AllRequired(...args: any) {\n      return this.base.AllRequired(...args).type(topo);\n    }\n  }\n}\n\nexport const OpFactories = {\n  Seed: makeTopoFactory(\"seed\"),\n  Pipe: makeTopoFactory(\"pipe\"),\n  Merge: makeTopoFactory(\"merge\"),\n  Branch: makeTopoFactory(\"merge\"),\n  Bus: makeTopoFactory(\"bus\"),\n}\n\n// export const SeedOperation = makeTopoFactory(\"seed\");\n// export const PipeOperation = makeTopoFactory(\"pipe\");\n// export const MergeOperation = makeTopoFactory(\"merge\");\n// export const BranchOperation = makeTopoFactory(\"merge\");\n// export const BusOperation = makeTopoFactory(\"bus\");\n\ntype TopologyOpIndex = {\n  [T in keyof TopologyIndex]: {\n    [C in keyof ConstraintIndex]: BaseOp;\n  }\n}\n\nexport type BuildableOperation = TopologyOpIndex[TopologyName][ConstraintName];\n    \n\n\n\n\n\n\n\n\n\n\n                   \n    \n         results matching \"\"\n        \n    \n    \n        No results matching \"\"\n    \n\n"},"modules/MixerModule.html":{"url":"modules/MixerModule.html","title":"module - MixerModule","body":"\n                   \n\n\n\n\n    Modules\n    MixerModule\n\n\n\n    \n        \n\n\n\n\n\ndependencies\n\ndependencies\n\ncluster_MixerModule\n\n\n\ncluster_MixerModule_imports\n\n\n\ncluster_MixerModule_declarations\n\n\n\n\nConnectionComponent\n\nConnectionComponent\n\n\n\nMixerModule\n\nMixerModule\n\nMixerModule -->\n\nConnectionComponent->MixerModule\n\n\n\n\n\nDraftdetailComponent\n\nDraftdetailComponent\n\nMixerModule -->\n\nDraftdetailComponent->MixerModule\n\n\n\n\n\nImageComponent\n\nImageComponent\n\nMixerModule -->\n\nImageComponent->MixerModule\n\n\n\n\n\nInletComponent\n\nInletComponent\n\nMixerModule -->\n\nInletComponent->MixerModule\n\n\n\n\n\nMarqueeComponent\n\nMarqueeComponent\n\nMixerModule -->\n\nMarqueeComponent->MixerModule\n\n\n\n\n\nMixerComponent\n\nMixerComponent\n\nMixerModule -->\n\nMixerComponent->MixerModule\n\n\n\n\n\nMixerViewComponent\n\nMixerViewComponent\n\nMixerModule -->\n\nMixerViewComponent->MixerModule\n\n\n\n\n\nNoteComponent\n\nNoteComponent\n\nMixerModule -->\n\nNoteComponent->MixerModule\n\n\n\n\n\nOpHelpModal\n\nOpHelpModal\n\nMixerModule -->\n\nOpHelpModal->MixerModule\n\n\n\n\n\nOperationComponent\n\nOperationComponent\n\nMixerModule -->\n\nOperationComponent->MixerModule\n\n\n\n\n\nOpsComponent\n\nOpsComponent\n\nMixerModule -->\n\nOpsComponent->MixerModule\n\n\n\n\n\nPaletteComponent\n\nPaletteComponent\n\nMixerModule -->\n\nPaletteComponent->MixerModule\n\n\n\n\n\nParameterComponent\n\nParameterComponent\n\nMixerModule -->\n\nParameterComponent->MixerModule\n\n\n\n\n\nSnackbarComponent\n\nSnackbarComponent\n\nMixerModule -->\n\nSnackbarComponent->MixerModule\n\n\n\n\n\nSubdraftComponent\n\nSubdraftComponent\n\nMixerModule -->\n\nSubdraftComponent->MixerModule\n\n\n\n\n\nPlayerModule\n\nPlayerModule\n\nMixerModule -->\n\nPlayerModule->MixerModule\n\n\n\n\n\n\n    \n    \n    \n        Zoom in\n        Reset\n        Zoom out\n    \n\n\n\n\n\n    \n        Info\n    \n    \n        Source\n    \n\n\n\n    \n\n        \n            File\n        \n        \n            src/app/mixer/mixer.module.ts\n        \n\n\n\n\n\n        \n            \n                \n                    Declarations\n                    \n                        \n                            ConnectionComponent\n                        \n                        \n                            DraftdetailComponent\n                        \n                        \n                            ImageComponent\n                        \n                        \n                            InletComponent\n                        \n                        \n                            MarqueeComponent\n                        \n                        \n                            MixerComponent\n                        \n                        \n                            MixerViewComponent\n                        \n                        \n                            NoteComponent\n                        \n                        \n                            OpHelpModal\n                        \n                        \n                            OperationComponent\n                        \n                        \n                            OpsComponent\n                        \n                        \n                            PaletteComponent\n                        \n                        \n                            ParameterComponent\n                        \n                        \n                            SnackbarComponent\n                        \n                        \n                            SubdraftComponent\n                        \n                    \n                \n                \n                    Imports\n                    \n                        \n                            PlayerModule\n                        \n                    \n                \n            \n        \n\n\n    \n\n\n    \n        import { NgModule } from '@angular/core';\nimport { CoreModule } from '../core/core.module';\nimport { WeaverModule } from '../weaver/weaver.module';\nimport { PlayerModule } from '../player/player.module';\n\nimport { MixerComponent} from './mixer.component';\nimport { MixerViewComponent } from './modal/mixerview/mixerview.component';\nimport { SubdraftComponent } from './palette/subdraft/subdraft.component';\nimport { PaletteComponent } from './palette/palette.component';\nimport { SnackbarComponent } from './palette/snackbar/snackbar.component';\nimport { MarqueeComponent } from './palette/marquee/marquee.component';\nimport { OperationComponent } from './palette/operation/operation.component';\nimport { ConnectionComponent } from './palette/connection/connection.component';\nimport { OpsComponent } from './modal/ops/ops.component';\nimport { OpHelpModal } from './modal/ophelp/ophelp.modal';\nimport { ImageComponent } from './palette/image/image.component';\nimport { DraftdetailComponent } from './modal/draftdetail/draftdetail.component';\nimport { NoteComponent } from './palette/note/note.component';\n// import { PlayerComponent } from '../player/component/player.component';\nimport { ParameterComponent } from './palette/operation/parameter/parameter.component';\nimport { InletComponent } from './palette/operation/inlet/inlet.component';\nimport { PlayerComponent } from '../player/player.component';\n\n\n@NgModule({\n    imports: [\n        CoreModule,\n        WeaverModule,\n        PlayerModule,\n    ],\n    declarations: [\n        MixerComponent,\n        MixerViewComponent,\n        SubdraftComponent,\n        PaletteComponent,\n        SnackbarComponent,\n        MarqueeComponent,\n        OperationComponent,\n        ConnectionComponent,\n        OpsComponent,\n        OpHelpModal,\n        ImageComponent,\n        DraftdetailComponent,\n        NoteComponent,\n        ParameterComponent,\n        InletComponent, \n    ]\n})\nexport class MixerModule { }\n\n    \n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n                   \n    \n         results matching \"\"\n        \n    \n    \n        No results matching \"\"\n    \n\n"},"components/MixerViewComponent.html":{"url":"components/MixerViewComponent.html","title":"component - MixerViewComponent","body":"\n                   \n\n\n\n\n\n  Components\n  \n  MixerViewComponent\n\n\n\n        \n            Info\n        \n        \n            Source\n        \n        \n            Template\n        \n        \n            Styles\n        \n        \n            DOM Tree\n        \n\n\n\n    \n    File\n\n\n    src/app/mixer/modal/mixerview/mixerview.component.ts\n\n\n\n\n\n    \n        Implements\n    \n    \n                    OnInit\n    \n\n\n\n    Metadata\n    \n        \n\n\n\n\n\n\n\n\n\n\n\n            \n                selector\n                app-mixerview\n            \n\n            \n                styleUrls\n                ./mixerview.component.scss\n            \n\n\n\n            \n                templateUrl\n                ./mixerview.component.html\n            \n\n\n\n\n\n\n\n\n        \n    \n\n\n    \n    Index\n    \n        \n                \n                    \n                        Properties\n                    \n                \n                \n                    \n                        \n                            \n                                bounds\n                            \n                            \n                                cell_factor\n                            \n                            \n                                    Public\n                                data\n                            \n                            \n                                div\n                            \n                            \n                                factor\n                            \n                            \n                                height\n                            \n                            \n                                local_view\n                            \n                            \n                                    Public\n                                viewport\n                            \n                            \n                                width\n                            \n                            \n                                zoom\n                            \n                        \n                    \n                \n\n                \n                    \n                        Methods\n                    \n                \n                \n                    \n                        \n                            \n                                close\n                            \n                            \n                                dragEnd\n                            \n                            \n                                dragMove\n                            \n                            \n                                dragStart\n                            \n                            \n                                getCx\n                            \n                            \n                                getMatrix\n                            \n                            \n                                ngAfterViewInit\n                            \n                            \n                                ngOnInit\n                            \n                            \n                                updateLocalDims\n                            \n                            \n                                updateViewPort\n                            \n                            \n                                updateViewPortFromZoom\n                            \n                            \n                                zoomChange\n                            \n                        \n                    \n                \n\n\n                \n                    \n                        Outputs\n                    \n                \n                \n                    \n                        \n                            \n                                onViewPortMove\n                            \n                            \n                                onZoomChange\n                            \n                        \n                    \n                \n\n\n\n        \n    \n\n\n    \n    Constructor\n        \n            \n                \n                    \nconstructor(viewport: ViewportService, dialog: MatDialog, dialogRef: MatDialogRef, data: any)\n                    \n                \n                        \n                            \n                                Defined in src/app/mixer/modal/mixerview/mixerview.component.ts:35\n                            \n                        \n\n                \n                    \n                            \n                                    Parameters :\n                                    \n                                        \n                                            \n                                                Name\n                                                    Type\n                                                Optional\n                                            \n                                        \n                                        \n                                                \n                                                        viewport\n                                                  \n                                                        \n                                                                        ViewportService\n                                                        \n                                                  \n                                                    \n                                                            No\n                                                    \n                                                    \n                                                \n                                                \n                                                        dialog\n                                                  \n                                                        \n                                                                    MatDialog\n                                                        \n                                                  \n                                                    \n                                                            No\n                                                    \n                                                    \n                                                \n                                                \n                                                        dialogRef\n                                                  \n                                                        \n                                                                        MatDialogRef\n                                                        \n                                                  \n                                                    \n                                                            No\n                                                    \n                                                    \n                                                \n                                                \n                                                        data\n                                                  \n                                                        \n                                                                        any\n                                                        \n                                                  \n                                                    \n                                                            No\n                                                    \n                                                    \n                                                \n                                        \n                                    \n                            \n                    \n                \n            \n        \n\n\n\n    \n    Outputs\n        \n            \n                \n                    \n                        \n                        onViewPortMove\n                    \n                \n                \n                    \n                        Type :         any\n\n                    \n                \n                        \n                            \n                                    Defined in src/app/mixer/modal/mixerview/mixerview.component.ts:14\n                            \n                        \n            \n        \n        \n            \n                \n                    \n                        \n                        onZoomChange\n                    \n                \n                \n                    \n                        Type :         any\n\n                    \n                \n                        \n                            \n                                    Defined in src/app/mixer/modal/mixerview/mixerview.component.ts:13\n                            \n                        \n            \n        \n\n\n\n    \n    \n    \n        Methods\n    \n    \n        \n            \n                \n                    \n                    \n                        close\n                        \n                    \n                \n            \n            \n                \nclose()\n                \n            \n\n\n            \n                \n                    Defined in src/app/mixer/modal/mixerview/mixerview.component.ts:175\n                \n            \n\n\n            \n                \n\n                    \n                        Returns :         void\n\n                    \n                \n            \n        \n    \n    \n        \n            \n                \n                    \n                    \n                        dragEnd\n                        \n                    \n                \n            \n            \n                \ndragEnd($event: any)\n                \n            \n\n\n            \n                \n                    Defined in src/app/mixer/modal/mixerview/mixerview.component.ts:123\n                \n            \n\n\n            \n                \n\n                    \n                        Parameters :\n                        \n                        \n                            \n                                \n                                    Name\n                                    Type\n                                    Optional\n                                \n                            \n                            \n                                \n                                    $event\n                                    \n                                                any\n                                    \n\n                                    \n                                        No\n                                    \n\n\n                                \n                            \n                        \n                    \n                    \n                    \n                    \n                        Returns :         void\n\n                    \n                    \n                        \n                    \n                \n            \n        \n    \n    \n        \n            \n                \n                    \n                    \n                        dragMove\n                        \n                    \n                \n            \n            \n                \ndragMove($event: any)\n                \n            \n\n\n            \n                \n                    Defined in src/app/mixer/modal/mixerview/mixerview.component.ts:142\n                \n            \n\n\n            \n                \n\n                    \n                        Parameters :\n                        \n                        \n                            \n                                \n                                    Name\n                                    Type\n                                    Optional\n                                \n                            \n                            \n                                \n                                    $event\n                                    \n                                                any\n                                    \n\n                                    \n                                        No\n                                    \n\n\n                                \n                            \n                        \n                    \n                    \n                    \n                    \n                        Returns :         void\n\n                    \n                    \n                        \n                    \n                \n            \n        \n    \n    \n        \n            \n                \n                    \n                    \n                        dragStart\n                        \n                    \n                \n            \n            \n                \ndragStart($event: any)\n                \n            \n\n\n            \n                \n                    Defined in src/app/mixer/modal/mixerview/mixerview.component.ts:127\n                \n            \n\n\n            \n                \n\n                    \n                        Parameters :\n                        \n                        \n                            \n                                \n                                    Name\n                                    Type\n                                    Optional\n                                \n                            \n                            \n                                \n                                    $event\n                                    \n                                                any\n                                    \n\n                                    \n                                        No\n                                    \n\n\n                                \n                            \n                        \n                    \n                    \n                    \n                    \n                        Returns :         void\n\n                    \n                    \n                        \n                    \n                \n            \n        \n    \n    \n        \n            \n                \n                    \n                    \n                        getCx\n                        \n                    \n                \n            \n            \n                \ngetCx(obj: any)\n                \n            \n\n\n            \n                \n                    Defined in src/app/mixer/modal/mixerview/mixerview.component.ts:81\n                \n            \n\n\n            \n                \n\n                    \n                        Parameters :\n                        \n                        \n                            \n                                \n                                    Name\n                                    Type\n                                    Optional\n                                \n                            \n                            \n                                \n                                    obj\n                                    \n                                                any\n                                    \n\n                                    \n                                        No\n                                    \n\n\n                                \n                            \n                        \n                    \n                    \n                    \n                    \n                        Returns :         number\n\n                    \n                    \n                        \n                    \n                \n            \n        \n    \n    \n        \n            \n                \n                    \n                    \n                        getMatrix\n                        \n                    \n                \n            \n            \n                \ngetMatrix(el: HTMLElement)\n                \n            \n\n\n            \n                \n                    Defined in src/app/mixer/modal/mixerview/mixerview.component.ts:131\n                \n            \n\n\n            \n                \n\n                    \n                        Parameters :\n                        \n                        \n                            \n                                \n                                    Name\n                                    Type\n                                    Optional\n                                \n                            \n                            \n                                \n                                    el\n                                    \n                                            HTMLElement\n                                    \n\n                                    \n                                        No\n                                    \n\n\n                                \n                            \n                        \n                    \n                    \n                    \n                    \n                        Returns :     Array\n\n                    \n                    \n                        \n                    \n                \n            \n        \n    \n    \n        \n            \n                \n                    \n                    \n                        ngAfterViewInit\n                        \n                    \n                \n            \n            \n                \nngAfterViewInit()\n                \n            \n\n\n            \n                \n                    Defined in src/app/mixer/modal/mixerview/mixerview.component.ts:75\n                \n            \n\n\n            \n                \n\n                    \n                        Returns :         void\n\n                    \n                \n            \n        \n    \n    \n        \n            \n                \n                    \n                    \n                        ngOnInit\n                        \n                    \n                \n            \n            \n                \nngOnInit()\n                \n            \n\n\n            \n                \n                    Defined in src/app/mixer/modal/mixerview/mixerview.component.ts:68\n                \n            \n\n\n            \n                \n\n                    \n                        Returns :         void\n\n                    \n                \n            \n        \n    \n    \n        \n            \n                \n                    \n                    \n                        updateLocalDims\n                        \n                    \n                \n            \n            \n                \nupdateLocalDims()\n                \n            \n\n\n            \n                \n                    Defined in src/app/mixer/modal/mixerview/mixerview.component.ts:88\n                \n            \n\n\n            \n                \n\n                    \n                        Returns :         void\n\n                    \n                \n            \n        \n    \n    \n        \n            \n                \n                    \n                    \n                        updateViewPort\n                        \n                    \n                \n            \n            \n                \nupdateViewPort(data: any)\n                \n            \n\n\n            \n                \n                    Defined in src/app/mixer/modal/mixerview/mixerview.component.ts:96\n                \n            \n\n\n            \n                \n\n                    \n                        Parameters :\n                        \n                        \n                            \n                                \n                                    Name\n                                    Type\n                                    Optional\n                                \n                            \n                            \n                                \n                                    data\n                                    \n                                                any\n                                    \n\n                                    \n                                        No\n                                    \n\n\n                                \n                            \n                        \n                    \n                    \n                    \n                    \n                        Returns :         void\n\n                    \n                    \n                        \n                    \n                \n            \n        \n    \n    \n        \n            \n                \n                    \n                    \n                        updateViewPortFromZoom\n                        \n                    \n                \n            \n            \n                \nupdateViewPortFromZoom()\n                \n            \n\n\n            \n                \n                    Defined in src/app/mixer/modal/mixerview/mixerview.component.ts:100\n                \n            \n\n\n            \n                \n\n                    \n                        Returns :         void\n\n                    \n                \n            \n        \n    \n    \n        \n            \n                \n                    \n                    \n                        zoomChange\n                        \n                    \n                \n            \n            \n                \nzoomChange(e: any, source: string)\n                \n            \n\n\n            \n                \n                    Defined in src/app/mixer/modal/mixerview/mixerview.component.ts:106\n                \n            \n\n\n            \n                \n\n                    \n                        Parameters :\n                        \n                        \n                            \n                                \n                                    Name\n                                    Type\n                                    Optional\n                                \n                            \n                            \n                                \n                                    e\n                                    \n                                                any\n                                    \n\n                                    \n                                        No\n                                    \n\n\n                                \n                                \n                                    source\n                                    \n                                                string\n                                    \n\n                                    \n                                        No\n                                    \n\n\n                                \n                            \n                        \n                    \n                    \n                    \n                    \n                        Returns :         void\n\n                    \n                    \n                        \n                    \n                \n            \n        \n    \n\n    \n    \n    \n        Properties\n    \n    \n        \n            \n                \n                    \n                    \n                        bounds\n                        \n                    \n                \n            \n                \n                    \n                        Type :         Bounds\n\n                    \n                \n                    \n                        \n                                Defined in src/app/mixer/modal/mixerview/mixerview.component.ts:17\n                        \n                    \n\n\n        \n    \n    \n        \n            \n                \n                    \n                    \n                        cell_factor\n                        \n                    \n                \n            \n                \n                    \n                        Type :         number\n\n                    \n                \n                    \n                        \n                                Defined in src/app/mixer/modal/mixerview/mixerview.component.ts:26\n                        \n                    \n\n\n        \n    \n    \n        \n            \n                \n                    \n                    \n                            Public\n                        data\n                        \n                    \n                \n            \n                \n                    \n                        Type :         any\n\n                    \n                \n                \n                    \n                        Decorators : \n                        \n                        \n                            @Inject(MAT_DIALOG_DATA)\n                        \n                    \n                \n                    \n                        \n                                Defined in src/app/mixer/modal/mixerview/mixerview.component.ts:40\n                        \n                    \n\n\n        \n    \n    \n        \n            \n                \n                    \n                    \n                        div\n                        \n                    \n                \n            \n                \n                    \n                        Type :     Element\n\n                    \n                \n                    \n                        \n                                Defined in src/app/mixer/modal/mixerview/mixerview.component.ts:35\n                        \n                    \n\n\n        \n    \n    \n        \n            \n                \n                    \n                    \n                        factor\n                        \n                    \n                \n            \n                \n                    \n                        Type :         number\n\n                    \n                \n                    \n                        \n                                Defined in src/app/mixer/modal/mixerview/mixerview.component.ts:23\n                        \n                    \n\n\n        \n    \n    \n        \n            \n                \n                    \n                    \n                        height\n                        \n                    \n                \n            \n                \n                    \n                        Type :         number\n\n                    \n                \n                    \n                        \n                                Defined in src/app/mixer/modal/mixerview/mixerview.component.ts:30\n                        \n                    \n\n\n        \n    \n    \n        \n            \n                \n                    \n                    \n                        local_view\n                        \n                    \n                \n            \n                \n                    \n                        Type :         Bounds\n\n                    \n                \n                    \n                        \n                                Defined in src/app/mixer/modal/mixerview/mixerview.component.ts:20\n                        \n                    \n\n\n        \n    \n    \n        \n            \n                \n                    \n                    \n                            Public\n                        viewport\n                        \n                    \n                \n            \n                \n                    \n                        Type :         ViewportService\n\n                    \n                \n                    \n                        \n                                Defined in src/app/mixer/modal/mixerview/mixerview.component.ts:37\n                        \n                    \n\n\n        \n    \n    \n        \n            \n                \n                    \n                    \n                        width\n                        \n                    \n                \n            \n                \n                    \n                        Type :         number\n\n                    \n                \n                    \n                        \n                                Defined in src/app/mixer/modal/mixerview/mixerview.component.ts:29\n                        \n                    \n\n\n        \n    \n    \n        \n            \n                \n                    \n                    \n                        zoom\n                        \n                    \n                \n            \n                \n                    \n                        Type :         number\n\n                    \n                \n                    \n                        \n                                Defined in src/app/mixer/modal/mixerview/mixerview.component.ts:33\n                        \n                    \n\n\n        \n    \n\n\n\n\n\n    \n        import { Component, OnInit, Input, Output, EventEmitter, ChangeDetectorRef, Inject, ɵpublishGlobalUtil } from '@angular/core';\nimport { Bounds, Point } from '../../../core/model/datatypes';\nimport { ViewportService } from '../../provider/viewport.service';\nimport { MatDialog, MatDialogRef, MAT_DIALOG_DATA } from '@angular/material/dialog';\n\n@Component({\n  selector: 'app-mixerview',\n  templateUrl: './mixerview.component.html',\n  styleUrls: ['./mixerview.component.scss']\n})\nexport class MixerViewComponent implements OnInit {\n  \n  @Output() onZoomChange: any = new EventEmitter();\n  @Output() onViewPortMove: any = new EventEmitter();\n\n  //the bounds of the modal window\n  bounds: Bounds;\n\n  //the bounds of the draggable \"local\" view\n  local_view:Bounds;\n\n  //ratio of the global div to the absolute space\n  factor:number;\n\n  // the number of pixels that represent one cell in the preview space\n  cell_factor: number;\n\n  //the width and height of the global view\n  width: number;\n  height: number;\n\n  //current zoom scale\n  zoom: number;\n\n  div: Element;\n\n constructor(public viewport: ViewportService,\n  private dialog: MatDialog,\n    private dialogRef: MatDialogRef,\n             @Inject(MAT_DIALOG_DATA) public data: any) { \n \n  this.local_view = {\n    topleft: {x:0, y:0}, \n    width: 100, \n    height:100\n  };\n\n  this.zoom = data.zoom;\n\n  this.bounds = {\n    topleft:{x: 0, y:0},\n    width: 350,\n    height: 100\n  }\n\n  this.width = 250;\n  this.height = 250;\n\n  //ratio of the global space to the total width of the global div\n  this.factor = this.width / viewport.getAbsoluteWidth();\n\n  //each cell is rendered cell factor number pixels in the global view\n  //this does not change when zoomed\n  this.cell_factor = this.width / ((viewport.getAbsoluteWidth() / data.default_cell_size));\n \n}\n \n  ngOnInit() {\n   // console.log('viewport', this.local_view);\n\n  }\n\n\n\n  ngAfterViewInit() {\n\n    this.div = document.getElementById('scrollable-container').offsetParent;\n    this.updateLocalDims();\n  }\n\n  getCx(obj: any) : number {\n    return obj.p.x * this.factor;\n  }\n\n\n  \n\n  updateLocalDims(){\n\n    this.local_view.topleft = {\n      x: this.div.scrollLeft / this.zoom * this.cell_factor, \n      y: this.div.scrollTop  / this.zoom * this.cell_factor};\n  }\n\n\n  updateViewPort(data: any){\n    this.updateLocalDims();\n  }\n\n  updateViewPortFromZoom(){\n    this.updateLocalDims();\n    \n  }\n\n\nzoomChange(e:any, source: string){\n  e.source = source;\n  this.zoom = e.value;\n // this.updateLocalDims();\n //update the window so that the current point remains at top left\n  this.onZoomChange.emit(e);\n\n  const adjusted: Point = {\n    x: this.local_view.topleft.x / this.cell_factor * this.zoom,\n    y: this.local_view.topleft.y / this.cell_factor * this.zoom\n  }\n\n  this.onViewPortMove.emit(adjusted);\n\n}\n\n\ndragEnd($event: any) {\n  \n}\n\ndragStart($event: any) {\n\n}\n\ngetMatrix(el: HTMLElement) : Array {\n  const values = el.style.transform.split(/\\w+\\(|\\);?/);\n    if (!values[1] || !values[1].length) {\n        return [];\n    }\n    \n    const text_vals:Array = values[1].split(/,\\s?/g);\n    const numbers: Array = text_vals.map(el => parseInt(el))\n    return numbers;\n}\n\ndragMove($event: any) {\n\n  //this holds the onscreen position of the div\n  const global: HTMLElement = document.getElementById('global');\n  const globalOffset: Point = {\n    x: global.offsetLeft,\n    y: global.offsetTop\n  }\n\n  //this holds any changes from dragging the view\n  const overlay: HTMLElement =  global.offsetParent;\n  const modalTopleft = {\n    x: overlay.offsetLeft,\n    y: overlay.offsetTop\n  }\n  const transform: Array = this.getMatrix(overlay);\n\n  const pointer :Point = $event.pointerPosition;\n\n  const pointerOffsetInGlobal = {\n    x:  pointer.x - (modalTopleft.x + globalOffset.x + transform[0]),\n    y:  pointer.y - (modalTopleft.y + globalOffset.y + transform[1])\n  }\n\n  const adjusted: Point = {\n    x: pointerOffsetInGlobal.x / this.cell_factor * this.zoom,\n    y: pointerOffsetInGlobal.y / this.cell_factor * this.zoom\n  }\n\n\n  this.onViewPortMove.emit(adjusted);\n}\n\nclose() {\n  this.dialogRef.close(null);\n}\n\n\n}\n\n    \n\n    \n        \n\n  \n  \n  View\n  \n\n\n\n\n      \n        \n      \n    \n          \n          \n           \n      \n    \n    \n \n\n  \n    \n    \n      \n    \n    \n    \n  \n\n  \n    \n\n      \n      \n        \n -->\n\n\n\n\n\n\n    \n\n    \n                \n                    ./mixerview.component.scss\n                \n                h4{\n\tmargin: 6px 0px;\n\tpadding: 6px 0px;\n}\n\n.slider-row{\n    display: flex;\n    flex-direction: row;\n}\n\n.toprow{\n    display: flex;\n    flex-direction: row;\n    line-height: 1em;\n}\n\n\n.slider-row i{\n    display: block;\n    height: 48px;\n    line-height: 32px;\n    padding-top: 8px;\n    color: grey;\n}\n\n.global_view{\n    border:thin solid #333333;\n    width: 250px;\n    height: 250px;\n\n}\n\nsvg{\n    position: relative;\n    top: 0;\n    left: 0;\n    z-index: 1;\n    pointer-events: none;\n}\n\n.local{\n    border:thin solid #ff4081;\n    z-index: 3;\n    position: relative;\n    top: -257px;\n    transform-origin: top left;\n   \n}\n\nmat-slider{\n\twidth: 100%;\n}\n\n\n// button{\n//     background: white;\n// \tcolor: #ff4081;\n//     border: thin solid #ff4081;\n//     width: 30px;\n//     height: 30px;\n//     line-height: 1em;\n//     margin: 2px;\n// }\n\n.view_slider{\n  width: 100%;\n  padding: 8px 0 16px 0;\n  font-size: .8em;\n\n}\n\nmat-slide-toggle{\n    padding: 0px 8px;\n}\n\nbutton.selected{\n\n\tbackground: #ff4081;\n\tcolor: white;\n}\n\n.mat-button-toggle-appearance-standard .mat-button-toggle-label-content {\n    /* line-height: 48px; */\n    padding: 0 9px;\n    font-size: .9em;\n}\n\n\n    \n\n    \n        \n        \n            \n                Legend\n            \n            \n                Html element\n            \n            \n                Component\n            \n            \n                Html element with directive\n            \n        \n    \n\n    \n\n\n\n\n\n\n        var COMPONENT_TEMPLATE = '      View                                                                                                                                 -->'\n    var COMPONENTS = [{'name': 'ConnectionComponent', 'selector': 'app-connection'},{'name': 'DraftdetailComponent', 'selector': 'app-draftdetail'},{'name': 'ImageComponent', 'selector': 'app-image'},{'name': 'InletComponent', 'selector': 'app-inlet'},{'name': 'MixerComponent', 'selector': 'app-mixer'},{'name': 'MixerViewComponent', 'selector': 'app-mixerview'},{'name': 'NoteComponent', 'selector': 'app-note'},{'name': 'OperationComponent', 'selector': 'app-operation'},{'name': 'OpHelpModal', 'selector': 'app-ophelp'},{'name': 'OpsComponent', 'selector': 'app-ops'},{'name': 'OpSequencerComponent', 'selector': 'app-op-sequencer'},{'name': 'PaletteComponent', 'selector': 'app-palette'},{'name': 'ParameterComponent', 'selector': 'app-parameter'},{'name': 'PlayerComponent', 'selector': 'app-player'},{'name': 'SnackbarComponent', 'selector': 'app-snackbar'},{'name': 'SubdraftComponent', 'selector': 'app-subdraft'},{'name': 'VirtualPedalsComponent', 'selector': 'app-virtual-pedals'},{'name': 'WeavingStateComponent', 'selector': 'app-weaving-state'}];\n    var DIRECTIVES = [{'name': 'MarqueeComponent', 'selector': 'app-marquee'},{'name': 'SelectionComponent', 'selector': 'app-selection'}];\n    var ACTUAL_COMPONENT = {'name': 'MixerViewComponent'};\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n                   \n    \n         results matching \"\"\n        \n    \n    \n        No results matching \"\"\n    \n\n"},"interfaces/NodeComponentProxy.html":{"url":"interfaces/NodeComponentProxy.html","title":"interface - NodeComponentProxy","body":"\n                   \n\n\n\n\n\n\n\n\n\n\n\n\n\n\n  Interfaces\n  \n  NodeComponentProxy\n\n\n\n        \n            Info\n        \n        \n            Source\n        \n\n\n\n    \n        \n            File\n        \n        \n            src/app/core/model/datatypes/files.ts\n        \n\n\n            \n                Description\n            \n            \n                holds data about each node/component in a form to easily load.\n\n            \n\n\n        \n            Index\n            \n                \n                    \n                        \n                            Properties\n                        \n                    \n                    \n                        \n                            \n                                \n                                        \n                                            bounds\n                                        \n                                \n                                \n                                        \n                                            node_id\n                                        \n                                \n                                \n                                        \n                                            type\n                                        \n                                \n                            \n                        \n                    \n                \n            \n        \n\n\n\n            \n                Properties\n                    \n                        \n                                \n                                    \n                                        \n                                        bounds\n                                            \n                                                \n                                            \n                                        \n                                    \n                                \n                                \n                                    \n                                        bounds:         Bounds\n\n                                    \n                                \n\n\n                                    \n                                        \n                                            Type :         Bounds\n\n                                        \n                                    \n\n\n\n\n\n                        \n                    \n                    \n                        \n                                \n                                    \n                                        \n                                        node_id\n                                            \n                                                \n                                            \n                                        \n                                    \n                                \n                                \n                                    \n                                        node_id:         number\n\n                                    \n                                \n\n\n                                    \n                                        \n                                            Type :         number\n\n                                        \n                                    \n\n\n\n\n\n                        \n                    \n                    \n                        \n                                \n                                    \n                                        \n                                        type\n                                            \n                                                \n                                            \n                                        \n                                    \n                                \n                                \n                                    \n                                        type:         string\n\n                                    \n                                \n\n\n                                    \n                                        \n                                            Type :         string\n\n                                        \n                                    \n\n\n\n\n\n                        \n                    \n            \n    \n\n\n    \n        import { Draft } from './drafts';\nimport { Loom, LoomSettings } from './looms';\nimport { Shuttle } from '../shuttle';\nimport { Note } from '../../provider/notes.service';\nimport { Bounds } from './screenlayout';\n\n/****** OBJECTS/TYPES FOR LOADING AND SAVING FILES *****/\n\n/**\n * holds data about each node/component in a form to easily load.\n * @param node_id the id of this node within the tree\n * @param type the type of node\n * @param bounds the screen position and size data for this node\n */\nexport interface NodeComponentProxy {\n    node_id: number,\n    type: string,\n    bounds: Bounds\n  }\n  \n  /**\n   * stores a sparce version of a tree node for easy reloading\n   * @param node the node id this treenode refers too\n   * @param parent the node id of the parent node for this treenode\n   * @param inputs an array of treenode ids for all values coming into this node\n   * @param outputs an array of treenode ids for all downstream functions \n   */\n   export interface TreeNodeProxy {\n    node: number,\n    parent: number; \n    inputs: Array;\n    outputs: Array; \n   }\n  \n    /**\n    * holds data about each draft component in a compressed form \n    * @param draft_id the draft id associated with this node (if available)\n   * @param draft_visible a boolean to state if this node is visible or not. \n   * @param draft_name a string representing a user defined name\n   * @param draft this will only export if the draft is a seed draft\n   * @param loom this will only export if the draft is a seed draft \n   * @param loom_settings the associated loom settings on this node, if present\n    */\n  \n    export interface DraftNodeProxy {\n      node_id: number;\n      draft_id: number;\n      draft_name: string;\n      draft: Draft;\n      draft_visible: boolean;\n      loom: Loom,\n      loom_settings: LoomSettings;\n    }\n  \n  /**\n    * a sparce form of an operaction component to use for saving\n    * @param node_id the node id this object refers too\n    * @param name the name of the operation at this node\n    * @param params the list of input parameters to this operation\n    * @param inlets the let of inlets and associated values \n    */\n  export interface OpComponentProxy {\n    node_id: number,\n    name: string,\n    params: Array, \n    inlets: Array;\n  }\n  \n  \n   /**\n    * describes the data from the workspace that is saved.\n    */\n   export interface SaveObj {\n    version: string,\n    workspace: any,\n    type: string,\n    nodes: Array,\n    tree: Array,\n    draft_nodes: Array,\n    ops: Array,\n    notes: Array,\n    materials: Array,\n    scale: number\n   }\n  \n  export interface FileObj {\n   version: string,\n   workspace: any,\n   filename: string,\n   nodes: Array,\n   treenodes: Array,\n   draft_nodes: Array,\n   ops: Array\n   scale: number\n  }\n  \n  export interface StatusMessage {\n    id: number,\n    message: string,\n    success: boolean\n  }\n  \n  export interface LoadResponse {\n    data: FileObj,\n    status: number;\n  }\n  \n  export interface Fileloader {\n    ada: (filename: string, data: any) => Promise,\n    //wif: (filename: string, data: any) => Promise,\n    //bmp: (filename: string, data: any) => Promise,\n    //jpg: (filename: string, data: any) => Promise,\n    form: (data: any) => Promise}\n  \n  export interface FileSaver {\n    ada: (type: string, for_timeline:boolean, current_scale: number) => Promise,\n    //wif: (draft: Draft, loom: Loom) => Promise,\n    bmp: (canvas: HTMLCanvasElement) => Promise,\n    jpg: (canvas: HTMLCanvasElement) => Promise\n  }\n    \n\n\n\n\n\n\n\n\n\n                   \n    \n         results matching \"\"\n        \n    \n    \n        No results matching \"\"\n    \n\n"},"interfaces/NodeMethods.html":{"url":"interfaces/NodeMethods.html","title":"interface - NodeMethods","body":"\n                   \n\n\n\n\n\n\n\n\n\n\n\n\n\n\n  Interfaces\n  \n  NodeMethods\n\n\n\n        \n            Info\n        \n        \n            Source\n        \n\n\n\n    \n        \n            File\n        \n        \n            src/app/player/model/dbnodes.ts\n        \n\n\n\n\n        \n            Index\n            \n                \n                    \n                        \n                            Methods\n                        \n                    \n                    \n                        \n                            \n                                \n                                    \n                                        attach\n                                    \n                                \n                                \n                                    \n                                        detach\n                                    \n                                \n                            \n                        \n                    \n                \n            \n        \n\n            \n    \n    \n        Methods\n    \n    \n        \n            \n                \n                    \n                    \n                        attach\n                        \n                    \n                \n            \n            \n                \nattach()\n                \n            \n\n\n            \n                \n                    Defined in src/app/player/model/dbnodes.ts:23\n                \n            \n\n\n            \n                \n\n                    \n                        Returns :         void\n\n                    \n                \n            \n        \n    \n    \n        \n            \n                \n                    \n                    \n                        detach\n                        \n                    \n                \n            \n            \n                \ndetach()\n                \n            \n\n\n            \n                \n                    Defined in src/app/player/model/dbnodes.ts:24\n                \n            \n\n\n            \n                \n\n                    \n                        Returns :         void\n\n                    \n                \n            \n        \n    \n\n\n    \n\n\n    \n        import { child, ref, set, get, query, \n  onValue, onChildAdded, onChildChanged, onChildRemoved,\n  push, remove,\n  DatabaseReference, \n} from \"firebase/database\";\nimport { Database } from '@angular/fire/database';\nimport { EventEmitter } from 'events';\n\nexport interface NodeParams {\n  db?: Database,\n  name?: string,\n  root?: string,\n  path?: string,\n  key?: string,\n  initVal?: any,\n  ref?: DatabaseReference,\n  id?: number\n}\n\nexport type NodeValue = string | boolean | number | { [key: string]: any };\n\ninterface NodeMethods {\n  attach(): void,\n  detach(): void,\n}\n\n/**\n * @class DBNode\n * @desc Wrapper for a Firebase database ref and\n * the value stored at that DB node.\n */\nabstract class DBNode extends EventEmitter implements NodeMethods {\n  id: number;\n  key?: string;\n  _name: string;\n  _dbref: DatabaseReference;\n  _val: NodeValue;\n  _active: boolean;\n\n  /**\n   * holds the Unsubscribe functions that are returned by\n   * DB event functions like onValue(...)\n   */\n  unsubscribers: Array;\n\n  /**\n   * \n   * @param {*} params \\{ db: Database, path: string, initVal: any }\n   * @param {*} params \\{ ref: DatabaseReference, key: string, initVal: any }\n   */\n\n  constructor(params: NodeParams) {\n    super();\n    this.active = false;\n    this.unsubscribers = [];\n    if (params.db) {\n      this._name = params.path;\n      this._dbref = ref(params.db, params.root + params.path);\n      this._val = params.initVal;\n      // console.log(this);\n    } else if (params.ref) {\n      this._name = params.key;\n      this._dbref = params.ref;\n    }\n\n    if(params.id > -1) {\n      this.id = params.id;\n    }\n    console.log(this.name);\n  }\n\n  get ref() {\n    return this._dbref;\n  }\n\n  get name() {\n    return this._name;\n  }\n\n  get val() {\n    if (!this.active) {\n      return false;\n    }\n\n    if (typeof(this._val) == 'number' || typeof(this._val == 'boolean')) {\n      return this._val;\n    } \n    \n    if (this._val != undefined) {\n      return Object.keys(this._val);\n    }\n  }\n\n  set val(x) {\n    this._val = x;\n  }\n\n  get active() {\n    return this._active;\n  }\n\n  set active(tf: boolean) {\n    this._active = tf;\n  }\n\n  // methods for a node: \n  // attach() means it is updating with the database and emitting events\n  // detach() means it is not updating, no events\n  abstract attach();\n  abstract detach();\n}\n\ntype Keyed = Node & { key: string };\n\n/**\n * @class DBListener\n * @desc A DBNode that only reads from the database.\n * When `active = true`, will emit events on the value changing.\n */\nexport class DBListener extends DBNode {\n  id: number;\n  key?: string;\n  _name: string;\n  _dbref: DatabaseReference;\n  _val: any;\n  _active: boolean;\n\n  constructor(params: NodeParams) {\n    super(params);\n  }\n\n  attach() {\n    this.active = true;\n    let unsub = onValue(this.ref, (snapshot) => {\n      this.val = snapshot.val();\n      this.emit('change', this.val);\n    });\n    this.unsubscribers.push(unsub);\n  }\n\n  getNow() {\n    get(query(this.ref))\n      .then((snapshot) => {\n        this.val = snapshot.val();\n      })\n      .catch(result => console.log(result));\n  }\n\n  detach() {\n    if (this.active) {\n      while (this.unsubscribers.length > 0) {\n        let unsub = this.unsubscribers.pop();\n        unsub();\n      }\n    }\n    this.active = false;\n  }\n}\n\n/**\n * @class DBWriter\n * @desc A DBNode that only writes to the database. \n * When `active = true`, will pass `val` to the database.\n */\nexport class DBWriter extends DBNode {\n  id: number;\n  key?: string;\n  _name: string;\n  _ref: DatabaseReference;\n  _val: any;\n  _active: boolean;\n\n  constructor(params: NodeParams) {\n    super(params);\n  }\n\n  attach() {\n    this.active = true;\n  }\n\n  setVal(x) {\n    this.val = x;\n    if (this.active) {\n      set(this.ref, this.val);\n    }\n  }\n\n  detach() {\n    this.active = false;\n  }\n}\n\n/** Special DBWriter that expects the node to be cleared by the\n * other end upon receipt\n */\nexport class DBWriteBuffer extends DBWriter {\n  id: number;\n  _name: string;\n  _ref: DatabaseReference;\n  _val: any;\n  _active: boolean;\n\n  constructor(params: NodeParams) {\n    super(params);\n  }\n\n  setVal(x) {\n    get(query(this.ref))\n      .then((snapshot) => {\n        if(!snapshot.val()) {\n          console.log(\"overwriting data in buffer\");\n        }\n        super.setVal(x);\n      })\n      .catch(result => console.log(result));\n  }\n}\n\nexport class DBTwoWay extends DBNode {\n  id: number;\n  key?: string;\n  _name: string;\n  _dbref: DatabaseReference;\n  _val: any;\n  _active: boolean;\n\n  constructor(params: NodeParams) {\n    super(params);\n  }\n  \n  attach() {\n    this.active = true;\n    let unsub = onValue(this.ref, (snapshot) => {\n      this.val = snapshot.val();\n      this.emit('change', this.val);\n    });\n    this.unsubscribers.push(unsub);\n  }\n\n  getNow() {\n    get(query(this.ref))\n      .then((snapshot) => {\n        this.val = snapshot.val();\n      })\n      .catch(result => console.log(result));\n  }\n  \n  detach() {\n    if (this.active) {\n      while (this.unsubscribers.length > 0) {\n        let unsub = this.unsubscribers.pop();\n        unsub();\n      }\n    }\n    this.active = false;\n  }\n  \n  setVal(x) {\n    this.val = x;\n    if (this.active) {\n      set(this.ref, this.val);\n    }\n  }\n}\n\nclass DBNodeArray extends EventEmitter {\n  nodes: Array;\n  lengthNode: DBNode;\n  parentNode: DBNode;\n\n  constructor(lengthNode, parentNode, init: any = {}) {\n    super();\n    this.lengthNode = lengthNode;\n    this.parentNode = parentNode;\n    if (init) {\n    } else {\n      this.nodes = [];\n    }\n  }\n\n  get length() { return this.nodes.length; }\n\n  get active() { return (this.lengthNode.active && this.parentNode.active); }\n\n  get ready() { return (this.lengthNode.val > 0 && this.parentNode.val != false); }\n\n  nodeAt(n) {\n    console.log(this.nodes);\n    console.log(\"node at \", n);\n    console.log(this.nodes[n]);\n    return this.nodes[n];\n  }\n\n  pushNode(n) {\n    this.nodes.push(n);\n  }\n\n  popNode() {\n    return this.nodes.pop();\n  }\n}\n\n/**\n * @class `DBListenerArray`\n * @desc Represents a listener to a list of values in the database \n * (generalizes to `DBNodeArray`). Assumes that the data list is\n * structured such that `lengthNode` is a `DBListener` that stores the \n * length of the list, while `parentNode` is a `DBListener` to the parent\n * node of the list. Each item in the list is a child of `parentNode`,\n * which is then stored as a `DBListener` in the array `nodes`.\n */\nexport class DBListenerArray extends DBNodeArray {\n  lengthNode: DBListener;\n  parentNode: DBListener;\n  nodes: Array;\n\n  /**\n  * holds the Unsubscribe functions that are returned by\n  * DB event functions like onValue(...)\n  */\n  unsubscribers: Array;\n\n  constructor(lengthNode: DBListener, parentNode: DBListener) {\n    super(lengthNode, parentNode);\n    this.lengthNode = lengthNode;\n    this.parentNode = parentNode;\n    this.nodes = [];\n    this.unsubscribers = [];\n  }\n\n  /**\n   * @method attach\n   */\n  attach() {\n    this.lengthNode.attach();\n    this.lengthNode.on('change', (val) => {\n        this.emit('ready', this.ready);\n    });\n\n    this.parentNode.attach();\n    this.parentNode.once('change', (val) => {\n      this.emit('ready', this.ready);\n    });\n\n    for (var node of this.nodes) {\n      this.attachChildNode(node);\n    }\n\n    this.unsubscribers.push(\n      onChildAdded(this.parentNode.ref, (snapshot) => {\n        // console.log(\"child added\", snapshot);\n        this.addNode(snapshot.key);\n    }));\n\n    this.unsubscribers.push(\n      onChildChanged(this.parentNode.ref, (snapshot) => {\n        console.log(\"child changed\", snapshot);\n    }));\n\n    this.unsubscribers.push(\n      onChildRemoved(this.parentNode.ref, () => {\n        // console.log(\"child removed\", snapshot);\n        let removed = this.popNode();\n        this.emit('child-removed', removed);\n    }));\n  }\n\n  detach() {\n    if (this.active) {\n      while (this.unsubscribers.length > 0) {\n        let unsub = this.unsubscribers.pop();\n        unsub();\n      }\n    }\n  }\n\n  nodeAt(n: number) {\n    // console.log(this.nodes);\n    // console.log(\"node at \", n);\n    // console.log(this.nodes[n]);\n    return this.nodes[n];\n  }\n\n  /**\n   * Creating a new child node.\n   * @param key \n   */\n  addNode(key: string) {\n    console.log('child key', key);\n    const childRef = child(this.parentNode.ref, key);\n    const childNode = new DBListener({ ref: childRef, key: key, id: this.length });\n    this.attachChildNode(childNode);\n    this.pushNode(childNode);\n    this.emit('child-added', childNode);\n    // this.lengthNode.setVal(this.length);\n  }\n\n  /**\n   * Attaching a child node that was created elsewhere.\n   * Invokes child's `attach()` method and adds event listener\n   * that will emit a `child-change` event.\n   * @param node \n   */\n  attachChildNode(node: DBListener) {\n    node.attach();\n    node.on('change', (val) => {\n      this.emit('child-change', {\n        id: node.id,\n        val: val\n      });\n    });\n  }\n\n  // remNode() {\n  //   const node = this.popNode();\n  //   // remove(node.ref);\n  //   // this.lengthNode.setVal(this.length);\n  // }\n\n  // updateArray(num: number) {\n  //   // this.parentNode.getNow();\n  //   if (num > this.length) {\n  //     let parentKeys = this.parentNode.val;\n  //     // console.log(this.parentNode);\n  //     console.log(parentKeys);\n  //     let childKeys = Object.keys(parentKeys);\n  //     while (this.length  num) {\n  //       this.popNode();\n  //     }\n  //   }\n  //   console.log(this);\n  // }\n\n  toString() {\n    var str = \"\";\n    // str += \"length: \" + this.length + \", \";\n    str += \"[ \\n\";\n    for (var i=0; i ;\n  lengthNode: DBWriter;\n  parentNode: DBWriter;\n\n  constructor(lengthNode, parentNode, init) {\n    super(lengthNode, parentNode, init);\n    if (!init) {\n      this.lengthNode.setVal(0);\n      this.parentNode.setVal(EMPTY_NODE_ARRAY);\n    }\n\n    // console.log(this);\n  }\n\n  addNode(initVal) {\n    const childRef = push(this.parentNode.ref, initVal);\n    const childNode = new DBWriter({ ref: childRef, initVal });\n    childNode.attach();\n    this.pushNode(childNode);\n    this.lengthNode.setVal(this.length);\n  }\n\n  remNode() {\n    const node = this.popNode();\n    remove(node.ref);\n    this.lengthNode.setVal(this.length);\n  }\n\n  updateArray(num, newStates) {\n    if (num > this.length) {\n      while (this.length  num) {\n        this.remNode();\n      }\n    }\n  }\n\n  setNode(i, x) {\n    this.nodes[i].setVal(x);\n  }\n\n}\n\n/**\n * Array of two-way DBNodes where both ends are listening for\n * changes AND may write to the DB -- such as the virtual pedals\n * where both AdaCAD and the Pi/PC can add virtual pedals\n */\nexport class DBTwoWayArray extends DBNodeArray {\n  nodes: Array = [];\n  lengthNode: DBTwoWay;\n  parentNode: DBTwoWay;\n\n  /**\n  * holds the Unsubscribe functions that are returned by\n  * DB event functions like onValue(...)\n  */\n  unsubscribers: Array;\n\n  constructor(lengthNode: DBTwoWay, parentNode: DBTwoWay, init?: Array) {\n    super(lengthNode, parentNode, init);\n    this.unsubscribers = [];\n    if (!init) {\n      this.lengthNode.setVal(0);\n      this.parentNode.setVal(EMPTY_NODE_ARRAY);\n    }\n  }\n\n  addNode(initVal: any) {\n    push(this.parentNode.ref, initVal);\n    // const childNode = new DBTwoWay({ ref: childRef, initVal });\n    // childNode.attach();\n    // this.pushNode(childNode);\n    // this.lengthNode.setVal(this.length);\n    // console.log('child key', key);\n  }\n\n  onNodeAdded(key: string) {\n     const childRef = child(this.parentNode.ref, key);\n     const childNode = new DBTwoWay({ ref: childRef, key: key, id: this.length });\n     this.attachChildNode(childNode);\n     this.pushNode(childNode);\n     this.lengthNode.setVal(this.length);\n     this.emit('child-added', childNode);\n  }\n\n  remNode() {\n    const lastNode = this.nodeAt(this.length-1);\n    remove(lastNode.ref);\n    // this.lengthNode.setVal(this.length);\n  }\n\n  onNodeRemoved() {\n    let removed = this.popNode();\n    this.lengthNode.setVal(this.length);\n    return removed;\n  }\n\n  updateArray(num: number, newStates: Array) {\n    if (num > this.length) {\n      while (this.length  num) {\n        this.remNode();\n      }\n    }\n  }\n\n  setNode(i: number, x: any) {\n    this.nodes[i].setVal(x);\n  }\n\n  /**\n  * @method attach\n  */\n  attach() {\n    this.lengthNode.attach();\n    this.lengthNode.on('change', (val) => {\n        this.emit('ready', this.ready);\n    });\n\n    this.parentNode.attach();\n    this.parentNode.once('change', (val) => {\n      this.emit('ready', this.ready);\n    });\n\n    for (var node of this.nodes) {\n      this.attachChildNode(node);\n    }\n\n    this.unsubscribers.push(\n      onChildAdded(this.parentNode.ref, (snapshot) => {\n        // console.log(\"child added\", snapshot);\n        this.onNodeAdded(snapshot.key);\n    }));\n\n    this.unsubscribers.push(\n      onChildChanged(this.parentNode.ref, (snapshot) => {\n        console.log(\"child changed\", snapshot);\n    }));\n\n    this.unsubscribers.push(\n      onChildRemoved(this.parentNode.ref, () => {\n        // console.log(\"child removed\", snapshot);\n        let removed = this.onNodeRemoved();\n        this.emit('child-removed', removed);\n    }));\n  }\n \n  detach() {\n    if (this.active) {\n      while (this.unsubscribers.length > 0) {\n        let unsub = this.unsubscribers.pop();\n        unsub();\n      }\n    }\n  }\n\n  /**\n  * Attaching a child node that was created elsewhere.\n  * Invokes child's `attach()` method and adds event listener\n  * that will emit a `child-change` event.\n  * @param node \n  */\n  attachChildNode(node: DBListener) {\n    node.attach();\n    node.on('change', (val) => {\n      this.emit('child-change', {\n        id: node.id,\n        val: val\n      });\n    });\n  }\n}\n\n/** special types of DBNodes */\n\n/** @class\n * OnlineStatus representing whether or not the\n * \"host\" device is online. The host device is responsible\n * for keeping the node set to \"true\", while any listener\n * devices check occasionally for the host's status by \n * attempting to set the node to \"false\".\n */\nexport class OnlineStatus extends DBListener {\n  _name: string;\n  _ref: DatabaseReference;\n  _val: boolean;\n  _active: boolean;\n\n  constructor(params) {\n    super(params);\n    this.attach();\n    get(query(this.ref))\n      .then((snapshot) => {\n        this.val = snapshot.val();\n      })\n      .catch(result => console.log(result));\n  }\n\n  checkAlive() {\n    set(this.ref, false)\n      .then(() => { this.emit('set', true); })\n      .catch(() => { this.emit('set', false); });\n  }\n}\n\n\n    \n\n\n\n\n\n\n\n\n\n                   \n    \n         results matching \"\"\n        \n    \n    \n        No results matching \"\"\n    \n\n"},"interfaces/NodeParams.html":{"url":"interfaces/NodeParams.html","title":"interface - NodeParams","body":"\n                   \n\n\n\n\n\n\n\n\n\n\n\n\n\n\n  Interfaces\n  \n  NodeParams\n\n\n\n        \n            Info\n        \n        \n            Source\n        \n\n\n\n    \n        \n            File\n        \n        \n            src/app/player/model/dbnodes.ts\n        \n\n\n\n\n        \n            Index\n            \n                \n                    \n                        \n                            Properties\n                        \n                    \n                    \n                        \n                            \n                                \n                                            Optional\n                                        \n                                            db\n                                        \n                                \n                                \n                                            Optional\n                                        \n                                            id\n                                        \n                                \n                                \n                                            Optional\n                                        \n                                            initVal\n                                        \n                                \n                                \n                                            Optional\n                                        \n                                            key\n                                        \n                                \n                                \n                                            Optional\n                                        \n                                            name\n                                        \n                                \n                                \n                                            Optional\n                                        \n                                            path\n                                        \n                                \n                                \n                                            Optional\n                                        \n                                            ref\n                                        \n                                \n                                \n                                            Optional\n                                        \n                                            root\n                                        \n                                \n                            \n                        \n                    \n                \n            \n        \n\n\n\n            \n                Properties\n                    \n                        \n                                \n                                    \n                                        \n                                        db\n                                            \n                                                \n                                            \n                                        \n                                    \n                                \n                                \n                                    \n                                        db:     Database\n\n                                    \n                                \n\n\n                                    \n                                        \n                                            Type :     Database\n\n                                        \n                                    \n\n                                    \n                                        \n                                            Optional\n                                        \n                                    \n\n\n\n\n                        \n                    \n                    \n                        \n                                \n                                    \n                                        \n                                        id\n                                            \n                                                \n                                            \n                                        \n                                    \n                                \n                                \n                                    \n                                        id:         number\n\n                                    \n                                \n\n\n                                    \n                                        \n                                            Type :         number\n\n                                        \n                                    \n\n                                    \n                                        \n                                            Optional\n                                        \n                                    \n\n\n\n\n                        \n                    \n                    \n                        \n                                \n                                    \n                                        \n                                        initVal\n                                            \n                                                \n                                            \n                                        \n                                    \n                                \n                                \n                                    \n                                        initVal:         any\n\n                                    \n                                \n\n\n                                    \n                                        \n                                            Type :         any\n\n                                        \n                                    \n\n                                    \n                                        \n                                            Optional\n                                        \n                                    \n\n\n\n\n                        \n                    \n                    \n                        \n                                \n                                    \n                                        \n                                        key\n                                            \n                                                \n                                            \n                                        \n                                    \n                                \n                                \n                                    \n                                        key:         string\n\n                                    \n                                \n\n\n                                    \n                                        \n                                            Type :         string\n\n                                        \n                                    \n\n                                    \n                                        \n                                            Optional\n                                        \n                                    \n\n\n\n\n                        \n                    \n                    \n                        \n                                \n                                    \n                                        \n                                        name\n                                            \n                                                \n                                            \n                                        \n                                    \n                                \n                                \n                                    \n                                        name:         string\n\n                                    \n                                \n\n\n                                    \n                                        \n                                            Type :         string\n\n                                        \n                                    \n\n                                    \n                                        \n                                            Optional\n                                        \n                                    \n\n\n\n\n                        \n                    \n                    \n                        \n                                \n                                    \n                                        \n                                        path\n                                            \n                                                \n                                            \n                                        \n                                    \n                                \n                                \n                                    \n                                        path:         string\n\n                                    \n                                \n\n\n                                    \n                                        \n                                            Type :         string\n\n                                        \n                                    \n\n                                    \n                                        \n                                            Optional\n                                        \n                                    \n\n\n\n\n                        \n                    \n                    \n                        \n                                \n                                    \n                                        \n                                        ref\n                                            \n                                                \n                                            \n                                        \n                                    \n                                \n                                \n                                    \n                                        ref:     DatabaseReference\n\n                                    \n                                \n\n\n                                    \n                                        \n                                            Type :     DatabaseReference\n\n                                        \n                                    \n\n                                    \n                                        \n                                            Optional\n                                        \n                                    \n\n\n\n\n                        \n                    \n                    \n                        \n                                \n                                    \n                                        \n                                        root\n                                            \n                                                \n                                            \n                                        \n                                    \n                                \n                                \n                                    \n                                        root:         string\n\n                                    \n                                \n\n\n                                    \n                                        \n                                            Type :         string\n\n                                        \n                                    \n\n                                    \n                                        \n                                            Optional\n                                        \n                                    \n\n\n\n\n                        \n                    \n            \n    \n\n\n    \n        import { child, ref, set, get, query, \n  onValue, onChildAdded, onChildChanged, onChildRemoved,\n  push, remove,\n  DatabaseReference, \n} from \"firebase/database\";\nimport { Database } from '@angular/fire/database';\nimport { EventEmitter } from 'events';\n\nexport interface NodeParams {\n  db?: Database,\n  name?: string,\n  root?: string,\n  path?: string,\n  key?: string,\n  initVal?: any,\n  ref?: DatabaseReference,\n  id?: number\n}\n\nexport type NodeValue = string | boolean | number | { [key: string]: any };\n\ninterface NodeMethods {\n  attach(): void,\n  detach(): void,\n}\n\n/**\n * @class DBNode\n * @desc Wrapper for a Firebase database ref and\n * the value stored at that DB node.\n */\nabstract class DBNode extends EventEmitter implements NodeMethods {\n  id: number;\n  key?: string;\n  _name: string;\n  _dbref: DatabaseReference;\n  _val: NodeValue;\n  _active: boolean;\n\n  /**\n   * holds the Unsubscribe functions that are returned by\n   * DB event functions like onValue(...)\n   */\n  unsubscribers: Array;\n\n  /**\n   * \n   * @param {*} params \\{ db: Database, path: string, initVal: any }\n   * @param {*} params \\{ ref: DatabaseReference, key: string, initVal: any }\n   */\n\n  constructor(params: NodeParams) {\n    super();\n    this.active = false;\n    this.unsubscribers = [];\n    if (params.db) {\n      this._name = params.path;\n      this._dbref = ref(params.db, params.root + params.path);\n      this._val = params.initVal;\n      // console.log(this);\n    } else if (params.ref) {\n      this._name = params.key;\n      this._dbref = params.ref;\n    }\n\n    if(params.id > -1) {\n      this.id = params.id;\n    }\n    console.log(this.name);\n  }\n\n  get ref() {\n    return this._dbref;\n  }\n\n  get name() {\n    return this._name;\n  }\n\n  get val() {\n    if (!this.active) {\n      return false;\n    }\n\n    if (typeof(this._val) == 'number' || typeof(this._val == 'boolean')) {\n      return this._val;\n    } \n    \n    if (this._val != undefined) {\n      return Object.keys(this._val);\n    }\n  }\n\n  set val(x) {\n    this._val = x;\n  }\n\n  get active() {\n    return this._active;\n  }\n\n  set active(tf: boolean) {\n    this._active = tf;\n  }\n\n  // methods for a node: \n  // attach() means it is updating with the database and emitting events\n  // detach() means it is not updating, no events\n  abstract attach();\n  abstract detach();\n}\n\ntype Keyed = Node & { key: string };\n\n/**\n * @class DBListener\n * @desc A DBNode that only reads from the database.\n * When `active = true`, will emit events on the value changing.\n */\nexport class DBListener extends DBNode {\n  id: number;\n  key?: string;\n  _name: string;\n  _dbref: DatabaseReference;\n  _val: any;\n  _active: boolean;\n\n  constructor(params: NodeParams) {\n    super(params);\n  }\n\n  attach() {\n    this.active = true;\n    let unsub = onValue(this.ref, (snapshot) => {\n      this.val = snapshot.val();\n      this.emit('change', this.val);\n    });\n    this.unsubscribers.push(unsub);\n  }\n\n  getNow() {\n    get(query(this.ref))\n      .then((snapshot) => {\n        this.val = snapshot.val();\n      })\n      .catch(result => console.log(result));\n  }\n\n  detach() {\n    if (this.active) {\n      while (this.unsubscribers.length > 0) {\n        let unsub = this.unsubscribers.pop();\n        unsub();\n      }\n    }\n    this.active = false;\n  }\n}\n\n/**\n * @class DBWriter\n * @desc A DBNode that only writes to the database. \n * When `active = true`, will pass `val` to the database.\n */\nexport class DBWriter extends DBNode {\n  id: number;\n  key?: string;\n  _name: string;\n  _ref: DatabaseReference;\n  _val: any;\n  _active: boolean;\n\n  constructor(params: NodeParams) {\n    super(params);\n  }\n\n  attach() {\n    this.active = true;\n  }\n\n  setVal(x) {\n    this.val = x;\n    if (this.active) {\n      set(this.ref, this.val);\n    }\n  }\n\n  detach() {\n    this.active = false;\n  }\n}\n\n/** Special DBWriter that expects the node to be cleared by the\n * other end upon receipt\n */\nexport class DBWriteBuffer extends DBWriter {\n  id: number;\n  _name: string;\n  _ref: DatabaseReference;\n  _val: any;\n  _active: boolean;\n\n  constructor(params: NodeParams) {\n    super(params);\n  }\n\n  setVal(x) {\n    get(query(this.ref))\n      .then((snapshot) => {\n        if(!snapshot.val()) {\n          console.log(\"overwriting data in buffer\");\n        }\n        super.setVal(x);\n      })\n      .catch(result => console.log(result));\n  }\n}\n\nexport class DBTwoWay extends DBNode {\n  id: number;\n  key?: string;\n  _name: string;\n  _dbref: DatabaseReference;\n  _val: any;\n  _active: boolean;\n\n  constructor(params: NodeParams) {\n    super(params);\n  }\n  \n  attach() {\n    this.active = true;\n    let unsub = onValue(this.ref, (snapshot) => {\n      this.val = snapshot.val();\n      this.emit('change', this.val);\n    });\n    this.unsubscribers.push(unsub);\n  }\n\n  getNow() {\n    get(query(this.ref))\n      .then((snapshot) => {\n        this.val = snapshot.val();\n      })\n      .catch(result => console.log(result));\n  }\n  \n  detach() {\n    if (this.active) {\n      while (this.unsubscribers.length > 0) {\n        let unsub = this.unsubscribers.pop();\n        unsub();\n      }\n    }\n    this.active = false;\n  }\n  \n  setVal(x) {\n    this.val = x;\n    if (this.active) {\n      set(this.ref, this.val);\n    }\n  }\n}\n\nclass DBNodeArray extends EventEmitter {\n  nodes: Array;\n  lengthNode: DBNode;\n  parentNode: DBNode;\n\n  constructor(lengthNode, parentNode, init: any = {}) {\n    super();\n    this.lengthNode = lengthNode;\n    this.parentNode = parentNode;\n    if (init) {\n    } else {\n      this.nodes = [];\n    }\n  }\n\n  get length() { return this.nodes.length; }\n\n  get active() { return (this.lengthNode.active && this.parentNode.active); }\n\n  get ready() { return (this.lengthNode.val > 0 && this.parentNode.val != false); }\n\n  nodeAt(n) {\n    console.log(this.nodes);\n    console.log(\"node at \", n);\n    console.log(this.nodes[n]);\n    return this.nodes[n];\n  }\n\n  pushNode(n) {\n    this.nodes.push(n);\n  }\n\n  popNode() {\n    return this.nodes.pop();\n  }\n}\n\n/**\n * @class `DBListenerArray`\n * @desc Represents a listener to a list of values in the database \n * (generalizes to `DBNodeArray`). Assumes that the data list is\n * structured such that `lengthNode` is a `DBListener` that stores the \n * length of the list, while `parentNode` is a `DBListener` to the parent\n * node of the list. Each item in the list is a child of `parentNode`,\n * which is then stored as a `DBListener` in the array `nodes`.\n */\nexport class DBListenerArray extends DBNodeArray {\n  lengthNode: DBListener;\n  parentNode: DBListener;\n  nodes: Array;\n\n  /**\n  * holds the Unsubscribe functions that are returned by\n  * DB event functions like onValue(...)\n  */\n  unsubscribers: Array;\n\n  constructor(lengthNode: DBListener, parentNode: DBListener) {\n    super(lengthNode, parentNode);\n    this.lengthNode = lengthNode;\n    this.parentNode = parentNode;\n    this.nodes = [];\n    this.unsubscribers = [];\n  }\n\n  /**\n   * @method attach\n   */\n  attach() {\n    this.lengthNode.attach();\n    this.lengthNode.on('change', (val) => {\n        this.emit('ready', this.ready);\n    });\n\n    this.parentNode.attach();\n    this.parentNode.once('change', (val) => {\n      this.emit('ready', this.ready);\n    });\n\n    for (var node of this.nodes) {\n      this.attachChildNode(node);\n    }\n\n    this.unsubscribers.push(\n      onChildAdded(this.parentNode.ref, (snapshot) => {\n        // console.log(\"child added\", snapshot);\n        this.addNode(snapshot.key);\n    }));\n\n    this.unsubscribers.push(\n      onChildChanged(this.parentNode.ref, (snapshot) => {\n        console.log(\"child changed\", snapshot);\n    }));\n\n    this.unsubscribers.push(\n      onChildRemoved(this.parentNode.ref, () => {\n        // console.log(\"child removed\", snapshot);\n        let removed = this.popNode();\n        this.emit('child-removed', removed);\n    }));\n  }\n\n  detach() {\n    if (this.active) {\n      while (this.unsubscribers.length > 0) {\n        let unsub = this.unsubscribers.pop();\n        unsub();\n      }\n    }\n  }\n\n  nodeAt(n: number) {\n    // console.log(this.nodes);\n    // console.log(\"node at \", n);\n    // console.log(this.nodes[n]);\n    return this.nodes[n];\n  }\n\n  /**\n   * Creating a new child node.\n   * @param key \n   */\n  addNode(key: string) {\n    console.log('child key', key);\n    const childRef = child(this.parentNode.ref, key);\n    const childNode = new DBListener({ ref: childRef, key: key, id: this.length });\n    this.attachChildNode(childNode);\n    this.pushNode(childNode);\n    this.emit('child-added', childNode);\n    // this.lengthNode.setVal(this.length);\n  }\n\n  /**\n   * Attaching a child node that was created elsewhere.\n   * Invokes child's `attach()` method and adds event listener\n   * that will emit a `child-change` event.\n   * @param node \n   */\n  attachChildNode(node: DBListener) {\n    node.attach();\n    node.on('change', (val) => {\n      this.emit('child-change', {\n        id: node.id,\n        val: val\n      });\n    });\n  }\n\n  // remNode() {\n  //   const node = this.popNode();\n  //   // remove(node.ref);\n  //   // this.lengthNode.setVal(this.length);\n  // }\n\n  // updateArray(num: number) {\n  //   // this.parentNode.getNow();\n  //   if (num > this.length) {\n  //     let parentKeys = this.parentNode.val;\n  //     // console.log(this.parentNode);\n  //     console.log(parentKeys);\n  //     let childKeys = Object.keys(parentKeys);\n  //     while (this.length  num) {\n  //       this.popNode();\n  //     }\n  //   }\n  //   console.log(this);\n  // }\n\n  toString() {\n    var str = \"\";\n    // str += \"length: \" + this.length + \", \";\n    str += \"[ \\n\";\n    for (var i=0; i ;\n  lengthNode: DBWriter;\n  parentNode: DBWriter;\n\n  constructor(lengthNode, parentNode, init) {\n    super(lengthNode, parentNode, init);\n    if (!init) {\n      this.lengthNode.setVal(0);\n      this.parentNode.setVal(EMPTY_NODE_ARRAY);\n    }\n\n    // console.log(this);\n  }\n\n  addNode(initVal) {\n    const childRef = push(this.parentNode.ref, initVal);\n    const childNode = new DBWriter({ ref: childRef, initVal });\n    childNode.attach();\n    this.pushNode(childNode);\n    this.lengthNode.setVal(this.length);\n  }\n\n  remNode() {\n    const node = this.popNode();\n    remove(node.ref);\n    this.lengthNode.setVal(this.length);\n  }\n\n  updateArray(num, newStates) {\n    if (num > this.length) {\n      while (this.length  num) {\n        this.remNode();\n      }\n    }\n  }\n\n  setNode(i, x) {\n    this.nodes[i].setVal(x);\n  }\n\n}\n\n/**\n * Array of two-way DBNodes where both ends are listening for\n * changes AND may write to the DB -- such as the virtual pedals\n * where both AdaCAD and the Pi/PC can add virtual pedals\n */\nexport class DBTwoWayArray extends DBNodeArray {\n  nodes: Array = [];\n  lengthNode: DBTwoWay;\n  parentNode: DBTwoWay;\n\n  /**\n  * holds the Unsubscribe functions that are returned by\n  * DB event functions like onValue(...)\n  */\n  unsubscribers: Array;\n\n  constructor(lengthNode: DBTwoWay, parentNode: DBTwoWay, init?: Array) {\n    super(lengthNode, parentNode, init);\n    this.unsubscribers = [];\n    if (!init) {\n      this.lengthNode.setVal(0);\n      this.parentNode.setVal(EMPTY_NODE_ARRAY);\n    }\n  }\n\n  addNode(initVal: any) {\n    push(this.parentNode.ref, initVal);\n    // const childNode = new DBTwoWay({ ref: childRef, initVal });\n    // childNode.attach();\n    // this.pushNode(childNode);\n    // this.lengthNode.setVal(this.length);\n    // console.log('child key', key);\n  }\n\n  onNodeAdded(key: string) {\n     const childRef = child(this.parentNode.ref, key);\n     const childNode = new DBTwoWay({ ref: childRef, key: key, id: this.length });\n     this.attachChildNode(childNode);\n     this.pushNode(childNode);\n     this.lengthNode.setVal(this.length);\n     this.emit('child-added', childNode);\n  }\n\n  remNode() {\n    const lastNode = this.nodeAt(this.length-1);\n    remove(lastNode.ref);\n    // this.lengthNode.setVal(this.length);\n  }\n\n  onNodeRemoved() {\n    let removed = this.popNode();\n    this.lengthNode.setVal(this.length);\n    return removed;\n  }\n\n  updateArray(num: number, newStates: Array) {\n    if (num > this.length) {\n      while (this.length  num) {\n        this.remNode();\n      }\n    }\n  }\n\n  setNode(i: number, x: any) {\n    this.nodes[i].setVal(x);\n  }\n\n  /**\n  * @method attach\n  */\n  attach() {\n    this.lengthNode.attach();\n    this.lengthNode.on('change', (val) => {\n        this.emit('ready', this.ready);\n    });\n\n    this.parentNode.attach();\n    this.parentNode.once('change', (val) => {\n      this.emit('ready', this.ready);\n    });\n\n    for (var node of this.nodes) {\n      this.attachChildNode(node);\n    }\n\n    this.unsubscribers.push(\n      onChildAdded(this.parentNode.ref, (snapshot) => {\n        // console.log(\"child added\", snapshot);\n        this.onNodeAdded(snapshot.key);\n    }));\n\n    this.unsubscribers.push(\n      onChildChanged(this.parentNode.ref, (snapshot) => {\n        console.log(\"child changed\", snapshot);\n    }));\n\n    this.unsubscribers.push(\n      onChildRemoved(this.parentNode.ref, () => {\n        // console.log(\"child removed\", snapshot);\n        let removed = this.onNodeRemoved();\n        this.emit('child-removed', removed);\n    }));\n  }\n \n  detach() {\n    if (this.active) {\n      while (this.unsubscribers.length > 0) {\n        let unsub = this.unsubscribers.pop();\n        unsub();\n      }\n    }\n  }\n\n  /**\n  * Attaching a child node that was created elsewhere.\n  * Invokes child's `attach()` method and adds event listener\n  * that will emit a `child-change` event.\n  * @param node \n  */\n  attachChildNode(node: DBListener) {\n    node.attach();\n    node.on('change', (val) => {\n      this.emit('child-change', {\n        id: node.id,\n        val: val\n      });\n    });\n  }\n}\n\n/** special types of DBNodes */\n\n/** @class\n * OnlineStatus representing whether or not the\n * \"host\" device is online. The host device is responsible\n * for keeping the node set to \"true\", while any listener\n * devices check occasionally for the host's status by \n * attempting to set the node to \"false\".\n */\nexport class OnlineStatus extends DBListener {\n  _name: string;\n  _ref: DatabaseReference;\n  _val: boolean;\n  _active: boolean;\n\n  constructor(params) {\n    super(params);\n    this.attach();\n    get(query(this.ref))\n      .then((snapshot) => {\n        this.val = snapshot.val();\n      })\n      .catch(result => console.log(result));\n  }\n\n  checkAlive() {\n    set(this.ref, false)\n      .then(() => { this.emit('set', true); })\n      .catch(() => { this.emit('set', false); });\n  }\n}\n\n\n    \n\n\n\n\n\n\n\n\n\n                   \n    \n         results matching \"\"\n        \n    \n    \n        No results matching \"\"\n    \n\n"},"components/NoteComponent.html":{"url":"components/NoteComponent.html","title":"component - NoteComponent","body":"\n                   \n\n\n\n\n\n  Components\n  \n  NoteComponent\n\n\n\n        \n            Info\n        \n        \n            Source\n        \n        \n            Template\n        \n        \n            Styles\n        \n        \n            DOM Tree\n        \n\n\n\n    \n    File\n\n\n    src/app/mixer/palette/note/note.component.ts\n\n\n\n\n\n    \n        Implements\n    \n    \n                    OnInit\n    \n\n\n\n    Metadata\n    \n        \n\n\n\n\n\n\n\n\n\n\n\n            \n                selector\n                app-note\n            \n\n            \n                styleUrls\n                ./note.component.scss\n            \n\n\n\n            \n                templateUrl\n                ./note.component.html\n            \n\n\n\n\n\n\n\n\n        \n    \n\n\n    \n    Index\n    \n        \n                \n                    \n                        Properties\n                    \n                \n                \n                    \n                        \n                            \n                                    Private\n                                _scale\n                            \n                            \n                                bounds\n                            \n                            \n                                canvas\n                            \n                            \n                                cx\n                            \n                            \n                                note\n                            \n                        \n                    \n                \n\n                \n                    \n                        Methods\n                    \n                \n                \n                    \n                        \n                            \n                                delete\n                            \n                            \n                                dragMove\n                            \n                            \n                                drawForPrint\n                            \n                            \n                                ngAfterViewInit\n                            \n                            \n                                ngOnInit\n                            \n                            \n                                rescale\n                            \n                            \n                                save\n                            \n                        \n                    \n                \n\n                \n                    \n                        Inputs\n                    \n                \n                \n                    \n                        \n                            \n                                default_cell\n                            \n                            \n                                id\n                            \n                            \n                                scale\n                            \n                        \n                    \n                \n\n                \n                    \n                        Outputs\n                    \n                \n                \n                    \n                        \n                            \n                                deleteNote\n                            \n                            \n                                saveNoteText\n                            \n                        \n                    \n                \n\n\n\n                    \n                        \n                            Accessors\n                        \n                    \n                    \n                        \n                            \n                                \n                                    scale\n                                \n                            \n                        \n                    \n        \n    \n\n\n    \n    Constructor\n        \n            \n                \n                    \nconstructor(notes: NotesService, viewport: ViewportService)\n                    \n                \n                        \n                            \n                                Defined in src/app/mixer/palette/note/note.component.ts:38\n                            \n                        \n\n                \n                    \n                            \n                                    Parameters :\n                                    \n                                        \n                                            \n                                                Name\n                                                    Type\n                                                Optional\n                                            \n                                        \n                                        \n                                                \n                                                        notes\n                                                  \n                                                        \n                                                                    NotesService\n                                                        \n                                                  \n                                                    \n                                                            No\n                                                    \n                                                    \n                                                \n                                                \n                                                        viewport\n                                                  \n                                                        \n                                                                        ViewportService\n                                                        \n                                                  \n                                                    \n                                                            No\n                                                    \n                                                    \n                                                \n                                        \n                                    \n                            \n                    \n                \n            \n        \n\n\n    \n    Inputs\n        \n            \n                \n                    \n                        \n                        default_cell\n                    \n                \n                \n                    \n                        Type :         number\n\n                    \n                \n                        \n                            \n                                    Defined in src/app/mixer/palette/note/note.component.ts:16\n                            \n                        \n            \n        \n        \n            \n                \n                    \n                        \n                        id\n                    \n                \n                \n                    \n                        Type :         number\n\n                    \n                \n                        \n                            \n                                    Defined in src/app/mixer/palette/note/note.component.ts:15\n                            \n                        \n            \n        \n        \n            \n                \n                    \n                        \n                        scale\n                    \n                \n                \n                    \n                        Type :         number\n\n                    \n                \n                        \n                            \n                                    Defined in src/app/mixer/palette/note/note.component.ts:19\n                            \n                        \n            \n        \n\n    \n    Outputs\n        \n            \n                \n                    \n                        \n                        deleteNote\n                    \n                \n                \n                    \n                        Type :         any\n\n                    \n                \n                        \n                            \n                                    Defined in src/app/mixer/palette/note/note.component.ts:26\n                            \n                        \n            \n        \n        \n            \n                \n                    \n                        \n                        saveNoteText\n                    \n                \n                \n                    \n                        Type :         any\n\n                    \n                \n                        \n                            \n                                    Defined in src/app/mixer/palette/note/note.component.ts:27\n                            \n                        \n            \n        \n\n\n\n    \n    \n    \n        Methods\n    \n    \n        \n            \n                \n                    \n                    \n                        delete\n                        \n                    \n                \n            \n            \n                \ndelete(id: number)\n                \n            \n\n\n            \n                \n                    Defined in src/app/mixer/palette/note/note.component.ts:66\n                \n            \n\n\n            \n                \n\n                    \n                        Parameters :\n                        \n                        \n                            \n                                \n                                    Name\n                                    Type\n                                    Optional\n                                \n                            \n                            \n                                \n                                    id\n                                    \n                                                number\n                                    \n\n                                    \n                                        No\n                                    \n\n\n                                \n                            \n                        \n                    \n                    \n                    \n                    \n                        Returns :         void\n\n                    \n                    \n                        \n                    \n                \n            \n        \n    \n    \n        \n            \n                \n                    \n                    \n                        dragMove\n                        \n                    \n                \n            \n            \n                \ndragMove($event: any)\n                \n            \n\n\n            \n                \n                    Defined in src/app/mixer/palette/note/note.component.ts:71\n                \n            \n\n\n            \n                \n\n                    \n                        Parameters :\n                        \n                        \n                            \n                                \n                                    Name\n                                    Type\n                                    Optional\n                                \n                            \n                            \n                                \n                                    $event\n                                    \n                                                any\n                                    \n\n                                    \n                                        No\n                                    \n\n\n                                \n                            \n                        \n                    \n                    \n                    \n                    \n                        Returns :         void\n\n                    \n                    \n                        \n                    \n                \n            \n        \n    \n    \n        \n            \n                \n                    \n                    \n                        drawForPrint\n                        \n                    \n                \n            \n            \n                \ndrawForPrint(canvas, cx, scale: number)\n                \n            \n\n\n            \n                \n                    Defined in src/app/mixer/palette/note/note.component.ts:118\n                \n            \n\n\n            \n                \n                    draw onto the supplied canvas, to be used when printing\n\n\n                    \n                        Parameters :\n                        \n                        \n                            \n                                \n                                    Name\n                                    Type\n                                    Optional\n                                \n                            \n                            \n                                \n                                    canvas\n                                    \n                                    \n\n                                    \n                                        No\n                                    \n\n\n                                \n                                \n                                    cx\n                                    \n                                    \n\n                                    \n                                        No\n                                    \n\n\n                                \n                                \n                                    scale\n                                    \n                                                number\n                                    \n\n                                    \n                                        No\n                                    \n\n\n                                \n                            \n                        \n                    \n                    \n                    \n                    \n                        Returns :         void\n\n                    \n                    \n                        \n                    \n                \n            \n        \n    \n    \n        \n            \n                \n                    \n                    \n                        ngAfterViewInit\n                        \n                    \n                \n            \n            \n                \nngAfterViewInit()\n                \n            \n\n\n            \n                \n                    Defined in src/app/mixer/palette/note/note.component.ts:59\n                \n            \n\n\n            \n                \n\n                    \n                        Returns :         void\n\n                    \n                \n            \n        \n    \n    \n        \n            \n                \n                    \n                    \n                        ngOnInit\n                        \n                    \n                \n            \n            \n                \nngOnInit()\n                \n            \n\n\n            \n                \n                    Defined in src/app/mixer/palette/note/note.component.ts:44\n                \n            \n\n\n            \n                \n\n                    \n                        Returns :         void\n\n                    \n                \n            \n        \n    \n    \n        \n            \n                \n                    \n                    \n                        rescale\n                        \n                    \n                \n            \n            \n                \nrescale()\n                \n            \n\n\n            \n                \n                    Defined in src/app/mixer/palette/note/note.component.ts:85\n                \n            \n\n\n            \n                \n                    Called when main palette is rescaled and triggers call to rescale this element, and update its position\nso it remains at the same coords.\n\n\n                    \n                        Returns :         void\n\n                    \n                \n            \n        \n    \n    \n        \n            \n                \n                    \n                    \n                        save\n                        \n                    \n                \n            \n            \n                \nsave()\n                \n            \n\n\n            \n                \n                    Defined in src/app/mixer/palette/note/note.component.ts:109\n                \n            \n\n\n            \n                \n\n                    \n                        Returns :         void\n\n                    \n                \n            \n        \n    \n\n    \n    \n    \n        Properties\n    \n    \n        \n            \n                \n                    \n                    \n                            Private\n                        _scale\n                        \n                    \n                \n            \n                \n                    \n                        Type :         number\n\n                    \n                \n                \n                    \n                        Default value : 5\n                    \n                \n                    \n                        \n                                Defined in src/app/mixer/palette/note/note.component.ts:24\n                        \n                    \n\n\n        \n    \n    \n        \n            \n                \n                    \n                    \n                        bounds\n                        \n                    \n                \n            \n                \n                    \n                        Type :         Bounds\n\n                    \n                \n                \n                    \n                        Default value : {\n    topleft: {x:0, y:0},\n    width: 200, \n    height: 200\n  }\n                    \n                \n                    \n                        \n                                Defined in src/app/mixer/palette/note/note.component.ts:30\n                        \n                    \n\n\n        \n    \n    \n        \n            \n                \n                    \n                    \n                        canvas\n                        \n                    \n                \n            \n                \n                    \n                        Type :     HTMLCanvasElement\n\n                    \n                \n                    \n                        \n                                Defined in src/app/mixer/palette/note/note.component.ts:37\n                        \n                    \n\n\n        \n    \n    \n        \n            \n                \n                    \n                    \n                        cx\n                        \n                    \n                \n            \n                \n                    \n                        Type :         any\n\n                    \n                \n                    \n                        \n                                Defined in src/app/mixer/palette/note/note.component.ts:38\n                        \n                    \n\n\n        \n    \n    \n        \n            \n                \n                    \n                    \n                        note\n                        \n                    \n                \n            \n                \n                    \n                        Type :     Note\n\n                    \n                \n                    \n                        \n                                Defined in src/app/mixer/palette/note/note.component.ts:29\n                        \n                    \n\n\n        \n    \n\n\n    \n    \n        Accessors\n    \n        \n            \n                \n                    \n                        \n                        scale\n                    \n                \n\n                \n                    \n                        getscale()\n                    \n                \n                            \n                                \n                                    Defined in src/app/mixer/palette/note/note.component.ts:19\n                                \n                            \n\n                \n                    \n                        setscale(value: number)\n                    \n                \n                            \n                                \n                                    Defined in src/app/mixer/palette/note/note.component.ts:20\n                                \n                            \n                    \n                        \n\n                                \n                                        Parameters :\n                                        \n                                            \n                                                \n                                                    Name\n                                                        Type\n                                                    Optional\n                                                \n                                            \n                                            \n                                                    \n                                                            value\n                                                    \n                                                            \n                                                                            number\n                                                            \n                                                    \n                                                        \n                                                                No\n                                                        \n                                                        \n                                                    \n                                            \n                                        \n                                \n                                \n                                \n                                \n                                    Returns :         void\n\n                                \n                        \n                    \n            \n        \n\n\n\n\n    \n        import { Component, EventEmitter, Input, OnInit, Output, ViewChild } from '@angular/core';\nimport utilInstance from '../../../core/model/util';\nimport { Bounds, Interlacement, Point } from '../../../core/model/datatypes';\nimport { Note, NotesService } from '../../../core/provider/notes.service';\nimport { ViewportService } from '../../provider/viewport.service';\n\n@Component({\n  selector: 'app-note',\n  templateUrl: './note.component.html',\n  styleUrls: ['./note.component.scss']\n})\nexport class NoteComponent implements OnInit {\n\n  //generated by the note service\n  @Input()  id: number;\n  @Input()  default_cell: number;\n\n  @Input()\n  get scale(): number { return this._scale; }\n  set scale(value: number) {\n    this._scale = value;\n    this.rescale();\n  }\n  private _scale:number = 5;\n\n  @Output() deleteNote: any = new EventEmitter();  \n  @Output() saveNoteText: any = new EventEmitter();  \n\n  note: Note;\n  bounds: Bounds = {\n    topleft: {x:0, y:0},\n    width: 200, \n    height: 200\n  };\n\n\n  canvas: HTMLCanvasElement;\n  cx: any;\n\n  constructor(private notes: NotesService,private viewport:ViewportService) { \n\n  }\n\n  ngOnInit() {\n    this.note = this.notes.get(this.id);\n    if(this.note == undefined){\n      this.bounds.topleft = {x: 0, y: 0};\n      console.error(\"cound not find note on init \", this.id, this.notes.notes);\n    }else{\n      this.bounds.topleft = {\n        x: this.note.interlacement.j * this.scale,\n        y: this.note.interlacement.i * this.scale\n      }\n    }\n\n   \n  }\n\n  ngAfterViewInit(){\n    this.canvas =  document.getElementById(\"notecanvas-\"+this.note.id.toString());\n    this.cx = this.canvas.getContext(\"2d\");\n    this.rescale();\n    \n  }\n\n  delete(id: number){\n    this.deleteNote.emit(id);\n  }\n    \n\n  dragMove($event: any) {\n    const pointer:Point = $event.pointerPosition;\n    const relative:Point = utilInstance.getAdjustedPointerPosition(pointer, this.viewport.getBounds());\n    const adj:Point = utilInstance.snapToGrid(relative, this.scale);\n    this.bounds.topleft = adj;\n    this.note.interlacement = utilInstance.resolvePointToAbsoluteNdx(adj, this.scale);\n  }\n\n\n  /**\n   * Called when main palette is rescaled and triggers call to rescale this element, and update its position \n   * so it remains at the same coords. \n   * @param scale - the zoom scale of the iterface (e.g. the number of pixels to render each cell)\n   */\n   rescale(){\n\n    if(this.note === undefined){\n      console.error(\"note is undefined on rescale\");\n      return;\n    }\n\n    const zoom_factor:number = this.scale/this.default_cell;\n\n\n    //redraw at scale\n    const container: HTMLElement = document.getElementById('scalenote-'+this.note.id);\n    container.style.transformOrigin = 'top left';\n    container.style.transform = 'scale(' + zoom_factor + ')';\n   \n\n    this.bounds.topleft = {\n      x: this.note.interlacement.j * this.scale,\n      y: this.note.interlacement.i * this.scale\n    };\n\n  \n  }\n\n  save(){\n    this.saveNoteText.emit();\n  }\n\n\n  /**\n   * draw onto the supplied canvas, to be used when printing\n   * @returns \n   */\n   drawForPrint(canvas, cx, scale: number) {\n\n    if(canvas === undefined) return;\n   \n   \n\n    //draw the supplemental info like size\n    cx.fillStyle = \"#666666\";\n    cx.font = scale*2+\"px Verdana\";\n    cx.fillText(this.note.text,this.bounds.topleft.x, this.bounds.topleft.y+this.bounds.height + 20 );\n\n  }\n\n\n\n}\n\n    \n\n    \n        \n\n\n\n\n\n\n\n  \n\n     \n\n        \n        \n  \n  \n      \n      \n    \n\n    \n    \n    \n \n        \n          Comment #{{note.id}}\n          \n        \n    \n\n    \n \n \n\n\n\n\n\n\n\n\n\n\n    \n\n    \n                \n                    ./note.component.scss\n                \n                .subdraft-container{\n\n\tposition: absolute;\n\ttop: 0px;\n\tleft: 0px;\n\tdisplay: flex;\n\tflex-direction: row;\n\tjustify-content:flex-end;\n}\n\n.text-entry{\n\tdisplay: flex;\n\tflex-direction: column;\n}\n\n.scale-container{\n\n\tposition: absolute;\n\ttop: 0px;\n\tleft: 0px;\n\tcolor: grey;\n\tdisplay: flex;\n\tflex-direction: row;\n\tjustify-content:flex-end;\n}\n\nh3{\n\tfont-weight: 800;\n}\n\n\n\n.is_preview{\n\tz-index: 10;\n}\n\n.subdraft-container{\n\n\tdisplay: flex;\n\tflex-direction: row;\n\n\t.subdraft-details{\n\t\tdisplay:flex;\n\t\twidth: 30px;\n\t\tflex-direction: column;\n\t\tjustify-content: flex-start;\n\t}\n\n\tbutton{\n\t\tdisplay: none;\n\t}\n\n\tsvg{\n\t\tdisplay: none;\n\t\tcolor: grey;\n\t}\n\t\n}\n\n.subdraft-container:hover,\n.subdraft-container:active{\n\n\n\t.subdraft-details{\n\t\tdisplay: flex;\n\t\tflex-direction: column;\n\t}\n\t\n\tsvg{\n\t\tdisplay: block;\n\t}\n\n\tbutton{\n\t\tdisplay: flex;\n\t}\n\n\n\n}\n\n\n.mat-icon{\n\theight: auto;\n}\n\n\n.align-top{\n\tdisplay: flex;\n\tflex-direction: column;\n}\n\n.subdraft-contents{\n\tdisplay: flex;\n\tflex-direction: row;\n}\n\n\n#bitmapImage{\n\tdisplay: none;\n\tpointer-events: none;\n}\n\n\ndiv.cdk-drag-dragging .maindraft{\n\tborder: thin solid #ff4081;\n}\n\n.hide{\n\tdisplay:none;\n}\n\n\n\n    \n\n    \n        \n        \n            \n                Legend\n            \n            \n                Html element\n            \n            \n                Component\n            \n            \n                Html element with directive\n            \n        \n    \n\n    \n\n\n\n\n\n\n        var COMPONENT_TEMPLATE = '                                                                          Comment #{{note.id}}                            '\n    var COMPONENTS = [{'name': 'ConnectionComponent', 'selector': 'app-connection'},{'name': 'DraftdetailComponent', 'selector': 'app-draftdetail'},{'name': 'ImageComponent', 'selector': 'app-image'},{'name': 'InletComponent', 'selector': 'app-inlet'},{'name': 'MixerComponent', 'selector': 'app-mixer'},{'name': 'MixerViewComponent', 'selector': 'app-mixerview'},{'name': 'NoteComponent', 'selector': 'app-note'},{'name': 'OperationComponent', 'selector': 'app-operation'},{'name': 'OpHelpModal', 'selector': 'app-ophelp'},{'name': 'OpsComponent', 'selector': 'app-ops'},{'name': 'OpSequencerComponent', 'selector': 'app-op-sequencer'},{'name': 'PaletteComponent', 'selector': 'app-palette'},{'name': 'ParameterComponent', 'selector': 'app-parameter'},{'name': 'PlayerComponent', 'selector': 'app-player'},{'name': 'SnackbarComponent', 'selector': 'app-snackbar'},{'name': 'SubdraftComponent', 'selector': 'app-subdraft'},{'name': 'VirtualPedalsComponent', 'selector': 'app-virtual-pedals'},{'name': 'WeavingStateComponent', 'selector': 'app-weaving-state'}];\n    var DIRECTIVES = [{'name': 'MarqueeComponent', 'selector': 'app-marquee'},{'name': 'SelectionComponent', 'selector': 'app-selection'}];\n    var ACTUAL_COMPONENT = {'name': 'NoteComponent'};\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n                   \n    \n         results matching \"\"\n        \n    \n    \n        No results matching \"\"\n    \n\n"},"classes/OnlineStatus.html":{"url":"classes/OnlineStatus.html","title":"class - OnlineStatus","body":"\n                   \n\n\n\n\n\n\n\n\n\n\n\n\n\n  Classes\n  OnlineStatus\n\n\n\n        \n            Info\n        \n        \n            Source\n        \n\n\n\n    \n        \n            File\n        \n        \n            src/app/player/model/dbnodes.ts\n        \n\n\n            \n                Description\n            \n            \n                OnlineStatus representing whether or not the\n\"host\" device is online. The host device is responsible\nfor keeping the node set to \"true\", while any listener\ndevices check occasionally for the host's status by\nattempting to set the node to \"false\".\n\n            \n\n            \n                Extends\n            \n            \n                        DBListener\n            \n\n\n\n            \n    Index\n    \n        \n                \n                    \n                        Properties\n                    \n                \n                \n                    \n                        \n                            \n                                _active\n                            \n                            \n                                _name\n                            \n                            \n                                _ref\n                            \n                            \n                                _val\n                            \n                            \n                                _dbref\n                            \n                            \n                                id\n                            \n                            \n                                    Optional\n                                key\n                            \n                            \n                                unsubscribers\n                            \n                        \n                    \n                \n\n                \n                    \n                        Methods\n                    \n                \n                \n                    \n                        \n                            \n                                checkAlive\n                            \n                            \n                                attach\n                            \n                            \n                                detach\n                            \n                            \n                                getNow\n                            \n                        \n                    \n                \n\n\n\n\n\n        \n    \n\n\n            \n    Constructor\n        \n            \n                \n                    \nconstructor(params)\n                    \n                \n                        \n                            \n                                Defined in src/app/player/model/dbnodes.ts:651\n                            \n                        \n\n                \n                    \n                            \n                                    Parameters :\n                                    \n                                        \n                                            \n                                                Name\n                                                Optional\n                                            \n                                        \n                                        \n                                                \n                                                        params\n                                                  \n                                                  \n                                                    \n                                                            No\n                                                    \n                                                    \n                                                \n                                        \n                                    \n                            \n                    \n                \n            \n        \n\n\n            \n    \n    \n        Properties\n    \n    \n        \n            \n                \n                    \n                    \n                        _active\n                        \n                    \n                \n            \n                \n                    \n                        Type :         boolean\n\n                    \n                \n                        \n                            \n                                Inherited from         DBNode\n\n                            \n                        \n                    \n                        \n                                Defined in         DBNode:651\n\n                        \n                    \n\n\n        \n    \n    \n        \n            \n                \n                    \n                    \n                        _name\n                        \n                    \n                \n            \n                \n                    \n                        Type :         string\n\n                    \n                \n                        \n                            \n                                Inherited from         DBNode\n\n                            \n                        \n                    \n                        \n                                Defined in         DBNode:648\n\n                        \n                    \n\n\n        \n    \n    \n        \n            \n                \n                    \n                    \n                        _ref\n                        \n                    \n                \n            \n                \n                    \n                        Type :     DatabaseReference\n\n                    \n                \n                    \n                        \n                                Defined in src/app/player/model/dbnodes.ts:649\n                        \n                    \n\n\n        \n    \n    \n        \n            \n                \n                    \n                    \n                        _val\n                        \n                    \n                \n            \n                \n                    \n                        Type :         boolean\n\n                    \n                \n                        \n                            \n                                Inherited from         DBNode\n\n                            \n                        \n                    \n                        \n                                Defined in         DBNode:650\n\n                        \n                    \n\n\n        \n    \n    \n        \n            \n                \n                    \n                    \n                        _dbref\n                        \n                    \n                \n            \n                \n                    \n                        Type :     DatabaseReference\n\n                    \n                \n                        \n                            \n                                Inherited from         DBNode\n\n                            \n                        \n                    \n                        \n                                Defined in         DBNode:124\n\n                        \n                    \n\n\n        \n    \n    \n        \n            \n                \n                    \n                    \n                        id\n                        \n                    \n                \n            \n                \n                    \n                        Type :         number\n\n                    \n                \n                        \n                            \n                                Inherited from         DBNode\n\n                            \n                        \n                    \n                        \n                                Defined in         DBNode:121\n\n                        \n                    \n\n\n        \n    \n    \n        \n            \n                \n                    \n                    \n                            Optional\n                        key\n                        \n                    \n                \n            \n                \n                    \n                        Type :         string\n\n                    \n                \n                        \n                            \n                                Inherited from         DBNode\n\n                            \n                        \n                    \n                        \n                                Defined in         DBNode:122\n\n                        \n                    \n\n\n        \n    \n    \n        \n            \n                \n                    \n                    \n                        unsubscribers\n                        \n                    \n                \n            \n                \n                    \n                        Type :     Array\n\n                    \n                \n                        \n                            \n                                Inherited from         DBNode\n\n                            \n                        \n                    \n                        \n                                Defined in         DBNode:44\n\n                        \n                    \n\n            \n                \n                    holds the Unsubscribe functions that are returned by\nDB event functions like onValue(...)\n\n                \n            \n\n        \n    \n\n\n            \n    \n    \n        Methods\n    \n    \n        \n            \n                \n                    \n                    \n                        checkAlive\n                        \n                    \n                \n            \n            \n                \ncheckAlive()\n                \n            \n\n\n            \n                \n                    Defined in src/app/player/model/dbnodes.ts:663\n                \n            \n\n\n            \n                \n\n                    \n                        Returns :         void\n\n                    \n                \n            \n        \n    \n    \n        \n            \n                \n                    \n                    \n                        attach\n                        \n                    \n                \n            \n            \n                \nattach()\n                \n            \n\n\n            \n                \n                    Inherited from         DBNode\n\n                \n            \n            \n                \n                        Defined in         DBNode:132\n\n                \n            \n\n\n            \n                \n\n                    \n                        Returns :         void\n\n                    \n                \n            \n        \n    \n    \n        \n            \n                \n                    \n                    \n                        detach\n                        \n                    \n                \n            \n            \n                \ndetach()\n                \n            \n\n\n            \n                \n                    Inherited from         DBNode\n\n                \n            \n            \n                \n                        Defined in         DBNode:149\n\n                \n            \n\n\n            \n                \n\n                    \n                        Returns :         void\n\n                    \n                \n            \n        \n    \n    \n        \n            \n                \n                    \n                    \n                        getNow\n                        \n                    \n                \n            \n            \n                \ngetNow()\n                \n            \n\n\n            \n                \n                    Inherited from         DBListener\n\n                \n            \n            \n                \n                        Defined in         DBListener:141\n\n                \n            \n\n\n            \n                \n\n                    \n                        Returns :         void\n\n                    \n                \n            \n        \n    \n\n\n\n\n\n\n    \n\n\n    \n        import { child, ref, set, get, query, \n  onValue, onChildAdded, onChildChanged, onChildRemoved,\n  push, remove,\n  DatabaseReference, \n} from \"firebase/database\";\nimport { Database } from '@angular/fire/database';\nimport { EventEmitter } from 'events';\n\nexport interface NodeParams {\n  db?: Database,\n  name?: string,\n  root?: string,\n  path?: string,\n  key?: string,\n  initVal?: any,\n  ref?: DatabaseReference,\n  id?: number\n}\n\nexport type NodeValue = string | boolean | number | { [key: string]: any };\n\ninterface NodeMethods {\n  attach(): void,\n  detach(): void,\n}\n\n/**\n * @class DBNode\n * @desc Wrapper for a Firebase database ref and\n * the value stored at that DB node.\n */\nabstract class DBNode extends EventEmitter implements NodeMethods {\n  id: number;\n  key?: string;\n  _name: string;\n  _dbref: DatabaseReference;\n  _val: NodeValue;\n  _active: boolean;\n\n  /**\n   * holds the Unsubscribe functions that are returned by\n   * DB event functions like onValue(...)\n   */\n  unsubscribers: Array;\n\n  /**\n   * \n   * @param {*} params \\{ db: Database, path: string, initVal: any }\n   * @param {*} params \\{ ref: DatabaseReference, key: string, initVal: any }\n   */\n\n  constructor(params: NodeParams) {\n    super();\n    this.active = false;\n    this.unsubscribers = [];\n    if (params.db) {\n      this._name = params.path;\n      this._dbref = ref(params.db, params.root + params.path);\n      this._val = params.initVal;\n      // console.log(this);\n    } else if (params.ref) {\n      this._name = params.key;\n      this._dbref = params.ref;\n    }\n\n    if(params.id > -1) {\n      this.id = params.id;\n    }\n    console.log(this.name);\n  }\n\n  get ref() {\n    return this._dbref;\n  }\n\n  get name() {\n    return this._name;\n  }\n\n  get val() {\n    if (!this.active) {\n      return false;\n    }\n\n    if (typeof(this._val) == 'number' || typeof(this._val == 'boolean')) {\n      return this._val;\n    } \n    \n    if (this._val != undefined) {\n      return Object.keys(this._val);\n    }\n  }\n\n  set val(x) {\n    this._val = x;\n  }\n\n  get active() {\n    return this._active;\n  }\n\n  set active(tf: boolean) {\n    this._active = tf;\n  }\n\n  // methods for a node: \n  // attach() means it is updating with the database and emitting events\n  // detach() means it is not updating, no events\n  abstract attach();\n  abstract detach();\n}\n\ntype Keyed = Node & { key: string };\n\n/**\n * @class DBListener\n * @desc A DBNode that only reads from the database.\n * When `active = true`, will emit events on the value changing.\n */\nexport class DBListener extends DBNode {\n  id: number;\n  key?: string;\n  _name: string;\n  _dbref: DatabaseReference;\n  _val: any;\n  _active: boolean;\n\n  constructor(params: NodeParams) {\n    super(params);\n  }\n\n  attach() {\n    this.active = true;\n    let unsub = onValue(this.ref, (snapshot) => {\n      this.val = snapshot.val();\n      this.emit('change', this.val);\n    });\n    this.unsubscribers.push(unsub);\n  }\n\n  getNow() {\n    get(query(this.ref))\n      .then((snapshot) => {\n        this.val = snapshot.val();\n      })\n      .catch(result => console.log(result));\n  }\n\n  detach() {\n    if (this.active) {\n      while (this.unsubscribers.length > 0) {\n        let unsub = this.unsubscribers.pop();\n        unsub();\n      }\n    }\n    this.active = false;\n  }\n}\n\n/**\n * @class DBWriter\n * @desc A DBNode that only writes to the database. \n * When `active = true`, will pass `val` to the database.\n */\nexport class DBWriter extends DBNode {\n  id: number;\n  key?: string;\n  _name: string;\n  _ref: DatabaseReference;\n  _val: any;\n  _active: boolean;\n\n  constructor(params: NodeParams) {\n    super(params);\n  }\n\n  attach() {\n    this.active = true;\n  }\n\n  setVal(x) {\n    this.val = x;\n    if (this.active) {\n      set(this.ref, this.val);\n    }\n  }\n\n  detach() {\n    this.active = false;\n  }\n}\n\n/** Special DBWriter that expects the node to be cleared by the\n * other end upon receipt\n */\nexport class DBWriteBuffer extends DBWriter {\n  id: number;\n  _name: string;\n  _ref: DatabaseReference;\n  _val: any;\n  _active: boolean;\n\n  constructor(params: NodeParams) {\n    super(params);\n  }\n\n  setVal(x) {\n    get(query(this.ref))\n      .then((snapshot) => {\n        if(!snapshot.val()) {\n          console.log(\"overwriting data in buffer\");\n        }\n        super.setVal(x);\n      })\n      .catch(result => console.log(result));\n  }\n}\n\nexport class DBTwoWay extends DBNode {\n  id: number;\n  key?: string;\n  _name: string;\n  _dbref: DatabaseReference;\n  _val: any;\n  _active: boolean;\n\n  constructor(params: NodeParams) {\n    super(params);\n  }\n  \n  attach() {\n    this.active = true;\n    let unsub = onValue(this.ref, (snapshot) => {\n      this.val = snapshot.val();\n      this.emit('change', this.val);\n    });\n    this.unsubscribers.push(unsub);\n  }\n\n  getNow() {\n    get(query(this.ref))\n      .then((snapshot) => {\n        this.val = snapshot.val();\n      })\n      .catch(result => console.log(result));\n  }\n  \n  detach() {\n    if (this.active) {\n      while (this.unsubscribers.length > 0) {\n        let unsub = this.unsubscribers.pop();\n        unsub();\n      }\n    }\n    this.active = false;\n  }\n  \n  setVal(x) {\n    this.val = x;\n    if (this.active) {\n      set(this.ref, this.val);\n    }\n  }\n}\n\nclass DBNodeArray extends EventEmitter {\n  nodes: Array;\n  lengthNode: DBNode;\n  parentNode: DBNode;\n\n  constructor(lengthNode, parentNode, init: any = {}) {\n    super();\n    this.lengthNode = lengthNode;\n    this.parentNode = parentNode;\n    if (init) {\n    } else {\n      this.nodes = [];\n    }\n  }\n\n  get length() { return this.nodes.length; }\n\n  get active() { return (this.lengthNode.active && this.parentNode.active); }\n\n  get ready() { return (this.lengthNode.val > 0 && this.parentNode.val != false); }\n\n  nodeAt(n) {\n    console.log(this.nodes);\n    console.log(\"node at \", n);\n    console.log(this.nodes[n]);\n    return this.nodes[n];\n  }\n\n  pushNode(n) {\n    this.nodes.push(n);\n  }\n\n  popNode() {\n    return this.nodes.pop();\n  }\n}\n\n/**\n * @class `DBListenerArray`\n * @desc Represents a listener to a list of values in the database \n * (generalizes to `DBNodeArray`). Assumes that the data list is\n * structured such that `lengthNode` is a `DBListener` that stores the \n * length of the list, while `parentNode` is a `DBListener` to the parent\n * node of the list. Each item in the list is a child of `parentNode`,\n * which is then stored as a `DBListener` in the array `nodes`.\n */\nexport class DBListenerArray extends DBNodeArray {\n  lengthNode: DBListener;\n  parentNode: DBListener;\n  nodes: Array;\n\n  /**\n  * holds the Unsubscribe functions that are returned by\n  * DB event functions like onValue(...)\n  */\n  unsubscribers: Array;\n\n  constructor(lengthNode: DBListener, parentNode: DBListener) {\n    super(lengthNode, parentNode);\n    this.lengthNode = lengthNode;\n    this.parentNode = parentNode;\n    this.nodes = [];\n    this.unsubscribers = [];\n  }\n\n  /**\n   * @method attach\n   */\n  attach() {\n    this.lengthNode.attach();\n    this.lengthNode.on('change', (val) => {\n        this.emit('ready', this.ready);\n    });\n\n    this.parentNode.attach();\n    this.parentNode.once('change', (val) => {\n      this.emit('ready', this.ready);\n    });\n\n    for (var node of this.nodes) {\n      this.attachChildNode(node);\n    }\n\n    this.unsubscribers.push(\n      onChildAdded(this.parentNode.ref, (snapshot) => {\n        // console.log(\"child added\", snapshot);\n        this.addNode(snapshot.key);\n    }));\n\n    this.unsubscribers.push(\n      onChildChanged(this.parentNode.ref, (snapshot) => {\n        console.log(\"child changed\", snapshot);\n    }));\n\n    this.unsubscribers.push(\n      onChildRemoved(this.parentNode.ref, () => {\n        // console.log(\"child removed\", snapshot);\n        let removed = this.popNode();\n        this.emit('child-removed', removed);\n    }));\n  }\n\n  detach() {\n    if (this.active) {\n      while (this.unsubscribers.length > 0) {\n        let unsub = this.unsubscribers.pop();\n        unsub();\n      }\n    }\n  }\n\n  nodeAt(n: number) {\n    // console.log(this.nodes);\n    // console.log(\"node at \", n);\n    // console.log(this.nodes[n]);\n    return this.nodes[n];\n  }\n\n  /**\n   * Creating a new child node.\n   * @param key \n   */\n  addNode(key: string) {\n    console.log('child key', key);\n    const childRef = child(this.parentNode.ref, key);\n    const childNode = new DBListener({ ref: childRef, key: key, id: this.length });\n    this.attachChildNode(childNode);\n    this.pushNode(childNode);\n    this.emit('child-added', childNode);\n    // this.lengthNode.setVal(this.length);\n  }\n\n  /**\n   * Attaching a child node that was created elsewhere.\n   * Invokes child's `attach()` method and adds event listener\n   * that will emit a `child-change` event.\n   * @param node \n   */\n  attachChildNode(node: DBListener) {\n    node.attach();\n    node.on('change', (val) => {\n      this.emit('child-change', {\n        id: node.id,\n        val: val\n      });\n    });\n  }\n\n  // remNode() {\n  //   const node = this.popNode();\n  //   // remove(node.ref);\n  //   // this.lengthNode.setVal(this.length);\n  // }\n\n  // updateArray(num: number) {\n  //   // this.parentNode.getNow();\n  //   if (num > this.length) {\n  //     let parentKeys = this.parentNode.val;\n  //     // console.log(this.parentNode);\n  //     console.log(parentKeys);\n  //     let childKeys = Object.keys(parentKeys);\n  //     while (this.length  num) {\n  //       this.popNode();\n  //     }\n  //   }\n  //   console.log(this);\n  // }\n\n  toString() {\n    var str = \"\";\n    // str += \"length: \" + this.length + \", \";\n    str += \"[ \\n\";\n    for (var i=0; i ;\n  lengthNode: DBWriter;\n  parentNode: DBWriter;\n\n  constructor(lengthNode, parentNode, init) {\n    super(lengthNode, parentNode, init);\n    if (!init) {\n      this.lengthNode.setVal(0);\n      this.parentNode.setVal(EMPTY_NODE_ARRAY);\n    }\n\n    // console.log(this);\n  }\n\n  addNode(initVal) {\n    const childRef = push(this.parentNode.ref, initVal);\n    const childNode = new DBWriter({ ref: childRef, initVal });\n    childNode.attach();\n    this.pushNode(childNode);\n    this.lengthNode.setVal(this.length);\n  }\n\n  remNode() {\n    const node = this.popNode();\n    remove(node.ref);\n    this.lengthNode.setVal(this.length);\n  }\n\n  updateArray(num, newStates) {\n    if (num > this.length) {\n      while (this.length  num) {\n        this.remNode();\n      }\n    }\n  }\n\n  setNode(i, x) {\n    this.nodes[i].setVal(x);\n  }\n\n}\n\n/**\n * Array of two-way DBNodes where both ends are listening for\n * changes AND may write to the DB -- such as the virtual pedals\n * where both AdaCAD and the Pi/PC can add virtual pedals\n */\nexport class DBTwoWayArray extends DBNodeArray {\n  nodes: Array = [];\n  lengthNode: DBTwoWay;\n  parentNode: DBTwoWay;\n\n  /**\n  * holds the Unsubscribe functions that are returned by\n  * DB event functions like onValue(...)\n  */\n  unsubscribers: Array;\n\n  constructor(lengthNode: DBTwoWay, parentNode: DBTwoWay, init?: Array) {\n    super(lengthNode, parentNode, init);\n    this.unsubscribers = [];\n    if (!init) {\n      this.lengthNode.setVal(0);\n      this.parentNode.setVal(EMPTY_NODE_ARRAY);\n    }\n  }\n\n  addNode(initVal: any) {\n    push(this.parentNode.ref, initVal);\n    // const childNode = new DBTwoWay({ ref: childRef, initVal });\n    // childNode.attach();\n    // this.pushNode(childNode);\n    // this.lengthNode.setVal(this.length);\n    // console.log('child key', key);\n  }\n\n  onNodeAdded(key: string) {\n     const childRef = child(this.parentNode.ref, key);\n     const childNode = new DBTwoWay({ ref: childRef, key: key, id: this.length });\n     this.attachChildNode(childNode);\n     this.pushNode(childNode);\n     this.lengthNode.setVal(this.length);\n     this.emit('child-added', childNode);\n  }\n\n  remNode() {\n    const lastNode = this.nodeAt(this.length-1);\n    remove(lastNode.ref);\n    // this.lengthNode.setVal(this.length);\n  }\n\n  onNodeRemoved() {\n    let removed = this.popNode();\n    this.lengthNode.setVal(this.length);\n    return removed;\n  }\n\n  updateArray(num: number, newStates: Array) {\n    if (num > this.length) {\n      while (this.length  num) {\n        this.remNode();\n      }\n    }\n  }\n\n  setNode(i: number, x: any) {\n    this.nodes[i].setVal(x);\n  }\n\n  /**\n  * @method attach\n  */\n  attach() {\n    this.lengthNode.attach();\n    this.lengthNode.on('change', (val) => {\n        this.emit('ready', this.ready);\n    });\n\n    this.parentNode.attach();\n    this.parentNode.once('change', (val) => {\n      this.emit('ready', this.ready);\n    });\n\n    for (var node of this.nodes) {\n      this.attachChildNode(node);\n    }\n\n    this.unsubscribers.push(\n      onChildAdded(this.parentNode.ref, (snapshot) => {\n        // console.log(\"child added\", snapshot);\n        this.onNodeAdded(snapshot.key);\n    }));\n\n    this.unsubscribers.push(\n      onChildChanged(this.parentNode.ref, (snapshot) => {\n        console.log(\"child changed\", snapshot);\n    }));\n\n    this.unsubscribers.push(\n      onChildRemoved(this.parentNode.ref, () => {\n        // console.log(\"child removed\", snapshot);\n        let removed = this.onNodeRemoved();\n        this.emit('child-removed', removed);\n    }));\n  }\n \n  detach() {\n    if (this.active) {\n      while (this.unsubscribers.length > 0) {\n        let unsub = this.unsubscribers.pop();\n        unsub();\n      }\n    }\n  }\n\n  /**\n  * Attaching a child node that was created elsewhere.\n  * Invokes child's `attach()` method and adds event listener\n  * that will emit a `child-change` event.\n  * @param node \n  */\n  attachChildNode(node: DBListener) {\n    node.attach();\n    node.on('change', (val) => {\n      this.emit('child-change', {\n        id: node.id,\n        val: val\n      });\n    });\n  }\n}\n\n/** special types of DBNodes */\n\n/** @class\n * OnlineStatus representing whether or not the\n * \"host\" device is online. The host device is responsible\n * for keeping the node set to \"true\", while any listener\n * devices check occasionally for the host's status by \n * attempting to set the node to \"false\".\n */\nexport class OnlineStatus extends DBListener {\n  _name: string;\n  _ref: DatabaseReference;\n  _val: boolean;\n  _active: boolean;\n\n  constructor(params) {\n    super(params);\n    this.attach();\n    get(query(this.ref))\n      .then((snapshot) => {\n        this.val = snapshot.val();\n      })\n      .catch(result => console.log(result));\n  }\n\n  checkAlive() {\n    set(this.ref, false)\n      .then(() => { this.emit('set', true); })\n      .catch(() => { this.emit('set', false); });\n  }\n}\n\n\n    \n\n\n\n\n\n\n\n\n\n\n                   \n    \n         results matching \"\"\n        \n    \n    \n        No results matching \"\"\n    \n\n"},"interfaces/OpClassifier.html":{"url":"interfaces/OpClassifier.html","title":"interface - OpClassifier","body":"\n                   \n\n\n\n\n\n\n\n\n\n\n\n\n\n\n  Interfaces\n  \n  OpClassifier\n\n\n\n        \n            Info\n        \n        \n            Source\n        \n\n\n\n    \n        \n            File\n        \n        \n            src/app/mixer/model/operation/topology.ts\n        \n\n\n            \n                Description\n            \n            \n                Key-value pairs for an Operation's Topology and Constraint.\n\n            \n\n\n        \n            Index\n            \n                \n                    \n                        \n                            Properties\n                        \n                    \n                    \n                        \n                            \n                                \n                                        \n                                            input_drafts\n                                        \n                                \n                                \n                                        \n                                            input_params\n                                        \n                                \n                                \n                                        \n                                            type\n                                        \n                                \n                            \n                        \n                    \n                \n            \n        \n\n\n\n            \n                Properties\n                    \n                        \n                                \n                                    \n                                        \n                                        input_drafts\n                                            \n                                                \n                                            \n                                        \n                                    \n                                \n                                \n                                    \n                                        input_drafts:      | string\n\n                                    \n                                \n\n\n                                    \n                                        \n                                            Type :      | string\n\n                                        \n                                    \n\n\n\n\n\n                        \n                    \n                    \n                        \n                                \n                                    \n                                        \n                                        input_params\n                                            \n                                                \n                                            \n                                        \n                                    \n                                \n                                \n                                    \n                                        input_params:      | string\n\n                                    \n                                \n\n\n                                    \n                                        \n                                            Type :      | string\n\n                                        \n                                    \n\n\n\n\n\n                        \n                    \n                    \n                        \n                                \n                                    \n                                        \n                                        type\n                                            \n                                                \n                                            \n                                        \n                                    \n                                \n                                \n                                    \n                                        type:      | string\n\n                                    \n                                \n\n\n                                    \n                                        \n                                            Type :      | string\n\n                                        \n                                    \n\n\n\n\n\n                        \n                    \n            \n    \n\n\n    \n        import { Draft } from \"../../../core/model/datatypes\";\nimport { ParamValue, OperationParam as OpParam, getParamValues } from \"./params\";\nimport { OperationInlet as OpInlet, InletDrafts } from \"./inlets\";\n\n/**\n* At its heart, an Operation is a very fancy function that outputs a Draft or several Drafts.\n* The function itself is perform(), and the Operation can take inputs in the form of \n* Drafts (inlets) or Parameters (params).\n*/\n\n/** \n* Types that an Operation's perform() function can handlle as input/output\n*/\n\n/** @type Union of types that can serve as input to Operation perform() functions. */\nexport type PerformDraftInput = InletDrafts | Array | Draft | null;\n\ntype MultiDraftInput = InletDrafts | Array;\n\n/** @type Union of types that Operation perform() functions can output. */\nexport type PerformOutput = Array | Draft;\n\n/**\n * OPERATION TOPOLOGY\n * Topology refers to the shape of the Operation in terms of its\n * number of input and output Drafts. Classifies Operations.\n */\n\nexport const TopologyName = {\n  pipe: 'pipe', \n  seed: 'seed', \n  merge: 'merge', \n  branch: 'branch', \n  bus: 'bus'\n} as const;\nexport type TopologyName = keyof typeof TopologyName;\n\ninterface TopologyDef { type: TopologyName; input: PerformDraftInput; output: PerformOutput; };\n\n/**\n* @class\n* Operation that can generate a draft with no inputs, may take an optional input\n* @method perform OpPerform function: \n* - INPUT: zero or one Draft\n* - OUTPUT: exactly one Draft\n*/\nexport class Seed implements TopologyDef { type: 'seed'; input: Draft | null; output: Draft; };\n\n/**\n* @class\n* Operation that takes one input and generates one output draft. \n* @method perform OpPerform function: \n* - INPUT: exactly one Draft\n* - OUTPUT: exactly one Draft\n*/\nexport class Pipe implements TopologyDef { type: 'pipe'; input: Draft; output: Draft; };\n\n/**\n* @class\n* Operation that takes many (N) inputs and generates one output draft.\n* @method perform OpPerform function: \n* - INPUT: Array of Drafts\n* - OUTPUT: exactly one Draft\n*/\nexport class Merge implements TopologyDef { type: 'merge'; input: InletDrafts | Array; output: Draft; };\n\n/**\n* @class\n* Operation that takes one input and generates many (N) output drafts.\n* @method perform OpPerform function:\n* - INPUT: exactly one Draft\n* - OUTPUT: Array of Drafts\n*/\nexport class Branch implements TopologyDef { type: 'branch'; input: Draft; output: Array; };\n\n/**\n* CURRENTLY UNUSED\n* @class\n* Operation that takes many (N) inputs and generates many (M) output drafts.\n* Number of inputs does not necessarily match number of outputs (N ?= M).\n* @method perform OpPerform function:  \n* - INPUT: Array of Drafts\n* - OUTPUT: Array of Drafts\n*/\nexport class Bus implements TopologyDef { type: 'bus'; input: Array | InletDrafts; output: Array; };\n\ntype TopologyIndex = {\n  'seed': Seed,\n  'pipe': Pipe,\n  'merge': Merge,\n  'branch': Branch,\n  'bus': Bus\n}\ntype OpTopology = TopologyIndex[TopologyName];\n\n/**\n * OPERATION CONSTRAINT\n * A Constraint on an Operation classifies it based on its\n * input requirements (both Drafts and Params).\n */\n\nexport const ConstraintOptions = {\n  req: 'req', \n  opt: 'opt', \n  none: 'none'\n} as const;\nexport type ConstraintOptions = keyof typeof ConstraintOptions;\n\nexport const ConstraintName = {\n  no_drafts: { input_drafts: 'none', input_params: 'req' }, \n  no_params: { input_drafts: 'req', input_params: 'none' }, \n  drafts_opt: { input_drafts: 'opt', input_params: 'req' }, \n  params_opt: { input_drafts: 'req', input_params: 'opt' }, \n  all_req: {input_drafts: 'req', input_params: 'req' },\n} as const;\ntype ConstraintName = keyof typeof ConstraintName;\n\ntype ConstraintDefs = {\n  [C in keyof typeof ConstraintName]: {\n    constraint: C;\n    input_drafts: typeof ConstraintName[C][\"input_drafts\"];\n    input_params: typeof ConstraintName[C][\"input_params\"];\n  }\n}\n\nexport type NoDrafts = ConstraintDefs[\"no_drafts\"];\nexport type NoParams = ConstraintDefs[\"no_params\"];\nexport type DraftsOptional = ConstraintDefs[\"drafts_opt\"];\nexport type ParamsOptional = ConstraintDefs[\"params_opt\"];\nexport type AllRequired = ConstraintDefs[\"all_req\"];\n\ntype ConstraintIndex = {\n  'no_drafts': NoDrafts, // does not accept input drafts\n  'no_params': NoParams, // does not accept params\n  'drafts_opt': DraftsOptional, // can take no params -- has default values\n  'params_opt': ParamsOptional, // can take zero input drafts\n  'all_req': AllRequired, // both inputs and params required\n}\ntype OpConstraint = ConstraintIndex[ConstraintName]; \n\n/** \n* Generic types for perform() functions, describing options \n* for input draft multiplicity (0, 1, N) and param requirement \n*/\n\ntype NoDraftsPerform = {(params: Array): Topo[\"output\"]};\ntype NoParamsPerform = {(inputs: Topo[\"input\"]): Topo[\"output\"]};\ntype ParamsOptionalPerform = {(inputs: Topo[\"input\"], params?: Array): Topo[\"output\"]}; \ntype DraftsOptionalPerform = {(params: Array, inputs?: Topo[\"input\"]): Topo[\"output\"]};  \ntype AllRequiredPerform = {(inputs: Topo[\"input\"], params: Array): Topo[\"output\"]};  \n\ntype PerformCallSigs = {\n  no_drafts: { [Topo in keyof TopologyIndex]: NoDraftsPerform; },\n  no_params: { [Topo in keyof TopologyIndex]: NoParamsPerform; },\n  drafts_opt: { [Topo in keyof TopologyIndex]: DraftsOptionalPerform; },\n  params_opt: { [Topo in keyof TopologyIndex]: ParamsOptionalPerform; },\n  all_req: { [Topo in keyof TopologyIndex]: AllRequiredPerform; }\n}\n\n/**\n * @interface OpClassifier\n * Key-value pairs for an Operation's Topology and Constraint.\n */\ninterface OpClassifier {\n  type: Topo[\"type\"] | '';\n  input_drafts: Constraint[\"input_drafts\"] | '';\n  input_params: Constraint[\"input_params\"] | '';\n}\n\n/** @type User-defined descriptive strings for any Operation. */\ntype OperationDescriptors = { name: string, displayname: string, dx: string };\n\n/**\n* A standard Operation's metadata -- i.e. everything not the perform() function\n* @param name the internal name of this opearation (CHANGING THESE WILL BREAK LEGACY VERSIONS)\n* @param displayname the name to show upon this operation\n* @param dx the description of this operation\n* @param max_inputs the maximum number of inputs (drafts) allowed directly into this operation\n* @param params the parameters associated with this operation\n* @method perform an OpPerform function\n*/\nexport interface OperationProperties extends OperationDescriptors {\n  max_inputs: number,\n  default_params?: Array;\n  params: Array,\n}\n\n/**\n * @type A function that serves as the perform() method for an Operation. \n * This generic type requires two type parameters:\n * @param Topo one of the PerformInput types\n * @param Constraint one of the PerformOutput types\n *\n * OpPerform to give call signature for perform() function \n * Topo  = Seed | Pipe | Merge | Branch | Bus\n * Constraint = NoDrafts | NoParams | DraftsOptional | ParamsOptional | AllRequired\n */\nexport type OpPerform = PerformCallSigs[Constraint[\"constraint\"]][Topo[\"type\"]];\n// type PerformArgs = Parameters>;\n\n/** TODO doublecheck inlets have been added correctly (fields for input drafts) */\nexport class BaseOp implements OperationProperties {\n  name: string;\n  old_names: Array;\n  displayname: string;\n  dx: string;\n  params: Array;\n  inlets: Array;\n  default_params?: Array;\n  max_inputs: number;\n  classifier: OpClassifier;\n  perform: OpPerform;\n\n  /** @constructor create an Operation using an object literal (keys and values) */\n  constructor (args: OpConstructorArgs);\n  /** @constructor create an Operation using direct arguments in the constructor (values only) */\n  constructor (...args: OpConstructorArray);\n  constructor (name: string, displayname: string, dx: string, perform: OpPerform);\n  constructor (name: string, displayname: string, dx: string, params: Array, perform: OpPerform);\n  constructor (nameOrArgs: any, displayname?: string, dx?: string, performOrParams?: OpPerform | Array, performWithParams?: OpPerform) {\n    // console.log((nameOrArgs.name != undefined));\n    this.classifier = { type: '', input_drafts: '', input_params: '' };\n    if (nameOrArgs.name) {\n      let args = nameOrArgs;\n      this.name = args.name;\n      this.displayname = args.displayname;\n      this.dx = args.dx;\n      this.perform = args.perform;\n      if (args.params) this.params = args.params;\n      else this.params = [];\n      if (args.inlets) this.inlets = args.inlets;\n      else this.inlets = [];\n    } else {\n      this.name = nameOrArgs;\n      this.displayname = displayname;\n      this.dx = dx;\n      if (performWithParams) {\n        let params = > performOrParams;\n        this.params = params;\n        this.default_params = getParamValues(params);\n        this.perform = performWithParams;\n      } else {\n        this.params = [];\n        this.perform = > performOrParams;\n      }\n    }\n  }\n\n  constrain(c: ConstraintName): void {\n    if (c == 'no_drafts') { this.max_inputs = 0; this.inlets = []; }\n    this.classifier.input_drafts = ConstraintName[c][\"input_drafts\"]; \n    this.classifier.input_params = ConstraintName[c][\"input_params\"];\n  }\n\n  type(t: TopologyName): BaseOp {\n    this.classifier.type = t;\n    return this;\n  }\n}\n\ntype ConstructorArgKeysIndex = {\n  [C in keyof ConstraintIndex]: C extends \"no_params\" ? {\n    [T in keyof TopologyIndex]: {\n      name: string, displayname: string, dx: string, old_names: string[],\n      inlets: OpInlet[], perform: OpPerform\n    }\n  } : C extends \"no_drafts\" ? {\n    [T in keyof TopologyIndex]: {\n      name: string, displayname: string, dx: string, old_names: string[],\n      params: OpParam[], perform: OpPerform\n    }\n  } : {\n    [T in keyof TopologyIndex]: {\n      name: string, displayname: string, dx: string, old_names: string[],\n      params: OpParam[], inlets: OpInlet[],\n      perform: OpPerform\n    }\n  }\n}\n\ntype ConstructorArrayIndex = {\n  [C in keyof ConstraintIndex]: C extends \"no_params\" ? {\n    [T in keyof TopologyIndex]: [\n      name: string, displayname: string, dx: string, old_names: string[],\n      inlets: OpInlet[], perform: OpPerform\n    ]\n  } : C extends \"no_drafts\" ? {\n    [T in keyof TopologyIndex]: [\n      name: string, displayname: string, dx: string, old_names: string[],\n      params: OpParam[], perform: OpPerform\n    ]\n  } : {\n    [T in keyof TopologyIndex]: [\n      name: string, displayname: string, dx: string, old_names: string[],\n      params: OpParam[], inlets: OpInlet[],\n      perform: OpPerform\n    ]\n  }\n}\n\ntype OpConstructorArgKeys = \nConstructorArgKeysIndex[Constraint[\"constraint\"]][Topo[\"type\"]];\n\ntype OpConstructorArray = \nConstructorArrayIndex[Constraint[\"constraint\"]][Topo[\"type\"]];\n\ntype OpConstructorArgs = \nOpConstructorArgKeys | OpConstructorArray;\n\n// use factory design pattern to apply classifiers to BaseOp?? Is this too convoluted\n// https://refactoring.guru/design-patterns/abstract-factory/typescript\nclass AbstractOpFactory {\n  NoDrafts(args: OpConstructorArgKeys): BaseOp;\n  NoDrafts(...args: OpConstructorArray): BaseOp;\n  NoDrafts(...args: any) {\n    let op = new BaseOp(...args);\n    op.constrain(\"no_drafts\");\n    return op;\n  }\n\n  NoParams(args: OpConstructorArgKeys): BaseOp;\n  NoParams(...args: OpConstructorArray): BaseOp;\n  NoParams(...args: any) {\n    let op = new BaseOp(...args);\n    op.constrain(\"no_params\");\n    return op;\n  }\n\n  DraftsOptional(args: OpConstructorArgKeys): BaseOp;\n  DraftsOptional(...args: OpConstructorArray): BaseOp;\n  DraftsOptional(...args: any) {\n    let op = new BaseOp(...args);\n    op.constrain(\"drafts_opt\");\n    return op;\n  }\n\n  ParamsOptional(args: OpConstructorArgKeys): BaseOp;\n  ParamsOptional(...args: OpConstructorArray): BaseOp;\n  ParamsOptional(...args: any) {\n    let op = new BaseOp(...args);\n    op.constrain(\"params_opt\");\n    return op;\n  }\n\n  AllRequired(args: OpConstructorArgKeys): BaseOp;\n  AllRequired(...args: OpConstructorArray): BaseOp;\n  AllRequired(...args: any) {\n    let op = new BaseOp(...args);\n    op.constrain(\"all_req\");\n    return op;\n  }\n}\n\n// combine with mix-ins design pattern (link: TypeScript docs website)\nfunction makeTopoFactory(topo: TopologyName) {\n  return class TopologyFactory extends AbstractOpFactory {\n    static base = new AbstractOpFactory();\n    \n    static NoDrafts(args: OpConstructorArgKeys): BaseOp;\n    static NoDrafts(...args: OpConstructorArray): BaseOp;\n    static NoDrafts(...args: any) {\n      return this.base.NoDrafts(...args).type(topo);\n    }\n\n    static NoParams(args: OpConstructorArgKeys): BaseOp;\n    static NoParams(...args: OpConstructorArray): BaseOp;\n    static NoParams(...args: any) {\n      return this.base.NoParams(...args).type(topo);\n    }\n\n    static DraftsOptional(args: OpConstructorArgKeys): BaseOp;\n    static DraftsOptional(...args: OpConstructorArray): BaseOp;\n    static DraftsOptional(...args: any) {\n      return this.base.DraftsOptional(...args).type(topo);\n    }\n\n    static ParamsOptional(args: OpConstructorArgKeys): BaseOp;\n    static ParamsOptional(...args: OpConstructorArray): BaseOp;\n    static ParamsOptional(...args: any) {\n      return this.base.ParamsOptional(...args).type(topo);\n    }\n\n    static AllRequired(args: OpConstructorArgKeys): BaseOp;\n    static AllRequired(...args: OpConstructorArray): BaseOp;\n    static AllRequired(...args: any) {\n      return this.base.AllRequired(...args).type(topo);\n    }\n  }\n}\n\nexport const OpFactories = {\n  Seed: makeTopoFactory(\"seed\"),\n  Pipe: makeTopoFactory(\"pipe\"),\n  Merge: makeTopoFactory(\"merge\"),\n  Branch: makeTopoFactory(\"merge\"),\n  Bus: makeTopoFactory(\"bus\"),\n}\n\n// export const SeedOperation = makeTopoFactory(\"seed\");\n// export const PipeOperation = makeTopoFactory(\"pipe\");\n// export const MergeOperation = makeTopoFactory(\"merge\");\n// export const BranchOperation = makeTopoFactory(\"merge\");\n// export const BusOperation = makeTopoFactory(\"bus\");\n\ntype TopologyOpIndex = {\n  [T in keyof TopologyIndex]: {\n    [C in keyof ConstraintIndex]: BaseOp;\n  }\n}\n\nexport type BuildableOperation = TopologyOpIndex[TopologyName][ConstraintName];\n    \n\n\n\n\n\n\n\n\n\n                   \n    \n         results matching \"\"\n        \n    \n    \n        No results matching \"\"\n    \n\n"},"interfaces/OpComponentProxy.html":{"url":"interfaces/OpComponentProxy.html","title":"interface - OpComponentProxy","body":"\n                   \n\n\n\n\n\n\n\n\n\n\n\n\n\n\n  Interfaces\n  \n  OpComponentProxy\n\n\n\n        \n            Info\n        \n        \n            Source\n        \n\n\n\n    \n        \n            File\n        \n        \n            src/app/core/model/datatypes/files.ts\n        \n\n\n            \n                Description\n            \n            \n                a sparce form of an operaction component to use for saving\n\n            \n\n\n        \n            Index\n            \n                \n                    \n                        \n                            Properties\n                        \n                    \n                    \n                        \n                            \n                                \n                                        \n                                            inlets\n                                        \n                                \n                                \n                                        \n                                            name\n                                        \n                                \n                                \n                                        \n                                            node_id\n                                        \n                                \n                                \n                                        \n                                            params\n                                        \n                                \n                            \n                        \n                    \n                \n            \n        \n\n\n\n            \n                Properties\n                    \n                        \n                                \n                                    \n                                        \n                                        inlets\n                                            \n                                                \n                                            \n                                        \n                                    \n                                \n                                \n                                    \n                                        inlets:     Array\n\n                                    \n                                \n\n\n                                    \n                                        \n                                            Type :     Array\n\n                                        \n                                    \n\n\n\n\n\n                        \n                    \n                    \n                        \n                                \n                                    \n                                        \n                                        name\n                                            \n                                                \n                                            \n                                        \n                                    \n                                \n                                \n                                    \n                                        name:         string\n\n                                    \n                                \n\n\n                                    \n                                        \n                                            Type :         string\n\n                                        \n                                    \n\n\n\n\n\n                        \n                    \n                    \n                        \n                                \n                                    \n                                        \n                                        node_id\n                                            \n                                                \n                                            \n                                        \n                                    \n                                \n                                \n                                    \n                                        node_id:         number\n\n                                    \n                                \n\n\n                                    \n                                        \n                                            Type :         number\n\n                                        \n                                    \n\n\n\n\n\n                        \n                    \n                    \n                        \n                                \n                                    \n                                        \n                                        params\n                                            \n                                                \n                                            \n                                        \n                                    \n                                \n                                \n                                    \n                                        params:     Array\n\n                                    \n                                \n\n\n                                    \n                                        \n                                            Type :     Array\n\n                                        \n                                    \n\n\n\n\n\n                        \n                    \n            \n    \n\n\n    \n        import { Draft } from './drafts';\nimport { Loom, LoomSettings } from './looms';\nimport { Shuttle } from '../shuttle';\nimport { Note } from '../../provider/notes.service';\nimport { Bounds } from './screenlayout';\n\n/****** OBJECTS/TYPES FOR LOADING AND SAVING FILES *****/\n\n/**\n * holds data about each node/component in a form to easily load.\n * @param node_id the id of this node within the tree\n * @param type the type of node\n * @param bounds the screen position and size data for this node\n */\nexport interface NodeComponentProxy {\n    node_id: number,\n    type: string,\n    bounds: Bounds\n  }\n  \n  /**\n   * stores a sparce version of a tree node for easy reloading\n   * @param node the node id this treenode refers too\n   * @param parent the node id of the parent node for this treenode\n   * @param inputs an array of treenode ids for all values coming into this node\n   * @param outputs an array of treenode ids for all downstream functions \n   */\n   export interface TreeNodeProxy {\n    node: number,\n    parent: number; \n    inputs: Array;\n    outputs: Array; \n   }\n  \n    /**\n    * holds data about each draft component in a compressed form \n    * @param draft_id the draft id associated with this node (if available)\n   * @param draft_visible a boolean to state if this node is visible or not. \n   * @param draft_name a string representing a user defined name\n   * @param draft this will only export if the draft is a seed draft\n   * @param loom this will only export if the draft is a seed draft \n   * @param loom_settings the associated loom settings on this node, if present\n    */\n  \n    export interface DraftNodeProxy {\n      node_id: number;\n      draft_id: number;\n      draft_name: string;\n      draft: Draft;\n      draft_visible: boolean;\n      loom: Loom,\n      loom_settings: LoomSettings;\n    }\n  \n  /**\n    * a sparce form of an operaction component to use for saving\n    * @param node_id the node id this object refers too\n    * @param name the name of the operation at this node\n    * @param params the list of input parameters to this operation\n    * @param inlets the let of inlets and associated values \n    */\n  export interface OpComponentProxy {\n    node_id: number,\n    name: string,\n    params: Array, \n    inlets: Array;\n  }\n  \n  \n   /**\n    * describes the data from the workspace that is saved.\n    */\n   export interface SaveObj {\n    version: string,\n    workspace: any,\n    type: string,\n    nodes: Array,\n    tree: Array,\n    draft_nodes: Array,\n    ops: Array,\n    notes: Array,\n    materials: Array,\n    scale: number\n   }\n  \n  export interface FileObj {\n   version: string,\n   workspace: any,\n   filename: string,\n   nodes: Array,\n   treenodes: Array,\n   draft_nodes: Array,\n   ops: Array\n   scale: number\n  }\n  \n  export interface StatusMessage {\n    id: number,\n    message: string,\n    success: boolean\n  }\n  \n  export interface LoadResponse {\n    data: FileObj,\n    status: number;\n  }\n  \n  export interface Fileloader {\n    ada: (filename: string, data: any) => Promise,\n    //wif: (filename: string, data: any) => Promise,\n    //bmp: (filename: string, data: any) => Promise,\n    //jpg: (filename: string, data: any) => Promise,\n    form: (data: any) => Promise}\n  \n  export interface FileSaver {\n    ada: (type: string, for_timeline:boolean, current_scale: number) => Promise,\n    //wif: (draft: Draft, loom: Loom) => Promise,\n    bmp: (canvas: HTMLCanvasElement) => Promise,\n    jpg: (canvas: HTMLCanvasElement) => Promise\n  }\n    \n\n\n\n\n\n\n\n\n\n                   \n    \n         results matching \"\"\n        \n    \n    \n        No results matching \"\"\n    \n\n"},"components/OpHelpModal.html":{"url":"components/OpHelpModal.html","title":"component - OpHelpModal","body":"\n                   \n\n\n\n\n\n  Components\n  \n  OpHelpModal\n\n\n\n        \n            Info\n        \n        \n            Source\n        \n        \n            Template\n        \n        \n            Styles\n        \n        \n            DOM Tree\n        \n\n\n\n    \n    File\n\n\n    src/app/mixer/modal/ophelp/ophelp.modal.ts\n\n\n\n\n\n    \n        Implements\n    \n    \n                    OnInit\n    \n\n\n\n    Metadata\n    \n        \n\n\n\n\n\n\n\n\n\n\n\n            \n                selector\n                app-ophelp\n            \n\n            \n                styleUrls\n                ./ophelp.modal.scss\n            \n\n\n\n            \n                templateUrl\n                ./ophelp.modal.html\n            \n\n\n\n\n\n\n\n\n        \n    \n\n\n    \n    Index\n    \n        \n                \n                    \n                        Properties\n                    \n                \n                \n                    \n                        \n                            \n                                    Public\n                                data\n                            \n                            \n                                documenation\n                            \n                            \n                                dynamic_param_id\n                            \n                            \n                                dynamic_param_name\n                            \n                            \n                                dynamic_type\n                            \n                            \n                                is_dynamic_op\n                            \n                            \n                                name\n                            \n                            \n                                params\n                            \n                        \n                    \n                \n\n                \n                    \n                        Methods\n                    \n                \n                \n                    \n                        \n                            \n                                close\n                            \n                            \n                                ngOnInit\n                            \n                        \n                    \n                \n\n\n\n\n\n        \n    \n\n\n    \n    Constructor\n        \n            \n                \n                    \nconstructor(dialogRef: MatDialogRef, data: any, ops: OperationService)\n                    \n                \n                        \n                            \n                                Defined in src/app/mixer/modal/ophelp/ophelp.modal.ts:19\n                            \n                        \n\n                \n                    \n                            \n                                    Parameters :\n                                    \n                                        \n                                            \n                                                Name\n                                                    Type\n                                                Optional\n                                            \n                                        \n                                        \n                                                \n                                                        dialogRef\n                                                  \n                                                        \n                                                                        MatDialogRef\n                                                        \n                                                  \n                                                    \n                                                            No\n                                                    \n                                                    \n                                                \n                                                \n                                                        data\n                                                  \n                                                        \n                                                                        any\n                                                        \n                                                  \n                                                    \n                                                            No\n                                                    \n                                                    \n                                                \n                                                \n                                                        ops\n                                                  \n                                                        \n                                                                        OperationService\n                                                        \n                                                  \n                                                    \n                                                            No\n                                                    \n                                                    \n                                                \n                                        \n                                    \n                            \n                    \n                \n            \n        \n\n\n\n\n\n\n    \n    \n    \n        Methods\n    \n    \n        \n            \n                \n                    \n                    \n                        close\n                        \n                    \n                \n            \n            \n                \nclose()\n                \n            \n\n\n            \n                \n                    Defined in src/app/mixer/modal/ophelp/ophelp.modal.ts:45\n                \n            \n\n\n            \n                \n\n                    \n                        Returns :         void\n\n                    \n                \n            \n        \n    \n    \n        \n            \n                \n                    \n                    \n                        ngOnInit\n                        \n                    \n                \n            \n            \n                \nngOnInit()\n                \n            \n\n\n            \n                \n                    Defined in src/app/mixer/modal/ophelp/ophelp.modal.ts:42\n                \n            \n\n\n            \n                \n\n                    \n                        Returns :         void\n\n                    \n                \n            \n        \n    \n\n    \n    \n    \n        Properties\n    \n    \n        \n            \n                \n                    \n                    \n                            Public\n                        data\n                        \n                    \n                \n            \n                \n                    \n                        Type :         any\n\n                    \n                \n                \n                    \n                        Decorators : \n                        \n                        \n                            @Inject(MAT_DIALOG_DATA)\n                        \n                    \n                \n                    \n                        \n                                Defined in src/app/mixer/modal/ophelp/ophelp.modal.ts:25\n                        \n                    \n\n\n        \n    \n    \n        \n            \n                \n                    \n                    \n                        documenation\n                        \n                    \n                \n            \n                \n                    \n                        Type :         any\n\n                    \n                \n                \n                    \n                        Default value : \"\"\n                    \n                \n                    \n                        \n                                Defined in src/app/mixer/modal/ophelp/ophelp.modal.ts:13\n                        \n                    \n\n\n        \n    \n    \n        \n            \n                \n                    \n                    \n                        dynamic_param_id\n                        \n                    \n                \n            \n                \n                    \n                        Type :         number\n\n                    \n                \n                \n                    \n                        Default value : 0\n                    \n                \n                    \n                        \n                                Defined in src/app/mixer/modal/ophelp/ophelp.modal.ts:18\n                        \n                    \n\n\n        \n    \n    \n        \n            \n                \n                    \n                    \n                        dynamic_param_name\n                        \n                    \n                \n            \n                \n                    \n                        Type :         string\n\n                    \n                \n                \n                    \n                        Default value : ''\n                    \n                \n                    \n                        \n                                Defined in src/app/mixer/modal/ophelp/ophelp.modal.ts:19\n                        \n                    \n\n\n        \n    \n    \n        \n            \n                \n                    \n                    \n                        dynamic_type\n                        \n                    \n                \n            \n                \n                    \n                        Type :         string\n\n                    \n                \n                \n                    \n                        Default value : \"\"\n                    \n                \n                    \n                        \n                                Defined in src/app/mixer/modal/ophelp/ophelp.modal.ts:17\n                        \n                    \n\n\n        \n    \n    \n        \n            \n                \n                    \n                    \n                        is_dynamic_op\n                        \n                    \n                \n            \n                \n                    \n                        Type :         boolean\n\n                    \n                \n                    \n                        \n                                Defined in src/app/mixer/modal/ophelp/ophelp.modal.ts:15\n                        \n                    \n\n\n        \n    \n    \n        \n            \n                \n                    \n                    \n                        name\n                        \n                    \n                \n            \n                \n                    \n                        Type :         string\n\n                    \n                \n                    \n                        \n                                Defined in src/app/mixer/modal/ophelp/ophelp.modal.ts:14\n                        \n                    \n\n\n        \n    \n    \n        \n            \n                \n                    \n                    \n                        params\n                        \n                    \n                \n            \n                \n                    \n                        Type :     Array\n\n                    \n                \n                    \n                        \n                                Defined in src/app/mixer/modal/ophelp/ophelp.modal.ts:16\n                        \n                    \n\n\n        \n    \n\n\n\n\n\n    \n        import { Component, OnInit, Inject } from '@angular/core';\nimport { MAT_DIALOG_DATA, MatDialogRef } from \"@angular/material/dialog\";\nimport { DynamicOperation } from '../../../core/model/datatypes';\nimport { OperationService } from '../../provider/operation.service';\n\n@Component({\n  selector: 'app-ophelp',\n  templateUrl: './ophelp.modal.html',\n  styleUrls: ['./ophelp.modal.scss']\n})\nexport class OpHelpModal implements OnInit {\n  \n  documenation: any =\"\";\n  name: string;\n  is_dynamic_op: boolean;\n  params: Array;\n  dynamic_type: string =\"\";\n  dynamic_param_id: number = 0;\n  dynamic_param_name: string = '';\n\n\n\n\n  constructor(private dialogRef: MatDialogRef,\n             @Inject(MAT_DIALOG_DATA) public data: any, private ops:OperationService) { \n        \n        const op = this.ops.getOp(data.op.name);\n        this.name = data.op.name;\n        this.is_dynamic_op = this.ops.isDynamic(this.name);\n        this.params = op.params;\n        if(this.is_dynamic_op){\n          this.dynamic_type = ( op).dynamic_param_type;\n          this.dynamic_param_id =( op).dynamic_param_id;\n          this.dynamic_param_name = this.params[this.dynamic_param_id].name;\n        }\n        \n\n\n    }\n\n  \n  ngOnInit() {\n  }\n\n  close() {\n    this.dialogRef.close();\n  }\n\n}\n\n    \n\n    \n        {{data.op.displayname}}\n\n\n  \n\n    \n  \t  {{data.op.dx}}\n  \t  Can take up to {{data.op.max_inputs}} input drafts\n\n      \n         0\"> Inputs \n        \n            Parameter Name: {{param.name}}\n            Parameter Description: {{param.dx}}\n            Parameter Type: {{param.type}} \n             min/max value of this input: {{param.min}}-{{param.max}}\n\t\t    \n\n        \n          This is a dyanmic operation, meaning that one of the parameters above generates multiple \"inlets\" to the function, each which can accept a draft and associate a particular value with that draft.\n          Input that Controls the Inlets: {{dynamic_param_name}}\n          Inlet type: {{dynamic_type}}\n      \n\n      \n\n\n      \n      Documentation -->\n    \n\n       Code \n      {{data.op.perform}}\n    \n  \n\n\n  Close\n\n    \n\n    \n                \n                    ./ophelp.modal.scss\n                \n                \n.help-container{\n\tdisplay: block;\n}\n\na{\n\tcolor: #00d1b2;\n\tfont-weight:bold;\n}\n\nh2{\n\tfont-size: 1.8em;\n\tpadding-top:1em;\n}\n\nh3{\n\tfont-size: 1.2em;\n\tpadding-top:1em;\n}\n\n\n\n\n\n\n    \n\n    \n        \n        \n            \n                Legend\n            \n            \n                Html element\n            \n            \n                Component\n            \n            \n                Html element with directive\n            \n        \n    \n\n    \n\n\n\n\n\n\n        var COMPONENT_TEMPLATE = '{{data.op.displayname}}        \t  {{data.op.dx}}  \t  Can take up to {{data.op.max_inputs}} input drafts               0\"> Inputs                     Parameter Name: {{param.name}}            Parameter Description: {{param.dx}}            Parameter Type: {{param.type}}              min/max value of this input: {{param.min}}-{{param.max}}\t\t                      This is a dyanmic operation, meaning that one of the parameters above generates multiple \"inlets\" to the function, each which can accept a draft and associate a particular value with that draft.          Input that Controls the Inlets: {{dynamic_param_name}}          Inlet type: {{dynamic_type}}                        Documentation -->           Code       {{data.op.perform}}        Close'\n    var COMPONENTS = [{'name': 'ConnectionComponent', 'selector': 'app-connection'},{'name': 'DraftdetailComponent', 'selector': 'app-draftdetail'},{'name': 'ImageComponent', 'selector': 'app-image'},{'name': 'InletComponent', 'selector': 'app-inlet'},{'name': 'MixerComponent', 'selector': 'app-mixer'},{'name': 'MixerViewComponent', 'selector': 'app-mixerview'},{'name': 'NoteComponent', 'selector': 'app-note'},{'name': 'OperationComponent', 'selector': 'app-operation'},{'name': 'OpHelpModal', 'selector': 'app-ophelp'},{'name': 'OpsComponent', 'selector': 'app-ops'},{'name': 'OpSequencerComponent', 'selector': 'app-op-sequencer'},{'name': 'PaletteComponent', 'selector': 'app-palette'},{'name': 'ParameterComponent', 'selector': 'app-parameter'},{'name': 'PlayerComponent', 'selector': 'app-player'},{'name': 'SnackbarComponent', 'selector': 'app-snackbar'},{'name': 'SubdraftComponent', 'selector': 'app-subdraft'},{'name': 'VirtualPedalsComponent', 'selector': 'app-virtual-pedals'},{'name': 'WeavingStateComponent', 'selector': 'app-weaving-state'}];\n    var DIRECTIVES = [{'name': 'MarqueeComponent', 'selector': 'app-marquee'},{'name': 'SelectionComponent', 'selector': 'app-selection'}];\n    var ACTUAL_COMPONENT = {'name': 'OpHelpModal'};\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n                   \n    \n         results matching \"\"\n        \n    \n    \n        No results matching \"\"\n    \n\n"},"interfaces/OpInput.html":{"url":"interfaces/OpInput.html","title":"interface - OpInput","body":"\n                   \n\n\n\n\n\n\n\n\n\n\n\n\n\n\n  Interfaces\n  \n  OpInput\n\n\n\n        \n            Info\n        \n        \n            Source\n        \n\n\n\n    \n        \n            File\n        \n        \n            src/app/mixer/model/operation.ts\n        \n\n\n            \n                Description\n            \n            \n                this is a type that contains a series of smaller operations held under the banner of one larger operation (such as layer)\n\n            \n\n\n        \n            Index\n            \n                \n                    \n                        \n                            Properties\n                        \n                    \n                    \n                        \n                            \n                                \n                                        \n                                            drafts\n                                        \n                                \n                                \n                                        \n                                            inlet\n                                        \n                                \n                                \n                                        \n                                            op_name\n                                        \n                                \n                                \n                                        \n                                            params\n                                        \n                                \n                            \n                        \n                    \n                \n            \n        \n\n\n\n            \n                Properties\n                    \n                        \n                                \n                                    \n                                        \n                                        drafts\n                                            \n                                                \n                                            \n                                        \n                                    \n                                \n                                \n                                    \n                                        drafts:         Array\n\n                                    \n                                \n\n\n                                    \n                                        \n                                            Type :         Array\n\n                                        \n                                    \n\n\n\n\n\n                        \n                    \n                    \n                        \n                                \n                                    \n                                        \n                                        inlet\n                                            \n                                                \n                                            \n                                        \n                                    \n                                \n                                \n                                    \n                                        inlet:     number | null\n\n                                    \n                                \n\n\n                                    \n                                        \n                                            Type :     number | null\n\n                                        \n                                    \n\n\n\n\n\n                        \n                    \n                    \n                        \n                                \n                                    \n                                        \n                                        op_name\n                                            \n                                                \n                                            \n                                        \n                                    \n                                \n                                \n                                    \n                                        op_name:         string\n\n                                    \n                                \n\n\n                                    \n                                        \n                                            Type :         string\n\n                                        \n                                    \n\n\n\n\n\n                        \n                    \n                    \n                        \n                                \n                                    \n                                        \n                                        params\n                                            \n                                                \n                                            \n                                        \n                                    \n                                \n                                \n                                    \n                                        params:     Array\n\n                                    \n                                \n\n\n                                    \n                                        \n                                            Type :     Array\n\n                                        \n                                    \n\n\n\n\n\n                        \n                    \n            \n    \n\n\n    \n        import { Draft } from '../../core/model/datatypes';\nimport { OperationParam, ParamValue } from './operation/params';\nimport { InletDrafts, OperationInlet } from './operation/inlets';\nimport { BaseOp as Op, BuildableOperation as GenericOp,\n  Seed, Pipe, Merge, Branch, Bus,\n  NoDrafts, NoParams, DraftsOptional, ParamsOptional, AllRequired\n} from './operation/topology';\n\n\n/** ALL OBJECTS/TYPES/UTILITY FUNCTIONS RELATED to OPERATIONS *****************/\n\nexport * from './operation/inlets';\nexport * from './operation/params';\nexport * from './operation/topology';\nexport * as format from './operation/formatting';\n\n/**** USING OPERATIONS with the MIXER TREE **************/\n\n/**\n * this is a type that contains a series of smaller operations held under the banner of one larger operation (such as layer)\n * @param op_name the name of the operation or \"child\" if this is an assignment to an input parameter\n * @param drafts the drafts associated with this input\n * @param params the parameters associated with this operation OR child input\n * @param inlets the index of the inlet for which the draft is entering upon\n */\n export interface OpInput {\n  op_name: string,\n  drafts: Array,\n  params: Array,\n  inlet: number | null\n}\n\nfunction getParamsFromInputs(inputs: Array): Array {\n  let res = inputs.map((el) => el.params).reduce((acc, el) => acc.concat(el), []);\n  console.log(res);\n  return res;\n}\n\nfunction getDraftsFromInputs(inputs: Array): Array {\n  return inputs.map((el) => el.drafts).reduce((acc, ds) => acc.concat(ds), []);\n}\n\nfunction getInletsFromInputs(inputs: Array, n: number): InletDrafts {\n  let res: InletDrafts = {};\n  for (let i = 0; i  el.inlet == i);\n    let inlet_drafts = this_inlet.map((el) => el.drafts);\n    res[i] = inlet_drafts.reduce((acc, ds) => acc.concat(ds), []);\n  }\n  return res;\n}\n  \n/**\n * a standard operation used by the tree\n * @param name the internal name of this opearation (CHANGING THESE WILL BREAK LEGACY VERSIONS)\n * @param displayname the name to show upon this operation in the interface\n * @param dx the description of this operation\n * @param params the parameters associated with this operation\n * @param inets the inlets associated with this operation\n * @param old_names referes to any prior name of this operation to aid when loading old files\n * @param perform a function that executes when this operation is performed, takes a series of inputs and resturns an array of drafts\n */\nexport interface TreeOperation {\n  name: string,\n  displayname: string,\n  dx: string,\n  params: Array,\n  inlets: Array,\n  old_names: Array,\n  perform: (op_inputs: Array) => Promise>\n}\n\nexport function getDefaultParams(op: TreeOperation | GenericOp): Array {\n  if (!op.params || op.params.length == 0) {\n    return [] as Array;\n  }\n  return op.params.map((el) => el.value);\n}\n\n/** \n * @function \n * The big function to pack an operation from op_definitions (working directly with params and drafts)\n * into an operation that the tree can recognize (uses OpInputs)\n */\nexport function buildTreeOp(base: GenericOp): TreeOperation {\n  let tree_op_perform: TreeOperation[\"perform\"];\n  // check what type of op, topologically with I/O (seed, pipe, merge, branch, bus, dynamic)\n    // convert perform args to Array\n  // check for special case of args (no drafts, no params, everything else is ok)\n    // only seed -> no drafts, everything else\n    // pipe/merge/branch/bus -> no params, everything else\n  // check if there is a param or draft in op_inputs[0] to put into an optional arg\n  if (base.classifier.type === 'seed') {\n    if (base.classifier.input_drafts === 'none') {\n      let seedOp = base as Op;\n      tree_op_perform = (op_inputs: Array) => {\n        return Promise.resolve([seedOp.perform(op_inputs[0].params)]);\n      }\n    } else {\n      let seedOp = base as Op;\n      tree_op_perform = (op_inputs: Array) => {\n        console.log(\"op inputs: \", base.name, op_inputs);\n        if (op_inputs.filter((el) => (el.op_name == 'child')).length > 0) {\n          return Promise.resolve([seedOp.perform(op_inputs[0].params, getDraftsFromInputs(op_inputs)[0])]);\n        } else {\n          return Promise.resolve([seedOp.perform(op_inputs[0].params)]);\n        }\n      }\n    }\n  } else if (base.classifier.type === 'pipe') {\n    // let pipeOp;\n    if (base.classifier.input_params === 'none') {\n      let pipeOp = base as Op ;\n      tree_op_perform = (op_inputs: Array) => {\n        if (op_inputs.filter((el) => (el.op_name == 'child')).length == 0) {\n          return Promise.resolve([]) as Promise>;\n        }\n        return Promise.resolve([pipeOp.perform(getDraftsFromInputs(op_inputs)[0])]);\n      }\n    } else if (base.classifier.input_params === 'req') {\n      let pipeOp = base as Op;\n      console.log(\"perform op, pipe all required\");\n      tree_op_perform = (op_inputs: Array) => {\n        if (op_inputs.filter((el) => (el.op_name == 'child')).length == 0) {\n          return Promise.resolve([]) as Promise>;\n        }\n        return Promise.resolve([pipeOp.perform(getDraftsFromInputs(op_inputs)[0], op_inputs[0].params)]);\n      }\n    } else {\n      let pipeOp = base as Op;\n      tree_op_perform = (op_inputs: Array) => {\n        if (op_inputs[0].params.length > 0) {\n          return Promise.resolve([pipeOp.perform(op_inputs[0].drafts[0], op_inputs[0].params)]);\n        } else {\n          return Promise.resolve([pipeOp.perform(op_inputs[0].drafts[0])]);\n        }\n      }\n    }\n  } else if (base.classifier.type === 'merge') {\n    if (base.classifier.input_params === 'none') {\n      let mergeOp = base as Op;\n      if (base.inlets.filter((i) => i.num_drafts != 1).length) {\n        // complex merge, at least one inlet can take multiple drafts, so we have to prepare\n        // the inputs a little differently\n        tree_op_perform = (op_inputs: Array) => {\n          if (op_inputs.filter((el) => (el.op_name == 'child')).length >;\n          }\n          let inputs: InletDrafts = {};\n          for (let i = 0; i  el.inlet == i);\n            let inlet_drafts = this_inlet.map((el) => el.drafts);\n            inputs[i] = inlet_drafts.reduce((acc, ds) => acc.concat(ds), []);\n          }\n          return Promise.resolve([mergeOp.perform(inputs)]);\n        }\n      } else {\n        // simple merge, either 1 multi-inlet or mulitple single inlets\n        tree_op_perform = (op_inputs: Array) => {\n          if (op_inputs.filter((el) => (el.op_name == 'child')).length == 0) {\n            return Promise.resolve([]) as Promise>;\n          }\n          let inputs: Array;\n          inputs = op_inputs.map((el) => el.drafts).reduce((acc, ds) => acc.concat(ds), []);\n          return Promise.resolve([mergeOp.perform(inputs)]);\n        }\n      }\n    } else if (base.classifier.input_params === 'req') {\n      let mergeOp = base as Op;\n      if (base.inlets.length > 1 && base.inlets.filter((i) => i.num_drafts != 1).length) {\n        // complex merge, more than one inlet and at least one inlet can take multiple drafts, so we have to prepare\n        // the inputs a little differently\n        tree_op_perform = (op_inputs: Array) => {\n          if (op_inputs.filter((el) => (el.op_name == 'child')).length == 0) {\n            return Promise.resolve([]) as Promise>;\n          }\n          let inputs: InletDrafts = {};\n          for (let i = 0; i  el.inlet == i);\n            let inlet_drafts = this_inlet.map((el) => el.drafts);\n            inputs[i] = inlet_drafts.reduce((acc, ds) => acc.concat(ds), []);\n          }\n          return Promise.resolve([mergeOp.perform(inputs, op_inputs[0].params)]);\n        }\n      } else {\n        // simple merge, either 1 multi-inlet or multple single inlets\n        tree_op_perform = (op_inputs: Array) => {\n          if (op_inputs.filter((el) => (el.op_name == 'child')).length == 0) {\n            return Promise.resolve([]) as Promise>;\n          }\n          let inputs: Array;\n          inputs = op_inputs.map((el) => el.drafts).reduce((acc, ds) => acc.concat(ds));\n          return Promise.resolve([mergeOp.perform(inputs, op_inputs[0].params)]);\n        }\n      }\n    }\n  } else if (base.classifier.type === 'branch') { \n    if (base.classifier.input_params === 'req') {\n      let branchOp = base as Op;\n      tree_op_perform = (op_inputs: Array) => {\n        return Promise.resolve(branchOp.perform(op_inputs[1].drafts[0], getParamsFromInputs(op_inputs))) as Promise>;\n      }\n    } else {\n      let branchOp = base as Op;\n      tree_op_perform = (op_inputs: Array) => {\n        if (op_inputs.filter((el) => (el.op_name == 'child')).length == 0) {\n          return Promise.resolve([]) as Promise>;\n        }\n        return Promise.resolve(branchOp.perform(op_inputs[1].drafts[0])) as Promise>;\n      }\n    }\n  } else { /** @todo bus ops, but there aren't any operations in this category currently */\n    tree_op_perform = (op_inputs: Array) => {\n      return Promise.resolve([]) as Promise>;\n    }\n  }\n\n  let new_op = {\n    name: base.name,\n    topo_op: base,\n    old_names: base.old_names,\n    inlets: base.inlets,\n    displayname: base.displayname,\n    dx: base.dx,\n    max_inputs: base.max_inputs,\n    params: base.params,\n    perform: tree_op_perform\n  } as TreeOperation;\n\n  return new_op;\n}\n\n/**\n * A container operation that takes drafts with some parameter assigned to them \n * @param name the internal name of this operation used for index (DO NOT CHANGE THESE NAMES!)\n * @param displayname the name to show the viewer \n * @param params the parameters that one can directly input to the parent\n * @param dynamic_param_id which parameter id should we use to dynamically create paramaterized input slots\n * @param dynamic_param_type the type of parameter that we look to generate\n * @param inlets the inlets available for input by default on this operation\n * @param dx the description of this operation\n * @param old_names referes to any prior name of this operation to aid when loading old files\n * @param perform a function that executes when this operation is performed, takes a series of inputs and resturns an array of drafts\n */\nexport interface DynamicOperation extends TreeOperation {\n  name: string,\n  displayname: string,\n  params: Array, \n  dynamic_param_id: number,\n  dynamic_param_type: string,\n  inlets: Array,\n  dx: string,\n  old_names: Array,\n  perform: (op_inputs: Array) => Promise>;\n}\n\n /**\n  * this type is used to classify operations in the dropdown menu\n  * @param category the name of the category for all associated operations (e.g. block, structure)\n  * @param dx a description of that category to show on screen\n  * @param ops an array of all the operations associated with this category\n  */\n export interface OperationClassification {\n  category: string,\n  dx: string,\n  ops: Array \n }\n\n export type Operation = TreeOperation; // default: export operations to interface with Tree\n\n \n    \n\n\n\n\n\n\n\n\n\n                   \n    \n         results matching \"\"\n        \n    \n    \n        No results matching \"\"\n    \n\n"},"classes/OpSequencer.html":{"url":"classes/OpSequencer.html","title":"class - OpSequencer","body":"\n                   \n\n\n\n\n\n\n\n\n\n\n\n\n\n  Classes\n  OpSequencer\n\n\n\n        \n            Info\n        \n        \n            Source\n        \n\n\n\n    \n        \n            File\n        \n        \n            src/app/player/model/sequencer.ts\n        \n\n\n            \n                Description\n            \n            \n                Sequencer:\n\n1 or 2 pedal \"select\" pedals ->\nmultiple operations in a circular queue\n1 \"progress\" pedal (forward)\nif select pedal, go to next/previous operation in Sequencer\n\n\n            \n\n\n            \n                Implements\n            \n            \n                            PedalEvent\n            \n\n\n            \n    Index\n    \n        \n                \n                    \n                        Properties\n                    \n                \n                \n                    \n                        \n                            \n                                _pos\n                            \n                            \n                                name\n                            \n                            \n                                ops\n                            \n                            \n                                p_prog\n                            \n                            \n                                p_select_a\n                            \n                            \n                                    Optional\n                                p_select_b\n                            \n                            \n                                selecting\n                            \n                        \n                    \n                \n\n                \n                    \n                        Methods\n                    \n                \n                \n                    \n                        \n                            \n                                addOp\n                            \n                            \n                                delOpAt\n                            \n                            \n                                hasPedal\n                            \n                            \n                                mapPedal\n                            \n                            \n                                nextOp\n                            \n                            \n                                perform\n                            \n                            \n                                prevOp\n                            \n                            \n                                removeOp\n                            \n                        \n                    \n                \n\n\n\n\n\n                    \n                        \n                            Accessors\n                        \n                    \n                    \n                        \n                            \n                                \n                                    isMapped\n                                \n                                \n                                    readyToWeave\n                                \n                                \n                                    current\n                                \n                            \n                        \n                    \n        \n    \n\n\n            \n    Constructor\n        \n            \n                \n                    \nconstructor(pedals?: Array, ops?: Array)\n                    \n                \n                        \n                            \n                                Defined in src/app/player/model/sequencer.ts:18\n                            \n                        \n\n                \n                    \n                            OpSequencer, specifying the select pedal(s) and confirm\npedal. Optionally, provide an array of Ops to load onto the\nSequencer.\n\n                            \n                                    Parameters :\n                                    \n                                        \n                                            \n                                                Name\n                                                    Type\n                                                Optional\n                                            \n                                        \n                                        \n                                                \n                                                        pedals\n                                                  \n                                                        \n                                                                    Array\n                                                        \n                                                  \n                                                    \n                                                            Yes\n                                                    \n                                                    \n                                                \n                                                \n                                                        ops\n                                                  \n                                                        \n                                                                        Array\n                                                        \n                                                  \n                                                    \n                                                            Yes\n                                                    \n                                                    \n                                                \n                                        \n                                    \n                            \n                    \n                \n            \n        \n\n\n            \n    \n    \n        Properties\n    \n    \n        \n            \n                \n                    \n                    \n                        _pos\n                        \n                    \n                \n            \n                \n                    \n                        Type :         number\n\n                    \n                \n                \n                    \n                        Default value : -1\n                    \n                \n                    \n                        \n                                Defined in src/app/player/model/sequencer.ts:16\n                        \n                    \n\n\n        \n    \n    \n        \n            \n                \n                    \n                    \n                        name\n                        \n                    \n                \n            \n                \n                    \n                        Type :         string\n\n                    \n                \n                    \n                        \n                                Defined in src/app/player/model/sequencer.ts:12\n                        \n                    \n\n\n        \n    \n    \n        \n            \n                \n                    \n                    \n                        ops\n                        \n                    \n                \n            \n                \n                    \n                        Type :         Array\n\n                    \n                \n                \n                    \n                        Default value : []\n                    \n                \n                    \n                        \n                                Defined in src/app/player/model/sequencer.ts:17\n                        \n                    \n\n\n        \n    \n    \n        \n            \n                \n                    \n                    \n                        p_prog\n                        \n                    \n                \n            \n                \n                    \n                        Type :         number\n\n                    \n                \n                \n                    \n                        Default value : -1\n                    \n                \n                    \n                        \n                                Defined in src/app/player/model/sequencer.ts:15\n                        \n                    \n\n\n        \n    \n    \n        \n            \n                \n                    \n                    \n                        p_select_a\n                        \n                    \n                \n            \n                \n                    \n                        Type :         number\n\n                    \n                \n                \n                    \n                        Default value : -1\n                    \n                \n                    \n                        \n                                Defined in src/app/player/model/sequencer.ts:13\n                        \n                    \n\n\n        \n    \n    \n        \n            \n                \n                    \n                    \n                            Optional\n                        p_select_b\n                        \n                    \n                \n            \n                \n                    \n                        Type :         number\n\n                    \n                \n                \n                    \n                        Default value : -1\n                    \n                \n                    \n                        \n                                Defined in src/app/player/model/sequencer.ts:14\n                        \n                    \n\n\n        \n    \n    \n        \n            \n                \n                    \n                    \n                        selecting\n                        \n                    \n                \n            \n                \n                    \n                        Type :         boolean\n\n                    \n                \n                \n                    \n                        Default value : false\n                    \n                \n                    \n                        \n                                Defined in src/app/player/model/sequencer.ts:18\n                        \n                    \n\n\n        \n    \n\n\n            \n    \n    \n        Methods\n    \n    \n        \n            \n                \n                    \n                    \n                        addOp\n                        \n                    \n                \n            \n            \n                \naddOp(o: PlayerOp | ChainOp)\n                \n            \n\n\n            \n                \n                    Defined in src/app/player/model/sequencer.ts:88\n                \n            \n\n\n            \n                \n\n                    \n                        Parameters :\n                        \n                        \n                            \n                                \n                                    Name\n                                    Type\n                                    Optional\n                                \n                            \n                            \n                                \n                                    o\n                                    \n                                                PlayerOp | ChainOp\n                                    \n\n                                    \n                                        No\n                                    \n\n\n                                \n                            \n                        \n                    \n                    \n                    \n                    \n                        Returns :         number\n\n                    \n                    \n                        \n                    \n                \n            \n        \n    \n    \n        \n            \n                \n                    \n                    \n                        delOpAt\n                        \n                    \n                \n            \n            \n                \ndelOpAt(x: number)\n                \n            \n\n\n            \n                \n                    Defined in src/app/player/model/sequencer.ts:99\n                \n            \n\n\n            \n                \n\n                    \n                        Parameters :\n                        \n                        \n                            \n                                \n                                    Name\n                                    Type\n                                    Optional\n                                \n                            \n                            \n                                \n                                    x\n                                    \n                                                number\n                                    \n\n                                    \n                                        No\n                                    \n\n\n                                \n                            \n                        \n                    \n                    \n                    \n                    \n                        Returns :         void\n\n                    \n                    \n                        \n                    \n                \n            \n        \n    \n    \n        \n            \n                \n                    \n                    \n                        hasPedal\n                        \n                    \n                \n            \n            \n                \nhasPedal(n: number)\n                \n            \n\n\n            \n                \n                    Defined in src/app/player/model/sequencer.ts:69\n                \n            \n\n\n            \n                \n\n                    \n                        Parameters :\n                        \n                        \n                            \n                                \n                                    Name\n                                    Type\n                                    Optional\n                                \n                            \n                            \n                                \n                                    n\n                                    \n                                                number\n                                    \n\n                                    \n                                        No\n                                    \n\n\n                                \n                            \n                        \n                    \n                    \n                    \n                    \n                        Returns :         boolean\n\n                    \n                    \n                        \n                    \n                \n            \n        \n    \n    \n        \n            \n                \n                    \n                    \n                        mapPedal\n                        \n                    \n                \n            \n            \n                \nmapPedal(id: number, role: \"fwd\" | \"sel-next\" | \"sel-back\")\n                \n            \n\n\n            \n                \n                    Defined in src/app/player/model/sequencer.ts:56\n                \n            \n\n\n            \n                \n\n                    \n                        Parameters :\n                        \n                        \n                            \n                                \n                                    Name\n                                    Type\n                                    Optional\n                                \n                            \n                            \n                                \n                                    id\n                                    \n                                                number\n                                    \n\n                                    \n                                        No\n                                    \n\n\n                                \n                                \n                                    role\n                                    \n                                            \"fwd\" | \"sel-next\" | \"sel-back\"\n                                    \n\n                                    \n                                        No\n                                    \n\n\n                                \n                            \n                        \n                    \n                    \n                    \n                    \n                        Returns :         void\n\n                    \n                    \n                        \n                    \n                \n            \n        \n    \n    \n        \n            \n                \n                    \n                    \n                        nextOp\n                        \n                    \n                \n            \n            \n                \nnextOp()\n                \n            \n\n\n            \n                \n                    Defined in src/app/player/model/sequencer.ts:74\n                \n            \n\n\n            \n                \n\n                    \n                        Returns :         any\n\n                    \n                \n            \n        \n    \n    \n        \n            \n                \n                    \n                    \n                        perform\n                        \n                    \n                \n            \n            \n                \nperform(init: PlayerState, n: number)\n                \n            \n\n\n            \n                \n                    Defined in src/app/player/model/sequencer.ts:104\n                \n            \n\n\n            \n                \n\n                    \n                        Parameters :\n                        \n                        \n                            \n                                \n                                    Name\n                                    Type\n                                    Optional\n                                \n                            \n                            \n                                \n                                    init\n                                    \n                                                PlayerState\n                                    \n\n                                    \n                                        No\n                                    \n\n\n                                \n                                \n                                    n\n                                    \n                                                number\n                                    \n\n                                    \n                                        No\n                                    \n\n\n                                \n                            \n                        \n                    \n                    \n                    \n                    \n                        Returns :         Promise\n\n                    \n                    \n                        \n                    \n                \n            \n        \n    \n    \n        \n            \n                \n                    \n                    \n                        prevOp\n                        \n                    \n                \n            \n            \n                \nprevOp()\n                \n            \n\n\n            \n                \n                    Defined in src/app/player/model/sequencer.ts:81\n                \n            \n\n\n            \n                \n\n                    \n                        Returns :         any\n\n                    \n                \n            \n        \n    \n    \n        \n            \n                \n                    \n                    \n                        removeOp\n                        \n                    \n                \n            \n            \n                \nremoveOp()\n                \n            \n\n\n            \n                \n                    Defined in src/app/player/model/sequencer.ts:94\n                \n            \n\n\n            \n                \n\n                    \n                        Returns :         void\n\n                    \n                \n            \n        \n    \n\n\n\n\n\n\n            \n    \n        Accessors\n    \n        \n            \n                \n                    \n                        \n                        isMapped\n                    \n                \n\n                \n                    \n                        getisMapped()\n                    \n                \n                            \n                                \n                                    Defined in src/app/player/model/sequencer.ts:43\n                                \n                            \n                    \n                        \n\n                                \n                                \n                        \n                    \n\n            \n        \n        \n            \n                \n                    \n                        \n                        readyToWeave\n                    \n                \n\n                \n                    \n                        getreadyToWeave()\n                    \n                \n                            \n                                \n                                    Defined in src/app/player/model/sequencer.ts:48\n                                \n                            \n                    \n                        \n\n                                \n                                \n                        \n                    \n\n            \n        \n        \n            \n                \n                    \n                        \n                        current\n                    \n                \n\n                \n                    \n                        getcurrent()\n                    \n                \n                            \n                                \n                                    Defined in src/app/player/model/sequencer.ts:52\n                                \n                            \n\n            \n        \n\n    \n\n\n    \n        import { PedalEvent, PlayerOp, ChainOp, forward } from \"./op_mappings\";\nimport { PlayerState, copyState } from \"./player\";\n\n/**\n * Sequencer:\n *  - 1 or 2 pedal \"select\" pedals ->\n *    multiple operations in a circular queue\n *  - 1 \"progress\" pedal (forward)\n *  - if select pedal, go to next/previous operation in Sequencer\n */\n export class OpSequencer implements PedalEvent {\n  name: string;\n  p_select_a: number = -1;\n  p_select_b?: number = -1;\n  p_prog: number = -1;\n  _pos: number = -1;\n  ops: Array = [];\n  selecting: boolean = false;\n\n  /** \n   * @constructor Provide an array of pedals to initialize the \n   * OpSequencer, specifying the select pedal(s) and confirm \n   * pedal. Optionally, provide an array of Ops to load onto the\n   * Sequencer.\n   */\n  constructor(pedals?: Array, ops?: Array) {\n    this.name = \"sequencer\";\n    if (pedals) {\n      this.p_prog = pedals[0];\n      this.p_select_a = pedals[1];\n      if (pedals.length > 2) {\n        this.p_select_b = pedals[2];\n      }\n    }\n\n    if (ops) {\n      this.ops = ops;\n      this._pos = 0;\n    }\n  }\n\n  /** @method isMapped whether any pedals are mapped to the sequencer */\n  get isMapped() {\n    return !(this.p_prog >= 0 && this.p_select_a >= 0 && this.p_select_b >= 0);\n  }\n\n  /** @method readyToWeave progress pedal and at least one select pedal mapped */\n  get readyToWeave() {\n    return (this.p_prog >= 0 && this.p_select_a >= 0);\n  }\n\n  get current(): PlayerOp | ChainOp {\n    return this.ops[this._pos];\n  }\n\n  mapPedal(id: number, role: 'fwd' | 'sel-next' | 'sel-back') {\n    switch (role) {\n      case 'fwd':\n        this.p_prog = id;\n        break;\n      case 'sel-next':\n        this.p_select_a = id;\n        break;\n      case 'sel-back':\n        this.p_select_b = id;\n    }\n  }\n\n  hasPedal(n: number): boolean {\n    if (this.p_prog == n || this.p_select_a == n || this.p_select_b == n) return true;\n    else return false;\n  }\n\n  nextOp() {\n    if (this.ops.length > 0) {\n      this._pos = (this._pos + 1) % this.ops.length;\n      return this.current;\n    }\n  }\n\n  prevOp() {\n    if (this.ops.length > 0) {\n      this._pos = (this._pos - 1) % this.ops.length;\n      return this.current;\n    }\n  }\n\n  addOp(o: PlayerOp | ChainOp) {\n    this.ops.push(o);\n    if (this._pos  {\n    // console.log('sequencer perform');\n    let res = copyState(init);\n    if (n == this.p_prog) {\n      // console.log(\"forward in sequencer draft\");\n      // if prev step was one of the selects, this row gets sent\n      res.weaving = true;\n      // if (this.ops.length > 0) {\n      //   // this.selecting = false; // unset because we've confirmed the selection\n      //   return this.current.perform(res);\n      // } else {\n        return forward.perform(res);\n      // }\n    } else {\n      res.weaving = false;\n      // this.selecting = true;\n      if (this.ops.length > 0) {\n        if (n == this.p_select_a) {\n          this._pos = (this._pos + 1) % this.ops.length;\n        } else if (n == this.p_select_b) {\n          this._pos = (this._pos - 1) % this.ops.length;\n        }\n        return this.current.perform(res);\n      } else {\n        return Promise.resolve(res); // we really can't do anything without any operations on the sequencer\n      }\n    }\n  }\n}\n\nexport function makeOpSequencer(conf: number = 0, sel_fwd: number = 1, sel_back?: number, start_ops?: Array) {\n  let pedals = [conf, sel_fwd];\n  if (sel_back) pedals.push(sel_back);\n  if (start_ops) return new OpSequencer(pedals, start_ops);\n  return new OpSequencer(pedals);\n}\n\n    \n\n\n\n\n\n\n\n\n\n\n                   \n    \n         results matching \"\"\n        \n    \n    \n        No results matching \"\"\n    \n\n"},"components/OpSequencerComponent.html":{"url":"components/OpSequencerComponent.html","title":"component - OpSequencerComponent","body":"\n                   \n\n\n\n\n\n  Components\n  \n  OpSequencerComponent\n\n\n\n        \n            Info\n        \n        \n            Source\n        \n        \n            Template\n        \n        \n            Styles\n        \n        \n            DOM Tree\n        \n\n\n\n    \n    File\n\n\n    src/app/player/op-sequencer/op-sequencer.component.ts\n\n\n\n\n\n    \n        Implements\n    \n    \n                    OnInit\n    \n\n\n\n    Metadata\n    \n        \n\n\n\n\n\n\n\n\n\n\n\n            \n                selector\n                app-op-sequencer\n            \n\n            \n                styleUrls\n                ./op-sequencer.component.scss\n            \n\n\n\n            \n                templateUrl\n                ./op-sequencer.component.html\n            \n\n\n\n\n\n\n\n\n        \n    \n\n\n    \n    Index\n    \n        \n                \n                    \n                        Properties\n                    \n                \n                \n                    \n                        \n                            \n                                    Public\n                                pds\n                            \n                            \n                                    Public\n                                pls\n                            \n                            \n                                    Public\n                                seq\n                            \n                        \n                    \n                \n\n                \n                    \n                        Methods\n                    \n                \n                \n                    \n                        \n                            \n                                ngOnInit\n                            \n                        \n                    \n                \n\n\n\n\n\n        \n    \n\n\n    \n    Constructor\n        \n            \n                \n                    \nconstructor(pls: PlayerService, pds: PedalsService, seq: SequencerService)\n                    \n                \n                        \n                            \n                                Defined in src/app/player/op-sequencer/op-sequencer.component.ts:11\n                            \n                        \n\n                \n                    \n                            \n                                    Parameters :\n                                    \n                                        \n                                            \n                                                Name\n                                                    Type\n                                                Optional\n                                            \n                                        \n                                        \n                                                \n                                                        pls\n                                                  \n                                                        \n                                                                        PlayerService\n                                                        \n                                                  \n                                                    \n                                                            No\n                                                    \n                                                    \n                                                \n                                                \n                                                        pds\n                                                  \n                                                        \n                                                                        PedalsService\n                                                        \n                                                  \n                                                    \n                                                            No\n                                                    \n                                                    \n                                                \n                                                \n                                                        seq\n                                                  \n                                                        \n                                                                        SequencerService\n                                                        \n                                                  \n                                                    \n                                                            No\n                                                    \n                                                    \n                                                \n                                        \n                                    \n                            \n                    \n                \n            \n        \n\n\n\n\n\n\n    \n    \n    \n        Methods\n    \n    \n        \n            \n                \n                    \n                    \n                        ngOnInit\n                        \n                    \n                \n            \n            \n                \nngOnInit()\n                \n            \n\n\n            \n                \n                    Defined in src/app/player/op-sequencer/op-sequencer.component.ts:19\n                \n            \n\n\n            \n                \n\n                    \n                        Returns :         void\n\n                    \n                \n            \n        \n    \n\n    \n    \n    \n        Properties\n    \n    \n        \n            \n                \n                    \n                    \n                            Public\n                        pds\n                        \n                    \n                \n            \n                \n                    \n                        Type :         PedalsService\n\n                    \n                \n                    \n                        \n                                Defined in src/app/player/op-sequencer/op-sequencer.component.ts:15\n                        \n                    \n\n\n        \n    \n    \n        \n            \n                \n                    \n                    \n                            Public\n                        pls\n                        \n                    \n                \n            \n                \n                    \n                        Type :         PlayerService\n\n                    \n                \n                    \n                        \n                                Defined in src/app/player/op-sequencer/op-sequencer.component.ts:14\n                        \n                    \n\n\n        \n    \n    \n        \n            \n                \n                    \n                    \n                            Public\n                        seq\n                        \n                    \n                \n            \n                \n                    \n                        Type :         SequencerService\n\n                    \n                \n                    \n                        \n                                Defined in src/app/player/op-sequencer/op-sequencer.component.ts:16\n                        \n                    \n\n\n        \n    \n\n\n\n\n\n    \n        import { Component, OnInit } from '@angular/core';\nimport { PlayerService } from '../player.service';\nimport { PedalsService } from '../provider/pedals.service';\nimport { SequencerService } from '../provider/sequencer.service';\n\n@Component({\n  selector: 'app-op-sequencer',\n  templateUrl: './op-sequencer.component.html',\n  styleUrls: ['./op-sequencer.component.scss']\n})\nexport class OpSequencerComponent implements OnInit {\n\n  constructor(\n    public pls: PlayerService,\n    public pds: PedalsService,\n    public seq: SequencerService\n  ) { }\n\n  ngOnInit(): void {\n  }\n\n}\n\n    \n\n    \n        \n    \n      \n        \n          \n            Operations\n          \n        \n          \n          \n            \n            {{class.category}}\n             {{class.dx}}\n            \n                \n                    {{op.name}}\n                   \n                  \n                      \n                        Add to Sequencer\n                      \n\n                      \n                        Add Chain to Sequencer\n                      \n\n                      \n                        \n                        Add to Existing Chain\n                        \n                      \n                      \n                      \n                        \n                          \n                          Chain {{ch.id}}\n                          \n                        \n                      \n\n                  \n\n            \n          \n          \n      \n    \n\n    \n      Operation Sequencer \n      \n        \n          \n          \n            \n            {{o.name}}\n            \n          \n          \n          \n            \n            {{o.name}}\n            \n          \n          \n            \n        \n      \n    \n\n\n    \n\n    \n                \n                    ./op-sequencer.component.scss\n                \n                \n.second-row { \n  flex-wrap: wrap;\n  display: flex;\n  align-items: flex-start;\n  flex: 1;\n}\n\n.sequencer-block, .op-block {\n  display: inline-block;\n}\n\n.player-field-header {\n  padding: 14px;\n  margin: unset;\n  background: #3f51b5;\n  color: #ffffff;\n}\n\n.sequencer-block {\n  height: inherit;\n  flex: 1;\n}\n\n.op-menu-block {\n  display: block;\n  max-width: 210px;\n}\n\n#opChains {\n  display: flex;\n}\n\n.op-field h3{\n  width: 95%;\n  font-size: 100%;\n  font-weight: bold;\n  padding: 20px 0px 10px 14px;\n}\n\n.op-field  p{\n  width: 95%;\n  font-size: .8em;\n  padding: 0px 0px 10px 14px;\n}\n\n.op-field{\n  display: flex;\n  flex-direction: column;\n}\n\n.operation-sequence {\n  margin: 10px;\n  display: flex;\n  flex-direction: row;\n  flex-wrap: wrap;\n  row-gap: 20px;\n  padding: 10px;\n}\n\n.operation-box {\n  background-color: #bbc5ff;\n  margin-right: 10px;\n  margin-left: 10px;\n  padding: 10px;\n}\n\n.selected-operation-box {\n  background-color: #f6ff00;\n  margin-right: 10px;\n  margin-left: 10px;\n  padding: 10px;\n}\n\n\n.mat-button {\n  background-color: #ff4081;\n  color: white;\n  width: inherit;\n  margin-left: 10px;\n  margin-right: 10px;\n}\n\n.square-corners {\n  border-radius: 0pt;\n  border-bottom-left-radius: 0pt;\n  border-bottom-right-radius: 0pt;\n  border-top-left-radius: 0pt;\n  border-top-right-radius: 0pt;\n}\n\n.mat-button.mat-button-disabled {\n  background-color: #fd6d9d;\n  color: rgba(255, 255, 255, 0.50);\n  \n}\n\n.mat-expansion-panel-header, \n.mat-expansion-panel-header.mat-expanded:focus {\n  background: #121f6b;\n}\n\n.mat-expansion-panel-body {\n  padding: 0px;\n}\n\n.mat-expansion-panel, .mat-accordion, .mat-expansion-panel-header,\n.mat-accordion .mat-expansion-panel:last-of-type, \n.mat-accordion .mat-expansion-panel:first-of-type, #operations-menu {\n  border: #ffffff 1px;\n  border-radius: 0pt;\n  border-bottom-left-radius: 0pt;\n  border-bottom-right-radius: 0pt;\n  border-top-left-radius: 0pt;\n  border-top-right-radius: 0pt;\n  border-bottom: 0pt;\n}\n\n.mat-expansion-panel-header:hover, \n.mat-expansion-panel-header.mat-expanded:hover,\n.mat-expansion-panel:not(.mat-expanded), \n.mat-expansion-panel-header:hover:not([aria-disabled=true])   {\n  background: #566be2;\n}\n\n.mat-expansion-panel-header-title, .mat-expansion-indicator, .mat-expansion-indicator::after, .mat-expansion-indicator.ng-tns-c130-8.ng-trigger.ng-trigger-indicatorRotate.ng-star-inserted::after, #op-header.mat-expansion-indicator::after {\n  color: white;\n}\n    \n\n    \n        \n        \n            \n                Legend\n            \n            \n                Html element\n            \n            \n                Component\n            \n            \n                Html element with directive\n            \n        \n    \n\n    \n\n\n\n\n\n\n        var COMPONENT_TEMPLATE = '                                        Operations                                                              {{class.category}}             {{class.dx}}                                                {{op.name}}                                                                                   Add to Sequencer                                                                    Add Chain to Sequencer                                                                                            Add to Existing Chain                                                                                                                                                                      Chain {{ch.id}}                                                                                                                                              Operation Sequencer                                                           {{o.name}}                                                                  {{o.name}}                                                              '\n    var COMPONENTS = [{'name': 'ConnectionComponent', 'selector': 'app-connection'},{'name': 'DraftdetailComponent', 'selector': 'app-draftdetail'},{'name': 'ImageComponent', 'selector': 'app-image'},{'name': 'InletComponent', 'selector': 'app-inlet'},{'name': 'MixerComponent', 'selector': 'app-mixer'},{'name': 'MixerViewComponent', 'selector': 'app-mixerview'},{'name': 'NoteComponent', 'selector': 'app-note'},{'name': 'OperationComponent', 'selector': 'app-operation'},{'name': 'OpHelpModal', 'selector': 'app-ophelp'},{'name': 'OpsComponent', 'selector': 'app-ops'},{'name': 'OpSequencerComponent', 'selector': 'app-op-sequencer'},{'name': 'PaletteComponent', 'selector': 'app-palette'},{'name': 'ParameterComponent', 'selector': 'app-parameter'},{'name': 'PlayerComponent', 'selector': 'app-player'},{'name': 'SnackbarComponent', 'selector': 'app-snackbar'},{'name': 'SubdraftComponent', 'selector': 'app-subdraft'},{'name': 'VirtualPedalsComponent', 'selector': 'app-virtual-pedals'},{'name': 'WeavingStateComponent', 'selector': 'app-weaving-state'}];\n    var DIRECTIVES = [{'name': 'MarqueeComponent', 'selector': 'app-marquee'},{'name': 'SelectionComponent', 'selector': 'app-selection'}];\n    var ACTUAL_COMPONENT = {'name': 'OpSequencerComponent'};\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n                   \n    \n         results matching \"\"\n        \n    \n    \n        No results matching \"\"\n    \n\n"},"interfaces/OperationClassification.html":{"url":"interfaces/OperationClassification.html","title":"interface - OperationClassification","body":"\n                   \n\n\n\n\n\n\n\n\n\n\n\n\n\n\n  Interfaces\n  \n  OperationClassification\n\n\n\n        \n            Info\n        \n        \n            Source\n        \n\n\n\n    \n        \n            File\n        \n        \n            src/app/mixer/model/operation.ts\n        \n\n\n            \n                Description\n            \n            \n                this type is used to classify operations in the dropdown menu\n\n            \n\n\n        \n            Index\n            \n                \n                    \n                        \n                            Properties\n                        \n                    \n                    \n                        \n                            \n                                \n                                        \n                                            category\n                                        \n                                \n                                \n                                        \n                                            dx\n                                        \n                                \n                                \n                                        \n                                            ops\n                                        \n                                \n                            \n                        \n                    \n                \n            \n        \n\n\n\n            \n                Properties\n                    \n                        \n                                \n                                    \n                                        \n                                        category\n                                            \n                                                \n                                            \n                                        \n                                    \n                                \n                                \n                                    \n                                        category:         string\n\n                                    \n                                \n\n\n                                    \n                                        \n                                            Type :         string\n\n                                        \n                                    \n\n\n\n\n\n                        \n                    \n                    \n                        \n                                \n                                    \n                                        \n                                        dx\n                                            \n                                                \n                                            \n                                        \n                                    \n                                \n                                \n                                    \n                                        dx:         string\n\n                                    \n                                \n\n\n                                    \n                                        \n                                            Type :         string\n\n                                        \n                                    \n\n\n\n\n\n                        \n                    \n                    \n                        \n                                \n                                    \n                                        \n                                        ops\n                                            \n                                                \n                                            \n                                        \n                                    \n                                \n                                \n                                    \n                                        ops:         Array\n\n                                    \n                                \n\n\n                                    \n                                        \n                                            Type :         Array\n\n                                        \n                                    \n\n\n\n\n\n                        \n                    \n            \n    \n\n\n    \n        import { Draft } from '../../core/model/datatypes';\nimport { OperationParam, ParamValue } from './operation/params';\nimport { InletDrafts, OperationInlet } from './operation/inlets';\nimport { BaseOp as Op, BuildableOperation as GenericOp,\n  Seed, Pipe, Merge, Branch, Bus,\n  NoDrafts, NoParams, DraftsOptional, ParamsOptional, AllRequired\n} from './operation/topology';\n\n\n/** ALL OBJECTS/TYPES/UTILITY FUNCTIONS RELATED to OPERATIONS *****************/\n\nexport * from './operation/inlets';\nexport * from './operation/params';\nexport * from './operation/topology';\nexport * as format from './operation/formatting';\n\n/**** USING OPERATIONS with the MIXER TREE **************/\n\n/**\n * this is a type that contains a series of smaller operations held under the banner of one larger operation (such as layer)\n * @param op_name the name of the operation or \"child\" if this is an assignment to an input parameter\n * @param drafts the drafts associated with this input\n * @param params the parameters associated with this operation OR child input\n * @param inlets the index of the inlet for which the draft is entering upon\n */\n export interface OpInput {\n  op_name: string,\n  drafts: Array,\n  params: Array,\n  inlet: number | null\n}\n\nfunction getParamsFromInputs(inputs: Array): Array {\n  let res = inputs.map((el) => el.params).reduce((acc, el) => acc.concat(el), []);\n  console.log(res);\n  return res;\n}\n\nfunction getDraftsFromInputs(inputs: Array): Array {\n  return inputs.map((el) => el.drafts).reduce((acc, ds) => acc.concat(ds), []);\n}\n\nfunction getInletsFromInputs(inputs: Array, n: number): InletDrafts {\n  let res: InletDrafts = {};\n  for (let i = 0; i  el.inlet == i);\n    let inlet_drafts = this_inlet.map((el) => el.drafts);\n    res[i] = inlet_drafts.reduce((acc, ds) => acc.concat(ds), []);\n  }\n  return res;\n}\n  \n/**\n * a standard operation used by the tree\n * @param name the internal name of this opearation (CHANGING THESE WILL BREAK LEGACY VERSIONS)\n * @param displayname the name to show upon this operation in the interface\n * @param dx the description of this operation\n * @param params the parameters associated with this operation\n * @param inets the inlets associated with this operation\n * @param old_names referes to any prior name of this operation to aid when loading old files\n * @param perform a function that executes when this operation is performed, takes a series of inputs and resturns an array of drafts\n */\nexport interface TreeOperation {\n  name: string,\n  displayname: string,\n  dx: string,\n  params: Array,\n  inlets: Array,\n  old_names: Array,\n  perform: (op_inputs: Array) => Promise>\n}\n\nexport function getDefaultParams(op: TreeOperation | GenericOp): Array {\n  if (!op.params || op.params.length == 0) {\n    return [] as Array;\n  }\n  return op.params.map((el) => el.value);\n}\n\n/** \n * @function \n * The big function to pack an operation from op_definitions (working directly with params and drafts)\n * into an operation that the tree can recognize (uses OpInputs)\n */\nexport function buildTreeOp(base: GenericOp): TreeOperation {\n  let tree_op_perform: TreeOperation[\"perform\"];\n  // check what type of op, topologically with I/O (seed, pipe, merge, branch, bus, dynamic)\n    // convert perform args to Array\n  // check for special case of args (no drafts, no params, everything else is ok)\n    // only seed -> no drafts, everything else\n    // pipe/merge/branch/bus -> no params, everything else\n  // check if there is a param or draft in op_inputs[0] to put into an optional arg\n  if (base.classifier.type === 'seed') {\n    if (base.classifier.input_drafts === 'none') {\n      let seedOp = base as Op;\n      tree_op_perform = (op_inputs: Array) => {\n        return Promise.resolve([seedOp.perform(op_inputs[0].params)]);\n      }\n    } else {\n      let seedOp = base as Op;\n      tree_op_perform = (op_inputs: Array) => {\n        console.log(\"op inputs: \", base.name, op_inputs);\n        if (op_inputs.filter((el) => (el.op_name == 'child')).length > 0) {\n          return Promise.resolve([seedOp.perform(op_inputs[0].params, getDraftsFromInputs(op_inputs)[0])]);\n        } else {\n          return Promise.resolve([seedOp.perform(op_inputs[0].params)]);\n        }\n      }\n    }\n  } else if (base.classifier.type === 'pipe') {\n    // let pipeOp;\n    if (base.classifier.input_params === 'none') {\n      let pipeOp = base as Op ;\n      tree_op_perform = (op_inputs: Array) => {\n        if (op_inputs.filter((el) => (el.op_name == 'child')).length == 0) {\n          return Promise.resolve([]) as Promise>;\n        }\n        return Promise.resolve([pipeOp.perform(getDraftsFromInputs(op_inputs)[0])]);\n      }\n    } else if (base.classifier.input_params === 'req') {\n      let pipeOp = base as Op;\n      console.log(\"perform op, pipe all required\");\n      tree_op_perform = (op_inputs: Array) => {\n        if (op_inputs.filter((el) => (el.op_name == 'child')).length == 0) {\n          return Promise.resolve([]) as Promise>;\n        }\n        return Promise.resolve([pipeOp.perform(getDraftsFromInputs(op_inputs)[0], op_inputs[0].params)]);\n      }\n    } else {\n      let pipeOp = base as Op;\n      tree_op_perform = (op_inputs: Array) => {\n        if (op_inputs[0].params.length > 0) {\n          return Promise.resolve([pipeOp.perform(op_inputs[0].drafts[0], op_inputs[0].params)]);\n        } else {\n          return Promise.resolve([pipeOp.perform(op_inputs[0].drafts[0])]);\n        }\n      }\n    }\n  } else if (base.classifier.type === 'merge') {\n    if (base.classifier.input_params === 'none') {\n      let mergeOp = base as Op;\n      if (base.inlets.filter((i) => i.num_drafts != 1).length) {\n        // complex merge, at least one inlet can take multiple drafts, so we have to prepare\n        // the inputs a little differently\n        tree_op_perform = (op_inputs: Array) => {\n          if (op_inputs.filter((el) => (el.op_name == 'child')).length >;\n          }\n          let inputs: InletDrafts = {};\n          for (let i = 0; i  el.inlet == i);\n            let inlet_drafts = this_inlet.map((el) => el.drafts);\n            inputs[i] = inlet_drafts.reduce((acc, ds) => acc.concat(ds), []);\n          }\n          return Promise.resolve([mergeOp.perform(inputs)]);\n        }\n      } else {\n        // simple merge, either 1 multi-inlet or mulitple single inlets\n        tree_op_perform = (op_inputs: Array) => {\n          if (op_inputs.filter((el) => (el.op_name == 'child')).length == 0) {\n            return Promise.resolve([]) as Promise>;\n          }\n          let inputs: Array;\n          inputs = op_inputs.map((el) => el.drafts).reduce((acc, ds) => acc.concat(ds), []);\n          return Promise.resolve([mergeOp.perform(inputs)]);\n        }\n      }\n    } else if (base.classifier.input_params === 'req') {\n      let mergeOp = base as Op;\n      if (base.inlets.length > 1 && base.inlets.filter((i) => i.num_drafts != 1).length) {\n        // complex merge, more than one inlet and at least one inlet can take multiple drafts, so we have to prepare\n        // the inputs a little differently\n        tree_op_perform = (op_inputs: Array) => {\n          if (op_inputs.filter((el) => (el.op_name == 'child')).length == 0) {\n            return Promise.resolve([]) as Promise>;\n          }\n          let inputs: InletDrafts = {};\n          for (let i = 0; i  el.inlet == i);\n            let inlet_drafts = this_inlet.map((el) => el.drafts);\n            inputs[i] = inlet_drafts.reduce((acc, ds) => acc.concat(ds), []);\n          }\n          return Promise.resolve([mergeOp.perform(inputs, op_inputs[0].params)]);\n        }\n      } else {\n        // simple merge, either 1 multi-inlet or multple single inlets\n        tree_op_perform = (op_inputs: Array) => {\n          if (op_inputs.filter((el) => (el.op_name == 'child')).length == 0) {\n            return Promise.resolve([]) as Promise>;\n          }\n          let inputs: Array;\n          inputs = op_inputs.map((el) => el.drafts).reduce((acc, ds) => acc.concat(ds));\n          return Promise.resolve([mergeOp.perform(inputs, op_inputs[0].params)]);\n        }\n      }\n    }\n  } else if (base.classifier.type === 'branch') { \n    if (base.classifier.input_params === 'req') {\n      let branchOp = base as Op;\n      tree_op_perform = (op_inputs: Array) => {\n        return Promise.resolve(branchOp.perform(op_inputs[1].drafts[0], getParamsFromInputs(op_inputs))) as Promise>;\n      }\n    } else {\n      let branchOp = base as Op;\n      tree_op_perform = (op_inputs: Array) => {\n        if (op_inputs.filter((el) => (el.op_name == 'child')).length == 0) {\n          return Promise.resolve([]) as Promise>;\n        }\n        return Promise.resolve(branchOp.perform(op_inputs[1].drafts[0])) as Promise>;\n      }\n    }\n  } else { /** @todo bus ops, but there aren't any operations in this category currently */\n    tree_op_perform = (op_inputs: Array) => {\n      return Promise.resolve([]) as Promise>;\n    }\n  }\n\n  let new_op = {\n    name: base.name,\n    topo_op: base,\n    old_names: base.old_names,\n    inlets: base.inlets,\n    displayname: base.displayname,\n    dx: base.dx,\n    max_inputs: base.max_inputs,\n    params: base.params,\n    perform: tree_op_perform\n  } as TreeOperation;\n\n  return new_op;\n}\n\n/**\n * A container operation that takes drafts with some parameter assigned to them \n * @param name the internal name of this operation used for index (DO NOT CHANGE THESE NAMES!)\n * @param displayname the name to show the viewer \n * @param params the parameters that one can directly input to the parent\n * @param dynamic_param_id which parameter id should we use to dynamically create paramaterized input slots\n * @param dynamic_param_type the type of parameter that we look to generate\n * @param inlets the inlets available for input by default on this operation\n * @param dx the description of this operation\n * @param old_names referes to any prior name of this operation to aid when loading old files\n * @param perform a function that executes when this operation is performed, takes a series of inputs and resturns an array of drafts\n */\nexport interface DynamicOperation extends TreeOperation {\n  name: string,\n  displayname: string,\n  params: Array, \n  dynamic_param_id: number,\n  dynamic_param_type: string,\n  inlets: Array,\n  dx: string,\n  old_names: Array,\n  perform: (op_inputs: Array) => Promise>;\n}\n\n /**\n  * this type is used to classify operations in the dropdown menu\n  * @param category the name of the category for all associated operations (e.g. block, structure)\n  * @param dx a description of that category to show on screen\n  * @param ops an array of all the operations associated with this category\n  */\n export interface OperationClassification {\n  category: string,\n  dx: string,\n  ops: Array \n }\n\n export type Operation = TreeOperation; // default: export operations to interface with Tree\n\n \n    \n\n\n\n\n\n\n\n\n\n                   \n    \n         results matching \"\"\n        \n    \n    \n        No results matching \"\"\n    \n\n"},"interfaces/OperationParam.html":{"url":"interfaces/OperationParam.html","title":"interface - OperationParam","body":"\n                   \n\n\n\n\n\n\n\n\n\n\n\n\n\n\n  Interfaces\n  \n  OperationParam\n\n\n\n        \n            Info\n        \n        \n            Source\n        \n\n\n\n    \n        \n            File\n        \n        \n            src/app/mixer/model/operation/params.ts\n        \n\n\n            \n                Description\n            \n            \n                an operation param describes what data be provided to this operation\nsome type of operations inherent from this to offer more specific validation data\n\n            \n\n\n        \n            Index\n            \n                \n                    \n                        \n                            Properties\n                        \n                    \n                    \n                        \n                            \n                                \n                                        \n                                            dx\n                                        \n                                \n                                \n                                        \n                                            name\n                                        \n                                \n                                \n                                        \n                                            type\n                                        \n                                \n                                \n                                        \n                                            value\n                                        \n                                \n                            \n                        \n                    \n                \n            \n        \n\n\n\n            \n                Properties\n                    \n                        \n                                \n                                    \n                                        \n                                        dx\n                                            \n                                                \n                                            \n                                        \n                                    \n                                \n                                \n                                    \n                                        dx:         string\n\n                                    \n                                \n\n\n                                    \n                                        \n                                            Type :         string\n\n                                        \n                                    \n\n\n\n\n\n                        \n                    \n                    \n                        \n                                \n                                    \n                                        \n                                        name\n                                            \n                                                \n                                            \n                                        \n                                    \n                                \n                                \n                                    \n                                        name:         string\n\n                                    \n                                \n\n\n                                    \n                                        \n                                            Type :         string\n\n                                        \n                                    \n\n\n\n\n\n                        \n                    \n                    \n                        \n                                \n                                    \n                                        \n                                        type\n                                            \n                                                \n                                            \n                                        \n                                    \n                                \n                                \n                                    \n                                        type:     \"number\" | \"boolean\" | \"select\" | \"file\" | \"string\" | \"draft\"\n\n                                    \n                                \n\n\n                                    \n                                        \n                                            Type :     \"number\" | \"boolean\" | \"select\" | \"file\" | \"string\" | \"draft\"\n\n                                        \n                                    \n\n\n\n\n\n                        \n                    \n                    \n                        \n                                \n                                    \n                                        \n                                        value\n                                            \n                                                \n                                            \n                                        \n                                    \n                                \n                                \n                                    \n                                        value:     number | boolean | string | null\n\n                                    \n                                \n\n\n                                    \n                                        \n                                            Type :     number | boolean | string | null\n\n                                        \n                                    \n\n\n\n\n\n                        \n                    \n            \n    \n\n\n    \n        export interface OperationParam {\n  name: string,\n  dx: string,\n  type: 'number' | 'boolean' | 'select' | 'file' | 'string' | 'draft',\n  value: number | boolean | string | null,\n}\n\nexport type ParamType = OperationParam[\"type\"];\nexport type ParamValue = OperationParam[\"value\"];\n  \n/**\n * An extension of Param that handles extra requirements for numeric data inputs\n * @param min the minimum allowable value\n * @param max the maximum allowable value\n */\nexport type NumParam = OperationParam & {\n  type: 'number',\n  value: number,\n  min: number,\n  max: number\n}\n  \n/**\n * An extension of Param that handles extra requirements for select list  inputs\n * @param selectlist an array of names and values from which the user can select\n */\nexport type SelectParam = OperationParam & {\n  type: 'select',\n  value: number,\n  selectlist: Array,\n  default?: number\n}\n  \n/**\n * An extension of Param that handles extra requirements for select boolean inputs\n * @param falsestate a description for the user explaining what \"false\" means in this param\n * @param truestate a description for the user explaining what \"false\" means in this param\n */\nexport type BoolParam = OperationParam & {\n  type: 'boolean',\n  value: boolean | number,\n  falsestate: string,\n  truestate: string,\n  default?: boolean | number\n}\n  \n/**\n * An extension of Param that handles extra requirements for strings as inputs\n * @param regex strings must come with a regex used to validate their structure\n * test and make regex using RegEx101 website\n * do not use global (g) flag, as it creates unpredictable results in test functions used to validate inputs\n @param error the error message to show the user if the string is invalid \n */\nexport type StringParam = OperationParam & {\n  type: 'string',\n  value: string,\n  regex: RegExp,\n  error: string\n}\n  \n/**\n* An extension of Param that handles extra requirements for select file inputs\n* Currently a placeholder should extra data be required. \n*/\nexport type FileParam = OperationParam & {\n  type: 'file'\n}\n  \n/**\n* UNUSED -- if you want another draft input on an operation, add another inlet\n* An extension of Param that handles extra requirements for select drafts as inputs\n* @param id draft id at this parameter --- DON'T USE\n*/\nexport type DraftParam = OperationParam & {\n  id: number,\n  type: 'draft'\n}\n\nexport type GenericParam = OperationParam & {\n  value: Type,\n  default?: Type,\n  new (v: Type): GenericParam,\n}\n\n/**\n * Utility function to extract values from an array of Params\n * @param input Array of OperationParams, any type\n * @returns Array of ParamValues\n */\nexport function getParamValues(input: Array): Array {\n  return input.map((param) => param.value);\n}\n\n/**\n * Set of functions to help make OperationParameters\n */\nexport class Params {\n  static Number(name: string, dx: string, value: number, min: number, max: number): NumParam;\n  static Number({ name, dx, value, min, max }: \n    { name: string; \n      dx: string; \n      value: number; \n      min: number; \n      max: number; }\n  ): NumParam;\n  static Number(objOrName: any, dx?: string, value?: number, min?: number, max?: number) {\n    if (dx) {\n      return { type: 'number', name: objOrName, value: value, min: min, max: max, dx: dx };\n    } else {\n      return { \n        type: 'number', name: objOrName.name, value: objOrName.value,\n        min: objOrName.min, max: objOrName.max, dx: objOrName.dx \n      };\n    }\n  }\n\n  static String(name: string, dx: string, value: string, regex: RegExp, error: string): StringParam;\n  static String({ name, dx, value, regex, error }:\n    { name: string;\n      dx: string;\n      value: string;\n      regex: RegExp;\n      error: string; }\n  ): StringParam;\n  static String(objOrName: any, dx?: string, value?: string, regex?: RegExp, error?: string) {\n    if (dx) {\n      return { type: 'string', name: objOrName, dx: dx, value: value, regex: regex, error: error };\n    } else {\n      return {\n        type: 'string', name: objOrName.name, value: objOrName.value,\n        regex: objOrName.regex, error: objOrName.error, dx: objOrName.dx \n      };\n    }\n  }\n\n  // static Bool(\n\n  // ): BoolParam {\n\n  // }\n\n}\n    \n\n\n\n\n\n\n\n\n\n                   \n    \n         results matching \"\"\n        \n    \n    \n        No results matching \"\"\n    \n\n"},"interfaces/OperationProperties.html":{"url":"interfaces/OperationProperties.html","title":"interface - OperationProperties","body":"\n                   \n\n\n\n\n\n\n\n\n\n\n\n\n\n\n  Interfaces\n  \n  OperationProperties\n\n\n\n        \n            Info\n        \n        \n            Source\n        \n\n\n\n    \n        \n            File\n        \n        \n            src/app/mixer/model/operation/topology.ts\n        \n\n\n            \n                Description\n            \n            \n                A standard Operation's metadata -- i.e. everything not the perform() function\n\n            \n\n            \n                Extends\n            \n            \n                        OperationDescriptors\n            \n\n        \n            Index\n            \n                \n                    \n                        \n                            Properties\n                        \n                    \n                    \n                        \n                            \n                                \n                                            Optional\n                                        \n                                            default_params\n                                        \n                                \n                                \n                                        \n                                            max_inputs\n                                        \n                                \n                                \n                                        \n                                            params\n                                        \n                                \n                            \n                        \n                    \n                \n            \n        \n\n\n\n            \n                Properties\n                    \n                        \n                                \n                                    \n                                        \n                                        default_params\n                                            \n                                                \n                                            \n                                        \n                                    \n                                \n                                \n                                    \n                                        default_params:         Array\n\n                                    \n                                \n\n\n                                    \n                                        \n                                            Type :         Array\n\n                                        \n                                    \n\n                                    \n                                        \n                                            Optional\n                                        \n                                    \n\n\n\n\n                        \n                    \n                    \n                        \n                                \n                                    \n                                        \n                                        max_inputs\n                                            \n                                                \n                                            \n                                        \n                                    \n                                \n                                \n                                    \n                                        max_inputs:         number\n\n                                    \n                                \n\n\n                                    \n                                        \n                                            Type :         number\n\n                                        \n                                    \n\n\n\n\n\n                        \n                    \n                    \n                        \n                                \n                                    \n                                        \n                                        params\n                                            \n                                                \n                                            \n                                        \n                                    \n                                \n                                \n                                    \n                                        params:     Array\n\n                                    \n                                \n\n\n                                    \n                                        \n                                            Type :     Array\n\n                                        \n                                    \n\n\n\n\n\n                        \n                    \n            \n    \n\n\n    \n        import { Draft } from \"../../../core/model/datatypes\";\nimport { ParamValue, OperationParam as OpParam, getParamValues } from \"./params\";\nimport { OperationInlet as OpInlet, InletDrafts } from \"./inlets\";\n\n/**\n* At its heart, an Operation is a very fancy function that outputs a Draft or several Drafts.\n* The function itself is perform(), and the Operation can take inputs in the form of \n* Drafts (inlets) or Parameters (params).\n*/\n\n/** \n* Types that an Operation's perform() function can handlle as input/output\n*/\n\n/** @type Union of types that can serve as input to Operation perform() functions. */\nexport type PerformDraftInput = InletDrafts | Array | Draft | null;\n\ntype MultiDraftInput = InletDrafts | Array;\n\n/** @type Union of types that Operation perform() functions can output. */\nexport type PerformOutput = Array | Draft;\n\n/**\n * OPERATION TOPOLOGY\n * Topology refers to the shape of the Operation in terms of its\n * number of input and output Drafts. Classifies Operations.\n */\n\nexport const TopologyName = {\n  pipe: 'pipe', \n  seed: 'seed', \n  merge: 'merge', \n  branch: 'branch', \n  bus: 'bus'\n} as const;\nexport type TopologyName = keyof typeof TopologyName;\n\ninterface TopologyDef { type: TopologyName; input: PerformDraftInput; output: PerformOutput; };\n\n/**\n* @class\n* Operation that can generate a draft with no inputs, may take an optional input\n* @method perform OpPerform function: \n* - INPUT: zero or one Draft\n* - OUTPUT: exactly one Draft\n*/\nexport class Seed implements TopologyDef { type: 'seed'; input: Draft | null; output: Draft; };\n\n/**\n* @class\n* Operation that takes one input and generates one output draft. \n* @method perform OpPerform function: \n* - INPUT: exactly one Draft\n* - OUTPUT: exactly one Draft\n*/\nexport class Pipe implements TopologyDef { type: 'pipe'; input: Draft; output: Draft; };\n\n/**\n* @class\n* Operation that takes many (N) inputs and generates one output draft.\n* @method perform OpPerform function: \n* - INPUT: Array of Drafts\n* - OUTPUT: exactly one Draft\n*/\nexport class Merge implements TopologyDef { type: 'merge'; input: InletDrafts | Array; output: Draft; };\n\n/**\n* @class\n* Operation that takes one input and generates many (N) output drafts.\n* @method perform OpPerform function:\n* - INPUT: exactly one Draft\n* - OUTPUT: Array of Drafts\n*/\nexport class Branch implements TopologyDef { type: 'branch'; input: Draft; output: Array; };\n\n/**\n* CURRENTLY UNUSED\n* @class\n* Operation that takes many (N) inputs and generates many (M) output drafts.\n* Number of inputs does not necessarily match number of outputs (N ?= M).\n* @method perform OpPerform function:  \n* - INPUT: Array of Drafts\n* - OUTPUT: Array of Drafts\n*/\nexport class Bus implements TopologyDef { type: 'bus'; input: Array | InletDrafts; output: Array; };\n\ntype TopologyIndex = {\n  'seed': Seed,\n  'pipe': Pipe,\n  'merge': Merge,\n  'branch': Branch,\n  'bus': Bus\n}\ntype OpTopology = TopologyIndex[TopologyName];\n\n/**\n * OPERATION CONSTRAINT\n * A Constraint on an Operation classifies it based on its\n * input requirements (both Drafts and Params).\n */\n\nexport const ConstraintOptions = {\n  req: 'req', \n  opt: 'opt', \n  none: 'none'\n} as const;\nexport type ConstraintOptions = keyof typeof ConstraintOptions;\n\nexport const ConstraintName = {\n  no_drafts: { input_drafts: 'none', input_params: 'req' }, \n  no_params: { input_drafts: 'req', input_params: 'none' }, \n  drafts_opt: { input_drafts: 'opt', input_params: 'req' }, \n  params_opt: { input_drafts: 'req', input_params: 'opt' }, \n  all_req: {input_drafts: 'req', input_params: 'req' },\n} as const;\ntype ConstraintName = keyof typeof ConstraintName;\n\ntype ConstraintDefs = {\n  [C in keyof typeof ConstraintName]: {\n    constraint: C;\n    input_drafts: typeof ConstraintName[C][\"input_drafts\"];\n    input_params: typeof ConstraintName[C][\"input_params\"];\n  }\n}\n\nexport type NoDrafts = ConstraintDefs[\"no_drafts\"];\nexport type NoParams = ConstraintDefs[\"no_params\"];\nexport type DraftsOptional = ConstraintDefs[\"drafts_opt\"];\nexport type ParamsOptional = ConstraintDefs[\"params_opt\"];\nexport type AllRequired = ConstraintDefs[\"all_req\"];\n\ntype ConstraintIndex = {\n  'no_drafts': NoDrafts, // does not accept input drafts\n  'no_params': NoParams, // does not accept params\n  'drafts_opt': DraftsOptional, // can take no params -- has default values\n  'params_opt': ParamsOptional, // can take zero input drafts\n  'all_req': AllRequired, // both inputs and params required\n}\ntype OpConstraint = ConstraintIndex[ConstraintName]; \n\n/** \n* Generic types for perform() functions, describing options \n* for input draft multiplicity (0, 1, N) and param requirement \n*/\n\ntype NoDraftsPerform = {(params: Array): Topo[\"output\"]};\ntype NoParamsPerform = {(inputs: Topo[\"input\"]): Topo[\"output\"]};\ntype ParamsOptionalPerform = {(inputs: Topo[\"input\"], params?: Array): Topo[\"output\"]}; \ntype DraftsOptionalPerform = {(params: Array, inputs?: Topo[\"input\"]): Topo[\"output\"]};  \ntype AllRequiredPerform = {(inputs: Topo[\"input\"], params: Array): Topo[\"output\"]};  \n\ntype PerformCallSigs = {\n  no_drafts: { [Topo in keyof TopologyIndex]: NoDraftsPerform; },\n  no_params: { [Topo in keyof TopologyIndex]: NoParamsPerform; },\n  drafts_opt: { [Topo in keyof TopologyIndex]: DraftsOptionalPerform; },\n  params_opt: { [Topo in keyof TopologyIndex]: ParamsOptionalPerform; },\n  all_req: { [Topo in keyof TopologyIndex]: AllRequiredPerform; }\n}\n\n/**\n * @interface OpClassifier\n * Key-value pairs for an Operation's Topology and Constraint.\n */\ninterface OpClassifier {\n  type: Topo[\"type\"] | '';\n  input_drafts: Constraint[\"input_drafts\"] | '';\n  input_params: Constraint[\"input_params\"] | '';\n}\n\n/** @type User-defined descriptive strings for any Operation. */\ntype OperationDescriptors = { name: string, displayname: string, dx: string };\n\n/**\n* A standard Operation's metadata -- i.e. everything not the perform() function\n* @param name the internal name of this opearation (CHANGING THESE WILL BREAK LEGACY VERSIONS)\n* @param displayname the name to show upon this operation\n* @param dx the description of this operation\n* @param max_inputs the maximum number of inputs (drafts) allowed directly into this operation\n* @param params the parameters associated with this operation\n* @method perform an OpPerform function\n*/\nexport interface OperationProperties extends OperationDescriptors {\n  max_inputs: number,\n  default_params?: Array;\n  params: Array,\n}\n\n/**\n * @type A function that serves as the perform() method for an Operation. \n * This generic type requires two type parameters:\n * @param Topo one of the PerformInput types\n * @param Constraint one of the PerformOutput types\n *\n * OpPerform to give call signature for perform() function \n * Topo  = Seed | Pipe | Merge | Branch | Bus\n * Constraint = NoDrafts | NoParams | DraftsOptional | ParamsOptional | AllRequired\n */\nexport type OpPerform = PerformCallSigs[Constraint[\"constraint\"]][Topo[\"type\"]];\n// type PerformArgs = Parameters>;\n\n/** TODO doublecheck inlets have been added correctly (fields for input drafts) */\nexport class BaseOp implements OperationProperties {\n  name: string;\n  old_names: Array;\n  displayname: string;\n  dx: string;\n  params: Array;\n  inlets: Array;\n  default_params?: Array;\n  max_inputs: number;\n  classifier: OpClassifier;\n  perform: OpPerform;\n\n  /** @constructor create an Operation using an object literal (keys and values) */\n  constructor (args: OpConstructorArgs);\n  /** @constructor create an Operation using direct arguments in the constructor (values only) */\n  constructor (...args: OpConstructorArray);\n  constructor (name: string, displayname: string, dx: string, perform: OpPerform);\n  constructor (name: string, displayname: string, dx: string, params: Array, perform: OpPerform);\n  constructor (nameOrArgs: any, displayname?: string, dx?: string, performOrParams?: OpPerform | Array, performWithParams?: OpPerform) {\n    // console.log((nameOrArgs.name != undefined));\n    this.classifier = { type: '', input_drafts: '', input_params: '' };\n    if (nameOrArgs.name) {\n      let args = nameOrArgs;\n      this.name = args.name;\n      this.displayname = args.displayname;\n      this.dx = args.dx;\n      this.perform = args.perform;\n      if (args.params) this.params = args.params;\n      else this.params = [];\n      if (args.inlets) this.inlets = args.inlets;\n      else this.inlets = [];\n    } else {\n      this.name = nameOrArgs;\n      this.displayname = displayname;\n      this.dx = dx;\n      if (performWithParams) {\n        let params = > performOrParams;\n        this.params = params;\n        this.default_params = getParamValues(params);\n        this.perform = performWithParams;\n      } else {\n        this.params = [];\n        this.perform = > performOrParams;\n      }\n    }\n  }\n\n  constrain(c: ConstraintName): void {\n    if (c == 'no_drafts') { this.max_inputs = 0; this.inlets = []; }\n    this.classifier.input_drafts = ConstraintName[c][\"input_drafts\"]; \n    this.classifier.input_params = ConstraintName[c][\"input_params\"];\n  }\n\n  type(t: TopologyName): BaseOp {\n    this.classifier.type = t;\n    return this;\n  }\n}\n\ntype ConstructorArgKeysIndex = {\n  [C in keyof ConstraintIndex]: C extends \"no_params\" ? {\n    [T in keyof TopologyIndex]: {\n      name: string, displayname: string, dx: string, old_names: string[],\n      inlets: OpInlet[], perform: OpPerform\n    }\n  } : C extends \"no_drafts\" ? {\n    [T in keyof TopologyIndex]: {\n      name: string, displayname: string, dx: string, old_names: string[],\n      params: OpParam[], perform: OpPerform\n    }\n  } : {\n    [T in keyof TopologyIndex]: {\n      name: string, displayname: string, dx: string, old_names: string[],\n      params: OpParam[], inlets: OpInlet[],\n      perform: OpPerform\n    }\n  }\n}\n\ntype ConstructorArrayIndex = {\n  [C in keyof ConstraintIndex]: C extends \"no_params\" ? {\n    [T in keyof TopologyIndex]: [\n      name: string, displayname: string, dx: string, old_names: string[],\n      inlets: OpInlet[], perform: OpPerform\n    ]\n  } : C extends \"no_drafts\" ? {\n    [T in keyof TopologyIndex]: [\n      name: string, displayname: string, dx: string, old_names: string[],\n      params: OpParam[], perform: OpPerform\n    ]\n  } : {\n    [T in keyof TopologyIndex]: [\n      name: string, displayname: string, dx: string, old_names: string[],\n      params: OpParam[], inlets: OpInlet[],\n      perform: OpPerform\n    ]\n  }\n}\n\ntype OpConstructorArgKeys = \nConstructorArgKeysIndex[Constraint[\"constraint\"]][Topo[\"type\"]];\n\ntype OpConstructorArray = \nConstructorArrayIndex[Constraint[\"constraint\"]][Topo[\"type\"]];\n\ntype OpConstructorArgs = \nOpConstructorArgKeys | OpConstructorArray;\n\n// use factory design pattern to apply classifiers to BaseOp?? Is this too convoluted\n// https://refactoring.guru/design-patterns/abstract-factory/typescript\nclass AbstractOpFactory {\n  NoDrafts(args: OpConstructorArgKeys): BaseOp;\n  NoDrafts(...args: OpConstructorArray): BaseOp;\n  NoDrafts(...args: any) {\n    let op = new BaseOp(...args);\n    op.constrain(\"no_drafts\");\n    return op;\n  }\n\n  NoParams(args: OpConstructorArgKeys): BaseOp;\n  NoParams(...args: OpConstructorArray): BaseOp;\n  NoParams(...args: any) {\n    let op = new BaseOp(...args);\n    op.constrain(\"no_params\");\n    return op;\n  }\n\n  DraftsOptional(args: OpConstructorArgKeys): BaseOp;\n  DraftsOptional(...args: OpConstructorArray): BaseOp;\n  DraftsOptional(...args: any) {\n    let op = new BaseOp(...args);\n    op.constrain(\"drafts_opt\");\n    return op;\n  }\n\n  ParamsOptional(args: OpConstructorArgKeys): BaseOp;\n  ParamsOptional(...args: OpConstructorArray): BaseOp;\n  ParamsOptional(...args: any) {\n    let op = new BaseOp(...args);\n    op.constrain(\"params_opt\");\n    return op;\n  }\n\n  AllRequired(args: OpConstructorArgKeys): BaseOp;\n  AllRequired(...args: OpConstructorArray): BaseOp;\n  AllRequired(...args: any) {\n    let op = new BaseOp(...args);\n    op.constrain(\"all_req\");\n    return op;\n  }\n}\n\n// combine with mix-ins design pattern (link: TypeScript docs website)\nfunction makeTopoFactory(topo: TopologyName) {\n  return class TopologyFactory extends AbstractOpFactory {\n    static base = new AbstractOpFactory();\n    \n    static NoDrafts(args: OpConstructorArgKeys): BaseOp;\n    static NoDrafts(...args: OpConstructorArray): BaseOp;\n    static NoDrafts(...args: any) {\n      return this.base.NoDrafts(...args).type(topo);\n    }\n\n    static NoParams(args: OpConstructorArgKeys): BaseOp;\n    static NoParams(...args: OpConstructorArray): BaseOp;\n    static NoParams(...args: any) {\n      return this.base.NoParams(...args).type(topo);\n    }\n\n    static DraftsOptional(args: OpConstructorArgKeys): BaseOp;\n    static DraftsOptional(...args: OpConstructorArray): BaseOp;\n    static DraftsOptional(...args: any) {\n      return this.base.DraftsOptional(...args).type(topo);\n    }\n\n    static ParamsOptional(args: OpConstructorArgKeys): BaseOp;\n    static ParamsOptional(...args: OpConstructorArray): BaseOp;\n    static ParamsOptional(...args: any) {\n      return this.base.ParamsOptional(...args).type(topo);\n    }\n\n    static AllRequired(args: OpConstructorArgKeys): BaseOp;\n    static AllRequired(...args: OpConstructorArray): BaseOp;\n    static AllRequired(...args: any) {\n      return this.base.AllRequired(...args).type(topo);\n    }\n  }\n}\n\nexport const OpFactories = {\n  Seed: makeTopoFactory(\"seed\"),\n  Pipe: makeTopoFactory(\"pipe\"),\n  Merge: makeTopoFactory(\"merge\"),\n  Branch: makeTopoFactory(\"merge\"),\n  Bus: makeTopoFactory(\"bus\"),\n}\n\n// export const SeedOperation = makeTopoFactory(\"seed\");\n// export const PipeOperation = makeTopoFactory(\"pipe\");\n// export const MergeOperation = makeTopoFactory(\"merge\");\n// export const BranchOperation = makeTopoFactory(\"merge\");\n// export const BusOperation = makeTopoFactory(\"bus\");\n\ntype TopologyOpIndex = {\n  [T in keyof TopologyIndex]: {\n    [C in keyof ConstraintIndex]: BaseOp;\n  }\n}\n\nexport type BuildableOperation = TopologyOpIndex[TopologyName][ConstraintName];\n    \n\n\n\n\n\n\n\n\n\n                   \n    \n         results matching \"\"\n        \n    \n    \n        No results matching \"\"\n    \n\n"},"components/OpsComponent.html":{"url":"components/OpsComponent.html","title":"component - OpsComponent","body":"\n                   \n\n\n\n\n\n  Components\n  \n  OpsComponent\n\n\n\n        \n            Info\n        \n        \n            Source\n        \n        \n            Template\n        \n        \n            Styles\n        \n        \n            DOM Tree\n        \n\n\n\n    \n    File\n\n\n    src/app/mixer/modal/ops/ops.component.ts\n\n\n\n\n\n    \n        Implements\n    \n    \n                    OnInit\n    \n\n\n\n    Metadata\n    \n        \n\n\n\n\n\n\n\n\n\n\n\n            \n                selector\n                app-ops\n            \n\n            \n                styleUrls\n                ./ops.component.scss\n            \n\n\n\n            \n                templateUrl\n                ./ops.component.html\n            \n\n\n\n\n\n\n\n\n        \n    \n\n\n    \n    Index\n    \n        \n                \n                    \n                        Properties\n                    \n                \n                \n                    \n                        \n                            \n                                    Public\n                                data\n                            \n                            \n                                displaynames\n                            \n                            \n                                filteredOptions\n                            \n                            \n                                myControl\n                            \n                            \n                                opnames\n                            \n                            \n                                    Public\n                                ops\n                            \n                        \n                    \n                \n\n                \n                    \n                        Methods\n                    \n                \n                \n                    \n                        \n                            \n                                    Private\n                                _filter\n                            \n                            \n                                addOp\n                            \n                            \n                                addOpFromSearch\n                            \n                            \n                                close\n                            \n                            \n                                ngOnInit\n                            \n                        \n                    \n                \n\n\n                \n                    \n                        Outputs\n                    \n                \n                \n                    \n                        \n                            \n                                onImport\n                            \n                            \n                                onOperationAdded\n                            \n                        \n                    \n                \n\n\n\n        \n    \n\n\n    \n    Constructor\n        \n            \n                \n                    \nconstructor(ops: OperationService, dialog: MatDialog, dialogRef: MatDialogRef, data: any)\n                    \n                \n                        \n                            \n                                Defined in src/app/mixer/modal/ops/ops.component.ts:22\n                            \n                        \n\n                \n                    \n                            \n                                    Parameters :\n                                    \n                                        \n                                            \n                                                Name\n                                                    Type\n                                                Optional\n                                            \n                                        \n                                        \n                                                \n                                                        ops\n                                                  \n                                                        \n                                                                        OperationService\n                                                        \n                                                  \n                                                    \n                                                            No\n                                                    \n                                                    \n                                                \n                                                \n                                                        dialog\n                                                  \n                                                        \n                                                                    MatDialog\n                                                        \n                                                  \n                                                    \n                                                            No\n                                                    \n                                                    \n                                                \n                                                \n                                                        dialogRef\n                                                  \n                                                        \n                                                                        MatDialogRef\n                                                        \n                                                  \n                                                    \n                                                            No\n                                                    \n                                                    \n                                                \n                                                \n                                                        data\n                                                  \n                                                        \n                                                                        any\n                                                        \n                                                  \n                                                    \n                                                            No\n                                                    \n                                                    \n                                                \n                                        \n                                    \n                            \n                    \n                \n            \n        \n\n\n\n    \n    Outputs\n        \n            \n                \n                    \n                        \n                        onImport\n                    \n                \n                \n                    \n                        Type :         any\n\n                    \n                \n                        \n                            \n                                    Defined in src/app/mixer/modal/ops/ops.component.ts:17\n                            \n                        \n            \n        \n        \n            \n                \n                    \n                        \n                        onOperationAdded\n                    \n                \n                \n                    \n                        Type :         any\n\n                    \n                \n                        \n                            \n                                    Defined in src/app/mixer/modal/ops/ops.component.ts:16\n                            \n                        \n            \n        \n\n\n\n    \n    \n    \n        Methods\n    \n    \n        \n            \n                \n                    \n                    \n                        Private\n                        _filter\n                        \n                    \n                \n            \n            \n                \n                    \n                    _filter(value: string)\n                \n            \n\n\n            \n                \n                    Defined in src/app/mixer/modal/ops/ops.component.ts:40\n                \n            \n\n\n            \n                \n\n                    \n                        Parameters :\n                        \n                        \n                            \n                                \n                                    Name\n                                    Type\n                                    Optional\n                                \n                            \n                            \n                                \n                                    value\n                                    \n                                                string\n                                    \n\n                                    \n                                        No\n                                    \n\n\n                                \n                            \n                        \n                    \n                    \n                    \n                    \n                        Returns :     string[]\n\n                    \n                    \n                        \n                    \n                \n            \n        \n    \n    \n        \n            \n                \n                    \n                    \n                        addOp\n                        \n                    \n                \n            \n            \n                \naddOp(name: string)\n                \n            \n\n\n            \n                \n                    Defined in src/app/mixer/modal/ops/ops.component.ts:51\n                \n            \n\n\n            \n                \n\n                    \n                        Parameters :\n                        \n                        \n                            \n                                \n                                    Name\n                                    Type\n                                    Optional\n                                \n                            \n                            \n                                \n                                    name\n                                    \n                                                string\n                                    \n\n                                    \n                                        No\n                                    \n\n\n                                \n                            \n                        \n                    \n                    \n                    \n                    \n                        Returns :         void\n\n                    \n                    \n                        \n                    \n                \n            \n        \n    \n    \n        \n            \n                \n                    \n                    \n                        addOpFromSearch\n                        \n                    \n                \n            \n            \n                \naddOpFromSearch(event: any)\n                \n            \n\n\n            \n                \n                    Defined in src/app/mixer/modal/ops/ops.component.ts:55\n                \n            \n\n\n            \n                \n\n                    \n                        Parameters :\n                        \n                        \n                            \n                                \n                                    Name\n                                    Type\n                                    Optional\n                                \n                            \n                            \n                                \n                                    event\n                                    \n                                                any\n                                    \n\n                                    \n                                        No\n                                    \n\n\n                                \n                            \n                        \n                    \n                    \n                    \n                    \n                        Returns :         void\n\n                    \n                    \n                        \n                    \n                \n            \n        \n    \n    \n        \n            \n                \n                    \n                    \n                        close\n                        \n                    \n                \n            \n            \n                \nclose()\n                \n            \n\n\n            \n                \n                    Defined in src/app/mixer/modal/ops/ops.component.ts:45\n                \n            \n\n\n            \n                \n\n                    \n                        Returns :         void\n\n                    \n                \n            \n        \n    \n    \n        \n            \n                \n                    \n                    \n                        ngOnInit\n                        \n                    \n                \n            \n            \n                \nngOnInit()\n                \n            \n\n\n            \n                \n                    Defined in src/app/mixer/modal/ops/ops.component.ts:28\n                \n            \n\n\n            \n                \n\n                    \n                        Returns :         void\n\n                    \n                \n            \n        \n    \n\n    \n    \n    \n        Properties\n    \n    \n        \n            \n                \n                    \n                    \n                            Public\n                        data\n                        \n                    \n                \n            \n                \n                    \n                        Type :         any\n\n                    \n                \n                \n                    \n                        Decorators : \n                        \n                        \n                            @Inject(MAT_DIALOG_DATA)\n                        \n                    \n                \n                    \n                        \n                                Defined in src/app/mixer/modal/ops/ops.component.ts:26\n                        \n                    \n\n\n        \n    \n    \n        \n            \n                \n                    \n                    \n                        displaynames\n                        \n                    \n                \n            \n                \n                    \n                        Type :     Array\n\n                    \n                \n                \n                    \n                        Default value : []\n                    \n                \n                    \n                        \n                                Defined in src/app/mixer/modal/ops/ops.component.ts:20\n                        \n                    \n\n\n        \n    \n    \n        \n            \n                \n                    \n                    \n                        filteredOptions\n                        \n                    \n                \n            \n                \n                    \n                        Type :     Observable\n\n                    \n                \n                    \n                        \n                                Defined in src/app/mixer/modal/ops/ops.component.ts:22\n                        \n                    \n\n\n        \n    \n    \n        \n            \n                \n                    \n                    \n                        myControl\n                        \n                    \n                \n            \n                \n                    \n                        Default value : new FormControl()\n                    \n                \n                    \n                        \n                                Defined in src/app/mixer/modal/ops/ops.component.ts:21\n                        \n                    \n\n\n        \n    \n    \n        \n            \n                \n                    \n                    \n                        opnames\n                        \n                    \n                \n            \n                \n                    \n                        Type :     Array\n\n                    \n                \n                \n                    \n                        Default value : []\n                    \n                \n                    \n                        \n                                Defined in src/app/mixer/modal/ops/ops.component.ts:19\n                        \n                    \n\n\n        \n    \n    \n        \n            \n                \n                    \n                    \n                            Public\n                        ops\n                        \n                    \n                \n            \n                \n                    \n                        Type :         OperationService\n\n                    \n                \n                    \n                        \n                                Defined in src/app/mixer/modal/ops/ops.component.ts:24\n                        \n                    \n\n\n        \n    \n\n\n\n\n\n    \n        import { Component, OnInit, Output, EventEmitter, Inject } from '@angular/core';\nimport { OperationService } from '../../provider/operation.service';\nimport {MatTooltipModule} from '@angular/material/tooltip';\nimport { MatDialog, MatDialogRef, MAT_DIALOG_DATA } from '@angular/material/dialog';\nimport {FormControl} from '@angular/forms';\nimport {Observable} from 'rxjs';\nimport {map, startWith} from 'rxjs/operators';\n\n@Component({\n  selector: 'app-ops',\n  templateUrl: './ops.component.html',\n  styleUrls: ['./ops.component.scss']\n})\nexport class OpsComponent implements OnInit {\n  \n  @Output() onOperationAdded:any = new EventEmitter();\n  @Output() onImport:any = new EventEmitter();\n  \n  opnames:Array = [];\n  displaynames:Array = [];\n  myControl = new FormControl();\n  filteredOptions: Observable;\n  \n  constructor(public ops: OperationService, private dialog: MatDialog,\n    private dialogRef: MatDialogRef,\n             @Inject(MAT_DIALOG_DATA) public data: any) { }\n\n  ngOnInit() {\n\n    const allops = this.ops.ops.concat(this.ops.dynamic_ops);\n    this.opnames = allops.map(el => el.name);\n    this.displaynames = allops.map(el => el.displayname);\n\n    this.filteredOptions = this.myControl.valueChanges.pipe(\n      startWith(''),\n      map(value => this._filter(value))\n    );\n  }\n\n  private _filter(value: string): string[] {\n    const filterValue = value.toLowerCase();\n    return this.displaynames.filter(option => option.toLowerCase().includes(filterValue));\n  }\n\n  close() {\n    this.dialogRef.close(null);\n  }\n\n\n\n  addOp(name: string){\n      this.onOperationAdded.emit(name);  \n  }\n\n  addOpFromSearch(event: any){\n    //need to convert display name toname here\n    const ndx = this.displaynames.findIndex(el => el === event.option.value);\n    if(ndx !== -1){\n      this.onOperationAdded.emit(this.opnames[ndx]);\n    }\n\n\n  }\n\n\n\n\n}\n\n    \n\n    \n          \n\n\n\nOperations\n\n  \n\n   \n\n  \n    \n    \n    search for action by name\n    \n           \n            \n              {{option}}\n            \n    \n    \n  \n   \n\n\n    \n      \n      {{class.category}}\n       {{class.dx}}\n      \n          \n            {{op.displayname}}\n           \n      \n      \n    \n\n  \n\n\n\n    \n\n    \n                \n                    ./ops.component.scss\n                \n                .mat-stroked-button{\n    margin: 0px 4px 4px 0px;\n    /* background-color: #00d1b2; */\n    background: #333333;\n    color: white;\n    text-align: left;\n    font-weight: bold;\n}\n\n.mat-form-field{\n    width: 100%;\n}\n\n\n\n.op-group h3{\n    width: 95%;\n    font-size: 100%;\n    font-weight: bold;\n    padding: 20px 0px 10px 14px;\n}\n\n.op-group  p{\n    width: 95%;\n    font-size: .8em;\n    padding: 0px 0px 10px 14px;\n}\n\n.toprow{\n    display: flex;\n    flex-direction: row;\n    line-height: 1em;\n}\n\n\n\n.visibleTooltip{\n    font-size: 2em;\n    background: #b71c1c;\n\n}\n\n.op-group{\n    display: flex;\n    flex-direction: column;\n}\n\n\n    \n\n    \n        \n        \n            \n                Legend\n            \n            \n                Html element\n            \n            \n                Component\n            \n            \n                Html element with directive\n            \n        \n    \n\n    \n\n\n\n\n\n\n        var COMPONENT_TEMPLATE = '  Operations                   search for action by name                                         {{option}}                                         {{class.category}}       {{class.dx}}                            {{op.displayname}}                             '\n    var COMPONENTS = [{'name': 'ConnectionComponent', 'selector': 'app-connection'},{'name': 'DraftdetailComponent', 'selector': 'app-draftdetail'},{'name': 'ImageComponent', 'selector': 'app-image'},{'name': 'InletComponent', 'selector': 'app-inlet'},{'name': 'MixerComponent', 'selector': 'app-mixer'},{'name': 'MixerViewComponent', 'selector': 'app-mixerview'},{'name': 'NoteComponent', 'selector': 'app-note'},{'name': 'OperationComponent', 'selector': 'app-operation'},{'name': 'OpHelpModal', 'selector': 'app-ophelp'},{'name': 'OpsComponent', 'selector': 'app-ops'},{'name': 'OpSequencerComponent', 'selector': 'app-op-sequencer'},{'name': 'PaletteComponent', 'selector': 'app-palette'},{'name': 'ParameterComponent', 'selector': 'app-parameter'},{'name': 'PlayerComponent', 'selector': 'app-player'},{'name': 'SnackbarComponent', 'selector': 'app-snackbar'},{'name': 'SubdraftComponent', 'selector': 'app-subdraft'},{'name': 'VirtualPedalsComponent', 'selector': 'app-virtual-pedals'},{'name': 'WeavingStateComponent', 'selector': 'app-weaving-state'}];\n    var DIRECTIVES = [{'name': 'MarqueeComponent', 'selector': 'app-marquee'},{'name': 'SelectionComponent', 'selector': 'app-selection'}];\n    var ACTUAL_COMPONENT = {'name': 'OpsComponent'};\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n                   \n    \n         results matching \"\"\n        \n    \n    \n        No results matching \"\"\n    \n\n"},"interfaces/PairedOp.html":{"url":"interfaces/PairedOp.html","title":"interface - PairedOp","body":"\n                   \n\n\n\n\n\n\n\n\n\n\n\n\n\n\n  Interfaces\n  \n  PairedOp\n\n\n\n        \n            Info\n        \n        \n            Source\n        \n\n\n\n    \n        \n            File\n        \n        \n            src/app/player/model/op_mappings.ts\n        \n\n\n            \n                Description\n            \n            \n                Basic combination:\n\n1 pedal, 1 operation\nif pedal, then operation perform()\n\n\n            \n\n            \n                Extends\n            \n            \n                        PedalEvent\n            \n\n        \n            Index\n            \n                \n                    \n                        \n                            Properties\n                        \n                    \n                    \n                        \n                            \n                                \n                                        \n                                            op\n                                        \n                                \n                                \n                                        \n                                            pedal\n                                        \n                                \n                            \n                        \n                    \n                \n            \n        \n\n\n\n            \n                Properties\n                    \n                        \n                                \n                                    \n                                        \n                                        op\n                                            \n                                                \n                                            \n                                        \n                                    \n                                \n                                \n                                    \n                                        op:         PlayerOp\n\n                                    \n                                \n\n\n                                    \n                                        \n                                            Type :         PlayerOp\n\n                                        \n                                    \n\n\n\n\n\n                        \n                    \n                    \n                        \n                                \n                                    \n                                        \n                                        pedal\n                                            \n                                                \n                                            \n                                        \n                                    \n                                \n                                \n                                    \n                                        pedal:         number\n\n                                    \n                                \n\n\n                                    \n                                        \n                                            Type :         number\n\n                                        \n                                    \n\n\n\n\n\n                        \n                    \n            \n    \n\n\n    \n        import { Draft } from \"../../core/model/datatypes\";\nimport { wefts } from \"../../core/model/drafts\";\nimport { OpInput, TreeOperation as TreeOp, SingleInlet,\n  BaseOp as Op, BuildableOperation as GenericOp, \n  Seed, Pipe, AllRequired, DraftsOptional, \n  getDefaultParams, \n  ParamValue\n} from \"../../mixer/model/operation\";\nimport { PlayerState, initState, copyState } from \"./state\";\n\nimport { OpSequencer, makeOpSequencer } from \"./sequencer\";\nexport * from \"./sequencer\";\n\nexport interface PlayerOp {\n  id?: number,\n  name: string,\n  struct_id?: number,\n  dx?: string,\n  op?: GenericOp,\n  weavingOnly?: boolean,\n  chain?: boolean,\n  perform: (init: PlayerState) => Promise;\n}\nexport type SingleOp = PlayerOp;\n\n/** @const forward a player-specific function to progress through the draft */\nexport const forward: PlayerOp = {\n  name: 'forward',\n  perform: (init: PlayerState) => { \n    let res = copyState(init);\n    res.row = (init.row+1) % wefts(init.draft.drawdown);\n    res.pedal = 'forward';\n    if (res.weaving) res.numPicks++;\n    return Promise.resolve(res); \n  }\n}\n\n/** @const refresh a player-specific function to progress through the draft (re-sends the row to give more time) */\nexport const refresh: PlayerOp = {\n  name: 'refresh',\n  perform: (init: PlayerState) => { \n    let res = copyState(init);\n    if (res.weaving) res.numPicks++;\n    return Promise.resolve(res);\n  }\n}\n\n/** @const reverse a player-specific function to progress backwards through the draft */\nexport const reverse: PlayerOp = {\n  name: 'reverse',\n  perform: (init: PlayerState) => { \n    let res = copyState(init);\n    res.row = (init.row+wefts(init.draft.drawdown)-1) % wefts(init.draft.drawdown);\n    res.pedal = 'reverse';\n    if (res.weaving) res.numPicks++;\n    return Promise.resolve(res);\n  }\n}\n\nexport function playerOpFrom(op: GenericOp, params?: Array) {\n  // use \"rotate\" op as an example\n  let input_params = params ? params : getDefaultParams(op);\n  let perform;\n  if (op.classifier.type === 'pipe') {\n    const pipeOp = op as Op;\n    perform = function(init: PlayerState) {\n      let res = copyState(init);\n      res.draft = pipeOp.perform(init.draft, input_params);\n      res.row = (init.row) % wefts(res.draft.drawdown);\n      res.pedal = op.name;\n      return Promise.resolve(res);\n    }\n  } else if (op.classifier.type === 'seed') {\n    const seedOp = op as Op;\n    perform = function(init: PlayerState) {\n      let res = copyState(init);\n      res.draft = seedOp.perform(input_params);\n      res.row = (init.row) % wefts(res.draft.drawdown);\n      res.pedal = op.name;\n      return Promise.resolve(res);\n    }\n  }\n  \n  /** @TODO */\n  var p: PlayerOp = { \n    name: op.name,\n    dx: op.dx,\n    perform: perform\n  }\n  return p;\n}\n\n\n/** \n * @type \n * a TreeOperation is compatible with the player if it takes one or zero draft inputs \n * and outputs one draft.\n */\ntype PlayableTreeOp = TreeOp & \n  ( { inlets: [ SingleInlet ] } | \n    { inlets: [] });\n\n/** @function playerOpFromTree (untested) */\nfunction playerOpFromTree(op: PlayableTreeOp) {\n  let perform: PlayerOp[\"perform\"];\n  let param_input: OpInput = { op_name: op.name, drafts: [], params: getDefaultParams(op), inlet: -1 }\n  if (op.inlets.length == 0) {\n    perform = function(init: PlayerState) {\n      return op.perform([param_input]).then((output) => {\n        return { \n          draft: output[0], \n          row: init.row, \n          weaving: init.weaving, \n          pedal: op.name, \n          numPicks: init.numPicks \n        };\n      });\n    }\n  } else {\n    perform = function(init: PlayerState) {\n      let draft_input: OpInput = { op_name: 'child', drafts: [init.draft], params: [], inlet: 0}\n      return op.perform([param_input, draft_input]).then((output) => {\n        return { \n          draft: output[0], \n          row: init.row, \n          weaving: init.weaving,\n          pedal: op.name,\n          numPicks: init.numPicks };\n      });\n    }\n  }\n\n  var p: PlayerOp = { \n    name: op.name,\n    perform: perform\n  }\n  return p;\n}\n\n/** things that can happen in response to a pedal */\nexport interface PedalEvent {\n  id?: number,\n  pedal?: number,\n  name: string\n  perform: (init: PlayerState, ...args) => Promise;\n}\n\n/** \n * Basic combination: \n *  - 1 pedal, 1 operation\n *  - if pedal, then operation perform() \n * @param pedal ID number of pedal\n * @param op    ID number of Operation (assigned in Draft Player service)\n */\nexport interface PairedOp extends PedalEvent {\n  pedal:  number,\n  op:     PlayerOp,\n}\n\n// this ...args thing is such a hack\nexport function makePairedOp(p: number, op: PlayerOp): PairedOp {\n  let jankPerform = (init: PlayerState, ...args) => {\n    return op.perform(init);\n  }\n  return {\n    pedal: p,\n    name: op.name,\n    op: op,\n    perform: jankPerform\n  }\n}\n\n/**\n * Op chain:\n * - 1 pedal, multiple operations in a chain (array)\n * - if pedal, perform() each Op in sequence\n * @param pedal ID number of pedals\n * @param ops   array of Op ID numbers to execute in order\n */\nexport interface ChainOp extends PedalEvent{\n  pedal:  number,\n  ops:    Array,\n}\n\nexport function makeBlankChainOp(p?: number): ChainOp {\n  let res: ChainOp = {\n    pedal: -1,\n    name: \"\",\n    ops: [],\n    perform: (init: PlayerState, ...args) => {return Promise.resolve(init);}\n  }\n  \n  if (p) res.pedal = p;\n  return res;\n}\n\nexport function makeChainOp(ops: Array, p?: number): ChainOp {\n  let res = makeBlankChainOp(p);\n  res.name = \"ch\";\n  for (let o of ops) {\n    res.name += \"-\" + o.name;\n  }\n\n  res.ops = ops;\n  res.perform = (init: PlayerState, ...args) => {\n    let newState = copyState(init);\n    newState.pedal = \"ch\";\n    let d: Draft = init.draft;\n    for (let o of ops) {\n      if (o.op.classifier.type == 'seed') {\n        let base_op = o.op as Op;\n        d = base_op.perform(getDefaultParams(base_op));\n      } else if (o.op.classifier.type == 'pipe') {\n        let base_op = o.op as Op;\n        d = base_op.perform(d, getDefaultParams(base_op));\n      }\n      newState.pedal += \"-\" + o.name;\n    }\n\n    newState.draft = d;\n\n    return Promise.resolve(newState);\n  }\n\n  console.log('op chain: ', res);\n\n  return res;\n}\n\nexport type PedalOpMapping = Array;// & {\n//   [id: number]: PedalAction\n// }\n\nexport type MappingShapes = {\n  'pairing': PairedOp,\n  'chain': ChainOp,\n  'sequencer': OpSequencer\n};\n\nexport type PedalAction = MappingShapes[keyof MappingShapes];\n\nexport type MappingType = 'pairing' | 'chain' | 'sequencer';\n    \n\n\n\n\n\n\n\n\n\n                   \n    \n         results matching \"\"\n        \n    \n    \n        No results matching \"\"\n    \n\n"},"components/ParameterComponent.html":{"url":"components/ParameterComponent.html","title":"component - ParameterComponent","body":"\n                   \n\n\n\n\n\n  Components\n  \n  ParameterComponent\n\n\n\n        \n            Info\n        \n        \n            Source\n        \n        \n            Template\n        \n        \n            Styles\n        \n        \n            DOM Tree\n        \n\n\n\n    \n    File\n\n\n    src/app/mixer/palette/operation/parameter/parameter.component.ts\n\n\n\n\n\n    \n        Implements\n    \n    \n                    OnInit\n    \n\n\n\n    Metadata\n    \n        \n\n\n\n\n\n\n\n\n\n\n\n            \n                selector\n                app-parameter\n            \n\n            \n                styleUrls\n                ./parameter.component.scss\n            \n\n\n\n            \n                templateUrl\n                ./parameter.component.html\n            \n\n\n\n\n\n\n\n\n        \n    \n\n\n    \n    Index\n    \n        \n                \n                    \n                        Properties\n                    \n                \n                \n                    \n                        \n                            \n                                boolparam\n                            \n                            \n                                draftparam\n                            \n                            \n                                fc\n                            \n                            \n                                fileparam\n                            \n                            \n                                name\n                            \n                            \n                                numparam\n                            \n                            \n                                opnode\n                            \n                            \n                                selectparam\n                            \n                            \n                                stringparam\n                            \n                            \n                                    Public\n                                tree\n                            \n                        \n                    \n                \n\n                \n                    \n                        Methods\n                    \n                \n                \n                    \n                        \n                            \n                                handleFile\n                            \n                            \n                                ngOnInit\n                            \n                            \n                                onParamChange\n                            \n                        \n                    \n                \n\n                \n                    \n                        Inputs\n                    \n                \n                \n                    \n                        \n                            \n                                opid\n                            \n                            \n                                param\n                            \n                            \n                                paramid\n                            \n                        \n                    \n                \n\n                \n                    \n                        Outputs\n                    \n                \n                \n                    \n                        \n                            \n                                onFileUpload\n                            \n                            \n                                onOperationParamChange\n                            \n                        \n                    \n                \n\n\n\n        \n    \n\n\n    \n    Constructor\n        \n            \n                \n                    \nconstructor(tree: TreeService)\n                    \n                \n                        \n                            \n                                Defined in src/app/mixer/palette/operation/parameter/parameter.component.ts:41\n                            \n                        \n\n                \n                    \n                            \n                                    Parameters :\n                                    \n                                        \n                                            \n                                                Name\n                                                    Type\n                                                Optional\n                                            \n                                        \n                                        \n                                                \n                                                        tree\n                                                  \n                                                        \n                                                                        TreeService\n                                                        \n                                                  \n                                                    \n                                                            No\n                                                    \n                                                    \n                                                \n                                        \n                                    \n                            \n                    \n                \n            \n        \n\n\n    \n    Inputs\n        \n            \n                \n                    \n                        \n                        opid\n                    \n                \n                \n                    \n                        Type :         number\n\n                    \n                \n                        \n                            \n                                    Defined in src/app/mixer/palette/operation/parameter/parameter.component.ts:30\n                            \n                        \n            \n        \n        \n            \n                \n                    \n                        \n                        param\n                    \n                \n                \n                    \n                        Type :         NumParam | StringParam | SelectParam | BoolParam | FileParam | DraftParam\n\n                    \n                \n                        \n                            \n                                    Defined in src/app/mixer/palette/operation/parameter/parameter.component.ts:28\n                            \n                        \n            \n        \n        \n            \n                \n                    \n                        \n                        paramid\n                    \n                \n                \n                    \n                        Type :         number\n\n                    \n                \n                        \n                            \n                                    Defined in src/app/mixer/palette/operation/parameter/parameter.component.ts:31\n                            \n                        \n            \n        \n\n    \n    Outputs\n        \n            \n                \n                    \n                        \n                        onFileUpload\n                    \n                \n                \n                    \n                        Type :         EventEmitter\n\n                    \n                \n                        \n                            \n                                    Defined in src/app/mixer/palette/operation/parameter/parameter.component.ts:33\n                            \n                        \n            \n        \n        \n            \n                \n                    \n                        \n                        onOperationParamChange\n                    \n                \n                \n                    \n                        Type :         EventEmitter\n\n                    \n                \n                        \n                            \n                                    Defined in src/app/mixer/palette/operation/parameter/parameter.component.ts:32\n                            \n                        \n            \n        \n\n\n\n    \n    \n    \n        Methods\n    \n    \n        \n            \n                \n                    \n                    \n                        handleFile\n                        \n                    \n                \n            \n            \n                \nhandleFile(obj: any)\n                \n            \n\n\n            \n                \n                    Defined in src/app/mixer/palette/operation/parameter/parameter.component.ts:136\n                \n            \n\n\n            \n                \n\n                    \n                        Parameters :\n                        \n                        \n                            \n                                \n                                    Name\n                                    Type\n                                    Optional\n                                \n                            \n                            \n                                \n                                    obj\n                                    \n                                                any\n                                    \n\n                                    \n                                        No\n                                    \n\n\n                                \n                            \n                        \n                    \n                    \n                    \n                    \n                        Returns :         void\n\n                    \n                    \n                        \n                    \n                \n            \n        \n    \n    \n        \n            \n                \n                    \n                    \n                        ngOnInit\n                        \n                    \n                \n            \n            \n                \nngOnInit()\n                \n            \n\n\n            \n                \n                    Defined in src/app/mixer/palette/operation/parameter/parameter.component.ts:47\n                \n            \n\n\n            \n                \n\n                    \n                        Returns :         void\n\n                    \n                \n            \n        \n    \n    \n        \n            \n                \n                    \n                    \n                        onParamChange\n                        \n                    \n                \n            \n            \n                \nonParamChange(value: number)\n                \n            \n\n\n            \n                \n                    Defined in src/app/mixer/palette/operation/parameter/parameter.component.ts:97\n                \n            \n\n\n            \n                \n                    changes the view and updates the tree with the new value\n\n\n                    \n                        Parameters :\n                        \n                        \n                            \n                                \n                                    Name\n                                    Type\n                                    Optional\n                                \n                            \n                            \n                                \n                                    value\n                                    \n                                                number\n                                    \n\n                                    \n                                        No\n                                    \n\n\n                                \n                            \n                        \n                    \n                    \n                    \n                    \n                        Returns :         void\n\n                    \n                    \n                        \n                    \n                \n            \n        \n    \n\n    \n    \n    \n        Properties\n    \n    \n        \n            \n                \n                    \n                    \n                        boolparam\n                        \n                    \n                \n            \n                \n                    \n                        Type :         BoolParam\n\n                    \n                \n                    \n                        \n                                Defined in src/app/mixer/palette/operation/parameter/parameter.component.ts:37\n                        \n                    \n\n\n        \n    \n    \n        \n            \n                \n                    \n                    \n                        draftparam\n                        \n                    \n                \n            \n                \n                    \n                        Type :         DraftParam\n\n                    \n                \n                    \n                        \n                                Defined in src/app/mixer/palette/operation/parameter/parameter.component.ts:41\n                        \n                    \n\n\n        \n    \n    \n        \n            \n                \n                    \n                    \n                        fc\n                        \n                    \n                \n            \n                \n                    \n                        Type :         FormControl\n\n                    \n                \n                    \n                        \n                                Defined in src/app/mixer/palette/operation/parameter/parameter.component.ts:24\n                        \n                    \n\n\n        \n    \n    \n        \n            \n                \n                    \n                    \n                        fileparam\n                        \n                    \n                \n            \n                \n                    \n                        Type :         FileParam\n\n                    \n                \n                    \n                        \n                                Defined in src/app/mixer/palette/operation/parameter/parameter.component.ts:40\n                        \n                    \n\n\n        \n    \n    \n        \n            \n                \n                    \n                    \n                        name\n                        \n                    \n                \n            \n                \n                    \n                        Type :         any\n\n                    \n                \n                    \n                        \n                                Defined in src/app/mixer/palette/operation/parameter/parameter.component.ts:26\n                        \n                    \n\n\n        \n    \n    \n        \n            \n                \n                    \n                    \n                        numparam\n                        \n                    \n                \n            \n                \n                    \n                        Type :         NumParam\n\n                    \n                \n                    \n                        \n                                Defined in src/app/mixer/palette/operation/parameter/parameter.component.ts:36\n                        \n                    \n\n\n        \n    \n    \n        \n            \n                \n                    \n                    \n                        opnode\n                        \n                    \n                \n            \n                \n                    \n                        Type :         OpNode\n\n                    \n                \n                    \n                        \n                                Defined in src/app/mixer/palette/operation/parameter/parameter.component.ts:25\n                        \n                    \n\n\n        \n    \n    \n        \n            \n                \n                    \n                    \n                        selectparam\n                        \n                    \n                \n            \n                \n                    \n                        Type :         SelectParam\n\n                    \n                \n                    \n                        \n                                Defined in src/app/mixer/palette/operation/parameter/parameter.component.ts:39\n                        \n                    \n\n\n        \n    \n    \n        \n            \n                \n                    \n                    \n                        stringparam\n                        \n                    \n                \n            \n                \n                    \n                        Type :         StringParam\n\n                    \n                \n                    \n                        \n                                Defined in src/app/mixer/palette/operation/parameter/parameter.component.ts:38\n                        \n                    \n\n\n        \n    \n    \n        \n            \n                \n                    \n                    \n                            Public\n                        tree\n                        \n                    \n                \n            \n                \n                    \n                        Type :         TreeService\n\n                    \n                \n                    \n                        \n                                Defined in src/app/mixer/palette/operation/parameter/parameter.component.ts:44\n                        \n                    \n\n\n        \n    \n\n\n\n\n\n    \n        import { Component, EventEmitter, Input, OnInit, Output } from '@angular/core';\nimport { AbstractControl, FormControl, FormGroupDirective, NgForm, ValidationErrors, ValidatorFn, Validators } from '@angular/forms';\nimport { BoolParam, DraftParam, FileParam, NumParam, SelectParam, StringParam, OpNode } from '../../../../core/model/datatypes';\nimport {TreeService } from '../../../provider/tree.service';\n\n\nexport function regexValidator(nameRe: RegExp): ValidatorFn {\n  return (control: AbstractControl): ValidationErrors | null => {\n    const globalRegex = new RegExp(nameRe, 'g');\n    const valid =  globalRegex.test(control.value);\n    return !valid ? {forbiddenInput: {value: control.value}} : null;\n  };\n}\n\n\n\n@Component({\n  selector: 'app-parameter',\n  templateUrl: './parameter.component.html',\n  styleUrls: ['./parameter.component.scss']\n})\nexport class ParameterComponent implements OnInit {\n  \n  fc: FormControl;\n  opnode: OpNode;\n  name: any;\n\n  @Input() param:  NumParam | StringParam | SelectParam | BoolParam | FileParam \n  | DraftParam;\n  @Input() opid:  number;\n  @Input() paramid:  number;\n  @Output() onOperationParamChange = new EventEmitter (); \n  @Output() onFileUpload = new EventEmitter (); \n\n  //you need these to access values unique to each type.\n  numparam: NumParam;\n  boolparam: BoolParam;\n  stringparam: StringParam;\n  selectparam: SelectParam;\n  fileparam: FileParam;\n  draftparam: DraftParam;\n\n\n  constructor(public tree: TreeService) { \n  }\n\n  ngOnInit(): void {\n\n    this.opnode = this.tree.getOpNode(this.opid);\n\n     //initalize the form controls for the parameters: \n\n      switch(this.param.type){\n        case 'number':\n          this.numparam =  this.param;\n          this.fc = new FormControl(this.param.value);\n          break;\n\n        case 'boolean':\n          this.boolparam =  this.param;\n          this.fc = new FormControl(this.param.value);\n          break;\n\n        case 'select':\n          \n          this.selectparam =  this.param;\n          this.fc = new FormControl(this.param.value);\n          break;\n\n        case 'file':\n          this.fileparam =  this.param;\n          this.fc = new FormControl(this.param.value);\n          break;\n\n        case 'string':\n          this.stringparam =  this.param;\n          this.fc = new FormControl(this.stringparam.value, [Validators.required, regexValidator((this.param).regex)]);\n          break;\n\n        case 'draft':\n          this.draftparam =  this.param;\n          this.fc = new FormControl(this.draftparam.value);\n          break;\n         \n       \n      }\n  \n\n  }\n\n\n\n  /**\n   * changes the view and updates the tree with the new value\n   * @param value \n   */\n  onParamChange(value: number){\n\n    const opnode: OpNode =  this.tree.getNode(this.opid);\n\n    switch(this.param.type){\n      case 'number': \n        opnode.params[this.paramid] = value;\n        this.fc.setValue(value);\n        this.onOperationParamChange.emit({id: this.paramid, value: value});\n        break;\n\n      case 'boolean':\n        opnode.params[this.paramid] = (value) ? 1 : 0;\n        this.fc.setValue(value);\n        this.onOperationParamChange.emit({id: this.paramid, value: value});\n        break;\n\n      case 'string':\n        opnode.params[this.paramid] = value;\n        this.fc.setValue(value);\n        if(!this.fc.hasError('forbiddenInput'))this.onOperationParamChange.emit({id: this.paramid, value: value});\n        break;\n\n      case 'select':\n        opnode.params[this.paramid] = value;\n        this.fc.setValue(value);\n        this.onOperationParamChange.emit({id: this.paramid, value: value});\n        break;\n\n      case 'draft':\n        opnode.params[this.paramid] = value;\n        this.fc.setValue(value);\n        this.onOperationParamChange.emit({id: this.paramid, value: value});\n        break;\n    }\n\n   \n  }\n\n  handleFile(obj: any){\n    this.fc.setValue(obj.data.name);\n    this.opnode.params[this.paramid] = obj.id;\n    this.onFileUpload.emit({id: obj.id, data: obj.data});\n  }\n\n\n}\n\n    \n\n    \n        \n    \n\n    \n        \n      \n          {{param.name}}\n\n            \n        \n\n\n      \n        \n     \n    -->\n  \n\n  \n    \n\n        {{param.name}}\n\n        \n          \n            {{opt.name}}\n          \n        \n     \n \n\n    \n      \n\n         \n            {{boolparam.truestate}}\n            {{boolparam.falsestate}} \n          \n        \n    \n\n    \n       \n\n         \n            \n        \n\n         \n            \n            \n         \n\n      \n  \n\n    \n\n    \n       \n\n     \n         \n         \n     \n\n   \n\n\n  -->\n\n\n\n    \n       \n      \n        \n     \n\n   \n   -->\n\n\n\n\n\n\n  \n     an input is required \n    \n\n  \n    the current input is not correctly formatted\n     -->\n    \n\n    \n                \n                    ./parameter.component.scss\n                \n                \n\n.param-row{\n    vertical-align:middle;\n    flex-direction: row;\n    text-align: left;\n    width: 100%;\n    margin: 0px 8px;\n\n}\n\n\n.param-name{\n    width: 25%;\n    // overflow: hidden;\n    // font-size: .8em;\n    // line-height: 1.1em;\n}\n\n.param-slider{\n    width: 50%;\n}\n\n.param-select{\n    width: 70%;\n    text-align: left;\n    position: relative;\n    left: 10px;\n}\n\n.param-text{\n    width: 75%;\n    text-align: left;\n    padding: 0px 10px;\n    overflow: hidden;\n}\n\n\n// .param-label{\n//     width: 60px;\n// }\n\n// .param-row input{\n//     width: 60px;\n// }\n\n// .param-row .param-text input{\n//     width: 100%;\n// }\n\n.input-color{\n    width: 30px;\n    height: 30px;\n    border: thin solid white;\n}\n\n\n.param-toggle{\n    width: 70%;\n    text-align: left;\n    position: relative;\n    left: 10px;\n    overflow: hidden;\n}\n\n.param-inputs{\n    min-width: 75%;\n    overflow: visible;\n    text-align: left;\n    margin-left: 6px;\n}\n\n.mat-slider{\n    height: 40px;\n    padding: 0px;\n}\n\n.mat-icon-button{\n    position: relative;\n    top: -9px;\n}\n\nbutton.is-primary.is-active{\n    background-color: rgb(255, 64, 129);\n}\n\n\n.refresh .dirty{\n    color: rgb(255, 64, 129); \n}\n\n.text-err,\n.error{\n    color: red;\n    width: 100%;\n    overflow: hidden;\n    text-align: center;\n    font-size: .8em;\n}\n\n.inputs{\n    display: flex;\n    justify-content: flex-start;\n    text-align: center;\n}\n    \n\n    \n        \n        \n            \n                Legend\n            \n            \n                Html element\n            \n            \n                Component\n            \n            \n                Html element with directive\n            \n        \n    \n\n    \n\n\n\n\n\n\n        var COMPONENT_TEMPLATE = '                                {{param.name}}                                           -->                {{param.name}}                              {{opt.name}}                                                       {{boolparam.truestate}}            {{boolparam.falsestate}}                                                                                                                                                                 -->                                    -->       an input is required           the current input is not correctly formatted     -->'\n    var COMPONENTS = [{'name': 'ConnectionComponent', 'selector': 'app-connection'},{'name': 'DraftdetailComponent', 'selector': 'app-draftdetail'},{'name': 'ImageComponent', 'selector': 'app-image'},{'name': 'InletComponent', 'selector': 'app-inlet'},{'name': 'MixerComponent', 'selector': 'app-mixer'},{'name': 'MixerViewComponent', 'selector': 'app-mixerview'},{'name': 'NoteComponent', 'selector': 'app-note'},{'name': 'OperationComponent', 'selector': 'app-operation'},{'name': 'OpHelpModal', 'selector': 'app-ophelp'},{'name': 'OpsComponent', 'selector': 'app-ops'},{'name': 'OpSequencerComponent', 'selector': 'app-op-sequencer'},{'name': 'PaletteComponent', 'selector': 'app-palette'},{'name': 'ParameterComponent', 'selector': 'app-parameter'},{'name': 'PlayerComponent', 'selector': 'app-player'},{'name': 'SnackbarComponent', 'selector': 'app-snackbar'},{'name': 'SubdraftComponent', 'selector': 'app-subdraft'},{'name': 'VirtualPedalsComponent', 'selector': 'app-virtual-pedals'},{'name': 'WeavingStateComponent', 'selector': 'app-weaving-state'}];\n    var DIRECTIVES = [{'name': 'MarqueeComponent', 'selector': 'app-marquee'},{'name': 'SelectionComponent', 'selector': 'app-selection'}];\n    var ACTUAL_COMPONENT = {'name': 'ParameterComponent'};\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n                   \n    \n         results matching \"\"\n        \n    \n    \n        No results matching \"\"\n    \n\n"},"classes/Params.html":{"url":"classes/Params.html","title":"class - Params","body":"\n                   \n\n\n\n\n\n\n\n\n\n\n\n\n\n  Classes\n  Params\n\n\n\n        \n            Info\n        \n        \n            Source\n        \n\n\n\n    \n        \n            File\n        \n        \n            src/app/mixer/model/operation/params.ts\n        \n\n\n            \n                Description\n            \n            \n                Set of functions to help make OperationParameters\n\n            \n\n\n\n\n            \n    Index\n    \n        \n\n                \n                    \n                        Methods\n                    \n                \n                \n                    \n                        \n                            \n                                    Static\n                                Number\n                            \n                            \n                                    Static\n                                Number\n                            \n                            \n                                    Static\n                                Number\n                            \n                            \n                                    Static\n                                String\n                            \n                            \n                                    Static\n                                String\n                            \n                            \n                                    Static\n                                String\n                            \n                        \n                    \n                \n\n\n\n\n\n        \n    \n\n\n\n\n            \n    \n    \n        Methods\n    \n    \n        \n            \n                \n                    \n                    \n                        Static\n                        Number\n                        \n                    \n                \n            \n            \n                \n                    \n                    Number(name: string, dx: string, value: number, min: number, max: number)\n                \n            \n\n\n            \n                \n                    Defined in src/app/mixer/model/operation/params.ts:106\n                \n            \n\n\n            \n                \n\n                    \n                        Parameters :\n                        \n                        \n                            \n                                \n                                    Name\n                                    Type\n                                    Optional\n                                \n                            \n                            \n                                \n                                    name\n                                    \n                                                string\n                                    \n\n                                    \n                                        No\n                                    \n\n\n                                \n                                \n                                    dx\n                                    \n                                                string\n                                    \n\n                                    \n                                        No\n                                    \n\n\n                                \n                                \n                                    value\n                                    \n                                                number\n                                    \n\n                                    \n                                        No\n                                    \n\n\n                                \n                                \n                                    min\n                                    \n                                                number\n                                    \n\n                                    \n                                        No\n                                    \n\n\n                                \n                                \n                                    max\n                                    \n                                                number\n                                    \n\n                                    \n                                        No\n                                    \n\n\n                                \n                            \n                        \n                    \n                    \n                    \n                    \n                        Returns :         NumParam\n\n                    \n                    \n                        \n                    \n                \n            \n        \n    \n    \n        \n            \n                \n                    \n                    \n                        Static\n                        Number\n                        \n                    \n                \n            \n            \n                \n                    \n                    Number(undefined: literal type)\n                \n            \n\n\n            \n                \n                    Defined in src/app/mixer/model/operation/params.ts:107\n                \n            \n\n\n            \n                \n\n                    \n                        Parameters :\n                        \n                        \n                            \n                                \n                                    Name\n                                    Type\n                                    Optional\n                                \n                            \n                            \n                                \n                                    \n                                            literal type\n                                    \n\n                                    \n                                        No\n                                    \n\n\n                                \n                            \n                        \n                    \n                    \n                    \n                    \n                        Returns :         NumParam\n\n                    \n                    \n                        \n                    \n                \n            \n        \n    \n    \n        \n            \n                \n                    \n                    \n                        Static\n                        Number\n                        \n                    \n                \n            \n            \n                \n                    \n                    Number(objOrName: any, dx?: string, value?: number, min?: number, max?: number)\n                \n            \n\n\n            \n                \n                    Defined in src/app/mixer/model/operation/params.ts:114\n                \n            \n\n\n            \n                \n\n                    \n                        Parameters :\n                        \n                        \n                            \n                                \n                                    Name\n                                    Type\n                                    Optional\n                                \n                            \n                            \n                                \n                                    objOrName\n                                    \n                                                any\n                                    \n\n                                    \n                                        No\n                                    \n\n\n                                \n                                \n                                    dx\n                                    \n                                                string\n                                    \n\n                                    \n                                        Yes\n                                    \n\n\n                                \n                                \n                                    value\n                                    \n                                                number\n                                    \n\n                                    \n                                        Yes\n                                    \n\n\n                                \n                                \n                                    min\n                                    \n                                                number\n                                    \n\n                                    \n                                        Yes\n                                    \n\n\n                                \n                                \n                                    max\n                                    \n                                                number\n                                    \n\n                                    \n                                        Yes\n                                    \n\n\n                                \n                            \n                        \n                    \n                    \n                    \n                    \n                        Returns :     { type: string; name: any; value: any; min: any; max: any; dx: any; }\n\n                    \n                    \n                        \n                    \n                \n            \n        \n    \n    \n        \n            \n                \n                    \n                    \n                        Static\n                        String\n                        \n                    \n                \n            \n            \n                \n                    \n                    String(name: string, dx: string, value: string, regex: RegExp, error: string)\n                \n            \n\n\n            \n                \n                    Defined in src/app/mixer/model/operation/params.ts:125\n                \n            \n\n\n            \n                \n\n                    \n                        Parameters :\n                        \n                        \n                            \n                                \n                                    Name\n                                    Type\n                                    Optional\n                                \n                            \n                            \n                                \n                                    name\n                                    \n                                                string\n                                    \n\n                                    \n                                        No\n                                    \n\n\n                                \n                                \n                                    dx\n                                    \n                                                string\n                                    \n\n                                    \n                                        No\n                                    \n\n\n                                \n                                \n                                    value\n                                    \n                                                string\n                                    \n\n                                    \n                                        No\n                                    \n\n\n                                \n                                \n                                    regex\n                                    \n                                            RegExp\n                                    \n\n                                    \n                                        No\n                                    \n\n\n                                \n                                \n                                    error\n                                    \n                                                string\n                                    \n\n                                    \n                                        No\n                                    \n\n\n                                \n                            \n                        \n                    \n                    \n                    \n                    \n                        Returns :         StringParam\n\n                    \n                    \n                        \n                    \n                \n            \n        \n    \n    \n        \n            \n                \n                    \n                    \n                        Static\n                        String\n                        \n                    \n                \n            \n            \n                \n                    \n                    String(undefined: literal type)\n                \n            \n\n\n            \n                \n                    Defined in src/app/mixer/model/operation/params.ts:126\n                \n            \n\n\n            \n                \n\n                    \n                        Parameters :\n                        \n                        \n                            \n                                \n                                    Name\n                                    Type\n                                    Optional\n                                \n                            \n                            \n                                \n                                    \n                                            literal type\n                                    \n\n                                    \n                                        No\n                                    \n\n\n                                \n                            \n                        \n                    \n                    \n                    \n                    \n                        Returns :         StringParam\n\n                    \n                    \n                        \n                    \n                \n            \n        \n    \n    \n        \n            \n                \n                    \n                    \n                        Static\n                        String\n                        \n                    \n                \n            \n            \n                \n                    \n                    String(objOrName: any, dx?: string, value?: string, regex?: RegExp, error?: string)\n                \n            \n\n\n            \n                \n                    Defined in src/app/mixer/model/operation/params.ts:133\n                \n            \n\n\n            \n                \n\n                    \n                        Parameters :\n                        \n                        \n                            \n                                \n                                    Name\n                                    Type\n                                    Optional\n                                \n                            \n                            \n                                \n                                    objOrName\n                                    \n                                                any\n                                    \n\n                                    \n                                        No\n                                    \n\n\n                                \n                                \n                                    dx\n                                    \n                                                string\n                                    \n\n                                    \n                                        Yes\n                                    \n\n\n                                \n                                \n                                    value\n                                    \n                                                string\n                                    \n\n                                    \n                                        Yes\n                                    \n\n\n                                \n                                \n                                    regex\n                                    \n                                            RegExp\n                                    \n\n                                    \n                                        Yes\n                                    \n\n\n                                \n                                \n                                    error\n                                    \n                                                string\n                                    \n\n                                    \n                                        Yes\n                                    \n\n\n                                \n                            \n                        \n                    \n                    \n                    \n                    \n                        Returns :     { type: string; name: any; value: any; regex: any; error: any; dx: any; }\n\n                    \n                    \n                        \n                    \n                \n            \n        \n    \n\n\n\n\n\n\n    \n\n\n    \n        export interface OperationParam {\n  name: string,\n  dx: string,\n  type: 'number' | 'boolean' | 'select' | 'file' | 'string' | 'draft',\n  value: number | boolean | string | null,\n}\n\nexport type ParamType = OperationParam[\"type\"];\nexport type ParamValue = OperationParam[\"value\"];\n  \n/**\n * An extension of Param that handles extra requirements for numeric data inputs\n * @param min the minimum allowable value\n * @param max the maximum allowable value\n */\nexport type NumParam = OperationParam & {\n  type: 'number',\n  value: number,\n  min: number,\n  max: number\n}\n  \n/**\n * An extension of Param that handles extra requirements for select list  inputs\n * @param selectlist an array of names and values from which the user can select\n */\nexport type SelectParam = OperationParam & {\n  type: 'select',\n  value: number,\n  selectlist: Array,\n  default?: number\n}\n  \n/**\n * An extension of Param that handles extra requirements for select boolean inputs\n * @param falsestate a description for the user explaining what \"false\" means in this param\n * @param truestate a description for the user explaining what \"false\" means in this param\n */\nexport type BoolParam = OperationParam & {\n  type: 'boolean',\n  value: boolean | number,\n  falsestate: string,\n  truestate: string,\n  default?: boolean | number\n}\n  \n/**\n * An extension of Param that handles extra requirements for strings as inputs\n * @param regex strings must come with a regex used to validate their structure\n * test and make regex using RegEx101 website\n * do not use global (g) flag, as it creates unpredictable results in test functions used to validate inputs\n @param error the error message to show the user if the string is invalid \n */\nexport type StringParam = OperationParam & {\n  type: 'string',\n  value: string,\n  regex: RegExp,\n  error: string\n}\n  \n/**\n* An extension of Param that handles extra requirements for select file inputs\n* Currently a placeholder should extra data be required. \n*/\nexport type FileParam = OperationParam & {\n  type: 'file'\n}\n  \n/**\n* UNUSED -- if you want another draft input on an operation, add another inlet\n* An extension of Param that handles extra requirements for select drafts as inputs\n* @param id draft id at this parameter --- DON'T USE\n*/\nexport type DraftParam = OperationParam & {\n  id: number,\n  type: 'draft'\n}\n\nexport type GenericParam = OperationParam & {\n  value: Type,\n  default?: Type,\n  new (v: Type): GenericParam,\n}\n\n/**\n * Utility function to extract values from an array of Params\n * @param input Array of OperationParams, any type\n * @returns Array of ParamValues\n */\nexport function getParamValues(input: Array): Array {\n  return input.map((param) => param.value);\n}\n\n/**\n * Set of functions to help make OperationParameters\n */\nexport class Params {\n  static Number(name: string, dx: string, value: number, min: number, max: number): NumParam;\n  static Number({ name, dx, value, min, max }: \n    { name: string; \n      dx: string; \n      value: number; \n      min: number; \n      max: number; }\n  ): NumParam;\n  static Number(objOrName: any, dx?: string, value?: number, min?: number, max?: number) {\n    if (dx) {\n      return { type: 'number', name: objOrName, value: value, min: min, max: max, dx: dx };\n    } else {\n      return { \n        type: 'number', name: objOrName.name, value: objOrName.value,\n        min: objOrName.min, max: objOrName.max, dx: objOrName.dx \n      };\n    }\n  }\n\n  static String(name: string, dx: string, value: string, regex: RegExp, error: string): StringParam;\n  static String({ name, dx, value, regex, error }:\n    { name: string;\n      dx: string;\n      value: string;\n      regex: RegExp;\n      error: string; }\n  ): StringParam;\n  static String(objOrName: any, dx?: string, value?: string, regex?: RegExp, error?: string) {\n    if (dx) {\n      return { type: 'string', name: objOrName, dx: dx, value: value, regex: regex, error: error };\n    } else {\n      return {\n        type: 'string', name: objOrName.name, value: objOrName.value,\n        regex: objOrName.regex, error: objOrName.error, dx: objOrName.dx \n      };\n    }\n  }\n\n  // static Bool(\n\n  // ): BoolParam {\n\n  // }\n\n}\n    \n\n\n\n\n\n\n\n\n\n\n                   \n    \n         results matching \"\"\n        \n    \n    \n        No results matching \"\"\n    \n\n"},"interfaces/Pedal.html":{"url":"interfaces/Pedal.html","title":"interface - Pedal","body":"\n                   \n\n\n\n\n\n\n\n\n\n\n\n\n\n\n  Interfaces\n  \n  Pedal\n\n\n\n        \n            Info\n        \n        \n            Source\n        \n\n\n\n    \n        \n            File\n        \n        \n            src/app/player/provider/pedals.service.ts\n        \n\n\n            \n                Description\n            \n            \n                The Pedals service is in charge of updating the database\nconnections to communicate with the loom hardware. In AdaCAD,\nits main responsibility is to keep an up-to-date list of the pedals\nand when they get stepped on; as well as any other hardware\nstatuses.\n\n            \n\n\n        \n            Index\n            \n                \n                    \n                        \n                            Properties\n                        \n                    \n                    \n                        \n                            \n                                \n                                        \n                                            dbnode\n                                        \n                                \n                                \n                                        \n                                            id\n                                        \n                                \n                                \n                                        \n                                            key\n                                        \n                                \n                                \n                                        \n                                            name\n                                        \n                                \n                                \n                                        \n                                            state\n                                        \n                                \n                                \n                                            Optional\n                                        \n                                            u_name\n                                        \n                                \n                            \n                        \n                    \n                \n            \n        \n\n\n\n            \n                Properties\n                    \n                        \n                                \n                                    \n                                        \n                                        dbnode\n                                            \n                                                \n                                            \n                                        \n                                    \n                                \n                                \n                                    \n                                        dbnode:     DBListener | DBTwoWay\n\n                                    \n                                \n\n\n                                    \n                                        \n                                            Type :     DBListener | DBTwoWay\n\n                                        \n                                    \n\n\n\n\n\n                        \n                    \n                    \n                        \n                                \n                                    \n                                        \n                                        id\n                                            \n                                                \n                                            \n                                        \n                                    \n                                \n                                \n                                    \n                                        id:         number\n\n                                    \n                                \n\n\n                                    \n                                        \n                                            Type :         number\n\n                                        \n                                    \n\n\n\n\n\n                        \n                    \n                    \n                        \n                                \n                                    \n                                        \n                                        key\n                                            \n                                                \n                                            \n                                        \n                                    \n                                \n                                \n                                    \n                                        key:         string\n\n                                    \n                                \n\n\n                                    \n                                        \n                                            Type :         string\n\n                                        \n                                    \n\n\n\n\n\n                        \n                    \n                    \n                        \n                                \n                                    \n                                        \n                                        name\n                                            \n                                                \n                                            \n                                        \n                                    \n                                \n                                \n                                    \n                                        name:         string\n\n                                    \n                                \n\n\n                                    \n                                        \n                                            Type :         string\n\n                                        \n                                    \n\n\n\n\n\n                        \n                    \n                    \n                        \n                                \n                                    \n                                        \n                                        state\n                                            \n                                                \n                                            \n                                        \n                                    \n                                \n                                \n                                    \n                                        state:         any\n\n                                    \n                                \n\n\n                                    \n                                        \n                                            Type :         any\n\n                                        \n                                    \n\n\n\n\n\n                        \n                    \n                    \n                        \n                                \n                                    \n                                        \n                                        u_name\n                                            \n                                                \n                                            \n                                        \n                                    \n                                \n                                \n                                    \n                                        u_name:         string\n\n                                    \n                                \n\n\n                                    \n                                        \n                                            Type :         string\n\n                                        \n                                    \n\n                                    \n                                        \n                                            Optional\n                                        \n                                    \n\n\n\n\n                        \n                    \n            \n    \n\n\n    \n        import { Injectable } from '@angular/core';\nimport { WeavingPick } from '../model/player';\nimport { EventEmitter } from 'events';\nimport { getDatabase } from \"firebase/database\";\nimport { Database } from '@angular/fire/database';\nimport { NodeParams,\n  DBListener, OnlineStatus, DBWriter, \n  DBListenerArray, DBTwoWayArray, DBTwoWay } from '../model/dbnodes';\n\n/**\n * The Pedals service is in charge of updating the database \n * connections to communicate with the loom hardware. In AdaCAD, \n * its main responsibility is to keep an up-to-date list of the pedals\n * and when they get stepped on; as well as any other hardware \n * statuses.\n */\n\nexport interface Pedal {\n  id: number,\n  name: string,\n  u_name?: string,\n  key: string,\n  dbnode: DBListener | DBTwoWay,\n  state: any,\n  // op?: Operation\n}\n\n/** \n * Just a wrapper for how the database arranges the pedals + \n * loom information into nodes\n */\nexport class PedalStatus extends EventEmitter {\n  pi_online: OnlineStatus;     // is the pi online?\n  loom_online: DBListener;   // is the loom online?\n  vacuum_on: DBListener;     // is the loom running? (vacuum pump running)\n  loom_ready: DBListener;\n\n  active_draft: DBWriter;\n  num_picks: DBWriter;\n  pick_data: DBWriter;\n\n  num_pedals: DBListener;\n  pedal_states: DBListener;\n  pedal_array: DBListenerArray;\n\n  num_v_pedals: DBTwoWay;\n  v_pedal_states: DBTwoWay;\n  v_pedal_array: DBTwoWayArray;\n\n  constructor(db: Database) {\n    super();\n    const defaults = {\n      active_draft: false,\n      num_picks: 0,\n      pick_data: false\n    }\n    const listeners = {\n      // pi_online: 'pi-online',\n      loom_online: 'loom-online',\n      vacuum_on: 'vacuum-on',\n      num_pedals: 'num-pedals',\n      pedal_states: 'pedal-states',\n      loom_ready: 'loom-ready'\n    }\n    const writers = {\n      active_draft: 'active-draft',\n      num_picks: 'num-picks',\n      pick_data: 'pick-data'\n    }\n\n    function params(path: string): NodeParams { \n      return { db: db, root: 'pedals/', path: path };\n    };\n\n    this.pi_online = new OnlineStatus(params('pi-online'));\n    // this.pi_online.attach();\n    // this.loom_online = new DBListener(this.db, 'loom-online');\n\n    for (var l in listeners) {\n      const newL = new DBListener(params(listeners[l]));\n      Object.defineProperty(this, l, { value: newL });\n      // this[l].attach();\n    }\n\n    for (var w in writers) {\n      const newW = new DBWriter({...params(writers[w]), initVal: defaults[w]});\n      // console.log('writer created');\n      Object.defineProperty(this, w, { value: newW });\n      // console.log('writer added to status');\n      this[w].attach();\n      // console.log('writer attached');\n      this[w].setVal(defaults[w]);\n    }\n\n    // set up array of pedal listeners with the length and parent nodes\n    this.pedal_array = new DBListenerArray(this.num_pedals, this.pedal_states);\n\n    // set up virtual pedal nodes, which have their own length\n    // and parent nodes\n    this.num_v_pedals = new DBTwoWay(params('num-v-pedals'));\n    this.v_pedal_states = new DBTwoWay(params('v-pedal-states'));\n    this.v_pedal_array = new DBTwoWayArray(this.num_v_pedals, this.v_pedal_states);\n  }\n\n  toString() {\n    var str = \"\";\n    str += \"'pi-online': \" + this.pi_online.val + \"\\n\";\n    str += \"'loom-online': \" + this.loom_online.val + \"\\n\\n\";\n    str += \"'vacuum-on': \" + this.vacuum_on.val + \"\\n\";\n    str += \"'active-draft': \" + this.active_draft.val + \"\\n\";\n    str += \"'num-pedals': \" + this.num_pedals.val + \"\\n\";\n    return str;\n  }\n}\n\n/**\n * Definition of pedal service\n * @class\n * @event `pedal-added` data: how many pedals\n * @event `pedal-removed` data: how many pedals\n * @event `pedal-step` data: which pedal\n */\n@Injectable({\n  providedIn: 'root'\n})\nexport class PedalsService extends EventEmitter {\n\n  db: Database;\n  dbNodes: Array;\n\n  // status data\n  status: PedalStatus;\n  //  default = {\n  //     pi_online: false,     // is the pi online?\n  //     loom_online: false,   // is the loom online?\n  //     vacuum_on: false,     // is the loom running? (vacuum pump running)\n  //     active_draft: false,\n  //     num_pedals: 0,\n  //     pedal_states: {},\n  //     loom_ready: false     // is the loom requesting a draft row?\n  // };\n  p_pedals: Array = [];\n  v_pedals: Array = [];\n  \n  virtual: boolean = true;  // whether to mix virtual pedals in with the regular pedals array;\n\n  get pedals() { return this.p_pedals.concat(this.v_pedals); }\n\n  constructor() { \n    super();\n    // init: start listening to changes in Firebase DB from the Pi\n    console.log(\"pedals service constructor\");\n    this.db = getDatabase();\n    this.status = new PedalStatus(this.db);\n    // console.log(this.status);\n    \n    // if pi_online = \"true\" at start-up, just make sure\n    console.log(\"are you alive?\");\n    this.pi_online.checkAlive();\n    this.loom_online.attach();\n\n    this.virtualPedals(true);\n    this.loomPedals(false);\n\n    // listens for changes in pi online status\n    // if online, enable everything\n    this.pi_online.on('change', (state) =>\n      this.loomPedals(state));\n\n    // other listeners\n    this.loom_online.on('change', (state) => \n      this.loomListeners(state));\n\n    /** pedal array listeners */\n    this.p_pedal_array.on('ready', (state) => \n      this.weavingWriters(state)\n    );\n\n    this.p_pedal_array.on('child-added', (newNode) => {\n      console.log('pedals service: pedal added');\n      this.p_pedals.push(this.nodeToPedal(newNode));\n      this.v_pedals.map((el) => { el.id += 1; });\n      this.emit('pedal-added', this.p_pedals.length);\n    });\n\n    this.p_pedal_array.on('child-removed', () => {\n      this.p_pedals.pop();\n      this.v_pedals.map((el) => { el.id -= 1; });\n      this.emit('pedal-removed', this.p_pedals.length);\n    });\n\n    this.p_pedal_array.on('child-change', (e) => {\n      this.p_pedals[e.id].state = e.val;\n      this.emit('pedal-step', e.id);\n      // e = {id: which pedal's id, val: pedal state}\n      // call pedal.execute or whatever it ends up being\n      // this.player.onPedal(e.id, e.val);\n    });\n\n    /** @todo */\n    this.loom_ready.on('change', (state) => {\n      if (state) {\n        // send the next weaving row to DB\n        // update num_picks and pick_data accordingly\n      }\n    });\n    \n    /** virtual pedal listeners */\n    this.v_pedal_array.on('ready', (state) => {\n      console.log(\"weaving writers \", state);\n      this.weavingWriters(state);\n    });\n\n    this.v_pedal_array.on('child-added', (newNode) => {\n      console.log('pedals service: virtual pedal added');\n      let v = this.nodeToPedal(newNode);\n      v.id += this.p_pedals.length - (this.p_pedals.length ? 1 : 0);\n      this.v_pedals.push(v);\n      this.emit('pedal-added', this.v_pedals.length);\n    })\n\n    this.v_pedal_array.on('child-removed', () => {\n      this.v_pedals.pop();\n      this.emit('pedal-removed', this.v_pedals.length);\n    })\n\n    this.v_pedal_array.on('child-change', (e) => {\n      this.v_pedals[e.id].state = e.val;\n      this.emit('pedal-step', e.id);\n      // e = {id: which pedal's id, val: pedal state}\n      // call pedal.execute or whatever it ends up being\n      // this.player.onPedal(e.id, e.val);\n    });\n  }\n\n  /** online status */\n  get pi_online() { return this.status.pi_online; }\n  get loom_online() { return this.status.loom_online; }\n\n  /** weaving statuses */\n  get vacuum_on() { return this.status.vacuum_on; }\n  get active_draft() { return this.status.active_draft; }\n  get loom_ready() { return this.status.loom_ready; }\n  get num_picks() { return this.status.num_picks; }\n  get pick_data() { return this.status.pick_data; }\n\n  /** physical pedals DB nodes */\n  get num_pedals() { return this.status.num_pedals; }\n  get pedal_states() { return this.status.pedal_states; }\n  get p_pedal_array() { return this.status.pedal_array; }\n\n  /** virtual pedals DB nodes */\n  get num_v_pedals() { return this.status.num_v_pedals; }\n  get v_pedal_states() { return this.status.v_pedal_states; }\n  get v_pedal_array() { return this.status.v_pedal_array; }\n  \n  get readyToWeave() { return (this.loom_online.val && (this.p_pedal_array.ready || this.v_pedal_array.ready)); }\n\n  // attach all listeners to other values in DB\n  loomPedals(state: boolean) {\n    state ? this.p_pedal_array.attach() : this.p_pedal_array.detach();\n  }\n\n  /** functions to interact with virtual pedals */\n\n  virtualPedals(state: boolean) {\n    state? this.v_pedal_array.attach() : this.v_pedal_array.detach();\n  }\n\n  addVPedal() {\n    this.v_pedal_array.addNode(false);\n  }\n\n  togglePedalByID(id: number) {\n    console.log(\"toggling virtual pedal \", id);\n    if (id >= 0 && id \n    \n\n\n\n\n\n\n\n\n\n                   \n    \n         results matching \"\"\n        \n    \n    \n        No results matching \"\"\n    \n\n"},"classes/PedalConfig.html":{"url":"classes/PedalConfig.html","title":"class - PedalConfig","body":"\n                   \n\n\n\n\n\n\n\n\n\n\n\n\n\n  Classes\n  PedalConfig\n\n\n\n        \n            Info\n        \n        \n            Source\n        \n\n\n\n    \n        \n            File\n        \n        \n            src/app/player/player.service.ts\n        \n\n\n            \n                Description\n            \n            \n                Represents a set of two-way bindings between a set of Pedals\nand a set of (Player)Operations. A pedal can only be bound to one\nAction (a single Op, a chain of Ops, or to control an OpRoulette)\nget bound to a sequence of operations.\n\n            \n\n\n\n\n            \n    Index\n    \n        \n                \n                    \n                        Properties\n                    \n                \n                \n                    \n                        \n                            \n                                availPedals\n                            \n                            \n                                mapping\n                            \n                            \n                                ops\n                            \n                            \n                                pedals\n                            \n                        \n                    \n                \n\n                \n                    \n                        Methods\n                    \n                \n                \n                    \n                        \n                            \n                                addOperation\n                            \n                            \n                                addPedal\n                            \n                            \n                                chain\n                            \n                            \n                                chainToPedal\n                            \n                            \n                                opIsMapped\n                            \n                            \n                                pair\n                            \n                            \n                                pedalIsChained\n                            \n                            \n                                pedalIsMapped\n                            \n                            \n                                pedalIsPaired\n                            \n                            \n                                remPedal\n                            \n                            \n                                unpairPedal\n                            \n                        \n                    \n                \n\n\n\n\n\n                    \n                        \n                            Accessors\n                        \n                    \n                    \n                        \n                            \n                                \n                                    numPedals\n                                \n                                \n                                    numMappings\n                                \n                            \n                        \n                    \n        \n    \n\n\n            \n    Constructor\n        \n            \n                \n                    \nconstructor(pedalArray: Array, loadConfig)\n                    \n                \n                        \n                            \n                                Defined in src/app/player/player.service.ts:47\n                            \n                        \n\n                \n                    \n                            \n                                    Parameters :\n                                    \n                                        \n                                            \n                                                Name\n                                                    Type\n                                                Optional\n                                            \n                                        \n                                        \n                                                \n                                                        pedalArray\n                                                  \n                                                        \n                                                                        Array\n                                                        \n                                                  \n                                                    \n                                                            No\n                                                    \n                                                    \n                                                \n                                                \n                                                        loadConfig\n                                                  \n                                                        \n                                                        \n                                                  \n                                                    \n                                                            No\n                                                    \n                                                    \n                                                \n                                        \n                                    \n                            \n                    \n                \n            \n        \n\n\n            \n    \n    \n        Properties\n    \n    \n        \n            \n                \n                    \n                    \n                        availPedals\n                        \n                    \n                \n            \n                \n                    \n                        Type :     Array\n\n                    \n                \n                    \n                        \n                                Defined in src/app/player/player.service.ts:46\n                        \n                    \n\n\n        \n    \n    \n        \n            \n                \n                    \n                    \n                        mapping\n                        \n                    \n                \n            \n                \n                    \n                        Type :         PedalOpMapping\n\n                    \n                \n                    \n                        \n                                Defined in src/app/player/player.service.ts:47\n                        \n                    \n\n\n        \n    \n    \n        \n            \n                \n                    \n                    \n                        ops\n                        \n                    \n                \n            \n                \n                    \n                        Type :         Array\n\n                    \n                \n                    \n                        \n                                Defined in src/app/player/player.service.ts:45\n                        \n                    \n\n\n        \n    \n    \n        \n            \n                \n                    \n                    \n                        pedals\n                        \n                    \n                \n            \n                \n                    \n                        Type :         Array\n\n                    \n                \n                    \n                        \n                                Defined in src/app/player/player.service.ts:44\n                        \n                    \n\n\n        \n    \n\n\n            \n    \n    \n        Methods\n    \n    \n        \n            \n                \n                    \n                    \n                        addOperation\n                        \n                    \n                \n            \n            \n                \naddOperation(o: PlayerOp, chain?: boolean)\n                \n            \n\n\n            \n                \n                    Defined in src/app/player/player.service.ts:74\n                \n            \n\n\n            \n                \n\n                    \n                        Parameters :\n                        \n                        \n                            \n                                \n                                    Name\n                                    Type\n                                    Optional\n                                \n                            \n                            \n                                \n                                    o\n                                    \n                                                PlayerOp\n                                    \n\n                                    \n                                        No\n                                    \n\n\n                                \n                                \n                                    chain\n                                    \n                                                boolean\n                                    \n\n                                    \n                                        Yes\n                                    \n\n\n                                \n                            \n                        \n                    \n                    \n                    \n                    \n                        Returns :         void\n\n                    \n                    \n                        \n                    \n                \n            \n        \n    \n    \n        \n            \n                \n                    \n                    \n                        addPedal\n                        \n                    \n                \n            \n            \n                \naddPedal(p: Pedal)\n                \n            \n\n\n            \n                \n                    Defined in src/app/player/player.service.ts:64\n                \n            \n\n\n            \n                \n\n                    \n                        Parameters :\n                        \n                        \n                            \n                                \n                                    Name\n                                    Type\n                                    Optional\n                                \n                            \n                            \n                                \n                                    p\n                                    \n                                                Pedal\n                                    \n\n                                    \n                                        No\n                                    \n\n\n                                \n                            \n                        \n                    \n                    \n                    \n                    \n                        Returns :         void\n\n                    \n                    \n                        \n                    \n                \n            \n        \n    \n    \n        \n            \n                \n                    \n                    \n                        chain\n                        \n                    \n                \n            \n            \n                \nchain(pedalId: number, opName: string)\n                \n            \n\n\n            \n                \n                    Defined in src/app/player/player.service.ts:91\n                \n            \n\n\n            \n                \n\n                    \n                        Parameters :\n                        \n                        \n                            \n                                \n                                    Name\n                                    Type\n                                    Optional\n                                \n                            \n                            \n                                \n                                    pedalId\n                                    \n                                                number\n                                    \n\n                                    \n                                        No\n                                    \n\n\n                                \n                                \n                                    opName\n                                    \n                                                string\n                                    \n\n                                    \n                                        No\n                                    \n\n\n                                \n                            \n                        \n                    \n                    \n                    \n                    \n                        Returns :         void\n\n                    \n                    \n                        \n                    \n                \n            \n        \n    \n    \n        \n            \n                \n                    \n                    \n                        chainToPedal\n                        \n                    \n                \n            \n            \n                \nchainToPedal(pedalId: number, ops: Array)\n                \n            \n\n\n            \n                \n                    Defined in src/app/player/player.service.ts:104\n                \n            \n\n\n            \n                \n\n                    \n                        Parameters :\n                        \n                        \n                            \n                                \n                                    Name\n                                    Type\n                                    Optional\n                                \n                            \n                            \n                                \n                                    pedalId\n                                    \n                                                number\n                                    \n\n                                    \n                                        No\n                                    \n\n\n                                \n                                \n                                    ops\n                                    \n                                            Array\n                                    \n\n                                    \n                                        No\n                                    \n\n\n                                \n                            \n                        \n                    \n                    \n                    \n                    \n                        Returns :         void\n\n                    \n                    \n                        \n                    \n                \n            \n        \n    \n    \n        \n            \n                \n                    \n                    \n                        opIsMapped\n                        \n                    \n                \n            \n            \n                \nopIsMapped(opName: string)\n                \n            \n\n\n            \n                \n                    Defined in src/app/player/player.service.ts:121\n                \n            \n\n\n            \n                \n\n                    \n                        Parameters :\n                        \n                        \n                            \n                                \n                                    Name\n                                    Type\n                                    Optional\n                                \n                            \n                            \n                                \n                                    opName\n                                    \n                                                string\n                                    \n\n                                    \n                                        No\n                                    \n\n\n                                \n                            \n                        \n                    \n                    \n                    \n                    \n                        Returns :         boolean\n\n                    \n                    \n                        \n                    \n                \n            \n        \n    \n    \n        \n            \n                \n                    \n                    \n                        pair\n                        \n                    \n                \n            \n            \n                \npair(pedalId: number, opName: string)\n                \n            \n\n\n            \n                \n                    Defined in src/app/player/player.service.ts:84\n                \n            \n\n\n            \n                \n\n                    \n                        Parameters :\n                        \n                        \n                            \n                                \n                                    Name\n                                    Type\n                                    Optional\n                                \n                            \n                            \n                                \n                                    pedalId\n                                    \n                                                number\n                                    \n\n                                    \n                                        No\n                                    \n\n\n                                \n                                \n                                    opName\n                                    \n                                                string\n                                    \n\n                                    \n                                        No\n                                    \n\n\n                                \n                            \n                        \n                    \n                    \n                    \n                    \n                        Returns :         void\n\n                    \n                    \n                        \n                    \n                \n            \n        \n    \n    \n        \n            \n                \n                    \n                    \n                        pedalIsChained\n                        \n                    \n                \n            \n            \n                \npedalIsChained(id: number)\n                \n            \n\n\n            \n                \n                    Defined in src/app/player/player.service.ts:131\n                \n            \n\n\n            \n                \n\n                    \n                        Parameters :\n                        \n                        \n                            \n                                \n                                    Name\n                                    Type\n                                    Optional\n                                \n                            \n                            \n                                \n                                    id\n                                    \n                                                number\n                                    \n\n                                    \n                                        No\n                                    \n\n\n                                \n                            \n                        \n                    \n                    \n                    \n                    \n                        Returns :         boolean\n\n                    \n                    \n                        \n                    \n                \n            \n        \n    \n    \n        \n            \n                \n                    \n                    \n                        pedalIsMapped\n                        \n                    \n                \n            \n            \n                \npedalIsMapped(id: number)\n                \n            \n\n\n            \n                \n                    Defined in src/app/player/player.service.ts:127\n                \n            \n\n\n            \n                \n\n                    \n                        Parameters :\n                        \n                        \n                            \n                                \n                                    Name\n                                    Type\n                                    Optional\n                                \n                            \n                            \n                                \n                                    id\n                                    \n                                                number\n                                    \n\n                                    \n                                        No\n                                    \n\n\n                                \n                            \n                        \n                    \n                    \n                    \n                    \n                        Returns :         PedalOpMapping\n\n                    \n                    \n                        \n                    \n                \n            \n        \n    \n    \n        \n            \n                \n                    \n                    \n                        pedalIsPaired\n                        \n                    \n                \n            \n            \n                \npedalIsPaired(id: number)\n                \n            \n\n\n            \n                \n                    Defined in src/app/player/player.service.ts:136\n                \n            \n\n\n            \n                \n\n                    \n                        Parameters :\n                        \n                        \n                            \n                                \n                                    Name\n                                    Type\n                                    Optional\n                                \n                            \n                            \n                                \n                                    id\n                                    \n                                                number\n                                    \n\n                                    \n                                        No\n                                    \n\n\n                                \n                            \n                        \n                    \n                    \n                    \n                    \n                        Returns :         boolean\n\n                    \n                    \n                        \n                    \n                \n            \n        \n    \n    \n        \n            \n                \n                    \n                    \n                        remPedal\n                        \n                    \n                \n            \n            \n                \nremPedal()\n                \n            \n\n\n            \n                \n                    Defined in src/app/player/player.service.ts:69\n                \n            \n\n\n            \n                \n\n                    \n                        Returns :         void\n\n                    \n                \n            \n        \n    \n    \n        \n            \n                \n                    \n                    \n                        unpairPedal\n                        \n                    \n                \n            \n            \n                \nunpairPedal(id: number)\n                \n            \n\n\n            \n                \n                    Defined in src/app/player/player.service.ts:140\n                \n            \n\n\n            \n                \n\n                    \n                        Parameters :\n                        \n                        \n                            \n                                \n                                    Name\n                                    Type\n                                    Optional\n                                \n                            \n                            \n                                \n                                    id\n                                    \n                                                number\n                                    \n\n                                    \n                                        No\n                                    \n\n\n                                \n                            \n                        \n                    \n                    \n                    \n                    \n                        Returns :         void\n\n                    \n                    \n                        \n                    \n                \n            \n        \n    \n\n\n\n\n\n\n            \n    \n        Accessors\n    \n        \n            \n                \n                    \n                        \n                        numPedals\n                    \n                \n\n                \n                    \n                        getnumPedals()\n                    \n                \n                            \n                                \n                                    Defined in src/app/player/player.service.ts:56\n                                \n                            \n\n            \n        \n        \n            \n                \n                    \n                        \n                        numMappings\n                    \n                \n\n                \n                    \n                        getnumMappings()\n                    \n                \n                            \n                                \n                                    Defined in src/app/player/player.service.ts:60\n                                \n                            \n\n            \n        \n\n    \n\n\n    \n        import { Injectable} from '@angular/core';\nimport { EventEmitter } from 'events';\nimport { wefts } from '../core/model/drafts';\nimport { Draft } from '../core/model/datatypes';\nimport { BaseOp, BuildableOperation as GenericOp, \n  TreeOperation as TreeOp,\n  Seed, Pipe, DraftsOptional, AllRequired, getDefaultParams,\n  SingleInlet, OpInput\n} from '../mixer/model/operation';\nimport * as defs from '../mixer/model/op_definitions';\nimport { PlayerOp, playerOpFrom, \n  ChainOp, OpSequencer, PairedOp, PedalOpMapping,\n  makePairedOp, makeChainOp, makeOpSequencer,\n  forward, refresh, reverse\n} from './model/op_mappings';\nimport { PlayerState, WeavingPick, copyState, initState } from './model/state';\nimport { MappingsService } from './provider/mappings.service';\nimport { PedalsService, PedalStatus, Pedal } from './provider/pedals.service';\nimport { SequencerService } from './provider/sequencer.service';\n// import { OperationService } from '../mixer/provider/operation.service';\n\nexport interface DraftOperationClassification {\n  category: string,\n  dx: string,\n  ops: Array \n }\n\ninterface LoomConfig {\n  warps: number,\n  draftTiling: boolean\n}\n\n/**\n * @class PedalConfig\n * @desc OLD, UPDATE THIS ---> \n * Represents a set of two-way bindings between a set of Pedals\n * and a set of (Player)Operations. A pedal can only be bound to one\n * Action (a single Op, a chain of Ops, or to control an OpRoulette)\n * @todo The second restriction may change, it might make sense for pedals to\n * get bound to a sequence of operations.\n */\nclass PedalConfig {\n  // numPedals: number;\n  pedals: Array;\n  ops: Array;\n  availPedals: Array;\n  mapping: PedalOpMapping;\n\n  constructor(pedalArray: Array, loadConfig = false) {\n    this.pedals = pedalArray;\n    this.ops = []\n    this.availPedals = pedalArray.map((p) => p.id);\n    this.mapping = [];\n  }\n\n  get numPedals() {\n    return this.pedals.length;\n  }\n\n  get numMappings() {\n    return Object.entries(this.mapping).length;\n  }\n\n  addPedal(p: Pedal) {\n    // this.pedals.push(p);\n    this.availPedals.push(p.id);\n  }\n\n  remPedal() {\n    // this.pedals.pop();\n    this.availPedals.filter((id) => id != this.pedals.length);\n  }\n\n  addOperation(o: PlayerOp, chain?: boolean) {\n    o.id = this.ops.length;\n    this.ops.push(o);\n    if (chain) {\n      o.chain = chain;\n    }\n    // this.unpairedOps.push(o);\n    // console.log(this.ops);\n  }\n\n  pair(pedalId: number, opName: string) {\n    let o = this.ops.findIndex((op) => op.name == opName);\n    // let thisOp = this.unpairedOps.splice(o, 1);\n    let thisOp = this.ops;\n    this.mapping[pedalId] = makePairedOp(pedalId, thisOp[o]); \n  }\n\n  chain(pedalId: number, opName: string) {\n    let o = this.ops[this.ops.findIndex((op) => op.name == opName)];\n    if (this.pedalIsChained(pedalId)) {\n      let curr_ops = ( this.mapping[pedalId]).ops;\n      this.mapping[pedalId] = makeChainOp(curr_ops.concat([o]), pedalId);\n    } else if (this.pedalIsPaired(pedalId)) {\n      let first_op = ( this.mapping[pedalId]).op;\n      this.mapping[pedalId] = makeChainOp([first_op].concat([o]), pedalId);\n    } else {\n      this.mapping[pedalId] = makeChainOp([o], pedalId);\n    }\n  }\n\n  chainToPedal(pedalId: number, ops: Array) {\n    let op_array = ops.map((name) => this.ops[this.ops.findIndex((op) => op.name == name)]);\n    if (this.pedalIsChained(pedalId)) { \n      // if pedal already has a chain, add ops to the chain\n      let curr_ops = ( this.mapping[pedalId]).ops;\n      this.mapping[pedalId] = makeChainOp(curr_ops.concat(op_array), pedalId);\n    } else if (this.pedalIsPaired(pedalId)) {\n      // if pedal is paired, you can turn it into a chain\n      let first_op = ( this.mapping[pedalId]).op;\n      this.mapping[pedalId] = makeChainOp([first_op].concat(op_array), pedalId);\n    } else {\n      // pedal doesn't have anything mapped, just add a new chain\n      this.mapping[pedalId] = makeChainOp(op_array, pedalId);\n    }\n  }\n\n  // will return true if an op is mapped to a pedal in any way\n  opIsMapped(opName: string): boolean {\n    if (this.mapping.filter((m) => m.name.includes(opName)).length > 0) {\n      return true;\n    } else return false;\n  }\n\n  pedalIsMapped(id: number) {\n    return (this.mapping[id]);\n  }\n\n  pedalIsChained(id: number) {\n    if (this.pedalIsMapped(id) && this.mapping[id].name.startsWith('ch')) { return true; }\n    else {return false; }\n  }\n\n  pedalIsPaired(id: number) {\n    return (this.pedalIsMapped(id) && !this.pedalIsChained(id));\n  }\n\n  unpairPedal(id: number) {\n    console.log(`unpairing pedal ${id}`);\n    // let op = this.pairs[id];\n    // this.unpairedOps.splice(op.id, 0, op);\n    delete this.mapping[id];\n  }\n\n  // unpairOp(name: string) {\n  //   let pid = this.opIsPaired(name);\n  //   this.unpairPedal(pid);\n  // }\n}\n\n/**\n * The Draft Player Service is in charge of updating the the global PlayerState and tracking where the weaver is in the draft.\n */\n@Injectable({\n  providedIn: 'root'\n})\nexport class PlayerService {\n  state: PlayerState;\n  loom: LoomConfig;\n  redraw = new EventEmitter();\n  draftClassification: Array = [];\n\n  constructor(\n    public pedals: PedalsService,\n    public mappings: MappingsService,\n    public seq: SequencerService,\n    // private oss: OperationService\n  ) {\n    // this.draft = null; \n    console.log(\"draft player constructor\");\n    // const startPattern = playerOpFrom(defs.tabby);\n    // console.log(startPattern);\n    // startPattern.perform(nullOpInput).then((result) => {\n    //   console.log(result);\n    //   this.setDraft(result[0]);\n    // });\n\n    this.state = initState();\n    this.state.draft = defs.tabby.perform([1]);\n\n    this.loom = { warps: 2640, draftTiling: true };\n\n    // load the draft progress ops\n    mappings.addOperation(forward);\n    mappings.addOperation(refresh);\n    mappings.addOperation(reverse);\n\n    function addOp(op: GenericOp, params?: Array) {\n      let p_op = params ? playerOpFrom(op, params) : playerOpFrom(op);\n      mappings.addOperation(p_op);\n      return p_op;\n    }\n\n    // load ops from the main mixer\n    const tabby = addOp(defs.tabby);\n    const twill = addOp(defs.twill);\n    const satin = addOp(defs.satin);\n    const waffle = addOp(defs.waffle);\n    const basket = addOp(defs.basket);\n    const rib = addOp(defs.rib);\n    const random = addOp(defs.random);\n    const rotate = addOp(defs.rotate);\n    const invert = addOp(defs.invert);\n    const shiftx = addOp(defs.shiftx);\n    const shifty = addOp(defs.shifty);\n    const slope = addOp(defs.slope);\n    const flipx = addOp(defs.flipx);\n    const flipy = addOp(defs.flipy);\n    const symm = addOp(defs.makesymmetric);\n    const stretch = addOp(defs.stretch);\n    const bindweft = addOp(defs.bindweftfloats);\n    const bindwarp = addOp(defs.bindwarpfloats);\n\n    const tile: PlayerOp = {\n      name: defs.tile.name,\n      perform: (init: PlayerState) => {\n        let res = copyState(init);\n        res.draft = defs.tile.perform([init.draft], [2, 2]);\n        res.row = init.row % wefts(res.draft.drawdown);\n        res.pedal = defs.tile.name;\n        return Promise.resolve(res);\n      }\n    }\n    mappings.addOperation(tile);\n\n    this.draftClassification.push(\n      {category: 'structure',\n      dx: \"0-1 input, 1 output, algorithmically generates weave structures based on parameters\",\n      ops: [tabby, twill, satin, waffle, random]}\n    );\n\n    this.draftClassification.push(\n      { category: 'custom structure',\n        dx: \"custom structures loaded from the Mixer\",\n        ops: []\n      }\n    );\n\n    this.draftClassification.push(\n      {category: 'transformation',\n      dx: \"1 input, 1 output, applies an operation to the input that transforms it in some way\",\n      ops: [invert, flipx, flipy, shiftx, shifty, rotate, slope, stretch, symm, tile, bindwarp, bindweft]}\n    );\n\n    // //test this\n    // console.log(this.oss.getOp('germanify'));\n    // const germanify = this.pedalOps.addOperation(playerOpFromTree( this.oss.getOp('germanify')));\n    \n    console.log('pedal ops added');\n\n    pedals.on('pedal-step', (id) => this.onPedal(id));\n\n    pedals.on('pedal-added', (n) => {\n      if (n == 1) {\n        mappings.pair(0, 'forward');\n        console.log(\"pedals mapping\", mappings);\n      } else if (n == 2) {\n        if (mappings.pedalIsMapped(0)) mappings.unmap(0);\n        mappings[0] = this.seq;\n        mappings[1] = this.seq;\n        this.seq.addPedals(0, 1);\n        console.log(\"pedals mapping\", mappings);\n      }\n    })\n  }\n\n  get readyToWeave() {  // need either one pedal forward or one pedal reverse, in order to progress through draft\n    return (this.pedals.readyToWeave && \n      (this.mappings.opIsMapped('forward') || this.mappings.opIsMapped('reverse') || this.seq.readyToWeave)\n    );\n  }\n\n  /** get whether or not the loom is weaving */\n  get weaving() {\n    return this.pedals.active_draft.val;\n  }\n  get draft() {\n    return this.state.draft;\n  }\n\n  hasCustomStructure(d: Draft): boolean {\n    let ops = this.draftClassification.filter((c) => c.category == \"custom structure\")[0].ops;\n    console.log(ops);\n    if (ops.length == 0) return false;\n    return ops\n      .map((el) => { return el.struct_id == d.id})\n      .reduce((a, b) => { return a || b; });\n  }\n\n  setDraft(d: Draft) {\n    if (!this.hasCustomStructure(d)) {\n      console.log(\"a new structure!\");\n      let structOps = this.draftClassification.filter((c) => c.category == \"custom structure\")[0].ops;\n      let op = this.structureOpFromDraft(d);\n      structOps.push(op);\n      this.mappings.addOperation(op);\n    }\n    this.state.draft = d;\n    this.state.row = 0;\n    // console.log(\"player has active draft\");\n    // console.log(\"draft is \", this.draft);\n    console.log(\"draft set \", this.state);\n  }\n\n  /**\n   * \n   * @param d the Draft to turn into a custom structure Operation\n   */\n  structureOpFromDraft(d: Draft) {\n    let structOp: PlayerOp = {\n      name: d.gen_name,\n      struct_id: d.id,\n      perform: (init: PlayerState) => {\n        let res = copyState(init);\n        res.draft = d;\n        res.row = init.row % wefts(d.drawdown);\n        return Promise.resolve(res);\n      }\n    };\n    return structOp;\n  }\n\n  // e is a string = op.name\n  setPedalOp(e: any, p: Pedal) {\n    console.log(e, p);\n    if (this.mappings.pedalIsPaired(p.id)) {\n      this.mappings.unmap(p.id);\n    }\n    this.mappings.pair(p.id, e);\n    console.log(\"pedals map\", this.mappings);\n  }\n\n  onPedal(id: number) {\n    console.log('player service: pedal ', id);\n    let mapped = this.mappings.getMap(id);\n    // console.log(this.mappings);\n    // console.log(this.seq);\n    if (mapped) {\n      console.log('mapping exists for pedal');\n      mapped.perform(this.state, id)\n      .then((state: PlayerState) => {\n        this.state = copyState(state);\n        console.log(this.state);\n        this.redraw.emit('redraw');\n        if (this.state.weaving) {\n          console.log(\"draft player: sending row\");\n          this.pedals.sendDraftRow(this.currentRow());\n        }\n      });\n    }\n  }\n\n  currentRow() {\n    let {draft, row} = this.state;\n    let draftRow = draft.drawdown[row % wefts(draft.drawdown)];\n    let data = \"\";\n\n    let targetLength = (this.loom.draftTiling ? this.loom.warps : draftRow.length);\n    while (data.length  {\n    //   if (state) {\n    //   }\n    // });\n  }\n}\n\n    \n\n\n\n\n\n\n\n\n\n\n                   \n    \n         results matching \"\"\n        \n    \n    \n        No results matching \"\"\n    \n\n"},"interfaces/PedalEvent.html":{"url":"interfaces/PedalEvent.html","title":"interface - PedalEvent","body":"\n                   \n\n\n\n\n\n\n\n\n\n\n\n\n\n\n  Interfaces\n  \n  PedalEvent\n\n\n\n        \n            Info\n        \n        \n            Source\n        \n\n\n\n    \n        \n            File\n        \n        \n            src/app/player/model/op_mappings.ts\n        \n\n\n            \n                Description\n            \n            \n                things that can happen in response to a pedal\n\n            \n\n\n        \n            Index\n            \n                \n                    \n                        \n                            Properties\n                        \n                    \n                    \n                        \n                            \n                                \n                                            Optional\n                                        \n                                            id\n                                        \n                                \n                                \n                                        \n                                            name\n                                        \n                                \n                                \n                                            Optional\n                                        \n                                            pedal\n                                        \n                                \n                                \n                                        \n                                            perform\n                                        \n                                \n                            \n                        \n                    \n                \n            \n        \n\n\n\n            \n                Properties\n                    \n                        \n                                \n                                    \n                                        \n                                        id\n                                            \n                                                \n                                            \n                                        \n                                    \n                                \n                                \n                                    \n                                        id:         number\n\n                                    \n                                \n\n\n                                    \n                                        \n                                            Type :         number\n\n                                        \n                                    \n\n                                    \n                                        \n                                            Optional\n                                        \n                                    \n\n\n\n\n                        \n                    \n                    \n                        \n                                \n                                    \n                                        \n                                        name\n                                            \n                                                \n                                            \n                                        \n                                    \n                                \n                                \n                                    \n                                        name:         string\n\n                                    \n                                \n\n\n                                    \n                                        \n                                            Type :         string\n\n                                        \n                                    \n\n\n\n\n\n                        \n                    \n                    \n                        \n                                \n                                    \n                                        \n                                        pedal\n                                            \n                                                \n                                            \n                                        \n                                    \n                                \n                                \n                                    \n                                        pedal:         number\n\n                                    \n                                \n\n\n                                    \n                                        \n                                            Type :         number\n\n                                        \n                                    \n\n                                    \n                                        \n                                            Optional\n                                        \n                                    \n\n\n\n\n                        \n                    \n                    \n                        \n                                \n                                    \n                                        \n                                        perform\n                                            \n                                                \n                                            \n                                        \n                                    \n                                \n                                \n                                    \n                                        perform:         function\n\n                                    \n                                \n\n\n                                    \n                                        \n                                            Type :         function\n\n                                        \n                                    \n\n\n\n\n\n                        \n                    \n            \n    \n\n\n    \n        import { Draft } from \"../../core/model/datatypes\";\nimport { wefts } from \"../../core/model/drafts\";\nimport { OpInput, TreeOperation as TreeOp, SingleInlet,\n  BaseOp as Op, BuildableOperation as GenericOp, \n  Seed, Pipe, AllRequired, DraftsOptional, \n  getDefaultParams, \n  ParamValue\n} from \"../../mixer/model/operation\";\nimport { PlayerState, initState, copyState } from \"./state\";\n\nimport { OpSequencer, makeOpSequencer } from \"./sequencer\";\nexport * from \"./sequencer\";\n\nexport interface PlayerOp {\n  id?: number,\n  name: string,\n  struct_id?: number,\n  dx?: string,\n  op?: GenericOp,\n  weavingOnly?: boolean,\n  chain?: boolean,\n  perform: (init: PlayerState) => Promise;\n}\nexport type SingleOp = PlayerOp;\n\n/** @const forward a player-specific function to progress through the draft */\nexport const forward: PlayerOp = {\n  name: 'forward',\n  perform: (init: PlayerState) => { \n    let res = copyState(init);\n    res.row = (init.row+1) % wefts(init.draft.drawdown);\n    res.pedal = 'forward';\n    if (res.weaving) res.numPicks++;\n    return Promise.resolve(res); \n  }\n}\n\n/** @const refresh a player-specific function to progress through the draft (re-sends the row to give more time) */\nexport const refresh: PlayerOp = {\n  name: 'refresh',\n  perform: (init: PlayerState) => { \n    let res = copyState(init);\n    if (res.weaving) res.numPicks++;\n    return Promise.resolve(res);\n  }\n}\n\n/** @const reverse a player-specific function to progress backwards through the draft */\nexport const reverse: PlayerOp = {\n  name: 'reverse',\n  perform: (init: PlayerState) => { \n    let res = copyState(init);\n    res.row = (init.row+wefts(init.draft.drawdown)-1) % wefts(init.draft.drawdown);\n    res.pedal = 'reverse';\n    if (res.weaving) res.numPicks++;\n    return Promise.resolve(res);\n  }\n}\n\nexport function playerOpFrom(op: GenericOp, params?: Array) {\n  // use \"rotate\" op as an example\n  let input_params = params ? params : getDefaultParams(op);\n  let perform;\n  if (op.classifier.type === 'pipe') {\n    const pipeOp = op as Op;\n    perform = function(init: PlayerState) {\n      let res = copyState(init);\n      res.draft = pipeOp.perform(init.draft, input_params);\n      res.row = (init.row) % wefts(res.draft.drawdown);\n      res.pedal = op.name;\n      return Promise.resolve(res);\n    }\n  } else if (op.classifier.type === 'seed') {\n    const seedOp = op as Op;\n    perform = function(init: PlayerState) {\n      let res = copyState(init);\n      res.draft = seedOp.perform(input_params);\n      res.row = (init.row) % wefts(res.draft.drawdown);\n      res.pedal = op.name;\n      return Promise.resolve(res);\n    }\n  }\n  \n  /** @TODO */\n  var p: PlayerOp = { \n    name: op.name,\n    dx: op.dx,\n    perform: perform\n  }\n  return p;\n}\n\n\n/** \n * @type \n * a TreeOperation is compatible with the player if it takes one or zero draft inputs \n * and outputs one draft.\n */\ntype PlayableTreeOp = TreeOp & \n  ( { inlets: [ SingleInlet ] } | \n    { inlets: [] });\n\n/** @function playerOpFromTree (untested) */\nfunction playerOpFromTree(op: PlayableTreeOp) {\n  let perform: PlayerOp[\"perform\"];\n  let param_input: OpInput = { op_name: op.name, drafts: [], params: getDefaultParams(op), inlet: -1 }\n  if (op.inlets.length == 0) {\n    perform = function(init: PlayerState) {\n      return op.perform([param_input]).then((output) => {\n        return { \n          draft: output[0], \n          row: init.row, \n          weaving: init.weaving, \n          pedal: op.name, \n          numPicks: init.numPicks \n        };\n      });\n    }\n  } else {\n    perform = function(init: PlayerState) {\n      let draft_input: OpInput = { op_name: 'child', drafts: [init.draft], params: [], inlet: 0}\n      return op.perform([param_input, draft_input]).then((output) => {\n        return { \n          draft: output[0], \n          row: init.row, \n          weaving: init.weaving,\n          pedal: op.name,\n          numPicks: init.numPicks };\n      });\n    }\n  }\n\n  var p: PlayerOp = { \n    name: op.name,\n    perform: perform\n  }\n  return p;\n}\n\n/** things that can happen in response to a pedal */\nexport interface PedalEvent {\n  id?: number,\n  pedal?: number,\n  name: string\n  perform: (init: PlayerState, ...args) => Promise;\n}\n\n/** \n * Basic combination: \n *  - 1 pedal, 1 operation\n *  - if pedal, then operation perform() \n * @param pedal ID number of pedal\n * @param op    ID number of Operation (assigned in Draft Player service)\n */\nexport interface PairedOp extends PedalEvent {\n  pedal:  number,\n  op:     PlayerOp,\n}\n\n// this ...args thing is such a hack\nexport function makePairedOp(p: number, op: PlayerOp): PairedOp {\n  let jankPerform = (init: PlayerState, ...args) => {\n    return op.perform(init);\n  }\n  return {\n    pedal: p,\n    name: op.name,\n    op: op,\n    perform: jankPerform\n  }\n}\n\n/**\n * Op chain:\n * - 1 pedal, multiple operations in a chain (array)\n * - if pedal, perform() each Op in sequence\n * @param pedal ID number of pedals\n * @param ops   array of Op ID numbers to execute in order\n */\nexport interface ChainOp extends PedalEvent{\n  pedal:  number,\n  ops:    Array,\n}\n\nexport function makeBlankChainOp(p?: number): ChainOp {\n  let res: ChainOp = {\n    pedal: -1,\n    name: \"\",\n    ops: [],\n    perform: (init: PlayerState, ...args) => {return Promise.resolve(init);}\n  }\n  \n  if (p) res.pedal = p;\n  return res;\n}\n\nexport function makeChainOp(ops: Array, p?: number): ChainOp {\n  let res = makeBlankChainOp(p);\n  res.name = \"ch\";\n  for (let o of ops) {\n    res.name += \"-\" + o.name;\n  }\n\n  res.ops = ops;\n  res.perform = (init: PlayerState, ...args) => {\n    let newState = copyState(init);\n    newState.pedal = \"ch\";\n    let d: Draft = init.draft;\n    for (let o of ops) {\n      if (o.op.classifier.type == 'seed') {\n        let base_op = o.op as Op;\n        d = base_op.perform(getDefaultParams(base_op));\n      } else if (o.op.classifier.type == 'pipe') {\n        let base_op = o.op as Op;\n        d = base_op.perform(d, getDefaultParams(base_op));\n      }\n      newState.pedal += \"-\" + o.name;\n    }\n\n    newState.draft = d;\n\n    return Promise.resolve(newState);\n  }\n\n  console.log('op chain: ', res);\n\n  return res;\n}\n\nexport type PedalOpMapping = Array;// & {\n//   [id: number]: PedalAction\n// }\n\nexport type MappingShapes = {\n  'pairing': PairedOp,\n  'chain': ChainOp,\n  'sequencer': OpSequencer\n};\n\nexport type PedalAction = MappingShapes[keyof MappingShapes];\n\nexport type MappingType = 'pairing' | 'chain' | 'sequencer';\n    \n\n\n\n\n\n\n\n\n\n                   \n    \n         results matching \"\"\n        \n    \n    \n        No results matching \"\"\n    \n\n"},"classes/PedalStatus.html":{"url":"classes/PedalStatus.html","title":"class - PedalStatus","body":"\n                   \n\n\n\n\n\n\n\n\n\n\n\n\n\n  Classes\n  PedalStatus\n\n\n\n        \n            Info\n        \n        \n            Source\n        \n\n\n\n    \n        \n            File\n        \n        \n            src/app/player/provider/pedals.service.ts\n        \n\n\n            \n                Description\n            \n            \n                Just a wrapper for how the database arranges the pedals +\nloom information into nodes\n\n            \n\n            \n                Extends\n            \n            \n                        EventEmitter\n            \n\n\n\n            \n    Index\n    \n        \n                \n                    \n                        Properties\n                    \n                \n                \n                    \n                        \n                            \n                                active_draft\n                            \n                            \n                                loom_online\n                            \n                            \n                                loom_ready\n                            \n                            \n                                num_pedals\n                            \n                            \n                                num_picks\n                            \n                            \n                                num_v_pedals\n                            \n                            \n                                pedal_array\n                            \n                            \n                                pedal_states\n                            \n                            \n                                pi_online\n                            \n                            \n                                pick_data\n                            \n                            \n                                v_pedal_array\n                            \n                            \n                                v_pedal_states\n                            \n                            \n                                vacuum_on\n                            \n                        \n                    \n                \n\n                \n                    \n                        Methods\n                    \n                \n                \n                    \n                        \n                            \n                                toString\n                            \n                        \n                    \n                \n\n\n\n\n\n        \n    \n\n\n            \n    Constructor\n        \n            \n                \n                    \nconstructor(db: Database)\n                    \n                \n                        \n                            \n                                Defined in src/app/player/provider/pedals.service.ts:48\n                            \n                        \n\n                \n                    \n                            \n                                    Parameters :\n                                    \n                                        \n                                            \n                                                Name\n                                                    Type\n                                                Optional\n                                            \n                                        \n                                        \n                                                \n                                                        db\n                                                  \n                                                        \n                                                                    Database\n                                                        \n                                                  \n                                                    \n                                                            No\n                                                    \n                                                    \n                                                \n                                        \n                                    \n                            \n                    \n                \n            \n        \n\n\n            \n    \n    \n        Properties\n    \n    \n        \n            \n                \n                    \n                    \n                        active_draft\n                        \n                    \n                \n            \n                \n                    \n                        Type :         DBWriter\n\n                    \n                \n                    \n                        \n                                Defined in src/app/player/provider/pedals.service.ts:38\n                        \n                    \n\n\n        \n    \n    \n        \n            \n                \n                    \n                    \n                        loom_online\n                        \n                    \n                \n            \n                \n                    \n                        Type :         DBListener\n\n                    \n                \n                    \n                        \n                                Defined in src/app/player/provider/pedals.service.ts:34\n                        \n                    \n\n\n        \n    \n    \n        \n            \n                \n                    \n                    \n                        loom_ready\n                        \n                    \n                \n            \n                \n                    \n                        Type :         DBListener\n\n                    \n                \n                    \n                        \n                                Defined in src/app/player/provider/pedals.service.ts:36\n                        \n                    \n\n\n        \n    \n    \n        \n            \n                \n                    \n                    \n                        num_pedals\n                        \n                    \n                \n            \n                \n                    \n                        Type :         DBListener\n\n                    \n                \n                    \n                        \n                                Defined in src/app/player/provider/pedals.service.ts:42\n                        \n                    \n\n\n        \n    \n    \n        \n            \n                \n                    \n                    \n                        num_picks\n                        \n                    \n                \n            \n                \n                    \n                        Type :         DBWriter\n\n                    \n                \n                    \n                        \n                                Defined in src/app/player/provider/pedals.service.ts:39\n                        \n                    \n\n\n        \n    \n    \n        \n            \n                \n                    \n                    \n                        num_v_pedals\n                        \n                    \n                \n            \n                \n                    \n                        Type :         DBTwoWay\n\n                    \n                \n                    \n                        \n                                Defined in src/app/player/provider/pedals.service.ts:46\n                        \n                    \n\n\n        \n    \n    \n        \n            \n                \n                    \n                    \n                        pedal_array\n                        \n                    \n                \n            \n                \n                    \n                        Type :         DBListenerArray\n\n                    \n                \n                    \n                        \n                                Defined in src/app/player/provider/pedals.service.ts:44\n                        \n                    \n\n\n        \n    \n    \n        \n            \n                \n                    \n                    \n                        pedal_states\n                        \n                    \n                \n            \n                \n                    \n                        Type :         DBListener\n\n                    \n                \n                    \n                        \n                                Defined in src/app/player/provider/pedals.service.ts:43\n                        \n                    \n\n\n        \n    \n    \n        \n            \n                \n                    \n                    \n                        pi_online\n                        \n                    \n                \n            \n                \n                    \n                        Type :         OnlineStatus\n\n                    \n                \n                    \n                        \n                                Defined in src/app/player/provider/pedals.service.ts:33\n                        \n                    \n\n\n        \n    \n    \n        \n            \n                \n                    \n                    \n                        pick_data\n                        \n                    \n                \n            \n                \n                    \n                        Type :         DBWriter\n\n                    \n                \n                    \n                        \n                                Defined in src/app/player/provider/pedals.service.ts:40\n                        \n                    \n\n\n        \n    \n    \n        \n            \n                \n                    \n                    \n                        v_pedal_array\n                        \n                    \n                \n            \n                \n                    \n                        Type :         DBTwoWayArray\n\n                    \n                \n                    \n                        \n                                Defined in src/app/player/provider/pedals.service.ts:48\n                        \n                    \n\n\n        \n    \n    \n        \n            \n                \n                    \n                    \n                        v_pedal_states\n                        \n                    \n                \n            \n                \n                    \n                        Type :         DBTwoWay\n\n                    \n                \n                    \n                        \n                                Defined in src/app/player/provider/pedals.service.ts:47\n                        \n                    \n\n\n        \n    \n    \n        \n            \n                \n                    \n                    \n                        vacuum_on\n                        \n                    \n                \n            \n                \n                    \n                        Type :         DBListener\n\n                    \n                \n                    \n                        \n                                Defined in src/app/player/provider/pedals.service.ts:35\n                        \n                    \n\n\n        \n    \n\n\n            \n    \n    \n        Methods\n    \n    \n        \n            \n                \n                    \n                    \n                        toString\n                        \n                    \n                \n            \n            \n                \ntoString()\n                \n            \n\n\n            \n                \n                    Defined in src/app/player/provider/pedals.service.ts:105\n                \n            \n\n\n            \n                \n\n                    \n                        Returns :         string\n\n                    \n                \n            \n        \n    \n\n\n\n\n\n\n    \n\n\n    \n        import { Injectable } from '@angular/core';\nimport { WeavingPick } from '../model/player';\nimport { EventEmitter } from 'events';\nimport { getDatabase } from \"firebase/database\";\nimport { Database } from '@angular/fire/database';\nimport { NodeParams,\n  DBListener, OnlineStatus, DBWriter, \n  DBListenerArray, DBTwoWayArray, DBTwoWay } from '../model/dbnodes';\n\n/**\n * The Pedals service is in charge of updating the database \n * connections to communicate with the loom hardware. In AdaCAD, \n * its main responsibility is to keep an up-to-date list of the pedals\n * and when they get stepped on; as well as any other hardware \n * statuses.\n */\n\nexport interface Pedal {\n  id: number,\n  name: string,\n  u_name?: string,\n  key: string,\n  dbnode: DBListener | DBTwoWay,\n  state: any,\n  // op?: Operation\n}\n\n/** \n * Just a wrapper for how the database arranges the pedals + \n * loom information into nodes\n */\nexport class PedalStatus extends EventEmitter {\n  pi_online: OnlineStatus;     // is the pi online?\n  loom_online: DBListener;   // is the loom online?\n  vacuum_on: DBListener;     // is the loom running? (vacuum pump running)\n  loom_ready: DBListener;\n\n  active_draft: DBWriter;\n  num_picks: DBWriter;\n  pick_data: DBWriter;\n\n  num_pedals: DBListener;\n  pedal_states: DBListener;\n  pedal_array: DBListenerArray;\n\n  num_v_pedals: DBTwoWay;\n  v_pedal_states: DBTwoWay;\n  v_pedal_array: DBTwoWayArray;\n\n  constructor(db: Database) {\n    super();\n    const defaults = {\n      active_draft: false,\n      num_picks: 0,\n      pick_data: false\n    }\n    const listeners = {\n      // pi_online: 'pi-online',\n      loom_online: 'loom-online',\n      vacuum_on: 'vacuum-on',\n      num_pedals: 'num-pedals',\n      pedal_states: 'pedal-states',\n      loom_ready: 'loom-ready'\n    }\n    const writers = {\n      active_draft: 'active-draft',\n      num_picks: 'num-picks',\n      pick_data: 'pick-data'\n    }\n\n    function params(path: string): NodeParams { \n      return { db: db, root: 'pedals/', path: path };\n    };\n\n    this.pi_online = new OnlineStatus(params('pi-online'));\n    // this.pi_online.attach();\n    // this.loom_online = new DBListener(this.db, 'loom-online');\n\n    for (var l in listeners) {\n      const newL = new DBListener(params(listeners[l]));\n      Object.defineProperty(this, l, { value: newL });\n      // this[l].attach();\n    }\n\n    for (var w in writers) {\n      const newW = new DBWriter({...params(writers[w]), initVal: defaults[w]});\n      // console.log('writer created');\n      Object.defineProperty(this, w, { value: newW });\n      // console.log('writer added to status');\n      this[w].attach();\n      // console.log('writer attached');\n      this[w].setVal(defaults[w]);\n    }\n\n    // set up array of pedal listeners with the length and parent nodes\n    this.pedal_array = new DBListenerArray(this.num_pedals, this.pedal_states);\n\n    // set up virtual pedal nodes, which have their own length\n    // and parent nodes\n    this.num_v_pedals = new DBTwoWay(params('num-v-pedals'));\n    this.v_pedal_states = new DBTwoWay(params('v-pedal-states'));\n    this.v_pedal_array = new DBTwoWayArray(this.num_v_pedals, this.v_pedal_states);\n  }\n\n  toString() {\n    var str = \"\";\n    str += \"'pi-online': \" + this.pi_online.val + \"\\n\";\n    str += \"'loom-online': \" + this.loom_online.val + \"\\n\\n\";\n    str += \"'vacuum-on': \" + this.vacuum_on.val + \"\\n\";\n    str += \"'active-draft': \" + this.active_draft.val + \"\\n\";\n    str += \"'num-pedals': \" + this.num_pedals.val + \"\\n\";\n    return str;\n  }\n}\n\n/**\n * Definition of pedal service\n * @class\n * @event `pedal-added` data: how many pedals\n * @event `pedal-removed` data: how many pedals\n * @event `pedal-step` data: which pedal\n */\n@Injectable({\n  providedIn: 'root'\n})\nexport class PedalsService extends EventEmitter {\n\n  db: Database;\n  dbNodes: Array;\n\n  // status data\n  status: PedalStatus;\n  //  default = {\n  //     pi_online: false,     // is the pi online?\n  //     loom_online: false,   // is the loom online?\n  //     vacuum_on: false,     // is the loom running? (vacuum pump running)\n  //     active_draft: false,\n  //     num_pedals: 0,\n  //     pedal_states: {},\n  //     loom_ready: false     // is the loom requesting a draft row?\n  // };\n  p_pedals: Array = [];\n  v_pedals: Array = [];\n  \n  virtual: boolean = true;  // whether to mix virtual pedals in with the regular pedals array;\n\n  get pedals() { return this.p_pedals.concat(this.v_pedals); }\n\n  constructor() { \n    super();\n    // init: start listening to changes in Firebase DB from the Pi\n    console.log(\"pedals service constructor\");\n    this.db = getDatabase();\n    this.status = new PedalStatus(this.db);\n    // console.log(this.status);\n    \n    // if pi_online = \"true\" at start-up, just make sure\n    console.log(\"are you alive?\");\n    this.pi_online.checkAlive();\n    this.loom_online.attach();\n\n    this.virtualPedals(true);\n    this.loomPedals(false);\n\n    // listens for changes in pi online status\n    // if online, enable everything\n    this.pi_online.on('change', (state) =>\n      this.loomPedals(state));\n\n    // other listeners\n    this.loom_online.on('change', (state) => \n      this.loomListeners(state));\n\n    /** pedal array listeners */\n    this.p_pedal_array.on('ready', (state) => \n      this.weavingWriters(state)\n    );\n\n    this.p_pedal_array.on('child-added', (newNode) => {\n      console.log('pedals service: pedal added');\n      this.p_pedals.push(this.nodeToPedal(newNode));\n      this.v_pedals.map((el) => { el.id += 1; });\n      this.emit('pedal-added', this.p_pedals.length);\n    });\n\n    this.p_pedal_array.on('child-removed', () => {\n      this.p_pedals.pop();\n      this.v_pedals.map((el) => { el.id -= 1; });\n      this.emit('pedal-removed', this.p_pedals.length);\n    });\n\n    this.p_pedal_array.on('child-change', (e) => {\n      this.p_pedals[e.id].state = e.val;\n      this.emit('pedal-step', e.id);\n      // e = {id: which pedal's id, val: pedal state}\n      // call pedal.execute or whatever it ends up being\n      // this.player.onPedal(e.id, e.val);\n    });\n\n    /** @todo */\n    this.loom_ready.on('change', (state) => {\n      if (state) {\n        // send the next weaving row to DB\n        // update num_picks and pick_data accordingly\n      }\n    });\n    \n    /** virtual pedal listeners */\n    this.v_pedal_array.on('ready', (state) => {\n      console.log(\"weaving writers \", state);\n      this.weavingWriters(state);\n    });\n\n    this.v_pedal_array.on('child-added', (newNode) => {\n      console.log('pedals service: virtual pedal added');\n      let v = this.nodeToPedal(newNode);\n      v.id += this.p_pedals.length - (this.p_pedals.length ? 1 : 0);\n      this.v_pedals.push(v);\n      this.emit('pedal-added', this.v_pedals.length);\n    })\n\n    this.v_pedal_array.on('child-removed', () => {\n      this.v_pedals.pop();\n      this.emit('pedal-removed', this.v_pedals.length);\n    })\n\n    this.v_pedal_array.on('child-change', (e) => {\n      this.v_pedals[e.id].state = e.val;\n      this.emit('pedal-step', e.id);\n      // e = {id: which pedal's id, val: pedal state}\n      // call pedal.execute or whatever it ends up being\n      // this.player.onPedal(e.id, e.val);\n    });\n  }\n\n  /** online status */\n  get pi_online() { return this.status.pi_online; }\n  get loom_online() { return this.status.loom_online; }\n\n  /** weaving statuses */\n  get vacuum_on() { return this.status.vacuum_on; }\n  get active_draft() { return this.status.active_draft; }\n  get loom_ready() { return this.status.loom_ready; }\n  get num_picks() { return this.status.num_picks; }\n  get pick_data() { return this.status.pick_data; }\n\n  /** physical pedals DB nodes */\n  get num_pedals() { return this.status.num_pedals; }\n  get pedal_states() { return this.status.pedal_states; }\n  get p_pedal_array() { return this.status.pedal_array; }\n\n  /** virtual pedals DB nodes */\n  get num_v_pedals() { return this.status.num_v_pedals; }\n  get v_pedal_states() { return this.status.v_pedal_states; }\n  get v_pedal_array() { return this.status.v_pedal_array; }\n  \n  get readyToWeave() { return (this.loom_online.val && (this.p_pedal_array.ready || this.v_pedal_array.ready)); }\n\n  // attach all listeners to other values in DB\n  loomPedals(state: boolean) {\n    state ? this.p_pedal_array.attach() : this.p_pedal_array.detach();\n  }\n\n  /** functions to interact with virtual pedals */\n\n  virtualPedals(state: boolean) {\n    state? this.v_pedal_array.attach() : this.v_pedal_array.detach();\n  }\n\n  addVPedal() {\n    this.v_pedal_array.addNode(false);\n  }\n\n  togglePedalByID(id: number) {\n    console.log(\"toggling virtual pedal \", id);\n    if (id >= 0 && id \n    \n\n\n\n\n\n\n\n\n\n\n                   \n    \n         results matching \"\"\n        \n    \n    \n        No results matching \"\"\n    \n\n"},"injectables/PedalsService.html":{"url":"injectables/PedalsService.html","title":"injectable - PedalsService","body":"\n                   \n\n\n\n\n\n\n\n\n\n  Injectables\n  PedalsService\n\n\n\n        \n            Info\n        \n        \n            Source\n        \n\n\n\n    \n        \n            File\n        \n        \n            src/app/player/provider/pedals.service.ts\n        \n\n\n            \n                Description\n            \n            \n                Definition of pedal service\n\n            \n\n            \n                Extends\n            \n            \n                        EventEmitter\n            \n\n\n            \n    Index\n    \n        \n                \n                    \n                        Properties\n                    \n                \n                \n                    \n                        \n                            \n                                db\n                            \n                            \n                                dbNodes\n                            \n                            \n                                p_pedals\n                            \n                            \n                                status\n                            \n                            \n                                v_pedals\n                            \n                            \n                                virtual\n                            \n                        \n                    \n                \n\n                \n                    \n                        Methods\n                    \n                \n                \n                    \n                        \n                            \n                                addVPedal\n                            \n                            \n                                loomListeners\n                            \n                            \n                                loomPedals\n                            \n                            \n                                nodeToPedal\n                            \n                            \n                                remVPedal\n                            \n                            \n                                sendDraftRow\n                            \n                            \n                                togglePedal\n                            \n                            \n                                togglePedalByID\n                            \n                            \n                                toggleWeaving\n                            \n                            \n                                virtualPedals\n                            \n                            \n                                weavingWriters\n                            \n                        \n                    \n                \n\n\n\n\n\n                    \n                        \n                            Accessors\n                        \n                    \n                    \n                        \n                            \n                                \n                                    pedals\n                                \n                                \n                                    pi_online\n                                \n                                \n                                    loom_online\n                                \n                                \n                                    vacuum_on\n                                \n                                \n                                    active_draft\n                                \n                                \n                                    loom_ready\n                                \n                                \n                                    num_picks\n                                \n                                \n                                    pick_data\n                                \n                                \n                                    num_pedals\n                                \n                                \n                                    pedal_states\n                                \n                                \n                                    p_pedal_array\n                                \n                                \n                                    num_v_pedals\n                                \n                                \n                                    v_pedal_states\n                                \n                                \n                                    v_pedal_array\n                                \n                                \n                                    readyToWeave\n                                \n                            \n                        \n                    \n        \n    \n\n\n            \n    Constructor\n        \n            \n                \n                    \nconstructor()\n                    \n                \n                        \n                            \n                                Defined in src/app/player/provider/pedals.service.ts:147\n                            \n                        \n\n            \n        \n\n\n            \n    \n    \n        Methods\n    \n    \n        \n            \n                \n                    \n                    \n                        addVPedal\n                        \n                    \n                \n            \n            \n                \naddVPedal()\n                \n            \n\n\n            \n                \n                    Defined in src/app/player/provider/pedals.service.ts:270\n                \n            \n\n\n            \n                \n\n                    \n                        Returns :         void\n\n                    \n                \n            \n        \n    \n    \n        \n            \n                \n                    \n                    \n                        loomListeners\n                        \n                    \n                \n            \n            \n                \nloomListeners(state: boolean)\n                \n            \n\n\n            \n                \n                    Defined in src/app/player/provider/pedals.service.ts:293\n                \n            \n\n\n            \n                \n                    handling weaving state DB nodes\n\n\n                    \n                        Parameters :\n                        \n                        \n                            \n                                \n                                    Name\n                                    Type\n                                    Optional\n                                \n                            \n                            \n                                \n                                    state\n                                    \n                                                boolean\n                                    \n\n                                    \n                                        No\n                                    \n\n\n                                \n                            \n                        \n                    \n                    \n                    \n                    \n                        Returns :         void\n\n                    \n                    \n                        \n                    \n                \n            \n        \n    \n    \n        \n            \n                \n                    \n                    \n                        loomPedals\n                        \n                    \n                \n            \n            \n                \nloomPedals(state: boolean)\n                \n            \n\n\n            \n                \n                    Defined in src/app/player/provider/pedals.service.ts:260\n                \n            \n\n\n            \n                \n\n                    \n                        Parameters :\n                        \n                        \n                            \n                                \n                                    Name\n                                    Type\n                                    Optional\n                                \n                            \n                            \n                                \n                                    state\n                                    \n                                                boolean\n                                    \n\n                                    \n                                        No\n                                    \n\n\n                                \n                            \n                        \n                    \n                    \n                    \n                    \n                        Returns :         void\n\n                    \n                    \n                        \n                    \n                \n            \n        \n    \n    \n        \n            \n                \n                    \n                    \n                        nodeToPedal\n                        \n                    \n                \n            \n            \n                \nnodeToPedal(node: DBListener | DBTwoWay)\n                \n            \n\n\n            \n                \n                    Defined in src/app/player/provider/pedals.service.ts:333\n                \n            \n\n\n            \n                \n                    utility function for formatting a DBNode into a Pedal\n\n\n                    \n                        Parameters :\n                        \n                        \n                            \n                                \n                                    Name\n                                    Type\n                                    Optional\n                                \n                            \n                            \n                                \n                                    node\n                                    \n                                            DBListener | DBTwoWay\n                                    \n\n                                    \n                                        No\n                                    \n\n\n                                \n                            \n                        \n                    \n                    \n                    \n                    \n                        Returns :         Pedal\n\n                    \n                    \n                        \n                    \n                \n            \n        \n    \n    \n        \n            \n                \n                    \n                    \n                        remVPedal\n                        \n                    \n                \n            \n            \n                \nremVPedal()\n                \n            \n\n\n            \n                \n                    Defined in src/app/player/provider/pedals.service.ts:288\n                \n            \n\n\n            \n                \n\n                    \n                        Returns :         void\n\n                    \n                \n            \n        \n    \n    \n        \n            \n                \n                    \n                    \n                        sendDraftRow\n                        \n                    \n                \n            \n            \n                \nsendDraftRow(r: WeavingPick)\n                \n            \n\n\n            \n                \n                    Defined in src/app/player/provider/pedals.service.ts:327\n                \n            \n\n\n            \n                \n                    loads pick data into DB\n\n\n                    \n                        Parameters :\n                        \n                        \n                            \n                                \n                                    Name\n                                    Type\n                                    Optional\n                                \n                            \n                            \n                                \n                                    r\n                                    \n                                                WeavingPick\n                                    \n\n                                    \n                                        No\n                                    \n\n\n                                \n                            \n                        \n                    \n                    \n                    \n                    \n                        Returns :         void\n\n                    \n                    \n                        \n                    \n                \n            \n        \n    \n    \n        \n            \n                \n                    \n                    \n                        togglePedal\n                        \n                    \n                \n            \n            \n                \ntogglePedal(p: Pedal)\n                \n            \n\n\n            \n                \n                    Defined in src/app/player/provider/pedals.service.ts:282\n                \n            \n\n\n            \n                \n\n                    \n                        Parameters :\n                        \n                        \n                            \n                                \n                                    Name\n                                    Type\n                                    Optional\n                                \n                            \n                            \n                                \n                                    p\n                                    \n                                                Pedal\n                                    \n\n                                    \n                                        No\n                                    \n\n\n                                \n                            \n                        \n                    \n                    \n                    \n                    \n                        Returns :         void\n\n                    \n                    \n                        \n                    \n                \n            \n        \n    \n    \n        \n            \n                \n                    \n                    \n                        togglePedalByID\n                        \n                    \n                \n            \n            \n                \ntogglePedalByID(id: number)\n                \n            \n\n\n            \n                \n                    Defined in src/app/player/provider/pedals.service.ts:274\n                \n            \n\n\n            \n                \n\n                    \n                        Parameters :\n                        \n                        \n                            \n                                \n                                    Name\n                                    Type\n                                    Optional\n                                \n                            \n                            \n                                \n                                    id\n                                    \n                                                number\n                                    \n\n                                    \n                                        No\n                                    \n\n\n                                \n                            \n                        \n                    \n                    \n                    \n                    \n                        Returns :         void\n\n                    \n                    \n                        \n                    \n                \n            \n        \n    \n    \n        \n            \n                \n                    \n                    \n                        toggleWeaving\n                        \n                    \n                \n            \n            \n                \ntoggleWeaving()\n                \n            \n\n\n            \n                \n                    Defined in src/app/player/provider/pedals.service.ts:317\n                \n            \n\n\n            \n                \n                    lets the Pi know to start weaving\n\n\n                    \n                        Returns :         void\n\n                    \n                \n            \n        \n    \n    \n        \n            \n                \n                    \n                    \n                        virtualPedals\n                        \n                    \n                \n            \n            \n                \nvirtualPedals(state: boolean)\n                \n            \n\n\n            \n                \n                    Defined in src/app/player/provider/pedals.service.ts:266\n                \n            \n\n\n            \n                \n                    functions to interact with virtual pedals\n\n\n                    \n                        Parameters :\n                        \n                        \n                            \n                                \n                                    Name\n                                    Type\n                                    Optional\n                                \n                            \n                            \n                                \n                                    state\n                                    \n                                                boolean\n                                    \n\n                                    \n                                        No\n                                    \n\n\n                                \n                            \n                        \n                    \n                    \n                    \n                    \n                        Returns :         void\n\n                    \n                    \n                        \n                    \n                \n            \n        \n    \n    \n        \n            \n                \n                    \n                    \n                        weavingWriters\n                        \n                    \n                \n            \n            \n                \nweavingWriters(state: boolean)\n                \n            \n\n\n            \n                \n                    Defined in src/app/player/provider/pedals.service.ts:304\n                \n            \n\n\n            \n                \n\n                    \n                        Parameters :\n                        \n                        \n                            \n                                \n                                    Name\n                                    Type\n                                    Optional\n                                \n                            \n                            \n                                \n                                    state\n                                    \n                                                boolean\n                                    \n\n                                    \n                                        No\n                                    \n\n\n                                \n                            \n                        \n                    \n                    \n                    \n                    \n                        Returns :         void\n\n                    \n                    \n                        \n                    \n                \n            \n        \n    \n\n            \n    \n    \n        Properties\n    \n    \n        \n            \n                \n                    \n                    \n                        db\n                        \n                    \n                \n            \n                \n                    \n                        Type :     Database\n\n                    \n                \n                    \n                        \n                                Defined in src/app/player/provider/pedals.service.ts:128\n                        \n                    \n\n\n        \n    \n    \n        \n            \n                \n                    \n                    \n                        dbNodes\n                        \n                    \n                \n            \n                \n                    \n                        Type :     Array\n\n                    \n                \n                    \n                        \n                                Defined in src/app/player/provider/pedals.service.ts:129\n                        \n                    \n\n\n        \n    \n    \n        \n            \n                \n                    \n                    \n                        p_pedals\n                        \n                    \n                \n            \n                \n                    \n                        Type :         Array\n\n                    \n                \n                \n                    \n                        Default value : []\n                    \n                \n                    \n                        \n                                Defined in src/app/player/provider/pedals.service.ts:142\n                        \n                    \n\n\n        \n    \n    \n        \n            \n                \n                    \n                    \n                        status\n                        \n                    \n                \n            \n                \n                    \n                        Type :         PedalStatus\n\n                    \n                \n                    \n                        \n                                Defined in src/app/player/provider/pedals.service.ts:132\n                        \n                    \n\n\n        \n    \n    \n        \n            \n                \n                    \n                    \n                        v_pedals\n                        \n                    \n                \n            \n                \n                    \n                        Type :         Array\n\n                    \n                \n                \n                    \n                        Default value : []\n                    \n                \n                    \n                        \n                                Defined in src/app/player/provider/pedals.service.ts:143\n                        \n                    \n\n\n        \n    \n    \n        \n            \n                \n                    \n                    \n                        virtual\n                        \n                    \n                \n            \n                \n                    \n                        Type :         boolean\n\n                    \n                \n                \n                    \n                        Default value : true\n                    \n                \n                    \n                        \n                                Defined in src/app/player/provider/pedals.service.ts:145\n                        \n                    \n\n\n        \n    \n\n\n            \n    \n        Accessors\n    \n        \n            \n                \n                    \n                        \n                        pedals\n                    \n                \n\n                \n                    \n                        getpedals()\n                    \n                \n                            \n                                \n                                    Defined in src/app/player/provider/pedals.service.ts:147\n                                \n                            \n\n            \n        \n        \n            \n                \n                    \n                        \n                        pi_online\n                    \n                \n\n                \n                    \n                        getpi_online()\n                    \n                \n                            \n                                \n                                    Defined in src/app/player/provider/pedals.service.ts:237\n                                \n                            \n                    \n                        \n                                online status\n\n\n                        \n                    \n\n            \n        \n        \n            \n                \n                    \n                        \n                        loom_online\n                    \n                \n\n                \n                    \n                        getloom_online()\n                    \n                \n                            \n                                \n                                    Defined in src/app/player/provider/pedals.service.ts:238\n                                \n                            \n\n            \n        \n        \n            \n                \n                    \n                        \n                        vacuum_on\n                    \n                \n\n                \n                    \n                        getvacuum_on()\n                    \n                \n                            \n                                \n                                    Defined in src/app/player/provider/pedals.service.ts:241\n                                \n                            \n                    \n                        \n                                weaving statuses\n\n\n                        \n                    \n\n            \n        \n        \n            \n                \n                    \n                        \n                        active_draft\n                    \n                \n\n                \n                    \n                        getactive_draft()\n                    \n                \n                            \n                                \n                                    Defined in src/app/player/provider/pedals.service.ts:242\n                                \n                            \n\n            \n        \n        \n            \n                \n                    \n                        \n                        loom_ready\n                    \n                \n\n                \n                    \n                        getloom_ready()\n                    \n                \n                            \n                                \n                                    Defined in src/app/player/provider/pedals.service.ts:243\n                                \n                            \n\n            \n        \n        \n            \n                \n                    \n                        \n                        num_picks\n                    \n                \n\n                \n                    \n                        getnum_picks()\n                    \n                \n                            \n                                \n                                    Defined in src/app/player/provider/pedals.service.ts:244\n                                \n                            \n\n            \n        \n        \n            \n                \n                    \n                        \n                        pick_data\n                    \n                \n\n                \n                    \n                        getpick_data()\n                    \n                \n                            \n                                \n                                    Defined in src/app/player/provider/pedals.service.ts:245\n                                \n                            \n\n            \n        \n        \n            \n                \n                    \n                        \n                        num_pedals\n                    \n                \n\n                \n                    \n                        getnum_pedals()\n                    \n                \n                            \n                                \n                                    Defined in src/app/player/provider/pedals.service.ts:248\n                                \n                            \n                    \n                        \n                                physical pedals DB nodes\n\n\n                        \n                    \n\n            \n        \n        \n            \n                \n                    \n                        \n                        pedal_states\n                    \n                \n\n                \n                    \n                        getpedal_states()\n                    \n                \n                            \n                                \n                                    Defined in src/app/player/provider/pedals.service.ts:249\n                                \n                            \n\n            \n        \n        \n            \n                \n                    \n                        \n                        p_pedal_array\n                    \n                \n\n                \n                    \n                        getp_pedal_array()\n                    \n                \n                            \n                                \n                                    Defined in src/app/player/provider/pedals.service.ts:250\n                                \n                            \n\n            \n        \n        \n            \n                \n                    \n                        \n                        num_v_pedals\n                    \n                \n\n                \n                    \n                        getnum_v_pedals()\n                    \n                \n                            \n                                \n                                    Defined in src/app/player/provider/pedals.service.ts:253\n                                \n                            \n                    \n                        \n                                virtual pedals DB nodes\n\n\n                        \n                    \n\n            \n        \n        \n            \n                \n                    \n                        \n                        v_pedal_states\n                    \n                \n\n                \n                    \n                        getv_pedal_states()\n                    \n                \n                            \n                                \n                                    Defined in src/app/player/provider/pedals.service.ts:254\n                                \n                            \n\n            \n        \n        \n            \n                \n                    \n                        \n                        v_pedal_array\n                    \n                \n\n                \n                    \n                        getv_pedal_array()\n                    \n                \n                            \n                                \n                                    Defined in src/app/player/provider/pedals.service.ts:255\n                                \n                            \n\n            \n        \n        \n            \n                \n                    \n                        \n                        readyToWeave\n                    \n                \n\n                \n                    \n                        getreadyToWeave()\n                    \n                \n                            \n                                \n                                    Defined in src/app/player/provider/pedals.service.ts:257\n                                \n                            \n\n            \n        \n\n    \n\n\n    \n        import { Injectable } from '@angular/core';\nimport { WeavingPick } from '../model/player';\nimport { EventEmitter } from 'events';\nimport { getDatabase } from \"firebase/database\";\nimport { Database } from '@angular/fire/database';\nimport { NodeParams,\n  DBListener, OnlineStatus, DBWriter, \n  DBListenerArray, DBTwoWayArray, DBTwoWay } from '../model/dbnodes';\n\n/**\n * The Pedals service is in charge of updating the database \n * connections to communicate with the loom hardware. In AdaCAD, \n * its main responsibility is to keep an up-to-date list of the pedals\n * and when they get stepped on; as well as any other hardware \n * statuses.\n */\n\nexport interface Pedal {\n  id: number,\n  name: string,\n  u_name?: string,\n  key: string,\n  dbnode: DBListener | DBTwoWay,\n  state: any,\n  // op?: Operation\n}\n\n/** \n * Just a wrapper for how the database arranges the pedals + \n * loom information into nodes\n */\nexport class PedalStatus extends EventEmitter {\n  pi_online: OnlineStatus;     // is the pi online?\n  loom_online: DBListener;   // is the loom online?\n  vacuum_on: DBListener;     // is the loom running? (vacuum pump running)\n  loom_ready: DBListener;\n\n  active_draft: DBWriter;\n  num_picks: DBWriter;\n  pick_data: DBWriter;\n\n  num_pedals: DBListener;\n  pedal_states: DBListener;\n  pedal_array: DBListenerArray;\n\n  num_v_pedals: DBTwoWay;\n  v_pedal_states: DBTwoWay;\n  v_pedal_array: DBTwoWayArray;\n\n  constructor(db: Database) {\n    super();\n    const defaults = {\n      active_draft: false,\n      num_picks: 0,\n      pick_data: false\n    }\n    const listeners = {\n      // pi_online: 'pi-online',\n      loom_online: 'loom-online',\n      vacuum_on: 'vacuum-on',\n      num_pedals: 'num-pedals',\n      pedal_states: 'pedal-states',\n      loom_ready: 'loom-ready'\n    }\n    const writers = {\n      active_draft: 'active-draft',\n      num_picks: 'num-picks',\n      pick_data: 'pick-data'\n    }\n\n    function params(path: string): NodeParams { \n      return { db: db, root: 'pedals/', path: path };\n    };\n\n    this.pi_online = new OnlineStatus(params('pi-online'));\n    // this.pi_online.attach();\n    // this.loom_online = new DBListener(this.db, 'loom-online');\n\n    for (var l in listeners) {\n      const newL = new DBListener(params(listeners[l]));\n      Object.defineProperty(this, l, { value: newL });\n      // this[l].attach();\n    }\n\n    for (var w in writers) {\n      const newW = new DBWriter({...params(writers[w]), initVal: defaults[w]});\n      // console.log('writer created');\n      Object.defineProperty(this, w, { value: newW });\n      // console.log('writer added to status');\n      this[w].attach();\n      // console.log('writer attached');\n      this[w].setVal(defaults[w]);\n    }\n\n    // set up array of pedal listeners with the length and parent nodes\n    this.pedal_array = new DBListenerArray(this.num_pedals, this.pedal_states);\n\n    // set up virtual pedal nodes, which have their own length\n    // and parent nodes\n    this.num_v_pedals = new DBTwoWay(params('num-v-pedals'));\n    this.v_pedal_states = new DBTwoWay(params('v-pedal-states'));\n    this.v_pedal_array = new DBTwoWayArray(this.num_v_pedals, this.v_pedal_states);\n  }\n\n  toString() {\n    var str = \"\";\n    str += \"'pi-online': \" + this.pi_online.val + \"\\n\";\n    str += \"'loom-online': \" + this.loom_online.val + \"\\n\\n\";\n    str += \"'vacuum-on': \" + this.vacuum_on.val + \"\\n\";\n    str += \"'active-draft': \" + this.active_draft.val + \"\\n\";\n    str += \"'num-pedals': \" + this.num_pedals.val + \"\\n\";\n    return str;\n  }\n}\n\n/**\n * Definition of pedal service\n * @class\n * @event `pedal-added` data: how many pedals\n * @event `pedal-removed` data: how many pedals\n * @event `pedal-step` data: which pedal\n */\n@Injectable({\n  providedIn: 'root'\n})\nexport class PedalsService extends EventEmitter {\n\n  db: Database;\n  dbNodes: Array;\n\n  // status data\n  status: PedalStatus;\n  //  default = {\n  //     pi_online: false,     // is the pi online?\n  //     loom_online: false,   // is the loom online?\n  //     vacuum_on: false,     // is the loom running? (vacuum pump running)\n  //     active_draft: false,\n  //     num_pedals: 0,\n  //     pedal_states: {},\n  //     loom_ready: false     // is the loom requesting a draft row?\n  // };\n  p_pedals: Array = [];\n  v_pedals: Array = [];\n  \n  virtual: boolean = true;  // whether to mix virtual pedals in with the regular pedals array;\n\n  get pedals() { return this.p_pedals.concat(this.v_pedals); }\n\n  constructor() { \n    super();\n    // init: start listening to changes in Firebase DB from the Pi\n    console.log(\"pedals service constructor\");\n    this.db = getDatabase();\n    this.status = new PedalStatus(this.db);\n    // console.log(this.status);\n    \n    // if pi_online = \"true\" at start-up, just make sure\n    console.log(\"are you alive?\");\n    this.pi_online.checkAlive();\n    this.loom_online.attach();\n\n    this.virtualPedals(true);\n    this.loomPedals(false);\n\n    // listens for changes in pi online status\n    // if online, enable everything\n    this.pi_online.on('change', (state) =>\n      this.loomPedals(state));\n\n    // other listeners\n    this.loom_online.on('change', (state) => \n      this.loomListeners(state));\n\n    /** pedal array listeners */\n    this.p_pedal_array.on('ready', (state) => \n      this.weavingWriters(state)\n    );\n\n    this.p_pedal_array.on('child-added', (newNode) => {\n      console.log('pedals service: pedal added');\n      this.p_pedals.push(this.nodeToPedal(newNode));\n      this.v_pedals.map((el) => { el.id += 1; });\n      this.emit('pedal-added', this.p_pedals.length);\n    });\n\n    this.p_pedal_array.on('child-removed', () => {\n      this.p_pedals.pop();\n      this.v_pedals.map((el) => { el.id -= 1; });\n      this.emit('pedal-removed', this.p_pedals.length);\n    });\n\n    this.p_pedal_array.on('child-change', (e) => {\n      this.p_pedals[e.id].state = e.val;\n      this.emit('pedal-step', e.id);\n      // e = {id: which pedal's id, val: pedal state}\n      // call pedal.execute or whatever it ends up being\n      // this.player.onPedal(e.id, e.val);\n    });\n\n    /** @todo */\n    this.loom_ready.on('change', (state) => {\n      if (state) {\n        // send the next weaving row to DB\n        // update num_picks and pick_data accordingly\n      }\n    });\n    \n    /** virtual pedal listeners */\n    this.v_pedal_array.on('ready', (state) => {\n      console.log(\"weaving writers \", state);\n      this.weavingWriters(state);\n    });\n\n    this.v_pedal_array.on('child-added', (newNode) => {\n      console.log('pedals service: virtual pedal added');\n      let v = this.nodeToPedal(newNode);\n      v.id += this.p_pedals.length - (this.p_pedals.length ? 1 : 0);\n      this.v_pedals.push(v);\n      this.emit('pedal-added', this.v_pedals.length);\n    })\n\n    this.v_pedal_array.on('child-removed', () => {\n      this.v_pedals.pop();\n      this.emit('pedal-removed', this.v_pedals.length);\n    })\n\n    this.v_pedal_array.on('child-change', (e) => {\n      this.v_pedals[e.id].state = e.val;\n      this.emit('pedal-step', e.id);\n      // e = {id: which pedal's id, val: pedal state}\n      // call pedal.execute or whatever it ends up being\n      // this.player.onPedal(e.id, e.val);\n    });\n  }\n\n  /** online status */\n  get pi_online() { return this.status.pi_online; }\n  get loom_online() { return this.status.loom_online; }\n\n  /** weaving statuses */\n  get vacuum_on() { return this.status.vacuum_on; }\n  get active_draft() { return this.status.active_draft; }\n  get loom_ready() { return this.status.loom_ready; }\n  get num_picks() { return this.status.num_picks; }\n  get pick_data() { return this.status.pick_data; }\n\n  /** physical pedals DB nodes */\n  get num_pedals() { return this.status.num_pedals; }\n  get pedal_states() { return this.status.pedal_states; }\n  get p_pedal_array() { return this.status.pedal_array; }\n\n  /** virtual pedals DB nodes */\n  get num_v_pedals() { return this.status.num_v_pedals; }\n  get v_pedal_states() { return this.status.v_pedal_states; }\n  get v_pedal_array() { return this.status.v_pedal_array; }\n  \n  get readyToWeave() { return (this.loom_online.val && (this.p_pedal_array.ready || this.v_pedal_array.ready)); }\n\n  // attach all listeners to other values in DB\n  loomPedals(state: boolean) {\n    state ? this.p_pedal_array.attach() : this.p_pedal_array.detach();\n  }\n\n  /** functions to interact with virtual pedals */\n\n  virtualPedals(state: boolean) {\n    state? this.v_pedal_array.attach() : this.v_pedal_array.detach();\n  }\n\n  addVPedal() {\n    this.v_pedal_array.addNode(false);\n  }\n\n  togglePedalByID(id: number) {\n    console.log(\"toggling virtual pedal \", id);\n    if (id >= 0 && id \n    \n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n                   \n    \n         results matching \"\"\n        \n    \n    \n        No results matching \"\"\n    \n\n"},"classes/Pipe.html":{"url":"classes/Pipe.html","title":"class - Pipe","body":"\n                   \n\n\n\n\n\n\n\n\n\n\n\n\n\n  Classes\n  Pipe\n\n\n\n        \n            Info\n        \n        \n            Source\n        \n\n\n\n    \n        \n            File\n        \n        \n            src/app/mixer/model/operation/topology.ts\n        \n\n\n            \n                Description\n            \n            \n                Operation that takes one input and generates one output draft.\n\nINPUT: exactly one Draft\nOUTPUT: exactly one Draft\n\n\n            \n\n\n            \n                Implements\n            \n            \n                            TopologyDef\n            \n\n\n            \n    Index\n    \n        \n                \n                    \n                        Properties\n                    \n                \n                \n                    \n                        \n                            \n                                input\n                            \n                            \n                                output\n                            \n                            \n                                type\n                            \n                        \n                    \n                \n\n\n\n\n\n\n        \n    \n\n\n\n            \n    \n    \n        Properties\n    \n    \n        \n            \n                \n                    \n                    \n                        input\n                        \n                    \n                \n            \n                \n                    \n                        Type :         Draft\n\n                    \n                \n                    \n                        \n                                Defined in src/app/mixer/model/operation/topology.ts:56\n                        \n                    \n\n\n        \n    \n    \n        \n            \n                \n                    \n                    \n                        output\n                        \n                    \n                \n            \n                \n                    \n                        Type :         Draft\n\n                    \n                \n                    \n                        \n                                Defined in src/app/mixer/model/operation/topology.ts:56\n                        \n                    \n\n\n        \n    \n    \n        \n            \n                \n                    \n                    \n                        type\n                        \n                    \n                \n            \n                    \n                        \n                                Defined in src/app/mixer/model/operation/topology.ts:56\n                        \n                    \n\n\n        \n    \n\n\n\n\n\n\n\n\n    \n\n\n    \n        import { Draft } from \"../../../core/model/datatypes\";\nimport { ParamValue, OperationParam as OpParam, getParamValues } from \"./params\";\nimport { OperationInlet as OpInlet, InletDrafts } from \"./inlets\";\n\n/**\n* At its heart, an Operation is a very fancy function that outputs a Draft or several Drafts.\n* The function itself is perform(), and the Operation can take inputs in the form of \n* Drafts (inlets) or Parameters (params).\n*/\n\n/** \n* Types that an Operation's perform() function can handlle as input/output\n*/\n\n/** @type Union of types that can serve as input to Operation perform() functions. */\nexport type PerformDraftInput = InletDrafts | Array | Draft | null;\n\ntype MultiDraftInput = InletDrafts | Array;\n\n/** @type Union of types that Operation perform() functions can output. */\nexport type PerformOutput = Array | Draft;\n\n/**\n * OPERATION TOPOLOGY\n * Topology refers to the shape of the Operation in terms of its\n * number of input and output Drafts. Classifies Operations.\n */\n\nexport const TopologyName = {\n  pipe: 'pipe', \n  seed: 'seed', \n  merge: 'merge', \n  branch: 'branch', \n  bus: 'bus'\n} as const;\nexport type TopologyName = keyof typeof TopologyName;\n\ninterface TopologyDef { type: TopologyName; input: PerformDraftInput; output: PerformOutput; };\n\n/**\n* @class\n* Operation that can generate a draft with no inputs, may take an optional input\n* @method perform OpPerform function: \n* - INPUT: zero or one Draft\n* - OUTPUT: exactly one Draft\n*/\nexport class Seed implements TopologyDef { type: 'seed'; input: Draft | null; output: Draft; };\n\n/**\n* @class\n* Operation that takes one input and generates one output draft. \n* @method perform OpPerform function: \n* - INPUT: exactly one Draft\n* - OUTPUT: exactly one Draft\n*/\nexport class Pipe implements TopologyDef { type: 'pipe'; input: Draft; output: Draft; };\n\n/**\n* @class\n* Operation that takes many (N) inputs and generates one output draft.\n* @method perform OpPerform function: \n* - INPUT: Array of Drafts\n* - OUTPUT: exactly one Draft\n*/\nexport class Merge implements TopologyDef { type: 'merge'; input: InletDrafts | Array; output: Draft; };\n\n/**\n* @class\n* Operation that takes one input and generates many (N) output drafts.\n* @method perform OpPerform function:\n* - INPUT: exactly one Draft\n* - OUTPUT: Array of Drafts\n*/\nexport class Branch implements TopologyDef { type: 'branch'; input: Draft; output: Array; };\n\n/**\n* CURRENTLY UNUSED\n* @class\n* Operation that takes many (N) inputs and generates many (M) output drafts.\n* Number of inputs does not necessarily match number of outputs (N ?= M).\n* @method perform OpPerform function:  \n* - INPUT: Array of Drafts\n* - OUTPUT: Array of Drafts\n*/\nexport class Bus implements TopologyDef { type: 'bus'; input: Array | InletDrafts; output: Array; };\n\ntype TopologyIndex = {\n  'seed': Seed,\n  'pipe': Pipe,\n  'merge': Merge,\n  'branch': Branch,\n  'bus': Bus\n}\ntype OpTopology = TopologyIndex[TopologyName];\n\n/**\n * OPERATION CONSTRAINT\n * A Constraint on an Operation classifies it based on its\n * input requirements (both Drafts and Params).\n */\n\nexport const ConstraintOptions = {\n  req: 'req', \n  opt: 'opt', \n  none: 'none'\n} as const;\nexport type ConstraintOptions = keyof typeof ConstraintOptions;\n\nexport const ConstraintName = {\n  no_drafts: { input_drafts: 'none', input_params: 'req' }, \n  no_params: { input_drafts: 'req', input_params: 'none' }, \n  drafts_opt: { input_drafts: 'opt', input_params: 'req' }, \n  params_opt: { input_drafts: 'req', input_params: 'opt' }, \n  all_req: {input_drafts: 'req', input_params: 'req' },\n} as const;\ntype ConstraintName = keyof typeof ConstraintName;\n\ntype ConstraintDefs = {\n  [C in keyof typeof ConstraintName]: {\n    constraint: C;\n    input_drafts: typeof ConstraintName[C][\"input_drafts\"];\n    input_params: typeof ConstraintName[C][\"input_params\"];\n  }\n}\n\nexport type NoDrafts = ConstraintDefs[\"no_drafts\"];\nexport type NoParams = ConstraintDefs[\"no_params\"];\nexport type DraftsOptional = ConstraintDefs[\"drafts_opt\"];\nexport type ParamsOptional = ConstraintDefs[\"params_opt\"];\nexport type AllRequired = ConstraintDefs[\"all_req\"];\n\ntype ConstraintIndex = {\n  'no_drafts': NoDrafts, // does not accept input drafts\n  'no_params': NoParams, // does not accept params\n  'drafts_opt': DraftsOptional, // can take no params -- has default values\n  'params_opt': ParamsOptional, // can take zero input drafts\n  'all_req': AllRequired, // both inputs and params required\n}\ntype OpConstraint = ConstraintIndex[ConstraintName]; \n\n/** \n* Generic types for perform() functions, describing options \n* for input draft multiplicity (0, 1, N) and param requirement \n*/\n\ntype NoDraftsPerform = {(params: Array): Topo[\"output\"]};\ntype NoParamsPerform = {(inputs: Topo[\"input\"]): Topo[\"output\"]};\ntype ParamsOptionalPerform = {(inputs: Topo[\"input\"], params?: Array): Topo[\"output\"]}; \ntype DraftsOptionalPerform = {(params: Array, inputs?: Topo[\"input\"]): Topo[\"output\"]};  \ntype AllRequiredPerform = {(inputs: Topo[\"input\"], params: Array): Topo[\"output\"]};  \n\ntype PerformCallSigs = {\n  no_drafts: { [Topo in keyof TopologyIndex]: NoDraftsPerform; },\n  no_params: { [Topo in keyof TopologyIndex]: NoParamsPerform; },\n  drafts_opt: { [Topo in keyof TopologyIndex]: DraftsOptionalPerform; },\n  params_opt: { [Topo in keyof TopologyIndex]: ParamsOptionalPerform; },\n  all_req: { [Topo in keyof TopologyIndex]: AllRequiredPerform; }\n}\n\n/**\n * @interface OpClassifier\n * Key-value pairs for an Operation's Topology and Constraint.\n */\ninterface OpClassifier {\n  type: Topo[\"type\"] | '';\n  input_drafts: Constraint[\"input_drafts\"] | '';\n  input_params: Constraint[\"input_params\"] | '';\n}\n\n/** @type User-defined descriptive strings for any Operation. */\ntype OperationDescriptors = { name: string, displayname: string, dx: string };\n\n/**\n* A standard Operation's metadata -- i.e. everything not the perform() function\n* @param name the internal name of this opearation (CHANGING THESE WILL BREAK LEGACY VERSIONS)\n* @param displayname the name to show upon this operation\n* @param dx the description of this operation\n* @param max_inputs the maximum number of inputs (drafts) allowed directly into this operation\n* @param params the parameters associated with this operation\n* @method perform an OpPerform function\n*/\nexport interface OperationProperties extends OperationDescriptors {\n  max_inputs: number,\n  default_params?: Array;\n  params: Array,\n}\n\n/**\n * @type A function that serves as the perform() method for an Operation. \n * This generic type requires two type parameters:\n * @param Topo one of the PerformInput types\n * @param Constraint one of the PerformOutput types\n *\n * OpPerform to give call signature for perform() function \n * Topo  = Seed | Pipe | Merge | Branch | Bus\n * Constraint = NoDrafts | NoParams | DraftsOptional | ParamsOptional | AllRequired\n */\nexport type OpPerform = PerformCallSigs[Constraint[\"constraint\"]][Topo[\"type\"]];\n// type PerformArgs = Parameters>;\n\n/** TODO doublecheck inlets have been added correctly (fields for input drafts) */\nexport class BaseOp implements OperationProperties {\n  name: string;\n  old_names: Array;\n  displayname: string;\n  dx: string;\n  params: Array;\n  inlets: Array;\n  default_params?: Array;\n  max_inputs: number;\n  classifier: OpClassifier;\n  perform: OpPerform;\n\n  /** @constructor create an Operation using an object literal (keys and values) */\n  constructor (args: OpConstructorArgs);\n  /** @constructor create an Operation using direct arguments in the constructor (values only) */\n  constructor (...args: OpConstructorArray);\n  constructor (name: string, displayname: string, dx: string, perform: OpPerform);\n  constructor (name: string, displayname: string, dx: string, params: Array, perform: OpPerform);\n  constructor (nameOrArgs: any, displayname?: string, dx?: string, performOrParams?: OpPerform | Array, performWithParams?: OpPerform) {\n    // console.log((nameOrArgs.name != undefined));\n    this.classifier = { type: '', input_drafts: '', input_params: '' };\n    if (nameOrArgs.name) {\n      let args = nameOrArgs;\n      this.name = args.name;\n      this.displayname = args.displayname;\n      this.dx = args.dx;\n      this.perform = args.perform;\n      if (args.params) this.params = args.params;\n      else this.params = [];\n      if (args.inlets) this.inlets = args.inlets;\n      else this.inlets = [];\n    } else {\n      this.name = nameOrArgs;\n      this.displayname = displayname;\n      this.dx = dx;\n      if (performWithParams) {\n        let params = > performOrParams;\n        this.params = params;\n        this.default_params = getParamValues(params);\n        this.perform = performWithParams;\n      } else {\n        this.params = [];\n        this.perform = > performOrParams;\n      }\n    }\n  }\n\n  constrain(c: ConstraintName): void {\n    if (c == 'no_drafts') { this.max_inputs = 0; this.inlets = []; }\n    this.classifier.input_drafts = ConstraintName[c][\"input_drafts\"]; \n    this.classifier.input_params = ConstraintName[c][\"input_params\"];\n  }\n\n  type(t: TopologyName): BaseOp {\n    this.classifier.type = t;\n    return this;\n  }\n}\n\ntype ConstructorArgKeysIndex = {\n  [C in keyof ConstraintIndex]: C extends \"no_params\" ? {\n    [T in keyof TopologyIndex]: {\n      name: string, displayname: string, dx: string, old_names: string[],\n      inlets: OpInlet[], perform: OpPerform\n    }\n  } : C extends \"no_drafts\" ? {\n    [T in keyof TopologyIndex]: {\n      name: string, displayname: string, dx: string, old_names: string[],\n      params: OpParam[], perform: OpPerform\n    }\n  } : {\n    [T in keyof TopologyIndex]: {\n      name: string, displayname: string, dx: string, old_names: string[],\n      params: OpParam[], inlets: OpInlet[],\n      perform: OpPerform\n    }\n  }\n}\n\ntype ConstructorArrayIndex = {\n  [C in keyof ConstraintIndex]: C extends \"no_params\" ? {\n    [T in keyof TopologyIndex]: [\n      name: string, displayname: string, dx: string, old_names: string[],\n      inlets: OpInlet[], perform: OpPerform\n    ]\n  } : C extends \"no_drafts\" ? {\n    [T in keyof TopologyIndex]: [\n      name: string, displayname: string, dx: string, old_names: string[],\n      params: OpParam[], perform: OpPerform\n    ]\n  } : {\n    [T in keyof TopologyIndex]: [\n      name: string, displayname: string, dx: string, old_names: string[],\n      params: OpParam[], inlets: OpInlet[],\n      perform: OpPerform\n    ]\n  }\n}\n\ntype OpConstructorArgKeys = \nConstructorArgKeysIndex[Constraint[\"constraint\"]][Topo[\"type\"]];\n\ntype OpConstructorArray = \nConstructorArrayIndex[Constraint[\"constraint\"]][Topo[\"type\"]];\n\ntype OpConstructorArgs = \nOpConstructorArgKeys | OpConstructorArray;\n\n// use factory design pattern to apply classifiers to BaseOp?? Is this too convoluted\n// https://refactoring.guru/design-patterns/abstract-factory/typescript\nclass AbstractOpFactory {\n  NoDrafts(args: OpConstructorArgKeys): BaseOp;\n  NoDrafts(...args: OpConstructorArray): BaseOp;\n  NoDrafts(...args: any) {\n    let op = new BaseOp(...args);\n    op.constrain(\"no_drafts\");\n    return op;\n  }\n\n  NoParams(args: OpConstructorArgKeys): BaseOp;\n  NoParams(...args: OpConstructorArray): BaseOp;\n  NoParams(...args: any) {\n    let op = new BaseOp(...args);\n    op.constrain(\"no_params\");\n    return op;\n  }\n\n  DraftsOptional(args: OpConstructorArgKeys): BaseOp;\n  DraftsOptional(...args: OpConstructorArray): BaseOp;\n  DraftsOptional(...args: any) {\n    let op = new BaseOp(...args);\n    op.constrain(\"drafts_opt\");\n    return op;\n  }\n\n  ParamsOptional(args: OpConstructorArgKeys): BaseOp;\n  ParamsOptional(...args: OpConstructorArray): BaseOp;\n  ParamsOptional(...args: any) {\n    let op = new BaseOp(...args);\n    op.constrain(\"params_opt\");\n    return op;\n  }\n\n  AllRequired(args: OpConstructorArgKeys): BaseOp;\n  AllRequired(...args: OpConstructorArray): BaseOp;\n  AllRequired(...args: any) {\n    let op = new BaseOp(...args);\n    op.constrain(\"all_req\");\n    return op;\n  }\n}\n\n// combine with mix-ins design pattern (link: TypeScript docs website)\nfunction makeTopoFactory(topo: TopologyName) {\n  return class TopologyFactory extends AbstractOpFactory {\n    static base = new AbstractOpFactory();\n    \n    static NoDrafts(args: OpConstructorArgKeys): BaseOp;\n    static NoDrafts(...args: OpConstructorArray): BaseOp;\n    static NoDrafts(...args: any) {\n      return this.base.NoDrafts(...args).type(topo);\n    }\n\n    static NoParams(args: OpConstructorArgKeys): BaseOp;\n    static NoParams(...args: OpConstructorArray): BaseOp;\n    static NoParams(...args: any) {\n      return this.base.NoParams(...args).type(topo);\n    }\n\n    static DraftsOptional(args: OpConstructorArgKeys): BaseOp;\n    static DraftsOptional(...args: OpConstructorArray): BaseOp;\n    static DraftsOptional(...args: any) {\n      return this.base.DraftsOptional(...args).type(topo);\n    }\n\n    static ParamsOptional(args: OpConstructorArgKeys): BaseOp;\n    static ParamsOptional(...args: OpConstructorArray): BaseOp;\n    static ParamsOptional(...args: any) {\n      return this.base.ParamsOptional(...args).type(topo);\n    }\n\n    static AllRequired(args: OpConstructorArgKeys): BaseOp;\n    static AllRequired(...args: OpConstructorArray): BaseOp;\n    static AllRequired(...args: any) {\n      return this.base.AllRequired(...args).type(topo);\n    }\n  }\n}\n\nexport const OpFactories = {\n  Seed: makeTopoFactory(\"seed\"),\n  Pipe: makeTopoFactory(\"pipe\"),\n  Merge: makeTopoFactory(\"merge\"),\n  Branch: makeTopoFactory(\"merge\"),\n  Bus: makeTopoFactory(\"bus\"),\n}\n\n// export const SeedOperation = makeTopoFactory(\"seed\");\n// export const PipeOperation = makeTopoFactory(\"pipe\");\n// export const MergeOperation = makeTopoFactory(\"merge\");\n// export const BranchOperation = makeTopoFactory(\"merge\");\n// export const BusOperation = makeTopoFactory(\"bus\");\n\ntype TopologyOpIndex = {\n  [T in keyof TopologyIndex]: {\n    [C in keyof ConstraintIndex]: BaseOp;\n  }\n}\n\nexport type BuildableOperation = TopologyOpIndex[TopologyName][ConstraintName];\n    \n\n\n\n\n\n\n\n\n\n\n                   \n    \n         results matching \"\"\n        \n    \n    \n        No results matching \"\"\n    \n\n"},"components/PlayerComponent.html":{"url":"components/PlayerComponent.html","title":"component - PlayerComponent","body":"\n                   \n\n\n\n\n\n  Components\n  \n  PlayerComponent\n\n\n\n        \n            Info\n        \n        \n            Source\n        \n        \n            Template\n        \n        \n            Styles\n        \n        \n            DOM Tree\n        \n\n\n\n    \n    File\n\n\n    src/app/player/player.component.ts\n\n\n\n\n\n    \n        Implements\n    \n    \n                    OnInit\n    \n\n\n\n    Metadata\n    \n        \n\n\n\n\n\n\n\n\n\n\n\n            \n                selector\n                app-player\n            \n\n            \n                styleUrls\n                ./player.component.scss\n            \n\n\n\n            \n                templateUrl\n                ./player.component.html\n            \n\n\n\n\n\n\n\n\n        \n    \n\n\n    \n    Index\n    \n        \n                \n                    \n                        Properties\n                    \n                \n                \n                    \n                        \n                            \n                                mixerContainer\n                            \n                            \n                                op_sequencer\n                            \n                            \n                                open\n                            \n                            \n                                ownContainer\n                            \n                            \n                                    Public\n                                pls\n                            \n                            \n                                weaving_state\n                            \n                        \n                    \n                \n\n                \n                    \n                        Methods\n                    \n                \n                \n                    \n                        \n                            \n                                drawDraft\n                            \n                            \n                                ngAfterViewInit\n                            \n                            \n                                ngOnInit\n                            \n                            \n                                resizeContainer\n                            \n                            \n                                toggleOpen\n                            \n                        \n                    \n                \n\n                \n                    \n                        Inputs\n                    \n                \n                \n                    \n                        \n                            \n                                default_cell\n                            \n                            \n                                draft\n                            \n                        \n                    \n                \n\n                \n                    \n                        Outputs\n                    \n                \n                \n                    \n                        \n                            \n                                player-open\n                            \n                        \n                    \n                \n\n\n\n        \n    \n\n\n    \n    Constructor\n        \n            \n                \n                    \nconstructor(pls: PlayerService)\n                    \n                \n                        \n                            \n                                Defined in src/app/player/player.component.ts:36\n                            \n                        \n\n                \n                    \n                            \n                                    Parameters :\n                                    \n                                        \n                                            \n                                                Name\n                                                    Type\n                                                Optional\n                                            \n                                        \n                                        \n                                                \n                                                        pls\n                                                  \n                                                        \n                                                                        PlayerService\n                                                        \n                                                  \n                                                    \n                                                            No\n                                                    \n                                                    \n                                                \n                                        \n                                    \n                            \n                    \n                \n            \n        \n\n\n    \n    Inputs\n        \n            \n                \n                    \n                        \n                        default_cell\n                    \n                \n                \n                    \n                        Type :         number\n\n                    \n                \n                        \n                            \n                                    Defined in src/app/player/player.component.ts:19\n                            \n                        \n            \n        \n        \n            \n                \n                    \n                        \n                        draft\n                    \n                \n                \n                    \n                        Type :         Draft\n\n                    \n                \n                        \n                            \n                                    Defined in src/app/player/player.component.ts:20\n                            \n                        \n            \n        \n\n    \n    Outputs\n        \n            \n                \n                    \n                        \n                        player-open\n                    \n                \n                \n                    \n                        Type :         EventEmitter\n\n                    \n                \n                        \n                            \n                                    Defined in src/app/player/player.component.ts:22\n                            \n                        \n            \n        \n\n\n\n    \n    \n    \n        Methods\n    \n    \n        \n            \n                \n                    \n                    \n                        drawDraft\n                        \n                    \n                \n            \n            \n                \ndrawDraft()\n                \n            \n\n\n            \n                \n                    Defined in src/app/player/player.component.ts:92\n                \n            \n\n\n            \n                \n\n                    \n                        Returns :         void\n\n                    \n                \n            \n        \n    \n    \n        \n            \n                \n                    \n                    \n                        ngAfterViewInit\n                        \n                    \n                \n            \n            \n                \nngAfterViewInit()\n                \n            \n\n\n            \n                \n                    Defined in src/app/player/player.component.ts:49\n                \n            \n\n\n            \n                \n\n                    \n                        Returns :         void\n\n                    \n                \n            \n        \n    \n    \n        \n            \n                \n                    \n                    \n                        ngOnInit\n                        \n                    \n                \n            \n            \n                \nngOnInit()\n                \n            \n\n\n            \n                \n                    Defined in src/app/player/player.component.ts:44\n                \n            \n\n\n            \n                \n\n                    \n                        Returns :         void\n\n                    \n                \n            \n        \n    \n    \n        \n            \n                \n                    \n                    \n                        resizeContainer\n                        \n                    \n                \n            \n            \n                \nresizeContainer()\n                \n            \n\n\n            \n                \n                    Defined in src/app/player/player.component.ts:78\n                \n            \n\n\n            \n                \n\n                    \n                        Returns :         void\n\n                    \n                \n            \n        \n    \n    \n        \n            \n                \n                    \n                    \n                        toggleOpen\n                        \n                    \n                \n            \n            \n                \ntoggleOpen(state: boolean)\n                \n            \n\n\n            \n                \n                    Defined in src/app/player/player.component.ts:94\n                \n            \n\n\n            \n                \n\n                    \n                        Parameters :\n                        \n                        \n                            \n                                \n                                    Name\n                                    Type\n                                    Optional\n                                \n                            \n                            \n                                \n                                    state\n                                    \n                                                boolean\n                                    \n\n                                    \n                                        No\n                                    \n\n\n                                \n                            \n                        \n                    \n                    \n                    \n                    \n                        Returns :         void\n\n                    \n                    \n                        \n                    \n                \n            \n        \n    \n\n    \n    \n    \n        Properties\n    \n    \n        \n            \n                \n                    \n                    \n                        mixerContainer\n                        \n                    \n                \n            \n                \n                    \n                        Type :     HTMLElement\n\n                    \n                \n                    \n                        \n                                Defined in src/app/player/player.component.ts:36\n                        \n                    \n\n\n        \n    \n    \n        \n            \n                \n                    \n                    \n                        op_sequencer\n                        \n                    \n                \n            \n                \n                    \n                        Decorators : \n                        \n                        \n                            @ViewChild(OpSequencerComponent)\n                        \n                    \n                \n                    \n                        \n                                Defined in src/app/player/player.component.ts:17\n                        \n                    \n\n\n        \n    \n    \n        \n            \n                \n                    \n                    \n                        open\n                        \n                    \n                \n            \n                \n                    \n                        Type :         boolean\n\n                    \n                \n                \n                    \n                        Default value : true\n                    \n                \n                    \n                        \n                                Defined in src/app/player/player.component.ts:34\n                        \n                    \n\n\n        \n    \n    \n        \n            \n                \n                    \n                    \n                        ownContainer\n                        \n                    \n                \n            \n                \n                    \n                        Type :     HTMLElement\n\n                    \n                \n                    \n                        \n                                Defined in src/app/player/player.component.ts:35\n                        \n                    \n\n\n        \n    \n    \n        \n            \n                \n                    \n                    \n                            Public\n                        pls\n                        \n                    \n                \n            \n                \n                    \n                        Type :         PlayerService\n\n                    \n                \n                    \n                        \n                                Defined in src/app/player/player.component.ts:39\n                        \n                    \n\n\n        \n    \n    \n        \n            \n                \n                    \n                    \n                        weaving_state\n                        \n                    \n                \n            \n                \n                    \n                        Decorators : \n                        \n                        \n                            @ViewChild(WeavingStateComponent)\n                        \n                    \n                \n                    \n                        \n                                Defined in src/app/player/player.component.ts:16\n                        \n                    \n\n\n        \n    \n\n\n\n\n\n    \n        import { Component, Input, Output, OnInit, ViewChild, EventEmitter} from '@angular/core';\nimport { PlayerService } from './player.service';\n\nimport { OpSequencerComponent } from './op-sequencer/op-sequencer.component';\nimport { WeavingStateComponent } from './weaving-state/weaving-state.component';\n\nimport { Draft } from '../core/model/datatypes';\nimport { wefts, warps, isUp, isSet } from '../core/model/drafts';\n\n@Component({\n  selector: 'app-player',\n  templateUrl: './player.component.html',\n  styleUrls: ['./player.component.scss']\n})\nexport class PlayerComponent implements OnInit {\n  @ViewChild(WeavingStateComponent) weaving_state;\n  @ViewChild(OpSequencerComponent) op_sequencer;\n\n  @Input()  default_cell: number;\n  @Input('draft') active_draft: Draft;\n\n  @Output('player-open') playerOpen = new EventEmitter();\n  // @Input() \n  // get draft_set(): boolean {\n  //   return (this.pls.draft !== null);\n  // };\n\n  // get pls.draft(): Draft { return this._active_draft; }\n  // set pls.draft(value: Draft) {\n  //   this._active_draft = value;\n  // }\n  // private _active_draft: Draft = null;\n\n  open: boolean = true;\n  ownContainer: HTMLElement;\n  mixerContainer: HTMLElement;\n  \n  constructor(\n    public pls: PlayerService\n  ) { \n\n  }\n\n  ngOnInit(): void {\n    // console.log(\"ng on init, pedals: \", this.pls.pedals);\n    /** FOR TESTING ONLY: generate random draft and set it at start-up */\n  }\n\n  ngAfterViewInit() {\n    console.log(\"ng after view init, pedals: \", this.pls.pedals);\n    // const startPattern = this.oss.getOp('tabby');\n    // startPattern.perform([]).then((result) => {\n    //   this.pls.setDraft(result[0]);\n    //   this.drawDraft();\n    // });\n    this.ownContainer = document.querySelector(\"#player-container > .mat-expansion-panel\");\n    this.mixerContainer = document.querySelector('app-mixer > mat-drawer-container');\n    console.log(\"init w/ element refs \", this.ownContainer, this.mixerContainer);\n    // this.draftCanvas =  document.getElementById('active-draft-canvas');\n    // this.cx = this.draftCanvas.getContext(\"2d\");\n    // this.drawDraft(); //force call here because it likely didn't render previously. \n\n    // let expansionPanel = document.querySelector('mat-expansion-panel');\n    // expansionPanel.close();\n\n    this.open = false;\n    // this.resizeContainer();\n    this.drawDraft();\n\n    this.pls.redraw.on('redraw', () => {\n      console.log(\"redrawing \", this.pls.state);\n      // this.drawDraft();\n      // this.resizeContainer();\n    });\n\n  }\n\n  resizeContainer() {\n    console.log(\"resizing\");\n    let t = document.querySelector(\"app-topbar\").getBoundingClientRect().height;\n    if (this.open) {\n      this.mixerContainer.style.height = '0px';\n      this.ownContainer.style.height = 'calc(100vh - ' + t.toString() + 'px)';\n      this.ownContainer.style.overflow = \"scroll\";\n    } else {\n      let h = document.querySelector(\"mat-expansion-panel-header\").getBoundingClientRect().height;\n      this.mixerContainer.style.height = 'calc(100vh - '+ (h+t).toString() + 'px)';\n      this.ownContainer.style.overflow = \"unset\";\n    }\n  }\n\n  drawDraft() { this.weaving_state.drawDraft(); }\n\n  toggleOpen(state: boolean) {\n    console.log(\"toggling\");\n    this.open = state;\n    // this.resizeContainer();\n    this.playerOpen.emit(this.open);\n  }\n}\n  \n\n    \n\n    \n        \n  \n    \n      \n        {{ open? 'Close' : 'Open'}} Player\n      \n    \n\n    \n\n      \n        \n      \n      \n      \n\n      \n        \n      \n      \n\n    \n\n    \n    \n  \n\n\n\n\n    \n\n    \n                \n                    ./player.component.scss\n                \n                .player { \n  flex-wrap: wrap;\n  display: flex;\n  align-items: flex-start;\n  height: inherit; \n  flex: 1;\n}\n\n.top-aligned {\n  display: flex;\n  flex-direction: row;\n  align-items: flex-start;\n}\n\n.sequencer-block {\n  align-items: flex-start;\n  display: inline-flex;\n  height: inherit;\n  flex: 8;\n}\n\n.op-menu-block {\n  display: block;\n  max-width: 210px;\n}\n\n.first-row, .second-row {\n  flex-basis: 100%;\n}\n\n.break{\n  flex-basis: 100%;\n  border-width: 5px;\n  color: blue;\n}\n\n\n.mat-button {\n  background-color: #ff4081;\n  color: white;\n  width: inherit;\n  margin-left: 10px;\n  margin-right: 10px;\n}\n\n.mat-button.mat-button-disabled {\n  background-color: #fd6d9d;\n  color: rgba(255, 255, 255, 0.50);\n  \n}\n\n.mat-expansion-panel-header, \n.mat-expansion-panel-header.mat-expanded:focus {\n  background: #121f6b;\n}\n\n.mat-expansion-indicator::after {\n  color:#ffffff;\n}\n\n.mat-expansion-panel-body {\n  padding: 0px;\n}\n\n.square-corners {\n  border-radius: 0pt;\n  border-bottom-left-radius: 0pt;\n  border-bottom-right-radius: 0pt;\n  border-top-left-radius: 0pt;\n  border-top-right-radius: 0pt;\n}\n\n.mat-expansion-panel, .mat-accordion, .mat-expansion-panel-header,\n.mat-accordion .mat-expansion-panel:last-of-type, \n.mat-accordion .mat-expansion-panel:first-of-type  {\n  border: #ffffff 1px;\n  border-radius: 0pt;\n  border-bottom-left-radius: 0pt;\n  border-bottom-right-radius: 0pt;\n  border-top-left-radius: 0pt;\n  border-top-right-radius: 0pt;\n  border-bottom: 0pt;\n}\n\n.mat-expansion-panel-header:hover, \n.mat-expansion-panel-header.mat-expanded:hover,\n.mat-expansion-panel:not(.mat-expanded), \n.mat-expansion-panel-header:hover:not([aria-disabled=true])   {\n  background: #566be2;\n}\n\n.mat-expansion-panel-header-title, .mat-expansion-indicator{\n  color: white;\n}\n    \n\n    \n        \n        \n            \n                Legend\n            \n            \n                Html element\n            \n            \n                Component\n            \n            \n                Html element with directive\n            \n        \n    \n\n    \n\n\n\n\n\n\n        var COMPONENT_TEMPLATE = '                    {{ open? \\'Close\\' : \\'Open\\'}} Player                                                                                      '\n    var COMPONENTS = [{'name': 'ConnectionComponent', 'selector': 'app-connection'},{'name': 'DraftdetailComponent', 'selector': 'app-draftdetail'},{'name': 'ImageComponent', 'selector': 'app-image'},{'name': 'InletComponent', 'selector': 'app-inlet'},{'name': 'MixerComponent', 'selector': 'app-mixer'},{'name': 'MixerViewComponent', 'selector': 'app-mixerview'},{'name': 'NoteComponent', 'selector': 'app-note'},{'name': 'OperationComponent', 'selector': 'app-operation'},{'name': 'OpHelpModal', 'selector': 'app-ophelp'},{'name': 'OpsComponent', 'selector': 'app-ops'},{'name': 'OpSequencerComponent', 'selector': 'app-op-sequencer'},{'name': 'PaletteComponent', 'selector': 'app-palette'},{'name': 'ParameterComponent', 'selector': 'app-parameter'},{'name': 'PlayerComponent', 'selector': 'app-player'},{'name': 'SnackbarComponent', 'selector': 'app-snackbar'},{'name': 'SubdraftComponent', 'selector': 'app-subdraft'},{'name': 'VirtualPedalsComponent', 'selector': 'app-virtual-pedals'},{'name': 'WeavingStateComponent', 'selector': 'app-weaving-state'}];\n    var DIRECTIVES = [{'name': 'MarqueeComponent', 'selector': 'app-marquee'},{'name': 'SelectionComponent', 'selector': 'app-selection'}];\n    var ACTUAL_COMPONENT = {'name': 'PlayerComponent'};\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n                   \n    \n         results matching \"\"\n        \n    \n    \n        No results matching \"\"\n    \n\n"},"modules/PlayerModule.html":{"url":"modules/PlayerModule.html","title":"module - PlayerModule","body":"\n                   \n\n\n\n\n    Modules\n    PlayerModule\n\n\n\n    \n        \n\n\n\n\n\ndependencies\n\ndependencies\n\ncluster_PlayerModule\n\n\n\ncluster_PlayerModule_declarations\n\n\n\ncluster_PlayerModule_exports\n\n\n\n\nOpSequencerComponent\n\nOpSequencerComponent\n\n\n\nPlayerModule\n\nPlayerModule\n\nPlayerModule -->\n\nOpSequencerComponent->PlayerModule\n\n\n\n\n\nPlayerComponent\n\nPlayerComponent\n\nPlayerModule -->\n\nPlayerComponent->PlayerModule\n\n\n\n\n\nVirtualPedalsComponent\n\nVirtualPedalsComponent\n\nPlayerModule -->\n\nVirtualPedalsComponent->PlayerModule\n\n\n\n\n\nWeavingStateComponent\n\nWeavingStateComponent\n\nPlayerModule -->\n\nWeavingStateComponent->PlayerModule\n\n\n\n\n\nPlayerComponent \n\nPlayerComponent \n\nPlayerComponent  -->\n\nPlayerModule->PlayerComponent \n\n\n\n\n\n\n    \n    \n    \n        Zoom in\n        Reset\n        Zoom out\n    \n\n\n\n\n\n    \n        Info\n    \n    \n        Source\n    \n\n\n\n    \n\n        \n            File\n        \n        \n            src/app/player/player.module.ts\n        \n\n\n\n\n\n        \n            \n                \n                    Declarations\n                    \n                        \n                            OpSequencerComponent\n                        \n                        \n                            PlayerComponent\n                        \n                        \n                            VirtualPedalsComponent\n                        \n                        \n                            WeavingStateComponent\n                        \n                    \n                \n                \n                    Exports\n                    \n                        \n                            PlayerComponent\n                        \n                    \n                \n            \n        \n\n\n    \n\n\n    \n        import { NgModule } from '@angular/core';\nimport { CommonModule } from '@angular/common';\nimport { CoreModule } from '../core/core.module';\n\nimport { OpSequencerComponent } from './op-sequencer/op-sequencer.component';\nimport { WeavingStateComponent } from './weaving-state/weaving-state.component';\nimport { PlayerComponent } from './player.component';\nimport { VirtualPedalsComponent } from './virtual-pedals/virtual-pedals.component';\n\n@NgModule({\n  declarations: [\n    PlayerComponent,\n    OpSequencerComponent,\n    WeavingStateComponent,\n    VirtualPedalsComponent\n  ],\n  imports: [\n    CommonModule,\n    CoreModule\n  ],\n  exports: [\n    PlayerComponent\n  ],\n})\nexport class PlayerModule { }\n\n    \n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n                   \n    \n         results matching \"\"\n        \n    \n    \n        No results matching \"\"\n    \n\n"},"interfaces/PlayerOp.html":{"url":"interfaces/PlayerOp.html","title":"interface - PlayerOp","body":"\n                   \n\n\n\n\n\n\n\n\n\n\n\n\n\n\n  Interfaces\n  \n  PlayerOp\n\n\n\n        \n            Info\n        \n        \n            Source\n        \n\n\n\n    \n        \n            File\n        \n        \n            src/app/player/model/op_mappings.ts\n        \n\n\n\n\n        \n            Index\n            \n                \n                    \n                        \n                            Properties\n                        \n                    \n                    \n                        \n                            \n                                \n                                            Optional\n                                        \n                                            chain\n                                        \n                                \n                                \n                                            Optional\n                                        \n                                            dx\n                                        \n                                \n                                \n                                            Optional\n                                        \n                                            id\n                                        \n                                \n                                \n                                        \n                                            name\n                                        \n                                \n                                \n                                            Optional\n                                        \n                                            op\n                                        \n                                \n                                \n                                        \n                                            perform\n                                        \n                                \n                                \n                                            Optional\n                                        \n                                            struct_id\n                                        \n                                \n                                \n                                            Optional\n                                        \n                                            weavingOnly\n                                        \n                                \n                            \n                        \n                    \n                \n            \n        \n\n\n\n            \n                Properties\n                    \n                        \n                                \n                                    \n                                        \n                                        chain\n                                            \n                                                \n                                            \n                                        \n                                    \n                                \n                                \n                                    \n                                        chain:         boolean\n\n                                    \n                                \n\n\n                                    \n                                        \n                                            Type :         boolean\n\n                                        \n                                    \n\n                                    \n                                        \n                                            Optional\n                                        \n                                    \n\n\n\n\n                        \n                    \n                    \n                        \n                                \n                                    \n                                        \n                                        dx\n                                            \n                                                \n                                            \n                                        \n                                    \n                                \n                                \n                                    \n                                        dx:         string\n\n                                    \n                                \n\n\n                                    \n                                        \n                                            Type :         string\n\n                                        \n                                    \n\n                                    \n                                        \n                                            Optional\n                                        \n                                    \n\n\n\n\n                        \n                    \n                    \n                        \n                                \n                                    \n                                        \n                                        id\n                                            \n                                                \n                                            \n                                        \n                                    \n                                \n                                \n                                    \n                                        id:         number\n\n                                    \n                                \n\n\n                                    \n                                        \n                                            Type :         number\n\n                                        \n                                    \n\n                                    \n                                        \n                                            Optional\n                                        \n                                    \n\n\n\n\n                        \n                    \n                    \n                        \n                                \n                                    \n                                        \n                                        name\n                                            \n                                                \n                                            \n                                        \n                                    \n                                \n                                \n                                    \n                                        name:         string\n\n                                    \n                                \n\n\n                                    \n                                        \n                                            Type :         string\n\n                                        \n                                    \n\n\n\n\n\n                        \n                    \n                    \n                        \n                                \n                                    \n                                        \n                                        op\n                                            \n                                                \n                                            \n                                        \n                                    \n                                \n                                \n                                    \n                                        op:     GenericOp\n\n                                    \n                                \n\n\n                                    \n                                        \n                                            Type :     GenericOp\n\n                                        \n                                    \n\n                                    \n                                        \n                                            Optional\n                                        \n                                    \n\n\n\n\n                        \n                    \n                    \n                        \n                                \n                                    \n                                        \n                                        perform\n                                            \n                                                \n                                            \n                                        \n                                    \n                                \n                                \n                                    \n                                        perform:         function\n\n                                    \n                                \n\n\n                                    \n                                        \n                                            Type :         function\n\n                                        \n                                    \n\n\n\n\n\n                        \n                    \n                    \n                        \n                                \n                                    \n                                        \n                                        struct_id\n                                            \n                                                \n                                            \n                                        \n                                    \n                                \n                                \n                                    \n                                        struct_id:         number\n\n                                    \n                                \n\n\n                                    \n                                        \n                                            Type :         number\n\n                                        \n                                    \n\n                                    \n                                        \n                                            Optional\n                                        \n                                    \n\n\n\n\n                        \n                    \n                    \n                        \n                                \n                                    \n                                        \n                                        weavingOnly\n                                            \n                                                \n                                            \n                                        \n                                    \n                                \n                                \n                                    \n                                        weavingOnly:         boolean\n\n                                    \n                                \n\n\n                                    \n                                        \n                                            Type :         boolean\n\n                                        \n                                    \n\n                                    \n                                        \n                                            Optional\n                                        \n                                    \n\n\n\n\n                        \n                    \n            \n    \n\n\n    \n        import { Draft } from \"../../core/model/datatypes\";\nimport { wefts } from \"../../core/model/drafts\";\nimport { OpInput, TreeOperation as TreeOp, SingleInlet,\n  BaseOp as Op, BuildableOperation as GenericOp, \n  Seed, Pipe, AllRequired, DraftsOptional, \n  getDefaultParams, \n  ParamValue\n} from \"../../mixer/model/operation\";\nimport { PlayerState, initState, copyState } from \"./state\";\n\nimport { OpSequencer, makeOpSequencer } from \"./sequencer\";\nexport * from \"./sequencer\";\n\nexport interface PlayerOp {\n  id?: number,\n  name: string,\n  struct_id?: number,\n  dx?: string,\n  op?: GenericOp,\n  weavingOnly?: boolean,\n  chain?: boolean,\n  perform: (init: PlayerState) => Promise;\n}\nexport type SingleOp = PlayerOp;\n\n/** @const forward a player-specific function to progress through the draft */\nexport const forward: PlayerOp = {\n  name: 'forward',\n  perform: (init: PlayerState) => { \n    let res = copyState(init);\n    res.row = (init.row+1) % wefts(init.draft.drawdown);\n    res.pedal = 'forward';\n    if (res.weaving) res.numPicks++;\n    return Promise.resolve(res); \n  }\n}\n\n/** @const refresh a player-specific function to progress through the draft (re-sends the row to give more time) */\nexport const refresh: PlayerOp = {\n  name: 'refresh',\n  perform: (init: PlayerState) => { \n    let res = copyState(init);\n    if (res.weaving) res.numPicks++;\n    return Promise.resolve(res);\n  }\n}\n\n/** @const reverse a player-specific function to progress backwards through the draft */\nexport const reverse: PlayerOp = {\n  name: 'reverse',\n  perform: (init: PlayerState) => { \n    let res = copyState(init);\n    res.row = (init.row+wefts(init.draft.drawdown)-1) % wefts(init.draft.drawdown);\n    res.pedal = 'reverse';\n    if (res.weaving) res.numPicks++;\n    return Promise.resolve(res);\n  }\n}\n\nexport function playerOpFrom(op: GenericOp, params?: Array) {\n  // use \"rotate\" op as an example\n  let input_params = params ? params : getDefaultParams(op);\n  let perform;\n  if (op.classifier.type === 'pipe') {\n    const pipeOp = op as Op;\n    perform = function(init: PlayerState) {\n      let res = copyState(init);\n      res.draft = pipeOp.perform(init.draft, input_params);\n      res.row = (init.row) % wefts(res.draft.drawdown);\n      res.pedal = op.name;\n      return Promise.resolve(res);\n    }\n  } else if (op.classifier.type === 'seed') {\n    const seedOp = op as Op;\n    perform = function(init: PlayerState) {\n      let res = copyState(init);\n      res.draft = seedOp.perform(input_params);\n      res.row = (init.row) % wefts(res.draft.drawdown);\n      res.pedal = op.name;\n      return Promise.resolve(res);\n    }\n  }\n  \n  /** @TODO */\n  var p: PlayerOp = { \n    name: op.name,\n    dx: op.dx,\n    perform: perform\n  }\n  return p;\n}\n\n\n/** \n * @type \n * a TreeOperation is compatible with the player if it takes one or zero draft inputs \n * and outputs one draft.\n */\ntype PlayableTreeOp = TreeOp & \n  ( { inlets: [ SingleInlet ] } | \n    { inlets: [] });\n\n/** @function playerOpFromTree (untested) */\nfunction playerOpFromTree(op: PlayableTreeOp) {\n  let perform: PlayerOp[\"perform\"];\n  let param_input: OpInput = { op_name: op.name, drafts: [], params: getDefaultParams(op), inlet: -1 }\n  if (op.inlets.length == 0) {\n    perform = function(init: PlayerState) {\n      return op.perform([param_input]).then((output) => {\n        return { \n          draft: output[0], \n          row: init.row, \n          weaving: init.weaving, \n          pedal: op.name, \n          numPicks: init.numPicks \n        };\n      });\n    }\n  } else {\n    perform = function(init: PlayerState) {\n      let draft_input: OpInput = { op_name: 'child', drafts: [init.draft], params: [], inlet: 0}\n      return op.perform([param_input, draft_input]).then((output) => {\n        return { \n          draft: output[0], \n          row: init.row, \n          weaving: init.weaving,\n          pedal: op.name,\n          numPicks: init.numPicks };\n      });\n    }\n  }\n\n  var p: PlayerOp = { \n    name: op.name,\n    perform: perform\n  }\n  return p;\n}\n\n/** things that can happen in response to a pedal */\nexport interface PedalEvent {\n  id?: number,\n  pedal?: number,\n  name: string\n  perform: (init: PlayerState, ...args) => Promise;\n}\n\n/** \n * Basic combination: \n *  - 1 pedal, 1 operation\n *  - if pedal, then operation perform() \n * @param pedal ID number of pedal\n * @param op    ID number of Operation (assigned in Draft Player service)\n */\nexport interface PairedOp extends PedalEvent {\n  pedal:  number,\n  op:     PlayerOp,\n}\n\n// this ...args thing is such a hack\nexport function makePairedOp(p: number, op: PlayerOp): PairedOp {\n  let jankPerform = (init: PlayerState, ...args) => {\n    return op.perform(init);\n  }\n  return {\n    pedal: p,\n    name: op.name,\n    op: op,\n    perform: jankPerform\n  }\n}\n\n/**\n * Op chain:\n * - 1 pedal, multiple operations in a chain (array)\n * - if pedal, perform() each Op in sequence\n * @param pedal ID number of pedals\n * @param ops   array of Op ID numbers to execute in order\n */\nexport interface ChainOp extends PedalEvent{\n  pedal:  number,\n  ops:    Array,\n}\n\nexport function makeBlankChainOp(p?: number): ChainOp {\n  let res: ChainOp = {\n    pedal: -1,\n    name: \"\",\n    ops: [],\n    perform: (init: PlayerState, ...args) => {return Promise.resolve(init);}\n  }\n  \n  if (p) res.pedal = p;\n  return res;\n}\n\nexport function makeChainOp(ops: Array, p?: number): ChainOp {\n  let res = makeBlankChainOp(p);\n  res.name = \"ch\";\n  for (let o of ops) {\n    res.name += \"-\" + o.name;\n  }\n\n  res.ops = ops;\n  res.perform = (init: PlayerState, ...args) => {\n    let newState = copyState(init);\n    newState.pedal = \"ch\";\n    let d: Draft = init.draft;\n    for (let o of ops) {\n      if (o.op.classifier.type == 'seed') {\n        let base_op = o.op as Op;\n        d = base_op.perform(getDefaultParams(base_op));\n      } else if (o.op.classifier.type == 'pipe') {\n        let base_op = o.op as Op;\n        d = base_op.perform(d, getDefaultParams(base_op));\n      }\n      newState.pedal += \"-\" + o.name;\n    }\n\n    newState.draft = d;\n\n    return Promise.resolve(newState);\n  }\n\n  console.log('op chain: ', res);\n\n  return res;\n}\n\nexport type PedalOpMapping = Array;// & {\n//   [id: number]: PedalAction\n// }\n\nexport type MappingShapes = {\n  'pairing': PairedOp,\n  'chain': ChainOp,\n  'sequencer': OpSequencer\n};\n\nexport type PedalAction = MappingShapes[keyof MappingShapes];\n\nexport type MappingType = 'pairing' | 'chain' | 'sequencer';\n    \n\n\n\n\n\n\n\n\n\n                   \n    \n         results matching \"\"\n        \n    \n    \n        No results matching \"\"\n    \n\n"},"injectables/PlayerService.html":{"url":"injectables/PlayerService.html","title":"injectable - PlayerService","body":"\n                   \n\n\n\n\n\n\n\n\n\n  Injectables\n  PlayerService\n\n\n\n        \n            Info\n        \n        \n            Source\n        \n\n\n\n    \n        \n            File\n        \n        \n            src/app/player/player.service.ts\n        \n\n\n            \n                Description\n            \n            \n                The Draft Player Service is in charge of updating the the global PlayerState and tracking where the weaver is in the draft.\n\n            \n\n\n\n            \n    Index\n    \n        \n                \n                    \n                        Properties\n                    \n                \n                \n                    \n                        \n                            \n                                draftClassification\n                            \n                            \n                                loom\n                            \n                            \n                                    Public\n                                mappings\n                            \n                            \n                                    Public\n                                pedals\n                            \n                            \n                                redraw\n                            \n                            \n                                    Public\n                                seq\n                            \n                            \n                                state\n                            \n                        \n                    \n                \n\n                \n                    \n                        Methods\n                    \n                \n                \n                    \n                        \n                            \n                                changeLoomWidth\n                            \n                            \n                                currentRow\n                            \n                            \n                                hasCustomStructure\n                            \n                            \n                                onPedal\n                            \n                            \n                                setDraft\n                            \n                            \n                                setPedalOp\n                            \n                            \n                                structureOpFromDraft\n                            \n                            \n                                toggleDraftTiling\n                            \n                            \n                                toggleWeaving\n                            \n                        \n                    \n                \n\n\n\n\n\n                    \n                        \n                            Accessors\n                        \n                    \n                    \n                        \n                            \n                                \n                                    readyToWeave\n                                \n                                \n                                    weaving\n                                \n                                \n                                    draft\n                                \n                            \n                        \n                    \n        \n    \n\n\n            \n    Constructor\n        \n            \n                \n                    \nconstructor(pedals: PedalsService, mappings: MappingsService, seq: SequencerService)\n                    \n                \n                        \n                            \n                                Defined in src/app/player/player.service.ts:163\n                            \n                        \n\n                \n                    \n                            \n                                    Parameters :\n                                    \n                                        \n                                            \n                                                Name\n                                                    Type\n                                                Optional\n                                            \n                                        \n                                        \n                                                \n                                                        pedals\n                                                  \n                                                        \n                                                                        PedalsService\n                                                        \n                                                  \n                                                    \n                                                            No\n                                                    \n                                                    \n                                                \n                                                \n                                                        mappings\n                                                  \n                                                        \n                                                                        MappingsService\n                                                        \n                                                  \n                                                    \n                                                            No\n                                                    \n                                                    \n                                                \n                                                \n                                                        seq\n                                                  \n                                                        \n                                                                        SequencerService\n                                                        \n                                                  \n                                                    \n                                                            No\n                                                    \n                                                    \n                                                \n                                        \n                                    \n                            \n                    \n                \n            \n        \n\n\n            \n    \n    \n        Methods\n    \n    \n        \n            \n                \n                    \n                    \n                        changeLoomWidth\n                        \n                    \n                \n            \n            \n                \nchangeLoomWidth(e)\n                \n            \n\n\n            \n                \n                    Defined in src/app/player/player.service.ts:380\n                \n            \n\n\n            \n                \n\n                    \n                        Parameters :\n                        \n                        \n                            \n                                \n                                    Name\n                                    Optional\n                                \n                            \n                            \n                                \n                                    e\n\n                                    \n                                        No\n                                    \n\n\n                                \n                            \n                        \n                    \n                    \n                    \n                    \n                        Returns :         void\n\n                    \n                    \n                        \n                    \n                \n            \n        \n    \n    \n        \n            \n                \n                    \n                    \n                        currentRow\n                        \n                    \n                \n            \n            \n                \ncurrentRow()\n                \n            \n\n\n            \n                \n                    Defined in src/app/player/player.service.ts:355\n                \n            \n\n\n            \n                \n\n                    \n                        Returns :         WeavingPick\n\n                    \n                \n            \n        \n    \n    \n        \n            \n                \n                    \n                    \n                        hasCustomStructure\n                        \n                    \n                \n            \n            \n                \nhasCustomStructure(d: Draft)\n                \n            \n\n\n            \n                \n                    Defined in src/app/player/player.service.ts:283\n                \n            \n\n\n            \n                \n\n                    \n                        Parameters :\n                        \n                        \n                            \n                                \n                                    Name\n                                    Type\n                                    Optional\n                                \n                            \n                            \n                                \n                                    d\n                                    \n                                                Draft\n                                    \n\n                                    \n                                        No\n                                    \n\n\n                                \n                            \n                        \n                    \n                    \n                    \n                    \n                        Returns :         boolean\n\n                    \n                    \n                        \n                    \n                \n            \n        \n    \n    \n        \n            \n                \n                    \n                    \n                        onPedal\n                        \n                    \n                \n            \n            \n                \nonPedal(id: number)\n                \n            \n\n\n            \n                \n                    Defined in src/app/player/player.service.ts:335\n                \n            \n\n\n            \n                \n\n                    \n                        Parameters :\n                        \n                        \n                            \n                                \n                                    Name\n                                    Type\n                                    Optional\n                                \n                            \n                            \n                                \n                                    id\n                                    \n                                                number\n                                    \n\n                                    \n                                        No\n                                    \n\n\n                                \n                            \n                        \n                    \n                    \n                    \n                    \n                        Returns :         void\n\n                    \n                    \n                        \n                    \n                \n            \n        \n    \n    \n        \n            \n                \n                    \n                    \n                        setDraft\n                        \n                    \n                \n            \n            \n                \nsetDraft(d: Draft)\n                \n            \n\n\n            \n                \n                    Defined in src/app/player/player.service.ts:292\n                \n            \n\n\n            \n                \n\n                    \n                        Parameters :\n                        \n                        \n                            \n                                \n                                    Name\n                                    Type\n                                    Optional\n                                \n                            \n                            \n                                \n                                    d\n                                    \n                                                Draft\n                                    \n\n                                    \n                                        No\n                                    \n\n\n                                \n                            \n                        \n                    \n                    \n                    \n                    \n                        Returns :         void\n\n                    \n                    \n                        \n                    \n                \n            \n        \n    \n    \n        \n            \n                \n                    \n                    \n                        setPedalOp\n                        \n                    \n                \n            \n            \n                \nsetPedalOp(e: any, p: Pedal)\n                \n            \n\n\n            \n                \n                    Defined in src/app/player/player.service.ts:326\n                \n            \n\n\n            \n                \n\n                    \n                        Parameters :\n                        \n                        \n                            \n                                \n                                    Name\n                                    Type\n                                    Optional\n                                \n                            \n                            \n                                \n                                    e\n                                    \n                                                any\n                                    \n\n                                    \n                                        No\n                                    \n\n\n                                \n                                \n                                    p\n                                    \n                                                Pedal\n                                    \n\n                                    \n                                        No\n                                    \n\n\n                                \n                            \n                        \n                    \n                    \n                    \n                    \n                        Returns :         void\n\n                    \n                    \n                        \n                    \n                \n            \n        \n    \n    \n        \n            \n                \n                    \n                    \n                        structureOpFromDraft\n                        \n                    \n                \n            \n            \n                \nstructureOpFromDraft(d: Draft)\n                \n            \n\n\n            \n                \n                    Defined in src/app/player/player.service.ts:311\n                \n            \n\n\n            \n                \n\n                    \n                        Parameters :\n                        \n                        \n                            \n                                \n                                    Name\n                                    Type\n                                    Optional\n                                    Description\n                                \n                            \n                            \n                                \n                                    d\n                                    \n                                                Draft\n                                    \n\n                                    \n                                        No\n                                    \n\n\n                                    \n                                        the Draft to turn into a custom structure Operation\n\n                                    \n                                \n                            \n                        \n                    \n                    \n                    \n                    \n                        Returns :         PlayerOp\n\n                    \n                    \n                        \n                    \n                \n            \n        \n    \n    \n        \n            \n                \n                    \n                    \n                        toggleDraftTiling\n                        \n                    \n                \n            \n            \n                \ntoggleDraftTiling(e)\n                \n            \n\n\n            \n                \n                    Defined in src/app/player/player.service.ts:374\n                \n            \n\n\n            \n                \n\n                    \n                        Parameters :\n                        \n                        \n                            \n                                \n                                    Name\n                                    Optional\n                                \n                            \n                            \n                                \n                                    e\n\n                                    \n                                        No\n                                    \n\n\n                                \n                            \n                        \n                    \n                    \n                    \n                    \n                        Returns :         void\n\n                    \n                    \n                        \n                    \n                \n            \n        \n    \n    \n        \n            \n                \n                    \n                    \n                        toggleWeaving\n                        \n                    \n                \n            \n            \n                \ntoggleWeaving()\n                \n            \n\n\n            \n                \n                    Defined in src/app/player/player.service.ts:386\n                \n            \n\n\n            \n                \n\n                    \n                        Returns :         void\n\n                    \n                \n            \n        \n    \n\n            \n    \n    \n        Properties\n    \n    \n        \n            \n                \n                    \n                    \n                        draftClassification\n                        \n                    \n                \n            \n                \n                    \n                        Type :         Array\n\n                    \n                \n                \n                    \n                        Default value : []\n                    \n                \n                    \n                        \n                                Defined in src/app/player/player.service.ts:163\n                        \n                    \n\n\n        \n    \n    \n        \n            \n                \n                    \n                    \n                        loom\n                        \n                    \n                \n            \n                \n                    \n                        Type :         LoomConfig\n\n                    \n                \n                    \n                        \n                                Defined in src/app/player/player.service.ts:161\n                        \n                    \n\n\n        \n    \n    \n        \n            \n                \n                    \n                    \n                            Public\n                        mappings\n                        \n                    \n                \n            \n                \n                    \n                        Type :         MappingsService\n\n                    \n                \n                    \n                        \n                                Defined in src/app/player/player.service.ts:167\n                        \n                    \n\n\n        \n    \n    \n        \n            \n                \n                    \n                    \n                            Public\n                        pedals\n                        \n                    \n                \n            \n                \n                    \n                        Type :         PedalsService\n\n                    \n                \n                    \n                        \n                                Defined in src/app/player/player.service.ts:166\n                        \n                    \n\n\n        \n    \n    \n        \n            \n                \n                    \n                    \n                        redraw\n                        \n                    \n                \n            \n                \n                    \n                        Default value : new EventEmitter()\n                    \n                \n                    \n                        \n                                Defined in src/app/player/player.service.ts:162\n                        \n                    \n\n\n        \n    \n    \n        \n            \n                \n                    \n                    \n                            Public\n                        seq\n                        \n                    \n                \n            \n                \n                    \n                        Type :         SequencerService\n\n                    \n                \n                    \n                        \n                                Defined in src/app/player/player.service.ts:168\n                        \n                    \n\n\n        \n    \n    \n        \n            \n                \n                    \n                    \n                        state\n                        \n                    \n                \n            \n                \n                    \n                        Type :         PlayerState\n\n                    \n                \n                    \n                        \n                                Defined in src/app/player/player.service.ts:160\n                        \n                    \n\n\n        \n    \n\n\n            \n    \n        Accessors\n    \n        \n            \n                \n                    \n                        \n                        readyToWeave\n                    \n                \n\n                \n                    \n                        getreadyToWeave()\n                    \n                \n                            \n                                \n                                    Defined in src/app/player/player.service.ts:269\n                                \n                            \n\n            \n        \n        \n            \n                \n                    \n                        \n                        weaving\n                    \n                \n\n                \n                    \n                        getweaving()\n                    \n                \n                            \n                                \n                                    Defined in src/app/player/player.service.ts:276\n                                \n                            \n                    \n                        \n                                get whether or not the loom is weaving\n\n\n                        \n                    \n\n            \n        \n        \n            \n                \n                    \n                        \n                        draft\n                    \n                \n\n                \n                    \n                        getdraft()\n                    \n                \n                            \n                                \n                                    Defined in src/app/player/player.service.ts:279\n                                \n                            \n\n            \n        \n\n    \n\n\n    \n        import { Injectable} from '@angular/core';\nimport { EventEmitter } from 'events';\nimport { wefts } from '../core/model/drafts';\nimport { Draft } from '../core/model/datatypes';\nimport { BaseOp, BuildableOperation as GenericOp, \n  TreeOperation as TreeOp,\n  Seed, Pipe, DraftsOptional, AllRequired, getDefaultParams,\n  SingleInlet, OpInput\n} from '../mixer/model/operation';\nimport * as defs from '../mixer/model/op_definitions';\nimport { PlayerOp, playerOpFrom, \n  ChainOp, OpSequencer, PairedOp, PedalOpMapping,\n  makePairedOp, makeChainOp, makeOpSequencer,\n  forward, refresh, reverse\n} from './model/op_mappings';\nimport { PlayerState, WeavingPick, copyState, initState } from './model/state';\nimport { MappingsService } from './provider/mappings.service';\nimport { PedalsService, PedalStatus, Pedal } from './provider/pedals.service';\nimport { SequencerService } from './provider/sequencer.service';\n// import { OperationService } from '../mixer/provider/operation.service';\n\nexport interface DraftOperationClassification {\n  category: string,\n  dx: string,\n  ops: Array \n }\n\ninterface LoomConfig {\n  warps: number,\n  draftTiling: boolean\n}\n\n/**\n * @class PedalConfig\n * @desc OLD, UPDATE THIS ---> \n * Represents a set of two-way bindings between a set of Pedals\n * and a set of (Player)Operations. A pedal can only be bound to one\n * Action (a single Op, a chain of Ops, or to control an OpRoulette)\n * @todo The second restriction may change, it might make sense for pedals to\n * get bound to a sequence of operations.\n */\nclass PedalConfig {\n  // numPedals: number;\n  pedals: Array;\n  ops: Array;\n  availPedals: Array;\n  mapping: PedalOpMapping;\n\n  constructor(pedalArray: Array, loadConfig = false) {\n    this.pedals = pedalArray;\n    this.ops = []\n    this.availPedals = pedalArray.map((p) => p.id);\n    this.mapping = [];\n  }\n\n  get numPedals() {\n    return this.pedals.length;\n  }\n\n  get numMappings() {\n    return Object.entries(this.mapping).length;\n  }\n\n  addPedal(p: Pedal) {\n    // this.pedals.push(p);\n    this.availPedals.push(p.id);\n  }\n\n  remPedal() {\n    // this.pedals.pop();\n    this.availPedals.filter((id) => id != this.pedals.length);\n  }\n\n  addOperation(o: PlayerOp, chain?: boolean) {\n    o.id = this.ops.length;\n    this.ops.push(o);\n    if (chain) {\n      o.chain = chain;\n    }\n    // this.unpairedOps.push(o);\n    // console.log(this.ops);\n  }\n\n  pair(pedalId: number, opName: string) {\n    let o = this.ops.findIndex((op) => op.name == opName);\n    // let thisOp = this.unpairedOps.splice(o, 1);\n    let thisOp = this.ops;\n    this.mapping[pedalId] = makePairedOp(pedalId, thisOp[o]); \n  }\n\n  chain(pedalId: number, opName: string) {\n    let o = this.ops[this.ops.findIndex((op) => op.name == opName)];\n    if (this.pedalIsChained(pedalId)) {\n      let curr_ops = ( this.mapping[pedalId]).ops;\n      this.mapping[pedalId] = makeChainOp(curr_ops.concat([o]), pedalId);\n    } else if (this.pedalIsPaired(pedalId)) {\n      let first_op = ( this.mapping[pedalId]).op;\n      this.mapping[pedalId] = makeChainOp([first_op].concat([o]), pedalId);\n    } else {\n      this.mapping[pedalId] = makeChainOp([o], pedalId);\n    }\n  }\n\n  chainToPedal(pedalId: number, ops: Array) {\n    let op_array = ops.map((name) => this.ops[this.ops.findIndex((op) => op.name == name)]);\n    if (this.pedalIsChained(pedalId)) { \n      // if pedal already has a chain, add ops to the chain\n      let curr_ops = ( this.mapping[pedalId]).ops;\n      this.mapping[pedalId] = makeChainOp(curr_ops.concat(op_array), pedalId);\n    } else if (this.pedalIsPaired(pedalId)) {\n      // if pedal is paired, you can turn it into a chain\n      let first_op = ( this.mapping[pedalId]).op;\n      this.mapping[pedalId] = makeChainOp([first_op].concat(op_array), pedalId);\n    } else {\n      // pedal doesn't have anything mapped, just add a new chain\n      this.mapping[pedalId] = makeChainOp(op_array, pedalId);\n    }\n  }\n\n  // will return true if an op is mapped to a pedal in any way\n  opIsMapped(opName: string): boolean {\n    if (this.mapping.filter((m) => m.name.includes(opName)).length > 0) {\n      return true;\n    } else return false;\n  }\n\n  pedalIsMapped(id: number) {\n    return (this.mapping[id]);\n  }\n\n  pedalIsChained(id: number) {\n    if (this.pedalIsMapped(id) && this.mapping[id].name.startsWith('ch')) { return true; }\n    else {return false; }\n  }\n\n  pedalIsPaired(id: number) {\n    return (this.pedalIsMapped(id) && !this.pedalIsChained(id));\n  }\n\n  unpairPedal(id: number) {\n    console.log(`unpairing pedal ${id}`);\n    // let op = this.pairs[id];\n    // this.unpairedOps.splice(op.id, 0, op);\n    delete this.mapping[id];\n  }\n\n  // unpairOp(name: string) {\n  //   let pid = this.opIsPaired(name);\n  //   this.unpairPedal(pid);\n  // }\n}\n\n/**\n * The Draft Player Service is in charge of updating the the global PlayerState and tracking where the weaver is in the draft.\n */\n@Injectable({\n  providedIn: 'root'\n})\nexport class PlayerService {\n  state: PlayerState;\n  loom: LoomConfig;\n  redraw = new EventEmitter();\n  draftClassification: Array = [];\n\n  constructor(\n    public pedals: PedalsService,\n    public mappings: MappingsService,\n    public seq: SequencerService,\n    // private oss: OperationService\n  ) {\n    // this.draft = null; \n    console.log(\"draft player constructor\");\n    // const startPattern = playerOpFrom(defs.tabby);\n    // console.log(startPattern);\n    // startPattern.perform(nullOpInput).then((result) => {\n    //   console.log(result);\n    //   this.setDraft(result[0]);\n    // });\n\n    this.state = initState();\n    this.state.draft = defs.tabby.perform([1]);\n\n    this.loom = { warps: 2640, draftTiling: true };\n\n    // load the draft progress ops\n    mappings.addOperation(forward);\n    mappings.addOperation(refresh);\n    mappings.addOperation(reverse);\n\n    function addOp(op: GenericOp, params?: Array) {\n      let p_op = params ? playerOpFrom(op, params) : playerOpFrom(op);\n      mappings.addOperation(p_op);\n      return p_op;\n    }\n\n    // load ops from the main mixer\n    const tabby = addOp(defs.tabby);\n    const twill = addOp(defs.twill);\n    const satin = addOp(defs.satin);\n    const waffle = addOp(defs.waffle);\n    const basket = addOp(defs.basket);\n    const rib = addOp(defs.rib);\n    const random = addOp(defs.random);\n    const rotate = addOp(defs.rotate);\n    const invert = addOp(defs.invert);\n    const shiftx = addOp(defs.shiftx);\n    const shifty = addOp(defs.shifty);\n    const slope = addOp(defs.slope);\n    const flipx = addOp(defs.flipx);\n    const flipy = addOp(defs.flipy);\n    const symm = addOp(defs.makesymmetric);\n    const stretch = addOp(defs.stretch);\n    const bindweft = addOp(defs.bindweftfloats);\n    const bindwarp = addOp(defs.bindwarpfloats);\n\n    const tile: PlayerOp = {\n      name: defs.tile.name,\n      perform: (init: PlayerState) => {\n        let res = copyState(init);\n        res.draft = defs.tile.perform([init.draft], [2, 2]);\n        res.row = init.row % wefts(res.draft.drawdown);\n        res.pedal = defs.tile.name;\n        return Promise.resolve(res);\n      }\n    }\n    mappings.addOperation(tile);\n\n    this.draftClassification.push(\n      {category: 'structure',\n      dx: \"0-1 input, 1 output, algorithmically generates weave structures based on parameters\",\n      ops: [tabby, twill, satin, waffle, random]}\n    );\n\n    this.draftClassification.push(\n      { category: 'custom structure',\n        dx: \"custom structures loaded from the Mixer\",\n        ops: []\n      }\n    );\n\n    this.draftClassification.push(\n      {category: 'transformation',\n      dx: \"1 input, 1 output, applies an operation to the input that transforms it in some way\",\n      ops: [invert, flipx, flipy, shiftx, shifty, rotate, slope, stretch, symm, tile, bindwarp, bindweft]}\n    );\n\n    // //test this\n    // console.log(this.oss.getOp('germanify'));\n    // const germanify = this.pedalOps.addOperation(playerOpFromTree( this.oss.getOp('germanify')));\n    \n    console.log('pedal ops added');\n\n    pedals.on('pedal-step', (id) => this.onPedal(id));\n\n    pedals.on('pedal-added', (n) => {\n      if (n == 1) {\n        mappings.pair(0, 'forward');\n        console.log(\"pedals mapping\", mappings);\n      } else if (n == 2) {\n        if (mappings.pedalIsMapped(0)) mappings.unmap(0);\n        mappings[0] = this.seq;\n        mappings[1] = this.seq;\n        this.seq.addPedals(0, 1);\n        console.log(\"pedals mapping\", mappings);\n      }\n    })\n  }\n\n  get readyToWeave() {  // need either one pedal forward or one pedal reverse, in order to progress through draft\n    return (this.pedals.readyToWeave && \n      (this.mappings.opIsMapped('forward') || this.mappings.opIsMapped('reverse') || this.seq.readyToWeave)\n    );\n  }\n\n  /** get whether or not the loom is weaving */\n  get weaving() {\n    return this.pedals.active_draft.val;\n  }\n  get draft() {\n    return this.state.draft;\n  }\n\n  hasCustomStructure(d: Draft): boolean {\n    let ops = this.draftClassification.filter((c) => c.category == \"custom structure\")[0].ops;\n    console.log(ops);\n    if (ops.length == 0) return false;\n    return ops\n      .map((el) => { return el.struct_id == d.id})\n      .reduce((a, b) => { return a || b; });\n  }\n\n  setDraft(d: Draft) {\n    if (!this.hasCustomStructure(d)) {\n      console.log(\"a new structure!\");\n      let structOps = this.draftClassification.filter((c) => c.category == \"custom structure\")[0].ops;\n      let op = this.structureOpFromDraft(d);\n      structOps.push(op);\n      this.mappings.addOperation(op);\n    }\n    this.state.draft = d;\n    this.state.row = 0;\n    // console.log(\"player has active draft\");\n    // console.log(\"draft is \", this.draft);\n    console.log(\"draft set \", this.state);\n  }\n\n  /**\n   * \n   * @param d the Draft to turn into a custom structure Operation\n   */\n  structureOpFromDraft(d: Draft) {\n    let structOp: PlayerOp = {\n      name: d.gen_name,\n      struct_id: d.id,\n      perform: (init: PlayerState) => {\n        let res = copyState(init);\n        res.draft = d;\n        res.row = init.row % wefts(d.drawdown);\n        return Promise.resolve(res);\n      }\n    };\n    return structOp;\n  }\n\n  // e is a string = op.name\n  setPedalOp(e: any, p: Pedal) {\n    console.log(e, p);\n    if (this.mappings.pedalIsPaired(p.id)) {\n      this.mappings.unmap(p.id);\n    }\n    this.mappings.pair(p.id, e);\n    console.log(\"pedals map\", this.mappings);\n  }\n\n  onPedal(id: number) {\n    console.log('player service: pedal ', id);\n    let mapped = this.mappings.getMap(id);\n    // console.log(this.mappings);\n    // console.log(this.seq);\n    if (mapped) {\n      console.log('mapping exists for pedal');\n      mapped.perform(this.state, id)\n      .then((state: PlayerState) => {\n        this.state = copyState(state);\n        console.log(this.state);\n        this.redraw.emit('redraw');\n        if (this.state.weaving) {\n          console.log(\"draft player: sending row\");\n          this.pedals.sendDraftRow(this.currentRow());\n        }\n      });\n    }\n  }\n\n  currentRow() {\n    let {draft, row} = this.state;\n    let draftRow = draft.drawdown[row % wefts(draft.drawdown)];\n    let data = \"\";\n\n    let targetLength = (this.loom.draftTiling ? this.loom.warps : draftRow.length);\n    while (data.length  {\n    //   if (state) {\n    //   }\n    // });\n  }\n}\n\n    \n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n                   \n    \n         results matching \"\"\n        \n    \n    \n        No results matching \"\"\n    \n\n"},"interfaces/PlayerState.html":{"url":"interfaces/PlayerState.html","title":"interface - PlayerState","body":"\n                   \n\n\n\n\n\n\n\n\n\n\n\n\n\n\n  Interfaces\n  \n  PlayerState\n\n\n\n        \n            Info\n        \n        \n            Source\n        \n\n\n\n    \n        \n            File\n        \n        \n            src/app/player/model/state.ts\n        \n\n\n            \n                Description\n            \n            \n                PlayerState represents the Draft Player as an FSM\n\n            \n\n\n        \n            Index\n            \n                \n                    \n                        \n                            Properties\n                        \n                    \n                    \n                        \n                            \n                                \n                                        \n                                            draft\n                                        \n                                \n                                \n                                        \n                                            numPicks\n                                        \n                                \n                                \n                                        \n                                            pedal\n                                        \n                                \n                                \n                                        \n                                            row\n                                        \n                                \n                                \n                                        \n                                            weaving\n                                        \n                                \n                            \n                        \n                    \n                \n            \n        \n\n\n\n            \n                Properties\n                    \n                        \n                                \n                                    \n                                        \n                                        draft\n                                            \n                                                \n                                            \n                                        \n                                    \n                                \n                                \n                                    \n                                        draft:         Draft\n\n                                    \n                                \n\n\n                                    \n                                        \n                                            Type :         Draft\n\n                                        \n                                    \n\n\n\n\n\n                        \n                    \n                    \n                        \n                                \n                                    \n                                        \n                                        numPicks\n                                            \n                                                \n                                            \n                                        \n                                    \n                                \n                                \n                                    \n                                        numPicks:         number\n\n                                    \n                                \n\n\n                                    \n                                        \n                                            Type :         number\n\n                                        \n                                    \n\n\n\n\n\n                        \n                    \n                    \n                        \n                                \n                                    \n                                        \n                                        pedal\n                                            \n                                                \n                                            \n                                        \n                                    \n                                \n                                \n                                    \n                                        pedal:         string\n\n                                    \n                                \n\n\n                                    \n                                        \n                                            Type :         string\n\n                                        \n                                    \n\n\n\n\n\n                        \n                    \n                    \n                        \n                                \n                                    \n                                        \n                                        row\n                                            \n                                                \n                                            \n                                        \n                                    \n                                \n                                \n                                    \n                                        row:         number\n\n                                    \n                                \n\n\n                                    \n                                        \n                                            Type :         number\n\n                                        \n                                    \n\n\n\n\n\n                        \n                    \n                    \n                        \n                                \n                                    \n                                        \n                                        weaving\n                                            \n                                                \n                                            \n                                        \n                                    \n                                \n                                \n                                    \n                                        weaving:         boolean\n\n                                    \n                                \n\n\n                                    \n                                        \n                                            Type :         boolean\n\n                                        \n                                    \n\n\n\n\n\n                        \n                    \n            \n    \n\n\n    \n        import { Draft } from \"../../core/model/datatypes\"\nimport { initDraft } from \"../../core/model/drafts\";\n\n/** @interface\n * PlayerState represents the Draft Player as an FSM\n * @param draft The Draft currently loaded by the weaver\n * @param row which row of the draft the weaving is at\n * @param weaving whether or not the TC2 is actually running, or the weaver is just previewing the draft\n * @param numPicks the number of rows (picks) that have been sent to the loom so far (because the TC2 needs to receive this as part of the pick data)\n * @param pedal the name (mapped function) of the pedal that triggered this state change\n */\nexport interface PlayerState {\n  draft: Draft,\n  row: number,\n  pedal: string,\n  weaving: boolean,\n  numPicks: number,\n}\n\nexport function copyState(init: PlayerState): PlayerState {\n  return Object.assign({}, init);\n}\n\nexport function initState(): PlayerState { \n  return {\n    draft: initDraft(),\n    row: 0,\n    pedal: \"\",\n    weaving: false,\n    numPicks: 0\n}};\n\nexport interface WeavingPick {\n  pickNum: number,\n  rowData: string\n}\n    \n\n\n\n\n\n\n\n\n\n                   \n    \n         results matching \"\"\n        \n    \n    \n        No results matching \"\"\n    \n\n"},"interfaces/PlayerState-1.html":{"url":"interfaces/PlayerState-1.html","title":"interface - PlayerState-1","body":"\n                   \n\n\n\n\n\n\n\n\n\n\n\n\n\n\n  Interfaces\n  \n  PlayerState\n\n\n\n        \n            Info\n        \n        \n            Source\n        \n\n\n\n    \n        \n            File\n        \n        \n            src/app/player/model/player.ts\n        \n\n\n            \n                Description\n            \n            \n                PlayerState represents the Draft Player as an FSM\n\n            \n\n\n        \n            Index\n            \n                \n                    \n                        \n                            Properties\n                        \n                    \n                    \n                        \n                            \n                                \n                                        \n                                            draft\n                                        \n                                \n                                \n                                        \n                                            numPicks\n                                        \n                                \n                                \n                                        \n                                            pedal\n                                        \n                                \n                                \n                                        \n                                            row\n                                        \n                                \n                                \n                                        \n                                            weaving\n                                        \n                                \n                            \n                        \n                    \n                \n            \n        \n\n\n\n            \n                Properties\n                    \n                        \n                                \n                                    \n                                        \n                                        draft\n                                            \n                                                \n                                            \n                                        \n                                    \n                                \n                                \n                                    \n                                        draft:         Draft\n\n                                    \n                                \n\n\n                                    \n                                        \n                                            Type :         Draft\n\n                                        \n                                    \n\n\n\n\n\n                        \n                    \n                    \n                        \n                                \n                                    \n                                        \n                                        numPicks\n                                            \n                                                \n                                            \n                                        \n                                    \n                                \n                                \n                                    \n                                        numPicks:         number\n\n                                    \n                                \n\n\n                                    \n                                        \n                                            Type :         number\n\n                                        \n                                    \n\n\n\n\n\n                        \n                    \n                    \n                        \n                                \n                                    \n                                        \n                                        pedal\n                                            \n                                                \n                                            \n                                        \n                                    \n                                \n                                \n                                    \n                                        pedal:         string\n\n                                    \n                                \n\n\n                                    \n                                        \n                                            Type :         string\n\n                                        \n                                    \n\n\n\n\n\n                        \n                    \n                    \n                        \n                                \n                                    \n                                        \n                                        row\n                                            \n                                                \n                                            \n                                        \n                                    \n                                \n                                \n                                    \n                                        row:         number\n\n                                    \n                                \n\n\n                                    \n                                        \n                                            Type :         number\n\n                                        \n                                    \n\n\n\n\n\n                        \n                    \n                    \n                        \n                                \n                                    \n                                        \n                                        weaving\n                                            \n                                                \n                                            \n                                        \n                                    \n                                \n                                \n                                    \n                                        weaving:         boolean\n\n                                    \n                                \n\n\n                                    \n                                        \n                                            Type :         boolean\n\n                                        \n                                    \n\n\n\n\n\n                        \n                    \n            \n    \n\n\n    \n        import { Draft } from \"../../core/model/datatypes\"\nimport { initDraft } from \"../../core/model/drafts\";\n\n/** @interface\n * PlayerState represents the Draft Player as an FSM\n * @param draft The Draft currently loaded by the weaver\n * @param row which row of the draft the weaving is at\n * @param weaving whether or not the TC2 is actually running, or the weaver is just previewing the draft\n * @param numPicks the number of rows (picks) that have been sent to the loom so far (because the TC2 needs to receive this as part of the pick data)\n * @param pedal the name (mapped function) of the pedal that triggered this state change\n */\nexport interface PlayerState {\n  draft: Draft,\n  row: number,\n  pedal: string,\n  weaving: boolean,\n  numPicks: number,\n}\n\nexport function copyState(init: PlayerState): PlayerState {\n  return Object.assign({}, init);\n}\n\nexport function initState(): PlayerState { \n  return {\n    draft: initDraft(),\n    row: 0,\n    pedal: \"\",\n    weaving: false,\n    numPicks: 0\n}};\n\nexport interface WeavingPick {\n  pickNum: number,\n  rowData: string,\n}\n\nexport interface WeavingLog {\n  draft: Draft,\n  shortDraft: Draft,\n  states: Array,\n}\n    \n\n\n\n\n\n\n\n\n\n                   \n    \n         results matching \"\"\n        \n    \n    \n        No results matching \"\"\n    \n\n"},"interfaces/Point.html":{"url":"interfaces/Point.html","title":"interface - Point","body":"\n                   \n\n\n\n\n\n\n\n\n\n\n\n\n\n\n  Interfaces\n  \n  Point\n\n\n\n        \n            Info\n        \n        \n            Source\n        \n\n\n\n    \n        \n            File\n        \n        \n            src/app/core/model/datatypes/screenlayout.ts\n        \n\n\n            \n                Description\n            \n            \n                describes a point using x,y coordinates\noften used for referencing mouse and/or screen drawing positions\n\n            \n\n\n        \n            Index\n            \n                \n                    \n                        \n                            Properties\n                        \n                    \n                    \n                        \n                            \n                                \n                                        \n                                            x\n                                        \n                                \n                                \n                                        \n                                            y\n                                        \n                                \n                            \n                        \n                    \n                \n            \n        \n\n\n\n            \n                Properties\n                    \n                        \n                                \n                                    \n                                        \n                                        x\n                                            \n                                                \n                                            \n                                        \n                                    \n                                \n                                \n                                    \n                                        x:         number\n\n                                    \n                                \n\n\n                                    \n                                        \n                                            Type :         number\n\n                                        \n                                    \n\n\n\n\n\n                        \n                    \n                    \n                        \n                                \n                                    \n                                        \n                                        y\n                                            \n                                                \n                                            \n                                        \n                                    \n                                \n                                \n                                    \n                                        y:         number\n\n                                    \n                                \n\n\n                                    \n                                        \n                                            Type :         number\n\n                                        \n                                    \n\n\n\n\n\n                        \n                    \n            \n    \n\n\n    \n        export interface Point {\n    x: number;\n    y: number;\n  }\n  \n  /**\n   * Describes a rectangle on the screen.\n   * @param topleft - position of this rectanble\n   * @param width - the width of the rectangle\n   * @param height - the height of this rectanble.\n   */\n  export interface Bounds {\n    topleft: Point;  //row on draft\n    width: number;  //column on draft \n    height: number; //corresponding screen row\n  }\n  \n  // /**\n  //  * A type to communicate locations on the loom that have been updated in response to a given action\n  //  */\n  // interface LoomUpdate {\n  //   threading: Array,\n  //   treadling: Array,\n  //   tieup: Array>\n  // }\n    \n\n\n\n\n\n\n\n\n\n                   \n    \n         results matching \"\"\n        \n    \n    \n        No results matching \"\"\n    \n\n"},"classes/Render.html":{"url":"classes/Render.html","title":"class - Render","body":"\n                   \n\n\n\n\n\n\n\n\n\n\n\n\n\n  Classes\n  Render\n\n\n\n        \n            Info\n        \n        \n            Source\n        \n\n\n\n    \n        \n            File\n        \n        \n            src/app/core/model/render.ts\n        \n\n\n            \n                Description\n            \n            \n                Definition of render object.\n\n            \n\n\n\n\n            \n    Index\n    \n        \n                \n                    \n                        Properties\n                    \n                \n                \n                    \n                        \n                            \n                                base_cell\n                            \n                            \n                                current_view\n                            \n                            \n                                select\n                            \n                            \n                                view_front\n                            \n                            \n                                visibleRows\n                            \n                            \n                                zoom\n                            \n                        \n                    \n                \n\n                \n                    \n                        Methods\n                    \n                \n                \n                    \n                        \n                            \n                                getCellDims\n                            \n                            \n                                getCurrentView\n                            \n                            \n                                getNextVisibleRow\n                            \n                            \n                                    Private\n                                getOffset\n                            \n                            \n                                getTextInterval\n                            \n                            \n                                getZoom\n                            \n                            \n                                interpolate\n                            \n                            \n                                isFront\n                            \n                            \n                                isYarnBasedView\n                            \n                            \n                                setCurrentView\n                            \n                            \n                                setFront\n                            \n                            \n                                setZoom\n                            \n                            \n                                updateVisible\n                            \n                            \n                                zoomIn\n                            \n                            \n                                zoomOut\n                            \n                        \n                    \n                \n\n\n\n\n\n        \n    \n\n\n            \n    Constructor\n        \n            \n                \n                    \nconstructor(view_frames: boolean, draft: Draft, ss: SystemsService)\n                    \n                \n                        \n                            \n                                Defined in src/app/core/model/render.ts:33\n                            \n                        \n\n                \n                    \n                            \n                                    Parameters :\n                                    \n                                        \n                                            \n                                                Name\n                                                    Type\n                                                Optional\n                                            \n                                        \n                                        \n                                                \n                                                        view_frames\n                                                  \n                                                        \n                                                                        boolean\n                                                        \n                                                  \n                                                    \n                                                            No\n                                                    \n                                                    \n                                                \n                                                \n                                                        draft\n                                                  \n                                                        \n                                                                        Draft\n                                                        \n                                                  \n                                                    \n                                                            No\n                                                    \n                                                    \n                                                \n                                                \n                                                        ss\n                                                  \n                                                        \n                                                                        SystemsService\n                                                        \n                                                  \n                                                    \n                                                            No\n                                                    \n                                                    \n                                                \n                                        \n                                    \n                            \n                    \n                \n            \n        \n\n\n            \n    \n    \n        Properties\n    \n    \n        \n            \n                \n                    \n                    \n                        base_cell\n                        \n                    \n                \n            \n                \n                    \n                        Type :     literal type\n\n                    \n                \n                    \n                        \n                                Defined in src/app/core/model/render.ts:21\n                        \n                    \n\n\n        \n    \n    \n        \n            \n                \n                    \n                    \n                        current_view\n                        \n                    \n                \n            \n                \n                    \n                        Type :         string\n\n                    \n                \n                    \n                        \n                                Defined in src/app/core/model/render.ts:13\n                        \n                    \n\n\n        \n    \n    \n        \n            \n                \n                    \n                    \n                        select\n                        \n                    \n                \n            \n                \n                    \n                        Type :     literal type\n\n                    \n                \n                    \n                        \n                                Defined in src/app/core/model/render.ts:30\n                        \n                    \n\n\n        \n    \n    \n        \n            \n                \n                    \n                    \n                        view_front\n                        \n                    \n                \n            \n                \n                    \n                        Type :         boolean\n\n                    \n                \n                    \n                        \n                                Defined in src/app/core/model/render.ts:15\n                        \n                    \n\n\n        \n    \n    \n        \n            \n                \n                    \n                    \n                        visibleRows\n                        \n                    \n                \n            \n                \n                    \n                        Type :     Array\n\n                    \n                \n                    \n                        \n                                Defined in src/app/core/model/render.ts:17\n                        \n                    \n\n\n        \n    \n    \n        \n            \n                \n                    \n                    \n                        zoom\n                        \n                    \n                \n            \n                \n                    \n                        Type :         number\n\n                    \n                \n                    \n                        \n                                Defined in src/app/core/model/render.ts:19\n                        \n                    \n\n\n        \n    \n\n\n            \n    \n    \n        Methods\n    \n    \n        \n            \n                \n                    \n                    \n                        getCellDims\n                        \n                    \n                \n            \n            \n                \ngetCellDims(type: string)\n                \n            \n\n\n            \n                \n                    Defined in src/app/core/model/render.ts:125\n                \n            \n\n\n            \n                \n\n                    \n                        Parameters :\n                        \n                        \n                            \n                                \n                                    Name\n                                    Type\n                                    Optional\n                                \n                            \n                            \n                                \n                                    type\n                                    \n                                                string\n                                    \n\n                                    \n                                        No\n                                    \n\n\n                                \n                            \n                        \n                    \n                    \n                    \n                    \n                        Returns :     { x: number; y: number; w: number; h: number; }\n\n                    \n                    \n                        \n                    \n                \n            \n        \n    \n    \n        \n            \n                \n                    \n                    \n                        getCurrentView\n                        \n                    \n                \n            \n            \n                \ngetCurrentView()\n                \n            \n\n\n            \n                \n                    Defined in src/app/core/model/render.ts:191\n                \n            \n\n\n            \n                \n\n                    \n                        Returns :         string\n\n                    \n                \n            \n        \n    \n    \n        \n            \n                \n                    \n                    \n                        getNextVisibleRow\n                        \n                    \n                \n            \n            \n                \ngetNextVisibleRow(ndx: number)\n                \n            \n\n\n            \n                \n                    Defined in src/app/core/model/render.ts:116\n                \n            \n\n\n            \n                \n                    given the ndx, get the next visible row or -1 if there isn't a next\n\n\n                    \n                        Parameters :\n                        \n                        \n                            \n                                \n                                    Name\n                                    Type\n                                    Optional\n                                \n                            \n                            \n                                \n                                    ndx\n                                    \n                                                number\n                                    \n\n                                    \n                                        No\n                                    \n\n\n                                \n                            \n                        \n                    \n                    \n                    \n                    \n                        Returns :         number\n\n                    \n                    \n                        \n                    \n                \n            \n        \n    \n    \n        \n            \n                \n                    \n                    \n                        Private\n                        getOffset\n                        \n                    \n                \n            \n            \n                \n                    \n                    getOffset(type)\n                \n            \n\n\n            \n                \n                    Defined in src/app/core/model/render.ts:176\n                \n            \n\n\n            \n                \n\n                    \n                        Parameters :\n                        \n                        \n                            \n                                \n                                    Name\n                                    Optional\n                                \n                            \n                            \n                                \n                                    type\n\n                                    \n                                        No\n                                    \n\n\n                                \n                            \n                        \n                    \n                    \n                    \n                    \n                        Returns :         number\n\n                    \n                    \n                        \n                    \n                \n            \n        \n    \n    \n        \n            \n                \n                    \n                    \n                        getTextInterval\n                        \n                    \n                \n            \n            \n                \ngetTextInterval()\n                \n            \n\n\n            \n                \n                    Defined in src/app/core/model/render.ts:101\n                \n            \n\n\n            \n                \n\n                    \n                        Returns :     1 | 2 | 4 | 5 | 8 | 10 | 12 | 15\n\n                    \n                \n            \n        \n    \n    \n        \n            \n                \n                    \n                    \n                        getZoom\n                        \n                    \n                \n            \n            \n                \ngetZoom()\n                \n            \n\n\n            \n                \n                    Defined in src/app/core/model/render.ts:161\n                \n            \n\n\n            \n                \n\n                    \n                        Returns :         number\n\n                    \n                \n            \n        \n    \n    \n        \n            \n                \n                    \n                    \n                        interpolate\n                        \n                    \n                \n            \n            \n                \ninterpolate(base: any)\n                \n            \n\n\n            \n                \n                    Defined in src/app/core/model/render.ts:87\n                \n            \n\n\n            \n                \n\n                    \n                        Parameters :\n                        \n                        \n                            \n                                \n                                    Name\n                                    Type\n                                    Optional\n                                \n                            \n                            \n                                \n                                    base\n                                    \n                                                any\n                                    \n\n                                    \n                                        No\n                                    \n\n\n                                \n                            \n                        \n                    \n                    \n                    \n                    \n                        Returns :         void\n\n                    \n                    \n                        \n                    \n                \n            \n        \n    \n    \n        \n            \n                \n                    \n                    \n                        isFront\n                        \n                    \n                \n            \n            \n                \nisFront()\n                \n            \n\n\n            \n                \n                    Defined in src/app/core/model/render.ts:199\n                \n            \n\n\n            \n                \n\n                    \n                        Returns :         boolean\n\n                    \n                \n            \n        \n    \n    \n        \n            \n                \n                    \n                    \n                        isYarnBasedView\n                        \n                    \n                \n            \n            \n                \nisYarnBasedView()\n                \n            \n\n\n            \n                \n                    Defined in src/app/core/model/render.ts:187\n                \n            \n\n\n            \n                \n\n                    \n                        Returns :         boolean\n\n                    \n                \n            \n        \n    \n    \n        \n            \n                \n                    \n                    \n                        setCurrentView\n                        \n                    \n                \n            \n            \n                \nsetCurrentView(view: string)\n                \n            \n\n\n            \n                \n                    Defined in src/app/core/model/render.ts:195\n                \n            \n\n\n            \n                \n\n                    \n                        Parameters :\n                        \n                        \n                            \n                                \n                                    Name\n                                    Type\n                                    Optional\n                                \n                            \n                            \n                                \n                                    view\n                                    \n                                                string\n                                    \n\n                                    \n                                        No\n                                    \n\n\n                                \n                            \n                        \n                    \n                    \n                    \n                    \n                        Returns :         void\n\n                    \n                    \n                        \n                    \n                \n            \n        \n    \n    \n        \n            \n                \n                    \n                    \n                        setFront\n                        \n                    \n                \n            \n            \n                \nsetFront(value: boolean)\n                \n            \n\n\n            \n                \n                    Defined in src/app/core/model/render.ts:203\n                \n            \n\n\n            \n                \n\n                    \n                        Parameters :\n                        \n                        \n                            \n                                \n                                    Name\n                                    Type\n                                    Optional\n                                \n                            \n                            \n                                \n                                    value\n                                    \n                                                boolean\n                                    \n\n                                    \n                                        No\n                                    \n\n\n                                \n                            \n                        \n                    \n                    \n                    \n                    \n                        Returns :         boolean\n\n                    \n                    \n                        \n                    \n                \n            \n        \n    \n    \n        \n            \n                \n                    \n                    \n                        setZoom\n                        \n                    \n                \n            \n            \n                \nsetZoom(z: number)\n                \n            \n\n\n            \n                \n                    Defined in src/app/core/model/render.ts:157\n                \n            \n\n\n            \n                \n\n                    \n                        Parameters :\n                        \n                        \n                            \n                                \n                                    Name\n                                    Type\n                                    Optional\n                                \n                            \n                            \n                                \n                                    z\n                                    \n                                                number\n                                    \n\n                                    \n                                        No\n                                    \n\n\n                                \n                            \n                        \n                    \n                    \n                    \n                    \n                        Returns :         void\n\n                    \n                    \n                        \n                    \n                \n            \n        \n    \n    \n        \n            \n                \n                    \n                    \n                        updateVisible\n                        \n                    \n                \n            \n            \n                \nupdateVisible(draft: Draft)\n                \n            \n\n\n            \n                \n                    Defined in src/app/core/model/render.ts:207\n                \n            \n\n\n            \n                \n\n                    \n                        Parameters :\n                        \n                        \n                            \n                                \n                                    Name\n                                    Type\n                                    Optional\n                                \n                            \n                            \n                                \n                                    draft\n                                    \n                                                Draft\n                                    \n\n                                    \n                                        No\n                                    \n\n\n                                \n                            \n                        \n                    \n                    \n                    \n                    \n                        Returns :         void\n\n                    \n                    \n                        \n                    \n                \n            \n        \n    \n    \n        \n            \n                \n                    \n                    \n                        zoomIn\n                        \n                    \n                \n            \n            \n                \nzoomIn()\n                \n            \n\n\n            \n                \n                    Defined in src/app/core/model/render.ts:170\n                \n            \n\n\n            \n                \n\n                    \n                        Returns :         void\n\n                    \n                \n            \n        \n    \n    \n        \n            \n                \n                    \n                    \n                        zoomOut\n                        \n                    \n                \n            \n            \n                \nzoomOut()\n                \n            \n\n\n            \n                \n                    Defined in src/app/core/model/render.ts:165\n                \n            \n\n\n            \n                \n\n                    \n                        Returns :         void\n\n                    \n                \n            \n        \n    \n\n\n\n\n\n\n    \n\n\n    \n        import { SystemsService } from \"../provider/systems.service\";\nimport { Draft } from \"./datatypes\";\nimport { wefts } from \"./drafts\";\n\n/**\n * Definition of render object.\n * @class\n */\nexport class Render {\n\n // view_frames: boolean;\n\n  current_view: string;\n  \n  view_front: boolean;\n  \n  visibleRows: Array; \n\n  zoom: number;\n\n  base_cell: {\n    w: {max: number, min: number},\n    h: {max: number, min: number},\n    margin_fill_x: {max: number, min: number},\n    margin_fill_y: {max: number, min: number},\n    margin_clear_x: {max: number, min: number},\n    margin_clear_y: {max: number, min: number},\n  };\n\n  select:{\n    offset_x: {max: number, min: number},\n    offset_y: {max: number, min: number};\n  }\n\n  constructor(view_frames:boolean, draft: Draft, private ss: SystemsService) {\n\n    //max values\n    this.zoom = 1;\n   // this.view_frames = view_frames;\n    this.current_view = 'pattern';\n    this.view_front = true;\n\n    this.visibleRows = [];\n    for(let i = 0; i  1.75) return 1;\n    if(this.zoom > 1.5) return 2;\n    if(this.zoom > 1.25) return 4;\n    if(this.zoom > 1) return 5;\n    if(this.zoom > .75) return 8; \n    if(this.zoom > .5) return 10;\n    if(this.zoom > .25) return 12;\n    return 15;\n  }\n\n  /**\n   * given the ndx, get the next visible row or -1 if there isn't a next\n   * @param ndx \n   */\n  getNextVisibleRow(ndx: number) : number {\n\n    const next: number = ndx ++;\n    if(next >= this.visibleRows.length) return -1;\n\n    return this.visibleRows[next];\n\n  }\n\n  getCellDims(type: string){\n\n    return {\n      x: 0,\n      y: 0,\n      w: 10,\n      h: 10\n    };\n\n    // return {\n    //   x: this.getOffset(type+\"_x\"),\n    //   y: this.getOffset(type+\"_y\"),\n    //   w: this.base_cell.w.min,\n    //   h: this.base_cell.h.min\n    // };\n\n  }\n\n  // getInterpolationDims(type: string){\n  //   var x = this.interpolate({max: this.getOffset(type+\"_x\"), min: this.getOffset(type+\"_x\")});\n  //   var y = this.interpolate({max: this.getOffset(type+\"_y\"), min: this.getOffset(type+\"_y\")});\n\n\n  //   return {\n  //     x: x,\n  //     y: y,\n  //     w: this.interpolate({max: this.base_cell.w.max - (x*2), min: this.base_cell.w.min}),\n  //     h: this.interpolate({max: this.base_cell.h.max - (y*2), min: this.base_cell.h.min})\n  //   }\n\n  // }\n\n  setZoom(z: number){\n    this.zoom = z;\n  }\n\n  getZoom(){\n    return this.zoom;\n  }\n\n   zoomOut(){\n    this.zoom -= 10; \n    if(this.zoom  100) this.zoom = 100;\n\n  }\n\n  private getOffset(type) {\n    if(type ===\"select_x\") return this.select.offset_x.min;\n    if(type ===\"select_y\") return this.select.offset_y.min;\n    if(type ===\"base_clear_x\") return this.base_cell.margin_clear_x.min;\n    if(type ===\"base_clear_y\") return this.base_cell.margin_clear_y.min;\n    if(type ===\"base_fill_x\") return this.base_cell.margin_fill_x.min;\n    if(type ===\"base_fill_y\") return this.base_cell.margin_fill_y.min;\n    else return 0;\n  }\n\n\n  isYarnBasedView(): boolean{\n    return (this.current_view == 'visual' || this.current_view == 'yarn');\n  }\n\n  getCurrentView(): string{\n    return this.current_view;\n  }\n\n  setCurrentView(view:string){\n    this.current_view = view;\n  }\n\n  isFront(){\n    return this.view_front;\n  }\n\n  setFront(value:boolean){\n    return this.view_front = value;\n  }\n\n  updateVisible(draft: Draft) {\n\n    this.visibleRows = \n      draft.rowSystemMapping.map((val, ndx) => {\n        return (this.ss.weftSystemIsVisible(val)) ? ndx : -1;  \n      })\n      .filter(el => el !== -1);\n\n  }\n\n\n}\n\n    \n\n\n\n\n\n\n\n\n\n\n                   \n    \n         results matching \"\"\n        \n    \n    \n        No results matching \"\"\n    \n\n"},"interfaces/SaveObj.html":{"url":"interfaces/SaveObj.html","title":"interface - SaveObj","body":"\n                   \n\n\n\n\n\n\n\n\n\n\n\n\n\n\n  Interfaces\n  \n  SaveObj\n\n\n\n        \n            Info\n        \n        \n            Source\n        \n\n\n\n    \n        \n            File\n        \n        \n            src/app/core/model/datatypes/files.ts\n        \n\n\n            \n                Description\n            \n            \n                describes the data from the workspace that is saved.\n\n            \n\n\n        \n            Index\n            \n                \n                    \n                        \n                            Properties\n                        \n                    \n                    \n                        \n                            \n                                \n                                        \n                                            draft_nodes\n                                        \n                                \n                                \n                                        \n                                            materials\n                                        \n                                \n                                \n                                        \n                                            nodes\n                                        \n                                \n                                \n                                        \n                                            notes\n                                        \n                                \n                                \n                                        \n                                            ops\n                                        \n                                \n                                \n                                        \n                                            scale\n                                        \n                                \n                                \n                                        \n                                            tree\n                                        \n                                \n                                \n                                        \n                                            type\n                                        \n                                \n                                \n                                        \n                                            version\n                                        \n                                \n                                \n                                        \n                                            workspace\n                                        \n                                \n                            \n                        \n                    \n                \n            \n        \n\n\n\n            \n                Properties\n                    \n                        \n                                \n                                    \n                                        \n                                        draft_nodes\n                                            \n                                                \n                                            \n                                        \n                                    \n                                \n                                \n                                    \n                                        draft_nodes:         Array\n\n                                    \n                                \n\n\n                                    \n                                        \n                                            Type :         Array\n\n                                        \n                                    \n\n\n\n\n\n                        \n                    \n                    \n                        \n                                \n                                    \n                                        \n                                        materials\n                                            \n                                                \n                                            \n                                        \n                                    \n                                \n                                \n                                    \n                                        materials:         Array\n\n                                    \n                                \n\n\n                                    \n                                        \n                                            Type :         Array\n\n                                        \n                                    \n\n\n\n\n\n                        \n                    \n                    \n                        \n                                \n                                    \n                                        \n                                        nodes\n                                            \n                                                \n                                            \n                                        \n                                    \n                                \n                                \n                                    \n                                        nodes:         Array\n\n                                    \n                                \n\n\n                                    \n                                        \n                                            Type :         Array\n\n                                        \n                                    \n\n\n\n\n\n                        \n                    \n                    \n                        \n                                \n                                    \n                                        \n                                        notes\n                                            \n                                                \n                                            \n                                        \n                                    \n                                \n                                \n                                    \n                                        notes:     Array\n\n                                    \n                                \n\n\n                                    \n                                        \n                                            Type :     Array\n\n                                        \n                                    \n\n\n\n\n\n                        \n                    \n                    \n                        \n                                \n                                    \n                                        \n                                        ops\n                                            \n                                                \n                                            \n                                        \n                                    \n                                \n                                \n                                    \n                                        ops:     Array\n\n                                    \n                                \n\n\n                                    \n                                        \n                                            Type :     Array\n\n                                        \n                                    \n\n\n\n\n\n                        \n                    \n                    \n                        \n                                \n                                    \n                                        \n                                        scale\n                                            \n                                                \n                                            \n                                        \n                                    \n                                \n                                \n                                    \n                                        scale:         number\n\n                                    \n                                \n\n\n                                    \n                                        \n                                            Type :         number\n\n                                        \n                                    \n\n\n\n\n\n                        \n                    \n                    \n                        \n                                \n                                    \n                                        \n                                        tree\n                                            \n                                                \n                                            \n                                        \n                                    \n                                \n                                \n                                    \n                                        tree:         Array\n\n                                    \n                                \n\n\n                                    \n                                        \n                                            Type :         Array\n\n                                        \n                                    \n\n\n\n\n\n                        \n                    \n                    \n                        \n                                \n                                    \n                                        \n                                        type\n                                            \n                                                \n                                            \n                                        \n                                    \n                                \n                                \n                                    \n                                        type:         string\n\n                                    \n                                \n\n\n                                    \n                                        \n                                            Type :         string\n\n                                        \n                                    \n\n\n\n\n\n                        \n                    \n                    \n                        \n                                \n                                    \n                                        \n                                        version\n                                            \n                                                \n                                            \n                                        \n                                    \n                                \n                                \n                                    \n                                        version:         string\n\n                                    \n                                \n\n\n                                    \n                                        \n                                            Type :         string\n\n                                        \n                                    \n\n\n\n\n\n                        \n                    \n                    \n                        \n                                \n                                    \n                                        \n                                        workspace\n                                            \n                                                \n                                            \n                                        \n                                    \n                                \n                                \n                                    \n                                        workspace:         any\n\n                                    \n                                \n\n\n                                    \n                                        \n                                            Type :         any\n\n                                        \n                                    \n\n\n\n\n\n                        \n                    \n            \n    \n\n\n    \n        import { Draft } from './drafts';\nimport { Loom, LoomSettings } from './looms';\nimport { Shuttle } from '../shuttle';\nimport { Note } from '../../provider/notes.service';\nimport { Bounds } from './screenlayout';\n\n/****** OBJECTS/TYPES FOR LOADING AND SAVING FILES *****/\n\n/**\n * holds data about each node/component in a form to easily load.\n * @param node_id the id of this node within the tree\n * @param type the type of node\n * @param bounds the screen position and size data for this node\n */\nexport interface NodeComponentProxy {\n    node_id: number,\n    type: string,\n    bounds: Bounds\n  }\n  \n  /**\n   * stores a sparce version of a tree node for easy reloading\n   * @param node the node id this treenode refers too\n   * @param parent the node id of the parent node for this treenode\n   * @param inputs an array of treenode ids for all values coming into this node\n   * @param outputs an array of treenode ids for all downstream functions \n   */\n   export interface TreeNodeProxy {\n    node: number,\n    parent: number; \n    inputs: Array;\n    outputs: Array; \n   }\n  \n    /**\n    * holds data about each draft component in a compressed form \n    * @param draft_id the draft id associated with this node (if available)\n   * @param draft_visible a boolean to state if this node is visible or not. \n   * @param draft_name a string representing a user defined name\n   * @param draft this will only export if the draft is a seed draft\n   * @param loom this will only export if the draft is a seed draft \n   * @param loom_settings the associated loom settings on this node, if present\n    */\n  \n    export interface DraftNodeProxy {\n      node_id: number;\n      draft_id: number;\n      draft_name: string;\n      draft: Draft;\n      draft_visible: boolean;\n      loom: Loom,\n      loom_settings: LoomSettings;\n    }\n  \n  /**\n    * a sparce form of an operaction component to use for saving\n    * @param node_id the node id this object refers too\n    * @param name the name of the operation at this node\n    * @param params the list of input parameters to this operation\n    * @param inlets the let of inlets and associated values \n    */\n  export interface OpComponentProxy {\n    node_id: number,\n    name: string,\n    params: Array, \n    inlets: Array;\n  }\n  \n  \n   /**\n    * describes the data from the workspace that is saved.\n    */\n   export interface SaveObj {\n    version: string,\n    workspace: any,\n    type: string,\n    nodes: Array,\n    tree: Array,\n    draft_nodes: Array,\n    ops: Array,\n    notes: Array,\n    materials: Array,\n    scale: number\n   }\n  \n  export interface FileObj {\n   version: string,\n   workspace: any,\n   filename: string,\n   nodes: Array,\n   treenodes: Array,\n   draft_nodes: Array,\n   ops: Array\n   scale: number\n  }\n  \n  export interface StatusMessage {\n    id: number,\n    message: string,\n    success: boolean\n  }\n  \n  export interface LoadResponse {\n    data: FileObj,\n    status: number;\n  }\n  \n  export interface Fileloader {\n    ada: (filename: string, data: any) => Promise,\n    //wif: (filename: string, data: any) => Promise,\n    //bmp: (filename: string, data: any) => Promise,\n    //jpg: (filename: string, data: any) => Promise,\n    form: (data: any) => Promise}\n  \n  export interface FileSaver {\n    ada: (type: string, for_timeline:boolean, current_scale: number) => Promise,\n    //wif: (draft: Draft, loom: Loom) => Promise,\n    bmp: (canvas: HTMLCanvasElement) => Promise,\n    jpg: (canvas: HTMLCanvasElement) => Promise\n  }\n    \n\n\n\n\n\n\n\n\n\n                   \n    \n         results matching \"\"\n        \n    \n    \n        No results matching \"\"\n    \n\n"},"classes/Seed.html":{"url":"classes/Seed.html","title":"class - Seed","body":"\n                   \n\n\n\n\n\n\n\n\n\n\n\n\n\n  Classes\n  Seed\n\n\n\n        \n            Info\n        \n        \n            Source\n        \n\n\n\n    \n        \n            File\n        \n        \n            src/app/mixer/model/operation/topology.ts\n        \n\n\n            \n                Description\n            \n            \n                Operation that can generate a draft with no inputs, may take an optional input\n\nINPUT: zero or one Draft\nOUTPUT: exactly one Draft\n\n\n            \n\n\n            \n                Implements\n            \n            \n                            TopologyDef\n            \n\n\n            \n    Index\n    \n        \n                \n                    \n                        Properties\n                    \n                \n                \n                    \n                        \n                            \n                                input\n                            \n                            \n                                output\n                            \n                            \n                                type\n                            \n                        \n                    \n                \n\n\n\n\n\n\n        \n    \n\n\n\n            \n    \n    \n        Properties\n    \n    \n        \n            \n                \n                    \n                    \n                        input\n                        \n                    \n                \n            \n                \n                    \n                        Type :         Draft | null\n\n                    \n                \n                    \n                        \n                                Defined in src/app/mixer/model/operation/topology.ts:47\n                        \n                    \n\n\n        \n    \n    \n        \n            \n                \n                    \n                    \n                        output\n                        \n                    \n                \n            \n                \n                    \n                        Type :         Draft\n\n                    \n                \n                    \n                        \n                                Defined in src/app/mixer/model/operation/topology.ts:47\n                        \n                    \n\n\n        \n    \n    \n        \n            \n                \n                    \n                    \n                        type\n                        \n                    \n                \n            \n                    \n                        \n                                Defined in src/app/mixer/model/operation/topology.ts:47\n                        \n                    \n\n\n        \n    \n\n\n\n\n\n\n\n\n    \n\n\n    \n        import { Draft } from \"../../../core/model/datatypes\";\nimport { ParamValue, OperationParam as OpParam, getParamValues } from \"./params\";\nimport { OperationInlet as OpInlet, InletDrafts } from \"./inlets\";\n\n/**\n* At its heart, an Operation is a very fancy function that outputs a Draft or several Drafts.\n* The function itself is perform(), and the Operation can take inputs in the form of \n* Drafts (inlets) or Parameters (params).\n*/\n\n/** \n* Types that an Operation's perform() function can handlle as input/output\n*/\n\n/** @type Union of types that can serve as input to Operation perform() functions. */\nexport type PerformDraftInput = InletDrafts | Array | Draft | null;\n\ntype MultiDraftInput = InletDrafts | Array;\n\n/** @type Union of types that Operation perform() functions can output. */\nexport type PerformOutput = Array | Draft;\n\n/**\n * OPERATION TOPOLOGY\n * Topology refers to the shape of the Operation in terms of its\n * number of input and output Drafts. Classifies Operations.\n */\n\nexport const TopologyName = {\n  pipe: 'pipe', \n  seed: 'seed', \n  merge: 'merge', \n  branch: 'branch', \n  bus: 'bus'\n} as const;\nexport type TopologyName = keyof typeof TopologyName;\n\ninterface TopologyDef { type: TopologyName; input: PerformDraftInput; output: PerformOutput; };\n\n/**\n* @class\n* Operation that can generate a draft with no inputs, may take an optional input\n* @method perform OpPerform function: \n* - INPUT: zero or one Draft\n* - OUTPUT: exactly one Draft\n*/\nexport class Seed implements TopologyDef { type: 'seed'; input: Draft | null; output: Draft; };\n\n/**\n* @class\n* Operation that takes one input and generates one output draft. \n* @method perform OpPerform function: \n* - INPUT: exactly one Draft\n* - OUTPUT: exactly one Draft\n*/\nexport class Pipe implements TopologyDef { type: 'pipe'; input: Draft; output: Draft; };\n\n/**\n* @class\n* Operation that takes many (N) inputs and generates one output draft.\n* @method perform OpPerform function: \n* - INPUT: Array of Drafts\n* - OUTPUT: exactly one Draft\n*/\nexport class Merge implements TopologyDef { type: 'merge'; input: InletDrafts | Array; output: Draft; };\n\n/**\n* @class\n* Operation that takes one input and generates many (N) output drafts.\n* @method perform OpPerform function:\n* - INPUT: exactly one Draft\n* - OUTPUT: Array of Drafts\n*/\nexport class Branch implements TopologyDef { type: 'branch'; input: Draft; output: Array; };\n\n/**\n* CURRENTLY UNUSED\n* @class\n* Operation that takes many (N) inputs and generates many (M) output drafts.\n* Number of inputs does not necessarily match number of outputs (N ?= M).\n* @method perform OpPerform function:  \n* - INPUT: Array of Drafts\n* - OUTPUT: Array of Drafts\n*/\nexport class Bus implements TopologyDef { type: 'bus'; input: Array | InletDrafts; output: Array; };\n\ntype TopologyIndex = {\n  'seed': Seed,\n  'pipe': Pipe,\n  'merge': Merge,\n  'branch': Branch,\n  'bus': Bus\n}\ntype OpTopology = TopologyIndex[TopologyName];\n\n/**\n * OPERATION CONSTRAINT\n * A Constraint on an Operation classifies it based on its\n * input requirements (both Drafts and Params).\n */\n\nexport const ConstraintOptions = {\n  req: 'req', \n  opt: 'opt', \n  none: 'none'\n} as const;\nexport type ConstraintOptions = keyof typeof ConstraintOptions;\n\nexport const ConstraintName = {\n  no_drafts: { input_drafts: 'none', input_params: 'req' }, \n  no_params: { input_drafts: 'req', input_params: 'none' }, \n  drafts_opt: { input_drafts: 'opt', input_params: 'req' }, \n  params_opt: { input_drafts: 'req', input_params: 'opt' }, \n  all_req: {input_drafts: 'req', input_params: 'req' },\n} as const;\ntype ConstraintName = keyof typeof ConstraintName;\n\ntype ConstraintDefs = {\n  [C in keyof typeof ConstraintName]: {\n    constraint: C;\n    input_drafts: typeof ConstraintName[C][\"input_drafts\"];\n    input_params: typeof ConstraintName[C][\"input_params\"];\n  }\n}\n\nexport type NoDrafts = ConstraintDefs[\"no_drafts\"];\nexport type NoParams = ConstraintDefs[\"no_params\"];\nexport type DraftsOptional = ConstraintDefs[\"drafts_opt\"];\nexport type ParamsOptional = ConstraintDefs[\"params_opt\"];\nexport type AllRequired = ConstraintDefs[\"all_req\"];\n\ntype ConstraintIndex = {\n  'no_drafts': NoDrafts, // does not accept input drafts\n  'no_params': NoParams, // does not accept params\n  'drafts_opt': DraftsOptional, // can take no params -- has default values\n  'params_opt': ParamsOptional, // can take zero input drafts\n  'all_req': AllRequired, // both inputs and params required\n}\ntype OpConstraint = ConstraintIndex[ConstraintName]; \n\n/** \n* Generic types for perform() functions, describing options \n* for input draft multiplicity (0, 1, N) and param requirement \n*/\n\ntype NoDraftsPerform = {(params: Array): Topo[\"output\"]};\ntype NoParamsPerform = {(inputs: Topo[\"input\"]): Topo[\"output\"]};\ntype ParamsOptionalPerform = {(inputs: Topo[\"input\"], params?: Array): Topo[\"output\"]}; \ntype DraftsOptionalPerform = {(params: Array, inputs?: Topo[\"input\"]): Topo[\"output\"]};  \ntype AllRequiredPerform = {(inputs: Topo[\"input\"], params: Array): Topo[\"output\"]};  \n\ntype PerformCallSigs = {\n  no_drafts: { [Topo in keyof TopologyIndex]: NoDraftsPerform; },\n  no_params: { [Topo in keyof TopologyIndex]: NoParamsPerform; },\n  drafts_opt: { [Topo in keyof TopologyIndex]: DraftsOptionalPerform; },\n  params_opt: { [Topo in keyof TopologyIndex]: ParamsOptionalPerform; },\n  all_req: { [Topo in keyof TopologyIndex]: AllRequiredPerform; }\n}\n\n/**\n * @interface OpClassifier\n * Key-value pairs for an Operation's Topology and Constraint.\n */\ninterface OpClassifier {\n  type: Topo[\"type\"] | '';\n  input_drafts: Constraint[\"input_drafts\"] | '';\n  input_params: Constraint[\"input_params\"] | '';\n}\n\n/** @type User-defined descriptive strings for any Operation. */\ntype OperationDescriptors = { name: string, displayname: string, dx: string };\n\n/**\n* A standard Operation's metadata -- i.e. everything not the perform() function\n* @param name the internal name of this opearation (CHANGING THESE WILL BREAK LEGACY VERSIONS)\n* @param displayname the name to show upon this operation\n* @param dx the description of this operation\n* @param max_inputs the maximum number of inputs (drafts) allowed directly into this operation\n* @param params the parameters associated with this operation\n* @method perform an OpPerform function\n*/\nexport interface OperationProperties extends OperationDescriptors {\n  max_inputs: number,\n  default_params?: Array;\n  params: Array,\n}\n\n/**\n * @type A function that serves as the perform() method for an Operation. \n * This generic type requires two type parameters:\n * @param Topo one of the PerformInput types\n * @param Constraint one of the PerformOutput types\n *\n * OpPerform to give call signature for perform() function \n * Topo  = Seed | Pipe | Merge | Branch | Bus\n * Constraint = NoDrafts | NoParams | DraftsOptional | ParamsOptional | AllRequired\n */\nexport type OpPerform = PerformCallSigs[Constraint[\"constraint\"]][Topo[\"type\"]];\n// type PerformArgs = Parameters>;\n\n/** TODO doublecheck inlets have been added correctly (fields for input drafts) */\nexport class BaseOp implements OperationProperties {\n  name: string;\n  old_names: Array;\n  displayname: string;\n  dx: string;\n  params: Array;\n  inlets: Array;\n  default_params?: Array;\n  max_inputs: number;\n  classifier: OpClassifier;\n  perform: OpPerform;\n\n  /** @constructor create an Operation using an object literal (keys and values) */\n  constructor (args: OpConstructorArgs);\n  /** @constructor create an Operation using direct arguments in the constructor (values only) */\n  constructor (...args: OpConstructorArray);\n  constructor (name: string, displayname: string, dx: string, perform: OpPerform);\n  constructor (name: string, displayname: string, dx: string, params: Array, perform: OpPerform);\n  constructor (nameOrArgs: any, displayname?: string, dx?: string, performOrParams?: OpPerform | Array, performWithParams?: OpPerform) {\n    // console.log((nameOrArgs.name != undefined));\n    this.classifier = { type: '', input_drafts: '', input_params: '' };\n    if (nameOrArgs.name) {\n      let args = nameOrArgs;\n      this.name = args.name;\n      this.displayname = args.displayname;\n      this.dx = args.dx;\n      this.perform = args.perform;\n      if (args.params) this.params = args.params;\n      else this.params = [];\n      if (args.inlets) this.inlets = args.inlets;\n      else this.inlets = [];\n    } else {\n      this.name = nameOrArgs;\n      this.displayname = displayname;\n      this.dx = dx;\n      if (performWithParams) {\n        let params = > performOrParams;\n        this.params = params;\n        this.default_params = getParamValues(params);\n        this.perform = performWithParams;\n      } else {\n        this.params = [];\n        this.perform = > performOrParams;\n      }\n    }\n  }\n\n  constrain(c: ConstraintName): void {\n    if (c == 'no_drafts') { this.max_inputs = 0; this.inlets = []; }\n    this.classifier.input_drafts = ConstraintName[c][\"input_drafts\"]; \n    this.classifier.input_params = ConstraintName[c][\"input_params\"];\n  }\n\n  type(t: TopologyName): BaseOp {\n    this.classifier.type = t;\n    return this;\n  }\n}\n\ntype ConstructorArgKeysIndex = {\n  [C in keyof ConstraintIndex]: C extends \"no_params\" ? {\n    [T in keyof TopologyIndex]: {\n      name: string, displayname: string, dx: string, old_names: string[],\n      inlets: OpInlet[], perform: OpPerform\n    }\n  } : C extends \"no_drafts\" ? {\n    [T in keyof TopologyIndex]: {\n      name: string, displayname: string, dx: string, old_names: string[],\n      params: OpParam[], perform: OpPerform\n    }\n  } : {\n    [T in keyof TopologyIndex]: {\n      name: string, displayname: string, dx: string, old_names: string[],\n      params: OpParam[], inlets: OpInlet[],\n      perform: OpPerform\n    }\n  }\n}\n\ntype ConstructorArrayIndex = {\n  [C in keyof ConstraintIndex]: C extends \"no_params\" ? {\n    [T in keyof TopologyIndex]: [\n      name: string, displayname: string, dx: string, old_names: string[],\n      inlets: OpInlet[], perform: OpPerform\n    ]\n  } : C extends \"no_drafts\" ? {\n    [T in keyof TopologyIndex]: [\n      name: string, displayname: string, dx: string, old_names: string[],\n      params: OpParam[], perform: OpPerform\n    ]\n  } : {\n    [T in keyof TopologyIndex]: [\n      name: string, displayname: string, dx: string, old_names: string[],\n      params: OpParam[], inlets: OpInlet[],\n      perform: OpPerform\n    ]\n  }\n}\n\ntype OpConstructorArgKeys = \nConstructorArgKeysIndex[Constraint[\"constraint\"]][Topo[\"type\"]];\n\ntype OpConstructorArray = \nConstructorArrayIndex[Constraint[\"constraint\"]][Topo[\"type\"]];\n\ntype OpConstructorArgs = \nOpConstructorArgKeys | OpConstructorArray;\n\n// use factory design pattern to apply classifiers to BaseOp?? Is this too convoluted\n// https://refactoring.guru/design-patterns/abstract-factory/typescript\nclass AbstractOpFactory {\n  NoDrafts(args: OpConstructorArgKeys): BaseOp;\n  NoDrafts(...args: OpConstructorArray): BaseOp;\n  NoDrafts(...args: any) {\n    let op = new BaseOp(...args);\n    op.constrain(\"no_drafts\");\n    return op;\n  }\n\n  NoParams(args: OpConstructorArgKeys): BaseOp;\n  NoParams(...args: OpConstructorArray): BaseOp;\n  NoParams(...args: any) {\n    let op = new BaseOp(...args);\n    op.constrain(\"no_params\");\n    return op;\n  }\n\n  DraftsOptional(args: OpConstructorArgKeys): BaseOp;\n  DraftsOptional(...args: OpConstructorArray): BaseOp;\n  DraftsOptional(...args: any) {\n    let op = new BaseOp(...args);\n    op.constrain(\"drafts_opt\");\n    return op;\n  }\n\n  ParamsOptional(args: OpConstructorArgKeys): BaseOp;\n  ParamsOptional(...args: OpConstructorArray): BaseOp;\n  ParamsOptional(...args: any) {\n    let op = new BaseOp(...args);\n    op.constrain(\"params_opt\");\n    return op;\n  }\n\n  AllRequired(args: OpConstructorArgKeys): BaseOp;\n  AllRequired(...args: OpConstructorArray): BaseOp;\n  AllRequired(...args: any) {\n    let op = new BaseOp(...args);\n    op.constrain(\"all_req\");\n    return op;\n  }\n}\n\n// combine with mix-ins design pattern (link: TypeScript docs website)\nfunction makeTopoFactory(topo: TopologyName) {\n  return class TopologyFactory extends AbstractOpFactory {\n    static base = new AbstractOpFactory();\n    \n    static NoDrafts(args: OpConstructorArgKeys): BaseOp;\n    static NoDrafts(...args: OpConstructorArray): BaseOp;\n    static NoDrafts(...args: any) {\n      return this.base.NoDrafts(...args).type(topo);\n    }\n\n    static NoParams(args: OpConstructorArgKeys): BaseOp;\n    static NoParams(...args: OpConstructorArray): BaseOp;\n    static NoParams(...args: any) {\n      return this.base.NoParams(...args).type(topo);\n    }\n\n    static DraftsOptional(args: OpConstructorArgKeys): BaseOp;\n    static DraftsOptional(...args: OpConstructorArray): BaseOp;\n    static DraftsOptional(...args: any) {\n      return this.base.DraftsOptional(...args).type(topo);\n    }\n\n    static ParamsOptional(args: OpConstructorArgKeys): BaseOp;\n    static ParamsOptional(...args: OpConstructorArray): BaseOp;\n    static ParamsOptional(...args: any) {\n      return this.base.ParamsOptional(...args).type(topo);\n    }\n\n    static AllRequired(args: OpConstructorArgKeys): BaseOp;\n    static AllRequired(...args: OpConstructorArray): BaseOp;\n    static AllRequired(...args: any) {\n      return this.base.AllRequired(...args).type(topo);\n    }\n  }\n}\n\nexport const OpFactories = {\n  Seed: makeTopoFactory(\"seed\"),\n  Pipe: makeTopoFactory(\"pipe\"),\n  Merge: makeTopoFactory(\"merge\"),\n  Branch: makeTopoFactory(\"merge\"),\n  Bus: makeTopoFactory(\"bus\"),\n}\n\n// export const SeedOperation = makeTopoFactory(\"seed\");\n// export const PipeOperation = makeTopoFactory(\"pipe\");\n// export const MergeOperation = makeTopoFactory(\"merge\");\n// export const BranchOperation = makeTopoFactory(\"merge\");\n// export const BusOperation = makeTopoFactory(\"bus\");\n\ntype TopologyOpIndex = {\n  [T in keyof TopologyIndex]: {\n    [C in keyof ConstraintIndex]: BaseOp;\n  }\n}\n\nexport type BuildableOperation = TopologyOpIndex[TopologyName][ConstraintName];\n    \n\n\n\n\n\n\n\n\n\n\n                   \n    \n         results matching \"\"\n        \n    \n    \n        No results matching \"\"\n    \n\n"},"classes/Selection.html":{"url":"classes/Selection.html","title":"class - Selection","body":"\n                   \n\n\n\n\n\n\n\n\n\n\n\n\n\n  Classes\n  Selection\n\n\n\n        \n            Info\n        \n        \n            Source\n        \n\n\n\n    \n        \n            File\n        \n        \n            src/app/core/model/selection.ts\n        \n\n\n            \n                Description\n            \n            \n                Definition of selection object.\n\n            \n\n\n\n\n            \n    Index\n    \n        \n                \n                    \n                        Properties\n                    \n                \n                \n                    \n                        \n                            \n                                end\n                            \n                            \n                                height\n                            \n                            \n                                start\n                            \n                            \n                                target\n                            \n                            \n                                width\n                            \n                        \n                    \n                \n\n                \n                    \n                        Methods\n                    \n                \n                \n                    \n                        \n                            \n                                getLeft\n                            \n                            \n                                getTarget\n                            \n                            \n                                getTargetId\n                            \n                            \n                                getTop\n                            \n                            \n                                hasSelection\n                            \n                            \n                                setParameters\n                            \n                            \n                                setTarget\n                            \n                            \n                                unsetParameters\n                            \n                        \n                    \n                \n\n\n\n\n\n        \n    \n\n\n\n            \n    \n    \n        Properties\n    \n    \n        \n            \n                \n                    \n                    \n                        end\n                        \n                    \n                \n            \n                \n                    \n                        Type :         Interlacement\n\n                    \n                \n                    \n                        \n                                Defined in src/app/core/model/selection.ts:9\n                        \n                    \n\n\n        \n    \n    \n        \n            \n                \n                    \n                    \n                        height\n                        \n                    \n                \n            \n                \n                    \n                        Type :         number\n\n                    \n                \n                    \n                        \n                                Defined in src/app/core/model/selection.ts:11\n                        \n                    \n\n\n        \n    \n    \n        \n            \n                \n                    \n                    \n                        start\n                        \n                    \n                \n            \n                \n                    \n                        Type :         Interlacement\n\n                    \n                \n                    \n                        \n                                Defined in src/app/core/model/selection.ts:8\n                        \n                    \n\n\n        \n    \n    \n        \n            \n                \n                    \n                    \n                        target\n                        \n                    \n                \n            \n                \n                    \n                        Type :         any\n\n                    \n                \n                    \n                        \n                                Defined in src/app/core/model/selection.ts:12\n                        \n                    \n\n\n        \n    \n    \n        \n            \n                \n                    \n                    \n                        width\n                        \n                    \n                \n            \n                \n                    \n                        Type :         number\n\n                    \n                \n                    \n                        \n                                Defined in src/app/core/model/selection.ts:10\n                        \n                    \n\n\n        \n    \n\n\n            \n    \n    \n        Methods\n    \n    \n        \n            \n                \n                    \n                    \n                        getLeft\n                        \n                    \n                \n            \n            \n                \ngetLeft()\n                \n            \n\n\n            \n                \n                    Defined in src/app/core/model/selection.ts:39\n                \n            \n\n\n            \n                \n\n                    \n                        Returns :         any\n\n                    \n                \n            \n        \n    \n    \n        \n            \n                \n                    \n                    \n                        getTarget\n                        \n                    \n                \n            \n            \n                \ngetTarget()\n                \n            \n\n\n            \n                \n                    Defined in src/app/core/model/selection.ts:47\n                \n            \n\n\n            \n                \n\n                    \n                        Returns :         any\n\n                    \n                \n            \n        \n    \n    \n        \n            \n                \n                    \n                    \n                        getTargetId\n                        \n                    \n                \n            \n            \n                \ngetTargetId()\n                \n            \n\n\n            \n                \n                    Defined in src/app/core/model/selection.ts:51\n                \n            \n\n\n            \n                \n\n                    \n                        Returns :         any\n\n                    \n                \n            \n        \n    \n    \n        \n            \n                \n                    \n                    \n                        getTop\n                        \n                    \n                \n            \n            \n                \ngetTop()\n                \n            \n\n\n            \n                \n                    Defined in src/app/core/model/selection.ts:35\n                \n            \n\n\n            \n                \n\n                    \n                        Returns :         any\n\n                    \n                \n            \n        \n    \n    \n        \n            \n                \n                    \n                    \n                        hasSelection\n                        \n                    \n                \n            \n            \n                \nhasSelection()\n                \n            \n\n\n            \n                \n                    Defined in src/app/core/model/selection.ts:31\n                \n            \n\n\n            \n                \n\n                    \n                        Returns :         boolean\n\n                    \n                \n            \n        \n    \n    \n        \n            \n                \n                    \n                    \n                        setParameters\n                        \n                    \n                \n            \n            \n                \nsetParameters()\n                \n            \n\n\n            \n                \n                    Defined in src/app/core/model/selection.ts:15\n                \n            \n\n\n            \n                \n\n                    \n                        Returns :         void\n\n                    \n                \n            \n        \n    \n    \n        \n            \n                \n                    \n                    \n                        setTarget\n                        \n                    \n                \n            \n            \n                \nsetTarget(t)\n                \n            \n\n\n            \n                \n                    Defined in src/app/core/model/selection.ts:43\n                \n            \n\n\n            \n                \n\n                    \n                        Parameters :\n                        \n                        \n                            \n                                \n                                    Name\n                                    Optional\n                                \n                            \n                            \n                                \n                                    t\n\n                                    \n                                        No\n                                    \n\n\n                                \n                            \n                        \n                    \n                    \n                    \n                    \n                        Returns :         void\n\n                    \n                    \n                        \n                    \n                \n            \n        \n    \n    \n        \n            \n                \n                    \n                    \n                        unsetParameters\n                        \n                    \n                \n            \n            \n                \nunsetParameters()\n                \n            \n\n\n            \n                \n                    Defined in src/app/core/model/selection.ts:26\n                \n            \n\n\n            \n                \n\n                    \n                        Returns :         void\n\n                    \n                \n            \n        \n    \n\n\n\n\n\n\n    \n\n\n    \n        import { Interlacement } from '../../core/model/datatypes'\n\n/**\n * Definition of selection object.\n * @class\n */\nexport class Selection {\n  start: Interlacement;\n  end: Interlacement;\n  width: number;\n  height: number;\n  target: any;\n\n\n  setParameters() {\n    this.width = Math.abs(this.start.j - this.end.j);\n    this.height = Math.abs(this.start.si - this.end.si);\n\n    if(this.target.id == \"weft-systems\" || this.target.id == \"weft-materials\"){\n      this.width = 1;\n    }else if(this.target.id == \"warp-systems\" || this.target.id == \"warp-materials\"){\n      this.height = 1;\n    }\n  }\n\n  unsetParameters() {\n    this.width = -1;\n    this.height = -1;\n  }\n\n  hasSelection(){\n    return (this.width >= 0 && this.height >= 0);\n  }\n\n  getTop(){\n    return Math.min(this.start.si, this.end.si);\n  }\n\n  getLeft(){\n    return Math.min(this.start.j, this.end.j);\n  }\n\n  setTarget(t){\n  \tthis.target = t;\n  }\n\n  getTarget(){\n  \treturn this.target;\n  }\n\n  getTargetId(){\n    if(this.target !== undefined) return this.target.id;\n    return undefined;\n  }\n\n\n\n\n}\n    \n\n\n\n\n\n\n\n\n\n\n                   \n    \n         results matching \"\"\n        \n    \n    \n        No results matching \"\"\n    \n\n"},"directives/SelectionComponent.html":{"url":"directives/SelectionComponent.html","title":"directive - SelectionComponent","body":"\n                   \n\n\n\n\n\n\n\n\n  Directives\n  SelectionComponent\n\n\n\n        \n            Info\n        \n        \n            Source\n        \n\n\n\n    \n        \n            File\n        \n        \n            src/app/mixer/palette/selection/selection.component.ts\n        \n\n\n\n\n            \n                Implements\n            \n            \n                            OnInit\n            \n\n\n        \n            Metadata\n            \n                \n\n                    \n                        Selector\n                        app-selection\n                    \n\n                \n            \n        \n\n            \n    Index\n    \n        \n                \n                    \n                        Properties\n                    \n                \n                \n                    \n                        \n                            \n                                active\n                            \n                            \n                                bounds\n                            \n                            \n                                draft\n                            \n                            \n                                filter\n                            \n                            \n                                id\n                            \n                            \n                                scale\n                            \n                            \n                                start\n                            \n                        \n                    \n                \n\n                \n                    \n                        Methods\n                    \n                \n                \n                    \n                        \n                            \n                                    Public\n                                getDraftId\n                            \n                            \n                                ngOnInit\n                            \n                            \n                                    Public\n                                setPositionAndSize\n                            \n                        \n                    \n                \n\n\n\n\n\n        \n    \n\n\n\n\n\n\n\n            \n    \n    \n        Methods\n    \n    \n        \n            \n                \n                    \n                    \n                        Public\n                        getDraftId\n                        \n                    \n                \n            \n            \n                \n                    \n                    getDraftId()\n                \n            \n\n\n            \n                \n                    Defined in src/app/mixer/palette/selection/selection.component.ts:31\n                \n            \n\n\n            \n                \n\n                    \n                        Returns :         any\n\n                    \n                \n            \n        \n    \n    \n        \n            \n                \n                    \n                    \n                        ngOnInit\n                        \n                    \n                \n            \n            \n                \nngOnInit()\n                \n            \n\n\n            \n                \n                    Defined in src/app/mixer/palette/selection/selection.component.ts:26\n                \n            \n\n\n            \n                \n\n                    \n                        Returns :         void\n\n                    \n                \n            \n        \n    \n    \n        \n            \n                \n                    \n                    \n                        Public\n                        setPositionAndSize\n                        \n                    \n                \n            \n            \n                \n                    \n                    setPositionAndSize(bounds: Bounds)\n                \n            \n\n\n            \n                \n                    Defined in src/app/mixer/palette/selection/selection.component.ts:36\n                \n            \n\n\n            \n                \n\n                    \n                        Parameters :\n                        \n                        \n                            \n                                \n                                    Name\n                                    Type\n                                    Optional\n                                \n                            \n                            \n                                \n                                    bounds\n                                    \n                                                Bounds\n                                    \n\n                                    \n                                        No\n                                    \n\n\n                                \n                            \n                        \n                    \n                    \n                    \n                    \n                        Returns :         void\n\n                    \n                    \n                        \n                    \n                \n            \n        \n    \n\n            \n    \n    \n        Properties\n    \n    \n        \n            \n                \n                    \n                    \n                        active\n                        \n                    \n                \n            \n                \n                    \n                        Default value : false\n                    \n                \n                    \n                        \n                                Defined in src/app/mixer/palette/selection/selection.component.ts:22\n                        \n                    \n\n\n        \n    \n    \n        \n            \n                \n                    \n                    \n                        bounds\n                        \n                    \n                \n            \n                \n                    \n                        Type :         Bounds\n\n                    \n                \n                \n                    \n                        Default value : {\n    topleft: {x: 0, y:0},\n    width: 0,\n    height: 0\n  }\n                    \n                \n                    \n                        \n                                Defined in src/app/mixer/palette/selection/selection.component.ts:15\n                        \n                    \n\n\n        \n    \n    \n        \n            \n                \n                    \n                    \n                        draft\n                        \n                    \n                \n            \n                \n                    \n                        Type :         Draft\n\n                    \n                \n                \n                    \n                        Default value : new Draft({name: \"selection\"})\n                    \n                \n                    \n                        \n                                Defined in src/app/mixer/palette/selection/selection.component.ts:13\n                        \n                    \n\n\n        \n    \n    \n        \n            \n                \n                    \n                    \n                        filter\n                        \n                    \n                \n            \n                \n                    \n                        Type :         string\n\n                    \n                \n                \n                    \n                        Default value : \"or\"\n                    \n                \n                    \n                        \n                                Defined in src/app/mixer/palette/selection/selection.component.ts:24\n                        \n                    \n\n\n        \n    \n    \n        \n            \n                \n                    \n                    \n                        id\n                        \n                    \n                \n            \n                \n                    \n                        Type :         number\n\n                    \n                \n                    \n                        \n                                Defined in src/app/mixer/palette/selection/selection.component.ts:12\n                        \n                    \n\n\n        \n    \n    \n        \n            \n                \n                    \n                    \n                        scale\n                        \n                    \n                \n            \n                \n                    \n                        Type :         number\n\n                    \n                \n                    \n                        \n                                Defined in src/app/mixer/palette/selection/selection.component.ts:23\n                        \n                    \n\n\n        \n    \n    \n        \n            \n                \n                    \n                    \n                        start\n                        \n                    \n                \n            \n                \n                    \n                        Type :         Interlacement\n\n                    \n                \n                \n                    \n                        Default value : {i: 0, j:0, si: 0}\n                    \n                \n                    \n                        \n                                Defined in src/app/mixer/palette/selection/selection.component.ts:21\n                        \n                    \n\n\n        \n    \n\n\n\n    \n\n\n    \n        import { Directive, OnInit } from '@angular/core';\nimport { Draft } from '../../../core/model/draft';\nimport { Point, Bounds, Interlacement } from '../../../core/model/datatypes';\n\n@Directive({\n  selector: 'app-selection'\n})\n\n\nexport class SelectionComponent implements OnInit{\n\n  id: number;\n  draft: Draft = new Draft({name: \"selection\"});\n\n  bounds:Bounds = {\n    topleft: {x: 0, y:0},\n    width: 0,\n    height: 0\n  }\n\n  start:Interlacement = {i: 0, j:0, si: 0};\n  active = false;\n  scale: number; \n  filter = \"or\"\n\n  ngOnInit(){\n    console.log(this.draft.id);\n    console.log(\"created directive selection\");\n  }\n\n  public getDraftId(){\n    return this.draft.id;\n  }\n\n\n  public setPositionAndSize(bounds: Bounds){\n    this.bounds  = bounds;\n  }\n\n\n\n}\n\n    \n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n                   \n    \n         results matching \"\"\n        \n    \n    \n        No results matching \"\"\n    \n\n"},"injectables/SequencerService.html":{"url":"injectables/SequencerService.html","title":"injectable - SequencerService","body":"\n                   \n\n\n\n\n\n\n\n\n\n  Injectables\n  SequencerService\n\n\n\n        \n            Info\n        \n        \n            Source\n        \n\n\n\n    \n        \n            File\n        \n        \n            src/app/player/provider/sequencer.service.ts\n        \n\n\n            \n                Description\n            \n            \n                I separated the sequencer into a generic object class\nAND an Angular service that extends the class. Hopefully\nthat isn't clunky, but it does let me separate methods\nthat are useful to call in the HTML, from the methods\nthat are less often called in HTML\n\n            \n\n            \n                Extends\n            \n            \n                        OpSequencer\n            \n\n\n            \n    Index\n    \n        \n                \n                    \n                        Properties\n                    \n                \n                \n                    \n                        \n                            \n                                chains\n                            \n                            \n                                    Public\n                                pedals\n                            \n                            \n                                selecting\n                            \n                            \n                                _pos\n                            \n                            \n                                name\n                            \n                            \n                                ops\n                            \n                            \n                                p_prog\n                            \n                            \n                                p_select_a\n                            \n                            \n                                    Optional\n                                p_select_b\n                            \n                        \n                    \n                \n\n                \n                    \n                        Methods\n                    \n                \n                \n                    \n                        \n                            \n                                addChainOp\n                            \n                            \n                                addPedals\n                            \n                            \n                                addSingleOp\n                            \n                            \n                                addToChain\n                            \n                            \n                                addOp\n                            \n                            \n                                delOpAt\n                            \n                            \n                                hasPedal\n                            \n                            \n                                mapPedal\n                            \n                            \n                                nextOp\n                            \n                            \n                                perform\n                            \n                            \n                                prevOp\n                            \n                            \n                                removeOp\n                            \n                        \n                    \n                \n\n\n\n\n\n                    \n                        \n                            Accessors\n                        \n                    \n                    \n                        \n                            \n                                \n                                    active\n                                \n                                \n                                    pos\n                                \n                            \n                        \n                    \n        \n    \n\n\n            \n    Constructor\n        \n            \n                \n                    \nconstructor(pedals: PedalsService)\n                    \n                \n                        \n                            \n                                Defined in src/app/player/provider/sequencer.service.ts:34\n                            \n                        \n\n                \n                    \n                            \n                                    Parameters :\n                                    \n                                        \n                                            \n                                                Name\n                                                    Type\n                                                Optional\n                                            \n                                        \n                                        \n                                                \n                                                        pedals\n                                                  \n                                                        \n                                                                        PedalsService\n                                                        \n                                                  \n                                                    \n                                                            No\n                                                    \n                                                    \n                                                \n                                        \n                                    \n                            \n                    \n                \n            \n        \n\n\n            \n    \n    \n        Methods\n    \n    \n        \n            \n                \n                    \n                    \n                        addChainOp\n                        \n                    \n                \n            \n            \n                \naddChainOp(o: PlayerOp)\n                \n            \n\n\n            \n                \n                    Defined in src/app/player/provider/sequencer.service.ts:67\n                \n            \n\n\n            \n                \n                    Add a new chain operation to the sequencer.\n\n\n                    \n                        Parameters :\n                        \n                        \n                            \n                                \n                                    Name\n                                    Type\n                                    Optional\n                                \n                            \n                            \n                                \n                                    o\n                                    \n                                                PlayerOp\n                                    \n\n                                    \n                                        No\n                                    \n\n\n                                \n                            \n                        \n                    \n                    \n                    \n                    \n                        Returns :         void\n\n                    \n                    \n                        \n                    \n                \n            \n        \n    \n    \n        \n            \n                \n                    \n                    \n                        addPedals\n                        \n                    \n                \n            \n            \n                \naddPedals(fwd_pedal: number, select_pedal_a: number, select_pedal_b?: number)\n                \n            \n\n\n            \n                \n                    Defined in src/app/player/provider/sequencer.service.ts:43\n                \n            \n\n\n            \n                \n\n                    \n                        Parameters :\n                        \n                        \n                            \n                                \n                                    Name\n                                    Type\n                                    Optional\n                                \n                            \n                            \n                                \n                                    fwd_pedal\n                                    \n                                                number\n                                    \n\n                                    \n                                        No\n                                    \n\n\n                                \n                                \n                                    select_pedal_a\n                                    \n                                                number\n                                    \n\n                                    \n                                        No\n                                    \n\n\n                                \n                                \n                                    select_pedal_b\n                                    \n                                                number\n                                    \n\n                                    \n                                        Yes\n                                    \n\n\n                                \n                            \n                        \n                    \n                    \n                    \n                    \n                        Returns :         void\n\n                    \n                    \n                        \n                    \n                \n            \n        \n    \n    \n        \n            \n                \n                    \n                    \n                        addSingleOp\n                        \n                    \n                \n            \n            \n                \naddSingleOp(o: PlayerOp)\n                \n            \n\n\n            \n                \n                    Defined in src/app/player/provider/sequencer.service.ts:52\n                \n            \n\n\n            \n                \n                    Add a single operation to the sequencer.\n\n\n                    \n                        Parameters :\n                        \n                        \n                            \n                                \n                                    Name\n                                    Type\n                                    Optional\n                                \n                            \n                            \n                                \n                                    o\n                                    \n                                                PlayerOp\n                                    \n\n                                    \n                                        No\n                                    \n\n\n                                \n                            \n                        \n                    \n                    \n                    \n                    \n                        Returns :         void\n\n                    \n                    \n                        \n                    \n                \n            \n        \n    \n    \n        \n            \n                \n                    \n                    \n                        addToChain\n                        \n                    \n                \n            \n            \n                \naddToChain(ch_id: number, o: PlayerOp)\n                \n            \n\n\n            \n                \n                    Defined in src/app/player/provider/sequencer.service.ts:74\n                \n            \n\n\n            \n                \n                    Add a single operation onto an existing chain op in the sequencer.\n\n\n                    \n                        Parameters :\n                        \n                        \n                            \n                                \n                                    Name\n                                    Type\n                                    Optional\n                                \n                            \n                            \n                                \n                                    ch_id\n                                    \n                                                number\n                                    \n\n                                    \n                                        No\n                                    \n\n\n                                \n                                \n                                    o\n                                    \n                                                PlayerOp\n                                    \n\n                                    \n                                        No\n                                    \n\n\n                                \n                            \n                        \n                    \n                    \n                    \n                    \n                        Returns :         void\n\n                    \n                    \n                        \n                    \n                \n            \n        \n    \n    \n        \n            \n                \n                    \n                    \n                        addOp\n                        \n                    \n                \n            \n            \n                \naddOp(o: PlayerOp | ChainOp)\n                \n            \n\n\n            \n                \n                    Inherited from         OpSequencer\n\n                \n            \n            \n                \n                        Defined in         OpSequencer:88\n\n                \n            \n\n\n            \n                \n\n                    \n                        Parameters :\n                        \n                        \n                            \n                                \n                                    Name\n                                    Type\n                                    Optional\n                                \n                            \n                            \n                                \n                                    o\n                                    \n                                                PlayerOp | ChainOp\n                                    \n\n                                    \n                                        No\n                                    \n\n\n                                \n                            \n                        \n                    \n                    \n                    \n                    \n                        Returns :         number\n\n                    \n                    \n                        \n                    \n                \n            \n        \n    \n    \n        \n            \n                \n                    \n                    \n                        delOpAt\n                        \n                    \n                \n            \n            \n                \ndelOpAt(x: number)\n                \n            \n\n\n            \n                \n                    Inherited from         OpSequencer\n\n                \n            \n            \n                \n                        Defined in         OpSequencer:99\n\n                \n            \n\n\n            \n                \n\n                    \n                        Parameters :\n                        \n                        \n                            \n                                \n                                    Name\n                                    Type\n                                    Optional\n                                \n                            \n                            \n                                \n                                    x\n                                    \n                                                number\n                                    \n\n                                    \n                                        No\n                                    \n\n\n                                \n                            \n                        \n                    \n                    \n                    \n                    \n                        Returns :         void\n\n                    \n                    \n                        \n                    \n                \n            \n        \n    \n    \n        \n            \n                \n                    \n                    \n                        hasPedal\n                        \n                    \n                \n            \n            \n                \nhasPedal(n: number)\n                \n            \n\n\n            \n                \n                    Inherited from         OpSequencer\n\n                \n            \n            \n                \n                        Defined in         OpSequencer:69\n\n                \n            \n\n\n            \n                \n\n                    \n                        Parameters :\n                        \n                        \n                            \n                                \n                                    Name\n                                    Type\n                                    Optional\n                                \n                            \n                            \n                                \n                                    n\n                                    \n                                                number\n                                    \n\n                                    \n                                        No\n                                    \n\n\n                                \n                            \n                        \n                    \n                    \n                    \n                    \n                        Returns :         boolean\n\n                    \n                    \n                        \n                    \n                \n            \n        \n    \n    \n        \n            \n                \n                    \n                    \n                        mapPedal\n                        \n                    \n                \n            \n            \n                \nmapPedal(id: number, role: \"fwd\" | \"sel-next\" | \"sel-back\")\n                \n            \n\n\n            \n                \n                    Inherited from         OpSequencer\n\n                \n            \n            \n                \n                        Defined in         OpSequencer:56\n\n                \n            \n\n\n            \n                \n\n                    \n                        Parameters :\n                        \n                        \n                            \n                                \n                                    Name\n                                    Type\n                                    Optional\n                                \n                            \n                            \n                                \n                                    id\n                                    \n                                                number\n                                    \n\n                                    \n                                        No\n                                    \n\n\n                                \n                                \n                                    role\n                                    \n                                            \"fwd\" | \"sel-next\" | \"sel-back\"\n                                    \n\n                                    \n                                        No\n                                    \n\n\n                                \n                            \n                        \n                    \n                    \n                    \n                    \n                        Returns :         void\n\n                    \n                    \n                        \n                    \n                \n            \n        \n    \n    \n        \n            \n                \n                    \n                    \n                        nextOp\n                        \n                    \n                \n            \n            \n                \nnextOp()\n                \n            \n\n\n            \n                \n                    Inherited from         OpSequencer\n\n                \n            \n            \n                \n                        Defined in         OpSequencer:74\n\n                \n            \n\n\n            \n                \n\n                    \n                        Returns :         any\n\n                    \n                \n            \n        \n    \n    \n        \n            \n                \n                    \n                    \n                        perform\n                        \n                    \n                \n            \n            \n                \nperform(init: PlayerState, n: number)\n                \n            \n\n\n            \n                \n                    Inherited from         OpSequencer\n\n                \n            \n            \n                \n                        Defined in         OpSequencer:104\n\n                \n            \n\n\n            \n                \n\n                    \n                        Parameters :\n                        \n                        \n                            \n                                \n                                    Name\n                                    Type\n                                    Optional\n                                \n                            \n                            \n                                \n                                    init\n                                    \n                                                PlayerState\n                                    \n\n                                    \n                                        No\n                                    \n\n\n                                \n                                \n                                    n\n                                    \n                                                number\n                                    \n\n                                    \n                                        No\n                                    \n\n\n                                \n                            \n                        \n                    \n                    \n                    \n                    \n                        Returns :         Promise\n\n                    \n                    \n                        \n                    \n                \n            \n        \n    \n    \n        \n            \n                \n                    \n                    \n                        prevOp\n                        \n                    \n                \n            \n            \n                \nprevOp()\n                \n            \n\n\n            \n                \n                    Inherited from         OpSequencer\n\n                \n            \n            \n                \n                        Defined in         OpSequencer:81\n\n                \n            \n\n\n            \n                \n\n                    \n                        Returns :         any\n\n                    \n                \n            \n        \n    \n    \n        \n            \n                \n                    \n                    \n                        removeOp\n                        \n                    \n                \n            \n            \n                \nremoveOp()\n                \n            \n\n\n            \n                \n                    Inherited from         OpSequencer\n\n                \n            \n            \n                \n                        Defined in         OpSequencer:94\n\n                \n            \n\n\n            \n                \n\n                    \n                        Returns :         void\n\n                    \n                \n            \n        \n    \n\n            \n    \n    \n        Properties\n    \n    \n        \n            \n                \n                    \n                    \n                        chains\n                        \n                    \n                \n            \n                \n                    \n                        Type :         Array\n\n                    \n                \n                \n                    \n                        Default value : []\n                    \n                \n                    \n                        \n                                Defined in src/app/player/provider/sequencer.service.ts:28\n                        \n                    \n\n\n        \n    \n    \n        \n            \n                \n                    \n                    \n                            Public\n                        pedals\n                        \n                    \n                \n            \n                \n                    \n                        Type :         PedalsService\n\n                    \n                \n                    \n                        \n                                Defined in src/app/player/provider/sequencer.service.ts:37\n                        \n                    \n\n\n        \n    \n    \n        \n            \n                \n                    \n                    \n                        selecting\n                        \n                    \n                \n            \n                \n                    \n                        Type :         boolean\n\n                    \n                \n                \n                    \n                        Default value : false\n                    \n                \n                        \n                            \n                                Inherited from         OpSequencer\n\n                            \n                        \n                    \n                        \n                                Defined in         OpSequencer:27\n\n                        \n                    \n\n\n        \n    \n    \n        \n            \n                \n                    \n                    \n                        _pos\n                        \n                    \n                \n            \n                \n                    \n                        Type :         number\n\n                    \n                \n                \n                    \n                        Default value : -1\n                    \n                \n                        \n                            \n                                Inherited from         OpSequencer\n\n                            \n                        \n                    \n                        \n                                Defined in         OpSequencer:16\n\n                        \n                    \n\n\n        \n    \n    \n        \n            \n                \n                    \n                    \n                        name\n                        \n                    \n                \n            \n                \n                    \n                        Type :         string\n\n                    \n                \n                        \n                            \n                                Inherited from         OpSequencer\n\n                            \n                        \n                    \n                        \n                                Defined in         OpSequencer:12\n\n                        \n                    \n\n\n        \n    \n    \n        \n            \n                \n                    \n                    \n                        ops\n                        \n                    \n                \n            \n                \n                    \n                        Type :         Array\n\n                    \n                \n                \n                    \n                        Default value : []\n                    \n                \n                        \n                            \n                                Inherited from         OpSequencer\n\n                            \n                        \n                    \n                        \n                                Defined in         OpSequencer:17\n\n                        \n                    \n\n\n        \n    \n    \n        \n            \n                \n                    \n                    \n                        p_prog\n                        \n                    \n                \n            \n                \n                    \n                        Type :         number\n\n                    \n                \n                \n                    \n                        Default value : -1\n                    \n                \n                        \n                            \n                                Inherited from         OpSequencer\n\n                            \n                        \n                    \n                        \n                                Defined in         OpSequencer:15\n\n                        \n                    \n\n\n        \n    \n    \n        \n            \n                \n                    \n                    \n                        p_select_a\n                        \n                    \n                \n            \n                \n                    \n                        Type :         number\n\n                    \n                \n                \n                    \n                        Default value : -1\n                    \n                \n                        \n                            \n                                Inherited from         OpSequencer\n\n                            \n                        \n                    \n                        \n                                Defined in         OpSequencer:13\n\n                        \n                    \n\n\n        \n    \n    \n        \n            \n                \n                    \n                    \n                            Optional\n                        p_select_b\n                        \n                    \n                \n            \n                \n                    \n                        Type :         number\n\n                    \n                \n                \n                    \n                        Default value : -1\n                    \n                \n                        \n                            \n                                Inherited from         OpSequencer\n\n                            \n                        \n                    \n                        \n                                Defined in         OpSequencer:14\n\n                        \n                    \n\n\n        \n    \n\n\n            \n    \n        Accessors\n    \n        \n            \n                \n                    \n                        \n                        active\n                    \n                \n\n                \n                    \n                        getactive()\n                    \n                \n                            \n                                \n                                    Defined in src/app/player/provider/sequencer.service.ts:33\n                                \n                            \n\n            \n        \n        \n            \n                \n                    \n                        \n                        pos\n                    \n                \n\n                \n                    \n                        getpos()\n                    \n                \n                            \n                                \n                                    Defined in src/app/player/provider/sequencer.service.ts:34\n                                \n                            \n\n            \n        \n\n    \n\n\n    \n        import { Injectable } from '@angular/core';\nimport { OpSequencer, PlayerOp, ChainOp, makeOpSequencer, makeChainOp } from '../model/op_mappings';\nimport { PlayerService } from '../player.service';\nimport { PedalsService } from './pedals.service';\n\n/** \n * each chain op in the sequencer has an ID and \n * its position in the sequencer \n */\ninterface ChainIndex {\n  id: number,\n  pos: number, // position in ops array\n}\n\n/** \n * I separated the sequencer into a generic object class\n * AND an Angular service that extends the class. Hopefully\n * that isn't clunky, but it does let me separate methods\n * that are useful to call in the HTML, from the methods\n * that are less often called in HTML\n */\n@Injectable({\n  providedIn: 'root'\n})\nexport class SequencerService extends OpSequencer {\n  // seq_array: OpSequencer;\n  selecting: boolean = false;\n  chains: Array = []; // a number pointing to index in sequencer ops\n\n  // get pos() { return this.seq_array.pos; }\n  // get ops() { return this.seq_array ? this.seq_array.ops : []; }\n  // get current() { return this.seq_array.current; }\n  get active() { return (this.readyToWeave ? true : false); }\n  get pos() { return this._pos; }\n\n  constructor(\n    public pedals: PedalsService,\n  ) {\n    super();\n    // this.seq_array = new OpSequencer();\n  }\n\n  addPedals(fwd_pedal: number, select_pedal_a: number, select_pedal_b?: number) {\n    this.mapPedal(fwd_pedal, 'fwd');\n    this.mapPedal(select_pedal_a, 'sel-next');\n    if (select_pedal_b) {\n      this.mapPedal(select_pedal_b, 'sel-back');\n    }\n  }\n\n  /** Add a single operation to the sequencer. */\n  addSingleOp(o: PlayerOp) {\n    if (this.active) {\n      this.addOp(o);\n      /** if this is the first op loaded into the player, run the op so that updates the starting draft */\n      if (this.ops.length == 1) {\n        this.pedals.emit('pedal-step', this.p_select_a);\n      }\n      // console.log(o);\n      // console.log(this.seq);\n    } else {\n      console.log('no sequencer to add to!');\n    }\n  }\n\n  /** Add a new chain operation to the sequencer. */\n  addChainOp(o: PlayerOp) { \n    let ch = makeChainOp([o]);\n    ch.id = this.chains.length;\n    this.chains.push({id: ch.id, pos: this.addOp(ch)});\n  }\n\n  /** Add a single operation onto an existing chain op in the sequencer. */\n  addToChain(ch_id: number, o: PlayerOp) {\n    let ch = this.ops[this.chains[ch_id].pos] as ChainOp;\n    this.ops[this.chains[ch_id].pos] = makeChainOp(ch.ops.concat([o]));\n    console.log(this.ops);\n  }\n\n  // removeOp() { this.seq_array.removeOp(); }\n  // nextOp() { this.seq_array.nextOp(); }\n  // prevOp() { this.seq_array.prevOp(); }\n}\n\n    \n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n                   \n    \n         results matching \"\"\n        \n    \n    \n        No results matching \"\"\n    \n\n"},"classes/Shape.html":{"url":"classes/Shape.html","title":"class - Shape","body":"\n                   \n\n\n\n\n\n\n\n\n\n\n\n\n\n  Classes\n  Shape\n\n\n\n        \n            Info\n        \n        \n            Source\n        \n\n\n\n    \n        \n            File\n        \n        \n            src/app/core/model/shape.ts\n        \n\n\n            \n                Description\n            \n            \n                Definition of Shape object, representing a woven shape\nReserve some number of warp ends for the shape, and track path of\nweft(s) to represent the shape that it is filling.\n\n            \n\n\n\n\n            \n    Index\n    \n        \n                \n                    \n                        Properties\n                    \n                \n                \n                    \n                        \n                            \n                                bounds\n                            \n                            \n                                endCol\n                            \n                            \n                                height\n                            \n                            \n                                id\n                            \n                            \n                                name\n                            \n                            \n                                sett\n                            \n                            \n                                shuttles\n                            \n                            \n                                startCol\n                            \n                            \n                                width\n                            \n                        \n                    \n                \n\n                \n                    \n                        Methods\n                    \n                \n                \n                    \n                        \n                            \n                                addShuttle\n                            \n                            \n                                getHeight\n                            \n                            \n                                getPos\n                            \n                            \n                                getWidth\n                            \n                            \n                                printBounds\n                            \n                            \n                                setEndCol\n                            \n                            \n                                setID\n                            \n                            \n                                setStartCol\n                            \n                            \n                                setWidth\n                            \n                            \n                                updateHeight\n                            \n                        \n                    \n                \n\n\n\n\n\n        \n    \n\n\n            \n    Constructor\n        \n            \n                \n                    \nconstructor()\n                    \n                \n                        \n                            \n                                Defined in src/app/core/model/shape.ts:19\n                            \n                        \n\n                \n                    \n                            Constructor needs width and where the shape is placed\n\n                    \n                \n            \n        \n\n\n            \n    \n    \n        Properties\n    \n    \n        \n            \n                \n                    \n                    \n                        bounds\n                        \n                    \n                \n            \n                \n                    \n                        Type :     Array>\n\n                    \n                \n                    \n                        \n                                Defined in src/app/core/model/shape.ts:19\n                        \n                    \n\n\n        \n    \n    \n        \n            \n                \n                    \n                    \n                        endCol\n                        \n                    \n                \n            \n                \n                    \n                        Type :         number\n\n                    \n                \n                    \n                        \n                                Defined in src/app/core/model/shape.ts:17\n                        \n                    \n\n\n        \n    \n    \n        \n            \n                \n                    \n                    \n                        height\n                        \n                    \n                \n            \n                \n                    \n                        Type :         number\n\n                    \n                \n                    \n                        \n                                Defined in src/app/core/model/shape.ts:15\n                        \n                    \n\n\n        \n    \n    \n        \n            \n                \n                    \n                    \n                        id\n                        \n                    \n                \n            \n                \n                    \n                        Type :         number\n\n                    \n                \n                    \n                        \n                                Defined in src/app/core/model/shape.ts:11\n                        \n                    \n\n\n        \n    \n    \n        \n            \n                \n                    \n                    \n                        name\n                        \n                    \n                \n            \n                \n                    \n                        Type :         string\n\n                    \n                \n                    \n                        \n                                Defined in src/app/core/model/shape.ts:12\n                        \n                    \n\n\n        \n    \n    \n        \n            \n                \n                    \n                    \n                        sett\n                        \n                    \n                \n            \n                \n                    \n                        Type :         number\n\n                    \n                \n                    \n                        \n                                Defined in src/app/core/model/shape.ts:14\n                        \n                    \n\n\n        \n    \n    \n        \n            \n                \n                    \n                    \n                        shuttles\n                        \n                    \n                \n            \n                \n                    \n                        Type :         Array\n\n                    \n                \n                    \n                        \n                                Defined in src/app/core/model/shape.ts:18\n                        \n                    \n\n\n        \n    \n    \n        \n            \n                \n                    \n                    \n                        startCol\n                        \n                    \n                \n            \n                \n                    \n                        Type :         number\n\n                    \n                \n                    \n                        \n                                Defined in src/app/core/model/shape.ts:16\n                        \n                    \n\n\n        \n    \n    \n        \n            \n                \n                    \n                    \n                        width\n                        \n                    \n                \n            \n                \n                    \n                        Type :         number\n\n                    \n                \n                    \n                        \n                                Defined in src/app/core/model/shape.ts:13\n                        \n                    \n\n\n        \n    \n\n\n            \n    \n    \n        Methods\n    \n    \n        \n            \n                \n                    \n                    \n                        addShuttle\n                        \n                    \n                \n            \n            \n                \naddShuttle(shuttle: Shuttle)\n                \n            \n\n\n            \n                \n                    Defined in src/app/core/model/shape.ts:83\n                \n            \n\n\n            \n                \n                    Once given a shuttle, fills out bounds row by row\nimplement in draft.ts? draft has access to shuttle row mapping\n\n\n                    \n                        Parameters :\n                        \n                        \n                            \n                                \n                                    Name\n                                    Type\n                                    Optional\n                                \n                            \n                            \n                                \n                                    shuttle\n                                    \n                                                Shuttle\n                                    \n\n                                    \n                                        No\n                                    \n\n\n                                \n                            \n                        \n                    \n                    \n                    \n                    \n                        Returns :         void\n\n                    \n                    \n                        \n                    \n                \n            \n        \n    \n    \n        \n            \n                \n                    \n                    \n                        getHeight\n                        \n                    \n                \n            \n            \n                \ngetHeight()\n                \n            \n\n\n            \n                \n                    Defined in src/app/core/model/shape.ts:56\n                \n            \n\n\n            \n                \n\n                    \n                        Returns :         number\n\n                    \n                \n            \n        \n    \n    \n        \n            \n                \n                    \n                    \n                        getPos\n                        \n                    \n                \n            \n            \n                \ngetPos()\n                \n            \n\n\n            \n                \n                    Defined in src/app/core/model/shape.ts:60\n                \n            \n\n\n            \n                \n\n                    \n                        Returns :     {}\n\n                    \n                \n            \n        \n    \n    \n        \n            \n                \n                    \n                    \n                        getWidth\n                        \n                    \n                \n            \n            \n                \ngetWidth()\n                \n            \n\n\n            \n                \n                    Defined in src/app/core/model/shape.ts:52\n                \n            \n\n\n            \n                \n\n                    \n                        Returns :         number\n\n                    \n                \n            \n        \n    \n    \n        \n            \n                \n                    \n                    \n                        printBounds\n                        \n                    \n                \n            \n            \n                \nprintBounds()\n                \n            \n\n\n            \n                \n                    Defined in src/app/core/model/shape.ts:66\n                \n            \n\n\n            \n                \n\n                    \n                        Returns :         any\n\n                    \n                \n            \n        \n    \n    \n        \n            \n                \n                    \n                    \n                        setEndCol\n                        \n                    \n                \n            \n            \n                \nsetEndCol(col: number)\n                \n            \n\n\n            \n                \n                    Defined in src/app/core/model/shape.ts:46\n                \n            \n\n\n            \n                \n\n                    \n                        Parameters :\n                        \n                        \n                            \n                                \n                                    Name\n                                    Type\n                                    Optional\n                                \n                            \n                            \n                                \n                                    col\n                                    \n                                                number\n                                    \n\n                                    \n                                        No\n                                    \n\n\n                                \n                            \n                        \n                    \n                    \n                    \n                    \n                        Returns :         void\n\n                    \n                    \n                        \n                    \n                \n            \n        \n    \n    \n        \n            \n                \n                    \n                    \n                        setID\n                        \n                    \n                \n            \n            \n                \nsetID(id: number)\n                \n            \n\n\n            \n                \n                    Defined in src/app/core/model/shape.ts:31\n                \n            \n\n\n            \n                \n\n                    \n                        Parameters :\n                        \n                        \n                            \n                                \n                                    Name\n                                    Type\n                                    Optional\n                                \n                            \n                            \n                                \n                                    id\n                                    \n                                                number\n                                    \n\n                                    \n                                        No\n                                    \n\n\n                                \n                            \n                        \n                    \n                    \n                    \n                    \n                        Returns :         void\n\n                    \n                    \n                        \n                    \n                \n            \n        \n    \n    \n        \n            \n                \n                    \n                    \n                        setStartCol\n                        \n                    \n                \n            \n            \n                \nsetStartCol(col: number)\n                \n            \n\n\n            \n                \n                    Defined in src/app/core/model/shape.ts:42\n                \n            \n\n\n            \n                \n\n                    \n                        Parameters :\n                        \n                        \n                            \n                                \n                                    Name\n                                    Type\n                                    Optional\n                                \n                            \n                            \n                                \n                                    col\n                                    \n                                                number\n                                    \n\n                                    \n                                        No\n                                    \n\n\n                                \n                            \n                        \n                    \n                    \n                    \n                    \n                        Returns :         void\n\n                    \n                    \n                        \n                    \n                \n            \n        \n    \n    \n        \n            \n                \n                    \n                    \n                        setWidth\n                        \n                    \n                \n            \n            \n                \nsetWidth(width: number)\n                \n            \n\n\n            \n                \n                    Defined in src/app/core/model/shape.ts:38\n                \n            \n\n\n            \n                \n\n                    \n                        Parameters :\n                        \n                        \n                            \n                                \n                                    Name\n                                    Type\n                                    Optional\n                                \n                            \n                            \n                                \n                                    width\n                                    \n                                                number\n                                    \n\n                                    \n                                        No\n                                    \n\n\n                                \n                            \n                        \n                    \n                    \n                    \n                    \n                        Returns :         void\n\n                    \n                    \n                        \n                    \n                \n            \n        \n    \n    \n        \n            \n                \n                    \n                    \n                        updateHeight\n                        \n                    \n                \n            \n            \n                \nupdateHeight()\n                \n            \n\n\n            \n                \n                    Defined in src/app/core/model/shape.ts:90\n                \n            \n\n\n            \n                \n                    Update height with Shuttle information and sett\n\n\n                    \n                        Returns :         void\n\n                    \n                \n            \n        \n    \n\n\n\n\n\n\n    \n\n\n    \n        import { Shuttle } from './shuttle';\n\n/**\n * Definition of Shape object, representing a woven shape\n * Reserve some number of warp ends for the shape, and track path of \n * weft(s) to represent the shape that it is filling.\n * @class\n * \n */\nexport class Shape {\n\tid: number;\n\tname: string;\n\twidth: number; // number of warp ends across\n\tsett: number; // number of picks per inch, or maybe warp:weft ratio?\n\theight: number; // multiple of sett, does not necessarily reflect # of rows in draft\n\tstartCol: number; // first warp belonging to shape\n\tendCol: number; // last warp belonging to shape\n\tshuttles: Array; // associated shuttles\n\tbounds: Array> // delimit shape by indicating where each pick starts and ends; each element in Array is Array of length 3 - \n\n\t/**\n\t * Constructor needs width and where the shape is placed\n\t */\n\tconstructor() {\n\t\tthis.shuttles = [];\n\t\tthis.bounds = [];\n\t}\n\n\t// set functions\n\n\tsetID(id: number) {\n\t    this.id = id;\n\t    if (!this.name) {\n\t      this.name = 'Shape ' + (id + 1);\n\t\t}\n\t}\n\n\tsetWidth(width: number) {\n\t\tthis.width = width;\n\t}\n\n\tsetStartCol(col: number) {\n\t\tthis.startCol = col;\n\t}\n\n\tsetEndCol(col: number) {\n\t\tthis.endCol = col;\n\t}\n\n\t// get functions\n\n\tgetWidth() {\n\t\treturn this.width;\n\t}\n\n\tgetHeight() {\n\t\treturn this.height;\n\t}\n\n\tgetPos() {\n\t\tlet pos = [this.startCol, this.endCol];\n\t\treturn pos;\n\t}\n\n\t// returns a string listing all bounds of the Shape\n\tprintBounds() {\n\t\tif (this.bounds.length) {\n\t\t\tlet boundsString = new String;\n\t\t\t// for element in bounds array\n\t\t\tfor (var i = 0; i \n    \n\n\n\n\n\n\n\n\n\n\n                   \n    \n         results matching \"\"\n        \n    \n    \n        No results matching \"\"\n    \n\n"},"classes/Shape-1.html":{"url":"classes/Shape-1.html","title":"class - Shape-1","body":"\n                   \n\n\n\n\n\n\n\n\n\n\n\n\n\n  Classes\n  Shape\n\n\n\n        \n            Info\n        \n        \n            Source\n        \n\n\n\n    \n        \n            File\n        \n        \n            src/app/mixer/model/shape.ts\n        \n\n\n            \n                Description\n            \n            \n                This class manages drafts that are linked to a shaped region.\nIt offers functions to translate between shapes represented as HTML Elements\nand converting them into 2D array's of cells\n\n            \n\n\n\n\n            \n    Index\n    \n        \n                \n                    \n                        Properties\n                    \n                \n                \n                    \n                        \n                            \n                                draft\n                            \n                            \n                                filled\n                            \n                            \n                                img_data\n                            \n                            \n                                scale\n                            \n                        \n                    \n                \n\n                \n                    \n                        Methods\n                    \n                \n                \n                    \n                        \n                            \n                                getDraft\n                            \n                            \n                                getImageData\n                            \n                            \n                                read\n                            \n                            \n                                resample\n                            \n                        \n                    \n                \n\n\n\n\n\n        \n    \n\n\n            \n    Constructor\n        \n            \n                \n                    \nconstructor(shape_canvas: HTMLCanvasElement, bounds: Bounds, scale: number)\n                    \n                \n                        \n                            \n                                Defined in src/app/mixer/model/shape.ts:15\n                            \n                        \n\n                \n                    \n                            \n                                    Parameters :\n                                    \n                                        \n                                            \n                                                Name\n                                                    Type\n                                                Optional\n                                                    Description\n                                            \n                                        \n                                        \n                                                \n                                                        shape_canvas\n                                                  \n                                                        \n                                                                    HTMLCanvasElement\n                                                        \n                                                  \n                                                    \n                                                            No\n                                                    \n                                                    \n                                                        \n                                                                \na canvas with the shape on it\n\n\n                                                        \n                                                \n                                                \n                                                        bounds\n                                                  \n                                                        \n                                                                        Bounds\n                                                        \n                                                  \n                                                    \n                                                            No\n                                                    \n                                                    \n                                                        \n                                                                \nthe bounds of the shape we are converting\n\n\n                                                        \n                                                \n                                                \n                                                        scale\n                                                  \n                                                        \n                                                                        number\n                                                        \n                                                  \n                                                    \n                                                            No\n                                                    \n                                                    \n                                                        \n                                                                \nthe scale of each cell within the canvas.\n\n\n                                                        \n                                                \n                                        \n                                    \n                            \n                    \n                \n            \n        \n\n\n            \n    \n    \n        Properties\n    \n    \n        \n            \n                \n                    \n                    \n                        draft\n                        \n                    \n                \n            \n                \n                    \n                        Type :         Array>\n\n                    \n                \n                    \n                        \n                                Defined in src/app/mixer/model/shape.ts:14\n                        \n                    \n\n\n        \n    \n    \n        \n            \n                \n                    \n                    \n                        filled\n                        \n                    \n                \n            \n                \n                    \n                        Type :         boolean\n\n                    \n                \n                    \n                        \n                                Defined in src/app/mixer/model/shape.ts:15\n                        \n                    \n\n\n        \n    \n    \n        \n            \n                \n                    \n                    \n                        img_data\n                        \n                    \n                \n            \n                \n                    \n                        Type :     ImageData\n\n                    \n                \n                    \n                        \n                                Defined in src/app/mixer/model/shape.ts:12\n                        \n                    \n\n\n        \n    \n    \n        \n            \n                \n                    \n                    \n                        scale\n                        \n                    \n                \n            \n                \n                    \n                        Type :         number\n\n                    \n                \n                    \n                        \n                                Defined in src/app/mixer/model/shape.ts:13\n                        \n                    \n\n\n        \n    \n\n\n            \n    \n    \n        Methods\n    \n    \n        \n            \n                \n                    \n                    \n                        getDraft\n                        \n                    \n                \n            \n            \n                \ngetDraft()\n                \n            \n\n\n            \n                \n                    Defined in src/app/mixer/model/shape.ts:101\n                \n            \n\n\n            \n                \n\n                    \n                        Returns :         Array>\n\n                    \n                \n            \n        \n    \n    \n        \n            \n                \n                    \n                    \n                        getImageData\n                        \n                    \n                \n            \n            \n                \ngetImageData()\n                \n            \n\n\n            \n                \n                    Defined in src/app/mixer/model/shape.ts:35\n                \n            \n\n\n            \n                \n\n                    \n                        Returns :     ImageData\n\n                    \n                \n            \n        \n    \n    \n        \n            \n                \n                    \n                    \n                        read\n                        \n                    \n                \n            \n            \n                \nread()\n                \n            \n\n\n            \n                \n                    Defined in src/app/mixer/model/shape.ts:78\n                \n            \n\n\n            \n                \n                    rescale the draft in its current size to have this number of rows and cols\n\n\n                    \n                        Returns :         Array>\n\n                    \n                \n            \n        \n    \n    \n        \n            \n                \n                    \n                    \n                        resample\n                        \n                    \n                \n            \n            \n                \nresample(rows: number, cols: number)\n                \n            \n\n\n            \n                \n                    Defined in src/app/mixer/model/shape.ts:45\n                \n            \n\n\n            \n                \n                    rescale the draft in its current size to have this number of rows and cols\nnote: this breaks if scale is not a whole number\n\n\n                    \n                        Parameters :\n                        \n                        \n                            \n                                \n                                    Name\n                                    Type\n                                    Optional\n                                \n                            \n                            \n                                \n                                    rows\n                                    \n                                                number\n                                    \n\n                                    \n                                        No\n                                    \n\n\n                                \n                                \n                                    cols\n                                    \n                                                number\n                                    \n\n                                    \n                                        No\n                                    \n\n\n                                \n                            \n                        \n                    \n                    \n                    \n                    \n                        Returns :         Array>\n\n                    \n                    \n                        \n                    \n                \n            \n        \n    \n\n\n\n\n\n\n    \n\n\n    \n        import { Cell } from \"../../core/model/cell\";\nimport { Bounds } from \"../../core/model/datatypes\";\n\n/**\n * @class Shape\n * This class manages drafts that are linked to a shaped region. \n * It offers functions to translate between shapes represented as HTML Elements \n * and converting them into 2D array's of cells\n */\nexport class Shape {\n\n  img_data: ImageData;\n  scale: number;\n  draft: Array>;\n  filled: boolean;\n \n  \n/**\n * @constructor takes a canvas element and bounds and converts it to data. \n * @param shape_canvas - a canvas with the shape on it \n * @param bounds - the bounds of the shape we are converting\n * @param scale - the scale of each cell within the canvas. \n */\n  constructor(shape_canvas: HTMLCanvasElement, bounds:Bounds, scale:number) {\n    this.scale = scale;\n    const context = shape_canvas.getContext('2d');\n    const download = shape_canvas.toDataURL(\"image/png\");\n    // document.write('');\n    console.log(\"scale\", this.scale);\n\n    this.img_data = context.getImageData(bounds.topleft.x, bounds.topleft.y, bounds.width, bounds.height);\n    this.draft = this.resample(Math.floor(bounds.height/scale), Math.floor(bounds.width/scale));\n  };\n\n  getImageData(){\n    return this.img_data;\n  }\n\n\n  /**\n   * rescale the draft in its current size to have this number of rows and cols\n   * note: this breaks if scale is not a whole number\n   * @param bounds \n   */\n  resample(rows: number, cols: number):Array>{\n\n    this.draft = [];\n    //const margin: number = this.scale/2; // used to check the center of cells\n    const margin = 0;\n    for(let i = 0; i = 150){\n        //   console.log(i, j, \"set\");\n        // }else if(p_grn >{\n    return this.draft;\n  }\n  \n}\n\n    \n\n\n\n\n\n\n\n\n\n\n                   \n    \n         results matching \"\"\n        \n    \n    \n        No results matching \"\"\n    \n\n"},"classes/Shuttle.html":{"url":"classes/Shuttle.html","title":"class - Shuttle","body":"\n                   \n\n\n\n\n\n\n\n\n\n\n\n\n\n  Classes\n  Shuttle\n\n\n\n        \n            Info\n        \n        \n            Source\n        \n\n\n\n    \n        \n            File\n        \n        \n            src/app/core/model/shuttle.ts\n        \n\n\n            \n                Description\n            \n            \n                Definition of Shuttle object.\na shuttle inhertis from a material.\n\n            \n\n\n\n\n            \n    Index\n    \n        \n                \n                    \n                        Properties\n                    \n                \n                \n                    \n                        \n                            \n                                color\n                            \n                            \n                                    Optional\n                                endLabel\n                            \n                            \n                                id\n                            \n                            \n                                insert\n                            \n                            \n                                name\n                            \n                            \n                                notes\n                            \n                            \n                                    Optional\n                                startLabel\n                            \n                            \n                                thickness\n                            \n                            \n                                type\n                            \n                            \n                                visible\n                            \n                        \n                    \n                \n\n                \n                    \n                        Methods\n                    \n                \n                \n                    \n                        \n                            \n                                getColor\n                            \n                            \n                                getId\n                            \n                            \n                                getName\n                            \n                            \n                                getThickness\n                            \n                            \n                                getType\n                            \n                            \n                                setColor\n                            \n                            \n                                setID\n                            \n                            \n                                setThickness\n                            \n                            \n                                setType\n                            \n                            \n                                setVisible\n                            \n                            \n                                updateVariables\n                            \n                        \n                    \n                \n\n\n\n\n\n        \n    \n\n\n            \n    Constructor\n        \n            \n                \n                    \nconstructor(shuttleDict: null)\n                    \n                \n                        \n                            \n                                Defined in src/app/core/model/shuttle.ts:17\n                            \n                        \n\n                \n                    \n                            \n                                    Parameters :\n                                    \n                                        \n                                            \n                                                Name\n                                                    Type\n                                                Optional\n                                            \n                                        \n                                        \n                                                \n                                                        shuttleDict\n                                                  \n                                                        \n                                                                    null\n                                                        \n                                                  \n                                                    \n                                                            No\n                                                    \n                                                    \n                                                \n                                        \n                                    \n                            \n                    \n                \n            \n        \n\n\n            \n    \n    \n        Properties\n    \n    \n        \n            \n                \n                    \n                    \n                        color\n                        \n                    \n                \n            \n                \n                    \n                        Type :         string\n\n                    \n                \n                    \n                        \n                                Defined in src/app/core/model/shuttle.ts:11\n                        \n                    \n\n\n        \n    \n    \n        \n            \n                \n                    \n                    \n                            Optional\n                        endLabel\n                        \n                    \n                \n            \n                \n                    \n                        Type :         string\n\n                    \n                \n                    \n                        \n                                Defined in src/app/core/model/shuttle.ts:16\n                        \n                    \n\n\n        \n    \n    \n        \n            \n                \n                    \n                    \n                        id\n                        \n                    \n                \n            \n                \n                    \n                        Type :         number\n\n                    \n                \n                    \n                        \n                                Defined in src/app/core/model/shuttle.ts:7\n                        \n                    \n\n\n        \n    \n    \n        \n            \n                \n                    \n                    \n                        insert\n                        \n                    \n                \n            \n                \n                    \n                        Type :         boolean\n\n                    \n                \n                    \n                        \n                                Defined in src/app/core/model/shuttle.ts:9\n                        \n                    \n\n\n        \n    \n    \n        \n            \n                \n                    \n                    \n                        name\n                        \n                    \n                \n            \n                \n                    \n                        Type :         string\n\n                    \n                \n                    \n                        \n                                Defined in src/app/core/model/shuttle.ts:8\n                        \n                    \n\n\n        \n    \n    \n        \n            \n                \n                    \n                    \n                        notes\n                        \n                    \n                \n            \n                \n                    \n                        Type :         string\n\n                    \n                \n                    \n                        \n                                Defined in src/app/core/model/shuttle.ts:17\n                        \n                    \n\n\n        \n    \n    \n        \n            \n                \n                    \n                    \n                            Optional\n                        startLabel\n                        \n                    \n                \n            \n                \n                    \n                        Type :         string\n\n                    \n                \n                    \n                        \n                                Defined in src/app/core/model/shuttle.ts:15\n                        \n                    \n\n\n        \n    \n    \n        \n            \n                \n                    \n                    \n                        thickness\n                        \n                    \n                \n            \n                \n                    \n                        Type :         number\n\n                    \n                \n                    \n                        \n                                Defined in src/app/core/model/shuttle.ts:12\n                        \n                    \n\n\n        \n    \n    \n        \n            \n                \n                    \n                    \n                        type\n                        \n                    \n                \n            \n                \n                    \n                        Type :         number\n\n                    \n                \n                    \n                        \n                                Defined in src/app/core/model/shuttle.ts:13\n                        \n                    \n\n\n        \n    \n    \n        \n            \n                \n                    \n                    \n                        visible\n                        \n                    \n                \n            \n                \n                    \n                        Type :         boolean\n\n                    \n                \n                    \n                        \n                                Defined in src/app/core/model/shuttle.ts:10\n                        \n                    \n\n\n        \n    \n\n\n            \n    \n    \n        Methods\n    \n    \n        \n            \n                \n                    \n                    \n                        getColor\n                        \n                    \n                \n            \n            \n                \ngetColor()\n                \n            \n\n\n            \n                \n                    Defined in src/app/core/model/shuttle.ts:80\n                \n            \n\n\n            \n                \n\n                    \n                        Returns :         string\n\n                    \n                \n            \n        \n    \n    \n        \n            \n                \n                    \n                    \n                        getId\n                        \n                    \n                \n            \n            \n                \ngetId()\n                \n            \n\n\n            \n                \n                    Defined in src/app/core/model/shuttle.ts:59\n                \n            \n\n\n            \n                \n\n                    \n                        Returns :         number\n\n                    \n                \n            \n        \n    \n    \n        \n            \n                \n                    \n                    \n                        getName\n                        \n                    \n                \n            \n            \n                \ngetName()\n                \n            \n\n\n            \n                \n                    Defined in src/app/core/model/shuttle.ts:92\n                \n            \n\n\n            \n                \n\n                    \n                        Returns :         string\n\n                    \n                \n            \n        \n    \n    \n        \n            \n                \n                    \n                    \n                        getThickness\n                        \n                    \n                \n            \n            \n                \ngetThickness()\n                \n            \n\n\n            \n                \n                    Defined in src/app/core/model/shuttle.ts:84\n                \n            \n\n\n            \n                \n\n                    \n                        Returns :         number\n\n                    \n                \n            \n        \n    \n    \n        \n            \n                \n                    \n                    \n                        getType\n                        \n                    \n                \n            \n            \n                \ngetType()\n                \n            \n\n\n            \n                \n                    Defined in src/app/core/model/shuttle.ts:88\n                \n            \n\n\n            \n                \n\n                    \n                        Returns :         number\n\n                    \n                \n            \n        \n    \n    \n        \n            \n                \n                    \n                    \n                        setColor\n                        \n                    \n                \n            \n            \n                \nsetColor(color: string)\n                \n            \n\n\n            \n                \n                    Defined in src/app/core/model/shuttle.ts:63\n                \n            \n\n\n            \n                \n\n                    \n                        Parameters :\n                        \n                        \n                            \n                                \n                                    Name\n                                    Type\n                                    Optional\n                                \n                            \n                            \n                                \n                                    color\n                                    \n                                                string\n                                    \n\n                                    \n                                        No\n                                    \n\n\n                                \n                            \n                        \n                    \n                    \n                    \n                    \n                        Returns :         void\n\n                    \n                    \n                        \n                    \n                \n            \n        \n    \n    \n        \n            \n                \n                    \n                    \n                        setID\n                        \n                    \n                \n            \n            \n                \nsetID(id: number)\n                \n            \n\n\n            \n                \n                    Defined in src/app/core/model/shuttle.ts:52\n                \n            \n\n\n            \n                \n\n                    \n                        Parameters :\n                        \n                        \n                            \n                                \n                                    Name\n                                    Type\n                                    Optional\n                                \n                            \n                            \n                                \n                                    id\n                                    \n                                                number\n                                    \n\n                                    \n                                        No\n                                    \n\n\n                                \n                            \n                        \n                    \n                    \n                    \n                    \n                        Returns :         void\n\n                    \n                    \n                        \n                    \n                \n            \n        \n    \n    \n        \n            \n                \n                    \n                    \n                        setThickness\n                        \n                    \n                \n            \n            \n                \nsetThickness(n: number)\n                \n            \n\n\n            \n                \n                    Defined in src/app/core/model/shuttle.ts:67\n                \n            \n\n\n            \n                \n\n                    \n                        Parameters :\n                        \n                        \n                            \n                                \n                                    Name\n                                    Type\n                                    Optional\n                                \n                            \n                            \n                                \n                                    n\n                                    \n                                                number\n                                    \n\n                                    \n                                        No\n                                    \n\n\n                                \n                            \n                        \n                    \n                    \n                    \n                    \n                        Returns :         void\n\n                    \n                    \n                        \n                    \n                \n            \n        \n    \n    \n        \n            \n                \n                    \n                    \n                        setType\n                        \n                    \n                \n            \n            \n                \nsetType(type: number)\n                \n            \n\n\n            \n                \n                    Defined in src/app/core/model/shuttle.ts:72\n                \n            \n\n\n            \n                \n\n                    \n                        Parameters :\n                        \n                        \n                            \n                                \n                                    Name\n                                    Type\n                                    Optional\n                                \n                            \n                            \n                                \n                                    type\n                                    \n                                                number\n                                    \n\n                                    \n                                        No\n                                    \n\n\n                                \n                            \n                        \n                    \n                    \n                    \n                    \n                        Returns :         void\n\n                    \n                    \n                        \n                    \n                \n            \n        \n    \n    \n        \n            \n                \n                    \n                    \n                        setVisible\n                        \n                    \n                \n            \n            \n                \nsetVisible(visible: boolean)\n                \n            \n\n\n            \n                \n                    Defined in src/app/core/model/shuttle.ts:76\n                \n            \n\n\n            \n                \n\n                    \n                        Parameters :\n                        \n                        \n                            \n                                \n                                    Name\n                                    Type\n                                    Optional\n                                \n                            \n                            \n                                \n                                    visible\n                                    \n                                                boolean\n                                    \n\n                                    \n                                        No\n                                    \n\n\n                                \n                            \n                        \n                    \n                    \n                    \n                    \n                        Returns :         void\n\n                    \n                    \n                        \n                    \n                \n            \n        \n    \n    \n        \n            \n                \n                    \n                    \n                        updateVariables\n                        \n                    \n                \n            \n            \n                \nupdateVariables(undefined)\n                \n            \n\n\n            \n                \n                    Defined in src/app/core/model/shuttle.ts:36\n                \n            \n\n\n            \n                \n\n                    \n                        Parameters :\n                        \n                        \n                            \n                                \n                                    Name\n                                    Optional\n                                \n                            \n                            \n                                \n\n                                    \n                                        No\n                                    \n\n\n                                \n                            \n                        \n                    \n                    \n                    \n                    \n                        Returns :         void\n\n                    \n                    \n                        \n                    \n                \n            \n        \n    \n\n\n\n\n\n\n    \n\n\n    \n        export class Shuttle {\n  id: number;\n  name: string;\n  insert: boolean; //true is left, false is right\n  visible: boolean;\n  color: string;\n  thickness: number; //percentage of base dims\n  type: number;\n  // image?: any;\n  startLabel?: string;\n  endLabel?: string;\n  notes: string;\n\n\n  constructor(shuttleDict = null) {\n\n    //defaults\n    this.id = -1;\n    this.name=\"\";\n    this.insert = true;\n    this.visible = true;\n    this.color=\"#666666\";\n    this.thickness=100;\n    this.type = 0;\n    this.notes = \"\";\n\n    if (shuttleDict) this.updateVariables(shuttleDict);\n\n  }\n\n  updateVariables({id, name, insert, visible, color, thickness, type, notes}) {\n    \n    this.id = id;\n    this.name = name;\n    this.insert = insert;\n    this.visible = visible;\n    this.color = color;\n    this.thickness = thickness;\n    this.type = type;\n    if(this.type === undefined) this.type = 0;\n  // this.image = image;\n    // this.startLabel = startLabel;\n    // this.endLabel = endLabel;\n    this.notes = notes;\n  }\n\n  setID(id: number) {\n    this.id = id;\n    if (!this.name) {\n      this.name = 'Shuttle ' + (id + 1);\n    }\n  }\n\n  getId(){\n    return this.id;\n  }\n\n  setColor(color: string) {\n    this.color = color;\n  }\n\n  setThickness(n: number) {\n    this.thickness = n;\n  }\n\n  //indexs into type list\n  setType(type: number) {\n    this.type = type;\n  }\n\n  setVisible(visible:boolean){\n    this.visible = visible;\n  }\n\n  getColor() {\n    return this.color;\n  }\n\n  getThickness() {\n    return this.thickness;\n  }\n\n  getType() {\n    return this.type;\n  }\n\n  getName(){\n    return this.name;\n  }\n\n}\n    \n\n\n\n\n\n\n\n\n\n\n                   \n    \n         results matching \"\"\n        \n    \n    \n        No results matching \"\"\n    \n\n"},"components/SnackbarComponent.html":{"url":"components/SnackbarComponent.html","title":"component - SnackbarComponent","body":"\n                   \n\n\n\n\n\n  Components\n  \n  SnackbarComponent\n\n\n\n        \n            Info\n        \n        \n            Source\n        \n        \n            Template\n        \n        \n            Styles\n        \n        \n            DOM Tree\n        \n\n\n\n    \n    File\n\n\n    src/app/mixer/palette/snackbar/snackbar.component.ts\n\n\n\n\n\n    \n        Implements\n    \n    \n                    OnInit\n    \n\n\n\n    Metadata\n    \n        \n\n\n\n\n\n\n\n\n\n\n\n            \n                selector\n                app-snackbar\n            \n\n            \n                styleUrls\n                ./snackbar.component.scss\n            \n\n\n\n            \n                templateUrl\n                ./snackbar.component.html\n            \n\n\n\n\n\n\n\n\n        \n    \n\n\n    \n    Index\n    \n        \n                \n                    \n                        Properties\n                    \n                \n                \n                    \n                        \n                            \n                                bounds\n                            \n                            \n                                    Public\n                                data\n                            \n                            \n                                message\n                            \n                            \n                                scale\n                            \n                        \n                    \n                \n\n                \n                    \n                        Methods\n                    \n                \n                \n                    \n                        \n                            \n                                ngOnInit\n                            \n                        \n                    \n                \n\n\n\n\n\n        \n    \n\n\n    \n    Constructor\n        \n            \n                \n                    \nconstructor(data: any)\n                    \n                \n                        \n                            \n                                Defined in src/app/mixer/palette/snackbar/snackbar.component.ts:15\n                            \n                        \n\n                \n                    \n                            \n                                    Parameters :\n                                    \n                                        \n                                            \n                                                Name\n                                                    Type\n                                                Optional\n                                            \n                                        \n                                        \n                                                \n                                                        data\n                                                  \n                                                        \n                                                                        any\n                                                        \n                                                  \n                                                    \n                                                            No\n                                                    \n                                                    \n                                                \n                                        \n                                    \n                            \n                    \n                \n            \n        \n\n\n\n\n\n\n    \n    \n    \n        Methods\n    \n    \n        \n            \n                \n                    \n                    \n                        ngOnInit\n                        \n                    \n                \n            \n            \n                \nngOnInit()\n                \n            \n\n\n            \n                \n                    Defined in src/app/mixer/palette/snackbar/snackbar.component.ts:23\n                \n            \n\n\n            \n                \n\n                    \n                        Returns :         void\n\n                    \n                \n            \n        \n    \n\n    \n    \n    \n        Properties\n    \n    \n        \n            \n                \n                    \n                    \n                        bounds\n                        \n                    \n                \n            \n                \n                    \n                        Type :         Bounds\n\n                    \n                \n                    \n                        \n                                Defined in src/app/mixer/palette/snackbar/snackbar.component.ts:13\n                        \n                    \n\n\n        \n    \n    \n        \n            \n                \n                    \n                    \n                            Public\n                        data\n                        \n                    \n                \n            \n                \n                    \n                        Type :         any\n\n                    \n                \n                \n                    \n                        Decorators : \n                        \n                        \n                            @Inject(MAT_SNACK_BAR_DATA)\n                        \n                    \n                \n                    \n                        \n                                Defined in src/app/mixer/palette/snackbar/snackbar.component.ts:17\n                        \n                    \n\n\n        \n    \n    \n        \n            \n                \n                    \n                    \n                        message\n                        \n                    \n                \n            \n                \n                    \n                        Type :         string\n\n                    \n                \n                    \n                        \n                                Defined in src/app/mixer/palette/snackbar/snackbar.component.ts:14\n                        \n                    \n\n\n        \n    \n    \n        \n            \n                \n                    \n                    \n                        scale\n                        \n                    \n                \n            \n                \n                    \n                        Type :         number\n\n                    \n                \n                    \n                        \n                                Defined in src/app/mixer/palette/snackbar/snackbar.component.ts:15\n                        \n                    \n\n\n        \n    \n\n\n\n\n\n    \n        import { Component, OnInit, Inject } from '@angular/core';\nimport {MAT_SNACK_BAR_DATA} from '@angular/material/snack-bar';\nimport { Bounds } from '../../../core/model/datatypes';\n\n\n@Component({\n  selector: 'app-snackbar',\n  templateUrl: './snackbar.component.html',\n  styleUrls: ['./snackbar.component.scss']\n})\nexport class SnackbarComponent implements OnInit {\n\n  bounds: Bounds;\n  message: string;\n  scale: number;\n\n  constructor(@Inject(MAT_SNACK_BAR_DATA) public data: any) { \n    this.bounds = data.bounds;\n    this.message = data.message;\n    this.scale = data.scale;\n  }\n\n  ngOnInit() {\n  }\n\n}\n\n    \n\n    \n        \n\n    \n        dims:({{bounds.width}}, {{bounds.height}})\n    -->\n     \n        {{message}}\n    \n\n\n\n    \n\n    \n                \n                    ./snackbar.component.scss\n                \n                .snackbar{\n    display: flex;\n    flex-direction: row;\n    justify-content:space-evenly;\n    pointer-events: none;\n    width: 100%;\n\n}\n\n.pink{\n    color: #00d1b2;\n    font-weight: bold;\n    padding-left: 1em;\n}\n    \n\n    \n        \n        \n            \n                Legend\n            \n            \n                Html element\n            \n            \n                Component\n            \n            \n                Html element with directive\n            \n        \n    \n\n    \n\n\n\n\n\n\n        var COMPONENT_TEMPLATE = '            dims:({{bounds.width}}, {{bounds.height}})    -->             {{message}}    '\n    var COMPONENTS = [{'name': 'ConnectionComponent', 'selector': 'app-connection'},{'name': 'DraftdetailComponent', 'selector': 'app-draftdetail'},{'name': 'ImageComponent', 'selector': 'app-image'},{'name': 'InletComponent', 'selector': 'app-inlet'},{'name': 'MixerComponent', 'selector': 'app-mixer'},{'name': 'MixerViewComponent', 'selector': 'app-mixerview'},{'name': 'NoteComponent', 'selector': 'app-note'},{'name': 'OperationComponent', 'selector': 'app-operation'},{'name': 'OpHelpModal', 'selector': 'app-ophelp'},{'name': 'OpsComponent', 'selector': 'app-ops'},{'name': 'OpSequencerComponent', 'selector': 'app-op-sequencer'},{'name': 'PaletteComponent', 'selector': 'app-palette'},{'name': 'ParameterComponent', 'selector': 'app-parameter'},{'name': 'PlayerComponent', 'selector': 'app-player'},{'name': 'SnackbarComponent', 'selector': 'app-snackbar'},{'name': 'SubdraftComponent', 'selector': 'app-subdraft'},{'name': 'VirtualPedalsComponent', 'selector': 'app-virtual-pedals'},{'name': 'WeavingStateComponent', 'selector': 'app-weaving-state'}];\n    var DIRECTIVES = [{'name': 'MarqueeComponent', 'selector': 'app-marquee'},{'name': 'SelectionComponent', 'selector': 'app-selection'}];\n    var ACTUAL_COMPONENT = {'name': 'SnackbarComponent'};\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n                   \n    \n         results matching \"\"\n        \n    \n    \n        No results matching \"\"\n    \n\n"},"interfaces/StatusMessage.html":{"url":"interfaces/StatusMessage.html","title":"interface - StatusMessage","body":"\n                   \n\n\n\n\n\n\n\n\n\n\n\n\n\n\n  Interfaces\n  \n  StatusMessage\n\n\n\n        \n            Info\n        \n        \n            Source\n        \n\n\n\n    \n        \n            File\n        \n        \n            src/app/core/model/datatypes/files.ts\n        \n\n\n\n\n        \n            Index\n            \n                \n                    \n                        \n                            Properties\n                        \n                    \n                    \n                        \n                            \n                                \n                                        \n                                            id\n                                        \n                                \n                                \n                                        \n                                            message\n                                        \n                                \n                                \n                                        \n                                            success\n                                        \n                                \n                            \n                        \n                    \n                \n            \n        \n\n\n\n            \n                Properties\n                    \n                        \n                                \n                                    \n                                        \n                                        id\n                                            \n                                                \n                                            \n                                        \n                                    \n                                \n                                \n                                    \n                                        id:         number\n\n                                    \n                                \n\n\n                                    \n                                        \n                                            Type :         number\n\n                                        \n                                    \n\n\n\n\n\n                        \n                    \n                    \n                        \n                                \n                                    \n                                        \n                                        message\n                                            \n                                                \n                                            \n                                        \n                                    \n                                \n                                \n                                    \n                                        message:         string\n\n                                    \n                                \n\n\n                                    \n                                        \n                                            Type :         string\n\n                                        \n                                    \n\n\n\n\n\n                        \n                    \n                    \n                        \n                                \n                                    \n                                        \n                                        success\n                                            \n                                                \n                                            \n                                        \n                                    \n                                \n                                \n                                    \n                                        success:         boolean\n\n                                    \n                                \n\n\n                                    \n                                        \n                                            Type :         boolean\n\n                                        \n                                    \n\n\n\n\n\n                        \n                    \n            \n    \n\n\n    \n        import { Draft } from './drafts';\nimport { Loom, LoomSettings } from './looms';\nimport { Shuttle } from '../shuttle';\nimport { Note } from '../../provider/notes.service';\nimport { Bounds } from './screenlayout';\n\n/****** OBJECTS/TYPES FOR LOADING AND SAVING FILES *****/\n\n/**\n * holds data about each node/component in a form to easily load.\n * @param node_id the id of this node within the tree\n * @param type the type of node\n * @param bounds the screen position and size data for this node\n */\nexport interface NodeComponentProxy {\n    node_id: number,\n    type: string,\n    bounds: Bounds\n  }\n  \n  /**\n   * stores a sparce version of a tree node for easy reloading\n   * @param node the node id this treenode refers too\n   * @param parent the node id of the parent node for this treenode\n   * @param inputs an array of treenode ids for all values coming into this node\n   * @param outputs an array of treenode ids for all downstream functions \n   */\n   export interface TreeNodeProxy {\n    node: number,\n    parent: number; \n    inputs: Array;\n    outputs: Array; \n   }\n  \n    /**\n    * holds data about each draft component in a compressed form \n    * @param draft_id the draft id associated with this node (if available)\n   * @param draft_visible a boolean to state if this node is visible or not. \n   * @param draft_name a string representing a user defined name\n   * @param draft this will only export if the draft is a seed draft\n   * @param loom this will only export if the draft is a seed draft \n   * @param loom_settings the associated loom settings on this node, if present\n    */\n  \n    export interface DraftNodeProxy {\n      node_id: number;\n      draft_id: number;\n      draft_name: string;\n      draft: Draft;\n      draft_visible: boolean;\n      loom: Loom,\n      loom_settings: LoomSettings;\n    }\n  \n  /**\n    * a sparce form of an operaction component to use for saving\n    * @param node_id the node id this object refers too\n    * @param name the name of the operation at this node\n    * @param params the list of input parameters to this operation\n    * @param inlets the let of inlets and associated values \n    */\n  export interface OpComponentProxy {\n    node_id: number,\n    name: string,\n    params: Array, \n    inlets: Array;\n  }\n  \n  \n   /**\n    * describes the data from the workspace that is saved.\n    */\n   export interface SaveObj {\n    version: string,\n    workspace: any,\n    type: string,\n    nodes: Array,\n    tree: Array,\n    draft_nodes: Array,\n    ops: Array,\n    notes: Array,\n    materials: Array,\n    scale: number\n   }\n  \n  export interface FileObj {\n   version: string,\n   workspace: any,\n   filename: string,\n   nodes: Array,\n   treenodes: Array,\n   draft_nodes: Array,\n   ops: Array\n   scale: number\n  }\n  \n  export interface StatusMessage {\n    id: number,\n    message: string,\n    success: boolean\n  }\n  \n  export interface LoadResponse {\n    data: FileObj,\n    status: number;\n  }\n  \n  export interface Fileloader {\n    ada: (filename: string, data: any) => Promise,\n    //wif: (filename: string, data: any) => Promise,\n    //bmp: (filename: string, data: any) => Promise,\n    //jpg: (filename: string, data: any) => Promise,\n    form: (data: any) => Promise}\n  \n  export interface FileSaver {\n    ada: (type: string, for_timeline:boolean, current_scale: number) => Promise,\n    //wif: (draft: Draft, loom: Loom) => Promise,\n    bmp: (canvas: HTMLCanvasElement) => Promise,\n    jpg: (canvas: HTMLCanvasElement) => Promise\n  }\n    \n\n\n\n\n\n\n\n\n\n                   \n    \n         results matching \"\"\n        \n    \n    \n        No results matching \"\"\n    \n\n"},"classes/System.html":{"url":"classes/System.html","title":"class - System","body":"\n                   \n\n\n\n\n\n\n\n\n\n\n\n\n\n  Classes\n  System\n\n\n\n        \n            Info\n        \n        \n            Source\n        \n\n\n\n    \n        \n            File\n        \n        \n            src/app/core/model/system.ts\n        \n\n\n            \n                Description\n            \n            \n                Definition of System object.\na system describes a structural relationship between rows and wefts. Used in overshot, mutipic structures, or adding conductive rows\n\n            \n\n\n\n\n            \n    Index\n    \n        \n                \n                    \n                        Properties\n                    \n                \n                \n                    \n                        \n                            \n                                id\n                            \n                            \n                                in_use\n                            \n                            \n                                name\n                            \n                            \n                                notes\n                            \n                            \n                                visible\n                            \n                        \n                    \n                \n\n                \n                    \n                        Methods\n                    \n                \n                \n                    \n                        \n                            \n                                getChar\n                            \n                            \n                                isVisible\n                            \n                            \n                                setID\n                            \n                            \n                                setVisible\n                            \n                            \n                                updateVariables\n                            \n                        \n                    \n                \n\n\n\n\n\n        \n    \n\n\n            \n    Constructor\n        \n            \n                \n                    \nconstructor(systemDict: null)\n                    \n                \n                        \n                            \n                                Defined in src/app/core/model/system.ts:13\n                            \n                        \n\n                \n                    \n                            \n                                    Parameters :\n                                    \n                                        \n                                            \n                                                Name\n                                                    Type\n                                                Optional\n                                            \n                                        \n                                        \n                                                \n                                                        systemDict\n                                                  \n                                                        \n                                                                    null\n                                                        \n                                                  \n                                                    \n                                                            No\n                                                    \n                                                    \n                                                \n                                        \n                                    \n                            \n                    \n                \n            \n        \n\n\n            \n    \n    \n        Properties\n    \n    \n        \n            \n                \n                    \n                    \n                        id\n                        \n                    \n                \n            \n                \n                    \n                        Type :         number\n\n                    \n                \n                    \n                        \n                                Defined in src/app/core/model/system.ts:9\n                        \n                    \n\n\n        \n    \n    \n        \n            \n                \n                    \n                    \n                        in_use\n                        \n                    \n                \n            \n                \n                    \n                        Type :         boolean\n\n                    \n                \n                    \n                        \n                                Defined in src/app/core/model/system.ts:13\n                        \n                    \n\n\n        \n    \n    \n        \n            \n                \n                    \n                    \n                        name\n                        \n                    \n                \n            \n                \n                    \n                        Type :         string\n\n                    \n                \n                    \n                        \n                                Defined in src/app/core/model/system.ts:10\n                        \n                    \n\n\n        \n    \n    \n        \n            \n                \n                    \n                    \n                        notes\n                        \n                    \n                \n            \n                \n                    \n                        Type :         string\n\n                    \n                \n                    \n                        \n                                Defined in src/app/core/model/system.ts:11\n                        \n                    \n\n\n        \n    \n    \n        \n            \n                \n                    \n                    \n                        visible\n                        \n                    \n                \n            \n                \n                    \n                        Type :         boolean\n\n                    \n                \n                    \n                        \n                                Defined in src/app/core/model/system.ts:12\n                        \n                    \n\n\n        \n    \n\n\n            \n    \n    \n        Methods\n    \n    \n        \n            \n                \n                    \n                    \n                        getChar\n                        \n                    \n                \n            \n            \n                \ngetChar()\n                \n            \n\n\n            \n                \n                    Defined in src/app/core/model/system.ts:49\n                \n            \n\n\n            \n                \n\n                    \n                        Returns :         any\n\n                    \n                \n            \n        \n    \n    \n        \n            \n                \n                    \n                    \n                        isVisible\n                        \n                    \n                \n            \n            \n                \nisVisible()\n                \n            \n\n\n            \n                \n                    Defined in src/app/core/model/system.ts:41\n                \n            \n\n\n            \n                \n\n                    \n                        Returns :         boolean\n\n                    \n                \n            \n        \n    \n    \n        \n            \n                \n                    \n                    \n                        setID\n                        \n                    \n                \n            \n            \n                \nsetID(id: number)\n                \n            \n\n\n            \n                \n                    Defined in src/app/core/model/system.ts:34\n                \n            \n\n\n            \n                \n\n                    \n                        Parameters :\n                        \n                        \n                            \n                                \n                                    Name\n                                    Type\n                                    Optional\n                                \n                            \n                            \n                                \n                                    id\n                                    \n                                                number\n                                    \n\n                                    \n                                        No\n                                    \n\n\n                                \n                            \n                        \n                    \n                    \n                    \n                    \n                        Returns :         void\n\n                    \n                    \n                        \n                    \n                \n            \n        \n    \n    \n        \n            \n                \n                    \n                    \n                        setVisible\n                        \n                    \n                \n            \n            \n                \nsetVisible(bool: boolean)\n                \n            \n\n\n            \n                \n                    Defined in src/app/core/model/system.ts:45\n                \n            \n\n\n            \n                \n\n                    \n                        Parameters :\n                        \n                        \n                            \n                                \n                                    Name\n                                    Type\n                                    Optional\n                                \n                            \n                            \n                                \n                                    bool\n                                    \n                                                boolean\n                                    \n\n                                    \n                                        No\n                                    \n\n\n                                \n                            \n                        \n                    \n                    \n                    \n                    \n                        Returns :         void\n\n                    \n                    \n                        \n                    \n                \n            \n        \n    \n    \n        \n            \n                \n                    \n                    \n                        updateVariables\n                        \n                    \n                \n            \n            \n                \nupdateVariables(undefined)\n                \n            \n\n\n            \n                \n                    Defined in src/app/core/model/system.ts:27\n                \n            \n\n\n            \n                \n\n                    \n                        Parameters :\n                        \n                        \n                            \n                                \n                                    Name\n                                    Optional\n                                \n                            \n                            \n                                \n\n                                    \n                                        No\n                                    \n\n\n                                \n                            \n                        \n                    \n                    \n                    \n                    \n                        Returns :         void\n\n                    \n                    \n                        \n                    \n                \n            \n        \n    \n\n\n\n\n\n\n    \n\n\n    \n        import utilInstance from \"./util\";\n\n/**\n * Definition of System object.\n* a system describes a structural relationship between rows and wefts. Used in overshot, mutipic structures, or adding conductive rows\n * @class\n */\nexport class System {\n  id: number;\n  name: string;\n  notes: string;\n  visible: boolean;\n  in_use: boolean;\n\n  constructor(systemDict = null) {\n\n    //defaults\n    this.id = 0;\n    this.name = \"weft system\"\n    this.notes = \"\";\n    this.visible = true;\n    this.in_use = false;\n\n    if (systemDict) this.updateVariables(systemDict);\n  }\n\n  updateVariables({id, name, notes, visible}) {\n    this.id = id;\n    this.name = name;\n    this.notes = notes;\n    this.visible = visible;\n  }\n\n  setID(id: number) {\n    this.id = id;\n    if (!this.name) {\n      this.name = 'System ' + (id + 1);\n    }\n  }\n\n  isVisible(){\n    return this.visible;\n  }\n\n  setVisible(bool: boolean) {\n    this.visible = bool;\n  }\n\n  getChar(){\n    return String.fromCharCode(97 + this.id)\n  }\n\n}\n\n/**\n   * takes system maps and makes them all unique by adding a base value to the n+1th map. This helps when interlacing \n   * drafts that have different system mappings, and making sure they are each unique. \n   * This function will also return standard sized arrays = to the maximum sized input\n   * @param systems the system mappings to compare\n   */\nexport function makeSystemsUnique(systems: Array>) : Array> {\n\n  if (systems.length === 0) return [];\n\n\n  const max_in_systems: Array = systems.map(el => utilInstance.getArrayMax(el));\n \n  let last_max = 0;\n  const unique_systems = systems.map((sys, ndx) => {\n    if(ndx > 0){\n      last_max += (max_in_systems[ndx -1]+1)\n      return sys.map(el => el + last_max);\n    }else{\n      return sys;\n    }\n  });  \n\n   //standardize teh lengths of all the returned arrays \n   const max_length:number = unique_systems.reduce((acc, el) => {\n    const len = el.length;\n    if(len > acc) return len;\n    else return acc;\n  }, 0);\n\n  unique_systems.forEach((sys, ndx) => {\n    if(sys.length \n    \n\n\n\n\n\n\n\n\n\n\n                   \n    \n         results matching \"\"\n        \n    \n    \n        No results matching \"\"\n    \n\n"},"interfaces/TopologyDef.html":{"url":"interfaces/TopologyDef.html","title":"interface - TopologyDef","body":"\n                   \n\n\n\n\n\n\n\n\n\n\n\n\n\n\n  Interfaces\n  \n  TopologyDef\n\n\n\n        \n            Info\n        \n        \n            Source\n        \n\n\n\n    \n        \n            File\n        \n        \n            src/app/mixer/model/operation/topology.ts\n        \n\n\n\n\n        \n            Index\n            \n                \n                    \n                        \n                            Properties\n                        \n                    \n                    \n                        \n                            \n                                \n                                        \n                                            input\n                                        \n                                \n                                \n                                        \n                                            output\n                                        \n                                \n                                \n                                        \n                                            type\n                                        \n                                \n                            \n                        \n                    \n                \n            \n        \n\n\n\n            \n                Properties\n                    \n                        \n                                \n                                    \n                                        \n                                        input\n                                            \n                                                \n                                            \n                                        \n                                    \n                                \n                                \n                                    \n                                        input:         PerformDraftInput\n\n                                    \n                                \n\n\n                                    \n                                        \n                                            Type :         PerformDraftInput\n\n                                        \n                                    \n\n\n\n\n\n                        \n                    \n                    \n                        \n                                \n                                    \n                                        \n                                        output\n                                            \n                                                \n                                            \n                                        \n                                    \n                                \n                                \n                                    \n                                        output:         PerformOutput\n\n                                    \n                                \n\n\n                                    \n                                        \n                                            Type :         PerformOutput\n\n                                        \n                                    \n\n\n\n\n\n                        \n                    \n                    \n                        \n                                \n                                    \n                                        \n                                        type\n                                            \n                                                \n                                            \n                                        \n                                    \n                                \n                                \n                                    \n                                        type:         TopologyName\n\n                                    \n                                \n\n\n                                    \n                                        \n                                            Type :         TopologyName\n\n                                        \n                                    \n\n\n\n\n\n                        \n                    \n            \n    \n\n\n    \n        import { Draft } from \"../../../core/model/datatypes\";\nimport { ParamValue, OperationParam as OpParam, getParamValues } from \"./params\";\nimport { OperationInlet as OpInlet, InletDrafts } from \"./inlets\";\n\n/**\n* At its heart, an Operation is a very fancy function that outputs a Draft or several Drafts.\n* The function itself is perform(), and the Operation can take inputs in the form of \n* Drafts (inlets) or Parameters (params).\n*/\n\n/** \n* Types that an Operation's perform() function can handlle as input/output\n*/\n\n/** @type Union of types that can serve as input to Operation perform() functions. */\nexport type PerformDraftInput = InletDrafts | Array | Draft | null;\n\ntype MultiDraftInput = InletDrafts | Array;\n\n/** @type Union of types that Operation perform() functions can output. */\nexport type PerformOutput = Array | Draft;\n\n/**\n * OPERATION TOPOLOGY\n * Topology refers to the shape of the Operation in terms of its\n * number of input and output Drafts. Classifies Operations.\n */\n\nexport const TopologyName = {\n  pipe: 'pipe', \n  seed: 'seed', \n  merge: 'merge', \n  branch: 'branch', \n  bus: 'bus'\n} as const;\nexport type TopologyName = keyof typeof TopologyName;\n\ninterface TopologyDef { type: TopologyName; input: PerformDraftInput; output: PerformOutput; };\n\n/**\n* @class\n* Operation that can generate a draft with no inputs, may take an optional input\n* @method perform OpPerform function: \n* - INPUT: zero or one Draft\n* - OUTPUT: exactly one Draft\n*/\nexport class Seed implements TopologyDef { type: 'seed'; input: Draft | null; output: Draft; };\n\n/**\n* @class\n* Operation that takes one input and generates one output draft. \n* @method perform OpPerform function: \n* - INPUT: exactly one Draft\n* - OUTPUT: exactly one Draft\n*/\nexport class Pipe implements TopologyDef { type: 'pipe'; input: Draft; output: Draft; };\n\n/**\n* @class\n* Operation that takes many (N) inputs and generates one output draft.\n* @method perform OpPerform function: \n* - INPUT: Array of Drafts\n* - OUTPUT: exactly one Draft\n*/\nexport class Merge implements TopologyDef { type: 'merge'; input: InletDrafts | Array; output: Draft; };\n\n/**\n* @class\n* Operation that takes one input and generates many (N) output drafts.\n* @method perform OpPerform function:\n* - INPUT: exactly one Draft\n* - OUTPUT: Array of Drafts\n*/\nexport class Branch implements TopologyDef { type: 'branch'; input: Draft; output: Array; };\n\n/**\n* CURRENTLY UNUSED\n* @class\n* Operation that takes many (N) inputs and generates many (M) output drafts.\n* Number of inputs does not necessarily match number of outputs (N ?= M).\n* @method perform OpPerform function:  \n* - INPUT: Array of Drafts\n* - OUTPUT: Array of Drafts\n*/\nexport class Bus implements TopologyDef { type: 'bus'; input: Array | InletDrafts; output: Array; };\n\ntype TopologyIndex = {\n  'seed': Seed,\n  'pipe': Pipe,\n  'merge': Merge,\n  'branch': Branch,\n  'bus': Bus\n}\ntype OpTopology = TopologyIndex[TopologyName];\n\n/**\n * OPERATION CONSTRAINT\n * A Constraint on an Operation classifies it based on its\n * input requirements (both Drafts and Params).\n */\n\nexport const ConstraintOptions = {\n  req: 'req', \n  opt: 'opt', \n  none: 'none'\n} as const;\nexport type ConstraintOptions = keyof typeof ConstraintOptions;\n\nexport const ConstraintName = {\n  no_drafts: { input_drafts: 'none', input_params: 'req' }, \n  no_params: { input_drafts: 'req', input_params: 'none' }, \n  drafts_opt: { input_drafts: 'opt', input_params: 'req' }, \n  params_opt: { input_drafts: 'req', input_params: 'opt' }, \n  all_req: {input_drafts: 'req', input_params: 'req' },\n} as const;\ntype ConstraintName = keyof typeof ConstraintName;\n\ntype ConstraintDefs = {\n  [C in keyof typeof ConstraintName]: {\n    constraint: C;\n    input_drafts: typeof ConstraintName[C][\"input_drafts\"];\n    input_params: typeof ConstraintName[C][\"input_params\"];\n  }\n}\n\nexport type NoDrafts = ConstraintDefs[\"no_drafts\"];\nexport type NoParams = ConstraintDefs[\"no_params\"];\nexport type DraftsOptional = ConstraintDefs[\"drafts_opt\"];\nexport type ParamsOptional = ConstraintDefs[\"params_opt\"];\nexport type AllRequired = ConstraintDefs[\"all_req\"];\n\ntype ConstraintIndex = {\n  'no_drafts': NoDrafts, // does not accept input drafts\n  'no_params': NoParams, // does not accept params\n  'drafts_opt': DraftsOptional, // can take no params -- has default values\n  'params_opt': ParamsOptional, // can take zero input drafts\n  'all_req': AllRequired, // both inputs and params required\n}\ntype OpConstraint = ConstraintIndex[ConstraintName]; \n\n/** \n* Generic types for perform() functions, describing options \n* for input draft multiplicity (0, 1, N) and param requirement \n*/\n\ntype NoDraftsPerform = {(params: Array): Topo[\"output\"]};\ntype NoParamsPerform = {(inputs: Topo[\"input\"]): Topo[\"output\"]};\ntype ParamsOptionalPerform = {(inputs: Topo[\"input\"], params?: Array): Topo[\"output\"]}; \ntype DraftsOptionalPerform = {(params: Array, inputs?: Topo[\"input\"]): Topo[\"output\"]};  \ntype AllRequiredPerform = {(inputs: Topo[\"input\"], params: Array): Topo[\"output\"]};  \n\ntype PerformCallSigs = {\n  no_drafts: { [Topo in keyof TopologyIndex]: NoDraftsPerform; },\n  no_params: { [Topo in keyof TopologyIndex]: NoParamsPerform; },\n  drafts_opt: { [Topo in keyof TopologyIndex]: DraftsOptionalPerform; },\n  params_opt: { [Topo in keyof TopologyIndex]: ParamsOptionalPerform; },\n  all_req: { [Topo in keyof TopologyIndex]: AllRequiredPerform; }\n}\n\n/**\n * @interface OpClassifier\n * Key-value pairs for an Operation's Topology and Constraint.\n */\ninterface OpClassifier {\n  type: Topo[\"type\"] | '';\n  input_drafts: Constraint[\"input_drafts\"] | '';\n  input_params: Constraint[\"input_params\"] | '';\n}\n\n/** @type User-defined descriptive strings for any Operation. */\ntype OperationDescriptors = { name: string, displayname: string, dx: string };\n\n/**\n* A standard Operation's metadata -- i.e. everything not the perform() function\n* @param name the internal name of this opearation (CHANGING THESE WILL BREAK LEGACY VERSIONS)\n* @param displayname the name to show upon this operation\n* @param dx the description of this operation\n* @param max_inputs the maximum number of inputs (drafts) allowed directly into this operation\n* @param params the parameters associated with this operation\n* @method perform an OpPerform function\n*/\nexport interface OperationProperties extends OperationDescriptors {\n  max_inputs: number,\n  default_params?: Array;\n  params: Array,\n}\n\n/**\n * @type A function that serves as the perform() method for an Operation. \n * This generic type requires two type parameters:\n * @param Topo one of the PerformInput types\n * @param Constraint one of the PerformOutput types\n *\n * OpPerform to give call signature for perform() function \n * Topo  = Seed | Pipe | Merge | Branch | Bus\n * Constraint = NoDrafts | NoParams | DraftsOptional | ParamsOptional | AllRequired\n */\nexport type OpPerform = PerformCallSigs[Constraint[\"constraint\"]][Topo[\"type\"]];\n// type PerformArgs = Parameters>;\n\n/** TODO doublecheck inlets have been added correctly (fields for input drafts) */\nexport class BaseOp implements OperationProperties {\n  name: string;\n  old_names: Array;\n  displayname: string;\n  dx: string;\n  params: Array;\n  inlets: Array;\n  default_params?: Array;\n  max_inputs: number;\n  classifier: OpClassifier;\n  perform: OpPerform;\n\n  /** @constructor create an Operation using an object literal (keys and values) */\n  constructor (args: OpConstructorArgs);\n  /** @constructor create an Operation using direct arguments in the constructor (values only) */\n  constructor (...args: OpConstructorArray);\n  constructor (name: string, displayname: string, dx: string, perform: OpPerform);\n  constructor (name: string, displayname: string, dx: string, params: Array, perform: OpPerform);\n  constructor (nameOrArgs: any, displayname?: string, dx?: string, performOrParams?: OpPerform | Array, performWithParams?: OpPerform) {\n    // console.log((nameOrArgs.name != undefined));\n    this.classifier = { type: '', input_drafts: '', input_params: '' };\n    if (nameOrArgs.name) {\n      let args = nameOrArgs;\n      this.name = args.name;\n      this.displayname = args.displayname;\n      this.dx = args.dx;\n      this.perform = args.perform;\n      if (args.params) this.params = args.params;\n      else this.params = [];\n      if (args.inlets) this.inlets = args.inlets;\n      else this.inlets = [];\n    } else {\n      this.name = nameOrArgs;\n      this.displayname = displayname;\n      this.dx = dx;\n      if (performWithParams) {\n        let params = > performOrParams;\n        this.params = params;\n        this.default_params = getParamValues(params);\n        this.perform = performWithParams;\n      } else {\n        this.params = [];\n        this.perform = > performOrParams;\n      }\n    }\n  }\n\n  constrain(c: ConstraintName): void {\n    if (c == 'no_drafts') { this.max_inputs = 0; this.inlets = []; }\n    this.classifier.input_drafts = ConstraintName[c][\"input_drafts\"]; \n    this.classifier.input_params = ConstraintName[c][\"input_params\"];\n  }\n\n  type(t: TopologyName): BaseOp {\n    this.classifier.type = t;\n    return this;\n  }\n}\n\ntype ConstructorArgKeysIndex = {\n  [C in keyof ConstraintIndex]: C extends \"no_params\" ? {\n    [T in keyof TopologyIndex]: {\n      name: string, displayname: string, dx: string, old_names: string[],\n      inlets: OpInlet[], perform: OpPerform\n    }\n  } : C extends \"no_drafts\" ? {\n    [T in keyof TopologyIndex]: {\n      name: string, displayname: string, dx: string, old_names: string[],\n      params: OpParam[], perform: OpPerform\n    }\n  } : {\n    [T in keyof TopologyIndex]: {\n      name: string, displayname: string, dx: string, old_names: string[],\n      params: OpParam[], inlets: OpInlet[],\n      perform: OpPerform\n    }\n  }\n}\n\ntype ConstructorArrayIndex = {\n  [C in keyof ConstraintIndex]: C extends \"no_params\" ? {\n    [T in keyof TopologyIndex]: [\n      name: string, displayname: string, dx: string, old_names: string[],\n      inlets: OpInlet[], perform: OpPerform\n    ]\n  } : C extends \"no_drafts\" ? {\n    [T in keyof TopologyIndex]: [\n      name: string, displayname: string, dx: string, old_names: string[],\n      params: OpParam[], perform: OpPerform\n    ]\n  } : {\n    [T in keyof TopologyIndex]: [\n      name: string, displayname: string, dx: string, old_names: string[],\n      params: OpParam[], inlets: OpInlet[],\n      perform: OpPerform\n    ]\n  }\n}\n\ntype OpConstructorArgKeys = \nConstructorArgKeysIndex[Constraint[\"constraint\"]][Topo[\"type\"]];\n\ntype OpConstructorArray = \nConstructorArrayIndex[Constraint[\"constraint\"]][Topo[\"type\"]];\n\ntype OpConstructorArgs = \nOpConstructorArgKeys | OpConstructorArray;\n\n// use factory design pattern to apply classifiers to BaseOp?? Is this too convoluted\n// https://refactoring.guru/design-patterns/abstract-factory/typescript\nclass AbstractOpFactory {\n  NoDrafts(args: OpConstructorArgKeys): BaseOp;\n  NoDrafts(...args: OpConstructorArray): BaseOp;\n  NoDrafts(...args: any) {\n    let op = new BaseOp(...args);\n    op.constrain(\"no_drafts\");\n    return op;\n  }\n\n  NoParams(args: OpConstructorArgKeys): BaseOp;\n  NoParams(...args: OpConstructorArray): BaseOp;\n  NoParams(...args: any) {\n    let op = new BaseOp(...args);\n    op.constrain(\"no_params\");\n    return op;\n  }\n\n  DraftsOptional(args: OpConstructorArgKeys): BaseOp;\n  DraftsOptional(...args: OpConstructorArray): BaseOp;\n  DraftsOptional(...args: any) {\n    let op = new BaseOp(...args);\n    op.constrain(\"drafts_opt\");\n    return op;\n  }\n\n  ParamsOptional(args: OpConstructorArgKeys): BaseOp;\n  ParamsOptional(...args: OpConstructorArray): BaseOp;\n  ParamsOptional(...args: any) {\n    let op = new BaseOp(...args);\n    op.constrain(\"params_opt\");\n    return op;\n  }\n\n  AllRequired(args: OpConstructorArgKeys): BaseOp;\n  AllRequired(...args: OpConstructorArray): BaseOp;\n  AllRequired(...args: any) {\n    let op = new BaseOp(...args);\n    op.constrain(\"all_req\");\n    return op;\n  }\n}\n\n// combine with mix-ins design pattern (link: TypeScript docs website)\nfunction makeTopoFactory(topo: TopologyName) {\n  return class TopologyFactory extends AbstractOpFactory {\n    static base = new AbstractOpFactory();\n    \n    static NoDrafts(args: OpConstructorArgKeys): BaseOp;\n    static NoDrafts(...args: OpConstructorArray): BaseOp;\n    static NoDrafts(...args: any) {\n      return this.base.NoDrafts(...args).type(topo);\n    }\n\n    static NoParams(args: OpConstructorArgKeys): BaseOp;\n    static NoParams(...args: OpConstructorArray): BaseOp;\n    static NoParams(...args: any) {\n      return this.base.NoParams(...args).type(topo);\n    }\n\n    static DraftsOptional(args: OpConstructorArgKeys): BaseOp;\n    static DraftsOptional(...args: OpConstructorArray): BaseOp;\n    static DraftsOptional(...args: any) {\n      return this.base.DraftsOptional(...args).type(topo);\n    }\n\n    static ParamsOptional(args: OpConstructorArgKeys): BaseOp;\n    static ParamsOptional(...args: OpConstructorArray): BaseOp;\n    static ParamsOptional(...args: any) {\n      return this.base.ParamsOptional(...args).type(topo);\n    }\n\n    static AllRequired(args: OpConstructorArgKeys): BaseOp;\n    static AllRequired(...args: OpConstructorArray): BaseOp;\n    static AllRequired(...args: any) {\n      return this.base.AllRequired(...args).type(topo);\n    }\n  }\n}\n\nexport const OpFactories = {\n  Seed: makeTopoFactory(\"seed\"),\n  Pipe: makeTopoFactory(\"pipe\"),\n  Merge: makeTopoFactory(\"merge\"),\n  Branch: makeTopoFactory(\"merge\"),\n  Bus: makeTopoFactory(\"bus\"),\n}\n\n// export const SeedOperation = makeTopoFactory(\"seed\");\n// export const PipeOperation = makeTopoFactory(\"pipe\");\n// export const MergeOperation = makeTopoFactory(\"merge\");\n// export const BranchOperation = makeTopoFactory(\"merge\");\n// export const BusOperation = makeTopoFactory(\"bus\");\n\ntype TopologyOpIndex = {\n  [T in keyof TopologyIndex]: {\n    [C in keyof ConstraintIndex]: BaseOp;\n  }\n}\n\nexport type BuildableOperation = TopologyOpIndex[TopologyName][ConstraintName];\n    \n\n\n\n\n\n\n\n\n\n                   \n    \n         results matching \"\"\n        \n    \n    \n        No results matching \"\"\n    \n\n"},"interfaces/TreeNode.html":{"url":"interfaces/TreeNode.html","title":"interface - TreeNode","body":"\n                   \n\n\n\n\n\n\n\n\n\n\n\n\n\n\n  Interfaces\n  \n  TreeNode\n\n\n\n        \n            Info\n        \n        \n            Source\n        \n\n\n\n    \n        \n            File\n        \n        \n            src/app/core/model/datatypes/tree.ts\n        \n\n\n            \n                Description\n            \n            \n                A tree node stores relationships between the components created by operations\nRules:\n  Operations can have many inputs and many outputs\n  Subdrafts can only have one input and one output (for now)\n\n            \n\n\n        \n            Index\n            \n                \n                    \n                        \n                            Properties\n                        \n                    \n                    \n                        \n                            \n                                \n                                        \n                                            inputs\n                                        \n                                \n                                \n                                        \n                                            node\n                                        \n                                \n                                \n                                        \n                                            outputs\n                                        \n                                \n                                \n                                        \n                                            parent\n                                        \n                                \n                            \n                        \n                    \n                \n            \n        \n\n\n\n            \n                Properties\n                    \n                        \n                                \n                                    \n                                        \n                                        inputs\n                                            \n                                                \n                                            \n                                        \n                                    \n                                \n                                \n                                    \n                                        inputs:         Array\n\n                                    \n                                \n\n\n                                    \n                                        \n                                            Type :         Array\n\n                                        \n                                    \n\n\n\n\n\n                        \n                    \n                    \n                        \n                                \n                                    \n                                        \n                                        node\n                                            \n                                                \n                                            \n                                        \n                                    \n                                \n                                \n                                    \n                                        node:         Node\n\n                                    \n                                \n\n\n                                    \n                                        \n                                            Type :         Node\n\n                                        \n                                    \n\n\n\n\n\n                        \n                    \n                    \n                        \n                                \n                                    \n                                        \n                                        outputs\n                                            \n                                                \n                                            \n                                        \n                                    \n                                \n                                \n                                    \n                                        outputs:         Array\n\n                                    \n                                \n\n\n                                    \n                                        \n                                            Type :         Array\n\n                                        \n                                    \n\n\n\n\n\n                        \n                    \n                    \n                        \n                                \n                                    \n                                        \n                                        parent\n                                            \n                                                \n                                            \n                                        \n                                    \n                                \n                                \n                                    \n                                        parent:         TreeNode\n\n                                    \n                                \n\n\n                                    \n                                        \n                                            Type :         TreeNode\n\n                                        \n                                    \n\n\n\n\n\n                        \n                    \n            \n    \n\n\n    \n        import { ViewRef } from '@angular/core';\nimport { ConnectionComponent } from \"../../../mixer/palette/connection/connection.component\";\nimport { OperationComponent } from \"../../../mixer/palette/operation/operation.component\";\nimport { SubdraftComponent } from \"../../../mixer/palette/subdraft/subdraft.component\";\n\nimport { Draft } from './drafts';\nimport { Loom, LoomSettings } from './looms';\n\n/****************** OBJECTS/TYPES RELATED to OPERATION TREE *****************/\n\n/**\n * this stores a reference to a component on the palette with its id and some\n * @param type is the type of component'\n * @param view_id is ndx to reference to this object in the ViewComponentRef (for deleting)\n * @param id is a unique id linked forever to this component \n * @param component is a reference to the component object\n * @param dirty describes if this needs to be recalcuated or redrawn \n */\n type BaseNode = {\n    type: 'draft' | 'op' | 'cxn',\n    ref: ViewRef,\n    id: number, //this will be unique for every instance\n    component: SubdraftComponent | OperationComponent | ConnectionComponent,\n    dirty: boolean\n  }\n  \n  \n  /**\n   * an OpNode is an extension of BaseNode that includes additional params\n   * @param name the name of the operation at this node\n   * @param params an array of the current param values at this node\n   * @param inlets an array of the inlet values at this node\n   */\n  export type OpNode = BaseNode & {\n    name: string,\n    params: Array\n    inlets: Array;\n   }\n  \n  \n   /**\n   * a DraftNode is an extension of BaseNode that includes additional params\n   * @param draft the active draft at this node\n   * @param loom the loom associated with the draft at this node\n   * @param loom_settings the settings associted with the loom at this node\n   */\n   export type DraftNode = BaseNode & {\n    draft: Draft,\n    loom: Loom,\n    loom_settings: LoomSettings\n   }\n  \n  \n  /**\n   * Allows one to use Node as shorthand for any of these types of nodes\n   */\n   export type Node = BaseNode | OpNode | DraftNode;\n  \n  \n   /**\n    * a type to store input and output information for nodes that takes multiple node inputs and outputs into account.\n    * each node stores the node it gets as input and output and the inlet/outlet that node enter into on itself. \n    * connections will have inlet/outlet indexes of 0, 0 (they cannot connect ot multiple things)\n    * drafts will have inset/outout indexes of 0, 0 (they can only have one parent)\n    * ops will have multiple inlets and outlets. For example, an input of (2, 1) means that treenode 2 is connected to inlet 1. \n    * @param treenode - the treenode that this input or output goes towards\n    * @param ndx - which ndx on the said treenodes does this connect to specifically\n    */\n   export interface IOTuple {\n     tn: TreeNode,\n     ndx: number\n   }\n  \n  /**\n   * A tree node stores relationships between the components created by operations\n    * @param node: is a reference to the node object stored in the tree. \n    * @param parent links to the treenode that \"created\" this node or null if it was created by the user \n    * @param inputs a list of TreeNodes that are used as input to this TreeNode with an idex to which input they belong to\n    * @param outputs a list of TreeNodes created by this node or specified by the user\n    * Rules: \n    *   Operations can have many inputs and many outputs \n    *   Subdrafts can only have one input and one output (for now)\n    *   \n  */\nexport interface TreeNode {\n    node: Node,\n    parent: TreeNode,\n    inputs: Array,\n    outputs: Array\n}\n    \n\n\n\n\n\n\n\n\n\n                   \n    \n         results matching \"\"\n        \n    \n    \n        No results matching \"\"\n    \n\n"},"interfaces/TreeNodeProxy.html":{"url":"interfaces/TreeNodeProxy.html","title":"interface - TreeNodeProxy","body":"\n                   \n\n\n\n\n\n\n\n\n\n\n\n\n\n\n  Interfaces\n  \n  TreeNodeProxy\n\n\n\n        \n            Info\n        \n        \n            Source\n        \n\n\n\n    \n        \n            File\n        \n        \n            src/app/core/model/datatypes/files.ts\n        \n\n\n            \n                Description\n            \n            \n                stores a sparce version of a tree node for easy reloading\n\n            \n\n\n        \n            Index\n            \n                \n                    \n                        \n                            Properties\n                        \n                    \n                    \n                        \n                            \n                                \n                                        \n                                            inputs\n                                        \n                                \n                                \n                                        \n                                            node\n                                        \n                                \n                                \n                                        \n                                            outputs\n                                        \n                                \n                                \n                                        \n                                            parent\n                                        \n                                \n                            \n                        \n                    \n                \n            \n        \n\n\n\n            \n                Properties\n                    \n                        \n                                \n                                    \n                                        \n                                        inputs\n                                            \n                                                \n                                            \n                                        \n                                    \n                                \n                                \n                                    \n                                        inputs:     Array\n\n                                    \n                                \n\n\n                                    \n                                        \n                                            Type :     Array\n\n                                        \n                                    \n\n\n\n\n\n                        \n                    \n                    \n                        \n                                \n                                    \n                                        \n                                        node\n                                            \n                                                \n                                            \n                                        \n                                    \n                                \n                                \n                                    \n                                        node:         number\n\n                                    \n                                \n\n\n                                    \n                                        \n                                            Type :         number\n\n                                        \n                                    \n\n\n\n\n\n                        \n                    \n                    \n                        \n                                \n                                    \n                                        \n                                        outputs\n                                            \n                                                \n                                            \n                                        \n                                    \n                                \n                                \n                                    \n                                        outputs:     Array\n\n                                    \n                                \n\n\n                                    \n                                        \n                                            Type :     Array\n\n                                        \n                                    \n\n\n\n\n\n                        \n                    \n                    \n                        \n                                \n                                    \n                                        \n                                        parent\n                                            \n                                                \n                                            \n                                        \n                                    \n                                \n                                \n                                    \n                                        parent:         number\n\n                                    \n                                \n\n\n                                    \n                                        \n                                            Type :         number\n\n                                        \n                                    \n\n\n\n\n\n                        \n                    \n            \n    \n\n\n    \n        import { Draft } from './drafts';\nimport { Loom, LoomSettings } from './looms';\nimport { Shuttle } from '../shuttle';\nimport { Note } from '../../provider/notes.service';\nimport { Bounds } from './screenlayout';\n\n/****** OBJECTS/TYPES FOR LOADING AND SAVING FILES *****/\n\n/**\n * holds data about each node/component in a form to easily load.\n * @param node_id the id of this node within the tree\n * @param type the type of node\n * @param bounds the screen position and size data for this node\n */\nexport interface NodeComponentProxy {\n    node_id: number,\n    type: string,\n    bounds: Bounds\n  }\n  \n  /**\n   * stores a sparce version of a tree node for easy reloading\n   * @param node the node id this treenode refers too\n   * @param parent the node id of the parent node for this treenode\n   * @param inputs an array of treenode ids for all values coming into this node\n   * @param outputs an array of treenode ids for all downstream functions \n   */\n   export interface TreeNodeProxy {\n    node: number,\n    parent: number; \n    inputs: Array;\n    outputs: Array; \n   }\n  \n    /**\n    * holds data about each draft component in a compressed form \n    * @param draft_id the draft id associated with this node (if available)\n   * @param draft_visible a boolean to state if this node is visible or not. \n   * @param draft_name a string representing a user defined name\n   * @param draft this will only export if the draft is a seed draft\n   * @param loom this will only export if the draft is a seed draft \n   * @param loom_settings the associated loom settings on this node, if present\n    */\n  \n    export interface DraftNodeProxy {\n      node_id: number;\n      draft_id: number;\n      draft_name: string;\n      draft: Draft;\n      draft_visible: boolean;\n      loom: Loom,\n      loom_settings: LoomSettings;\n    }\n  \n  /**\n    * a sparce form of an operaction component to use for saving\n    * @param node_id the node id this object refers too\n    * @param name the name of the operation at this node\n    * @param params the list of input parameters to this operation\n    * @param inlets the let of inlets and associated values \n    */\n  export interface OpComponentProxy {\n    node_id: number,\n    name: string,\n    params: Array, \n    inlets: Array;\n  }\n  \n  \n   /**\n    * describes the data from the workspace that is saved.\n    */\n   export interface SaveObj {\n    version: string,\n    workspace: any,\n    type: string,\n    nodes: Array,\n    tree: Array,\n    draft_nodes: Array,\n    ops: Array,\n    notes: Array,\n    materials: Array,\n    scale: number\n   }\n  \n  export interface FileObj {\n   version: string,\n   workspace: any,\n   filename: string,\n   nodes: Array,\n   treenodes: Array,\n   draft_nodes: Array,\n   ops: Array\n   scale: number\n  }\n  \n  export interface StatusMessage {\n    id: number,\n    message: string,\n    success: boolean\n  }\n  \n  export interface LoadResponse {\n    data: FileObj,\n    status: number;\n  }\n  \n  export interface Fileloader {\n    ada: (filename: string, data: any) => Promise,\n    //wif: (filename: string, data: any) => Promise,\n    //bmp: (filename: string, data: any) => Promise,\n    //jpg: (filename: string, data: any) => Promise,\n    form: (data: any) => Promise}\n  \n  export interface FileSaver {\n    ada: (type: string, for_timeline:boolean, current_scale: number) => Promise,\n    //wif: (draft: Draft, loom: Loom) => Promise,\n    bmp: (canvas: HTMLCanvasElement) => Promise,\n    jpg: (canvas: HTMLCanvasElement) => Promise\n  }\n    \n\n\n\n\n\n\n\n\n\n                   \n    \n         results matching \"\"\n        \n    \n    \n        No results matching \"\"\n    \n\n"},"interfaces/TreeOperation.html":{"url":"interfaces/TreeOperation.html","title":"interface - TreeOperation","body":"\n                   \n\n\n\n\n\n\n\n\n\n\n\n\n\n\n  Interfaces\n  \n  TreeOperation\n\n\n\n        \n            Info\n        \n        \n            Source\n        \n\n\n\n    \n        \n            File\n        \n        \n            src/app/mixer/model/operation.ts\n        \n\n\n            \n                Description\n            \n            \n                a standard operation used by the tree\n\n            \n\n\n        \n            Index\n            \n                \n                    \n                        \n                            Properties\n                        \n                    \n                    \n                        \n                            \n                                \n                                        \n                                            displayname\n                                        \n                                \n                                \n                                        \n                                            dx\n                                        \n                                \n                                \n                                        \n                                            inlets\n                                        \n                                \n                                \n                                        \n                                            name\n                                        \n                                \n                                \n                                        \n                                            old_names\n                                        \n                                \n                                \n                                        \n                                            params\n                                        \n                                \n                                \n                                        \n                                            perform\n                                        \n                                \n                            \n                        \n                    \n                \n            \n        \n\n\n\n            \n                Properties\n                    \n                        \n                                \n                                    \n                                        \n                                        displayname\n                                            \n                                                \n                                            \n                                        \n                                    \n                                \n                                \n                                    \n                                        displayname:         string\n\n                                    \n                                \n\n\n                                    \n                                        \n                                            Type :         string\n\n                                        \n                                    \n\n\n\n\n\n                        \n                    \n                    \n                        \n                                \n                                    \n                                        \n                                        dx\n                                            \n                                                \n                                            \n                                        \n                                    \n                                \n                                \n                                    \n                                        dx:         string\n\n                                    \n                                \n\n\n                                    \n                                        \n                                            Type :         string\n\n                                        \n                                    \n\n\n\n\n\n                        \n                    \n                    \n                        \n                                \n                                    \n                                        \n                                        inlets\n                                            \n                                                \n                                            \n                                        \n                                    \n                                \n                                \n                                    \n                                        inlets:     Array\n\n                                    \n                                \n\n\n                                    \n                                        \n                                            Type :     Array\n\n                                        \n                                    \n\n\n\n\n\n                        \n                    \n                    \n                        \n                                \n                                    \n                                        \n                                        name\n                                            \n                                                \n                                            \n                                        \n                                    \n                                \n                                \n                                    \n                                        name:         string\n\n                                    \n                                \n\n\n                                    \n                                        \n                                            Type :         string\n\n                                        \n                                    \n\n\n\n\n\n                        \n                    \n                    \n                        \n                                \n                                    \n                                        \n                                        old_names\n                                            \n                                                \n                                            \n                                        \n                                    \n                                \n                                \n                                    \n                                        old_names:     Array\n\n                                    \n                                \n\n\n                                    \n                                        \n                                            Type :     Array\n\n                                        \n                                    \n\n\n\n\n\n                        \n                    \n                    \n                        \n                                \n                                    \n                                        \n                                        params\n                                            \n                                                \n                                            \n                                        \n                                    \n                                \n                                \n                                    \n                                        params:         Array\n\n                                    \n                                \n\n\n                                    \n                                        \n                                            Type :         Array\n\n                                        \n                                    \n\n\n\n\n\n                        \n                    \n                    \n                        \n                                \n                                    \n                                        \n                                        perform\n                                            \n                                                \n                                            \n                                        \n                                    \n                                \n                                \n                                    \n                                        perform:         function\n\n                                    \n                                \n\n\n                                    \n                                        \n                                            Type :         function\n\n                                        \n                                    \n\n\n\n\n\n                        \n                    \n            \n    \n\n\n    \n        import { Draft } from '../../core/model/datatypes';\nimport { OperationParam, ParamValue } from './operation/params';\nimport { InletDrafts, OperationInlet } from './operation/inlets';\nimport { BaseOp as Op, BuildableOperation as GenericOp,\n  Seed, Pipe, Merge, Branch, Bus,\n  NoDrafts, NoParams, DraftsOptional, ParamsOptional, AllRequired\n} from './operation/topology';\n\n\n/** ALL OBJECTS/TYPES/UTILITY FUNCTIONS RELATED to OPERATIONS *****************/\n\nexport * from './operation/inlets';\nexport * from './operation/params';\nexport * from './operation/topology';\nexport * as format from './operation/formatting';\n\n/**** USING OPERATIONS with the MIXER TREE **************/\n\n/**\n * this is a type that contains a series of smaller operations held under the banner of one larger operation (such as layer)\n * @param op_name the name of the operation or \"child\" if this is an assignment to an input parameter\n * @param drafts the drafts associated with this input\n * @param params the parameters associated with this operation OR child input\n * @param inlets the index of the inlet for which the draft is entering upon\n */\n export interface OpInput {\n  op_name: string,\n  drafts: Array,\n  params: Array,\n  inlet: number | null\n}\n\nfunction getParamsFromInputs(inputs: Array): Array {\n  let res = inputs.map((el) => el.params).reduce((acc, el) => acc.concat(el), []);\n  console.log(res);\n  return res;\n}\n\nfunction getDraftsFromInputs(inputs: Array): Array {\n  return inputs.map((el) => el.drafts).reduce((acc, ds) => acc.concat(ds), []);\n}\n\nfunction getInletsFromInputs(inputs: Array, n: number): InletDrafts {\n  let res: InletDrafts = {};\n  for (let i = 0; i  el.inlet == i);\n    let inlet_drafts = this_inlet.map((el) => el.drafts);\n    res[i] = inlet_drafts.reduce((acc, ds) => acc.concat(ds), []);\n  }\n  return res;\n}\n  \n/**\n * a standard operation used by the tree\n * @param name the internal name of this opearation (CHANGING THESE WILL BREAK LEGACY VERSIONS)\n * @param displayname the name to show upon this operation in the interface\n * @param dx the description of this operation\n * @param params the parameters associated with this operation\n * @param inets the inlets associated with this operation\n * @param old_names referes to any prior name of this operation to aid when loading old files\n * @param perform a function that executes when this operation is performed, takes a series of inputs and resturns an array of drafts\n */\nexport interface TreeOperation {\n  name: string,\n  displayname: string,\n  dx: string,\n  params: Array,\n  inlets: Array,\n  old_names: Array,\n  perform: (op_inputs: Array) => Promise>\n}\n\nexport function getDefaultParams(op: TreeOperation | GenericOp): Array {\n  if (!op.params || op.params.length == 0) {\n    return [] as Array;\n  }\n  return op.params.map((el) => el.value);\n}\n\n/** \n * @function \n * The big function to pack an operation from op_definitions (working directly with params and drafts)\n * into an operation that the tree can recognize (uses OpInputs)\n */\nexport function buildTreeOp(base: GenericOp): TreeOperation {\n  let tree_op_perform: TreeOperation[\"perform\"];\n  // check what type of op, topologically with I/O (seed, pipe, merge, branch, bus, dynamic)\n    // convert perform args to Array\n  // check for special case of args (no drafts, no params, everything else is ok)\n    // only seed -> no drafts, everything else\n    // pipe/merge/branch/bus -> no params, everything else\n  // check if there is a param or draft in op_inputs[0] to put into an optional arg\n  if (base.classifier.type === 'seed') {\n    if (base.classifier.input_drafts === 'none') {\n      let seedOp = base as Op;\n      tree_op_perform = (op_inputs: Array) => {\n        return Promise.resolve([seedOp.perform(op_inputs[0].params)]);\n      }\n    } else {\n      let seedOp = base as Op;\n      tree_op_perform = (op_inputs: Array) => {\n        console.log(\"op inputs: \", base.name, op_inputs);\n        if (op_inputs.filter((el) => (el.op_name == 'child')).length > 0) {\n          return Promise.resolve([seedOp.perform(op_inputs[0].params, getDraftsFromInputs(op_inputs)[0])]);\n        } else {\n          return Promise.resolve([seedOp.perform(op_inputs[0].params)]);\n        }\n      }\n    }\n  } else if (base.classifier.type === 'pipe') {\n    // let pipeOp;\n    if (base.classifier.input_params === 'none') {\n      let pipeOp = base as Op ;\n      tree_op_perform = (op_inputs: Array) => {\n        if (op_inputs.filter((el) => (el.op_name == 'child')).length == 0) {\n          return Promise.resolve([]) as Promise>;\n        }\n        return Promise.resolve([pipeOp.perform(getDraftsFromInputs(op_inputs)[0])]);\n      }\n    } else if (base.classifier.input_params === 'req') {\n      let pipeOp = base as Op;\n      console.log(\"perform op, pipe all required\");\n      tree_op_perform = (op_inputs: Array) => {\n        if (op_inputs.filter((el) => (el.op_name == 'child')).length == 0) {\n          return Promise.resolve([]) as Promise>;\n        }\n        return Promise.resolve([pipeOp.perform(getDraftsFromInputs(op_inputs)[0], op_inputs[0].params)]);\n      }\n    } else {\n      let pipeOp = base as Op;\n      tree_op_perform = (op_inputs: Array) => {\n        if (op_inputs[0].params.length > 0) {\n          return Promise.resolve([pipeOp.perform(op_inputs[0].drafts[0], op_inputs[0].params)]);\n        } else {\n          return Promise.resolve([pipeOp.perform(op_inputs[0].drafts[0])]);\n        }\n      }\n    }\n  } else if (base.classifier.type === 'merge') {\n    if (base.classifier.input_params === 'none') {\n      let mergeOp = base as Op;\n      if (base.inlets.filter((i) => i.num_drafts != 1).length) {\n        // complex merge, at least one inlet can take multiple drafts, so we have to prepare\n        // the inputs a little differently\n        tree_op_perform = (op_inputs: Array) => {\n          if (op_inputs.filter((el) => (el.op_name == 'child')).length >;\n          }\n          let inputs: InletDrafts = {};\n          for (let i = 0; i  el.inlet == i);\n            let inlet_drafts = this_inlet.map((el) => el.drafts);\n            inputs[i] = inlet_drafts.reduce((acc, ds) => acc.concat(ds), []);\n          }\n          return Promise.resolve([mergeOp.perform(inputs)]);\n        }\n      } else {\n        // simple merge, either 1 multi-inlet or mulitple single inlets\n        tree_op_perform = (op_inputs: Array) => {\n          if (op_inputs.filter((el) => (el.op_name == 'child')).length == 0) {\n            return Promise.resolve([]) as Promise>;\n          }\n          let inputs: Array;\n          inputs = op_inputs.map((el) => el.drafts).reduce((acc, ds) => acc.concat(ds), []);\n          return Promise.resolve([mergeOp.perform(inputs)]);\n        }\n      }\n    } else if (base.classifier.input_params === 'req') {\n      let mergeOp = base as Op;\n      if (base.inlets.length > 1 && base.inlets.filter((i) => i.num_drafts != 1).length) {\n        // complex merge, more than one inlet and at least one inlet can take multiple drafts, so we have to prepare\n        // the inputs a little differently\n        tree_op_perform = (op_inputs: Array) => {\n          if (op_inputs.filter((el) => (el.op_name == 'child')).length == 0) {\n            return Promise.resolve([]) as Promise>;\n          }\n          let inputs: InletDrafts = {};\n          for (let i = 0; i  el.inlet == i);\n            let inlet_drafts = this_inlet.map((el) => el.drafts);\n            inputs[i] = inlet_drafts.reduce((acc, ds) => acc.concat(ds), []);\n          }\n          return Promise.resolve([mergeOp.perform(inputs, op_inputs[0].params)]);\n        }\n      } else {\n        // simple merge, either 1 multi-inlet or multple single inlets\n        tree_op_perform = (op_inputs: Array) => {\n          if (op_inputs.filter((el) => (el.op_name == 'child')).length == 0) {\n            return Promise.resolve([]) as Promise>;\n          }\n          let inputs: Array;\n          inputs = op_inputs.map((el) => el.drafts).reduce((acc, ds) => acc.concat(ds));\n          return Promise.resolve([mergeOp.perform(inputs, op_inputs[0].params)]);\n        }\n      }\n    }\n  } else if (base.classifier.type === 'branch') { \n    if (base.classifier.input_params === 'req') {\n      let branchOp = base as Op;\n      tree_op_perform = (op_inputs: Array) => {\n        return Promise.resolve(branchOp.perform(op_inputs[1].drafts[0], getParamsFromInputs(op_inputs))) as Promise>;\n      }\n    } else {\n      let branchOp = base as Op;\n      tree_op_perform = (op_inputs: Array) => {\n        if (op_inputs.filter((el) => (el.op_name == 'child')).length == 0) {\n          return Promise.resolve([]) as Promise>;\n        }\n        return Promise.resolve(branchOp.perform(op_inputs[1].drafts[0])) as Promise>;\n      }\n    }\n  } else { /** @todo bus ops, but there aren't any operations in this category currently */\n    tree_op_perform = (op_inputs: Array) => {\n      return Promise.resolve([]) as Promise>;\n    }\n  }\n\n  let new_op = {\n    name: base.name,\n    topo_op: base,\n    old_names: base.old_names,\n    inlets: base.inlets,\n    displayname: base.displayname,\n    dx: base.dx,\n    max_inputs: base.max_inputs,\n    params: base.params,\n    perform: tree_op_perform\n  } as TreeOperation;\n\n  return new_op;\n}\n\n/**\n * A container operation that takes drafts with some parameter assigned to them \n * @param name the internal name of this operation used for index (DO NOT CHANGE THESE NAMES!)\n * @param displayname the name to show the viewer \n * @param params the parameters that one can directly input to the parent\n * @param dynamic_param_id which parameter id should we use to dynamically create paramaterized input slots\n * @param dynamic_param_type the type of parameter that we look to generate\n * @param inlets the inlets available for input by default on this operation\n * @param dx the description of this operation\n * @param old_names referes to any prior name of this operation to aid when loading old files\n * @param perform a function that executes when this operation is performed, takes a series of inputs and resturns an array of drafts\n */\nexport interface DynamicOperation extends TreeOperation {\n  name: string,\n  displayname: string,\n  params: Array, \n  dynamic_param_id: number,\n  dynamic_param_type: string,\n  inlets: Array,\n  dx: string,\n  old_names: Array,\n  perform: (op_inputs: Array) => Promise>;\n}\n\n /**\n  * this type is used to classify operations in the dropdown menu\n  * @param category the name of the category for all associated operations (e.g. block, structure)\n  * @param dx a description of that category to show on screen\n  * @param ops an array of all the operations associated with this category\n  */\n export interface OperationClassification {\n  category: string,\n  dx: string,\n  ops: Array \n }\n\n export type Operation = TreeOperation; // default: export operations to interface with Tree\n\n \n    \n\n\n\n\n\n\n\n\n\n                   \n    \n         results matching \"\"\n        \n    \n    \n        No results matching \"\"\n    \n\n"},"interfaces/Vertex.html":{"url":"interfaces/Vertex.html","title":"interface - Vertex","body":"\n                   \n\n\n\n\n\n\n\n\n\n\n\n\n\n\n  Interfaces\n  \n  Vertex\n\n\n\n        \n            Info\n        \n        \n            Source\n        \n\n\n\n    \n        \n            File\n        \n        \n            src/app/core/model/datatypes/yarnsim.ts\n        \n\n\n            \n                Description\n            \n            \n                Used to draw on screen paths, refers to x, y coordiantes relative to the draft simulation\nUsed only in yarn sim\n\n            \n\n\n        \n            Index\n            \n                \n                    \n                        \n                            Properties\n                        \n                    \n                    \n                        \n                            \n                                \n                                        \n                                            x_pcent\n                                        \n                                \n                                \n                                        \n                                            y\n                                        \n                                \n                            \n                        \n                    \n                \n            \n        \n\n\n\n            \n                Properties\n                    \n                        \n                                \n                                    \n                                        \n                                        x_pcent\n                                            \n                                                \n                                            \n                                        \n                                    \n                                \n                                \n                                    \n                                        x_pcent:         number\n\n                                    \n                                \n\n\n                                    \n                                        \n                                            Type :         number\n\n                                        \n                                    \n\n\n\n\n\n                        \n                    \n                    \n                        \n                                \n                                    \n                                        \n                                        y\n                                            \n                                                \n                                            \n                                        \n                                    \n                                \n                                \n                                    \n                                        y:         number\n\n                                    \n                                \n\n\n                                    \n                                        \n                                            Type :         number\n\n                                        \n                                    \n\n\n\n\n\n                        \n                    \n            \n    \n\n\n    \n        export interface Vertex {\n  x_pcent: number;\n  y: number;\n}\n\n/**\n * Used to draw on screen paths, refers to x, y coordiantes relative to the draft simulation\n * Used only in yarn sim\n * @param draft_ndx - the row id within the draft of this yarn\n * @param material_id the material id at this row\n * @param verticies - list of points that form this path\n */\nexport interface YarnPath {\n\tdraft_ndx: number;\n  material_id: number;\n  verticies: Array;\n}\n\n/**\n * describes the relationship between weft rows along the same warp\n */\nexport type crossType = \n \t{t:boolean, b:boolean} |\n  {t:null, b:null} | //\"FLOAT\",\n  {t:null, b:true} | //\"UNSET_UNDER\"\n  {t:null, b:false} | //\"UNSET_OVER\"\n  {t:true, b:null} | //\"UNDER_UNSET\"\n  {t:false, b:null} | //\"OVER_UNSET\"\n  {t:false, b:true} | //\"OVER_UNDER\",\n  {t:true, b:false}; //\"UNDER_OVER\", \n\n\n/**\n * A yarn cross describes the relationship betwen two draft cells\n * read from top to bottom. This is used within the sparce \n * draft representation, stores only \"warp\" crossings\n */\nexport interface Crossing {\n  j: number, \n  type: crossType;\n}\n    \n\n\n\n\n\n\n\n\n\n                   \n    \n         results matching \"\"\n        \n    \n    \n        No results matching \"\"\n    \n\n"},"interfaces/ViewModes.html":{"url":"interfaces/ViewModes.html","title":"interface - ViewModes","body":"\n                   \n\n\n\n\n\n\n\n\n\n\n\n\n\n\n  Interfaces\n  \n  ViewModes\n\n\n\n        \n            Info\n        \n        \n            Source\n        \n\n\n\n    \n        \n            File\n        \n        \n            src/app/core/model/datatypes/selectlists.ts\n        \n\n\n\n\n        \n            Index\n            \n                \n                    \n                        \n                            Properties\n                        \n                    \n                    \n                        \n                            \n                                \n                                        \n                                            value\n                                        \n                                \n                                \n                                        \n                                            viewValue\n                                        \n                                \n                            \n                        \n                    \n                \n            \n        \n\n\n\n            \n                Properties\n                    \n                        \n                                \n                                    \n                                        \n                                        value\n                                            \n                                                \n                                            \n                                        \n                                    \n                                \n                                \n                                    \n                                        value:         string\n\n                                    \n                                \n\n\n                                    \n                                        \n                                            Type :         string\n\n                                        \n                                    \n\n\n\n\n\n                        \n                    \n                    \n                        \n                                \n                                    \n                                        \n                                        viewValue\n                                            \n                                                \n                                            \n                                        \n                                    \n                                \n                                \n                                    \n                                        viewValue:         string\n\n                                    \n                                \n\n\n                                    \n                                        \n                                            Type :         string\n\n                                        \n                                    \n\n\n\n\n\n                        \n                    \n            \n    \n\n\n    \n        export interface LoomTypes {\n    value: string;\n    viewValue: string;\n  }\n  \n  export interface MaterialTypes {\n    value: number;\n    viewValue: string;\n  }\n  \n  export interface DensityUnits {\n    value: string;\n    viewValue: string;\n  }\n  \n  export interface ViewModes {\n    value: string;\n    viewValue: string;\n  }\n  \n  \n  /**\n   * Stores the icons and language for determining different \n   * modes within which the mouse points are handled\n   * @param value - reference \n   * @param viewValue - text shown to users\n   * @param icon\n   * @param children, menu to nest within this\n   * @param selected boolean to show if it is selected\n   */\n  export interface DesignMode {\n    value: string;\n    viewValue: string;\n    icon: string;\n    children: Array;\n    selected: boolean;\n  }\n  \n    \n\n\n\n\n\n\n\n\n\n                   \n    \n         results matching \"\"\n        \n    \n    \n        No results matching \"\"\n    \n\n"},"injectables/ViewportService.html":{"url":"injectables/ViewportService.html","title":"injectable - ViewportService","body":"\n                   \n\n\n\n\n\n\n\n\n\n  Injectables\n  ViewportService\n\n\n\n        \n            Info\n        \n        \n            Source\n        \n\n\n\n    \n        \n            File\n        \n        \n            src/app/mixer/provider/viewport.service.ts\n        \n\n\n\n\n\n            \n    Index\n    \n        \n                \n                    \n                        Properties\n                    \n                \n                \n                    \n                        \n                            \n                                absolute\n                            \n                            \n                                objs\n                            \n                            \n                                vp\n                            \n                        \n                    \n                \n\n                \n                    \n                        Methods\n                    \n                \n                \n                    \n                        \n                            \n                                addObj\n                            \n                            \n                                clear\n                            \n                            \n                                getAbsoluteHeight\n                            \n                            \n                                getAbsoluteWidth\n                            \n                            \n                                getBounds\n                            \n                            \n                                getCenterPoint\n                            \n                            \n                                getHeight\n                            \n                            \n                                getTopLeft\n                            \n                            \n                                getWidth\n                            \n                            \n                                move\n                            \n                            \n                                removeObj\n                            \n                            \n                                set\n                            \n                            \n                                setAbsolute\n                            \n                            \n                                setHeight\n                            \n                            \n                                setTopLeft\n                            \n                            \n                                setViewportCenter\n                            \n                            \n                                setWidth\n                            \n                            \n                                updatePoint\n                            \n                        \n                    \n                \n\n\n\n\n\n        \n    \n\n\n            \n    Constructor\n        \n            \n                \n                    \nconstructor()\n                    \n                \n                        \n                            \n                                Defined in src/app/mixer/provider/viewport.service.ts:28\n                            \n                        \n\n            \n        \n\n\n            \n    \n    \n        Methods\n    \n    \n        \n            \n                \n                    \n                    \n                        addObj\n                        \n                    \n                \n            \n            \n                \naddObj(id: number, i: Interlacement)\n                \n            \n\n\n            \n                \n                    Defined in src/app/mixer/provider/viewport.service.ts:57\n                \n            \n\n\n            \n                \n                    called when a new subdraft is added\n\n\n                    \n                        Parameters :\n                        \n                        \n                            \n                                \n                                    Name\n                                    Type\n                                    Optional\n                                    Description\n                                \n                            \n                            \n                                \n                                    id\n                                    \n                                                number\n                                    \n\n                                    \n                                        No\n                                    \n\n\n                                    \n                                        the id of the subdraft\n\n                                    \n                                \n                                \n                                    i\n                                    \n                                                Interlacement\n                                    \n\n                                    \n                                        No\n                                    \n\n\n                                    \n                                        the topleft corner as interlacement\n\n                                    \n                                \n                            \n                        \n                    \n                    \n                    \n                    \n                        Returns :         void\n\n                    \n                    \n                        \n                    \n                \n            \n        \n    \n    \n        \n            \n                \n                    \n                    \n                        clear\n                        \n                    \n                \n            \n            \n                \nclear()\n                \n            \n\n\n            \n                \n                    Defined in src/app/mixer/provider/viewport.service.ts:48\n                \n            \n\n\n            \n                \n\n                    \n                        Returns :         void\n\n                    \n                \n            \n        \n    \n    \n        \n            \n                \n                    \n                    \n                        getAbsoluteHeight\n                        \n                    \n                \n            \n            \n                \ngetAbsoluteHeight()\n                \n            \n\n\n            \n                \n                    Defined in src/app/mixer/provider/viewport.service.ts:130\n                \n            \n\n\n            \n                \n\n                    \n                        Returns :         number\n\n                    \n                \n            \n        \n    \n    \n        \n            \n                \n                    \n                    \n                        getAbsoluteWidth\n                        \n                    \n                \n            \n            \n                \ngetAbsoluteWidth()\n                \n            \n\n\n            \n                \n                    Defined in src/app/mixer/provider/viewport.service.ts:118\n                \n            \n\n\n            \n                \n\n                    \n                        Returns :         number\n\n                    \n                \n            \n        \n    \n    \n        \n            \n                \n                    \n                    \n                        getBounds\n                        \n                    \n                \n            \n            \n                \ngetBounds()\n                \n            \n\n\n            \n                \n                    Defined in src/app/mixer/provider/viewport.service.ts:142\n                \n            \n\n\n            \n                \n\n                    \n                        Returns :         Bounds\n\n                    \n                \n            \n        \n    \n    \n        \n            \n                \n                    \n                    \n                        getCenterPoint\n                        \n                    \n                \n            \n            \n                \ngetCenterPoint()\n                \n            \n\n\n            \n                \n                    Defined in src/app/mixer/provider/viewport.service.ts:150\n                \n            \n\n\n            \n                \n                    this gets the center point of the current viewport\n\n\n                    \n                    \n                    \n                        Returns :         Point\n\n                    \n                    \n                        \n                    \n                \n            \n        \n    \n    \n        \n            \n                \n                    \n                    \n                        getHeight\n                        \n                    \n                \n            \n            \n                \ngetHeight()\n                \n            \n\n\n            \n                \n                    Defined in src/app/mixer/provider/viewport.service.ts:126\n                \n            \n\n\n            \n                \n\n                    \n                        Returns :         number\n\n                    \n                \n            \n        \n    \n    \n        \n            \n                \n                    \n                    \n                        getTopLeft\n                        \n                    \n                \n            \n            \n                \ngetTopLeft()\n                \n            \n\n\n            \n                \n                    Defined in src/app/mixer/provider/viewport.service.ts:138\n                \n            \n\n\n            \n                \n\n                    \n                        Returns :         Point\n\n                    \n                \n            \n        \n    \n    \n        \n            \n                \n                    \n                    \n                        getWidth\n                        \n                    \n                \n            \n            \n                \ngetWidth()\n                \n            \n\n\n            \n                \n                    Defined in src/app/mixer/provider/viewport.service.ts:114\n                \n            \n\n\n            \n                \n\n                    \n                        Returns :         number\n\n                    \n                \n            \n        \n    \n    \n        \n            \n                \n                    \n                    \n                        move\n                        \n                    \n                \n            \n            \n                \nmove(x: number, y: number)\n                \n            \n\n\n            \n                \n                    Defined in src/app/mixer/provider/viewport.service.ts:91\n                \n            \n\n\n            \n                \n                    called when the local view is scrolled to a new part of the page\n\n\n                    \n                        Parameters :\n                        \n                        \n                            \n                                \n                                    Name\n                                    Type\n                                    Optional\n                                \n                            \n                            \n                                \n                                    x\n                                    \n                                                number\n                                    \n\n                                    \n                                        No\n                                    \n\n\n                                \n                                \n                                    y\n                                    \n                                                number\n                                    \n\n                                    \n                                        No\n                                    \n\n\n                                \n                            \n                        \n                    \n                    \n                    \n                    \n                        Returns :         void\n\n                    \n                    \n                        \n                    \n                \n            \n        \n    \n    \n        \n            \n                \n                    \n                    \n                        removeObj\n                        \n                    \n                \n            \n            \n                \nremoveObj(id: number)\n                \n            \n\n\n            \n                \n                    Defined in src/app/mixer/provider/viewport.service.ts:65\n                \n            \n\n\n            \n                \n                    calledd when subdraft is deleted\n\n\n                    \n                        Parameters :\n                        \n                        \n                            \n                                \n                                    Name\n                                    Type\n                                    Optional\n                                    Description\n                                \n                            \n                            \n                                \n                                    id\n                                    \n                                                number\n                                    \n\n                                    \n                                        No\n                                    \n\n\n                                    \n                                        \nthe subdraft id\n\n\n                                    \n                                \n                            \n                        \n                    \n                    \n                    \n                    \n                        Returns :         void\n\n                    \n                    \n                        \n                    \n                \n            \n        \n    \n    \n        \n            \n                \n                    \n                    \n                        set\n                        \n                    \n                \n            \n            \n                \nset(x: number, y: number, width: number, height: number)\n                \n            \n\n\n            \n                \n                    Defined in src/app/mixer/provider/viewport.service.ts:104\n                \n            \n\n\n            \n                \n\n                    \n                        Parameters :\n                        \n                        \n                            \n                                \n                                    Name\n                                    Type\n                                    Optional\n                                \n                            \n                            \n                                \n                                    x\n                                    \n                                                number\n                                    \n\n                                    \n                                        No\n                                    \n\n\n                                \n                                \n                                    y\n                                    \n                                                number\n                                    \n\n                                    \n                                        No\n                                    \n\n\n                                \n                                \n                                    width\n                                    \n                                                number\n                                    \n\n                                    \n                                        No\n                                    \n\n\n                                \n                                \n                                    height\n                                    \n                                                number\n                                    \n\n                                    \n                                        No\n                                    \n\n\n                                \n                            \n                        \n                    \n                    \n                    \n                    \n                        Returns :         void\n\n                    \n                    \n                        \n                    \n                \n            \n        \n    \n    \n        \n            \n                \n                    \n                    \n                        setAbsolute\n                        \n                    \n                \n            \n            \n                \nsetAbsolute(w: number, h: number)\n                \n            \n\n\n            \n                \n                    Defined in src/app/mixer/provider/viewport.service.ts:81\n                \n            \n\n\n            \n                \n\n                    \n                        Parameters :\n                        \n                        \n                            \n                                \n                                    Name\n                                    Type\n                                    Optional\n                                \n                            \n                            \n                                \n                                    w\n                                    \n                                                number\n                                    \n\n                                    \n                                        No\n                                    \n\n\n                                \n                                \n                                    h\n                                    \n                                                number\n                                    \n\n                                    \n                                        No\n                                    \n\n\n                                \n                            \n                        \n                    \n                    \n                    \n                    \n                        Returns :         void\n\n                    \n                    \n                        \n                    \n                \n            \n        \n    \n    \n        \n            \n                \n                    \n                    \n                        setHeight\n                        \n                    \n                \n            \n            \n                \nsetHeight(h: number)\n                \n            \n\n\n            \n                \n                    Defined in src/app/mixer/provider/viewport.service.ts:122\n                \n            \n\n\n            \n                \n\n                    \n                        Parameters :\n                        \n                        \n                            \n                                \n                                    Name\n                                    Type\n                                    Optional\n                                \n                            \n                            \n                                \n                                    h\n                                    \n                                                number\n                                    \n\n                                    \n                                        No\n                                    \n\n\n                                \n                            \n                        \n                    \n                    \n                    \n                    \n                        Returns :         void\n\n                    \n                    \n                        \n                    \n                \n            \n        \n    \n    \n        \n            \n                \n                    \n                    \n                        setTopLeft\n                        \n                    \n                \n            \n            \n                \nsetTopLeft(p: Point)\n                \n            \n\n\n            \n                \n                    Defined in src/app/mixer/provider/viewport.service.ts:134\n                \n            \n\n\n            \n                \n\n                    \n                        Parameters :\n                        \n                        \n                            \n                                \n                                    Name\n                                    Type\n                                    Optional\n                                \n                            \n                            \n                                \n                                    p\n                                    \n                                                Point\n                                    \n\n                                    \n                                        No\n                                    \n\n\n                                \n                            \n                        \n                    \n                    \n                    \n                    \n                        Returns :         void\n\n                    \n                    \n                        \n                    \n                \n            \n        \n    \n    \n        \n            \n                \n                    \n                    \n                        setViewportCenter\n                        \n                    \n                \n            \n            \n                \nsetViewportCenter()\n                \n            \n\n\n            \n                \n                    Defined in src/app/mixer/provider/viewport.service.ts:162\n                \n            \n\n\n            \n                \n                    set the viewport in the center of the screen\n\n\n                    \n                    \n                    \n                        Returns :         Point\n\n                    \n                    \n                        the point for referencing\n\n                    \n                \n            \n        \n    \n    \n        \n            \n                \n                    \n                    \n                        setWidth\n                        \n                    \n                \n            \n            \n                \nsetWidth(w: number)\n                \n            \n\n\n            \n                \n                    Defined in src/app/mixer/provider/viewport.service.ts:110\n                \n            \n\n\n            \n                \n\n                    \n                        Parameters :\n                        \n                        \n                            \n                                \n                                    Name\n                                    Type\n                                    Optional\n                                \n                            \n                            \n                                \n                                    w\n                                    \n                                                number\n                                    \n\n                                    \n                                        No\n                                    \n\n\n                                \n                            \n                        \n                    \n                    \n                    \n                    \n                        Returns :         void\n\n                    \n                    \n                        \n                    \n                \n            \n        \n    \n    \n        \n            \n                \n                    \n                    \n                        updatePoint\n                        \n                    \n                \n            \n            \n                \nupdatePoint(id: number, i: Interlacement)\n                \n            \n\n\n            \n                \n                    Defined in src/app/mixer/provider/viewport.service.ts:74\n                \n            \n\n\n            \n                \n                    called when a subdraft is moved and we need to update its location\n\n\n                    \n                        Parameters :\n                        \n                        \n                            \n                                \n                                    Name\n                                    Type\n                                    Optional\n                                    Description\n                                \n                            \n                            \n                                \n                                    id\n                                    \n                                                number\n                                    \n\n                                    \n                                        No\n                                    \n\n\n                                    \n                                        \nthe subdraft id to move\n\n\n                                    \n                                \n                                \n                                    i\n                                    \n                                                Interlacement\n                                    \n\n                                    \n                                        No\n                                    \n\n\n                                    \n                                        \nthe new position to set to\n\n\n                                    \n                                \n                            \n                        \n                    \n                    \n                    \n                    \n                        Returns :         void\n\n                    \n                    \n                        \n                    \n                \n            \n        \n    \n\n            \n    \n    \n        Properties\n    \n    \n        \n            \n                \n                    \n                    \n                        absolute\n                        \n                    \n                \n            \n                \n                    \n                        Type :         Bounds\n\n                    \n                \n                    \n                        \n                                Defined in src/app/mixer/provider/viewport.service.ts:17\n                        \n                    \n\n            \n                \n                    the total size of scrollable space\n\n                \n            \n\n        \n    \n    \n        \n            \n                \n                    \n                    \n                        objs\n                        \n                    \n                \n            \n                \n                    \n                        Type :     Array\n\n                    \n                \n                    \n                        \n                                Defined in src/app/mixer/provider/viewport.service.ts:28\n                        \n                    \n\n            \n                \n                    a reference to the topleft interlalcement of objects being rendered\nnumber references the unique id of this element\n\n                \n            \n\n        \n    \n    \n        \n            \n                \n                    \n                    \n                        vp\n                        \n                    \n                \n            \n                \n                    \n                        Type :         Bounds\n\n                    \n                \n                    \n                        \n                                Defined in src/app/mixer/provider/viewport.service.ts:22\n                        \n                    \n\n            \n                \n                    the bounds of the viewport within that space\n\n                \n            \n\n        \n    \n\n\n    \n\n\n    \n        import { Injectable } from '@angular/core';\nimport { Bounds, Interlacement, Point } from '../../core/model/datatypes';\n\n\n\n@Injectable({\n  providedIn: 'root'\n})\nexport class ViewportService {\n\n\n\n\n  /**\n   * the total size of scrollable space\n   */\n  absolute: Bounds;\n\n  /**\n   * the bounds of the viewport within that space\n   */\n  vp: Bounds;\n\n  /**\n   * a reference to the topleft interlalcement of objects being rendered\n   * number references the unique id of this element \n   */\n  objs: Array;\n\n  constructor(){\n\n    this.vp = {\n      topleft: {x:0, y:0}, \n      width: 0, \n      height:0\n    };\n\n    this.absolute = {\n      topleft: {x:0, y:0}, \n      width: 0, \n      height:0\n    };\n\n    this.objs = [];\n\n   }\n\n   clear(){\n     this.objs = [];\n   }\n\n  /**\n   * called when a new subdraft is added\n   * @param id the id of the subdraft\n   * @param i the topleft corner as interlacement\n   */   \n   addObj(id: number, i: Interlacement){\n     this.objs.push({id: id, i:i});\n   }\n\n   /**\n    * calledd when subdraft is deleted\n    * @param id - the subdraft id\n    */\n   removeObj(id: number){\n     this.objs  = this.objs.filter(el => el.id != id);\n   }\n\n   /**\n    * called when a subdraft is moved and we need to update its location\n    * @param id - the subdraft id to move\n    * @param i - the new position to set to\n    */\n   updatePoint(id:number, i:Interlacement){\n     this.objs = this.objs.map(el => {\n      if(el.id === id) el.i = i;\n      return el;\n    });\n   }\n\n   setAbsolute(w: number, h: number){\n    this.absolute.width = w;\n    this.absolute.height = h;\n   }\n\n   /**\n    * called when the local view is scrolled to a new part of the page\n    * @param x \n    * @param y \n    */\n  move(x: number, y:number){\n\n    if(x === undefined || y == undefined) return;\n\n    const bleh = {\n      x: this.vp.topleft.x + x,\n      y: this.vp.topleft.y + y\n    }\n\n    this.set(bleh.x, bleh.y, this.vp.width, this.vp.height);\n\n  }\n\n  set(x: number, y: number, width: number, height: number){\n    this.vp.topleft = {x: x, y:y};\n    this.vp.width = width;\n    this.vp.height = height;\n  }\n\n  setWidth(w: number){\n    this.vp.width = w;\n  }\n\n  getWidth(): number{\n    return this.vp.width;\n  }\n\n  getAbsoluteWidth(): number{\n    return this.absolute.width;\n  }\n\n  setHeight(h: number){\n    this.vp.height = h;\n  }\n\n  getHeight(): number{\n    return this.vp.height;\n  }\n\n  getAbsoluteHeight(): number{\n    return this.absolute.height;\n  }\n\n  setTopLeft(p: Point){\n    this.vp.topleft = {x: p.x, y:p.y};\n  }\n\n  getTopLeft(): Point{\n    return this.vp.topleft;\n  }\n\n  getBounds(): Bounds {\n    return this.vp;\n  }\n\n  /**\n   * this gets the center point of the current viewport\n   * @returns \n   */\n  getCenterPoint(): Point{\n    const center: Point = {\n      x: this.vp.topleft.x + this.vp.width/2,\n      y: this.vp.topleft.y + this.vp.height/2\n    }\n    return center;\n  }\n\n  /**\n  * set the viewport in the center of the screen\n  * @returns the point for referencing\n   */\n  setViewportCenter(): Point{\n\n    const abs_topleft: Point = {\n      x: this.absolute.width/2 - this.vp.width/2,\n      y: this.absolute.height/2 - this.vp.height/2\n    }\n\n    this.vp.topleft = abs_topleft;\n    return abs_topleft;\n\n  }\n\n\n  \n\n\n\n}\n\n    \n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n                   \n    \n         results matching \"\"\n        \n    \n    \n        No results matching \"\"\n    \n\n"},"components/VirtualPedalsComponent.html":{"url":"components/VirtualPedalsComponent.html","title":"component - VirtualPedalsComponent","body":"\n                   \n\n\n\n\n\n  Components\n  \n  VirtualPedalsComponent\n\n\n\n        \n            Info\n        \n        \n            Source\n        \n        \n            Template\n        \n        \n            Styles\n        \n        \n            DOM Tree\n        \n\n\n\n    \n    File\n\n\n    src/app/player/virtual-pedals/virtual-pedals.component.ts\n\n\n\n\n\n    \n        Implements\n    \n    \n                    OnInit\n    \n\n\n\n    Metadata\n    \n        \n\n\n\n\n\n\n\n\n\n\n\n            \n                selector\n                app-virtual-pedals\n            \n\n            \n                styleUrls\n                ./virtual-pedals.component.scss\n            \n\n\n\n            \n                templateUrl\n                ./virtual-pedals.component.html\n            \n\n\n\n\n\n\n\n\n        \n    \n\n\n    \n    Index\n    \n        \n                \n                    \n                        Properties\n                    \n                \n                \n                    \n                        \n                            \n                                    Public\n                                pds\n                            \n                        \n                    \n                \n\n                \n                    \n                        Methods\n                    \n                \n                \n                    \n                        \n                            \n                                ngOnInit\n                            \n                            \n                                onKeyPress\n                            \n                        \n                    \n                \n\n\n\n\n                \n                    \n                        HostListeners\n                    \n                \n                \n                    \n                        \n                            \n                                window:keydown\n                            \n                        \n                    \n                \n\n        \n    \n\n\n    \n    Constructor\n        \n            \n                \n                    \nconstructor(pds: PedalsService)\n                    \n                \n                        \n                            \n                                Defined in src/app/player/virtual-pedals/virtual-pedals.component.ts:9\n                            \n                        \n\n                \n                    \n                            \n                                    Parameters :\n                                    \n                                        \n                                            \n                                                Name\n                                                    Type\n                                                Optional\n                                            \n                                        \n                                        \n                                                \n                                                        pds\n                                                  \n                                                        \n                                                                        PedalsService\n                                                        \n                                                  \n                                                    \n                                                            No\n                                                    \n                                                    \n                                                \n                                        \n                                    \n                            \n                    \n                \n            \n        \n\n\n\n\n\n    \n    HostListeners    \n        \n            \n                \n                    \n                    \n                        window:keydown\n                        \n                    \n                \n            \n            \n                \n                    Arguments : '$event' \n                \n            \n            \n                \nwindow:keydown(event: KeyboardEvent)\n                \n            \n\n\n            \n                \n                    Defined in src/app/player/virtual-pedals/virtual-pedals.component.ts:19\n                \n            \n\n\n        \n    \n\n    \n    \n    \n        Methods\n    \n    \n        \n            \n                \n                    \n                    \n                        ngOnInit\n                        \n                    \n                \n            \n            \n                \nngOnInit()\n                \n            \n\n\n            \n                \n                    Defined in src/app/player/virtual-pedals/virtual-pedals.component.ts:15\n                \n            \n\n\n            \n                \n\n                    \n                        Returns :         void\n\n                    \n                \n            \n        \n    \n    \n        \n            \n                \n                    \n                    \n                        onKeyPress\n                        \n                    \n                \n            \n            \n                \nonKeyPress(event: KeyboardEvent)\n                \n            \n\n            \n                \n                    Decorators : \n                    \n                    @HostListener('window:keydown', ['$event'])\n                \n            \n\n            \n                \n                    Defined in src/app/player/virtual-pedals/virtual-pedals.component.ts:19\n                \n            \n\n\n            \n                \n\n                    \n                        Parameters :\n                        \n                        \n                            \n                                \n                                    Name\n                                    Type\n                                    Optional\n                                \n                            \n                            \n                                \n                                    event\n                                    \n                                            KeyboardEvent\n                                    \n\n                                    \n                                        No\n                                    \n\n\n                                \n                            \n                        \n                    \n                    \n                    \n                    \n                        Returns :         void\n\n                    \n                    \n                        \n                    \n                \n            \n        \n    \n\n    \n    \n    \n        Properties\n    \n    \n        \n            \n                \n                    \n                    \n                            Public\n                        pds\n                        \n                    \n                \n            \n                \n                    \n                        Type :         PedalsService\n\n                    \n                \n                    \n                        \n                                Defined in src/app/player/virtual-pedals/virtual-pedals.component.ts:12\n                        \n                    \n\n\n        \n    \n\n\n\n\n\n    \n        import { Component, OnInit, HostListener } from '@angular/core';\nimport { PedalsService } from '../provider/pedals.service';\n\n@Component({\n  selector: 'app-virtual-pedals',\n  templateUrl: './virtual-pedals.component.html',\n  styleUrls: ['./virtual-pedals.component.scss']\n})\nexport class VirtualPedalsComponent implements OnInit {\n\n  constructor(\n    public pds: PedalsService,\n  ) { }\n\n  ngOnInit(): void {\n  }\n\n  @HostListener('window:keydown', ['$event'])\n  onKeyPress(event: KeyboardEvent) {\n    console.log(event);\n    switch(event.key) {\n      case ' ': \n        this.pds.togglePedalByID(0); \n        break;\n      case '1':\n      case '2':\n      case '3':\n      case '4':\n      case '5':\n      case '6':\n      case '7':\n      case '8':\n      case '9':\n        this.pds.togglePedalByID(parseInt(event.key));\n        break;\n      case '0':\n        this.pds.togglePedalByID(10);\n        break;\n      default: \n        console.log(\"unknown key \", event.key);\n        break;\n    }\n  }\n}\n\n    \n\n    \n        Virtual Pedals: {{ pds.num_v_pedals.val }}\n\n\n  \n    \n      +\n    \n    \n      -\n    \n  \n\n  \n    Pedals  -->\n    \n      \n        \n        {{p.id}}\n        \n      \n    \n  \n\n    \n\n    \n                \n                    ./virtual-pedals.component.scss\n                \n                .row {\n  display: flex;\n  flex-direction: row;\n}\n\n.row-item {\n  margin: 0 1em;\n  padding: 1em;\n}\n\n.mat-button {\n  background-color: #ff4081;\n  color: white;\n  width: min-content;\n  height: min-content;\n  min-width: revert;\n  min-height: revert;\n  line-height: normal;\n}\n\n#button-container {\n  padding: 1em 0;\n}\n    \n\n    \n        \n        \n            \n                Legend\n            \n            \n                Html element\n            \n            \n                Component\n            \n            \n                Html element with directive\n            \n        \n    \n\n    \n\n\n\n\n\n\n        var COMPONENT_TEMPLATE = 'Virtual Pedals: {{ pds.num_v_pedals.val }}            +              -            Pedals  -->                          {{p.id}}                    '\n    var COMPONENTS = [{'name': 'ConnectionComponent', 'selector': 'app-connection'},{'name': 'DraftdetailComponent', 'selector': 'app-draftdetail'},{'name': 'ImageComponent', 'selector': 'app-image'},{'name': 'InletComponent', 'selector': 'app-inlet'},{'name': 'MixerComponent', 'selector': 'app-mixer'},{'name': 'MixerViewComponent', 'selector': 'app-mixerview'},{'name': 'NoteComponent', 'selector': 'app-note'},{'name': 'OperationComponent', 'selector': 'app-operation'},{'name': 'OpHelpModal', 'selector': 'app-ophelp'},{'name': 'OpsComponent', 'selector': 'app-ops'},{'name': 'OpSequencerComponent', 'selector': 'app-op-sequencer'},{'name': 'PaletteComponent', 'selector': 'app-palette'},{'name': 'ParameterComponent', 'selector': 'app-parameter'},{'name': 'PlayerComponent', 'selector': 'app-player'},{'name': 'SnackbarComponent', 'selector': 'app-snackbar'},{'name': 'SubdraftComponent', 'selector': 'app-subdraft'},{'name': 'VirtualPedalsComponent', 'selector': 'app-virtual-pedals'},{'name': 'WeavingStateComponent', 'selector': 'app-weaving-state'}];\n    var DIRECTIVES = [{'name': 'MarqueeComponent', 'selector': 'app-marquee'},{'name': 'SelectionComponent', 'selector': 'app-selection'}];\n    var ACTUAL_COMPONENT = {'name': 'VirtualPedalsComponent'};\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n                   \n    \n         results matching \"\"\n        \n    \n    \n        No results matching \"\"\n    \n\n"},"interfaces/WeavingLog.html":{"url":"interfaces/WeavingLog.html","title":"interface - WeavingLog","body":"\n                   \n\n\n\n\n\n\n\n\n\n\n\n\n\n\n  Interfaces\n  \n  WeavingLog\n\n\n\n        \n            Info\n        \n        \n            Source\n        \n\n\n\n    \n        \n            File\n        \n        \n            src/app/player/model/player.ts\n        \n\n\n\n\n        \n            Index\n            \n                \n                    \n                        \n                            Properties\n                        \n                    \n                    \n                        \n                            \n                                \n                                        \n                                            draft\n                                        \n                                \n                                \n                                        \n                                            shortDraft\n                                        \n                                \n                                \n                                        \n                                            states\n                                        \n                                \n                            \n                        \n                    \n                \n            \n        \n\n\n\n            \n                Properties\n                    \n                        \n                                \n                                    \n                                        \n                                        draft\n                                            \n                                                \n                                            \n                                        \n                                    \n                                \n                                \n                                    \n                                        draft:         Draft\n\n                                    \n                                \n\n\n                                    \n                                        \n                                            Type :         Draft\n\n                                        \n                                    \n\n\n\n\n\n                        \n                    \n                    \n                        \n                                \n                                    \n                                        \n                                        shortDraft\n                                            \n                                                \n                                            \n                                        \n                                    \n                                \n                                \n                                    \n                                        shortDraft:         Draft\n\n                                    \n                                \n\n\n                                    \n                                        \n                                            Type :         Draft\n\n                                        \n                                    \n\n\n\n\n\n                        \n                    \n                    \n                        \n                                \n                                    \n                                        \n                                        states\n                                            \n                                                \n                                            \n                                        \n                                    \n                                \n                                \n                                    \n                                        states:         Array\n\n                                    \n                                \n\n\n                                    \n                                        \n                                            Type :         Array\n\n                                        \n                                    \n\n\n\n\n\n                        \n                    \n            \n    \n\n\n    \n        import { Draft } from \"../../core/model/datatypes\"\nimport { initDraft } from \"../../core/model/drafts\";\n\n/** @interface\n * PlayerState represents the Draft Player as an FSM\n * @param draft The Draft currently loaded by the weaver\n * @param row which row of the draft the weaving is at\n * @param weaving whether or not the TC2 is actually running, or the weaver is just previewing the draft\n * @param numPicks the number of rows (picks) that have been sent to the loom so far (because the TC2 needs to receive this as part of the pick data)\n * @param pedal the name (mapped function) of the pedal that triggered this state change\n */\nexport interface PlayerState {\n  draft: Draft,\n  row: number,\n  pedal: string,\n  weaving: boolean,\n  numPicks: number,\n}\n\nexport function copyState(init: PlayerState): PlayerState {\n  return Object.assign({}, init);\n}\n\nexport function initState(): PlayerState { \n  return {\n    draft: initDraft(),\n    row: 0,\n    pedal: \"\",\n    weaving: false,\n    numPicks: 0\n}};\n\nexport interface WeavingPick {\n  pickNum: number,\n  rowData: string,\n}\n\nexport interface WeavingLog {\n  draft: Draft,\n  shortDraft: Draft,\n  states: Array,\n}\n    \n\n\n\n\n\n\n\n\n\n                   \n    \n         results matching \"\"\n        \n    \n    \n        No results matching \"\"\n    \n\n"},"interfaces/WeavingPick.html":{"url":"interfaces/WeavingPick.html","title":"interface - WeavingPick","body":"\n                   \n\n\n\n\n\n\n\n\n\n\n\n\n\n\n  Interfaces\n  \n  WeavingPick\n\n\n\n        \n            Info\n        \n        \n            Source\n        \n\n\n\n    \n        \n            File\n        \n        \n            src/app/player/model/state.ts\n        \n\n\n\n\n        \n            Index\n            \n                \n                    \n                        \n                            Properties\n                        \n                    \n                    \n                        \n                            \n                                \n                                        \n                                            pickNum\n                                        \n                                \n                                \n                                        \n                                            rowData\n                                        \n                                \n                            \n                        \n                    \n                \n            \n        \n\n\n\n            \n                Properties\n                    \n                        \n                                \n                                    \n                                        \n                                        pickNum\n                                            \n                                                \n                                            \n                                        \n                                    \n                                \n                                \n                                    \n                                        pickNum:         number\n\n                                    \n                                \n\n\n                                    \n                                        \n                                            Type :         number\n\n                                        \n                                    \n\n\n\n\n\n                        \n                    \n                    \n                        \n                                \n                                    \n                                        \n                                        rowData\n                                            \n                                                \n                                            \n                                        \n                                    \n                                \n                                \n                                    \n                                        rowData:         string\n\n                                    \n                                \n\n\n                                    \n                                        \n                                            Type :         string\n\n                                        \n                                    \n\n\n\n\n\n                        \n                    \n            \n    \n\n\n    \n        import { Draft } from \"../../core/model/datatypes\"\nimport { initDraft } from \"../../core/model/drafts\";\n\n/** @interface\n * PlayerState represents the Draft Player as an FSM\n * @param draft The Draft currently loaded by the weaver\n * @param row which row of the draft the weaving is at\n * @param weaving whether or not the TC2 is actually running, or the weaver is just previewing the draft\n * @param numPicks the number of rows (picks) that have been sent to the loom so far (because the TC2 needs to receive this as part of the pick data)\n * @param pedal the name (mapped function) of the pedal that triggered this state change\n */\nexport interface PlayerState {\n  draft: Draft,\n  row: number,\n  pedal: string,\n  weaving: boolean,\n  numPicks: number,\n}\n\nexport function copyState(init: PlayerState): PlayerState {\n  return Object.assign({}, init);\n}\n\nexport function initState(): PlayerState { \n  return {\n    draft: initDraft(),\n    row: 0,\n    pedal: \"\",\n    weaving: false,\n    numPicks: 0\n}};\n\nexport interface WeavingPick {\n  pickNum: number,\n  rowData: string\n}\n    \n\n\n\n\n\n\n\n\n\n                   \n    \n         results matching \"\"\n        \n    \n    \n        No results matching \"\"\n    \n\n"},"interfaces/WeavingPick-1.html":{"url":"interfaces/WeavingPick-1.html","title":"interface - WeavingPick-1","body":"\n                   \n\n\n\n\n\n\n\n\n\n\n\n\n\n\n  Interfaces\n  \n  WeavingPick\n\n\n\n        \n            Info\n        \n        \n            Source\n        \n\n\n\n    \n        \n            File\n        \n        \n            src/app/player/model/player.ts\n        \n\n\n\n\n        \n            Index\n            \n                \n                    \n                        \n                            Properties\n                        \n                    \n                    \n                        \n                            \n                                \n                                        \n                                            pickNum\n                                        \n                                \n                                \n                                        \n                                            rowData\n                                        \n                                \n                            \n                        \n                    \n                \n            \n        \n\n\n\n            \n                Properties\n                    \n                        \n                                \n                                    \n                                        \n                                        pickNum\n                                            \n                                                \n                                            \n                                        \n                                    \n                                \n                                \n                                    \n                                        pickNum:         number\n\n                                    \n                                \n\n\n                                    \n                                        \n                                            Type :         number\n\n                                        \n                                    \n\n\n\n\n\n                        \n                    \n                    \n                        \n                                \n                                    \n                                        \n                                        rowData\n                                            \n                                                \n                                            \n                                        \n                                    \n                                \n                                \n                                    \n                                        rowData:         string\n\n                                    \n                                \n\n\n                                    \n                                        \n                                            Type :         string\n\n                                        \n                                    \n\n\n\n\n\n                        \n                    \n            \n    \n\n\n    \n        import { Draft } from \"../../core/model/datatypes\"\nimport { initDraft } from \"../../core/model/drafts\";\n\n/** @interface\n * PlayerState represents the Draft Player as an FSM\n * @param draft The Draft currently loaded by the weaver\n * @param row which row of the draft the weaving is at\n * @param weaving whether or not the TC2 is actually running, or the weaver is just previewing the draft\n * @param numPicks the number of rows (picks) that have been sent to the loom so far (because the TC2 needs to receive this as part of the pick data)\n * @param pedal the name (mapped function) of the pedal that triggered this state change\n */\nexport interface PlayerState {\n  draft: Draft,\n  row: number,\n  pedal: string,\n  weaving: boolean,\n  numPicks: number,\n}\n\nexport function copyState(init: PlayerState): PlayerState {\n  return Object.assign({}, init);\n}\n\nexport function initState(): PlayerState { \n  return {\n    draft: initDraft(),\n    row: 0,\n    pedal: \"\",\n    weaving: false,\n    numPicks: 0\n}};\n\nexport interface WeavingPick {\n  pickNum: number,\n  rowData: string,\n}\n\nexport interface WeavingLog {\n  draft: Draft,\n  shortDraft: Draft,\n  states: Array,\n}\n    \n\n\n\n\n\n\n\n\n\n                   \n    \n         results matching \"\"\n        \n    \n    \n        No results matching \"\"\n    \n\n"},"components/WeavingStateComponent.html":{"url":"components/WeavingStateComponent.html","title":"component - WeavingStateComponent","body":"\n                   \n\n\n\n\n\n  Components\n  \n  WeavingStateComponent\n\n\n\n        \n            Info\n        \n        \n            Source\n        \n        \n            Template\n        \n        \n            Styles\n        \n        \n            DOM Tree\n        \n\n\n\n    \n    File\n\n\n    src/app/player/weaving-state/weaving-state.component.ts\n\n\n\n\n\n    \n        Implements\n    \n    \n                    OnInit\n    \n\n\n\n    Metadata\n    \n        \n\n\n\n\n\n\n\n\n\n\n\n            \n                selector\n                app-weaving-state\n            \n\n            \n                styleUrls\n                ./weaving-state.component.scss\n            \n\n\n\n            \n                templateUrl\n                ./weaving-state.component.html\n            \n\n\n\n\n\n\n\n\n        \n    \n\n\n    \n    Index\n    \n        \n                \n                    \n                        Properties\n                    \n                \n                \n                    \n                        \n                            \n                                cx\n                            \n                            \n                                draft_set\n                            \n                            \n                                draftCanvas\n                            \n                            \n                                ink\n                            \n                            \n                                mixerElement\n                            \n                            \n                                ownElement\n                            \n                            \n                                    Public\n                                pds\n                            \n                            \n                                    Public\n                                pls\n                            \n                        \n                    \n                \n\n                \n                    \n                        Methods\n                    \n                \n                \n                    \n                        \n                            \n                                drawCell\n                            \n                            \n                                drawDraft\n                            \n                            \n                                drawProgressBar\n                            \n                            \n                                ngAfterViewInit\n                            \n                            \n                                ngOnInit\n                            \n                        \n                    \n                \n\n                \n                    \n                        Inputs\n                    \n                \n                \n                    \n                        \n                            \n                                default_cell\n                            \n                            \n                                draft\n                            \n                        \n                    \n                \n\n\n\n\n        \n    \n\n\n    \n    Constructor\n        \n            \n                \n                    \nconstructor(pls: PlayerService, pds: PedalsService)\n                    \n                \n                        \n                            \n                                Defined in src/app/player/weaving-state/weaving-state.component.ts:23\n                            \n                        \n\n                \n                    \n                            \n                                    Parameters :\n                                    \n                                        \n                                            \n                                                Name\n                                                    Type\n                                                Optional\n                                            \n                                        \n                                        \n                                                \n                                                        pls\n                                                  \n                                                        \n                                                                        PlayerService\n                                                        \n                                                  \n                                                    \n                                                            No\n                                                    \n                                                    \n                                                \n                                                \n                                                        pds\n                                                  \n                                                        \n                                                                        PedalsService\n                                                        \n                                                  \n                                                    \n                                                            No\n                                                    \n                                                    \n                                                \n                                        \n                                    \n                            \n                    \n                \n            \n        \n\n\n    \n    Inputs\n        \n            \n                \n                    \n                        \n                        default_cell\n                    \n                \n                \n                    \n                        Type :         number\n\n                    \n                \n                        \n                            \n                                    Defined in src/app/player/weaving-state/weaving-state.component.ts:15\n                            \n                        \n            \n        \n        \n            \n                \n                    \n                        \n                        draft\n                    \n                \n                \n                    \n                        Type :         Draft\n\n                    \n                \n                        \n                            \n                                    Defined in src/app/player/weaving-state/weaving-state.component.ts:16\n                            \n                        \n            \n        \n\n\n\n\n    \n    \n    \n        Methods\n    \n    \n        \n            \n                \n                    \n                    \n                        drawCell\n                        \n                    \n                \n            \n            \n                \ndrawCell(cell_size: number, i: number, j: number, usecolor: boolean, flipY: boolean)\n                \n            \n\n\n            \n                \n                    Defined in src/app/player/weaving-state/weaving-state.component.ts:78\n                \n            \n\n\n            \n                \n\n                    \n                        Parameters :\n                        \n                        \n                            \n                                \n                                    Name\n                                    Type\n                                    Optional\n                                    Default value\n                                \n                            \n                            \n                                \n                                    cell_size\n                                    \n                                                number\n                                    \n\n                                    \n                                        No\n                                    \n\n                                    \n                                    \n\n                                \n                                \n                                    i\n                                    \n                                                number\n                                    \n\n                                    \n                                        No\n                                    \n\n                                    \n                                    \n\n                                \n                                \n                                    j\n                                    \n                                                number\n                                    \n\n                                    \n                                        No\n                                    \n\n                                    \n                                    \n\n                                \n                                \n                                    usecolor\n                                    \n                                                boolean\n                                    \n\n                                    \n                                        No\n                                    \n\n                                    \n                                    \n\n                                \n                                \n                                    flipY\n                                    \n                                                boolean\n                                    \n\n                                    \n                                        No\n                                    \n\n                                    \n                                        true\n                                    \n\n                                \n                            \n                        \n                    \n                    \n                    \n                    \n                        Returns :         void\n\n                    \n                    \n                        \n                    \n                \n            \n        \n    \n    \n        \n            \n                \n                    \n                    \n                        drawDraft\n                        \n                    \n                \n            \n            \n                \ndrawDraft(flipY: boolean)\n                \n            \n\n\n            \n                \n                    Defined in src/app/player/weaving-state/weaving-state.component.ts:53\n                \n            \n\n\n            \n                \n                    COPIED FROM palette/subdraft\ndraw whetever is stored in the this.pls.draft object to the screen\n\n\n                    \n                        Parameters :\n                        \n                        \n                            \n                                \n                                    Name\n                                    Type\n                                    Optional\n                                    Default value\n                                \n                            \n                            \n                                \n                                    flipY\n                                    \n                                                boolean\n                                    \n\n                                    \n                                        No\n                                    \n\n                                    \n                                        true\n                                    \n\n                                \n                            \n                        \n                    \n                    \n                    \n                    \n                        Returns :         void\n\n                    \n                    \n                        \n                    \n                \n            \n        \n    \n    \n        \n            \n                \n                    \n                    \n                        drawProgressBar\n                        \n                    \n                \n            \n            \n                \ndrawProgressBar(cell_size: number, i: number, width: number, flipY: boolean)\n                \n            \n\n\n            \n                \n                    Defined in src/app/player/weaving-state/weaving-state.component.ts:102\n                \n            \n\n\n            \n                \n\n                    \n                        Parameters :\n                        \n                        \n                            \n                                \n                                    Name\n                                    Type\n                                    Optional\n                                    Default value\n                                \n                            \n                            \n                                \n                                    cell_size\n                                    \n                                                number\n                                    \n\n                                    \n                                        No\n                                    \n\n                                    \n                                    \n\n                                \n                                \n                                    i\n                                    \n                                                number\n                                    \n\n                                    \n                                        No\n                                    \n\n                                    \n                                    \n\n                                \n                                \n                                    width\n                                    \n                                                number\n                                    \n\n                                    \n                                        No\n                                    \n\n                                    \n                                    \n\n                                \n                                \n                                    flipY\n                                    \n                                                boolean\n                                    \n\n                                    \n                                        No\n                                    \n\n                                    \n                                        true\n                                    \n\n                                \n                            \n                        \n                    \n                    \n                    \n                    \n                        Returns :         void\n\n                    \n                    \n                        \n                    \n                \n            \n        \n    \n    \n        \n            \n                \n                    \n                    \n                        ngAfterViewInit\n                        \n                    \n                \n            \n            \n                \nngAfterViewInit()\n                \n            \n\n\n            \n                \n                    Defined in src/app/player/weaving-state/weaving-state.component.ts:34\n                \n            \n\n\n            \n                \n\n                    \n                        Returns :         void\n\n                    \n                \n            \n        \n    \n    \n        \n            \n                \n                    \n                    \n                        ngOnInit\n                        \n                    \n                \n            \n            \n                \nngOnInit()\n                \n            \n\n\n            \n                \n                    Defined in src/app/player/weaving-state/weaving-state.component.ts:32\n                \n            \n\n\n            \n                \n\n                    \n                        Returns :         void\n\n                    \n                \n            \n        \n    \n\n    \n    \n    \n        Properties\n    \n    \n        \n            \n                \n                    \n                    \n                        cx\n                        \n                    \n                \n            \n                \n                    \n                        Type :         any\n\n                    \n                \n                    \n                        \n                                Defined in src/app/player/weaving-state/weaving-state.component.ts:22\n                        \n                    \n\n\n        \n    \n    \n        \n            \n                \n                    \n                    \n                        draft_set\n                        \n                    \n                \n            \n                \n                    \n                        Type :         boolean\n\n                    \n                \n                \n                    \n                        Default value : false\n                    \n                \n                    \n                        \n                                Defined in src/app/player/weaving-state/weaving-state.component.ts:18\n                        \n                    \n\n\n        \n    \n    \n        \n            \n                \n                    \n                    \n                        draftCanvas\n                        \n                    \n                \n            \n                \n                    \n                        Type :     HTMLCanvasElement\n\n                    \n                \n                    \n                        \n                                Defined in src/app/player/weaving-state/weaving-state.component.ts:21\n                        \n                    \n\n\n        \n    \n    \n        \n            \n                \n                    \n                    \n                        ink\n                        \n                    \n                \n            \n                \n                    \n                        Type :         string\n\n                    \n                \n                \n                    \n                        Default value : 'neq'\n                    \n                \n                    \n                        \n                                Defined in src/app/player/weaving-state/weaving-state.component.ts:23\n                        \n                    \n\n\n        \n    \n    \n        \n            \n                \n                    \n                    \n                        mixerElement\n                        \n                    \n                \n            \n                \n                    \n                        Type :     HTMLElement\n\n                    \n                \n                    \n                        \n                                Defined in src/app/player/weaving-state/weaving-state.component.ts:20\n                        \n                    \n\n\n        \n    \n    \n        \n            \n                \n                    \n                    \n                        ownElement\n                        \n                    \n                \n            \n                \n                    \n                        Type :     HTMLElement\n\n                    \n                \n                    \n                        \n                                Defined in src/app/player/weaving-state/weaving-state.component.ts:19\n                        \n                    \n\n\n        \n    \n    \n        \n            \n                \n                    \n                    \n                            Public\n                        pds\n                        \n                    \n                \n            \n                \n                    \n                        Type :         PedalsService\n\n                    \n                \n                    \n                        \n                                Defined in src/app/player/weaving-state/weaving-state.component.ts:27\n                        \n                    \n\n\n        \n    \n    \n        \n            \n                \n                    \n                    \n                            Public\n                        pls\n                        \n                    \n                \n            \n                \n                    \n                        Type :         PlayerService\n\n                    \n                \n                    \n                        \n                                Defined in src/app/player/weaving-state/weaving-state.component.ts:26\n                        \n                    \n\n\n        \n    \n\n\n\n\n\n    \n        import { Component, Input, Output, OnInit} from '@angular/core';\nimport { PlayerService } from '../player.service';\nimport { MaterialsService } from '../../core/provider/materials.service';\nimport { Draft } from '../../core/model/datatypes';\nimport { wefts, warps, isUp, isSet } from '../../core/model/drafts';\nimport { PedalsService } from '../provider/pedals.service';\n\n@Component({\n  selector: 'app-weaving-state',\n  templateUrl: './weaving-state.component.html',\n  styleUrls: ['./weaving-state.component.scss']\n})\nexport class WeavingStateComponent implements OnInit {\n\n  @Input()  default_cell: number;\n  @Input('draft') active_draft: Draft;\n\n  draft_set: boolean = false;\n  ownElement: HTMLElement;\n  mixerElement: HTMLElement;\n  draftCanvas: HTMLCanvasElement;\n  cx: any;\n  ink = 'neq'; //can be or, and, neq, not, splice\n\n  constructor(\n    public pls: PlayerService,\n    public pds: PedalsService,\n  ) { \n    this.default_cell = 10;\n  }\n\n  ngOnInit(): void {}\n\n  ngAfterViewInit() {\n    this.ownElement = document.getElementById('player-container');\n    this.mixerElement = document.querySelector('.mat-drawer-container');\n    console.log(\"init w/ element refs \", this.ownElement, this.mixerElement);\n    this.draftCanvas =  document.getElementById('active-draft-canvas');\n    this.cx = this.draftCanvas.getContext(\"2d\");\n\n    this.pls.redraw.on('redraw', () => {\n      console.log(\"redrawing \", this.pls.state);\n      this.drawDraft();\n      // this.resizeContainer();\n    });\n\n  }\n  /**\n   * COPIED FROM palette/subdraft\n   * draw whetever is stored in the this.pls.draft object to the screen\n   * @returns \n   */\n   drawDraft(flipY: boolean = true) {\n\n    if(this.draftCanvas === undefined) return;\n    this.cx = this.draftCanvas.getContext(\"2d\");\n   \n    if(this.pls.draft === null) {\n      this.draftCanvas.width = 0;\n      this.draftCanvas.height = 0;\n\n    } else {\n      this.draft_set = true;\n      this.draftCanvas.width = (warps(this.pls.draft.drawdown)+2) * this.default_cell;\n      this.draftCanvas.height = wefts(this.pls.draft.drawdown) * this.default_cell;\n\n      for (let i = 0; i \n    \n\n    \n        \n  \n    \n      \n        Loom: Online\n        \n      \n      \n        Loom: Offline\n      \n    \n\n    \n      Warps\n      \n    \n\n    \n        Draft Tiling\n    \n\n    \n      \n        Start Weaving\n        Stop Weaving\n      \n    \n    \n    \n      Pedals \n      \n        \n          \n          {{p.id}}\n          \n        \n      \n    \n\n  \n\n  \n      Draft\n      \n      \n      \n  \n\n\n    \n\n    \n                \n                    ./weaving-state.component.scss\n                \n                .first-row { \n  flex-wrap: wrap;\n  display: flex;\n  align-items: flex-start;\n  flex-basis: 100%;\n}\n\n.loom-block, .draft-block {\n  display: inline-block;\n}\n\n.draft-block{\n  height: inherit; \n  flex-wrap: nowrap;\n  flex: 1;\n}\n\n.draft-scroll{\n  max-width: 1255px;\n  max-height: 370px;\n  overflow: scroll;\n}\n\n.break{\n  flex-basis: 100%\n}\n\n.player-field-header {\n  padding: 14px;\n  margin: unset;\n  background: #3f51b5;\n  color: #ffffff;\n}\n\n.pedal-field-header {\n  padding: 10px;\n  margin: unset;\n  //background: #3f51b5;\n  margin-bottom: 5px;\n  color: #0a0000;\n}\n\n\n.loom-field, .pedals-field, .draft-field, .op-field {\n  display: block;\n  margin-top: 10px;\n  margin-bottom: 5px;\n}\n\n.online {\n  background-color: rgb(58, 255, 19);\n  color: #222222;\n}\n\n.offline {\n  background-color: rgb(150, 0, 0);\n  color: #ffffff;\n}\n\n.pedal-array, .active-draft, .status-row {\n  display: flex;\n  flex-direction: row;\n}\n\n.pedal-array {\n  margin: 10px;\n}\n\n.pedal-box {\n  background-color: #bbc5ff;\n  margin-right: 10px;\n  margin-left: 10px;\n}\n\n.pedal-box, .data-display, #loom-container {\n  padding: 10px;\n}\n\n.pedal-state {\n  font-size: x-small;\n  color: #444444;\n}\n\n#loom-container {\n  padding-right: 20px;\n}\n\n#draft-container {\n  background-color: rgb(214, 214, 214);\n}\n\n#active-draft-canvas {\n  padding: 10px;\n}\n\n.pedal-box-row > .mat-form-field, .mat-option {\n  width: 130px;\n}\n\n.pedal-field, .pedal-field-label {\n  padding: 2px;\n}\n\n.mat-button {\n  background-color: #ff4081;\n  color: white;\n  width: inherit;\n  margin-left: 10px;\n  margin-right: 10px;\n}\n\n.mat-button.mat-button-disabled {\n  background-color: #fd6d9d;\n  color: rgba(255, 255, 255, 0.50);\n  \n}\n\n.mat-expansion-panel-header, \n.mat-expansion-panel-header.mat-expanded:focus {\n  background: #121f6b;\n}\n\n.mat-expansion-panel-body {\n  padding: 0px;\n}\n\n.mat-expansion-panel, .mat-accordion, .mat-expansion-panel-header,\n.mat-accordion .mat-expansion-panel:last-of-type, \n.mat-accordion .mat-expansion-panel:first-of-type  {\n  border: #ffffff 1px;\n  border-radius: 0pt;\n  border-bottom-left-radius: 0pt;\n  border-bottom-right-radius: 0pt;\n  border-top-left-radius: 0pt;\n  border-top-right-radius: 0pt;\n  border-bottom: 0pt;\n}\n\n.mat-expansion-panel-header:hover, \n.mat-expansion-panel-header.mat-expanded:hover,\n.mat-expansion-panel:not(.mat-expanded), \n.mat-expansion-panel-header:hover:not([aria-disabled=true])   {\n  background: #566be2;\n}\n\n.mat-expansion-panel-header-title, .mat-expansion-indicator{\n  color: white;\n}\n    \n\n    \n        \n        \n            \n                Legend\n            \n            \n                Html element\n            \n            \n                Component\n            \n            \n                Html element with directive\n            \n        \n    \n\n    \n\n\n\n\n\n\n        var COMPONENT_TEMPLATE = '                    Loom: Online                            Loom: Offline                    Warps                      Draft Tiling                      Start Weaving        Stop Weaving                        Pedals                                   {{p.id}}                                      Draft                    '\n    var COMPONENTS = [{'name': 'ConnectionComponent', 'selector': 'app-connection'},{'name': 'DraftdetailComponent', 'selector': 'app-draftdetail'},{'name': 'ImageComponent', 'selector': 'app-image'},{'name': 'InletComponent', 'selector': 'app-inlet'},{'name': 'MixerComponent', 'selector': 'app-mixer'},{'name': 'MixerViewComponent', 'selector': 'app-mixerview'},{'name': 'NoteComponent', 'selector': 'app-note'},{'name': 'OperationComponent', 'selector': 'app-operation'},{'name': 'OpHelpModal', 'selector': 'app-ophelp'},{'name': 'OpsComponent', 'selector': 'app-ops'},{'name': 'OpSequencerComponent', 'selector': 'app-op-sequencer'},{'name': 'PaletteComponent', 'selector': 'app-palette'},{'name': 'ParameterComponent', 'selector': 'app-parameter'},{'name': 'PlayerComponent', 'selector': 'app-player'},{'name': 'SnackbarComponent', 'selector': 'app-snackbar'},{'name': 'SubdraftComponent', 'selector': 'app-subdraft'},{'name': 'VirtualPedalsComponent', 'selector': 'app-virtual-pedals'},{'name': 'WeavingStateComponent', 'selector': 'app-weaving-state'}];\n    var DIRECTIVES = [{'name': 'MarqueeComponent', 'selector': 'app-marquee'},{'name': 'SelectionComponent', 'selector': 'app-selection'}];\n    var ACTUAL_COMPONENT = {'name': 'WeavingStateComponent'};\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n                   \n    \n         results matching \"\"\n        \n    \n    \n        No results matching \"\"\n    \n\n"},"interfaces/YarnPath.html":{"url":"interfaces/YarnPath.html","title":"interface - YarnPath","body":"\n                   \n\n\n\n\n\n\n\n\n\n\n\n\n\n\n  Interfaces\n  \n  YarnPath\n\n\n\n        \n            Info\n        \n        \n            Source\n        \n\n\n\n    \n        \n            File\n        \n        \n            src/app/core/model/datatypes/yarnsim.ts\n        \n\n\n            \n                Description\n            \n            \n                Used to draw on screen paths, refers to x, y coordiantes relative to the draft simulation\nUsed only in yarn sim\n\n            \n\n\n        \n            Index\n            \n                \n                    \n                        \n                            Properties\n                        \n                    \n                    \n                        \n                            \n                                \n                                        \n                                            draft_ndx\n                                        \n                                \n                                \n                                        \n                                            material_id\n                                        \n                                \n                                \n                                        \n                                            verticies\n                                        \n                                \n                            \n                        \n                    \n                \n            \n        \n\n\n\n            \n                Properties\n                    \n                        \n                                \n                                    \n                                        \n                                        draft_ndx\n                                            \n                                                \n                                            \n                                        \n                                    \n                                \n                                \n                                    \n                                        draft_ndx:         number\n\n                                    \n                                \n\n\n                                    \n                                        \n                                            Type :         number\n\n                                        \n                                    \n\n\n\n\n\n                        \n                    \n                    \n                        \n                                \n                                    \n                                        \n                                        material_id\n                                            \n                                                \n                                            \n                                        \n                                    \n                                \n                                \n                                    \n                                        material_id:         number\n\n                                    \n                                \n\n\n                                    \n                                        \n                                            Type :         number\n\n                                        \n                                    \n\n\n\n\n\n                        \n                    \n                    \n                        \n                                \n                                    \n                                        \n                                        verticies\n                                            \n                                                \n                                            \n                                        \n                                    \n                                \n                                \n                                    \n                                        verticies:         Array\n\n                                    \n                                \n\n\n                                    \n                                        \n                                            Type :         Array\n\n                                        \n                                    \n\n\n\n\n\n                        \n                    \n            \n    \n\n\n    \n        export interface Vertex {\n  x_pcent: number;\n  y: number;\n}\n\n/**\n * Used to draw on screen paths, refers to x, y coordiantes relative to the draft simulation\n * Used only in yarn sim\n * @param draft_ndx - the row id within the draft of this yarn\n * @param material_id the material id at this row\n * @param verticies - list of points that form this path\n */\nexport interface YarnPath {\n\tdraft_ndx: number;\n  material_id: number;\n  verticies: Array;\n}\n\n/**\n * describes the relationship between weft rows along the same warp\n */\nexport type crossType = \n \t{t:boolean, b:boolean} |\n  {t:null, b:null} | //\"FLOAT\",\n  {t:null, b:true} | //\"UNSET_UNDER\"\n  {t:null, b:false} | //\"UNSET_OVER\"\n  {t:true, b:null} | //\"UNDER_UNSET\"\n  {t:false, b:null} | //\"OVER_UNSET\"\n  {t:false, b:true} | //\"OVER_UNDER\",\n  {t:true, b:false}; //\"UNDER_OVER\", \n\n\n/**\n * A yarn cross describes the relationship betwen two draft cells\n * read from top to bottom. This is used within the sparce \n * draft representation, stores only \"warp\" crossings\n */\nexport interface Crossing {\n  j: number, \n  type: crossType;\n}\n    \n\n\n\n\n\n\n\n\n\n                   \n    \n         results matching \"\"\n        \n    \n    \n        No results matching \"\"\n    \n\n"},"dependencies.html":{"url":"dependencies.html","title":"package-dependencies - dependencies","body":"\n                   \n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n    \n        Dependencies\n    \n    \n        \n            @angular/animations : ^13.1.1\n        \n            @angular/cdk : ^13.1.1\n        \n            @angular/common : ^13.1.1\n        \n            @angular/compiler : ^13.1.1\n        \n            @angular/core : ^13.1.1\n        \n            @angular/fire : ^7.0.4\n        \n            @angular/forms : ^13.1.1\n        \n            @angular/material : ^13.1.1\n        \n            @angular/platform-browser : ^13.1.1\n        \n            @angular/platform-browser-dynamic : ^13.1.1\n        \n            @angular/router : ^13.1.1\n        \n            @fortawesome/fontawesome-free : ^6.1.1\n        \n            @ngrx/effects : ^13.0.2\n        \n            @ngrx/entity : ^13.0.2\n        \n            @ngrx/store : ^13.0.2\n        \n            @ngrx/store-devtools : ^13.0.2\n        \n            @types/lodash : ^4.14.149\n        \n            @types/webgl2 : ^0.0.6\n        \n            bulma : ^0.8.0\n        \n            canvas2image : ^1.0.5\n        \n            compdoc : ^0.0.1\n        \n            core-js : ^3.6.4\n        \n            firebase : ^9.4.0\n        \n            lodash : ^4.17.15\n        \n            mathjs : >=7.5.1\n        \n            ngx-color-picker : ^11.0.0\n        \n            rxfire : ^6.0.0\n        \n            rxjs : ^6.5.4\n        \n            tar : >=5.0.10\n        \n            tslib : ^2.3.1\n        \n            zone.js : ~0.11.4\n    \n\n\n\n\n\n\n\n                   \n    \n         results matching \"\"\n        \n    \n    \n        No results matching \"\"\n    \n\n"},"miscellaneous/functions.html":{"url":"miscellaneous/functions.html","title":"miscellaneous-functions - functions","body":"\n                   \n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n  Miscellaneous\n  Functions\n\n\n\n    Index\n    \n        \n            \n                \n                    \n                        \n                            buildTreeOp   (src/.../operation.ts)\n                        \n                        \n                            copyState   (src/.../state.ts)\n                        \n                        \n                            copyState   (src/.../player.ts)\n                        \n                        \n                            formatName   (src/.../op_definitions.ts)\n                        \n                        \n                            formatName   (src/.../formatting.ts)\n                        \n                        \n                            getDefaultParams   (src/.../operation.ts)\n                        \n                        \n                            getDraftsFromInputs   (src/.../operation.ts)\n                        \n                        \n                            getInletsFromInputs   (src/.../operation.ts)\n                        \n                        \n                            getParamsFromInputs   (src/.../operation.ts)\n                        \n                        \n                            getParamValues   (src/.../params.ts)\n                        \n                        \n                            initState   (src/.../state.ts)\n                        \n                        \n                            initState   (src/.../player.ts)\n                        \n                        \n                            makeBlankChainOp   (src/.../op_mappings.ts)\n                        \n                        \n                            makeChainOp   (src/.../op_mappings.ts)\n                        \n                        \n                            makeOpSequencer   (src/.../sequencer.ts)\n                        \n                        \n                            makePairedOp   (src/.../op_mappings.ts)\n                        \n                        \n                            makeSystemsUnique   (src/.../system.ts)\n                        \n                        \n                            makeTopoFactory   (src/.../topology.ts)\n                        \n                        \n                            newMapIndex   (src/.../mappings.service.ts)\n                        \n                        \n                            playerOpFrom   (src/.../op_mappings.ts)\n                        \n                        \n                            playerOpFromTree   (src/.../op_mappings.ts)\n                        \n                        \n                            regexValidator   (src/.../parameter.component.ts)\n                        \n                        \n                            transferSystemsAndShuttles   (src/.../formatting.ts)\n                        \n                    \n                \n            \n        \n    \n\n\n    src/app/mixer/model/operation.ts\n    \n        \n        \n            \n                \n                    \n                    \n                        buildTreeOp\n                        \n                    \n                \n            \n            \n                \nbuildTreeOp(base: GenericOp)\n                \n            \n\n\n\n\n            \n                \n\n                    \n                        Parameters :\n                        \n                        \n                            \n                                \n                                    Name\n                                    Type\n                                    Optional\n                                \n                            \n                            \n                                \n                                    base\n                                    \n                                            GenericOp\n                                    \n\n                                    \n                                        No\n                                    \n\n\n                                \n                            \n                        \n                    \n                    \n                    \n                    \n                        Returns :         TreeOperation\n\n                    \n                    \n                        \n                    \n                \n            \n        \n    \n    \n        \n            \n                \n                    \n                    \n                        getDefaultParams\n                        \n                    \n                \n            \n            \n                \ngetDefaultParams(op)\n                \n            \n\n\n\n\n            \n                \n\n                    \n                        Parameters :\n                        \n                        \n                            \n                                \n                                    Name\n                                    Optional\n                                \n                            \n                            \n                                \n                                    op\n\n                                    \n                                        No\n                                    \n\n\n                                \n                            \n                        \n                    \n                    \n                    \n                    \n                        Returns :         Array\n\n                    \n                    \n                        \n                    \n                \n            \n        \n    \n    \n        \n            \n                \n                    \n                    \n                        getDraftsFromInputs\n                        \n                    \n                \n            \n            \n                \ngetDraftsFromInputs(inputs: Array)\n                \n            \n\n\n\n\n            \n                \n\n                    \n                        Parameters :\n                        \n                        \n                            \n                                \n                                    Name\n                                    Type\n                                    Optional\n                                \n                            \n                            \n                                \n                                    inputs\n                                    \n                                            Array\n                                    \n\n                                    \n                                        No\n                                    \n\n\n                                \n                            \n                        \n                    \n                    \n                    \n                    \n                        Returns :         Array\n\n                    \n                    \n                        \n                    \n                \n            \n        \n    \n    \n        \n            \n                \n                    \n                    \n                        getInletsFromInputs\n                        \n                    \n                \n            \n            \n                \ngetInletsFromInputs(inputs: Array, n: number)\n                \n            \n\n\n\n\n            \n                \n\n                    \n                        Parameters :\n                        \n                        \n                            \n                                \n                                    Name\n                                    Type\n                                    Optional\n                                \n                            \n                            \n                                \n                                    inputs\n                                    \n                                            Array\n                                    \n\n                                    \n                                        No\n                                    \n\n\n                                \n                                \n                                    n\n                                    \n                                                number\n                                    \n\n                                    \n                                        No\n                                    \n\n\n                                \n                            \n                        \n                    \n                    \n                    \n                    \n                        Returns :         InletDrafts\n\n                    \n                    \n                        \n                    \n                \n            \n        \n    \n    \n        \n            \n                \n                    \n                    \n                        getParamsFromInputs\n                        \n                    \n                \n            \n            \n                \ngetParamsFromInputs(inputs: Array)\n                \n            \n\n\n\n\n            \n                \n\n                    \n                        Parameters :\n                        \n                        \n                            \n                                \n                                    Name\n                                    Type\n                                    Optional\n                                \n                            \n                            \n                                \n                                    inputs\n                                    \n                                            Array\n                                    \n\n                                    \n                                        No\n                                    \n\n\n                                \n                            \n                        \n                    \n                    \n                    \n                    \n                        Returns :         Array\n\n                    \n                    \n                        \n                    \n                \n            \n        \n    \n    src/app/player/model/state.ts\n    \n        \n        \n            \n                \n                    \n                    \n                        copyState\n                        \n                    \n                \n            \n            \n                \ncopyState(init: PlayerState)\n                \n            \n\n\n\n\n            \n                \n\n                    \n                        Parameters :\n                        \n                        \n                            \n                                \n                                    Name\n                                    Type\n                                    Optional\n                                \n                            \n                            \n                                \n                                    init\n                                    \n                                                PlayerState\n                                    \n\n                                    \n                                        No\n                                    \n\n\n                                \n                            \n                        \n                    \n                    \n                    \n                    \n                        Returns :         PlayerState\n\n                    \n                    \n                        \n                    \n                \n            \n        \n    \n    \n        \n            \n                \n                    \n                    \n                        initState\n                        \n                    \n                \n            \n            \n                \ninitState()\n                \n            \n\n\n\n\n            \n                \n\n                    \n                        Returns :         PlayerState\n\n                    \n                \n            \n        \n    \n    src/app/player/model/player.ts\n    \n        \n        \n            \n                \n                    \n                    \n                        copyState\n                        \n                    \n                \n            \n            \n                \ncopyState(init: PlayerState)\n                \n            \n\n\n\n\n            \n                \n\n                    \n                        Parameters :\n                        \n                        \n                            \n                                \n                                    Name\n                                    Type\n                                    Optional\n                                \n                            \n                            \n                                \n                                    init\n                                    \n                                                PlayerState\n                                    \n\n                                    \n                                        No\n                                    \n\n\n                                \n                            \n                        \n                    \n                    \n                    \n                    \n                        Returns :         PlayerState\n\n                    \n                    \n                        \n                    \n                \n            \n        \n    \n    \n        \n            \n                \n                    \n                    \n                        initState\n                        \n                    \n                \n            \n            \n                \ninitState()\n                \n            \n\n\n\n\n            \n                \n\n                    \n                        Returns :         PlayerState\n\n                    \n                \n            \n        \n    \n    src/app/mixer/model/op_definitions.ts\n    \n        \n        \n            \n                \n                    \n                    \n                        formatName\n                        \n                    \n                \n            \n            \n                \nformatName(drafts: Array, op_name: string)\n                \n            \n\n\n\n\n            \n                \n\n                    \n                        Parameters :\n                        \n                        \n                            \n                                \n                                    Name\n                                    Type\n                                    Optional\n                                \n                            \n                            \n                                \n                                    drafts\n                                    \n                                            Array\n                                    \n\n                                    \n                                        No\n                                    \n\n\n                                \n                                \n                                    op_name\n                                    \n                                                string\n                                    \n\n                                    \n                                        No\n                                    \n\n\n                                \n                            \n                        \n                    \n                    \n                    \n                    \n                        Returns :         string\n\n                    \n                    \n                        \n                    \n                \n            \n        \n    \n    src/app/mixer/model/operation/formatting.ts\n    \n        \n        \n            \n                \n                    \n                    \n                        formatName\n                        \n                    \n                \n            \n            \n                \nformatName(drafts: Array, op_name: string)\n                \n            \n\n\n\n\n            \n                \n\n                    \n                        Parameters :\n                        \n                        \n                            \n                                \n                                    Name\n                                    Type\n                                    Optional\n                                \n                            \n                            \n                                \n                                    drafts\n                                    \n                                            Array\n                                    \n\n                                    \n                                        No\n                                    \n\n\n                                \n                                \n                                    op_name\n                                    \n                                                string\n                                    \n\n                                    \n                                        No\n                                    \n\n\n                                \n                            \n                        \n                    \n                    \n                    \n                    \n                        Returns :         string\n\n                    \n                    \n                        \n                    \n                \n            \n        \n    \n    \n        \n            \n                \n                    \n                    \n                        transferSystemsAndShuttles\n                        \n                    \n                \n            \n            \n                \ntransferSystemsAndShuttles(d: Draft, drafts: Array, params: any, type: string)\n                \n            \n\n\n\n\n            \n                \n                    transfers data about systems and shuttles from input drafts to output drafts.\n\n\n                    \n                        Parameters :\n                        \n                        \n                            \n                                \n                                    Name\n                                    Type\n                                    Optional\n                                    Description\n                                \n                            \n                            \n                                \n                                    d\n                                    \n                                                Draft\n                                    \n\n                                    \n                                        No\n                                    \n\n\n                                    \n                                        the output draft\n\n                                    \n                                \n                                \n                                    drafts\n                                    \n                                            Array\n                                    \n\n                                    \n                                        No\n                                    \n\n\n                                    \n                                    \n                                \n                                \n                                    params\n                                    \n                                                any\n                                    \n\n                                    \n                                        No\n                                    \n\n\n                                    \n                                    \n                                \n                                \n                                    type\n                                    \n                                                string\n                                    \n\n                                    \n                                        No\n                                    \n\n\n                                    \n                                        how to handle the transfer (first - use the first input data, interlace, layer)\n\n                                    \n                                \n                            \n                        \n                    \n                    \n                    \n                \n            \n        \n    \n    src/app/mixer/model/operation/params.ts\n    \n        \n        \n            \n                \n                    \n                    \n                        getParamValues\n                        \n                    \n                \n            \n            \n                \ngetParamValues(input: Array)\n                \n            \n\n\n\n\n            \n                \n                    Utility function to extract values from an array of Params\n\n\n                    \n                        Parameters :\n                        \n                        \n                            \n                                \n                                    Name\n                                    Type\n                                    Optional\n                                    Description\n                                \n                            \n                            \n                                \n                                    input\n                                    \n                                            Array\n                                    \n\n                                    \n                                        No\n                                    \n\n\n                                    \n                                        Array of OperationParams, any type\n\n                                    \n                                \n                            \n                        \n                    \n                    \n                    \n                    \n                        Returns :         Array\n\n                    \n                    \n                        Array of ParamValues\n\n                    \n                \n            \n        \n    \n    src/app/player/model/op_mappings.ts\n    \n        \n        \n            \n                \n                    \n                    \n                        makeBlankChainOp\n                        \n                    \n                \n            \n            \n                \nmakeBlankChainOp(p?: number)\n                \n            \n\n\n\n\n            \n                \n\n                    \n                        Parameters :\n                        \n                        \n                            \n                                \n                                    Name\n                                    Type\n                                    Optional\n                                \n                            \n                            \n                                \n                                    p\n                                    \n                                                number\n                                    \n\n                                    \n                                        Yes\n                                    \n\n\n                                \n                            \n                        \n                    \n                    \n                    \n                    \n                        Returns :         ChainOp\n\n                    \n                    \n                        \n                    \n                \n            \n        \n    \n    \n        \n            \n                \n                    \n                    \n                        makeChainOp\n                        \n                    \n                \n            \n            \n                \nmakeChainOp(ops: Array, p?: number)\n                \n            \n\n\n\n\n            \n                \n\n                    \n                        Parameters :\n                        \n                        \n                            \n                                \n                                    Name\n                                    Type\n                                    Optional\n                                \n                            \n                            \n                                \n                                    ops\n                                    \n                                            Array\n                                    \n\n                                    \n                                        No\n                                    \n\n\n                                \n                                \n                                    p\n                                    \n                                                number\n                                    \n\n                                    \n                                        Yes\n                                    \n\n\n                                \n                            \n                        \n                    \n                    \n                    \n                    \n                        Returns :         ChainOp\n\n                    \n                    \n                        \n                    \n                \n            \n        \n    \n    \n        \n            \n                \n                    \n                    \n                        makePairedOp\n                        \n                    \n                \n            \n            \n                \nmakePairedOp(p: number, op: PlayerOp)\n                \n            \n\n\n\n\n            \n                \n\n                    \n                        Parameters :\n                        \n                        \n                            \n                                \n                                    Name\n                                    Type\n                                    Optional\n                                \n                            \n                            \n                                \n                                    p\n                                    \n                                                number\n                                    \n\n                                    \n                                        No\n                                    \n\n\n                                \n                                \n                                    op\n                                    \n                                                PlayerOp\n                                    \n\n                                    \n                                        No\n                                    \n\n\n                                \n                            \n                        \n                    \n                    \n                    \n                    \n                        Returns :         PairedOp\n\n                    \n                    \n                        \n                    \n                \n            \n        \n    \n    \n        \n            \n                \n                    \n                    \n                        playerOpFrom\n                        \n                    \n                \n            \n            \n                \nplayerOpFrom(op: GenericOp, params?: Array)\n                \n            \n\n\n\n\n            \n                \n\n                    \n                        Parameters :\n                        \n                        \n                            \n                                \n                                    Name\n                                    Type\n                                    Optional\n                                \n                            \n                            \n                                \n                                    op\n                                    \n                                            GenericOp\n                                    \n\n                                    \n                                        No\n                                    \n\n\n                                \n                                \n                                    params\n                                    \n                                            Array\n                                    \n\n                                    \n                                        Yes\n                                    \n\n\n                                \n                            \n                        \n                    \n                    \n                    \n                \n            \n        \n    \n    \n        \n            \n                \n                    \n                    \n                        playerOpFromTree\n                        \n                    \n                \n            \n            \n                \nplayerOpFromTree(op: PlayableTreeOp)\n                \n            \n\n\n\n\n            \n                \n\n                    \n                        Parameters :\n                        \n                        \n                            \n                                \n                                    Name\n                                    Type\n                                    Optional\n                                \n                            \n                            \n                                \n                                    op\n                                    \n                                                PlayableTreeOp\n                                    \n\n                                    \n                                        No\n                                    \n\n\n                                \n                            \n                        \n                    \n                    \n                    \n                \n            \n        \n    \n    src/app/player/model/sequencer.ts\n    \n        \n        \n            \n                \n                    \n                    \n                        makeOpSequencer\n                        \n                    \n                \n            \n            \n                \nmakeOpSequencer(conf: number, sel_fwd: number, sel_back?: number, start_ops?: Array)\n                \n            \n\n\n\n\n            \n                \n\n                    \n                        Parameters :\n                        \n                        \n                            \n                                \n                                    Name\n                                    Type\n                                    Optional\n                                    Default value\n                                \n                            \n                            \n                                \n                                    conf\n                                    \n                                                number\n                                    \n\n                                    \n                                        No\n                                    \n\n                                    \n                                        0\n                                    \n\n                                \n                                \n                                    sel_fwd\n                                    \n                                                number\n                                    \n\n                                    \n                                        No\n                                    \n\n                                    \n                                        1\n                                    \n\n                                \n                                \n                                    sel_back\n                                    \n                                                number\n                                    \n\n                                    \n                                        Yes\n                                    \n\n                                    \n                                    \n\n                                \n                                \n                                    start_ops\n                                    \n                                            Array\n                                    \n\n                                    \n                                        Yes\n                                    \n\n                                    \n                                    \n\n                                \n                            \n                        \n                    \n                    \n                    \n                \n            \n        \n    \n    src/app/core/model/system.ts\n    \n        \n        \n            \n                \n                    \n                    \n                        makeSystemsUnique\n                        \n                    \n                \n            \n            \n                \nmakeSystemsUnique(systems: Array)\n                \n            \n\n\n\n\n            \n                \n                    takes system maps and makes them all unique by adding a base value to the n+1th map. This helps when interlacing \ndrafts that have different system mappings, and making sure they are each unique. \nThis function will also return standard sized arrays = to the maximum sized input\n\n\n                    \n                        Parameters :\n                        \n                        \n                            \n                                \n                                    Name\n                                    Type\n                                    Optional\n                                    Description\n                                \n                            \n                            \n                                \n                                    systems\n                                    \n                                            Array\n                                    \n\n                                    \n                                        No\n                                    \n\n\n                                    \n                                        the system mappings to compare\n\n                                    \n                                \n                            \n                        \n                    \n                    \n                    \n                    \n                        Returns :     Array>\n\n                    \n                    \n                        \n                    \n                \n            \n        \n    \n    src/app/mixer/model/operation/topology.ts\n    \n        \n        \n            \n                \n                    \n                    \n                        makeTopoFactory\n                        \n                    \n                \n            \n            \n                \nmakeTopoFactory(topo: TopologyName)\n                \n            \n\n\n\n\n            \n                \n\n                    \n                        Parameters :\n                        \n                        \n                            \n                                \n                                    Name\n                                    Type\n                                    Optional\n                                \n                            \n                            \n                                \n                                    topo\n                                    \n                                                TopologyName\n                                    \n\n                                    \n                                        No\n                                    \n\n\n                                \n                            \n                        \n                    \n                    \n                    \n                \n            \n        \n    \n    src/app/player/provider/mappings.service.ts\n    \n        \n        \n            \n                \n                    \n                    \n                        newMapIndex\n                        \n                    \n                \n            \n            \n                \nnewMapIndex()\n                \n            \n\n\n\n\n            \n                \n\n                    \n                        Returns :         MappingIndex\n\n                    \n                \n            \n        \n    \n    src/app/mixer/palette/operation/parameter/parameter.component.ts\n    \n        \n        \n            \n                \n                    \n                    \n                        regexValidator\n                        \n                    \n                \n            \n            \n                \nregexValidator(nameRe: RegExp)\n                \n            \n\n\n\n\n            \n                \n\n                    \n                        Parameters :\n                        \n                        \n                            \n                                \n                                    Name\n                                    Type\n                                    Optional\n                                \n                            \n                            \n                                \n                                    nameRe\n                                    \n                                            RegExp\n                                    \n\n                                    \n                                        No\n                                    \n\n\n                                \n                            \n                        \n                    \n                    \n                    \n                    \n                        Returns :         ValidatorFn\n\n                    \n                    \n                        \n                    \n                \n            \n        \n    \n\n\n\n                   \n    \n         results matching \"\"\n        \n    \n    \n        No results matching \"\"\n    \n\n"},"index.html":{"url":"index.html","title":"getting-started - index","body":"\n                   \n\nAdaCAD\nAdaCAD is a parametric design tools for making woven drafts. It supports a designer in creating drafts by connecting different operations into a model or pipeline that results in drafts. It currently supports outputs and representations for Jacuqard, Floor, and Direct-Tieup Loom. \nYou can use the last release of the tool at https://adacad.org/.\nFor more information about the project and user guides, visit https://adacad.unstable.design/\nAdaCAD does not require any installing or downloading anything on your device, just open the app in your browser (same link as above). \nWe invite anyone interested to hack on AdaCAD, should you wish to dive into the code. If that describes you, read on!\nDevelopment Notes\nThere are three core modules in this repo: \n\nCore: contains components, services, directives, etc. that are used by both weaver (individual draft view) and mixer (generative workspace) modules. Changes to core will affect both deployments and should be checked before pushing.\n\nWeaver: contains all components, services, directives, etc. that are used in \"Fine Tune\" mode for a given draft. This view supports designing on a simulated loom and viewing yarn paths.\n\nMixer: contains all components, services, directives, etc. that are used to design and control the AdaCAD Mixer. This view supports more freeform and parametric experimentation on stitch structures.\n\n\nDeveloper Documentation\nYou can use view automatically generated documentation of our project at http://adacad.unstable.design/AdaCAD/.\nDevelopment Setup\nAdaCAD is built with Angular, a web development framework for progressive web apps. This project was generated with Angular CLI version 7.3.8.\nPrerequisites\n\nNode.JS and Node Package Manager (npm)\nIntermediate JavasScript/TypeScript – if you know JavaScript but not TypeScript, it should be fairly easy to pick up TypeScript basics.\nBasic HTML/CSS – enough to understand how these file types are structured and interact with scripts\n\nInstallation for developers\n\nClone this repository onto your local hard drive.\nOpen your terminal on the local root directory and run npm install to download the requirements. This can take a while.\nOnce installed, run ng serve in the terminal and wait for Angular to compile the app. It should tell you once it's ready. \nNavigate to http://localhost:4200/ and you should see AdaCAD!\n\nCode organization\nThe information here references Angular documentation, such as this page on Angular concepts and architectural patterns.\n\nAn Angular app like AdaCAD is organized into modules (bundles of functionality), each of which has their directory in src/app/. The modules are currently core, mixer, and weaver as described previously.\nEach module provides a \"view\" into the user's design process. The building blocks of these views are Angular components that display some of the data that the user manipulates when designing. Each component has its own subfolder within the module.\nComponents don't handle the actual data manipulation, such as editing drafts or logging the user's history of design operations. For that, we have Angular services, which components use as dependencies. Each module has a provider subdirectory (e.g. src/app/core/provider) that holds the relevant services.\nMany of the files in the repository are automatically generated by the Angular CLI to make each component or service function properly. See the Code scaffolding section for some useful commands when making a new entity.\n\nImportant Files, Vocabulary, and File Locations\nAdaCAD is a large (and growing) application and chances are that you will only need to touch a few files when implementing or augmenting it to your own needs. We are slowly migrating the code from impertive/object-oriented styles to functional/reactive styles, so there is a mixture of styles in this base.  Here, we will list the files in which you can find core information or action points for the program: \n\nCore Data Types:\nYou can find a description of all of the core datatypes used in AdaCAD at /core/model/datatypes.ts.\n\nCell -  This is a single cell or square within the draft. It has two boolean values, one describing the position of the heddle as up/raised or down/lowered, and the second relating to whether or not a weft travels over the warp at this location, which is required for inlay weaving and certain elements of simulation. This value can be set/true or unset/false. \n\nDrawdown - A drawdown is the actual pattern of cells and values that make up the weaving draft. For the purposes of computation the cell at [0][0] always corresponds to the top left corner of the draft in memory.\n\nDraft - A draft stores the drawdown as well as arrays mapping each warp/weft in the draft to a unique material_id, and system_id. Each draft has a unique id, which allows us to crosslink draft inforamation between the model (data) and view components.  \n\nLoom - A Loom is simply a collection of arrays representing the threading, tieup and threadling.\n\nLoomUtil - A loom utility describes a particular kind of loom (jacquard, direct tieup, etc.) and contains all the functions neccessary for producing a threading, tieup and treadling from a drawdown and vice versa. \n\nTree - The tree is a data representation of the relaitonships between operations and drafts within the mixer. It is the \"brain\" of AdaCAD and stores all information relating to screen position of the design components, their current parameter vaues, and their parent/child relationships to other on screen design elements. \n\nOperation - An operation holds all data required to compute specific chagnes to an input draft. The operation object holds information about the kind of data it can receive and how it manipulates that data. All operations available in AdaCAD are described in: (stored in /mixer/provider/operation.service.ts). Adding a new operation at this location adds it to the entire app, without requiring the user to make any custom UI elements for the operation.\n\n\nUI Types:\nThe mixer describes the parametric design view of the AdaCAD interface. This view consists of the following: \n\nPalette - this is the visual space of all the design elements in the mixer\n\nSubdraft - this is the view that holds the visual represeention and provided options on any draft on view in AdaCAD\n\nOperation - this is the view that holds the visual representation of each operation. The operation consists of subtypes: Inlet, which governs the type of input this operation can receive, Parameter, which describe how to represent and validate parameter inputs on screen. The data used to generate inlets and parameters is described by the operation (stored in /mixer/provider/operation.service.ts)\n\nConnection - this is the visual represenation of the connection between drafts and operations. \n\nWeaver - the weaver is separate module from the mixer which stores all the UI features that the user sees and uses when they expand or \"Fine Tune\" a draft.\n\n\nAngular CLI Tips\nCode scaffolding\nThe Angular CLI provides built-in commands to generate the utility files for components, services, and other such things categorized as \"schematics\". These files will be generated in the current directory of the terminal, so navigate to the appropriate subdirectory first.\n\nNew component: \nMake a subfolder in the appropriate module named \nIn this subfolder, run ng generate component \n\n\nNew service:\nIn the appropriate module's provider subfolder, run ng generate service \n\n\nFor other options, refer to the Angular CLI documentation.\n\nDevelopment server\nRun ng serve for a dev server. Navigate to http://localhost:4200/. The app will automatically reload if you save changes in any of the source files.\nBuild\nRun ng build to build the project. The build artifacts will be stored in the dist/ directory. Use the -prod flag for a production build.\nFurther help\nTo get more help on the Angular CLI, use ng help or go to the Angular CLI README.\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n                   \n    \n         results matching \"\"\n        \n    \n    \n        No results matching \"\"\n    \n\n"},"modules.html":{"url":"modules.html","title":"modules - modules","body":"\n                   \n\n\n\n\n    Modules\n\n\n    \n            \n                \n                    \n                        MixerModule\n                    \n                    \n                                \n                                    \n                                        Your browser does not support SVG\n                                    \n                                \n                        \n                            Browse\n                        \n                    \n                \n            \n            \n                \n                    \n                        PlayerModule\n                    \n                    \n                                \n                                    \n                                        Your browser does not support SVG\n                                    \n                                \n                        \n                            Browse\n                        \n                    \n                \n            \n    \n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n                   \n    \n         results matching \"\"\n        \n    \n    \n        No results matching \"\"\n    \n\n"},"overview.html":{"url":"overview.html","title":"overview - overview","body":"\n                   \n\n\n\n    Overview\n\n  \n\n    \n        \n\n\n\n\n\ndependencies\n\ndependencies\n\ncluster_MixerModule\n\n\n\ncluster_MixerModule_declarations\n\n\n\ncluster_MixerModule_imports\n\n\n\ncluster_PlayerModule\n\n\n\ncluster_PlayerModule_declarations\n\n\n\ncluster_PlayerModule_exports\n\n\n\n\nConnectionComponent\n\nConnectionComponent\n\n\n\nMixerModule\n\nMixerModule\n\nMixerModule -->\n\nConnectionComponent->MixerModule\n\n\n\n\n\nDraftdetailComponent\n\nDraftdetailComponent\n\nMixerModule -->\n\nDraftdetailComponent->MixerModule\n\n\n\n\n\nImageComponent\n\nImageComponent\n\nMixerModule -->\n\nImageComponent->MixerModule\n\n\n\n\n\nInletComponent\n\nInletComponent\n\nMixerModule -->\n\nInletComponent->MixerModule\n\n\n\n\n\nMarqueeComponent\n\nMarqueeComponent\n\nMixerModule -->\n\nMarqueeComponent->MixerModule\n\n\n\n\n\nMixerComponent\n\nMixerComponent\n\nMixerModule -->\n\nMixerComponent->MixerModule\n\n\n\n\n\nMixerViewComponent\n\nMixerViewComponent\n\nMixerModule -->\n\nMixerViewComponent->MixerModule\n\n\n\n\n\nNoteComponent\n\nNoteComponent\n\nMixerModule -->\n\nNoteComponent->MixerModule\n\n\n\n\n\nOpHelpModal\n\nOpHelpModal\n\nMixerModule -->\n\nOpHelpModal->MixerModule\n\n\n\n\n\nOperationComponent\n\nOperationComponent\n\nMixerModule -->\n\nOperationComponent->MixerModule\n\n\n\n\n\nOpsComponent\n\nOpsComponent\n\nMixerModule -->\n\nOpsComponent->MixerModule\n\n\n\n\n\nPaletteComponent\n\nPaletteComponent\n\nMixerModule -->\n\nPaletteComponent->MixerModule\n\n\n\n\n\nParameterComponent\n\nParameterComponent\n\nMixerModule -->\n\nParameterComponent->MixerModule\n\n\n\n\n\nSnackbarComponent\n\nSnackbarComponent\n\nMixerModule -->\n\nSnackbarComponent->MixerModule\n\n\n\n\n\nSubdraftComponent\n\nSubdraftComponent\n\nMixerModule -->\n\nSubdraftComponent->MixerModule\n\n\n\n\n\nPlayerModule\n\nPlayerModule\n\nMixerModule -->\n\nPlayerModule->MixerModule\n\n\n\n\n\nPlayerComponent \n\nPlayerComponent \n\nPlayerComponent  -->\n\nPlayerModule->PlayerComponent \n\n\n\n\n\nOpSequencerComponent\n\nOpSequencerComponent\n\nPlayerModule -->\n\nOpSequencerComponent->PlayerModule\n\n\n\n\n\nPlayerComponent\n\nPlayerComponent\n\nPlayerModule -->\n\nPlayerComponent->PlayerModule\n\n\n\n\n\nVirtualPedalsComponent\n\nVirtualPedalsComponent\n\nPlayerModule -->\n\nVirtualPedalsComponent->PlayerModule\n\n\n\n\n\nWeavingStateComponent\n\nWeavingStateComponent\n\nPlayerModule -->\n\nWeavingStateComponent->PlayerModule\n\n\n\n\n\n\n    \n    \n    \n        Zoom in\n        Reset\n        Zoom out\n    \n\n  \n\n    \n        \n            \n                \n                    \n                    \n                        2 Modules\n                    \n                \n            \n        \n        \n            \n                \n                    \n                    18 Components\n                \n            \n        \n        \n            \n                \n                    \n                    2 Directives\n                \n            \n        \n        \n            \n                \n                    \n                    9 Injectables\n                \n            \n        \n        \n            \n                \n                    \n                    30 Classes\n                \n            \n        \n        \n            \n                \n                    \n                    51 Interfaces\n                \n            \n        \n    \n\n\n \n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n                   \n    \n         results matching \"\"\n        \n    \n    \n        No results matching \"\"\n    \n\n"},"properties.html":{"url":"properties.html","title":"package-properties - properties","body":"\n                   \n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n    \n        Properties\n    \n    \n        \n            Version : 2.2.0\n        \n            License : GPL-3.0-or-later\n    \n\n\n\n\n\n                   \n    \n         results matching \"\"\n        \n    \n    \n        No results matching \"\"\n    \n\n"},"miscellaneous/typealiases.html":{"url":"miscellaneous/typealiases.html","title":"miscellaneous-typealiases - typealiases","body":"\n                   \n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n  Miscellaneous\n  Type aliases\n\n\n\n    Index\n    \n        \n            \n                \n                    \n                        \n                            AllRequired   (src/.../topology.ts)\n                        \n                        \n                            AllRequiredPerform   (src/.../topology.ts)\n                        \n                        \n                            BaseNode   (src/.../tree.ts)\n                        \n                        \n                            BoolParam   (src/.../params.ts)\n                        \n                        \n                            BuildableOperation   (src/.../topology.ts)\n                        \n                        \n                            ConstraintDefs   (src/.../topology.ts)\n                        \n                        \n                            ConstraintIndex   (src/.../topology.ts)\n                        \n                        \n                            ConstraintName   (src/.../topology.ts)\n                        \n                        \n                            ConstraintOptions   (src/.../topology.ts)\n                        \n                        \n                            ConstructorArgKeysIndex   (src/.../topology.ts)\n                        \n                        \n                            ConstructorArrayIndex   (src/.../topology.ts)\n                        \n                        \n                            crossType   (src/.../yarnsim.ts)\n                        \n                        \n                            DraftNode   (src/.../tree.ts)\n                        \n                        \n                            DraftParam   (src/.../params.ts)\n                        \n                        \n                            DraftsOptional   (src/.../topology.ts)\n                        \n                        \n                            DraftsOptionalPerform   (src/.../topology.ts)\n                        \n                        \n                            Drawdown   (src/.../drafts.ts)\n                        \n                        \n                            FileParam   (src/.../params.ts)\n                        \n                        \n                            GenericParam   (src/.../params.ts)\n                        \n                        \n                            InletDrafts   (src/.../inlets.ts)\n                        \n                        \n                            Keyed   (src/.../dbnodes.ts)\n                        \n                        \n                            Loom   (src/.../looms.ts)\n                        \n                        \n                            LoomSettings   (src/.../looms.ts)\n                        \n                        \n                            LoomUtil   (src/.../looms.ts)\n                        \n                        \n                            MappingIndex   (src/.../mappings.service.ts)\n                        \n                        \n                            MappingShapes   (src/.../op_mappings.ts)\n                        \n                        \n                            MappingType   (src/.../op_mappings.ts)\n                        \n                        \n                            MultiDraftInput   (src/.../topology.ts)\n                        \n                        \n                            Node   (src/.../tree.ts)\n                        \n                        \n                            NodeValue   (src/.../dbnodes.ts)\n                        \n                        \n                            NoDrafts   (src/.../topology.ts)\n                        \n                        \n                            NoDraftsPerform   (src/.../topology.ts)\n                        \n                        \n                            NoParams   (src/.../topology.ts)\n                        \n                        \n                            NoParamsPerform   (src/.../topology.ts)\n                        \n                        \n                            NumInlet   (src/.../inlets.ts)\n                        \n                        \n                            NumParam   (src/.../params.ts)\n                        \n                        \n                            OpConstraint   (src/.../topology.ts)\n                        \n                        \n                            OpConstructorArgKeys   (src/.../topology.ts)\n                        \n                        \n                            OpConstructorArgs   (src/.../topology.ts)\n                        \n                        \n                            OpConstructorArray   (src/.../topology.ts)\n                        \n                        \n                            Operation   (src/.../operation.ts)\n                        \n                        \n                            Operation   (src/.../operation.service.ts)\n                        \n                        \n                            OperationDescriptors   (src/.../topology.ts)\n                        \n                        \n                            OperationInlet   (src/.../inlets.ts)\n                        \n                        \n                            OpNode   (src/.../tree.ts)\n                        \n                        \n                            OpPerform   (src/.../topology.ts)\n                        \n                        \n                            OpTopology   (src/.../topology.ts)\n                        \n                        \n                            ParamsOptional   (src/.../topology.ts)\n                        \n                        \n                            ParamsOptionalPerform   (src/.../topology.ts)\n                        \n                        \n                            ParamType   (src/.../params.ts)\n                        \n                        \n                            ParamValue   (src/.../params.ts)\n                        \n                        \n                            PedalAction   (src/.../op_mappings.ts)\n                        \n                        \n                            PedalOpMap   (src/.../mappings.service.ts)\n                        \n                        \n                            PedalOpMapping   (src/.../op_mappings.ts)\n                        \n                        \n                            PerformCallSigs   (src/.../topology.ts)\n                        \n                        \n                            PerformDraftInput   (src/.../topology.ts)\n                        \n                        \n                            PerformOutput   (src/.../topology.ts)\n                        \n                        \n                            PlayableTreeOp   (src/.../op_mappings.ts)\n                        \n                        \n                            SelectParam   (src/.../params.ts)\n                        \n                        \n                            SingleInlet   (src/.../inlets.ts)\n                        \n                        \n                            SingleOp   (src/.../op_mappings.ts)\n                        \n                        \n                            StringParam   (src/.../params.ts)\n                        \n                        \n                            TopologyIndex   (src/.../topology.ts)\n                        \n                        \n                            TopologyName   (src/.../topology.ts)\n                        \n                        \n                            TopologyOpIndex   (src/.../topology.ts)\n                        \n                        \n                            YarnCell   (src/.../yarnpaths.ts)\n                        \n                        \n                            YarnMap   (src/.../yarnpaths.ts)\n                        \n                        \n                            YarnSim   (src/.../yarnpaths.ts)\n                        \n                    \n                \n            \n        \n    \n\n\n    src/app/mixer/model/operation/topology.ts\n    \n    \n        \n            \n                \n                    \n                    AllRequired\n                \n            \n            \n                \n                        \n\n                \n            \n        \n    \n    \n        \n            \n                \n                    \n                    AllRequiredPerform\n                \n            \n            \n                \n                        literal type\n\n                \n            \n        \n    \n    \n        \n            \n                \n                    \n                    BuildableOperation\n                \n            \n            \n                \n                        \n\n                \n            \n        \n    \n    \n        \n            \n                \n                    \n                    ConstraintDefs\n                \n            \n            \n                \n                        \n\n                \n            \n        \n    \n    \n        \n            \n                \n                    \n                    ConstraintIndex\n                \n            \n            \n                \n                        literal type\n\n                \n            \n        \n    \n    \n        \n            \n                \n                    \n                    ConstraintName\n                \n            \n            \n                \n                        \n\n                \n            \n        \n    \n    \n        \n            \n                \n                    \n                    ConstraintOptions\n                \n            \n            \n                \n                        \n\n                \n            \n        \n    \n    \n        \n            \n                \n                    \n                    ConstructorArgKeysIndex\n                \n            \n            \n                \n                        \n\n                \n            \n        \n    \n    \n        \n            \n                \n                    \n                    ConstructorArrayIndex\n                \n            \n            \n                \n                        \n\n                \n            \n        \n    \n    \n        \n            \n                \n                    \n                    DraftsOptional\n                \n            \n            \n                \n                        \n\n                \n            \n        \n    \n    \n        \n            \n                \n                    \n                    DraftsOptionalPerform\n                \n            \n            \n                \n                        literal type\n\n                \n            \n        \n    \n    \n        \n            \n                \n                    \n                    MultiDraftInput\n                \n            \n            \n                \n                            InletDrafts | Array\n\n                \n            \n        \n    \n    \n        \n            \n                \n                    \n                    NoDrafts\n                \n            \n            \n                \n                        \n\n                \n            \n        \n    \n    \n        \n            \n                \n                    \n                    NoDraftsPerform\n                \n            \n            \n                \n                    Generic types for perform() functions, describing options \nfor input draft multiplicity (0, 1, N) and param requirement\n\n                \n            \n            \n                \n                        literal type\n\n                \n            \n        \n    \n    \n        \n            \n                \n                    \n                    NoParams\n                \n            \n            \n                \n                        \n\n                \n            \n        \n    \n    \n        \n            \n                \n                    \n                    NoParamsPerform\n                \n            \n            \n                \n                        literal type\n\n                \n            \n        \n    \n    \n        \n            \n                \n                    \n                    OpConstraint\n                \n            \n            \n                \n                        \n\n                \n            \n        \n    \n    \n        \n            \n                \n                    \n                    OpConstructorArgKeys\n                \n            \n            \n                \n                        \n\n                \n            \n        \n    \n    \n        \n            \n                \n                    \n                    OpConstructorArgs\n                \n            \n            \n                \n                        OpConstructorArgKeys | OpConstructorArray\n\n                \n            \n        \n    \n    \n        \n            \n                \n                    \n                    OpConstructorArray\n                \n            \n            \n                \n                        \n\n                \n            \n        \n    \n    \n        \n            \n                \n                    \n                    OperationDescriptors\n                \n            \n            \n                \n                        literal type\n\n                \n            \n        \n    \n    \n        \n            \n                \n                    \n                    OpPerform\n                \n            \n            \n                \n                        \n\n                \n            \n        \n    \n    \n        \n            \n                \n                    \n                    OpTopology\n                \n            \n            \n                \n                        \n\n                \n            \n        \n    \n    \n        \n            \n                \n                    \n                    ParamsOptional\n                \n            \n            \n                \n                        \n\n                \n            \n        \n    \n    \n        \n            \n                \n                    \n                    ParamsOptionalPerform\n                \n            \n            \n                \n                        literal type\n\n                \n            \n        \n    \n    \n        \n            \n                \n                    \n                    PerformCallSigs\n                \n            \n            \n                \n                        literal type\n\n                \n            \n        \n    \n    \n        \n            \n                \n                    \n                    PerformDraftInput\n                \n            \n            \n                \n                    At its heart, an Operation is a very fancy function that outputs a Draft or several Drafts.\nThe function itself is perform(), and the Operation can take inputs in the form of \nDrafts (inlets) or Parameters (params).\n\n                \n            \n            \n                \n                            InletDrafts | Array | Draft | null\n\n                \n            \n        \n    \n    \n        \n            \n                \n                    \n                    PerformOutput\n                \n            \n            \n                \n                            Array | Draft\n\n                \n            \n        \n    \n    \n        \n            \n                \n                    \n                    TopologyIndex\n                \n            \n            \n                \n                        literal type\n\n                \n            \n        \n    \n    \n        \n            \n                \n                    \n                    TopologyName\n                \n            \n            \n                \n                        \n\n                \n            \n        \n    \n    \n        \n            \n                \n                    \n                    TopologyOpIndex\n                \n            \n            \n                \n                        \n\n                \n            \n        \n    \n    src/app/core/model/datatypes/tree.ts\n    \n    \n        \n            \n                \n                    \n                    BaseNode\n                \n            \n            \n                \n                    **************** OBJECTS/TYPES RELATED to OPERATION TREE ****************\n\n                \n            \n            \n                \n                        literal type\n\n                \n            \n        \n    \n    \n        \n            \n                \n                    \n                    DraftNode\n                \n            \n            \n                \n                    a DraftNode is an extension of BaseNode that includes additional params\n\n                \n            \n            \n                \n                        \n\n                \n            \n        \n    \n    \n        \n            \n                \n                    \n                    Node\n                \n            \n            \n                \n                    Allows one to use Node as shorthand for any of these types of nodes\n\n                \n            \n            \n                \n                            BaseNode | OpNode | DraftNode\n\n                \n            \n        \n    \n    \n        \n            \n                \n                    \n                    OpNode\n                \n            \n            \n                \n                    an OpNode is an extension of BaseNode that includes additional params\n\n                \n            \n            \n                \n                        \n\n                \n            \n        \n    \n    src/app/mixer/model/operation/params.ts\n    \n    \n        \n            \n                \n                    \n                    BoolParam\n                \n            \n            \n                \n                    An extension of Param that handles extra requirements for select boolean inputs\n\n                \n            \n            \n                \n                        \n\n                \n            \n        \n    \n    \n        \n            \n                \n                    \n                    DraftParam\n                \n            \n            \n                \n                    UNUSED -- if you want another draft input on an operation, add another inlet\nAn extension of Param that handles extra requirements for select drafts as inputs\n\n                \n            \n            \n                \n                        \n\n                \n            \n        \n    \n    \n        \n            \n                \n                    \n                    FileParam\n                \n            \n            \n                \n                    An extension of Param that handles extra requirements for select file inputs\nCurrently a placeholder should extra data be required.\n\n                \n            \n            \n                \n                        \n\n                \n            \n        \n    \n    \n        \n            \n                \n                    \n                    GenericParam\n                \n            \n            \n                \n                        \n\n                \n            \n        \n    \n    \n        \n            \n                \n                    \n                    NumParam\n                \n            \n            \n                \n                    An extension of Param that handles extra requirements for numeric data inputs\n\n                \n            \n            \n                \n                        \n\n                \n            \n        \n    \n    \n        \n            \n                \n                    \n                    ParamType\n                \n            \n            \n                \n                        \n\n                \n            \n        \n    \n    \n        \n            \n                \n                    \n                    ParamValue\n                \n            \n            \n                \n                        \n\n                \n            \n        \n    \n    \n        \n            \n                \n                    \n                    SelectParam\n                \n            \n            \n                \n                    An extension of Param that handles extra requirements for select list  inputs\n\n                \n            \n            \n                \n                        \n\n                \n            \n        \n    \n    \n        \n            \n                \n                    \n                    StringParam\n                \n            \n            \n                \n                    An extension of Param that handles extra requirements for strings as inputs\n\n                \n            \n            \n                \n                        \n\n                \n            \n        \n    \n    src/app/core/model/datatypes/yarnsim.ts\n    \n    \n        \n            \n                \n                    \n                    crossType\n                \n            \n            \n                \n                    describes the relationship between weft rows along the same warp\n\n                \n            \n            \n                \n                        literal type | literal type | literal type | literal type | literal type | literal type | literal type | literal type\n\n                \n            \n        \n    \n    src/app/core/model/datatypes/drafts.ts\n    \n    \n        \n            \n                \n                    \n                    Drawdown\n                \n            \n            \n                \n                    ***   OBJECTS/TYPES RELATED TO DRAFTS  ******\n\n                \n            \n            \n                \n                            Array>\n\n                \n            \n        \n    \n    src/app/mixer/model/operation/inlets.ts\n    \n    \n        \n            \n                \n                    \n                    InletDrafts\n                \n            \n            \n                \n                        literal type\n\n                \n            \n        \n    \n    \n        \n            \n                \n                    \n                    NumInlet\n                \n            \n            \n                \n                    An extension of Inlet that handles extra requirements for numeric data inputs\n\n                \n            \n            \n                \n                        \n\n                \n            \n        \n    \n    \n        \n            \n                \n                    \n                    OperationInlet\n                \n            \n            \n                \n                    each operation has 0 or more inlets. These are areas where drafts can be entered as inputs to the operation\n\n                \n            \n            \n                \n                        literal type\n\n                \n            \n        \n    \n    \n        \n            \n                \n                    \n                    SingleInlet\n                \n            \n            \n                \n                        \n\n                \n            \n        \n    \n    src/app/player/model/dbnodes.ts\n    \n    \n        \n            \n                \n                    \n                    Keyed\n                \n            \n            \n                \n                        \n\n                \n            \n        \n    \n    \n        \n            \n                \n                    \n                    NodeValue\n                \n            \n            \n                \n                        string | boolean | number | literal type\n\n                \n            \n        \n    \n    src/app/core/model/datatypes/looms.ts\n    \n    \n        \n            \n                \n                    \n                    Loom\n                \n            \n            \n                \n                    a loom is just a threading, tieup, and treadling\n\n                \n            \n            \n                \n                        literal type\n\n                \n            \n        \n    \n    \n        \n            \n                \n                    \n                    LoomSettings\n                \n            \n            \n                \n                    this keeps any user defined preferences associated with a given loom\n\n                \n            \n            \n                \n                        literal type\n\n                \n            \n        \n    \n    \n        \n            \n                \n                    \n                    LoomUtil\n                \n            \n            \n                \n                    \nStore each loom type as a different unit that computes functions based on its particular settings\n\n\n                \n            \n            \n                \n                        literal type\n\n                \n            \n        \n    \n    src/app/player/provider/mappings.service.ts\n    \n    \n        \n            \n                \n                    \n                    MappingIndex\n                \n            \n            \n                \n                        \n\n                \n            \n        \n    \n    \n        \n            \n                \n                    \n                    PedalOpMap\n                \n            \n            \n                \n                        literal type\n\n                \n            \n        \n    \n    src/app/player/model/op_mappings.ts\n    \n    \n        \n            \n                \n                    \n                    MappingShapes\n                \n            \n            \n                \n                        literal type\n\n                \n            \n        \n    \n    \n        \n            \n                \n                    \n                    MappingType\n                \n            \n            \n                \n                        \"pairing\" | \"chain\" | \"sequencer\"\n\n                \n            \n        \n    \n    \n        \n            \n                \n                    \n                    PedalAction\n                \n            \n            \n                \n                        \n\n                \n            \n        \n    \n    \n        \n            \n                \n                    \n                    PedalOpMapping\n                \n            \n            \n                \n                            Array\n\n                \n            \n        \n    \n    \n        \n            \n                \n                    \n                    PlayableTreeOp\n                \n            \n            \n                \n                        \n\n                \n            \n        \n    \n    \n        \n            \n                \n                    \n                    SingleOp\n                \n            \n            \n                \n                            PlayerOp\n\n                \n            \n        \n    \n    src/app/mixer/model/operation.ts\n    \n    \n        \n            \n                \n                    \n                    Operation\n                \n            \n            \n                \n                            TreeOperation\n\n                \n            \n        \n    \n    src/app/mixer/provider/operation.service.ts\n    \n    \n        \n            \n                \n                    \n                    Operation\n                \n            \n            \n                \n                        TreeOperation | DynamicOperation\n\n                \n            \n        \n    \n    src/app/core/model/datatypes/yarnpaths.ts\n    \n    \n        \n            \n                \n                    \n                    YarnCell\n                \n            \n            \n                \n                    a yarn cell holds a binary value representing the direction of the weft yarn through the cell. \nthe binary is organized as NESW and has a 0 if no yarn is at that point, or 1 if there is a yarn at that point\nfor example. 0101 is a weft yarn that travels through the cell, 1100 is a weft yarn that comes in the east (right) size and curves, existing the bottom edge of teh cell\n\n                \n            \n            \n                \n                            number\n\n                \n            \n        \n    \n    \n        \n            \n                \n                    \n                    YarnMap\n                \n            \n            \n                \n                    **** OBJECTS/TYPES FOR SIMULATING YARN PATHS ****\n\n                \n            \n            \n                \n                            Array>\n\n                \n            \n        \n    \n    \n        \n            \n                \n                    \n                    YarnSim\n                \n            \n            \n                \n                    Stores all the simulation information as a 2D array mapped onto the draft\n\n                \n            \n            \n                \n                            Array>\n\n                \n            \n        \n    \n\n\n\n                   \n    \n         results matching \"\"\n        \n    \n    \n        No results matching \"\"\n    \n\n"}}
}
